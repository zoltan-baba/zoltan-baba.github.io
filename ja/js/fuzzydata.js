$(document).ready(function () {indexDict['ja'] = [{ "title" : "入門 ", 
"url" : "入門.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 ", 
"snippet" : "電子メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、最初のビルドを実行することにより、Bitriseを開始します。 BitriseはCI\/CD Platform as a Service（PaaS）であり、主にモバイルアプリの開発に重点を置いています。これは、ソフトウェアプロジェクトの開発と自動化を支援するツールとサービスのコレクションです。 これを使用するには、電子メールまたはGitホスティングプロバイダーを介してサインアップし、リポジトリに接続して、構築を開始できます。...", 
"body" : "電子メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、最初のビルドを実行することにより、Bitriseを開始します。 BitriseはCI\/CD Platform as a Service（PaaS）であり、主にモバイルアプリの開発に重点を置いています。これは、ソフトウェアプロジェクトの開発と自動化を支援するツールとサービスのコレクションです。 これを使用するには、電子メールまたはGitホスティングプロバイダーを介してサインアップし、リポジトリに接続して、構築を開始できます。 " }, 
{ "title" : "Bitriseにサインアップする ", 
"url" : "入門.html#bitriseにサインアップする-78561", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseにサインアップする ", 
"snippet" : "Eメール GitHub GitLab Bitbucket いずれかのGitサービスプロバイダーにサインアップすると、Bitriseアカウントをそのサービスプロバイダーのアカウントに接続することになります。接続されたアカウントを使用すると、Bitriseにそのアカウントの任意のリポジトリへのアクセスを許可できます。 サインアップ後、Bitriseアカウントをサポートされている3つのGitサービスプロバイダーすべてに接続できます。たとえば、GitHubにサインアップした後、BitriseアカウントをGitLabアカウントとBitbucketアカウントの両方に接続して、それらのアカウントにあるリポジ...", 
"body" : "Eメール GitHub GitLab Bitbucket いずれかのGitサービスプロバイダーにサインアップすると、Bitriseアカウントをそのサービスプロバイダーのアカウントに接続することになります。接続されたアカウントを使用すると、Bitriseにそのアカウントの任意のリポジトリへのアクセスを許可できます。 サインアップ後、Bitriseアカウントをサポートされている3つのGitサービスプロバイダーすべてに接続できます。たとえば、GitHubにサインアップした後、BitriseアカウントをGitLabアカウントとBitbucketアカウントの両方に接続して、それらのアカウントにあるリポジトリにアクセスすることもできます。 " }, 
{ "title" : "最初のワークスペースの作成 ", 
"url" : "入門.html#最初のワークスペースの作成-78561", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ 最初のワークスペースの作成 ", 
"snippet" : "サインアップ後、最初の作成を求めるメッセージが表示されます ワークスペース 。ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。アプリを追加してビルドの実行を開始するには、ワークスペースが必要です。あなたはできる： 複数のワークスペースを作成する 。 他のBitriseユーザーからワークスペースに招待できます 。 独自の有料サブスクリプションにサインアップするには、独自のワークスペースを作成する必要があります。私たちをチェックしてください 価格ページ 詳細については。...", 
"body" : "サインアップ後、最初の作成を求めるメッセージが表示されます ワークスペース 。ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。アプリを追加してビルドの実行を開始するには、ワークスペースが必要です。あなたはできる： 複数のワークスペースを作成する 。 他のBitriseユーザーからワークスペースに招待できます 。 独自の有料サブスクリプションにサインアップするには、独自のワークスペースを作成する必要があります。私たちをチェックしてください 価格ページ 詳細については。 " }, 
{ "title" : "新しいアプリを追加する ", 
"url" : "入門.html#新しいアプリを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ 新しいアプリを追加する ", 
"snippet" : "Bitriseに新しいアプリを追加するということは、GitリポジトリをBitriseに接続し、リポジトリのクローンを作成してからビルドできるようにすることを意味します。 をクリックして、いつでも新しいアプリを追加できます + 上部のメニューバーに記号を表示してから、 WebUIに新しいアプリを追加する ドロップダウンメニューから。 初期構成プロセスの一環として、次のことを行います。 アプリがプライベートか、それともプライベートかを判断します 公衆 。プライベートアプリデータは、アプリでの作業に招待されたユーザーのみが利用できます。 リポジトリを指定します。リポジトリは、GitHub、GitLa...", 
"body" : "Bitriseに新しいアプリを追加するということは、GitリポジトリをBitriseに接続し、リポジトリのクローンを作成してからビルドできるようにすることを意味します。 をクリックして、いつでも新しいアプリを追加できます + 上部のメニューバーに記号を表示してから、 WebUIに新しいアプリを追加する ドロップダウンメニューから。 初期構成プロセスの一環として、次のことを行います。 アプリがプライベートか、それともプライベートかを判断します 公衆 。プライベートアプリデータは、アプリでの作業に招待されたユーザーのみが利用できます。 リポジトリを指定します。リポジトリは、GitHub、GitLab、またはBitbucketリポジトリ、手動リポジトリURL、または自己ホスト型GitLabリポジトリのいずれかです。 SSHキーを登録します。これにより、Bitriseがリポジトリにアクセスできるようになるため、ビルドプロセス中にリポジトリのクローンを作成できます。 構築するブランチを指定します。 これはすべて後で変更できます。とにかく、新しいアプリの追加には数分かかるため、いつでも最初からプロセスを実行できます。 プロセスの一環として、Bitriseはリポジトリをスキャンして検証し、スキャンの結果に基づいてアプリの構成をセットアップします。構成ファイルに基づいてアプリのプラットフォームタイプを検出できます。検証が失敗した場合は、アプリを手動で設定できます。 私たちのプロセスの詳細をお読みください 最初のアプリを追加する ガイド。 アプリを追加する際に、入門ガイドを有効にしてヒントを受け取ることもできます。 プロファイル設定 、下にスクロールして 入門ガイド セクションに移動し、トグルを の上 . " }, 
{ "title" : "Webhookとトリガー ", 
"url" : "入門.html#webhookとトリガー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Webhookとトリガー ", 
"snippet" : "新しいアプリを追加するプロセスの一部として、または後でいつでもWebhookを設定できます。 Webhookを使用すると、Bitriseはサードパーティのサービスと通信できます。たとえば、GitHubリポジトリに設定されたBitrise Webhookを使用すると、リポジトリでguilabelが変更されたときに、Bitriseがビルドを自動的に開始できます。 Webhookを設定したら、トリガーを定義して、ビルドを自動的に開始するタイミングを構成します。次の設定を行うことができます。 ビルドをトリガーするイベント：たとえば、guilabelプッシュまたはプルリクエスト。 ビルドをトリガーできる...", 
"body" : "新しいアプリを追加するプロセスの一部として、または後でいつでもWebhookを設定できます。 Webhookを使用すると、Bitriseはサードパーティのサービスと通信できます。たとえば、GitHubリポジトリに設定されたBitrise Webhookを使用すると、リポジトリでguilabelが変更されたときに、Bitriseがビルドを自動的に開始できます。 Webhookを設定したら、トリガーを定義して、ビルドを自動的に開始するタイミングを構成します。次の設定を行うことができます。 ビルドをトリガーするイベント：たとえば、guilabelプッシュまたはプルリクエスト。 ビルドをトリガーできるリポジトリのブランチ：たとえば、 主要 また 開発者 。 これは、たとえば、プルリクエストが開かれたときにビルドを開始するトリガーを設定できることを意味します。 主要 ブランチ。 トリガーが機能するには、Webhookが必要です。続きを読む： 着信Webhookの追加発信Webhookの追加ビルドを自動的にトリガーする" }, 
{ "title" : "ビルドとワークフロー ", 
"url" : "入門.html#ビルドとワークフロー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ビルドとワークフロー ", 
"snippet" : "アプリを追加すると、最初のビルドが自動的に開始されます。ビルドを表示するには、ダッシュボード（Bitriseにログインした後の最初のページ）に移動し、アプリを選択して、 ビルド ビルドにアクセスするためのタブ。 ビルドは一連のジョブであり、アプリのワークフローエディターで定義された順序で実行されます。ジョブはステップと呼ばれ、スクリプト実行のブロックを表します。ステップはワークフローエディターのグラフィカルUIに配置でき、リポジトリのクローン作成、アプリのビルド、テストの実行、相互の値の受け渡し、開発者への通知メッセージの送信など、さまざまなことを実行できます。 詳細については、関連するガイド...", 
"body" : "アプリを追加すると、最初のビルドが自動的に開始されます。ビルドを表示するには、ダッシュボード（Bitriseにログインした後の最初のページ）に移動し、アプリを選択して、 ビルド ビルドにアクセスするためのタブ。 ビルドは一連のジョブであり、アプリのワークフローエディターで定義された順序で実行されます。ジョブはステップと呼ばれ、スクリプト実行のブロックを表します。ステップはワークフローエディターのグラフィカルUIに配置でき、リポジトリのクローン作成、アプリのビルド、テストの実行、相互の値の受け渡し、開発者への通知メッセージの送信など、さまざまなことを実行できます。 詳細については、関連するガイドをご覧ください。 ワークフロー 手順 ビルドとパイプラインワークフローレシピ ワークフローレシピも提供しています。これらは、Bitriseで最も一般的なユースケースのワークフローの例です。 AndroidアプリのワークフローレシピiOSアプリのワークフローレシピクロスプラットフォームアプリのワークフローレシピ一般的なワークフローレシピビルドのログは、ビルドのページで表示できます。 ビルド タブをクリックして、必要なビルドを選択します。 すべてのビルドは、ビルドの完了後に破棄されるクリーンな仮想マシンで実行されます。それらについてもっと読む： マシンを構築する。 " }, 
{ "title" : "テストと展開 ", 
"url" : "入門.html#テストと展開", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ テストと展開 ", 
"snippet" : "アプリのテスト と アプリのデプロイ どちらもステップの助けを借りて行われます。プラットフォームの種類に基づいて、これら両方の機能専用のステップがあります。 Bitriseでは、単体テスト、UIテスト、および実際のデバイステストがすべて可能です。 AndroidのデバイステストiOSのデバイステストAndroidユニットテストXcodeテストの実行アプリがテストされ、ビルドされ、準備ができたら、GooglePlayやAppStoreなどの選択したストアにアプリをすばやくデプロイできます。 また、高速で効率的な展開ソリューションであるShipを確認することもできます。 船での展開。...", 
"body" : "アプリのテスト と アプリのデプロイ どちらもステップの助けを借りて行われます。プラットフォームの種類に基づいて、これら両方の機能専用のステップがあります。 Bitriseでは、単体テスト、UIテスト、および実際のデバイステストがすべて可能です。 AndroidのデバイステストiOSのデバイステストAndroidユニットテストXcodeテストの実行アプリがテストされ、ビルドされ、準備ができたら、GooglePlayやAppStoreなどの選択したストアにアプリをすばやくデプロイできます。 また、高速で効率的な展開ソリューションであるShipを確認することもできます。 船での展開。 " }, 
{ "title" : "Bitriseへの移行 ", 
"url" : "入門/bitriseへの移行.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 ", 
"snippet" : "当社の移行ガイドは、プロジェクトを現在のCI\/CDプロバイダーからBitriseに迅速かつ簡単に移行できるようにすることを目的としています。 当社の移行ガイドは、プロジェクトを現在のCI \/ CDプロバイダーからBitriseに迅速かつ簡単に移行できるようにすることを目的としています。 切り替えを行うためにより説得力が必要な場合、または現在のCI \/ CDソリューションと比較してBitriseが提供するものについて詳しく知りたい場合は、もう探す必要はありません。...", 
"body" : "当社の移行ガイドは、プロジェクトを現在のCI\/CDプロバイダーからBitriseに迅速かつ簡単に移行できるようにすることを目的としています。 当社の移行ガイドは、プロジェクトを現在のCI \/ CDプロバイダーからBitriseに迅速かつ簡単に移行できるようにすることを目的としています。 切り替えを行うためにより説得力が必要な場合、または現在のCI \/ CDソリューションと比較してBitriseが提供するものについて詳しく知りたい場合は、もう探す必要はありません。 " }, 
{ "title" : "JenkinsからBitriseへの移行 ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 ", 
"snippet" : "JenkinsからBitriseに切り替えると、すぐに使える機能を提供するクラウドベースのモバイルファーストCI\/CDプラットフォームを快適に使用できるようになります。 あなたがから切り替えることを探していたなら ジェンキンス Bitriseを利用して、モバイルCI \/ CDフローを高速化し、専任の人員を削減します。もう探す必要はありません。このガイドでは、最も重要なBitriseの機能と、Jenkinsの世界からBitriseにすばやく慣れるための方法を紹介します。...", 
"body" : "JenkinsからBitriseに切り替えると、すぐに使える機能を提供するクラウドベースのモバイルファーストCI\/CDプラットフォームを快適に使用できるようになります。 あなたがから切り替えることを探していたなら ジェンキンス Bitriseを利用して、モバイルCI \/ CDフローを高速化し、専任の人員を削減します。もう探す必要はありません。このガイドでは、最も重要なBitriseの機能と、Jenkinsの世界からBitriseにすばやく慣れるための方法を紹介します。 " }, 
{ "title" : "なぜわざわざ移行するのですか？ ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#なぜわざわざ移行するのですか-", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ なぜわざわざ移行するのですか？ ", 
"snippet" : "JenkinsはセルフホストのCIサーバーであり、ビルドを実行する前にほとんどの機能を手動でインストールして保守する必要があります。また、定期的な保守には専用の人員が必要です。 Bitriseに切り替えると、クラウドベースのモバイルファーストCI \/ CDプラットフォームを快適に使用できるようになります。このプラットフォームは、1つのプラットフォームですべてのモバイル開発ニーズに対応するすぐに使える機能を提供します。これは、次のことを意味します。 何もダウンロードする必要はありません。 オンプレミスサーバーやプラグインは必要ありません。 インフラストラクチャ、ツール、仮想化について心配する必要...", 
"body" : "JenkinsはセルフホストのCIサーバーであり、ビルドを実行する前にほとんどの機能を手動でインストールして保守する必要があります。また、定期的な保守には専用の人員が必要です。 Bitriseに切り替えると、クラウドベースのモバイルファーストCI \/ CDプラットフォームを快適に使用できるようになります。このプラットフォームは、1つのプラットフォームですべてのモバイル開発ニーズに対応するすぐに使える機能を提供します。これは、次のことを意味します。 何もダウンロードする必要はありません。 オンプレミスサーバーやプラグインは必要ありません。 インフラストラクチャ、ツール、仮想化について心配する必要はありません。 Bitriseは上記のすべてを処理します。自動化されたステップの膨大な配列があります、 API 、 CLI 、 最新のスタック ワークフローエディタと呼ばれる非常に直感的なGUIを備えたアドオンは、すべて指先で利用できます。 Bitriseで自動化されたモバイル開発の世界をチェックしてください！ Bitriseがトップ企業の移行をどのように支援したか 方法を学びます EPAM、Nextdoor、Pulselive、Delivery Hero、Signifyなど JenkinsからBitriseに切り替えました。 JenkinsからクラウドCIに切り替えることの5つの主な利点、レポート。 私たちを読む PagSeguroのケーススタディ：CIを最適化するスマートな方法 。 " }, 
{ "title" : "クイックスタートガイド ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#クイックスタートガイド", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ クイックスタートガイド ", 
"snippet" : "このクイックスタートガイドは、最小限の設定でBitriseで最初のビルドを開始するのに役立ちます。 Bitriseにサインアップする まだアカウントをお持ちでない場合。 リポジトリを接続し、任意のプロジェクトで自動的に構成された標準ワークフローを実行します。 生成されたYMLを確認したら、必要な変更を加えます。カスタムコードを選択する場合は、それを スクリプトステップ 、最初のビルドを実行します。または私たちのステップを見つける ステップライブラリ Jenkinsfileの動作を複製します。 新しいワークフローの最初のグリーンビルドに到達したら、構成して他のジョブをセットアップします 自動トリ...", 
"body" : "このクイックスタートガイドは、最小限の設定でBitriseで最初のビルドを開始するのに役立ちます。 Bitriseにサインアップする まだアカウントをお持ちでない場合。 リポジトリを接続し、任意のプロジェクトで自動的に構成された標準ワークフローを実行します。 生成されたYMLを確認したら、必要な変更を加えます。カスタムコードを選択する場合は、それを スクリプトステップ 、最初のビルドを実行します。または私たちのステップを見つける ステップライブラリ Jenkinsfileの動作を複製します。 新しいワークフローの最初のグリーンビルドに到達したら、構成して他のジョブをセットアップします 自動トリガー また スケジュールされたビルド 。 次のような手順でワークフローを最適化する Bitrise.ioキャッシュプル と Bitrise.ioキャッシュプッシュ 。 助けが必要？ お問い合わせ 。 JenkinsとBitriseの主な違いと、Bitriseがモバイル開発プロセスをどのように強化するかに興味がある場合は、以下のガイドに進んでください。 " }, 
{ "title" : "JenkinsとBitriseでのビルドの管理 ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#jenkinsとbitriseでのビルドの管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ JenkinsとBitriseでのビルドの管理 ", 
"snippet" : "Bitriseでのビルドは、アプリで指定されたプロセスです。 ワークフロー 。一連の ステップ 、ワークフローで定義され、によって実行されます Bitrise CLI クリーンな仮想マシン上またはローカルのマシン上。 Bitriseでアプリのビルドを確認できます ダッシュボード またはあなたはあなたの分析することができます ビルドログ アプリ自体で ビルド ページ。...", 
"body" : "Bitriseでのビルドは、アプリで指定されたプロセスです。 ワークフロー 。一連の ステップ 、ワークフローで定義され、によって実行されます Bitrise CLI クリーンな仮想マシン上またはローカルのマシン上。 Bitriseでアプリのビルドを確認できます ダッシュボード またはあなたはあなたの分析することができます ビルドログ アプリ自体で ビルド ページ。 " }, 
{ "title" : "トリガーはJenkinsとBitriseに基づいています ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#トリガーはjenkinsとbitriseに基づいています", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ JenkinsとBitriseでのビルドの管理 \/ トリガーはJenkinsとBitriseに基づいています ", 
"snippet" : "このセクションでは、Bitriseでビルドをトリガーする方法について説明します。 NS 今すぐビルド Jenkinsの関数は 手動でビルドを開始する ：ビルドページのボタンをクリックして、新しいビルドを開始するか、 ビルドを開始\/スケジュールするための高度な構成オプション。 NS 定期的に構築する Jenkinsの機能は ビルドのスケジューリング Bitriseで機能します。 Bitriseの大きな利点は、設定する必要がないことです。 cron Jenkinsの場合と同様に、特定の時間をスケジュールする作業。代わりに、タイムラインから日を選択し、時間と月を入力します。混乱はありません cron...", 
"body" : "このセクションでは、Bitriseでビルドをトリガーする方法について説明します。 NS 今すぐビルド Jenkinsの関数は 手動でビルドを開始する ：ビルドページのボタンをクリックして、新しいビルドを開始するか、 ビルドを開始\/スケジュールするための高度な構成オプション。 NS 定期的に構築する Jenkinsの機能は ビルドのスケジューリング Bitriseで機能します。 Bitriseの大きな利点は、設定する必要がないことです。 cron Jenkinsの場合と同様に、特定の時間をスケジュールする作業。代わりに、タイムラインから日を選択し、時間と月を入力します。混乱はありません cron もう表現！ コードプッシュ、プルリクエスト、GitタグなどのGit関連のイベントについては、次のことができます。 トリガーを構成する Bitriseでビルドを自動的に開始します。 NS 他のプロジェクトの後に構築する Jenkinsの機能は ワークフローを連鎖させる ワークフローが連続して実行されるBitriseで。 Bitriseでワークフローをチェーンするのは驚くほど簡単です。 他のリモートシステムでビルドをトリガーできます。 Webhook。 GitHub、Gitlab、Bitbucket、Gogs、Slack、Visual Studio、Assembla、Deveoと統合されています。 あなたもすることができます ビルドステータスレポートをプッシュバック Gitプロバイダー（GitHub \/ GitLab \/ Bitbucket）に送信します。 " }, 
{ "title" : "Bitriseの環境変数と秘密 ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#bitriseの環境変数と秘密", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ JenkinsとBitriseでのビルドの管理 \/ Bitriseの環境変数と秘密 ", 
"snippet" : "環境変数 （キーと値のペア）は、アプリ、ワークフロー、およびステップレベルで定義できます。 Env Varsを使用すると、多くの興味深いことができます。 それらを公開し、別のステップで再利用します。 EnvVarを別のキーにコピーします。 環境変数を上書きします。 カスタムEnvVarをビルドに追加して、ビルドをパラメーター化します。 ワークフロー固有の環境変数を設定します 環境変数 タブをクリックして、その特定のワークフローでのみ使用可能なEnv変数を使用してワークフローを実行します。 シークレットは環境変数の一種ですが、特別なものです。機密情報を暗号化された形式で非表示にするため、プライベ...", 
"body" : "環境変数 （キーと値のペア）は、アプリ、ワークフロー、およびステップレベルで定義できます。 Env Varsを使用すると、多くの興味深いことができます。 それらを公開し、別のステップで再利用します。 EnvVarを別のキーにコピーします。 環境変数を上書きします。 カスタムEnvVarをビルドに追加して、ビルドをパラメーター化します。 ワークフロー固有の環境変数を設定します 環境変数 タブをクリックして、その特定のワークフローでのみ使用可能なEnv変数を使用してワークフローを実行します。 シークレットは環境変数の一種ですが、特別なものです。機密情報を暗号化された形式で非表示にするため、プライベート入力がビルドログや bitrise.yml 。シークレット環境変数、または略してシークレットは、ワークフローエディターの[シークレット]タブでキーと変数を追加することで設定できます。これもBitriseの組み込み機能であり、次のことを保証します。 あなたの秘密はに表示されていません bitrise.yml 。 あなたの秘密は暗号化されて保存されます。 シークレットを保護することで、UIでシークレットが公開されないようにすることができます。 プルリクエストを使用すると、誰でも回避策を実行してシークレットの値をログに記録できる可能性があるため、PRでシークレットを公開しないことをお勧めします。 " }, 
{ "title" : "キャッシュを構築する ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#キャッシュを構築する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ JenkinsとBitriseでのビルドの管理 \/ キャッシュを構築する ", 
"snippet" : "Bitriseのすべてのビルドはクリーンな仮想マシンで実行されますが、すべてを最初から行う必要があるわけではありません- 重要なファイルの内容をキャッシュして、ビルド間で保存できます。...", 
"body" : "Bitriseのすべてのビルドはクリーンな仮想マシンで実行されますが、すべてを最初から行う必要があるわけではありません- 重要なファイルの内容をキャッシュして、ビルド間で保存できます。 " }, 
{ "title" : "JenkinsプラグインとBitriseステップ ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#jenkinsプラグインとbitriseステップ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ JenkinsプラグインとBitriseステップ ", 
"snippet" : "ステップは、Jenkinsステップと同じようにBitriseで事前定義されたタスクですが、Bitriseステップは直感的なUIで簡単に構成できます。また、リポジトリから独自のステップを取得することもできます。ステップタスクを定義する入力とパラメーターを構成し、ステップが生成する出力を表示\/再利用できます。出力を再利用するということは、同じワークフロー内の別のステップがその出力を入力の1つの値として使用できることを意味します。 Jenkinsはそれ自体が継続的インテグレーションツールであるため、プラグインの助けを借りて他のサービスと統合します。 Jenkinsユーザーは、プラグインを一元化された...", 
"body" : "ステップは、Jenkinsステップと同じようにBitriseで事前定義されたタスクですが、Bitriseステップは直感的なUIで簡単に構成できます。また、リポジトリから独自のステップを取得することもできます。ステップタスクを定義する入力とパラメーターを構成し、ステップが生成する出力を表示\/再利用できます。出力を再利用するということは、同じワークフロー内の別のステップがその出力を入力の1つの値として使用できることを意味します。 Jenkinsはそれ自体が継続的インテグレーションツールであるため、プラグインの助けを借りて他のサービスと統合します。 Jenkinsユーザーは、プラグインを一元化された場所で管理する必要があります。 プラグインを管理する 、それらをグローバルに（Jenkinsサーバーに）インストールしてから、特定のプロジェクトで使用します。 Jenkinsが新しいプラグインバージョンを通知した場合、プラグインを更新するにはサーバーを再起動する必要があるため、Jenkins管理者はビルドを実行しているかどうかをチームに再確認する必要があります。 Jenkinsプラグインでは、最新バージョンしか利用できないため、古いバージョンに戻すことはできません。ただし、Bitriseでは、最初にステップをインストールする必要はありません。Bitriseワークフローでいつでもステップを追加または削除でき、プロジェクトの実行中のビルドがブロックされないためです。必要に応じて、いつでも前のステップバージョンに戻すことができます。 さらに：でワークフローを編集する場合 ワークフローエディター 、で探している機能やプラットフォームに基づいて、ステップを簡単に検索できます。 ステップライブラリ すぐにワークフローに追加します。ワークフローを設定する前にインストールする必要はありません。 独自のカスタムステップを作成してリポジトリに保存し、ワークフローのURLで参照することもできます。 ステップジョリージョーカー：スクリプトステップ ワークフローで実行したいカスタムスクリプトはありますか？を選択 脚本 ステップライブラリからステップし、カスタムコードをに追加します スクリプトの内容 入力。 私たちのステップを発見する 統合 ワークフローを編集するときのページまたは右。 ステップで他に何ができるかを学びましょう： ワークフローへのステップの追加ステップバージョン管理ステップを条件付きで有効または無効にする独自のビットライズステップの開発Jenkinsでfastlaneを使用していますか？ ファストレーンレーンを簡単に配置して、ビットライズでも機能させることができます。あなたがしなければならないのはBitriseのを追加することです 追い越し車線 ワークフローにステップし、レーン名をステップに追加します。ビルドを開始すると、レーンはBitriseで実行されます。 詳細については、次のガイドをご覧ください。 fastlane を Bitrise に統合する. " }, 
{ "title" : "Jenkinsパイプライン-Bitriseワークフロー ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#jenkinsパイプライン-bitriseワークフロー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ Jenkinsパイプライン-Bitriseワークフロー ", 
"snippet" : "Jenkinsパイプラインは Bitriseワークフロー ただし、Bitriseワークフローは管理がはるかに簡単です。既存のワークフローに基づいて新しいワークフローをすばやく作成したり、1つのビルドで複数のワークフローをチェーンしたり、不要になったワークフローを削除したりできます。 ビットライズ ワークフロー テスト、コードサイン、APK \/ ipaのビルド、デプロイなどの一連のステップです。 Bitriseにアプリを追加すると、プロジェクトスキャナーの結果に基づいて作成されたプライマリワークフローが自動的に開始\/トリガーされます。 特定のプロジェクトに対して複数のワークフローを持つことができ...", 
"body" : "Jenkinsパイプラインは Bitriseワークフロー ただし、Bitriseワークフローは管理がはるかに簡単です。既存のワークフローに基づいて新しいワークフローをすばやく作成したり、1つのビルドで複数のワークフローをチェーンしたり、不要になったワークフローを削除したりできます。 ビットライズ ワークフロー テスト、コードサイン、APK \/ ipaのビルド、デプロイなどの一連のステップです。 Bitriseにアプリを追加すると、プロジェクトスキャナーの結果に基づいて作成されたプライマリワークフローが自動的に開始\/トリガーされます。 特定のプロジェクトに対して複数のワークフローを持つことができます。例えば： PRイベントについては、トリガーされるとすぐに実行され、スモークテストなどの基本的なテストのみを実行するワークフローを作成します。 すべてのテストを実行するより充実したワークフローの場合は、別のワークフローを作成して一晩実行するか、6\/12\/24時間間隔でスケジュールすることをお勧めします。 NS ワークフローエディター ワークフローを構成するための主な場所です。ジェンキンス ステージ メインワークフロー内で一緒にチェーンされた複数のビットライズワークフローに相当します。 Bitriseでは、ワークフローエディターを使用すると、おもちゃの列車を次々にチェーンするようにワークフローをチェーンできます。 ワークフローエディターには、モバイル開発を支援するために組み込まれている他の強力な機能があります。 コード署名 ：ワークフローで使用されるすべてのコード署名ファイルを保存および管理するためのワンストップショップ。繰り返しますが、Jenkinsのように最初にコード署名ツールをインストールする必要はありません。ここにもカスタムファイルを保存できます（ 一般的なファイルストレージ セクション）これ 汎用ファイルストレージ ステップはダウンロードできます。 秘密：アプリの秘密の環境変数を確認するか、新しい変数を追加してください。 環境変数：Bitriseの秘密とEnvVarの混乱はありません。それらは別々のタブにきちんと整理されているので、どこが何であるかがわかります。ここにAppEnvVarsまたはワークフロー固有のEnvVarsを追加します。シークレットを$でEnvVarsとして参照することもできます。 トリガー ：トリガーを構成できます。コードプッシュイベント、プルリクエスト、またはタグをすべて設定して、Bitriseでビルドを自動的に開始できます。 スタック ：アプリのデフォルトスタックを確認するか、ドロップダウンメニューから新しいスタックを選択するか、ワークフローの1つに特定のスタックを選択します。 " }, 
{ "title" : "JenkinsとBitriseのダッシュボード ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#jenkinsとbitriseのダッシュボード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ JenkinsとBitriseのダッシュボード ", 
"snippet" : "これは、最初のビルドを開始すると自分自身を見つけるメインのランディングページです。 Bitriseをさらに使い始めると、キューに入れられた最新のビルドとインストールされたプロジェクトのリストが、自分のプロファイルとメンバーのワークスペースとともにすべて1つのページに表示されます。 NS 最新のビルド Bitriseダッシュボードのタブには、最近のすべてのビルドが同様に表示されます。 ビルド履歴 Jenkinsの機能。成功、中止、失敗、実行中など、任意のステータスでフィルタリングできますが、各ビルドにはとにかくステータスが表示されます。 Jenkinsでは、ビルドステータスは ビルドエグゼキュー...", 
"body" : "これは、最初のビルドを開始すると自分自身を見つけるメインのランディングページです。 Bitriseをさらに使い始めると、キューに入れられた最新のビルドとインストールされたプロジェクトのリストが、自分のプロファイルとメンバーのワークスペースとともにすべて1つのページに表示されます。 NS 最新のビルド Bitriseダッシュボードのタブには、最近のすべてのビルドが同様に表示されます。 ビルド履歴 Jenkinsの機能。成功、中止、失敗、実行中など、任意のステータスでフィルタリングできますが、各ビルドにはとにかくステータスが表示されます。 Jenkinsでは、ビルドステータスは ビルドエグゼキュータステータス または青い海で ダッシュボード 。 Bitriseを使用すると、最初からユーザーフレンドリーなグラフィカルインターフェイスが得られますが、Jenkinsでは、最初にプラグインをインストールする必要があります。 Bitriseビルドステータスは両方に表示されます ダッシュボード 、および ビルド アプリのページ。 ビルドキュー ジェンキンスでは キューに入れられたビルド Bitriseで。ビルドをスケジュールして、 高度 のオプション ビルドのスケジューリング 特徴。 ダッシュボードの右側で、すべてのアプリを下に表示できます APPS 。 " }, 
{ "title" : "Bitriseに新しいアプリを追加する ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#bitriseに新しいアプリを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ JenkinsとBitriseのダッシュボード \/ Bitriseに新しいアプリを追加する ", 
"snippet" : "何 新商品 ジェンキンスでは 新しいアプリフローの追加 Bitriseでも WebUI上 また CLIから 。これは高度に自動化されたフローであり、最小限の構成が必要であり、文字通り1分以内に新しいビルドが開始されます。私たちのフローでは、プライバシーの設定、リポジトリの接続、リポジトリアクセスの設定、ブランチの選択、アプリの構成、ビルド構成の設定、 Webhookの構成 。...", 
"body" : "何 新商品 ジェンキンスでは 新しいアプリフローの追加 Bitriseでも WebUI上 また CLIから 。これは高度に自動化されたフローであり、最小限の構成が必要であり、文字通り1分以内に新しいビルドが開始されます。私たちのフローでは、プライバシーの設定、リポジトリの接続、リポジトリアクセスの設定、ブランチの選択、アプリの構成、ビルド構成の設定、 Webhookの構成 。 " }, 
{ "title" : "BitriseのWebhook ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#bitriseのwebhook", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ JenkinsとBitriseのダッシュボード \/ BitriseのWebhook ", 
"snippet" : "BitriseはWebhookを多用しており、アプリをBitriseに接続するときにクリックするだけで有効にできます。初期セットアップ中にWebhookを追加することはすべて理にかなっており、アプリをすばやく高速化しようとするときにこの機能を検索する必要はありません。 つまり、Webhookには次の2つのタイプがあります。 Gitサービスプロバイダーに登録されている着信Webhookは、Bitriseでビルドを自動的にトリガーするために使用されます。 送信Webhookは、ビルドイベントのレポートをSlackなどの他のサービスに送信するために使用されます。それらはウェブサイトまたは経由で追加す...", 
"body" : "BitriseはWebhookを多用しており、アプリをBitriseに接続するときにクリックするだけで有効にできます。初期セットアップ中にWebhookを追加することはすべて理にかなっており、アプリをすばやく高速化しようとするときにこの機能を検索する必要はありません。 つまり、Webhookには次の2つのタイプがあります。 Gitサービスプロバイダーに登録されている着信Webhookは、Bitriseでビルドを自動的にトリガーするために使用されます。 送信Webhookは、ビルドイベントのレポートをSlackなどの他のサービスに送信するために使用されます。それらはウェブサイトまたは経由で追加することができます API。 " }, 
{ "title" : "Jenkinsfile-Bitrise YAML ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#jenkinsfile-bitrise-yaml", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ Jenkinsfile-Bitrise YAML ", 
"snippet" : "Jenkins PipelineはGroovyコードを使用し、Bitriseはより高度に構造化されたYAML形式を使用します。すべてのワークフローは、 bitrise.yml YAML形式のファイル。クリックして編集できます。 bitrise.yml ワークフローエディタのタブ。 あなたは保存することができます bitrise.yml いずれかのアプリのファイル bitrise.io また リポジトリ内 。心配しないでください、あなたの秘密（例えば、資格情報とID）は私たちと一緒に安全です。 現在のをダウンロードすることもできます bitrise.yml アプリの構成を行い、 Bitrise ...", 
"body" : "Jenkins PipelineはGroovyコードを使用し、Bitriseはより高度に構造化されたYAML形式を使用します。すべてのワークフローは、 bitrise.yml YAML形式のファイル。クリックして編集できます。 bitrise.yml ワークフローエディタのタブ。 あなたは保存することができます bitrise.yml いずれかのアプリのファイル bitrise.io また リポジトリ内 。心配しないでください、あなたの秘密（例えば、資格情報とID）は私たちと一緒に安全です。 現在のをダウンロードすることもできます bitrise.yml アプリの構成を行い、 Bitrise CLI。 " }, 
{ "title" : "Jenkinsfile-Bitriseymlファイルの比較 ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#jenkinsfile-bitriseymlファイルの比較", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ Jenkinsfile-Bitrise YAML \/ Jenkinsfile-Bitriseymlファイルの比較 ", 
"snippet" : "JenkinsでJenkinsfile（パイプラインプロジェクト）を使用していて、Bitriseへの切り替えを検討している場合は、JenkinsfileステージをBitriseステップと簡単に一致させることができます。昔ながらのFreestyleプロジェクトを使用している場合は、対応するBitriseStepまたはBitrise関数を使用して構成の設定をマップする必要があります。たとえば、 建てる 次のようなBitriseビルドステップを含むFreestyleプロジェクトのセクション Androidビルド ステップ、またはマップ ビルドトリガー Jenkinsのセクション トリガー Bitri...", 
"body" : "JenkinsでJenkinsfile（パイプラインプロジェクト）を使用していて、Bitriseへの切り替えを検討している場合は、JenkinsfileステージをBitriseステップと簡単に一致させることができます。昔ながらのFreestyleプロジェクトを使用している場合は、対応するBitriseStepまたはBitrise関数を使用して構成の設定をマップする必要があります。たとえば、 建てる 次のようなBitriseビルドステップを含むFreestyleプロジェクトのセクション Androidビルド ステップ、またはマップ ビルドトリガー Jenkinsのセクション トリガー Bitriseの機能。必ずチェックしてください ステップライブラリ より多くのインスピレーションのために。 " }, 
{ "title" : "Bitriseサンプルアプリとそのbitrise.ymlファイル ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#bitriseサンプルアプリとそのbitrise-ymlファイル", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ Jenkinsfile-Bitrise YAML \/ Bitriseサンプルアプリとそのbitrise.ymlファイル ", 
"snippet" : "ここでは、iOS、Android、およびクロスプラットフォームのサンプルプロジェクトを見つけることができます。彼らをチェックしてください bitrise.yml それらの設定を理解するためのファイル。最初のBitriseプロジェクトを作成する際の出発点として、これらを使用できることを願っています。 iOSサンプルアプリ Androidサンプルアプリ ReactNativeサンプルアプリ Flutterサンプルアプリ JenkinsからBitriseへのAndroidアプリの移行：ステップバイステップガイド 私たちをチェックしてください MoatazNabilによるブログ投稿 Androidプロ...", 
"body" : "ここでは、iOS、Android、およびクロスプラットフォームのサンプルプロジェクトを見つけることができます。彼らをチェックしてください bitrise.yml それらの設定を理解するためのファイル。最初のBitriseプロジェクトを作成する際の出発点として、これらを使用できることを願っています。 iOSサンプルアプリ Androidサンプルアプリ ReactNativeサンプルアプリ Flutterサンプルアプリ JenkinsからBitriseへのAndroidアプリの移行：ステップバイステップガイド 私たちをチェックしてください MoatazNabilによるブログ投稿 AndroidプロジェクトをJenkinsからBitriseに移行する方法について。 " }, 
{ "title" : "Jenkinsのマスターとエージェント-ビットライズスタック ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#jenkinsのマスターとエージェント-ビットライズスタック", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ Jenkinsのマスターとエージェント-ビットライズスタック ", 
"snippet" : "スタックは、ビルドの実行に使用する仮想マシンのタイプです。たとえば、ネイティブiOSアプリの場合、最適なスタックはXcodeスタックの1つです。スタックには、必要なすべてのツールがプリインストールされており、すべてのニーズに対応できるように定期的に更新されます。このようにして、特定のプラットフォームでビルドを実行するために、マスターインスタンスとエージェントインスタンスを維持したり、Groovyコードにノードマシンを追加したりする必要はありません。 アプリをBitriseに追加すると、プロジェクトセレクターがプロジェクトのタイプを自動的に検出し、そのプラットフォームタイプに基づいて、デフォルト...", 
"body" : "スタックは、ビルドの実行に使用する仮想マシンのタイプです。たとえば、ネイティブiOSアプリの場合、最適なスタックはXcodeスタックの1つです。スタックには、必要なすべてのツールがプリインストールされており、すべてのニーズに対応できるように定期的に更新されます。このようにして、特定のプラットフォームでビルドを実行するために、マスターインスタンスとエージェントインスタンスを維持したり、Groovyコードにノードマシンを追加したりする必要はありません。 アプリをBitriseに追加すると、プロジェクトセレクターがプロジェクトのタイプを自動的に検出し、そのプラットフォームタイプに基づいて、デフォルトのスタックを追加します。最初のビルドはこのスタックで実行されます。このスタックは、必要なすべてのツールがプリインストールされた仮想マシンです。別のスタックを使用したい場合は、から選択するだけです。 デフォルトのスタック のドロップダウンメニュー スタック タブ。クリックすると 詳しくは リンクをクリックすると、プレインストールされているツールとそのバージョンを確認できます。 公式リリースの直後に最新のXcodeバージョンをサポートします。 私たちの中で システムレポート 各スタックにインストールされているツールとそのバージョンを確認できます。 私たちの詳細 スタック更新ポリシー。 " }, 
{ "title" : "JenkinsとBitriseの人事管理 ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#jenkinsとbitriseの人事管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ JenkinsとBitriseの人事管理 ", 
"snippet" : "あなたが持っているもの 人 Jenkinsのページは、Bitriseの2つの場所にあります（チームがあるか、 ワークスペース 設定）。 あなたはであなたのチームメンバーを見ることができます チーム アプリのタブ。 クリックするとワークスペースのメンバーが表示されます アカウント設定 、次にワークスペースを選択し、 人 左側のタブ。 ワークスペースの目的は、Bitriseでさまざまなアプリで作業している複数の人を簡単に管理できるようにすることです。ワークスペースは無制限の数のアプリを所有でき、ワークスペースの所有者はワークスペースのメンバーを割り当てて、適切と思われるさまざまなアプリで作業するこ...", 
"body" : "あなたが持っているもの 人 Jenkinsのページは、Bitriseの2つの場所にあります（チームがあるか、 ワークスペース 設定）。 あなたはであなたのチームメンバーを見ることができます チーム アプリのタブ。 クリックするとワークスペースのメンバーが表示されます アカウント設定 、次にワークスペースを選択し、 人 左側のタブ。 ワークスペースの目的は、Bitriseでさまざまなアプリで作業している複数の人を簡単に管理できるようにすることです。ワークスペースは無制限の数のアプリを所有でき、ワークスペースの所有者はワークスペースのメンバーを割り当てて、適切と思われるさまざまなアプリで作業することができます。 NS チーム ビットライズでは、同じアプリで作業するすべてのユーザーを意味します。ユーザーはアプリのチームを構成し、アプリで管理できます。 チーム タブ。 に グループ タブでは、削除、グループへの新しいメンバーの追加、アプリへのグループの割り当て、グループの名前変更などのワークスペースメンバーを管理できます。に 人 タブを使用すると、ワークスペースに既に追加されているユーザーを確認でき、必要に応じて、ワークスペースのすべてのグループからメンバーを削除できます。 ワークスペースはグループで構成されます。ワークスペースの所有者は、グループを作成および管理できます。特定のグループをアプリでの作業に割り当てることができます。同じグループのすべてのメンバーは、アプリへの同じレベルのアクセス権を持ちます。 " }, 
{ "title" : "Bitriseでの統合SSO管理 ", 
"url" : "入門/bitriseへの移行/jenkinsからbitriseへの移行.html#bitriseでの統合sso管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ JenkinsからBitriseへの移行 \/ Bitriseでの統合SSO管理 ", 
"snippet" : "JenkinsではSSO管理用の認証プラグインをインストールする必要がありますが、Bitriseではそれは 速度計画 。そのような計画のあるワークスペース SAMLSSOを設定できます Bitriseのワークスペースへの単一のゲートウェイとして。ユーザー名とクレデンシャルを覚える必要はもうありません！ワークスペースの所有者が行う必要があるのは、SAMLSSOプロバイダーでSAMLSSOアプリとしてBitriseをセットアップし、WorkspaceメンバーをBitriseOrgに招待することだけです。手順をガイドするために、さまざまなSAMLSSOプロバイダーへの特定のガイドがあります。...", 
"body" : "JenkinsではSSO管理用の認証プラグインをインストールする必要がありますが、Bitriseではそれは 速度計画 。そのような計画のあるワークスペース SAMLSSOを設定できます Bitriseのワークスペースへの単一のゲートウェイとして。ユーザー名とクレデンシャルを覚える必要はもうありません！ワークスペースの所有者が行う必要があるのは、SAMLSSOプロバイダーでSAMLSSOアプリとしてBitriseをセットアップし、WorkspaceメンバーをBitriseOrgに招待することだけです。手順をガイドするために、さまざまなSAMLSSOプロバイダーへの特定のガイドがあります。 " }, 
{ "title" : "fastlane を Bitrise に統合する ", 
"url" : "入門/bitriseへの移行/fastlane-を-bitrise-に統合する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseへの移行 \/ fastlane を Bitrise に統合する ", 
"snippet" : "あなたはあなたを実行することができます 追い越し車線 ローカルで使用するのと同じコマンドを使用して、Bitrise でレーンを実行します。 Bitrise の自動化されたステップは、レーンに追加機能を提供し、ビルドを高速化します。 fastlane を Bitrise に統合することで得られるメリットは次のとおりです。 私たちの ファストレーンマッチ Step は、プライベート証明書\/プロファイル リポジトリのクローンを作成し、証明書とプロファイルをキーチェーンに登録することで、プロジェクトのコード署名を処理します。 Bitrise では、個別のブランチに対して個別のレーンを自動的に実行できま...", 
"body" : "あなたはあなたを実行することができます 追い越し車線 ローカルで使用するのと同じコマンドを使用して、Bitrise でレーンを実行します。 Bitrise の自動化されたステップは、レーンに追加機能を提供し、ビルドを高速化します。 fastlane を Bitrise に統合することで得られるメリットは次のとおりです。 私たちの ファストレーンマッチ Step は、プライベート証明書\/プロファイル リポジトリのクローンを作成し、証明書とプロファイルをキーチェーンに登録することで、プロジェクトのコード署名を処理します。 Bitrise では、個別のブランチに対して個別のレーンを自動的に実行できます。たとえば、コードをメイン ブランチにプッシュするたびにレーンを実行して、App Store のスクリーンショットとメタデータを更新し、配布バージョンをリリースできます。開発ブランチ用に別のレーンを実行して、自動テストを実行し、QA チームのためにテスト リリースをデプロイできます。ワークフローを複数回複製し、ワークフロー固有の環境変数で特定のワークフローに対して実行するレーンを指定し、自動トリガーを使用して、このブランチ \/ タグ \/ プル リクエストに対して選択するワークフローを定義することができます。 ランニング 追い越し車線 Bitrise では、ワークフローに 1 つのステップを追加し、いくつかのオプションを設定するだけです。方法を見てみましょう！ Apple サービスに接続する するのを忘れないで Apple サービスに接続する ワークフローでこのステップを使用する場合。 追加 追い越し車線 ワークフローに進みます。 の後に挿入されていることを確認してください。 Gitクローン ステップ。以来 追い越し車線 Bitrise のすべての仮想マシンにプリインストールされています。 追い越し車線 ステップにより、必要な 追い越し車線 バージョン。 プロジェクトにコード署名するには、いくつかのオプションから選択できます。 次のような Bitrise のコード署名ステップの 1 つをワークフローに追加します。 証明書とプロファイルのインストーラー 、 iOS コード署名の管理 、 と ファストレーンマッチ .詳細については、私たちをチェックしてください コード署名ガイド . または、コード署名ステップの代わりに fastlane レーン内で fastlane マッチを使用します。必ず次のいずれかを使用してください ファストレーンマッチ レーンで fastlane マッチをステップまたはセットアップしますが、両方を実行しようとしないでください。 クリック ファストレーンステップ 必須フィールドに入力します。 にレーンを追加します ファストレーンレーン 入力。 使用する 作業ディレクトリ フィールド 追い越し車線 ディレクトリがリポジトリのルートにありません。 作業ディレクトリは、あなたの親ディレクトリでなければなりません Fastfile のディレクトリ。たとえば、Fastfile パスが .\/here\/is\/my\/fastlane\/Fastfile 、 そうして Fastfile のディレクトリは .\/here\/is\/my\/fastlane 、だから 作業ディレクトリ する必要があります .\/here\/is\/my . の 実行前に fastlane gem を更新する必要がありますか? あなたが持っている場合、オプションはスキップされます Gemfile の中に work_dir ディレクトリ。 あなたが持っていない場合 Gemfile このオプションが有効になっている場合、ステップは最新のものを使用して実行しようとします 追い越し車線 バージョン。 をセットする 詳細ログを有効にしますか? に yes 失敗したビルドに関するより詳細なログを取得したい場合。 もし ビルド キャッシュに含まれるファイルの収集を有効にする に設定されています yes の場合、ステップは次のキャッシュ アイテムを追加します (存在する場合)。 ポッド - Podfile.lock カルタゴ - Cartfile.resolved Android の依存関係 それでおしまい！ Bitrise がレーンを実行できるようにビルドを開始します。 fastlane への依存を減らす Fastlane への依存を減らしながら、Bitrise エクスペリエンスを強化し、ビルドの速度を上げ、プロセスを簡素化するために使用できるいくつかの手順を確認してください。 Xcode アーカイブ & iOS 用エクスポート : このステップでは、Xcode プロジェクトを .ipa ファイルにアーカイブします。このファイルは、共有したり、テスト デバイスにインストールしたり、App Store Connect にアップロードしたりできます。このステップでは、ほぼゼロの構成でコード署名も自動的にセットアップします。 iOS の Xcode テスト : このステップでは、プロジェクトに含まれるすべての Xcode テストを実行します。 iOS のテスト用の Xcode ビルド 、 iOS デバイスのテスト 、 と Android の仮想デバイス テスト : これらの手順は、デバイス、ユニット、または UI のテストのすべてのニーズに対応します。シミュレータまたは物理デバイスを使用してテストを実行できます。 Google Play デプロイ : この手順を使用して、Android アプリを Google Play にアップロードできます。 " }, 
{ "title" : "Bitriseにサインアップする ", 
"url" : "入門/bitriseにサインアップする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseにサインアップする ", 
"snippet" : "Bitriseにサインアップするには、電子メールアドレスを使用するか、GitHub、Bitbucket、またはGitLabアカウントで自分自身を認証します。 Bitriseにサインアップするには、電子メールアドレスを使用するか、GitHub、Bitbucket、またはGitLabアカウントで自分自身を認証します。 Gitプロバイダーアカウントを使用してサインアップすると、ワンクリックでログインするなど、いくつかの実用的な利点があります。もちろん、これらのプロバイダーによってホストされているリポジトリを再度追加するときに、Gitアカウントを承認する必要はありません。 メールでサインアップ メール...", 
"body" : "Bitriseにサインアップするには、電子メールアドレスを使用するか、GitHub、Bitbucket、またはGitLabアカウントで自分自身を認証します。 Bitriseにサインアップするには、電子メールアドレスを使用するか、GitHub、Bitbucket、またはGitLabアカウントで自分自身を認証します。 Gitプロバイダーアカウントを使用してサインアップすると、ワンクリックでログインするなど、いくつかの実用的な利点があります。もちろん、これらのプロバイダーによってホストされているリポジトリを再度追加するときに、Gitアカウントを承認する必要はありません。 メールでサインアップ メールアドレスでBitriseにサインアップする場合、アドレスに文字を含めることはできませんのでご注意ください + 。 " }, 
{ "title" : "Gitプロバイダーにサインアップする ", 
"url" : "入門/bitriseにサインアップする.html#gitプロバイダーにサインアップする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseにサインアップする \/ Gitプロバイダーにサインアップする ", 
"snippet" : "あなたはからBitriseにサインアップすることができます 無料で始める の右上隅にあるボタン ビットライズ 。それはあなたをに連れて行きます サインアップ ページ。 に サインアップ ページ、下にスクロールして またはサインアップ gitプロバイダーを選択できるセクション。 選択したGitプロバイダーを承認します。 GitHubを選択した場合は、 bitrise-ioを承認する ボタンをクリックすると、Bitriseにリダイレクトされます。 Bitbucketを選択した場合は、 アクセス許可 Bitbucketのボタンをクリックすると、Bitriseにリダイレクトされます。 GitLabを選...", 
"body" : "あなたはからBitriseにサインアップすることができます 無料で始める の右上隅にあるボタン ビットライズ 。それはあなたをに連れて行きます サインアップ ページ。 に サインアップ ページ、下にスクロールして またはサインアップ gitプロバイダーを選択できるセクション。 選択したGitプロバイダーを承認します。 GitHubを選択した場合は、 bitrise-ioを承認する ボタンをクリックすると、Bitriseにリダイレクトされます。 Bitbucketを選択した場合は、 アクセス許可 Bitbucketのボタンをクリックすると、Bitriseにリダイレクトされます。 GitLabを選択した場合は、 承認する ボタンをクリックすると、Bitriseにリダイレクトされます。 ユーザー名とパスワードを選択します。完了したら、をクリックします サインアップ 。 強力なパスワード あなたが提供しなければならないことに注意してください 強力なパスワード これらの要件を満たします。 少なくとも8文字である必要があります。 1つの大文字。 1つの小文字。 1つの番号。 同じ文字を3回以上続けて含めることはできません（aaa）。 メールアドレスやユーザー名を含めることはできません。 受信トレイでBitriseからの確認メールを確認し、そこにある指示に従ってください。確認メールが届かない場合は、 確認メールを再送信 ボタン。 オンボーディングエクスペリエンスをパーソナライズするために、いくつかの質問に答えてください。これまでに使用しているCI \/ CDツールを教えてください。 クリック 終わり 。 Bitriseダッシュボードに移動します。 その後、あなたは転がる準備ができています。ダッシュボードに最初のワークスペースを作成してください！ " }, 
{ "title" : "メールでサインアップ ", 
"url" : "入門/bitriseにサインアップする.html#メールでサインアップ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseにサインアップする \/ メールでサインアップ ", 
"snippet" : "+文字は使用しないでください メールアドレスでBitriseにサインアップする場合、アドレスに文字を含めることはできませんのでご注意ください + 。 あなたはからBitriseにサインアップすることができます 無料で始める の右上隅にあるボタン ビットライズ 。それはあなたをに連れて行きます サインアップ ページ。 メールアドレス、ユーザー名、パスワードを追加します。 強力なパスワード あなたが提供しなければならないことに注意してください 強力なパスワード これらの要件を満たします。 少なくとも8文字である必要があります。 1つの大文字。 1つの小文字。 1つの番号。 同じ文字を3回以上続けて...", 
"body" : "+文字は使用しないでください メールアドレスでBitriseにサインアップする場合、アドレスに文字を含めることはできませんのでご注意ください + 。 あなたはからBitriseにサインアップすることができます 無料で始める の右上隅にあるボタン ビットライズ 。それはあなたをに連れて行きます サインアップ ページ。 メールアドレス、ユーザー名、パスワードを追加します。 強力なパスワード あなたが提供しなければならないことに注意してください 強力なパスワード これらの要件を満たします。 少なくとも8文字である必要があります。 1つの大文字。 1つの小文字。 1つの番号。 同じ文字を3回以上続けて含めることはできません（aaa）。 メールアドレスやユーザー名を含めることはできません。 クリック サインアップ ボタン。 受信トレイでBitriseからの確認メールを確認し、そこにある指示に従ってください。確認メールが届かない場合は、 確認メールを再送信 ボタン。 オンボーディングエクスペリエンスをパーソナライズするために、いくつかの質問に答えてください。これまでに使用しているCI \/ CDツールを教えてください。 クリック 終わり 。 Bitriseダッシュボードに移動します。 " }, 
{ "title" : "SAMLSSOにサインアップする ", 
"url" : "入門/bitriseにサインアップする.html#samlssoにサインアップする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Bitriseにサインアップする \/ SAMLSSOにサインアップする ", 
"snippet" : "Bitriseにサインアップし、ワークスペースを使用してBitriseワークスペースに参加できます。 SAML SSO 。 IdP側では、管理者はユーザーとしてBitrise SAMLSSOアプリのワークスペースにあなたを追加する必要があります。 Bitrise Workspaceの所有者は、から招待状を送信できます。 グループ Bitriseのワークスペースのメニュー。 私たちに行く サインアップ ページ。 クリック SAML ボタン。 あなたはに向けられています 開始する シングル・サインオン ページ。 提供する Bitriseワークスペースの名前 BitriseWorkspaceの所有者...", 
"body" : "Bitriseにサインアップし、ワークスペースを使用してBitriseワークスペースに参加できます。 SAML SSO 。 IdP側では、管理者はユーザーとしてBitrise SAMLSSOアプリのワークスペースにあなたを追加する必要があります。 Bitrise Workspaceの所有者は、から招待状を送信できます。 グループ Bitriseのワークスペースのメニュー。 私たちに行く サインアップ ページ。 クリック SAML ボタン。 あなたはに向けられています 開始する シングル・サインオン ページ。 提供する Bitriseワークスペースの名前 BitriseWorkspaceの所有者から取得したものをクリックします SSOを続行します Bitriseがワークスペースに接続されたSAMLSSOプロバイダーに誘導できるようにします。 SAMLSSOアカウントに関連付けられている資格情報を提供します。 に もうすぐです ページ Eメール フィールドは、SAMLSSOアカウントに登録されている電子メールアドレスに基づいて自動的に入力されます。あなたは提供されたを変更することができます ユーザー名 あなたの好きなように。 クリック サインアップを終了します 。 受信トレイでBitriseからの確認メールを確認し、そこにある指示に従ってください。確認メールが届かない場合は、 確認メールを再送信 ボタン。 オンボーディングエクスペリエンスをパーソナライズするために、いくつかの質問に答えてください。これまでに使用しているCI \/ CDツールを教えてください。 すべてがうまくいけば、ワークスペースのアプリを表示できるBitriseダッシュボードが表示されます。あなたがあなたに行くなら アカウント設定 、参加したばかりのワークスペースが表示されます。 " }, 
{ "title" : "最初のワークスペースの作成 ", 
"url" : "入門/最初のワークスペースの作成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ 最初のワークスペースの作成 ", 
"snippet" : "ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。アプリを追加してビルドを実行できるようにするには、ワークスペースの一部であるか、アプリのチームの外部の貢献者である必要があります。 Bitriseで新しいアカウントを作成すると、すぐに新しいワークスペースを作成するように求められます。 ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。複数のワークスペースを作成したり、他のBitriseユーザーからワークスペースに招待したりできます。 アプリを追加してビルドを実行できるようにするには、ワークスペースの一部...", 
"body" : "ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。アプリを追加してビルドを実行できるようにするには、ワークスペースの一部であるか、アプリのチームの外部の貢献者である必要があります。 Bitriseで新しいアカウントを作成すると、すぐに新しいワークスペースを作成するように求められます。 ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。複数のワークスペースを作成したり、他のBitriseユーザーからワークスペースに招待したりできます。 アプリを追加してビルドを実行できるようにするには、ワークスペースの一部であるか、アプリのチームの外部の貢献者である必要があります。 必要なワークスペースも必要です 有料サブスクリプションプラン Bitriseで。ワークスペースごとに、ワークスペースのアプリが使用できるクレジットの数を決定する異なるサブスクリプションプランを設定できます。 最初のワークスペースを作成するには： Bitriseにログインします。 の中に ワークスペース名 フィールドに、ワークスペースの名前を入力します。 この名前は後で変更できます。 クリック ワークスペースを作成する ボタン。 チームプランとホビープランのどちらかをお選びください。 速度計画 Velocityプランに興味のある方はどうぞ お問い合わせ ！ クリック 申し込む ボタンをクリックして、最初のワークスペースの作成を完了します。 チームの計画 チームプランを選択した場合は、指示に従ってクレジット階層を設定し、支払いの詳細を提供します。詳細については、 価格ページ 。 ワークスペースの所有者になると、アプリの追加を開始できます。 プロファイル設定の編集 ワークスペース " }, 
{ "title" : "最初のアプリを追加する ", 
"url" : "入門/最初のアプリを追加する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ 最初のアプリを追加する ", 
"snippet" : "Bitriseにアプリを追加するということは、ビルドを実行できるようにリポジトリへのアクセスを設定することを意味します。プロジェクトスキャナーはプラットフォームタイプを判別し、アプリをビルドしてデプロイするためのデフォルトのワークフローを生成します。 を追加する アプリ Bitrise へのアクセスとは、ビルドを実行できるようにリポジトリへのアクセスを設定することを意味します。プロセス中に、私たちはまた、 プロジェクトスキャナー アプリのプラットフォーム タイプ (iOS など) を検出し、デフォルトを生成します。 ワークフロー 必要なすべてを備えた 手順 アプリをビルドしてデプロイします。 ...", 
"body" : "Bitriseにアプリを追加するということは、ビルドを実行できるようにリポジトリへのアクセスを設定することを意味します。プロジェクトスキャナーはプラットフォームタイプを判別し、アプリをビルドしてデプロイするためのデフォルトのワークフローを生成します。 を追加する アプリ Bitrise へのアクセスとは、ビルドを実行できるようにリポジトリへのアクセスを設定することを意味します。プロセス中に、私たちはまた、 プロジェクトスキャナー アプリのプラットフォーム タイプ (iOS など) を検出し、デフォルトを生成します。 ワークフロー 必要なすべてを備えた 手順 アプリをビルドしてデプロイします。 現在、次のプラットフォーム\/フレームワークをすぐにサポートしています。 プロジェクトスキャナー プラットフォーム\/フレームワークをサポートするということは、プロジェクトスキャナーがアプリのタイプを検出し、そのタイプに基づいて基本的なBitrise構成をセットアップできることを意味します。ビルド方法に関係なく、他のアプリも追加できますが、手動で構成する必要があります。 アンドロイド iOS リアクトネイティブ フラッター イオン\/コルドバ マックOS このガイドでは、新しいアプリを Bitrise に追加する方法、リポジトリを Bitrise に接続する方法、SSH キーと初期構成を設定する方法について説明します。 ウェブフックを登録する . Bitriseにログインします。 クリック 最初のアプリを追加する ボタン。 下 アカウントを選択してください 、アプリを所有するワークスペースを選択します。 アプリのプライバシーを設定します。 この設定を後で変更することはできません。プライベートにする必要があるにもかかわらず、誤ってアプリをパブリックアプリとして追加したことに気付いた場合は、アプリを削除してから再度追加する必要があります。 プライベートアプリには、あなた、ワークスペースメンバー、およびアプリでの作業に招待されたユーザーのみがアクセスできます。アプリのリポジトリにアクセスするには認証が必要です。 公開アプリ 彼らを暴露する bitrise.yml およびそのビルド ログを全員に送信します。パブリック アプリのビルド URL がある場合は、そのビルド ログを表示して、トラブルシューティングなどに役立てることができます。パブリック アプリは認証を必要とせず、SSH キーを持つことはできません。 Bitrise へのアクセスをソース コード プロバイダーに許可する アプリのリポジトリを選択します。 With the Select remote repository option, you can select a repository from a list of repos from a connected Git provider account. If you do not have a connected Git provider account, you can still select a provider from the dropdown menu and then click Connect account . The Enter URL manually option does not require a connected Git provider account: you can simply enter the URL and proceed to the authentication phase. We strongly recommend using an SSH URL, unless you are setting up a public app . リポジトリの URL あなたはできるでしょう プロジェクトのリポジトリ URL を変更する 後で。アカウントを Git プロバイダー サービスにいつでも接続または切断することもできます。 Gitプロバイダーアカウントを使用してBitriseにサインアップした場合、そのアカウントはすでに接続されており、そこから任意のリポジトリを選択できます。 SSH キーを追加する の中に リポジトリ アクセス メニューの設定 .これはプライベート アプリにのみ関係します。パブリック アプリは SSH キーを持つことができず、認証を必要としません。 いつでも SSH キーを構成する 現時点で有効で機能するSSHキー接続を設定できない場合でも、心配する必要はありません。アプリの追加に進んでください。後でSSH接続を設定できます。 デフォルトのオプションをお勧めします：クリック いいえ、SSHキーを自動追加します 。接続されたソースコードホスティングサービスアカウント（たとえば、GitHubアカウント）には、リポジトリに対する管理者権限が必要です。含まれている場合、BitriseはSSHキーを自動的に追加します。 追加のプライベートリポジトリを使用する必要がある場合、またはリポジトリの管理者権限がない場合は、[ する必要がある ボタン。公開SSHキーをコピーして、リポジトリに追加します。完了したら、をクリックします SSHキーを追加しました 。 独自のSSHキーを使用することもできます。の右側に リポジトリアクセスの設定 セクション、選択 独自のSSHを追加 。パスフレーズなしで、RSASSH秘密鍵を下のフィールドに貼り付けます。ソースコードホスティングサービスで公開鍵を登録する必要があります。 リポジトリのブランチを入力し、をクリックします 次 。 Bitrise はこのブランチで最初のビルドを実行し、Bitrise アプリのデフォルト ブランチとして設定されますが、 この設定は後で変更できます .このブランチには、プロジェクトの構成が含まれている必要があります。 Bitriseがアプリを自動的に構成しようとしている間待ちます。 Bitrise はプロジェクト タイプを検出し、 スタック それに基づくデフォルトのワークフロー。 プロジェクトの種類 プロジェクトタイプの検出は、アプリの初期構成を支援するのに役立ちます。ただし、アプリを追加した後はいつでも、プロジェクトタイプを含むすべての設定を変更できますのでご安心ください。 Bitriseがプロジェクトタイプを正常に検出した場合は、次の手順に進みます。 Bitriseがプロジェクトタイプの検出に失敗した場合、2つのオプションがあります。 プロジェクトスキャナーが失敗する原因となった問題を修正してみてください。私たちが提供するログが役立つかもしれません。選択が完了したら 自動構成を再試行してください 。 選択する スキップして手動で構成する 。プロジェクトの種類を選択し、選択した種類に基づいてプロジェクト構成を設定する必要があります。選択した場合 その他\/マニュアル 、スタックタイプを選択するだけです。 プロジェクトのビルド構成を確認し、をクリックします 準備できました それが終わったら。 正確な構成オプションは、プロジェクトの種類によって異なります。スタックと、選択したスタックのマシン タイプを選択するオプションが常にあります。これらのオプションについてよくわからない場合でも、心配しないでください。 後で変更できます . 必要に応じて、画像をアップロードしてアプリアイコンを追加します。 必要に応じて、これをスキップして後でアイコンを追加できます。 必要に応じて、BitriseがリポジトリにWebhookを設定できるようにします。 するには Webhook が必要です ビルドを自動的にトリガーする .アプリの Webhook はいつでも設定できるので、今はスキップしてかまいません。 Webhook を登録 (またはスキップ) すると、Bitrise はアプリの最初のビルドを自動的に開始します。クリック 終わりました 元に戻る ダッシュボード . " }, 
{ "title" : "iOSアプリ入門 ", 
"url" : "入門/iosアプリ入門.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ iOSアプリ入門 ", 
"snippet" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、iOSアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 iOS向けの開発は必ずしも簡単ではありません。私たちの目的は、iOSをできるだけシンプルにすることです。このガイドでは、iOSアプリをBitriseに追加する方法、Xcodeテストを実行する方法、コード署名ファイルを管理する方法、およびアプリをにデプロイする方法について説明します。 bitrise.io そしてAppStoreへ。 fastlane を Bitrise に統合する ローカルで使用するのと同じコマンドを使用して、Bitri...", 
"body" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、iOSアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 iOS向けの開発は必ずしも簡単ではありません。私たちの目的は、iOSをできるだけシンプルにすることです。このガイドでは、iOSアプリをBitriseに追加する方法、Xcodeテストを実行する方法、コード署名ファイルを管理する方法、およびアプリをにデプロイする方法について説明します。 bitrise.io そしてAppStoreへ。 fastlane を Bitrise に統合する ローカルで使用するのと同じコマンドを使用して、Bitrise で fastlane レーンを実行できます。 Bitrise の自動化されたステップは、レーンに追加機能を提供し、ビルドを高速化します。詳細については、こちらをご覧ください fastlane を Bitrise に統合する . Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する iOSコード署名 iOSの展開 外部テスト用のiOSアプリのデプロイ iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理 " }, 
{ "title" : "BitriseへのiOSアプリの追加 ", 
"url" : "入門/iosアプリ入門.html#bitriseへのiosアプリの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ iOSアプリ入門 \/ BitriseへのiOSアプリの追加 ", 
"snippet" : "Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップするあなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウン...", 
"body" : "Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップするあなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 アプリのプライバシーを次のいずれかに設定します 民間 また 公衆 をクリックします 次 。 プライベート アプリとパブリック アプリ パブリック アプリとプライベート アプリの最も重要な違いは、アプリがパブリックの場合、ビルド URL を知っている全員がビルド ログを表示できることです。 公開アプリ.プライベート アプリを使用すると、誰がアプリにアクセスできるかを完全に制御できます。 リポジトリをホストするGitホスティングサービスを選択してから、プロジェクトをホストする独自のリポジトリを見つけて選択します。 リポジトリアクセスを設定するように求められたら、をクリックします いいえ、SSHキーを自動追加します 。 プロジェクトの構成を含むブランチの名前を入力します- 主要 たとえば、-次にクリックします 次 。 Bitriseがプロジェクトを検証している間待ちます。 構成ファイルを探し、それらに基づいてアプリをセットアップします。 iOSアプリの場合、Xcodeプロジェクトを探しています（ .xcodeproj ）またはXcodeワークスペース（ .xcworkspace ） 道。プロジェクトにSHAREDスキームがない場合、検証は失敗することに注意してください。 Bitriseを手動でXcodeスキームにポイントすることもできますが、共有されている場合は、自動的に検出されます。 IPAエクスポート方法を選択します。これは後で変更できます-今のところ、 発達 。 クリックすると、次のように表示されます。 プロジェクトまたはワークスペースのパス。 スキーム名 IPAエクスポート方法。 iOSスタック。 プロンプトが表示されたらWebhookを登録して、コードがリポジトリにプッシュされたとき、またはプルリクエストが作成されたときにBitriseがビルドを自動的に開始できるようにします。これにより、最初のビルドも開始されます。メッセージをクリックすると、ビルドページに移動します。 " }, 
{ "title" : "iOSアプリのテスト ", 
"url" : "入門/iosアプリ入門.html#iosアプリのテスト", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ iOSアプリ入門 \/ iOSアプリのテスト ", 
"snippet" : "アプリを作成すると、最初のビルドは自動的に作成されたプライマリワークフローに基づいて実行されます。アプリのワークフローエディターで確認できます。ダッシュボードでアプリの名前をクリックしてから、[ワークフロー]タブをクリックします。 テストターゲットを定義している場合、iOSアプリの主要なワークフローには、Xcodeテストを実行してその結果を表示するために必要な2つのステップが含まれます。 bitrise.io ： iOS用Xcodeテスト Bitrise.ioにデプロイします コード署名ファイル Xcodeテストを実行し、その結果をBitriseにデプロイするために、コード署名ファイルは必要あ...", 
"body" : "アプリを作成すると、最初のビルドは自動的に作成されたプライマリワークフローに基づいて実行されます。アプリのワークフローエディターで確認できます。ダッシュボードでアプリの名前をクリックしてから、[ワークフロー]タブをクリックします。 テストターゲットを定義している場合、iOSアプリの主要なワークフローには、Xcodeテストを実行してその結果を表示するために必要な2つのステップが含まれます。 bitrise.io ： iOS用Xcodeテスト Bitrise.ioにデプロイします コード署名ファイル Xcodeテストを実行し、その結果をBitriseにデプロイするために、コード署名ファイルは必要ありません。だから、まだそれらについて心配しないでください！ Xcode Test for iOS Stepは、事前定義されたXcodeテストを実行します。変更する必要のないデフォルト構成があります。テストが正しく記述されていれば、機能します。 Xcodeにも同じ構成オプションがあります。 [Stacks & Machines] タブで選択したスタックを確認する アプリ用に選択したスタックが、アプリのビルドに使用したものと同じXcodeバージョンであることを確認することをお勧めします。たとえば、シミュレータテストが次の場合に失敗した場合 スキームの対象外の目的地 メッセージが表示されたら、Xcodeのバージョンが スタックとマシン タブは正しいです。あなたは私たちのスタックについてもっと読むことができます： スタックを構築する。 Bitrise.ioにデプロイするステップでは、以下をにデプロイします。 ログ と アーティファクト ビルドのタブ： Xcodeテストの結果。 生のxcodebuildoutputログ。 NS Bitrise.ioにデプロイします ステップはまた、結果をエクスポートします iOS用Xcodeテスト にステップ テストレポート アドオン。 " }, 
{ "title" : "Xcodeプロジェクト用に署名されたIPAを作成する ", 
"url" : "入門/iosアプリ入門.html#xcodeプロジェクト用に署名されたipaを作成する-78568", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ iOSアプリ入門 \/ Xcodeプロジェクト用に署名されたIPAを作成する ", 
"snippet" : "Apple接続が正しく設定されていて、コード署名ファイルをビルドで使用できるようにすると、Bitriseを使用してXcodeプロジェクトの署名付きIPAファイルを簡単に作成できます。 Bitrise での iOS コード署名の概要 コード署名資産管理に利用できるステップの包括的な概要については、次のWebサイトをご覧ください。 iOSコード署名ページ 。 Bitriseを使用すると、Xcodeプロジェクト用の署名付きIPAファイルを簡単に作成できます。あなたがする必要があるのはあなたのコード署名ファイルが正しく管理されていることを確認し、そして私たちの関連する入力を設定することです iOS用の...", 
"body" : "Apple接続が正しく設定されていて、コード署名ファイルをビルドで使用できるようにすると、Bitriseを使用してXcodeプロジェクトの署名付きIPAファイルを簡単に作成できます。 Bitrise での iOS コード署名の概要 コード署名資産管理に利用できるステップの包括的な概要については、次のWebサイトをご覧ください。 iOSコード署名ページ 。 Bitriseを使用すると、Xcodeプロジェクト用の署名付きIPAファイルを簡単に作成できます。あなたがする必要があるのはあなたのコード署名ファイルが正しく管理されていることを確認し、そして私たちの関連する入力を設定することです iOS用のXcodeアーカイブとエクスポート ステップ。 設定しました Appleサービス接続 Bitriseで。 あなたの コード署名ファイルは正しく管理されています 。 あなたは私たちの関連する入力を設定します iOS用のXcodeアーカイブとエクスポート ステップ 。 ディストリビューションと開発署名証明書をアップロードします プロジェクトの開発署名証明書と配布署名証明書の両方をアップロードすることを強くお勧めします。アップロードされた開発署名証明書がない場合は、ビルドを開始するたびに、自動プロビジョニング オプションを使用するステップによってオンザフライで生成されます。これにより、最終的に証明書の最大数に達し、新しいビルドを開始できなくなる可能性があります。 すべての設定が完了したら、IPAエクスポートの設定に進みます。 ワークフロー 。 必要なことを確認してください コード署名ファイルが収集され、アップロードされました 。 あなたが持っていることを確認してください iOS用のXcodeアーカイブとエクスポート ワークフローにステップインします。 をセットする 配布方法 ステップの入力。 自動プロビジョニングを使用する場合は、の値と一致していることを確認してください 配布タイプ 関連する入力 iOS自動プロビジョニング ステップ。オプションは次のとおりです。 auto-detect -このオプションは非推奨であり、削除されることに注意してください。使用はお勧めしません。 app-store ：アプリをApp Storeにデプロイする場合は、これを選択します。配布証明書とAppStoreプロビジョニングプロファイルが必要です。 ad-hoc ：アプリをアドホックテスターにデプロイする場合は、これを選択します。配布証明書とアドホックプロビジョニングプロファイルが必要です。 enterprise ：Apple Enterpriseアカウントをお持ちで、それを使用してアプリを配布する場合は、これを選択してください。 development ：内部テストにはこれを選択してください。開発者証明書と開発プロビジョニングプロファイルが必要です。 をセットする 自動コード署名 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を行わない場合。 api-key APIキー認証を使用する場合 。 apple-id AppleID認証を使用する場合 。 ワークフローを保存して、新しいビルドを開始します。 それで全部です。 Xcodeは、プロジェクトのバンドルIDとチームIDの設定、および設定したエクスポート方法に基づいて、適切な署名ファイルを自動的に選択します。 " }, 
{ "title" : "別のチームのコード署名ファイルを使用してIPAファイルに署名する ", 
"url" : "入門/iosアプリ入門.html#別のチームのコード署名ファイルを使用してipaファイルに署名する-78568", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ iOSアプリ入門 \/ Xcodeプロジェクト用に署名されたIPAを作成する \/ 別のチームのコード署名ファイルを使用してIPAファイルに署名する ", 
"snippet" : "別のチームのコード署名ファイルを使用してIPAファイルに署名する場合（たとえば、社内ビルドに会社のコード署名を使用しているが、App Store配布にクライアントのコード署名ファイルを使用している場合）、設定するだけです。 NS このエクスポートに使用する開発者ポータルチーム オプションも（に加えて 配布方法 ）。 会社のコード署名ファイルを内部ビルドに使用しているが、クライアントのコード署名ファイルがAppStoreの配布に使用されている場合。 自動コード署名にAppleIDを使用し、Apple IDが複数のチームに属している場合は、開発者ポータルチームを使用してこのエクスポート入力に使用し...", 
"body" : "別のチームのコード署名ファイルを使用してIPAファイルに署名する場合（たとえば、社内ビルドに会社のコード署名を使用しているが、App Store配布にクライアントのコード署名ファイルを使用している場合）、設定するだけです。 NS このエクスポートに使用する開発者ポータルチーム オプションも（に加えて 配布方法 ）。 会社のコード署名ファイルを内部ビルドに使用しているが、クライアントのコード署名ファイルがAppStoreの配布に使用されている場合。 自動コード署名にAppleIDを使用し、Apple IDが複数のチームに属している場合は、開発者ポータルチームを使用してこのエクスポート入力に使用し、自動コード署名資産管理に使用するチームを指定します。 そうするには： 新しい開発チームの正しいコード署名ファイルがBitriseにアップロードされていることを確認してください。 このエクスポートオプションにも使用するように開発者ポータルチームを設定します（ 配布方法 ）。 をセットする 配布方法 。 " }, 
{ "title" : "アプリをiTunesConnectにデプロイする ", 
"url" : "入門/iosアプリ入門.html#アプリをitunesconnectにデプロイする-78568", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ iOSアプリ入門 \/ アプリをiTunesConnectにデプロイする ", 
"snippet" : "アプリをiTunesConnectにプッシュするたびに、固有のビルドとバージョン番号が必要であることに注意してください。 いずれかまたは両方をインクリメント 展開する前に。 あなたが働いていることを確認してください AppleDeveloperアカウントへの接続 。 自分のマシンで少なくとも1回はIPAファイルを生成します。 必要なすべてのコード署名ファイルをアップロードする Bitriseに。 アプリをiTunesConnectにデプロイするには、配布タイプの証明書とAppStoreタイプのプロビジョニングプロファイルが必要です。 確認してください iOS用のXcodeアーカイブとエクスポー...", 
"body" : "アプリをiTunesConnectにプッシュするたびに、固有のビルドとバージョン番号が必要であることに注意してください。 いずれかまたは両方をインクリメント 展開する前に。 あなたが働いていることを確認してください AppleDeveloperアカウントへの接続 。 自分のマシンで少なくとも1回はIPAファイルを生成します。 必要なすべてのコード署名ファイルをアップロードする Bitriseに。 アプリをiTunesConnectにデプロイするには、配布タイプの証明書とAppStoreタイプのプロビジョニングプロファイルが必要です。 確認してください iOS用のXcodeアーカイブとエクスポート ステップはワークフローにあります。 をセットする 自動コード署名 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を使用しない場合、またはAppleサービス認証にステップ入力のみを使用する場合。 api-key 使用する場合 APIキー認証 。 apple-id 使用する場合 AppleID認証 。 をセットする エクスポート方法を選択してください ステップの入力 app-store 。 このステップでは、エクスポートされた.ipaファイルのパスが$ BITRISE_IPA_PATH環境変数に保存されます。 追加します Deploy to iTunes Connect ワークフローに進みます。 必要な入力を入力します。 アプリのAppleIDまたはバンドルIDのいずれかが必須の入力です。 2つのうちの1つを提供する必要があります。 あなたが設定した場合 レビューのために送信 に true 、ステップは、送信がiTunes Connectで処理されるのを待ってから、指定されたバージョンのアプリをレビューのために送信します。 のデフォルト値 アプリバージョンの更新をスキップ 入力は No 。別の方法でアプリのバージョン番号をインクリメントした場合にのみ変更してください。 複数のチームにリンクされているiTunesConnectアカウントを使用する場合は、チームIDまたはチーム名のいずれかを入力してください。 ビルドを開始します。 すべてがうまくいけば、アプリはiTunes Connectに送信され、TestflightまたはAppStoreから配布できます。 " }, 
{ "title" : "Androidアプリ入門 ", 
"url" : "入門/androidアプリ入門.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Androidアプリ入門 ", 
"snippet" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、Androidアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 このガイドでは、AndroidアプリをBitriseに追加する方法、デフォルトのワークフローで実行できること、そして最後にアプリをテストしてデプロイする方法について説明します。 bitrise.io そしてGooglePlayストアへ。 Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 ...", 
"body" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、Androidアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 このガイドでは、AndroidアプリをBitriseに追加する方法、デフォルトのワークフローで実行できること、そして最後にアプリをテストしてデプロイする方法について説明します。 bitrise.io そしてGooglePlayストアへ。 Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップするAndroidコード署名 Androidの展開 " }, 
{ "title" : "BitriseへのAndroidアプリの追加 ", 
"url" : "入門/androidアプリ入門.html#bitriseへのandroidアプリの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Androidアプリ入門 \/ BitriseへのAndroidアプリの追加 ", 
"snippet" : "あなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 アプリのプライバシーを次のいずれかに設定します 民間 また 公衆 をクリックします 次 。 プライベート アプリとパブリック アプリ パブリック アプリとプライベート アプリの最も重要な違いは、アプリがパブリックの場合、ビルド UR...", 
"body" : "あなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 アプリのプライバシーを次のいずれかに設定します 民間 また 公衆 をクリックします 次 。 プライベート アプリとパブリック アプリ パブリック アプリとプライベート アプリの最も重要な違いは、アプリがパブリックの場合、ビルド URL を知っている全員がビルド ログを表示できることです。 公開アプリ.プライベート アプリを使用すると、誰がアプリにアクセスできるかを完全に制御できます。 リポジトリをホストするGitホスティングサービスを選択してから、プロジェクトをホストする独自のリポジトリを見つけて選択します。 リポジトリアクセスを設定するように求められたら、をクリックします いいえ、SSHキーを自動追加します 。 プロジェクトの構成を含むブランチの名前を入力します- 主要 たとえば、-次にクリックします 次 。 Bitriseがプロジェクトを検証している間待ちます。スキャナーはあなたを探しています build.gradle と gradlew ファイル。それらが存在する場合、プロジェクトはAndroidプロジェクトとして検出されます。 Bitrise Scannerは、デフォルトでプロジェクトのモジュールを選択します。モジュールリストから選択するモジュールが他にもある場合は、プロジェクトに最適なモジュールを選択してください。 構築するバリアントを選択します（ すべてのバリアントを選択 ですべてのバリアントを生成します アーティファクト ）そしてテスト用のバリアントも選択します。 プロンプトが表示されたらWebhookを登録して、コードがリポジトリにプッシュされたときにBitriseがビルドを自動的に開始できるようにします。これにより、最初のビルドも開始されます。 主要な ワークフロー-メッセージをクリックすると、ビルドページに移動します。 ビルドページで、 ビルドログ クリックすると ワークフローの編集 、ビルドの実行に使用されたデフォルトの自動生成されたワークフローを変更できます。 " }, 
{ "title" : "Androidアプリの依存関係の管理 ", 
"url" : "入門/androidアプリ入門.html#androidアプリの依存関係の管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Androidアプリ入門 \/ Androidアプリの依存関係の管理 ", 
"snippet" : "Gradleビルドシステムでは、依存関係として外部バイナリまたは他のライブラリモジュールを含めることができます。 Bitriseは、ビルドプロセス中にアプリにこれらの依存関係をインストールできます。 ビルドの依存関係の追加 Androidプロジェクトへの依存関係の追加について詳しくは、以下をご覧ください。 https:\/\/developer.android.com\/studio\/build\/dependencies プロジェクトが build.gradle ファイルには、すべての依存関係が一覧表示されます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 ...", 
"body" : "Gradleビルドシステムでは、依存関係として外部バイナリまたは他のライブラリモジュールを含めることができます。 Bitriseは、ビルドプロセス中にアプリにこれらの依存関係をインストールできます。 ビルドの依存関係の追加 Androidプロジェクトへの依存関係の追加について詳しくは、以下をご覧ください。 https:\/\/developer.android.com\/studio\/build\/dependencies プロジェクトが build.gradle ファイルには、すべての依存関係が一覧表示されます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 ワークフローに Androidビルド ステップ。 プロジェクトスキャナーがと呼ばれるワークフローを生成した場合 配備 アプリを最初に追加するとき、そのワークフローにはステップが含まれます。リストされているすべての依存関係をインストールします build.gradle 追加の構成なしでファイル。 ワークフローにインストールが欠落していることが含まれていることを確認してください AndroidSDKコンポーネント ステップ。 ステップは、 Androidビルド ワークフローにステップインします。プロジェクトに必要なすべてのAndroidSDKツールがインストールされます。 " }, 
{ "title" : "Androidアプリのテスト ", 
"url" : "入門/androidアプリ入門.html#androidアプリのテスト", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Androidアプリ入門 \/ Androidアプリのテスト ", 
"snippet" : "CIプロセス中にAndroidアプリをテストするのを支援するためのいくつかのステップがあります。 NS Android Lint ステップは、AndroidプロジェクトのソースファイルでLintを実行し、潜在的な構文エラーを検出して、コードエラーをなくします。 NS Androidユニットテスト ステップは、プロジェクトの単体テストを実行します。さまざまなモジュールとフレーバーすべてに対して実行できます。 AndroidユニットテストNS [ベータ版] Android向け仮想デバイステスト Firebase TestLabを使用して、仮想デバイスでAndroidテストを実行します。 Andro...", 
"body" : "CIプロセス中にAndroidアプリをテストするのを支援するためのいくつかのステップがあります。 NS Android Lint ステップは、AndroidプロジェクトのソースファイルでLintを実行し、潜在的な構文エラーを検出して、コードエラーをなくします。 NS Androidユニットテスト ステップは、プロジェクトの単体テストを実行します。さまざまなモジュールとフレーバーすべてに対して実行できます。 AndroidユニットテストNS [ベータ版] Android向け仮想デバイステスト Firebase TestLabを使用して、仮想デバイスでAndroidテストを実行します。 AndroidのデバイステストNS Androidユニットテスト ステップと [ベータ版] Android向け仮想デバイステスト ステップは両方とも結果をにエクスポートできます テストレポート アドオン。これを行うには、ワークフローに Bitrise.ioにデプロイします ワークフローの最後にステップします。 " }, 
{ "title" : "Androidアプリに署名する ", 
"url" : "入門/androidアプリ入門.html#androidアプリに署名する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Androidアプリ入門 \/ Androidアプリに署名する ", 
"snippet" : "AndroidアプリをGooglePlayに公開するには、アプリにデジタル署名する必要があります。 Bitriseはこれを行うこともできます。キーストアファイルをアップロードし、必要な認証を提供するだけです。 その他のコード署名オプション このセクションでは、Androidサインステップを使用してAndroidアプリに署名する方法について説明します。アプリに署名する方法は他にもあります。関連ガイドの他のオプションを確認してください。 Androidコード署名キーストアファイルを生成する 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名...", 
"body" : "AndroidアプリをGooglePlayに公開するには、アプリにデジタル署名する必要があります。 Bitriseはこれを行うこともできます。キーストアファイルをアップロードし、必要な認証を提供するだけです。 その他のコード署名オプション このセクションでは、Androidサインステップを使用してAndroidアプリに署名する方法について説明します。アプリに署名する方法は他にもあります。関連ガイドの他のオプションを確認してください。 Androidコード署名キーストアファイルを生成する 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ。 キーストアファイルをにドラッグアンドドロップします Androidキーストアファイル 分野。 記入してください キーストアのパスワード 、 キーストアエイリアス 、 と 秘密鍵のパスワード フィールドをクリックしてクリックします メタデータを保存する 。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します Androidサイン ワークフローに進みます。 以上です。次回ビルドを実行するときは、 Androidサイン ステップは、生成されたバイナリに署名します。 " }, 
{ "title" : "Androidアプリをbitrise.ioにデプロイする ", 
"url" : "入門/androidアプリ入門.html#androidアプリをbitrise-ioにデプロイする-78569", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Androidアプリ入門 \/ Androidアプリをbitrise.ioにデプロイする ", 
"snippet" : "このセクションでは、Androidアプリをにデプロイする方法について説明します。 bitrise.io 。 へのデプロイ bitrise.io ビルド中に生成されたビルド アーティファクトは、ビルドが完了するとダウンロードできるようになります。これを使用して、たとえば独自のテスト デバイスでアプリをテストできます。 アプリをにデプロイするには bitrise.io ： ワークフローに Androidビルド アプリを構築する手順。 オプションで、アプリを作成できます。 Gradleランナー ステップ。これにはもう少し構成が必要ですが、より広範なカスタマイズが可能です。 追加します Bitrise...", 
"body" : "このセクションでは、Androidアプリをにデプロイする方法について説明します。 bitrise.io 。 へのデプロイ bitrise.io ビルド中に生成されたビルド アーティファクトは、ビルドが完了するとダウンロードできるようになります。これを使用して、たとえば独自のテスト デバイスでアプリをテストできます。 アプリをにデプロイするには bitrise.io ： ワークフローに Androidビルド アプリを構築する手順。 オプションで、アプリを作成できます。 Gradleランナー ステップ。これにはもう少し構成が必要ですが、より広範なカスタマイズが可能です。 追加します Bitrise.ioにデプロイします ワークフローに進みます。 他のユーザーへの通知 あなたは使用することができます 通知：ユーザーの役割 そしてその 通知：メール デプロイに関する通知を設定するためのステップの入力。 オプションで、 アプリの公開ページを有効にしますか? ステップの入力 真実 だからステップ パブリック インストール ページを有効にします あなたのアプリのために。 ビルドを実行します。 の Bitrise.io にデプロイする ステップはアプリをデプロイします。ビルドの URL を使用して、生成されたバイナリをチーム メンバーと共有できます。 Android アプリを Bitrise にデプロイするための bitrise.yml この例では、 debug Android アプリのバリアントとして、bitrise.io にデプロイします。 format_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\napp:\n envs:\n - opts: \n is_expand: false \n BITRISE_SOURCE_DIR: \/app\nworkflows:\n docs-example-workflow:\n steps:\n - android-build@1:\n inputs:\n - variant: debug\n - deploy-to-bitrise-io@2: {} " }, 
{ "title" : "初めてGooglePlayの展開を設定する ", 
"url" : "入門/androidアプリ入門.html#初めてgoogleplayの展開を設定する-78569", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Androidアプリ入門 \/ 初めてGooglePlayの展開を設定する ", 
"snippet" : "Google Playにデプロイすると、アプリがGoogleのオンラインストアに公開されます。初めてそれを行うとき、これは単にに展開するよりも少し多くの作業を必要とします bitrise.io 。必要な構成が整ったら、それは非常に簡単になります。 Google Playのデプロイを初めて構成するときは、Google PlayデベロッパーアカウントをAPIプロジェクトにリンクし、APIアクセスを設定して、サービスアカウントのJSONキーをBitriseにアップロードする必要があります。 最初のAABまたはAPKを手動でGooglePlayにアップロードします GooglePlayコンソールを使用...", 
"body" : "Google Playにデプロイすると、アプリがGoogleのオンラインストアに公開されます。初めてそれを行うとき、これは単にに展開するよりも少し多くの作業を必要とします bitrise.io 。必要な構成が整ったら、それは非常に簡単になります。 Google Playのデプロイを初めて構成するときは、Google PlayデベロッパーアカウントをAPIプロジェクトにリンクし、APIアクセスを設定して、サービスアカウントのJSONキーをBitriseにアップロードする必要があります。 最初のAABまたはAPKを手動でGooglePlayにアップロードします GooglePlayコンソールを使用する 。 リンク GooglePlayデベロッパーコンソールをAPIプロジェクトに変換します。 サービスアカウントを使用してAPIアクセスクライアントを設定する ：Google Developer Consoleでサービスアカウントを作成するときは、選択する必要があることに注意してください json なので キータイプ 。 あなたのサービスアカウントに必要な権利を付与します GooglePlayコンソール 。に移動 設定 、 それから ユーザーと権限 、 それから 新しいユーザーを招待する 。 Google Play Publisher APIの動作方法により、サービスアカウントに少なくとも次の権限を付与する必要があります。 アクセスレベル：アプリ情報を表示します。 リリース管理：本番リリースを管理し、テストトラックリリースを管理します。 店舗のプレゼンス：店舗のリスト、価格設定、配布を編集します。 オプションの手順として、ストアリストに翻訳を追加できます。 アプリを翻訳してローカライズする 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブに移動し、サービス アカウントの JSON キーを 汎用ファイル ストレージ . " }, 
{ "title" : "GooglePlayへのデプロイ ", 
"url" : "入門/androidアプリ入門.html#googleplayへのデプロイ-78569", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Androidアプリ入門 \/ GooglePlayへのデプロイ ", 
"snippet" : "Google Playにデプロイするには、署名済みのAPKまたはAABファイルと GooglePlayデプロイ ステップ。 アプリを初めてデプロイする場合は、 GooglePlayの設定が正しく設定されていることを確認してください 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブをクリックしてコピーします 環境変数 アップロードしたサービス アカウントの JSON キー ファイルの URL を格納するキー。 をコピーします 環境変数 アップロードしたファイルのURLを保存するキー。 例えば： BITRISEIO_SER...", 
"body" : "Google Playにデプロイするには、署名済みのAPKまたはAABファイルと GooglePlayデプロイ ステップ。 アプリを初めてデプロイする場合は、 GooglePlayの設定が正しく設定されていることを確認してください 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブをクリックしてコピーします 環境変数 アップロードしたサービス アカウントの JSON キー ファイルの URL を格納するキー。 をコピーします 環境変数 アップロードしたファイルのURLを保存するキー。 例えば： BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL 。 ワークフローを開き、を追加します GooglePlayデプロイ それにステップします。 の中に サービスアカウントのJSONキーファイルパス 入力し、サービスアカウントのJSONキーをアップロードしたときに生成された環境変数を 一般的なファイルストレージ 。生成されたEnvVarに加えて、ステップの入力フィールドにファイルパスを追加することもできます。ファイルパスはローカルまたはリモートにすることもできます。 リモートJSONキーファイルの場合、たとえば、任意のダウンロード場所を値として指定できます。 https:\/\/URL\/TO\/key.json 。 ローカルJSONキーファイルの場合、ファイルパスのURLを値として指定できます。たとえば、 file:\/\/PATH\/TO\/key.json 。 の中に パッケージ名 入力し、アプリのパッケージ名を追加します。 の中に 追跡 入力して、APKをデプロイするトラックを追加します（たとえば、alpha \/ beta \/ rollout \/ productionまたは設定したカスタムトラック）。 それで全部です！ビルドを開始またはスケジュールして、URLを外部テスターと共有するか、選択したアプリストアでアプリを配布してください。 " }, 
{ "title" : "ReactNativeアプリの使用を開始する ", 
"url" : "入門/reactnativeアプリの使用を開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する ", 
"snippet" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、React Nativeアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 Expoプロジェクト React NativeプロジェクトでExpoを使用する場合は、専用のガイドがあります。 Expoアプリの使用を開始する。 ReactNativeプロジェクトをで簡単にセットアップおよび構成できます ビットライズ 。 React NativeリポジトリはAndroidプロジェクトとiOSプロジェクトで構成できるため、AndroidアプリとiOSアプリで通常行うように構成を行う必要があります。 Bi...", 
"body" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、React Nativeアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 Expoプロジェクト React NativeプロジェクトでExpoを使用する場合は、専用のガイドがあります。 Expoアプリの使用を開始する。 ReactNativeプロジェクトをで簡単にセットアップおよび構成できます ビットライズ 。 React NativeリポジトリはAndroidプロジェクトとiOSプロジェクトで構成できるため、AndroidアプリとiOSアプリで通常行うように構成を行う必要があります。 BitriseでReactNativeプロジェクトを実行すると、最初にAndroid、次にiOSビルドがビルドされることがわかります。 Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップする" }, 
{ "title" : "ReactNativeアプリをBitriseに追加する ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#reactnativeアプリをbitriseに追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリをBitriseに追加する ", 
"snippet" : "この手順では、アプリをBitriseに追加し、リポジトリに接続し、リポジトリアクセスを設定し、ブランチを選択し、プロジェクトを検証するプロセスについて説明します。以下では、ReactNative固有の構成もいくつか取り上げます。 あなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 ア...", 
"body" : "この手順では、アプリをBitriseに追加し、リポジトリに接続し、リポジトリアクセスを設定し、ブランチを選択し、プロジェクトを検証するプロセスについて説明します。以下では、ReactNative固有の構成もいくつか取り上げます。 あなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 アプリのプライバシーを次のいずれかに設定します 民間 また 公衆 をクリックします 次 。 プライベート アプリとパブリック アプリ パブリック アプリとプライベート アプリの最も重要な違いは、アプリがパブリックの場合、ビルド URL を知っている全員がビルド ログを表示できることです。 公開アプリ.プライベート アプリを使用すると、誰がアプリにアクセスできるかを完全に制御できます。 リポジトリをホストするGitホスティングサービスを選択してから、プロジェクトをホストする独自のリポジトリを見つけて選択します。 リポジトリアクセスを設定するように求められたら、をクリックします いいえ、SSHキーを自動追加します 。 プロジェクトの構成を含むブランチの名前を入力します- 主要 たとえば、-次にクリックします 次 。 Bitriseがプロジェクトを検証している間待ちます。選択したブランチで構成ファイルが利用できる場合、スキャナーはアプリをReactNativeアプリとして検出します。 プロジェクトが1つのモジュールのみで構成されている場合、そのモジュールは自動的に選択されます。 モジュール 。プロジェクトに複数のモジュールが含まれている場合は、モジュールを選択できますが、メインのモジュールをお勧めします。 の中に 変異体 フィールドで、プロジェクトに適したバリアントを選択します。選ぶ すべてのバリアントを選択 すべてのバリアントをビルドします。選ぶ デバッグ また リリース APKまたはIPAファイルを生成する場合。 の中に プロジェクト（またはワークスペース） フィールドで、XcodeプロジェクトまたはXcodeワークスペースパスを選択します。 の中に スキーム名を選択 、スキーム名を選択します。プロジェクトにSHAREDスキームがない場合、スキャナーの検証は失敗します。 Bitriseを手動でXcodeスキームにポイントすることもできますが、共有されている場合は、自動的に検出されます。 の ipaエクスポート方法を選択します 、.ipaファイルのエクスポート方法を選択します：アドホック、アプリストア、開発、またはエンタープライズ方法。心配しないでください。後で変更できます。 これで、ReactNativeプロジェクトが正常にセットアップされました。 bitrise.io ！最初のビルドは自動的に開始されます。最初のビルドで生成されたアーティファクトを確認できます アーティファクト ビルドのページのタブ。 " }, 
{ "title" : "の依存関係のインストール リアクトネイティブ アプリ ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#の依存関係のインストール-リアクトネイティブ-アプリ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ の依存関係のインストール リアクトネイティブ アプリ ", 
"snippet" : "Bitriseプロジェクトスキャナーが正常にスキャンした場合 リアクトネイティブ 事業、 npmコマンドを実行します また ヤーンコマンドを実行する ステップはデフォルトのワークフローに含まれます。これらの手順により、不足しているJavascriptの依存関係をアプリにインストールできます。 ネイティブAndroidの依存関係については、 不足しているAndroidSDKコンポーネントをインストールする ステップ。 ネイティブiOSの依存関係については、特に、 Homebrewインストール ステップまたは CocoaPodsインストールを実行します ステップ。 npmを使用してJavascri...", 
"body" : "Bitriseプロジェクトスキャナーが正常にスキャンした場合 リアクトネイティブ 事業、 npmコマンドを実行します また ヤーンコマンドを実行する ステップはデフォルトのワークフローに含まれます。これらの手順により、不足しているJavascriptの依存関係をアプリにインストールできます。 ネイティブAndroidの依存関係については、 不足しているAndroidSDKコンポーネントをインストールする ステップ。 ネイティブiOSの依存関係については、特に、 Homebrewインストール ステップまたは CocoaPodsインストールを実行します ステップ。 npmを使用してJavascriptの依存関係をインストールするには： npmの代わりにYarnを使用する このガイドでは、npmを使用してJavascriptの依存関係をインストールしています。ただし、 ヤーンコマンドを実行する 手順：追加の構成を必要とせずに、不足しているJS依存関係をインストールできます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 ワークフローに npmコマンドを実行します ステップ。 の中に 実行する引数を指定したnpmコマンド 入力フィールド、タイプ インストール 。 を使用して npm ci コマンドの代わりに npm install すでに最新版をお持ちの場合 package-lock.json プロジェクトでファイルを使用することをお勧めします。 シ コマンドイン 実行する引数を指定した「npm」コマンド 入力。使用する npm ci に比べてビルド時間が大幅に短縮されるだけでなく、 npm install しかし、より信頼性の高いビルドも同様です。 " }, 
{ "title" : "ReactNativeアプリのコード署名 ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#reactnativeアプリのコード署名", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリのコード署名 ", 
"snippet" : "React Nativeアプリは、AndroidとiOSの2つのプロジェクトで構成できます。どちらも、署名手順が異なります。プロジェクトのワークフローエディタの[コード署名]タブをクリックすると、すべてのiOSおよびAndroidコード署名フィールドが1ページに表示されます。プラットフォーム固有の手順に従って、iOSとAndroidの両方のアプリにコード署名します。...", 
"body" : "React Nativeアプリは、AndroidとiOSの2つのプロジェクトで構成できます。どちらも、署名手順が異なります。プロジェクトのワークフローエディタの[コード署名]タブをクリックすると、すべてのiOSおよびAndroidコード署名フィールドが1ページに表示されます。プラットフォーム固有の手順に従って、iOSとAndroidの両方のアプリにコード署名します。 " }, 
{ "title" : "Androidプロジェクトに署名する ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#androidプロジェクトに署名する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリのコード署名 \/ Androidプロジェクトに署名する ", 
"snippet" : "すべてのAndroidアプリは、Androidデバイスにインストールする前に、証明書を使用してデジタル署名する必要があります。 Bitriseでは、この目的のために専用のステップを使用できますが、最初にキーストアファイルが必要になります。 キーストアファイルを生成する 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ。 キーストアファイルをにドラッグアンドドロップします Androidキーストアファイル 分野。 記入してください キーストアのパスワード 、 キーストアエイリアス 、 と 秘密鍵のパスワード フィールドを...", 
"body" : "すべてのAndroidアプリは、Androidデバイスにインストールする前に、証明書を使用してデジタル署名する必要があります。 Bitriseでは、この目的のために専用のステップを使用できますが、最初にキーストアファイルが必要になります。 キーストアファイルを生成する 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ。 キーストアファイルをにドラッグアンドドロップします Androidキーストアファイル 分野。 記入してください キーストアのパスワード 、 キーストアエイリアス 、 と 秘密鍵のパスワード フィールドをクリックしてクリックします メタデータを保存する 。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します Androidサイン ワークフローに進みます。 Android Sign ステップの前提条件 必ず追加してください 人造人間のサイン ビルド ステップの後のステップ ( Android ビルド ステップまたは Gradle ランナー ステップ) をワークフローに追加します。 " }, 
{ "title" : "Xcodeプロジェクト用に署名されたIPAを作成する ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#xcodeプロジェクト用に署名されたipaを作成する-78570", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリのコード署名 \/ Xcodeプロジェクト用に署名されたIPAを作成する ", 
"snippet" : "Apple接続が正しく設定されていて、コード署名ファイルをビルドで使用できるようにすると、Bitriseを使用してXcodeプロジェクトの署名付きIPAファイルを簡単に作成できます。 Bitrise での iOS コード署名の概要 コード署名資産管理に利用できるステップの包括的な概要については、次のWebサイトをご覧ください。 iOSコード署名ページ 。 Bitriseを使用すると、Xcodeプロジェクト用の署名付きIPAファイルを簡単に作成できます。あなたがする必要があるのはあなたのコード署名ファイルが正しく管理されていることを確認し、そして私たちの関連する入力を設定することです iOS用の...", 
"body" : "Apple接続が正しく設定されていて、コード署名ファイルをビルドで使用できるようにすると、Bitriseを使用してXcodeプロジェクトの署名付きIPAファイルを簡単に作成できます。 Bitrise での iOS コード署名の概要 コード署名資産管理に利用できるステップの包括的な概要については、次のWebサイトをご覧ください。 iOSコード署名ページ 。 Bitriseを使用すると、Xcodeプロジェクト用の署名付きIPAファイルを簡単に作成できます。あなたがする必要があるのはあなたのコード署名ファイルが正しく管理されていることを確認し、そして私たちの関連する入力を設定することです iOS用のXcodeアーカイブとエクスポート ステップ。 設定しました Appleサービス接続 Bitriseで。 あなたの コード署名ファイルは正しく管理されています 。 あなたは私たちの関連する入力を設定します iOS用のXcodeアーカイブとエクスポート ステップ 。 ディストリビューションと開発署名証明書をアップロードします プロジェクトの開発署名証明書と配布署名証明書の両方をアップロードすることを強くお勧めします。アップロードされた開発署名証明書がない場合は、ビルドを開始するたびに、自動プロビジョニング オプションを使用するステップによってオンザフライで生成されます。これにより、最終的に証明書の最大数に達し、新しいビルドを開始できなくなる可能性があります。 すべての設定が完了したら、IPAエクスポートの設定に進みます。 ワークフロー 。 必要なことを確認してください コード署名ファイルが収集され、アップロードされました 。 あなたが持っていることを確認してください iOS用のXcodeアーカイブとエクスポート ワークフローにステップインします。 をセットする 配布方法 ステップの入力。 自動プロビジョニングを使用する場合は、の値と一致していることを確認してください 配布タイプ 関連する入力 iOS自動プロビジョニング ステップ。オプションは次のとおりです。 auto-detect -このオプションは非推奨であり、削除されることに注意してください。使用はお勧めしません。 app-store ：アプリをApp Storeにデプロイする場合は、これを選択します。配布証明書とAppStoreプロビジョニングプロファイルが必要です。 ad-hoc ：アプリをアドホックテスターにデプロイする場合は、これを選択します。配布証明書とアドホックプロビジョニングプロファイルが必要です。 enterprise ：Apple Enterpriseアカウントをお持ちで、それを使用してアプリを配布する場合は、これを選択してください。 development ：内部テストにはこれを選択してください。開発者証明書と開発プロビジョニングプロファイルが必要です。 をセットする 自動コード署名 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を行わない場合。 api-key APIキー認証を使用する場合 。 apple-id AppleID認証を使用する場合 。 ワークフローを保存して、新しいビルドを開始します。 それで全部です。 Xcodeは、プロジェクトのバンドルIDとチームIDの設定、および設定したエクスポート方法に基づいて、適切な署名ファイルを自動的に選択します。 " }, 
{ "title" : "別のチームのコード署名ファイルを使用してIPAファイルに署名する ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#別のチームのコード署名ファイルを使用してipaファイルに署名する-78570", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリのコード署名 \/ Xcodeプロジェクト用に署名されたIPAを作成する \/ 別のチームのコード署名ファイルを使用してIPAファイルに署名する ", 
"snippet" : "別のチームのコード署名ファイルを使用してIPAファイルに署名する場合（たとえば、社内ビルドに会社のコード署名を使用しているが、App Store配布にクライアントのコード署名ファイルを使用している場合）、設定するだけです。 NS このエクスポートに使用する開発者ポータルチーム オプションも（に加えて 配布方法 ）。 会社のコード署名ファイルを内部ビルドに使用しているが、クライアントのコード署名ファイルがAppStoreの配布に使用されている場合。 自動コード署名にAppleIDを使用し、Apple IDが複数のチームに属している場合は、開発者ポータルチームを使用してこのエクスポート入力に使用し...", 
"body" : "別のチームのコード署名ファイルを使用してIPAファイルに署名する場合（たとえば、社内ビルドに会社のコード署名を使用しているが、App Store配布にクライアントのコード署名ファイルを使用している場合）、設定するだけです。 NS このエクスポートに使用する開発者ポータルチーム オプションも（に加えて 配布方法 ）。 会社のコード署名ファイルを内部ビルドに使用しているが、クライアントのコード署名ファイルがAppStoreの配布に使用されている場合。 自動コード署名にAppleIDを使用し、Apple IDが複数のチームに属している場合は、開発者ポータルチームを使用してこのエクスポート入力に使用し、自動コード署名資産管理に使用するチームを指定します。 そうするには： 新しい開発チームの正しいコード署名ファイルがBitriseにアップロードされていることを確認してください。 このエクスポートオプションにも使用するように開発者ポータルチームを設定します（ 配布方法 ）。 をセットする 配布方法 。 " }, 
{ "title" : "ReactNativeアプリのテスト ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#reactnativeアプリのテスト-78570", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリのテスト ", 
"snippet" : "ReactNativeの組み込みテストメソッドを使用できます。 冗談 ユニットテストを実行します。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します npmコマンドを実行します ワークフローに進みます。 の中に 実行する引数を指定したnpmコマンド 入力フィールド、タイプ テスト 。...", 
"body" : "ReactNativeの組み込みテストメソッドを使用できます。 冗談 ユニットテストを実行します。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します npmコマンドを実行します ワークフローに進みます。 の中に 実行する引数を指定したnpmコマンド 入力フィールド、タイプ テスト 。 " }, 
{ "title" : "ReactNativeアプリのデプロイ ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#reactnativeアプリのデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリのデプロイ ", 
"snippet" : "ReactNativeアプリを次の場所にデプロイできます。 bitrise.io：これにより、生成されたバイナリをダウンロードし、パブリックインストールページを介して他のユーザーと共有できます。 オンラインストア：複数の異なるオンラインストアを統合しています。これらのガイドでは、GooglePlayとAppleのAppStoreに公開する方法を紹介します。...", 
"body" : "ReactNativeアプリを次の場所にデプロイできます。 bitrise.io：これにより、生成されたバイナリをダウンロードし、パブリックインストールページを介して他のユーザーと共有できます。 オンラインストア：複数の異なるオンラインストアを統合しています。これらのガイドでは、GooglePlayとAppleのAppStoreに公開する方法を紹介します。 " }, 
{ "title" : "クロスプラットフォームアプリをbitrise.ioにデプロイする ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#クロスプラットフォームアプリをbitrise-ioにデプロイする-78570", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリのデプロイ \/ クロスプラットフォームアプリをbitrise.ioにデプロイする ", 
"snippet" : "The bitrise.ioにデプロイします ステップは、ビルドに関連するすべてのアーティファクトをにアップロードします アーティファクト ビルドのページのタブ。 パブリックインストールページを使用して、生成されたアプリファイル（Androidの場合はAAB、iOSの場合はIPAファイル）をチームメンバーと共有できます。パブリックインストールページは、生成されたアプリバイナリをデバイスにインストールできる他のユーザーと共有できるURLです。 AAB \/ APKまたはIPAファイルが作成されたことをユーザーグループまたは個々のユーザーに通知することもできます。 expo.ioへの公開 NS Bi...", 
"body" : "The bitrise.ioにデプロイします ステップは、ビルドに関連するすべてのアーティファクトをにアップロードします アーティファクト ビルドのページのタブ。 パブリックインストールページを使用して、生成されたアプリファイル（Androidの場合はAAB、iOSの場合はIPAファイル）をチームメンバーと共有できます。パブリックインストールページは、生成されたアプリバイナリをデバイスにインストールできる他のユーザーと共有できるURLです。 AAB \/ APKまたはIPAファイルが作成されたことをユーザーグループまたは個々のユーザーに通知することもできます。 expo.ioへの公開 NS Bitrise.ioにデプロイします ステップはExpoコマンドを使用せず、に公開しません expo.io 。このステップでは、アーティファクトをBitriseに公開しますが、特定のプラットフォームに固有のものではありません。 に公開する必要がある場合 expo.io 、 をセットする イジェクト後にexpopublishを実行しますか？ の入力 イジェクトエキスポ にステップ yes 。その場合、公開するExpoアカウントのユーザー名とパスワードを入力する必要があることに注意してください expo.io。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 あなたが持っていることを確認してください bitrise.ioにデプロイします ワークフローにステップインします。 の中に 通知：ユーザーの役割 、この役割が付与されている人だけに通知されるように、役割を追加します。または、 通知：メール 通知するユーザーの電子メールアドレスを含むフィールド。 これらのメールアドレスを次のように設定してください 秘密 ！これらの詳細は、以下で変更することもできます。 通知 クリックすると 目 で生成されたバイナリの横にあるアイコン アーティファクト タブ。 ステップでパブリックインストールページを生成する場合は、 アプリの公開ページを有効にしますか？ への入力 NS 。 " }, 
{ "title" : "アプリをiTunesConnectにデプロイする ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#アプリをitunesconnectにデプロイする-78570", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリのデプロイ \/ アプリをiTunesConnectにデプロイする ", 
"snippet" : "アプリをiTunesConnectにプッシュするたびに、固有のビルドとバージョン番号が必要であることに注意してください。 いずれかまたは両方をインクリメント 展開する前に。 あなたが働いていることを確認してください AppleDeveloperアカウントへの接続 。 自分のマシンで少なくとも1回はIPAファイルを生成します。 必要なすべてのコード署名ファイルをアップロードする Bitriseに。 アプリをiTunesConnectにデプロイするには、配布タイプの証明書とAppStoreタイプのプロビジョニングプロファイルが必要です。 確認してください iOS用のXcodeアーカイブとエクスポー...", 
"body" : "アプリをiTunesConnectにプッシュするたびに、固有のビルドとバージョン番号が必要であることに注意してください。 いずれかまたは両方をインクリメント 展開する前に。 あなたが働いていることを確認してください AppleDeveloperアカウントへの接続 。 自分のマシンで少なくとも1回はIPAファイルを生成します。 必要なすべてのコード署名ファイルをアップロードする Bitriseに。 アプリをiTunesConnectにデプロイするには、配布タイプの証明書とAppStoreタイプのプロビジョニングプロファイルが必要です。 確認してください iOS用のXcodeアーカイブとエクスポート ステップはワークフローにあります。 をセットする 自動コード署名 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を使用しない場合、またはAppleサービス認証にステップ入力のみを使用する場合。 api-key 使用する場合 APIキー認証 。 apple-id 使用する場合 AppleID認証 。 をセットする エクスポート方法を選択してください ステップの入力 app-store 。 このステップでは、エクスポートされた.ipaファイルのパスが$ BITRISE_IPA_PATH環境変数に保存されます。 追加します Deploy to iTunes Connect ワークフローに進みます。 必要な入力を入力します。 アプリのAppleIDまたはバンドルIDのいずれかが必須の入力です。 2つのうちの1つを提供する必要があります。 あなたが設定した場合 レビューのために送信 に true 、ステップは、送信がiTunes Connectで処理されるのを待ってから、指定されたバージョンのアプリをレビューのために送信します。 のデフォルト値 アプリバージョンの更新をスキップ 入力は No 。別の方法でアプリのバージョン番号をインクリメントした場合にのみ変更してください。 複数のチームにリンクされているiTunesConnectアカウントを使用する場合は、チームIDまたはチーム名のいずれかを入力してください。 ビルドを開始します。 すべてがうまくいけば、アプリはiTunes Connectに送信され、TestflightまたはAppStoreから配布できます。 " }, 
{ "title" : "AndroidプロジェクトをGooglePlayにデプロイする ", 
"url" : "入門/reactnativeアプリの使用を開始する.html#androidプロジェクトをgoogleplayにデプロイする-78570", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ ReactNativeアプリの使用を開始する \/ ReactNativeアプリのデプロイ \/ AndroidプロジェクトをGooglePlayにデプロイする ", 
"snippet" : "あなたは使用することができます GooglePlayにデプロイする ワークフローにステップインして、デジタル署名されたAAB \/ APKをGooglePlayストアにアップロードします。 コード署名を構成する あなたのアプリのために。 GooglePlayアクセスを構成します。 これを行う必要があるのは、アプリの最初のGooglePlayデプロイの場合のみです。 あなたが持っていることを確認してください GooglePlayにデプロイする 後のステップ Androidサイン ワークフローにステップインします。 次のように、必須の入力フィールドに入力します。 サービスアカウントのJSONキーファ...", 
"body" : "あなたは使用することができます GooglePlayにデプロイする ワークフローにステップインして、デジタル署名されたAAB \/ APKをGooglePlayストアにアップロードします。 コード署名を構成する あなたのアプリのために。 GooglePlayアクセスを構成します。 これを行う必要があるのは、アプリの最初のGooglePlayデプロイの場合のみです。 あなたが持っていることを確認してください GooglePlayにデプロイする 後のステップ Androidサイン ワークフローにステップインします。 次のように、必須の入力フィールドに入力します。 サービスアカウントのJSONキーファイルパス ：このフィールドはリモートURLを受け入れることができるため、アップロードされたサービスアカウントのJSONキーを含むEnvVarを指定する必要があります。例えば： $BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL 。 パッケージ名 ：Androidアプリのパッケージ名。 追跡 ：APKをデプロイするトラック（たとえば、alpha \/ beta \/ rollout \/ productまたは設定したカスタムトラック）。 " }, 
{ "title" : "Flutterアプリの使用を開始する ", 
"url" : "入門/flutterアプリの使用を開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する ", 
"snippet" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続し、Flutterアプリの最初のビルドを実行して、Bitriseの使用を開始します。 Flutterは、開発者がiOSとAndroidの両方のネイティブアプリを作成できるようにするモバイルアプリSDKです。 ビットライズ Flutterアプリをサポート：Flutterのすべてのニーズに対応するための専用の手順があります。このガイドでは、BitriseでのシンプルなFlutterアプリのセットアップ、テスト、構築、デプロイについて説明します。...", 
"body" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続し、Flutterアプリの最初のビルドを実行して、Bitriseの使用を開始します。 Flutterは、開発者がiOSとAndroidの両方のネイティブアプリを作成できるようにするモバイルアプリSDKです。 ビットライズ Flutterアプリをサポート：Flutterのすべてのニーズに対応するための専用の手順があります。このガイドでは、BitriseでのシンプルなFlutterアプリのセットアップ、テスト、構築、デプロイについて説明します。 " }, 
{ "title" : "BitriseにFlutterアプリを追加する ", 
"url" : "入門/flutterアプリの使用を開始する.html#bitriseにflutterアプリを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する \/ BitriseにFlutterアプリを追加する ", 
"snippet" : "Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップするあなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウン...", 
"body" : "Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップするあなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 アプリのプライバシーを次のいずれかに設定します 民間 また 公衆 をクリックします 次 。 プライベート アプリとパブリック アプリ パブリック アプリとプライベート アプリの最も重要な違いは、アプリがパブリックの場合、ビルド URL を知っている全員がビルド ログを表示できることです。 公開アプリ.プライベート アプリを使用すると、誰がアプリにアクセスできるかを完全に制御できます。 リポジトリをホストするGitホスティングサービスを選択してから、プロジェクトをホストする独自のリポジトリを見つけて選択します。 リポジトリアクセスを設定するように求められたら、をクリックします いいえ、SSHキーを自動追加します 。 プロジェクトの構成を含むブランチの名前を入力します- 主要 たとえば、-次にクリックします 次 。 Bitriseがプロジェクトを検証している間待ちます。 構成ファイルを探し、それらに基づいてアプリをセットアップします。 Flutterアプリの場合、間違いなく必要です pubspec.yaml プロジェクト内のファイル。 プロジェクトの構成を含むブランチの名前（マスターなど）を入力し、[ 次 。 FlutterプロジェクトにiOSプロジェクトがある場合は、.ipaエクスポート方法を選択する必要があります。 プロンプトが表示されたら、Webhookを登録します。 Webhookを使用すると、コードがリポジトリにプッシュされたとき、またはプルリクエストが作成されたときに、Bitriseは自動的にビルドを開始できます。これにより、最初のビルドも開始されます。メッセージをクリックすると、ビルドページに移動します。 " }, 
{ "title" : "Flutterアプリのテスト ", 
"url" : "入門/flutterアプリの使用を開始する.html#flutterアプリのテスト", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する \/ Flutterアプリのテスト ", 
"snippet" : "Flutterを使用して、ユニットテスト、ウィジェットテスト、および統合テストを記述して実行できます。詳細については、チェックアウトしてください Flutterの公式ドキュメント 。 自動生成されたものを使用できます 主要な Flutterアプリをテストするためのワークフロー。デフォルトでは、 フラッター分析 静的コードテストを実行するステップ。また、 フラッターテスト Flutterテストを実行し、コードカバレッジレポートを生成することもできるステップ。 テストレポート NS Bitrise.ioにデプロイします ステップは、の結果をエクスポートします フラッターテスト にステップ テストレ...", 
"body" : "Flutterを使用して、ユニットテスト、ウィジェットテスト、および統合テストを記述して実行できます。詳細については、チェックアウトしてください Flutterの公式ドキュメント 。 自動生成されたものを使用できます 主要な Flutterアプリをテストするためのワークフロー。デフォルトでは、 フラッター分析 静的コードテストを実行するステップ。また、 フラッターテスト Flutterテストを実行し、コードカバレッジレポートを生成することもできるステップ。 テストレポート NS Bitrise.ioにデプロイします ステップは、の結果をエクスポートします フラッターテスト にステップ テストレポート デフォルトのアドオン：アドオンでFlutterテストの結果を確認するには、を追加するだけです。 Bitrise.ioにデプロイします ワークフローの最後にステップします。 Flutterアプリでテストを実行するには： アプリのワークフローエディターを開き、 主要な ワークフロー、またはテストの実行に使用するワークフロー。 の中に Flutterインストール ステップ、記入してください FlutterSDKバージョン 入力。 FlutterSDKのgitリポジトリのタグまたはブランチのいずれかを指定できます。デフォルト値は stable 。これは、Flutterの最新の安定したブランチを使用します。 使用可能なバージョンタグを見つけるには、以下を確認してください。 https:\/\/github.com\/flutter\/flutter\/releases 。 利用可能なブランチを確認するには、以下を確認してください。 https:\/\/github.com\/flutter\/flutter\/branches 。 追加します フラッターテスト ステップ。の中に 追加のパラメータ 入力し、使用したいフラグを入力します。 ステップは実行します flutter test 指定されたフラグを指定したコマンド。使用可能なフラグを確認するには、自分のマシンでコマンドラインインターフェイスを開いて実行します flutter test --help 。 確認してください プロジェクトの場所 の入力 フラッターテスト ステップは正しいです。 デフォルト値は、Flutterプロジェクトの場所用に作成された環境変数（Env Var）です。 コードカバレッジレポートを生成する場合は、 コードカバレッジファイルを生成しますか？ への入力 yes 。 これは実行されます flutter test とのコマンド --coverage 国旗。 テスト結果をにエクスポートするには テストレポート アドオン、追加 Bitrise.ioにデプロイします ワークフローの最後に進みます。 ビルドを実行してください！ それが完了すると、あなたはであなたのテスト結果を見つけることができます アーティファクト アプリのビルドページのタブ。 " }, 
{ "title" : "Flutterアプリのデプロイ ", 
"url" : "入門/flutterアプリの使用を開始する.html#flutterアプリのデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する \/ Flutterアプリのデプロイ ", 
"snippet" : "Flutterアプリをビルドしてデプロイするには、ワークフローに次のFlutterステップが含まれている必要があります。 Flutterインストール フラッタービルド リポジトリでプラットフォームを指定している場合は、 配備 Bitriseにアプリを追加すると、ワークフローが自動的に生成されます。このワークフローの内容はプラットフォームによって異なります。たとえば、アプリにiOSプロジェクトのみが含まれている場合、ワークフローには 証明書とプロファイルのインストーラー そしてその iOS用のXcodeアーカイブとエクスポート ステップ。 iOSプロジェクトとAndroidプロジェクトの両方を同...", 
"body" : "Flutterアプリをビルドしてデプロイするには、ワークフローに次のFlutterステップが含まれている必要があります。 Flutterインストール フラッタービルド リポジトリでプラットフォームを指定している場合は、 配備 Bitriseにアプリを追加すると、ワークフローが自動的に生成されます。このワークフローの内容はプラットフォームによって異なります。たとえば、アプリにiOSプロジェクトのみが含まれている場合、ワークフローには 証明書とプロファイルのインストーラー そしてその iOS用のXcodeアーカイブとエクスポート ステップ。 iOSプロジェクトとAndroidプロジェクトの両方を同時にビルドすることも、それぞれ独自のワークフローを使用して別々にビルドすることもできます。これはで設定できます プラットホーム の入力 フラッタービルド いつでもステップ。デフォルトでは、ステップは、Bitriseにアプリを追加するときにスキャナーが検出した1つまたは複数のプラットフォームに従って構成されます。 この構成で使用するワークフローの例を、必要なすべての手順とともに示します。 Pipelines for parallelization In these examples, we're assuming that you are building and deploying both the iOS and Android versions of your app in the same Workflow, performing the necessary operations serially. However, you can do both versions in parallel with a single build trigger by using Pipelines: パイプラインの構築[ベータ版]Bitriseパイプラインの構成パッケージとライブラリ Flutterパッケージとライブラリの構築もサポートしています。アプリの場合とは異なり、ビルドするアーティファクトがないため、 フラッタービルド ワークフローにステップインします。 " }, 
{ "title" : "クロスプラットフォームアプリをbitrise.ioにデプロイする ", 
"url" : "入門/flutterアプリの使用を開始する.html#クロスプラットフォームアプリをbitrise-ioにデプロイする-78571", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する \/ Flutterアプリのデプロイ \/ クロスプラットフォームアプリをbitrise.ioにデプロイする ", 
"snippet" : "The bitrise.ioにデプロイします ステップは、ビルドに関連するすべてのアーティファクトをにアップロードします アーティファクト ビルドのページのタブ。 パブリックインストールページを使用して、生成されたアプリファイル（Androidの場合はAAB、iOSの場合はIPAファイル）をチームメンバーと共有できます。パブリックインストールページは、生成されたアプリバイナリをデバイスにインストールできる他のユーザーと共有できるURLです。 AAB \/ APKまたはIPAファイルが作成されたことをユーザーグループまたは個々のユーザーに通知することもできます。 でアプリを開きます ビットライズ ...", 
"body" : "The bitrise.ioにデプロイします ステップは、ビルドに関連するすべてのアーティファクトをにアップロードします アーティファクト ビルドのページのタブ。 パブリックインストールページを使用して、生成されたアプリファイル（Androidの場合はAAB、iOSの場合はIPAファイル）をチームメンバーと共有できます。パブリックインストールページは、生成されたアプリバイナリをデバイスにインストールできる他のユーザーと共有できるURLです。 AAB \/ APKまたはIPAファイルが作成されたことをユーザーグループまたは個々のユーザーに通知することもできます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 あなたが持っていることを確認してください bitrise.ioにデプロイします ワークフローにステップインします。 の中に 通知：ユーザーの役割 、この役割が付与されている人だけに通知されるように、役割を追加します。または、 通知：メール 通知するユーザーの電子メールアドレスを含むフィールド。 これらのメールアドレスを次のように設定してください 秘密 ！これらの詳細は、以下で変更することもできます。 通知 クリックすると 目 で生成されたバイナリの横にあるアイコン アーティファクト タブ。 ステップでパブリックインストールページを生成する場合は、 アプリの公開ページを有効にしますか？ への入力 NS 。 " }, 
{ "title" : "FlutterアプリをAppStoreConnectにデプロイする ", 
"url" : "入門/flutterアプリの使用を開始する.html#flutterアプリをappstoreconnectにデプロイする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する \/ Flutterアプリのデプロイ \/ FlutterアプリをAppStoreConnectにデプロイする ", 
"snippet" : "iOSFlutterプロジェクトをAppStoreにデプロイするには、アプリをビルドし、IPAファイルをエクスポートして、AppStoreに送信する必要があります。 テストとは異なり、これにはコード署名ファイルが必要です。 iOS配布証明書（.p12ファイル）。 AppStoreプロビジョニングプロファイル。 Flutterアプリケーションの場合、コード署名にはXcodeのプロジェクト設定でチームIDを設定する必要があります。...", 
"body" : "iOSFlutterプロジェクトをAppStoreにデプロイするには、アプリをビルドし、IPAファイルをエクスポートして、AppStoreに送信する必要があります。 テストとは異なり、これにはコード署名ファイルが必要です。 iOS配布証明書（.p12ファイル）。 AppStoreプロビジョニングプロファイル。 Flutterアプリケーションの場合、コード署名にはXcodeのプロジェクト設定でチームIDを設定する必要があります。 " }, 
{ "title" : "FlutterアプリのチームIDの構成 ", 
"url" : "入門/flutterアプリの使用を開始する.html#flutterアプリのチームidの構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する \/ Flutterアプリのデプロイ \/ FlutterアプリをAppStoreConnectにデプロイする \/ FlutterアプリのチームIDの構成 ", 
"snippet" : "iOSプロジェクトをローカルで作成したら、Xcodeでそのプロジェクト設定を確認する必要があります。具体的には、有効なチームIDを設定する必要があります。設定しないと、Bitriseでビルドが失敗します。 Xcodeで、 Runner.xcworkspace あなたのアプリの ios フォルダ。 アプリの設定を表示するには、 ランナー Xcodeプロジェクトナビゲータのプロジェクト。次に、メインビューのサイドバーで、 ランナー 目標。 を選択 全般的 タブ。 の中に 署名 セクション、を見つけます チーム メニューを表示し、登録済みのAppleDeveloperアカウントに関連付けられているチ...", 
"body" : "iOSプロジェクトをローカルで作成したら、Xcodeでそのプロジェクト設定を確認する必要があります。具体的には、有効なチームIDを設定する必要があります。設定しないと、Bitriseでビルドが失敗します。 Xcodeで、 Runner.xcworkspace あなたのアプリの ios フォルダ。 アプリの設定を表示するには、 ランナー Xcodeプロジェクトナビゲータのプロジェクト。次に、メインビューのサイドバーで、 ランナー 目標。 を選択 全般的 タブ。 の中に 署名 セクション、を見つけます チーム メニューを表示し、登録済みのAppleDeveloperアカウントに関連付けられているチームに設定します。 リポジトリへの変更をコミットしてください！ 変更をコミットすることを忘れないでください。 チーム ID をローカルでのみ設定すると、ビルドは Bitrise で失敗します! " }, 
{ "title" : "BitriseのAppStoreへのFlutterデプロイメントの構成 ", 
"url" : "入門/flutterアプリの使用を開始する.html#bitriseのappstoreへのflutterデプロイメントの構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する \/ Flutterアプリのデプロイ \/ FlutterアプリをAppStoreConnectにデプロイする \/ BitriseのAppStoreへのFlutterデプロイメントの構成 ", 
"snippet" : "アプリを App Store にデプロイするには、コード署名ファイルをアップロードする必要があります。次の 2 つのオプションがあります。 コード署名証明書を Bitrise にアップロードし、自動コード署名を使用します。 iOS コード署名を管理する ステップ。 プロビジョニング プロファイルとコード署名証明書を Bitrise にアップロードし、手動でコード署名を使用します。 証明書とプロファイルのインストーラー ステップ。 このガイドでは、2 番目のオプションである手動コード署名に焦点を当てます。 あなたが持っていることを確認してください 証明書とプロファイルのインストーラー ワークフロ...", 
"body" : "アプリを App Store にデプロイするには、コード署名ファイルをアップロードする必要があります。次の 2 つのオプションがあります。 コード署名証明書を Bitrise にアップロードし、自動コード署名を使用します。 iOS コード署名を管理する ステップ。 プロビジョニング プロファイルとコード署名証明書を Bitrise にアップロードし、手動でコード署名を使用します。 証明書とプロファイルのインストーラー ステップ。 このガイドでは、2 番目のオプションである手動コード署名に焦点を当てます。 あなたが持っていることを確認してください 証明書とプロファイルのインストーラー ワークフローにステップインします。 必要なコード署名ファイルをにアップロードします ビットライズ 。 を開きます フラッタービルド ステップして見つけます iOSプラットフォーム構成 入力グループ。 確認してください 追加のパラメータ 入力には値があります --release 。 確認してください プラットホーム ステップの入力：どちらかに設定されていることを確認してください iOS また both 。 をセットする iOS出力アーティファクトタイプ への入力 記録 。 あなたが持っていることを確認してください iOS用のXcodeアーカイブとエクスポート ワークフローにステップインします。 それは後でなければなりません フラッタービルド ステップ。 をセットする エクスポート方法を選択してください ステップの入力 アプリストア 。 追加します iTunesConnectにデプロイする ワークフローの最後に進みます。 それぞれの入力フィールドにAppleのクレデンシャルを入力します。 Apple ID。 パスワード、またはiTunes Connectで2要素認証を使用する場合は、アプリケーションのパスワード。 心配しないでください。パスワードはログに表示されたり、公開されたりすることはありません。 ビルドを開始します！ すべてがうまくいけば、ステップはアプリをApp StoreConnectに送信します。 App Store Connectページから、Testflightを介して外部テスターにアプリを配布するか、AppStore自体にリリースすることができます。 " }, 
{ "title" : "FlutterアプリをGooglePlayにデプロイする ", 
"url" : "入門/flutterアプリの使用を開始する.html#flutterアプリをgoogleplayにデプロイする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する \/ Flutterアプリのデプロイ \/ FlutterアプリをGooglePlayにデプロイする ", 
"snippet" : "アプリをGooglePlayにデプロイするには、アプリバンドルファイルをエクスポートして署名する必要があります。 2つのオプションがあります。 あなたはできる コード署名を構成する アプリの build.gradle ファイルを作成すると、ビルドフェーズでFlutterがアプリに署名します。 専用のステップを使用して、BitriseでAABまたはAPKファイルに署名します。 このガイドの範囲は2番目のオプションです：AAB \/ APKファイルに署名する Androidサイン ステップ。 キーストアファイルを生成する 。 コード署名にはキーストアファイルが必要です。 Bitriseでアプリを開き...", 
"body" : "アプリをGooglePlayにデプロイするには、アプリバンドルファイルをエクスポートして署名する必要があります。 2つのオプションがあります。 あなたはできる コード署名を構成する アプリの build.gradle ファイルを作成すると、ビルドフェーズでFlutterがアプリに署名します。 専用のステップを使用して、BitriseでAABまたはAPKファイルに署名します。 このガイドの範囲は2番目のオプションです：AAB \/ APKファイルに署名する Androidサイン ステップ。 キーストアファイルを生成する 。 コード署名にはキーストアファイルが必要です。 Bitriseでアプリを開き、 ワークフロー >> コード署名 >> Androidコード署名 。 キーストアファイルをドラッグアンドドロップし、メタデータに入力します。 GooglePlayアクセスを構成します。 これを行う必要があるのは、アプリの最初のGooglePlayデプロイの場合のみです。 の中に フラッタービルド ステップ、見つけます Androidプラットフォームの構成 グループを入力し、 追加のパラメータ 入力には値があります --release 。 の中に Androidの出力アーティファクトタイプ 入力フィールド、いずれかを選択します APK また appbundle 展開要件によって異なります。 の中に 出力（.apk、.aab）パターン 入力、パスを設定します GooglePlayにデプロイする ステップは、生成されたバイナリにアクセスできるようになります。 パスは、プロジェクトのソースディレクトリからの相対パスである必要があります。 BITRISE_SOURCE_DIR 環境変数。 あなたが持っていることを確認してください GooglePlayにデプロイする 後のステップ Androidサイン ワークフローにステップインします。 次のように、必須の入力フィールドに入力します。 サービスアカウントのJSONキーファイルパス ：このフィールドはリモートURLを受け入れることができるため、アップロードされたサービスアカウントのJSONキーを含むEnvVarを指定する必要があります。例えば： $BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL 。 パッケージ名 ：Androidアプリのパッケージ名。 追跡 ：APKをデプロイするトラック（たとえば、alpha \/ beta \/ rollout \/ productまたは設定したカスタムトラック）。 " }, 
{ "title" : " Additional Flutter content ", 
"url" : "入門/flutterアプリの使用を開始する.html#-en--additional-flutter-content", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Flutterアプリの使用を開始する \/ Additional Flutter content ", 
"snippet" : "Building Android apps with Flutter modules Flutter Test Step freezes on \"Waiting for another flutter command to release the startup lock...\" Reducing build time for Flutter apps Could not resolve package dependencies in Flutter...", 
"body" : " Building Android apps with Flutter modules Flutter Test Step freezes on \"Waiting for another flutter command to release the startup lock...\" Reducing build time for Flutter apps Could not resolve package dependencies in Flutter " }, 
{ "title" : "Ionic \/ Cordovaアプリの使用を開始する ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する ", 
"snippet" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、Ionic \/ Cordovaアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 CordovaおよびIonicフレームワークを使用して、クロスプラットフォームアプリを開発できます。 Bitriseは、自動テスト、コード署名、および展開手順を支援するため、iOSおよび\/またはAndroidアプリをそれぞれのマーケットプレイスにすぐに出荷できます。ワークスペースに複数の同時実行性がある場合は、AndroidとiOSのビルドを同時に実行できます。それでは、プロセスをご案内します。 Bitriseア...", 
"body" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、Ionic \/ Cordovaアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 CordovaおよびIonicフレームワークを使用して、クロスプラットフォームアプリを開発できます。 Bitriseは、自動テスト、コード署名、および展開手順を支援するため、iOSおよび\/またはAndroidアプリをそれぞれのマーケットプレイスにすぐに出荷できます。ワークスペースに複数の同時実行性がある場合は、AndroidとiOSのビルドを同時に実行できます。それでは、プロセスをご案内します。 Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップする" }, 
{ "title" : "BitriseにIonic \/ Cordovaアプリを追加する ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#bitriseにionic---cordovaアプリを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ BitriseにIonic \/ Cordovaアプリを追加する ", 
"snippet" : "あなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 アプリのプライバシーを次のいずれかに設定します 民間 また 公衆 をクリックします 次 。 プライベート アプリとパブリック アプリ パブリック アプリとプライベート アプリの最も重要な違いは、アプリがパブリックの場合、ビルド UR...", 
"body" : "あなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 アプリのプライバシーを次のいずれかに設定します 民間 また 公衆 をクリックします 次 。 プライベート アプリとパブリック アプリ パブリック アプリとプライベート アプリの最も重要な違いは、アプリがパブリックの場合、ビルド URL を知っている全員がビルド ログを表示できることです。 公開アプリ.プライベート アプリを使用すると、誰がアプリにアクセスできるかを完全に制御できます。 リポジトリをホストするGitホスティングサービスを選択してから、プロジェクトをホストする独自のリポジトリを見つけて選択します。 リポジトリアクセスを設定するように求められたら、をクリックします いいえ、SSHキーを自動追加します 。 プロジェクトの構成を含むブランチの名前を入力します- 主要 たとえば、-次にクリックします 次 。 Bitriseがプロジェクトを検証している間待ちます。構成ファイルを探し、それらに基づいてアプリをセットアップします。 で プロジェクトビルド構成 、アプリをビルドするプラットフォームを選択できます。次を選択できます。 iOS。 アンドロイド。 iOSおよびAndroid（Androidビルドが最初にビルドされる場所）。 プロンプトが表示されたらWebhookを登録して、コードがリポジトリにプッシュされたときにBitriseがビルドを自動的に開始できるようにします。 これにより、プライマリワークフローでの最初のビルドも開始されます。メッセージをクリックすると、ビルドページに移動します。最初のビルドではまだ.apkと.ipaは生成されませんが、ビルドのページでプロジェクトのログを確認できます。 " }, 
{ "title" : "の依存関係のインストール Ionic \/ Cordova アプリ ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#の依存関係のインストール-ionic---cordova-アプリ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ の依存関係のインストール Ionic \/ Cordova アプリ ", 
"snippet" : "Bitriseプロジェクトスキャナーが正常にスキャンした場合 Ionic \/ Cordova 事業、 npmコマンドを実行します また ヤーンコマンドを実行する ステップはデフォルトのワークフローに含まれます。これらの手順により、不足しているJavascriptの依存関係をアプリにインストールできます。 ネイティブAndroidの依存関係については、 不足しているAndroidSDKコンポーネントをインストールする ステップ。 ネイティブiOSの依存関係については、特に、 Homebrewインストール ステップまたは CocoaPodsインストールを実行します ステップ。 npmを使用してJa...", 
"body" : "Bitriseプロジェクトスキャナーが正常にスキャンした場合 Ionic \/ Cordova 事業、 npmコマンドを実行します また ヤーンコマンドを実行する ステップはデフォルトのワークフローに含まれます。これらの手順により、不足しているJavascriptの依存関係をアプリにインストールできます。 ネイティブAndroidの依存関係については、 不足しているAndroidSDKコンポーネントをインストールする ステップ。 ネイティブiOSの依存関係については、特に、 Homebrewインストール ステップまたは CocoaPodsインストールを実行します ステップ。 npmを使用してJavascriptの依存関係をインストールするには： npmの代わりにYarnを使用する このガイドでは、npmを使用してJavascriptの依存関係をインストールしています。ただし、 ヤーンコマンドを実行する 手順：追加の構成を必要とせずに、不足しているJS依存関係をインストールできます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 ワークフローに npmコマンドを実行します ステップ。 の中に 実行する引数を指定したnpmコマンド 入力フィールド、タイプ インストール 。 を使用して npm ci コマンドの代わりに npm install すでに最新版をお持ちの場合 package-lock.json プロジェクトでファイルを使用することをお勧めします。 シ コマンドイン 実行する引数を指定した「npm」コマンド 入力。使用する npm ci に比べてビルド時間が大幅に短縮されるだけでなく、 npm install しかし、より信頼性の高いビルドも同様です。 " }, 
{ "title" : "Ionic \/ Cordovaアプリのテスト ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#ionic---cordovaアプリのテスト", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのテスト ", 
"snippet" : "BitriseでIonic \/ Cordovaアプリの単体テストを実行するには、 カルマジャスミンテストランナー また ジャスミンテストランナー ステップ。 Cordova \/ IonicプロジェクトにKarmaJasmine依存関係がある場合 package.json ファイルの場合、アプリを追加するときにスキャナーがそれを検出し、それぞれのテストステップをワークフローに自動的に挿入します。この依存関係がプロジェクトにない場合は、ワークフローエディターを使用して、テスト手順の1つをワークフローに手動で挿入できます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページの...", 
"body" : "BitriseでIonic \/ Cordovaアプリの単体テストを実行するには、 カルマジャスミンテストランナー また ジャスミンテストランナー ステップ。 Cordova \/ IonicプロジェクトにKarmaJasmine依存関係がある場合 package.json ファイルの場合、アプリを追加するときにスキャナーがそれを検出し、それぞれのテストステップをワークフローに自動的に挿入します。この依存関係がプロジェクトにない場合は、ワークフローエディターを使用して、テスト手順の1つをワークフローに手動で挿入できます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 ワークフローにテストステップがあることを確認してください。 依存関係のインストール 依存関係をインストールする必要があります テストを実行する前に。 あなたはから選ぶことができます カルマジャスミンテストランナー そしてその ジャスミンテストランナー ステップ。 Karma Jasmine TestRunnerを使用したCordovaアプリの構成 この例では、 bitrise.yml と呼ばれるワークフローを含む構成 主要な 。このワークフローには、 カルマジャスミンテストランナー ステップ。 primary:\n steps:\n - activate-ssh-key@4.0.3:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@4.0.11: {}\n - script@1.1.5:\n title: Do anything with Script step\n - npm@0.9.1:\n inputs:\n - command: install\n - karma-jasmine-runner@0.9.1: {}\n - deploy-to-bitrise-io@1.3.15: {} " }, 
{ "title" : "Ionic \/ Cordovaアプリのコード署名 ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#ionic---cordovaアプリのコード署名", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのコード署名 ", 
"snippet" : "iOSまたはAndroid用のアプリを作成する場合は、プラットフォーム固有のファイルをにアップロードする必要があります。 コード署名 ワークフローエディタのタブ。プラットフォームのすべてのコード署名ファイルをアップロードする必要がある両方のプラットフォームのビルドを生成することもできます。...", 
"body" : "iOSまたはAndroid用のアプリを作成する場合は、プラットフォーム固有のファイルをにアップロードする必要があります。 コード署名 ワークフローエディタのタブ。プラットフォームのすべてのコード署名ファイルをアップロードする必要がある両方のプラットフォームのビルドを生成することもできます。 " }, 
{ "title" : "IonicおよびCordovaプロジェクトのiOSコード署名 ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#ionicおよびcordovaプロジェクトのiosコード署名-78572", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのコード署名 \/ IonicおよびCordovaプロジェクトのiOSコード署名 ", 
"snippet" : "Bitriseは、IonicアプリとCordovaアプリのiOSコード署名の手動プロビジョニングと自動プロビジョニングの両方をサポートしています。 当然、Bitriseはどちらかで構築されたiOSアプリケーションをサポートします イオン また コルドバ 。ただし、コード署名プロセスは、ネイティブXcodeプロジェクトとは少し異なります。 Bitriseは、IonicアプリとCordovaアプリの手動プロビジョニングと自動プロビジョニングの両方をサポートしています。また、プロセスは多少異なります。...", 
"body" : "Bitriseは、IonicアプリとCordovaアプリのiOSコード署名の手動プロビジョニングと自動プロビジョニングの両方をサポートしています。 当然、Bitriseはどちらかで構築されたiOSアプリケーションをサポートします イオン また コルドバ 。ただし、コード署名プロセスは、ネイティブXcodeプロジェクトとは少し異なります。 Bitriseは、IonicアプリとCordovaアプリの手動プロビジョニングと自動プロビジョニングの両方をサポートしています。また、プロセスは多少異なります。 " }, 
{ "title" : "手動プロビジョニングによるIonic \/ Cordovaコード署名 ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#手動プロビジョニングによるionic---cordovaコード署名-78572", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのコード署名 \/ IonicおよびCordovaプロジェクトのiOSコード署名 \/ 手動プロビジョニングによるIonic \/ Cordovaコード署名 ", 
"snippet" : "を呼び出して、IonicまたはCordovaプロジェクトからローカルにネイティブXcodeプロジェクトを生成します cordova platform add ios また ionic cordova platform add ios 。 私たちを使用してください codesigndoc するツール コード署名ファイルを収集する 。 ファイルをにアップロードする bitrise.io 。 これは、WebサイトのUIまたは codesigndoc ツール自体。 あなたが持っていることを確認してください 証明書とプロファイルのインストーラー ワークフローにステップインします。 追加します Cordo...", 
"body" : "を呼び出して、IonicまたはCordovaプロジェクトからローカルにネイティブXcodeプロジェクトを生成します cordova platform add ios また ionic cordova platform add ios 。 私たちを使用してください codesigndoc するツール コード署名ファイルを収集する 。 ファイルをにアップロードする bitrise.io 。 これは、WebサイトのUIまたは codesigndoc ツール自体。 あなたが持っていることを確認してください 証明書とプロファイルのインストーラー ワークフローにステップインします。 追加します Cordovaビルド構成を生成する ワークフローに進みます。それは後に来なければなりません 証明書とプロファイルのインストーラー ステップ。 ステップに必要な入力を入力します。両方が コード署名ID そしてその プロビジョニングプロファイル そのようにマークされていなくても、iOSアプリに必要な入力です。 ビルド構成 ：どちらかに設定できます debug また release 。 コードサインアイデンティティ ：開発者またはディストリビューションIDを入力します。 プロビジョニングプロファイル ：適切なプロビジョニングプロファイルを入力します。 包装タイプ ：これは、Xcodeによって生成されるビルドのタイプを制御します。必要なコード署名のタイプを設定します。 追加します Cordova archive または Ionic archive ワークフローへのステップ。 必要な入力を入力します。 NS プラットホーム 入力は次のように設定する必要があります。 device 。 NS ビルドコマンド構成 入力は一致する必要があります ビルド構成 の入力 Cordovaビルド構成を生成する ステップ。 このステップは、 Cordovaビルド構成を生成する ワークフローにステップインします。 ビルドを実行してください！ " }, 
{ "title" : "自動プロビジョニングによるIonic \/ Cordovaコード署名 ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#自動プロビジョニングによるionic---cordovaコード署名-78572", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのコード署名 \/ IonicおよびCordovaプロジェクトのiOSコード署名 \/ 自動プロビジョニングによるIonic \/ Cordovaコード署名 ", 
"snippet" : ".p12署名証明書がにアップロードされていることを確認してください bitrise.io 。 使用する場合 codesigndoc ファイルを収集するには、次のコマンドを呼び出すことで、証明書のみをエクスポートするようにツールに指示できることに注意してください。 codesigndoc scan --certs-only xcode codesigndoc ファイルをWebサイトにアップロードすることも、手動でアップロードすることもできます。 追加します コルドバ準備 または イオン準備 ワークフローに進みます。これらのステップは、 platform rm と platform add コマン...", 
"body" : ".p12署名証明書がにアップロードされていることを確認してください bitrise.io 。 使用する場合 codesigndoc ファイルを収集するには、次のコマンドを呼び出すことで、証明書のみをエクスポートするようにツールに指示できることに注意してください。 codesigndoc scan --certs-only xcode codesigndoc ファイルをWebサイトにアップロードすることも、手動でアップロードすることもできます。 追加します コルドバ準備 または イオン準備 ワークフローに進みます。これらのステップは、 platform rm と platform add コマンド。 追加します iOS自動プロビジョニング ワークフローに進みます。最新バージョンであることを確認してください！ ステップはエクスポートします： プロジェクトの開発チーム。 インストールされたコードサインIDの名前。 インストールされたプロビジョニングプロファイル。 1つのコード署名ステップのみ あなたが両方を持っている場合 証明書とプロファイルのインストーラー そしてその iOS自動プロビジョニング ワークフローのステップで、ビルドで予期しない問題が発生する可能性があります。 を選択 Appleサービスの接続方法 （に基づく Bitriseで設定したAppleサービス ） そしてその 配布方法 。 追加します Cordovaビルド構成を生成する ワークフローに進みます。 によってエクスポートされたコード署名設定を使用するようにステップを構成します。 iOS自動予見 ステップ： 開発配布例 ： - generate-cordova-build-configuration:\n inputs:\n - development_team: $BITRISE_DEVELOPER_TEAM \n - package_type: development \n - code_sign_identity: iPhone Developer\n - configuration: debug\n 生産流通例 ： - generate-cordova-build-configuration:\n inputs:\n - development_team: $BITRISE_DEVELOPER_TEAM \n - package_type: app-store \n - code_sign_identity: iPhone Developer\n - configuration: release\n 追加します コルドバアーカイブ または イオンアーカイブ ワークフローに進みます。 必要な入力を入力します。 NS プラットホーム 入力は次のように設定する必要があります。 device 。 NS ビルドコマンド構成 入力は一致する必要があります ビルド構成 の入力 Cordovaビルド構成を生成する ステップ。 をセットする 準備ステップとしてプラットフォームを削除する必要がありますか？ に false 。これは非常に重要です。これにより、ステップで生成されたネイティブプロジェクトのプラットフォームが削除および再追加されないようになります。 コルドバ準備 または イオン準備 ステップ。 ビルドを実行してください！ " }, 
{ "title" : "Androidサインステップを使用したAndroidコード署名 ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#androidサインステップを使用したandroidコード署名-78572", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのコード署名 \/ Androidサインステップを使用したAndroidコード署名 ", 
"snippet" : "を使用して署名されたAPKを作成できます Androidサイン Bitriseワークフローにステップインします。このステップは、ワークフローエディターの[コード署名]タブにキーストアファイルを既にアップロードしている場合に実行するように構成されています。 を使用して署名されたAPKを作成できます Androidサイン ステップ あなたのBitriseで ワークフロー 。このステップは、キーストアファイルをすでにアップロードしている場合に実行するように構成されています。 コード署名 ワークフローエディタのタブ。 The Androidサイン プロジェクトで署名が構成されている場合は、手順は不要で...", 
"body" : "を使用して署名されたAPKを作成できます Androidサイン Bitriseワークフローにステップインします。このステップは、ワークフローエディターの[コード署名]タブにキーストアファイルを既にアップロードしている場合に実行するように構成されています。 を使用して署名されたAPKを作成できます Androidサイン ステップ あなたのBitriseで ワークフロー 。このステップは、キーストアファイルをすでにアップロードしている場合に実行するように構成されています。 コード署名 ワークフローエディタのタブ。 The Androidサイン プロジェクトで署名が構成されている場合は、手順は不要です。 build.gradle ファイル。もしそうなら、実行 Androidビルド ステップ（または Gradleランナー ステップ）出力（APKまたはAAB）に自動的に署名します。それでも、を使用することをお勧めします Androidサイン 簡単で安全な方法でプロジェクトに署名するステップ。 jarsignとapksigner APKはどちらかで署名できます jarsigner また apksigner 。 APKの場合、apksignerを使用してプロジェクトに署名する場合は、Androidの署名ステップで最初に有効化を設定する必要があります apksigner trueに入力し、APK署名スキーム入力を自動のままにします。こちらです apksigner APKの最小およびターゲットSDKバージョンをチェックし、必要なスキームを選択します。サポートされている最小バージョンが低い場合はV1スキームでプロジェクトに署名し、新しいシステムでは他のスキームでも署名します。 AABファイルはjarsignerでのみ署名できることに注意してください。ステップは使用します jarsigner で終わるファイルを検出した場合 .aab でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動 コード署名 >> Androidコード署名 。 キーストアファイルをにドラッグアンドドロップします ファイルをアップロードする のフィールド Androidキーストアファイル セクション。 キーストアファイルをアップロードすると、キーストアURLが自動的に生成されます。 Bitriseは環境変数を割り当てます（ BITRISEIO_ANDROID_KEYSTORE_URL ）値としてファイルのダウンロードURL（期間限定の読み取り専用ダウンロードURL）に。 Android Sign Stepが自動的にダウンロードするため、手動でダウンロードする必要はありません。 表示された3つの入力フィールドに資格情報を入力します。 キーストアのパスワード キーストアエイリアス 秘密鍵のパスワード クリック メタデータを保存する 。 キーストアファイルをANDROIDKEYSTORE FILEセクションに正常にアップロードすると、Bitriseは入力に基づいて次の環境変数を自動的にエクスポートします。 $BITRISEIO_ANDROID_KEYSTORE_ALIAS $BITRISEIO_ANDROID_KEYSTORE_PASSWORD $BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD $BITRISEIO_ANDROID_KEYSTORE_URL 追加します Androidサイン APKまたはAABファイルをビルドするステップの後にワークフローにステップします。 Bitriseは上記の環境変数を使用し、それらをのそれぞれのフィールドへの入力として設定します。 Androidサイン ステップ。ステップが実行されると、署名されたAPKまたはAABのいずれかが生成されます。署名されたAPKまたはAABは、デプロイ手順で使用されます。たとえば、 GooglePlayデプロイ ステップまたは Bitrise.ioにデプロイします ステップ。後者はAPK \/ AABをにデプロイします アプリとアーティファクト タブ。使用することもできます 船 APK \/ AABファイルを作成したら、アプリをデプロイします。 キーストアファイルのダウンロード キーストア ファイルは、ANDROID KEYSTORE FILE セクションからプロジェクト ディレクトリにダウンロードできます。 ファイルダウンローダ ステップ： - file-downloader:\n inputs:\n - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n - destination: \"$HOME\/keystores\/my_keystore.jks\" #native android# ステップでキーストア ファイルが必要な場合は、必ずそのステップを ファイルダウンローダ ステップ。 このステップの後、 my_keystore.jks で利用可能になります $HOME\/keystores\/my_keystore.jks 。 " }, 
{ "title" : "Ionic \/ Cordovaアプリのデプロイ ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#ionic---cordovaアプリのデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのデプロイ ", 
"snippet" : "BitriseでIonicまたはCordovaアプリをビルドしてデプロイするには、AndroidプロジェクトとiOSプロジェクトの両方にデジタル署名し（両方をビルドしている場合）、デプロイする前に、CordovaアーカイブまたはIonicアーカイブステップを使用してアプリをビルドする必要があります。 正常にビルドされたアプリは、次の場所にデプロイできます。 GooglePlayストアやAppleのAppStoreなどのオンラインストア。 Bitrise.io：生成されたバイナリは アーティファクト ビルドのページのタブ。そこからダウンロードするか、公開インストールページから他の人と共有すること...", 
"body" : "BitriseでIonicまたはCordovaアプリをビルドしてデプロイするには、AndroidプロジェクトとiOSプロジェクトの両方にデジタル署名し（両方をビルドしている場合）、デプロイする前に、CordovaアーカイブまたはIonicアーカイブステップを使用してアプリをビルドする必要があります。 正常にビルドされたアプリは、次の場所にデプロイできます。 GooglePlayストアやAppleのAppStoreなどのオンラインストア。 Bitrise.io：生成されたバイナリは アーティファクト ビルドのページのタブ。そこからダウンロードするか、公開インストールページから他の人と共有することができます。 " }, 
{ "title" : "クロスプラットフォームアプリをbitrise.ioにデプロイする ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#クロスプラットフォームアプリをbitrise-ioにデプロイする-78572", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのデプロイ \/ クロスプラットフォームアプリをbitrise.ioにデプロイする ", 
"snippet" : "The bitrise.ioにデプロイします ステップは、ビルドに関連するすべてのアーティファクトをにアップロードします アーティファクト ビルドのページのタブ。 パブリックインストールページを使用して、生成されたアプリファイル（Androidの場合はAAB、iOSの場合はIPAファイル）をチームメンバーと共有できます。パブリックインストールページは、生成されたアプリバイナリをデバイスにインストールできる他のユーザーと共有できるURLです。 AAB \/ APKまたはIPAファイルが作成されたことをユーザーグループまたは個々のユーザーに通知することもできます。 でアプリを開きます ビットライズ ...", 
"body" : "The bitrise.ioにデプロイします ステップは、ビルドに関連するすべてのアーティファクトをにアップロードします アーティファクト ビルドのページのタブ。 パブリックインストールページを使用して、生成されたアプリファイル（Androidの場合はAAB、iOSの場合はIPAファイル）をチームメンバーと共有できます。パブリックインストールページは、生成されたアプリバイナリをデバイスにインストールできる他のユーザーと共有できるURLです。 AAB \/ APKまたはIPAファイルが作成されたことをユーザーグループまたは個々のユーザーに通知することもできます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 あなたが持っていることを確認してください bitrise.ioにデプロイします ワークフローにステップインします。 の中に 通知：ユーザーの役割 、この役割が付与されている人だけに通知されるように、役割を追加します。または、 通知：メール 通知するユーザーの電子メールアドレスを含むフィールド。 これらのメールアドレスを次のように設定してください 秘密 ！これらの詳細は、以下で変更することもできます。 通知 クリックすると 目 で生成されたバイナリの横にあるアイコン アーティファクト タブ。 ステップでパブリックインストールページを生成する場合は、 アプリの公開ページを有効にしますか？ への入力 NS 。 " }, 
{ "title" : "AndroidプロジェクトをGooglePlayにデプロイする ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#androidプロジェクトをgoogleplayにデプロイする-78572", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのデプロイ \/ AndroidプロジェクトをGooglePlayにデプロイする ", 
"snippet" : "あなたは使用することができます GooglePlayにデプロイする ワークフローにステップインして、デジタル署名されたAAB \/ APKをGooglePlayストアにアップロードします。 追加します コルドバアーカイブ または イオンアーカイブ ワークフローに進みます。 1つのプロジェクトでiOSとAndroidの両方をビルドしていて、どちらかのアプリが失敗した場合、全体が失敗することに注意してください コルドバアーカイブ\/イオンアーカイブ ステップは失敗します。 必要な入力を入力します。 NS プラットホーム 入力をに設定する必要があります 端末 。 NS ビルドコマンド構成 入力は一致する...", 
"body" : "あなたは使用することができます GooglePlayにデプロイする ワークフローにステップインして、デジタル署名されたAAB \/ APKをGooglePlayストアにアップロードします。 追加します コルドバアーカイブ または イオンアーカイブ ワークフローに進みます。 1つのプロジェクトでiOSとAndroidの両方をビルドしていて、どちらかのアプリが失敗した場合、全体が失敗することに注意してください コルドバアーカイブ\/イオンアーカイブ ステップは失敗します。 必要な入力を入力します。 NS プラットホーム 入力をに設定する必要があります 端末 。 NS ビルドコマンド構成 入力は一致する必要があります ビルド構成 の入力 Cordovaビルド構成を生成する ステップ。 アーカイブステップは、 Cordovaビルド構成を生成する ワークフローにステップインします。 コード署名を構成する あなたのアプリのために。 GooglePlayアクセスを構成します。 これを行う必要があるのは、アプリの最初のGooglePlayデプロイの場合のみです。 あなたが持っていることを確認してください GooglePlayにデプロイする 後のステップ コルドバアーカイブ また イオンアーカイブ ワークフローにステップインします。 次のように、必須の入力フィールドに入力します。 サービスアカウントのJSONキーファイルパス ：このフィールドはリモートURLを受け入れることができるため、アップロードされたサービスアカウントのJSONキーを含むEnvVarを指定する必要があります。例えば： $BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL 。 パッケージ名 ：Androidアプリのパッケージ名。 追跡 ：APKをデプロイするトラック（たとえば、alpha \/ beta \/ rollout \/ productまたは設定したカスタムトラック）。 " }, 
{ "title" : "iOSプロジェクトをAppStoreにデプロイする ", 
"url" : "入門/ionic---cordovaアプリの使用を開始する.html#iosプロジェクトをappstoreにデプロイする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Ionic \/ Cordovaアプリの使用を開始する \/ Ionic \/ Cordovaアプリのデプロイ \/ iOSプロジェクトをAppStoreにデプロイする ", 
"snippet" : "追加します コルドバアーカイブ または イオンアーカイブ ワークフローに進みます。 1つのプロジェクトでiOSとAndroidの両方を対象にビルドしていて、どちらかのアプリが失敗した場合、全体が失敗することに注意してください コルドバアーカイブ\/イオンアーカイブ ステップは失敗します。 必要な入力を入力します。 NS プラットホーム 入力をに設定する必要があります 端末 。 NS ビルドコマンド構成 入力は一致する必要があります ビルド構成 の入力 Cordovaビルド構成を生成する ステップ。 アーカイブステップは、 Cordovaビルド構成を生成する ワークフローにステップインします。 i...", 
"body" : "追加します コルドバアーカイブ または イオンアーカイブ ワークフローに進みます。 1つのプロジェクトでiOSとAndroidの両方を対象にビルドしていて、どちらかのアプリが失敗した場合、全体が失敗することに注意してください コルドバアーカイブ\/イオンアーカイブ ステップは失敗します。 必要な入力を入力します。 NS プラットホーム 入力をに設定する必要があります 端末 。 NS ビルドコマンド構成 入力は一致する必要があります ビルド構成 の入力 Cordovaビルド構成を生成する ステップ。 アーカイブステップは、 Cordovaビルド構成を生成する ワークフローにステップインします。 iOSコード署名を構成する iOSプロジェクト用。 追加します App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect） 後、ワークフローに進みます iOS用のXcodeアーカイブとエクスポート ステップ、できれば前に Bitrise.ioにデプロイします ステップ。 Appleのクレデンシャルを App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect） ステップ。 ステップには次のものが必要です。 Apple ID。 パスワード、またはApp Store Connectで2要素認証を使用する場合は、アプリケーションのパスワード。 心配しないでください。パスワードはログに表示されたり、公開されたりすることはありません。 ビルドを開始します。 " }, 
{ "title" : "Expoアプリの使用を開始する ", 
"url" : "入門/expoアプリの使用を開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Expoアプリの使用を開始する ", 
"snippet" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、Expoアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 ReactNativeプロジェクトを生成できます React NativeCLIまたはExpoCLIを使用 。 博覧会 は、XcodeまたはAndroid Studioでネイティブコードを使用せずに、ReactNativeアプリをすばやく起動して実行できるようにするツールチェーンです。 このガイドでは、で構築されたReact Nativeプロジェクトをセットアップ、テスト、コード署名、およびデプロイする方法について説明します。 Exp...", 
"body" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、Expoアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 ReactNativeプロジェクトを生成できます React NativeCLIまたはExpoCLIを使用 。 博覧会 は、XcodeまたはAndroid Studioでネイティブコードを使用せずに、ReactNativeアプリをすばやく起動して実行できるようにするツールチェーンです。 このガイドでは、で構築されたReact Nativeプロジェクトをセットアップ、テスト、コード署名、およびデプロイする方法について説明します。 Expo CLI 。 " }, 
{ "title" : "ExpoアプリをBitriseに追加する ", 
"url" : "入門/expoアプリの使用を開始する.html#expoアプリをbitriseに追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Expoアプリの使用を開始する \/ ExpoアプリをBitriseに追加する ", 
"snippet" : "まず、React NativeExpoアプリをに追加する方法を見てみましょう。 bitrise.io 。 Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップするあなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできま...", 
"body" : "まず、React NativeExpoアプリをに追加する方法を見てみましょう。 bitrise.io 。 Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップするあなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 アプリのプライバシーを次のいずれかに設定します 民間 また 公衆 をクリックします 次 。 プライベート アプリとパブリック アプリ パブリック アプリとプライベート アプリの最も重要な違いは、アプリがパブリックの場合、ビルド URL を知っている全員がビルド ログを表示できることです。 公開アプリ.プライベート アプリを使用すると、誰がアプリにアクセスできるかを完全に制御できます。 リポジトリをホストするGitホスティングサービスを選択してから、プロジェクトをホストする独自のリポジトリを見つけて選択します。 リポジトリアクセスを設定するように求められたら、をクリックします いいえ、SSHキーを自動追加します 。 プロジェクトの構成を含むブランチの名前を入力します- 主要 たとえば、-次にクリックします 次 。 Bitriseがプロジェクトを検証している間待ちます。 で Webhookのセットアップ 、Webhookを登録して、コードをリポジトリにプッシュするたびにBitriseが自動的にビルドを開始できるようにします。 これで、ReactNativeプロジェクトが正常にセットアップされました。 bitrise.io ！最初のビルドは、プライマリワークフローを使用して自動的に開始されます。最初のビルドで生成されたレポートは、 アーティファクト ビルドのページのタブ。 " }, 
{ "title" : "の依存関係のインストール 博覧会 アプリ ", 
"url" : "入門/expoアプリの使用を開始する.html#の依存関係のインストール-博覧会-アプリ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Expoアプリの使用を開始する \/ の依存関係のインストール 博覧会 アプリ ", 
"snippet" : "Bitriseプロジェクトスキャナーが正常にスキャンした場合 事業、 npmコマンドを実行します また ヤーンコマンドを実行する ステップはデフォルトのワークフローに含まれます。これらの手順により、不足しているJavascriptの依存関係をアプリにインストールできます。 ネイティブAndroidの依存関係については、 不足しているAndroidSDKコンポーネントをインストールする ステップ。 ネイティブiOSの依存関係については、特に、 Homebrewインストール ステップまたは CocoaPodsインストールを実行します ステップ。 npmを使用してJavascriptの依存関係をイン...", 
"body" : "Bitriseプロジェクトスキャナーが正常にスキャンした場合 事業、 npmコマンドを実行します また ヤーンコマンドを実行する ステップはデフォルトのワークフローに含まれます。これらの手順により、不足しているJavascriptの依存関係をアプリにインストールできます。 ネイティブAndroidの依存関係については、 不足しているAndroidSDKコンポーネントをインストールする ステップ。 ネイティブiOSの依存関係については、特に、 Homebrewインストール ステップまたは CocoaPodsインストールを実行します ステップ。 npmを使用してJavascriptの依存関係をインストールするには： npmの代わりにYarnを使用する このガイドでは、npmを使用してJavascriptの依存関係をインストールしています。ただし、 ヤーンコマンドを実行する 手順：追加の構成を必要とせずに、不足しているJS依存関係をインストールできます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 ワークフローに npmコマンドを実行します ステップ。 の中に 実行する引数を指定したnpmコマンド 入力フィールド、タイプ インストール 。 を使用して npm ci コマンドの代わりに npm install すでに最新版をお持ちの場合 package-lock.json プロジェクトでファイルを使用することをお勧めします。 シ コマンドイン 実行する引数を指定した「npm」コマンド 入力。使用する npm ci に比べてビルド時間が大幅に短縮されるだけでなく、 npm install しかし、より信頼性の高いビルドも同様です。 " }, 
{ "title" : "ReactNativeアプリのテスト ", 
"url" : "入門/expoアプリの使用を開始する.html#reactnativeアプリのテスト-78573", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Expoアプリの使用を開始する \/ ReactNativeアプリのテスト ", 
"snippet" : "ReactNativeの組み込みテストメソッドを使用できます。 冗談 ユニットテストを実行します。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します npmコマンドを実行します ワークフローに進みます。 の中に 実行する引数を指定したnpmコマンド 入力フィールド、タイプ テスト 。...", 
"body" : "ReactNativeの組み込みテストメソッドを使用できます。 冗談 ユニットテストを実行します。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します npmコマンドを実行します ワークフローに進みます。 の中に 実行する引数を指定したnpmコマンド 入力フィールド、タイプ テスト 。 " }, 
{ "title" : "Expoアプリのデプロイ ", 
"url" : "入門/expoアプリの使用を開始する.html#expoアプリのデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ Expoアプリの使用を開始する \/ Expoアプリのデプロイ ", 
"snippet" : "Bitriseはサポートします Expoアプリケーションサービス （EAS）Expoアプリの場合、デフォルトのデプロイBitriseワークフローは Expo Application Services（EAS）ビルドを実行する EASでビルドをトリガーするステップ。 EASを使用したくない場合は、 タートルCLI Bitriseワークフロー用。これを見る ワークフローレシピ 詳細については。...", 
"body" : "Bitriseはサポートします Expoアプリケーションサービス （EAS）Expoアプリの場合、デフォルトのデプロイBitriseワークフローは Expo Application Services（EAS）ビルドを実行する EASでビルドをトリガーするステップ。 EASを使用したくない場合は、 タートルCLI Bitriseワークフロー用。これを見る ワークフローレシピ 詳細については。 " }, 
{ "title" : "macOSアプリの使用を開始する ", 
"url" : "入門/macosアプリの使用を開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ macOSアプリの使用を開始する ", 
"snippet" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、macOSアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 このガイドでは、macOSアプリをBitriseに追加する方法、Xcodeテストを実行する方法、コード署名ファイルを管理する方法、およびアプリをbitrise.ioとAppStoreにデプロイする方法について説明します。...", 
"body" : "メールまたはGitプロバイダーを介してサインアップし、リポジトリに接続して、macOSアプリの最初のビルドを実行することにより、Bitriseの使用を開始します。 このガイドでは、macOSアプリをBitriseに追加する方法、Xcodeテストを実行する方法、コード署名ファイルを管理する方法、およびアプリをbitrise.ioとAppStoreにデプロイする方法について説明します。 " }, 
{ "title" : "MacOSアプリをBitriseに追加する ", 
"url" : "入門/macosアプリの使用を開始する.html#macosアプリをbitriseに追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ macOSアプリの使用を開始する \/ MacOSアプリをBitriseに追加する ", 
"snippet" : "Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップするあなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウン...", 
"body" : "Bitriseアカウントをお持ちですか？ サインアップしていることを確認してください bitrise.io Bitriseアカウントにアクセスできます。アカウントを登録する方法は複数あります。 メールでサインアップGitプロバイダーにサインアップするあなたのBitriseに行きます ダッシュボード 。 クリック + 上部のメニューバーにサインオンして、 WebUIに新しいアプリを追加する 、に移動します 新しいアプリを作成する ページ。 または、CLIを使用してアプリを追加することもできます。詳細については、チェックアウトしてください CLIからの新しいアプリの追加。 アプリを追加するアカウントを選択します。 アプリのプライバシーを次のいずれかに設定します 民間 また 公衆 をクリックします 次 。 プライベート アプリとパブリック アプリ パブリック アプリとプライベート アプリの最も重要な違いは、アプリがパブリックの場合、ビルド URL を知っている全員がビルド ログを表示できることです。 公開アプリ.プライベート アプリを使用すると、誰がアプリにアクセスできるかを完全に制御できます。 リポジトリをホストするGitホスティングサービスを選択してから、プロジェクトをホストする独自のリポジトリを見つけて選択します。 リポジトリアクセスを設定するように求められたら、をクリックします いいえ、SSHキーを自動追加します 。 プロジェクトの構成を含むブランチの名前を入力します- 主要 たとえば、-次にクリックします 次 。 Bitriseがプロジェクトを検証している間待ちます。構成ファイルを探し、それらに基づいてアプリをセットアップします。 Shared schemes only The validation will fail if you do not have a shared scheme in your project. You can still point Bitrise manually to your Xcode scheme but if it’s shared, we automatically detect it for you. エクスポート方法を選択します。これは後で変更できます-今のところ、 発達 。 クリックすると、次のように表示されます。 プロジェクトまたはワークスペースのパス。 スキーム名。 エクスポート方法。 macOSスタック。 プロンプトが表示されたらWebhookを登録して、コードがリポジトリにプッシュされたとき、またはプルリクエストが作成されたときにBitriseがビルドを自動的に開始できるようにします。これにより、最初のビルドも開始されます。メッセージをクリックすると、ビルドページに移動します。 " }, 
{ "title" : "macOSアプリをテストする ", 
"url" : "入門/macosアプリの使用を開始する.html#macosアプリをテストする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ macOSアプリの使用を開始する \/ macOSアプリをテストする ", 
"snippet" : "アプリを作成すると、最初のビルドは自動的に作成されたプライマリワークフローに基づいて実行されます。アプリのワークフローエディターで確認できます。ダッシュボードでアプリの名前をクリックしてから、[ ワークフロー タブ アプリにテストターゲットが定義されていない場合、プライマリワークフローには Mac用のXcodeテスト ステップ。 テストターゲットを定義している場合、 主要な macOSアプリのワークフローには、Xcodeテストを実行し、その結果を表示するために必要な2つのステップが含まれています。 bitrise.io ： Mac用のXcodeテスト Bitrise.ioにデプロイします コー...", 
"body" : "アプリを作成すると、最初のビルドは自動的に作成されたプライマリワークフローに基づいて実行されます。アプリのワークフローエディターで確認できます。ダッシュボードでアプリの名前をクリックしてから、[ ワークフロー タブ アプリにテストターゲットが定義されていない場合、プライマリワークフローには Mac用のXcodeテスト ステップ。 テストターゲットを定義している場合、 主要な macOSアプリのワークフローには、Xcodeテストを実行し、その結果を表示するために必要な2つのステップが含まれています。 bitrise.io ： Mac用のXcodeテスト Bitrise.ioにデプロイします コード署名ファイル Xcodeテストを実行し、その結果をBitriseにデプロイするために、コード署名ファイルは必要ありません。だから、まだそれらについて心配しないでください！ The Mac用のXcodeテスト ステップは、事前定義されたXcodeテストを実行します。変更する必要のないデフォルト構成があります。テストが正しく記述されていれば、機能します。 Xcodeにも同じ構成オプションがあります。 The Bitrise.ioにデプロイします 以下をにデプロイします ログ と アーティファクト ビルドのタブ： Xcodeテストの結果。 あなたの生 xcodebuildoutput ログ。 The Bitrise.ioにデプロイします ステップはまた、結果をエクスポートします Mac用のXcodeテスト にステップ テストレポート アドオン。 " }, 
{ "title" : "コード署名とmacOSアプリのエクスポート ", 
"url" : "入門/macosアプリの使用を開始する.html#コード署名とmacosアプリのエクスポート", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ macOSアプリの使用を開始する \/ コード署名とmacOSアプリのエクスポート ", 
"snippet" : "他の物理デバイスにアプリをインストールしてテストするには、.appまたは.pkgファイルを作成してエクスポートする必要があります。これには、コード署名を設定する必要があります。この例では、アプリをエクスポートします。 発達 エクスポート方法：このようなアプリをTestflightにアップロードすることはできませんが、たとえば、内部テスターのデバイスでテストすることはできます。 自動プロビジョニング ここで説明する手順の例では、手動プロビジョニングを使用しています。 証明書とプロファイルのインストーラー ステップ。ただし、Bitriseは 自動プロビジョニング ただし、このガイドの範囲には含まれ...", 
"body" : "他の物理デバイスにアプリをインストールしてテストするには、.appまたは.pkgファイルを作成してエクスポートする必要があります。これには、コード署名を設定する必要があります。この例では、アプリをエクスポートします。 発達 エクスポート方法：このようなアプリをTestflightにアップロードすることはできませんが、たとえば、内部テスターのデバイスでテストすることはできます。 自動プロビジョニング ここで説明する手順の例では、手動プロビジョニングを使用しています。 証明書とプロファイルのインストーラー ステップ。ただし、Bitriseは 自動プロビジョニング ただし、このガイドの範囲には含まれていません。 必要になるだろう： 自動的に作成された deploy ワークフロー。 a 発達 証明書（.p12証明書ファイル）。 a 発達 タイプProvisioningProfile。 macOSプロジェクトの場合、プロビジョニングプロファイルのファイル拡張子は次のとおりです。 .provisionprofile 。 Xcodeでプロジェクトのコード署名タイプを手動または自動（Xcode管理）に設定し、パッケージファイルをローカルで生成します。 コード署名ファイルを収集してアップロードする codesigndocツール 。 このツールは、コード署名ファイルをBitriseにアップロードすることもできます。アップロードすることをお勧めします。それ以外の場合は、手動でアップロードします。ワークフローエディターに入り、 コード署名 タブをクリックし、それぞれのフィールドにファイルをアップロードします。 アプリのワークフローエディターに移動し、 配備 のワークフロー ワークフロー 左上隅のドロップダウンメニュー。 あなたが持っていることを確認してください 証明書とプロファイルのインストーラー ワークフローにステップインします。それは前でなければなりません Mac用のXcodeアーカイブ ステップ（2つの間に他のステップを含めることができます。 Mac用のXcodeテスト ）。 チェックしてください エクスポート方法 下の入力 app\/pkgエクスポート構成 の入力グループ Mac用のXcodeアーカイブ ステップ。 選択した場合 発達 アプリをBitriseに追加した場合、入力を変更する必要はありません。それ以外の場合は、手動でに設定します 発達 。 ビルドを開始します。 正しいコード署名ファイルをアップロードした場合、 証明書とプロファイルのインストーラー ステップはあなたのコード署名ファイルとをインストールする必要があります Mac用のXcodeアーカイブ ステップでは、開発エクスポートメソッドを使用して.appまたは.pkgファイルをエクスポートする必要があります。あなたが持っている場合 Bitrise.ioにデプロイします ワークフローにステップインすると、バイナリパッケージファイルは次の場所にあります。 アーティファクト ビルドページのタブ。 " }, 
{ "title" : "AppStoreConnectへのアプリのデプロイ ", 
"url" : "入門/macosアプリの使用を開始する.html#appstoreconnectへのアプリのデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 入門 \/ macOSアプリの使用を開始する \/ AppStoreConnectへのアプリのデプロイ ", 
"snippet" : "コード署名ファイルを設定し、内部テスター用に.appまたは.pkgファイルを作成した場合は、外部テスターを関与させてから、MacOSアプリをAppStoreに公開します。方法を見てみましょう！ 開発者ID アプリをAppStoreの外部に配布する場合は、 開発者ID 。この方法はこのガイドの範囲外ですが、Bitriseでも同じように機能します。つまり、適切なコード署名ファイルをアップロードするだけです。 App Storeにデプロイするには、次のコード署名ファイルが必要です。 a Macアプリ 分布 証明書。 a マック インストーラーの配布 証明書。 ローカルマシンで、Xcodeでプロジェク...", 
"body" : "コード署名ファイルを設定し、内部テスター用に.appまたは.pkgファイルを作成した場合は、外部テスターを関与させてから、MacOSアプリをAppStoreに公開します。方法を見てみましょう！ 開発者ID アプリをAppStoreの外部に配布する場合は、 開発者ID 。この方法はこのガイドの範囲外ですが、Bitriseでも同じように機能します。つまり、適切なコード署名ファイルをアップロードするだけです。 App Storeにデプロイするには、次のコード署名ファイルが必要です。 a Macアプリ 分布 証明書。 a マック インストーラーの配布 証明書。 ローカルマシンで、XcodeでプロジェクトのApp Storeコード署名を設定し、.appまたは.pkgファイルをエクスポートします。これがローカルで失敗した場合、Bitriseでも間違いなく失敗します！ コード署名ファイルを収集してアップロードする codesigndocツール 。 アプリのワークフローエディターに移動し、新しいワークフローを作成します。 + [ワークフロー]ドロップダウンメニューの横にあるボタンで、新しいワークフローの名前を入力し、 に基づく ドロップダウンメニューで、 配備 。このようにして、新しいワークフローは基本のコピーになります 配備 ワークフロー。 をクリックします app\/pkgエクスポートメソッド 、およびを設定します エクスポート方法 の入力 Mac用のXcodeアーカイブ にステップ app-store 。 異なるエクスポート方法で複数のバイナリをエクスポートできます。 macOSXcodeアーカイブをエクスポートする そうするために、ワークフローにステップインします。 追加します App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect） 後、ワークフローに進みます Mac用のXcodeアーカイブ ステップ、できれば前に Bitrise.ioにデプロイします ステップ。 Appleのクレデンシャルを App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect） ステップ。 ステップには次のものが必要です。 Apple ID。 パスワード、またはiTunes Connectで2要素認証を使用する場合は、アプリケーションのパスワード。 心配しないでください。パスワードはログに表示されたり、公開されたりすることはありません- それがSENSITIVEとマークされている理由です 。 以上です！ビルドを開始します-すべてがうまくいけば、Testflightにアプリが表示されます。そこから、外部のテスターに配布したり、AppStoreにリリースしたりできます。 " }, 
{ "title" : "インフラストラクチャー ", 
"url" : "インフラストラクチャー.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー ", 
"snippet" : "Bitriseは何よりもプラットフォームです。使用するために何もダウンロードする必要はなく、自分のコンピューターやサーバーで実行する必要もありません。すべてを処理します。 つまり、インフラストラクチャについても心配する必要はありません。メンテナンス、ツール、仮想化はすべて私たちの仕事であり、私たちの関心事です。 Bitriseでは、仮想マシン（VM）を使用してビルドを実行します。すべてのビルドは新しいVMで実行され、各VMはビルドが終了した直後に破棄されます。 スタックは、ビルドの実行に使用できる仮想マシンのタイプです。たとえば、ネイティブiOSアプリの場合、最適なスタックはXcodeスタック...", 
"body" : "Bitriseは何よりもプラットフォームです。使用するために何もダウンロードする必要はなく、自分のコンピューターやサーバーで実行する必要もありません。すべてを処理します。 つまり、インフラストラクチャについても心配する必要はありません。メンテナンス、ツール、仮想化はすべて私たちの仕事であり、私たちの関心事です。 Bitriseでは、仮想マシン（VM）を使用してビルドを実行します。すべてのビルドは新しいVMで実行され、各VMはビルドが終了した直後に破棄されます。 スタックは、ビルドの実行に使用できる仮想マシンのタイプです。たとえば、ネイティブiOSアプリの場合、最適なスタックはXcodeスタックの1つです。スタックには、必要なすべてのツールがプリインストールされており、すべてのニーズに対応できるように定期的に更新されます。 " }, 
{ "title" : "マシンを構築する ", 
"url" : "インフラストラクチャー/マシンを構築する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ マシンを構築する ", 
"snippet" : "Bitriseは、Intelベース（x86）およびAppleシリコンM1スタックを提供します。各スタックには、多数のツールがプリインストールされています。 の上 bitrise.io では、次の 2 種類のビルド マシンを提供しています。 Apple シリコンベース macOS ビルド マシン (M1 マシン)。 Intel スタックよりもパフォーマンスが大幅に向上するため、すべての Xcode スタックにこれらのマシンを使用することをお勧めします。 Intel ベース (x86) の macOS および Linux ビルド マシン。 マシン タイプごとに、さまざまなコンピューティング能力を備...", 
"body" : "Bitriseは、Intelベース（x86）およびAppleシリコンM1スタックを提供します。各スタックには、多数のツールがプリインストールされています。 の上 bitrise.io では、次の 2 種類のビルド マシンを提供しています。 Apple シリコンベース macOS ビルド マシン (M1 マシン)。 Intel スタックよりもパフォーマンスが大幅に向上するため、すべての Xcode スタックにこれらのマシンを使用することをお勧めします。 Intel ベース (x86) の macOS および Linux ビルド マシン。 マシン タイプごとに、さまざまなコンピューティング能力を備えた複数のオプションが用意されています。 サブスクリプション プラン .アプリごとにデフォルトのマシンタイプを構成でき、設定することもできます ワークフロー -特定のマシン タイプ。 各 Bitrise ビルド マシンには独自の IP アドレス範囲があります。たとえば、プライベート クラウドからビルド マシンにアクセスできるように、これらの IP アドレスを許可リストに登録できます。 Bitrise のネットワーク アクセスの構成ビルドとコードのセキュリティの詳細については、を参照してください。 コードセキュリティ。 " }, 
{ "title" : "Bitrise のネットワーク アクセスの構成 ", 
"url" : "インフラストラクチャー/マシンを構築する/bitrise-のネットワーク-アクセスの構成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ マシンを構築する \/ Bitrise のネットワーク アクセスの構成 ", 
"snippet" : "プライベートネットワークまたはファイアウォールの背後からBitrise仮想マシンにアクセスできます。これを行うには、ネットワーク内のビルドマシンのIPアドレスを許可リストします。 当社のデータセンターは一連のパブリック静的 IP アドレスの背後にあり、仮想マシンはこれらのアドレスの背後に独自の内部サブネットを持っています。会社のセキュリティ ポリシーによっては、ビルド マシンにアクセスできるように、パブリック IP アドレスを許可リストに登録する必要がある場合があります。 Bitrise ビルド マシンの IP アドレス同様に、Bitrise Web サイトとそのバックグラウンド ワーカーは、...", 
"body" : "プライベートネットワークまたはファイアウォールの背後からBitrise仮想マシンにアクセスできます。これを行うには、ネットワーク内のビルドマシンのIPアドレスを許可リストします。 当社のデータセンターは一連のパブリック静的 IP アドレスの背後にあり、仮想マシンはこれらのアドレスの背後に独自の内部サブネットを持っています。会社のセキュリティ ポリシーによっては、ビルド マシンにアクセスできるように、パブリック IP アドレスを許可リストに登録する必要がある場合があります。 Bitrise ビルド マシンの IP アドレス同様に、Bitrise Web サイトとそのバックグラウンド ワーカーは、一連の静的 IP アドレスでアクセスできます。これらのアドレスを許可リストに登録することで、ビルド ステータスの更新を受信したり、Bitrise がアクセスできるようにすることができます。 bitrise.yml ファイル： Bitrise Web サイトの IP アドレスVPN経由で接続する VPN経由でBitriseに接続できますが、ローカルネットワークがビルドVMと同じアドレス空間を使用している場合、競合が発生する可能性があります。このような場合、VPNは衝突を検出してエラーを返すことがあります。この場合、唯一の解決策は、仮想マシンとは異なるサブネットを使用するようにローカルアドレス空間を再構成することです。 ビルド中にVPNに接続する. " }, 
{ "title" : "Bitrise ビルド マシンの IP アドレス ", 
"url" : "インフラストラクチャー/マシンを構築する/bitrise-のネットワーク-アクセスの構成.html#bitrise-ビルド-マシンの-ip-アドレス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ マシンを構築する \/ Bitrise のネットワーク アクセスの構成 \/ Bitrise ビルド マシンの IP アドレス ", 
"snippet" : "クラウドベースのサービス プロバイダーでリポジトリをホストしているほとんどのユーザーにとって、Bitrise を使用できるようにするためのネットワーク構成は必要ありません。必要なのは、リポジトリへのアクセス許可だけです。そのためには、 SSH キー で十分です。 ただし、会社のセキュリティポリシーでは、不明な無許可のIPアドレスが、コードが保存されているサーバー（独自のデータセンターまたはプライベートクラウド）と通信することを許可していない場合があります。その場合、関連するIPアドレスが許可リストに追加されない限り、Bitriseは機能しません。 プライベートビルドプラットフォーム に記載され...", 
"body" : "クラウドベースのサービス プロバイダーでリポジトリをホストしているほとんどのユーザーにとって、Bitrise を使用できるようにするためのネットワーク構成は必要ありません。必要なのは、リポジトリへのアクセス許可だけです。そのためには、 SSH キー で十分です。 ただし、会社のセキュリティポリシーでは、不明な無許可のIPアドレスが、コードが保存されているサーバー（独自のデータセンターまたはプライベートクラウド）と通信することを許可していない場合があります。その場合、関連するIPアドレスが許可リストに追加されない限り、Bitriseは機能しません。 プライベートビルドプラットフォーム に記載されている IP アドレス 表1「 当社のパブリック クラウド プラットフォームを使用するユーザーにのみ関連します。私たちのユーザー プライベート ビルド プラットフォーム ネットワーク構成に関する支援が必要な場合は、カスタマー サクセス マネージャーに連絡する必要があります。 ファイアウォールの背後またはプライベートクラウドからビルドマシンにアクセスできることを確認するには、次の手順に従います。 会社が使用しているスタックの種類を確認してください。 これらのスタックに属する IP アドレスを調べます 表1「. さまざまなマシンタイプのIPアドレス スタックタイプが異なれば、パブリックIPも異なることに注意してください。たとえば、Xcodeスタックのみを使用する場合、Linux \/ Docker環境に属するIPを許可リストする必要はありません。 必要なすべてのIPアドレスを許可リストします。 サブネット全体を許可リスト 提供されたパブリックIPアドレスがサブネットの場合、ネットワーク上でサブネット全体を許可する必要があります。たとえば、208.52.166.128 \/ 28は、208.52.166.128から208.52.166.143までのすべてのIPアドレス（208.52.166.128、208.52.166.129、208.52.166.130など、208.52.166.143まで）が必要であることを意味します。 allowlisted。 ビルド マシンの外部および内部 IP アドレス スタックタイプ パブリック IP VM 内部サブネットの構築 Xcode スタック 208.52.166.154\/32 および 208.52.166.128\/28 10.200.0.0\/20 207.254.0.248\/29 および 207.254.0.208\/28 10.246.0.0\/20 207.254.34.148\/32 および 207.254.33.176\/28 10.254.224.0\/20 Linux\/Docker スタック 104.197.15.74\/32 10.0.0.0\/9 34.123.172.192\/32 10.0.0.0\/9 34.125.50.224\/32 10.0.0.0\/9 34.125.82.130\/32 10.0.0.0\/9 34.134.193.138\/32 10.0.0.0\/9 34.138.187.10\/32 10.0.0.0\/9 34.150.152.190\/32 10.0.0.0\/9 34.162.185.129\/32 10.0.0.0\/9 34.162.202.37\/32 10.0.0.0\/9 34.162.229.32\/32 10.0.0.0\/9 34.162.29.153\/32 10.0.0.0\/9 34.162.88.79\/32 10.0.0.0\/9 34.23.207.105\/32 10.0.0.0\/9 34.85.139.176\/32 10.0.0.0\/9 34.85.240.93\/32 10.0.0.0\/9 34.86.56.118\/32 10.0.0.0\/9 35.202.121.43\/32 10.0.0.0\/9 35.225.44.167\/32 10.0.0.0\/9 35.231.56.118\/32 10.0.0.0\/9 35.237.165.17\/32 10.0.0.0\/9 35.243.148.182\/32 10.0.0.0\/9 35.245.56.67\/32 10.0.0.0\/9 " }, 
{ "title" : "Bitrise Web サイトの IP アドレス ", 
"url" : "インフラストラクチャー/マシンを構築する/bitrise-のネットワーク-アクセスの構成.html#bitrise-web-サイトの-ip-アドレス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ マシンを構築する \/ Bitrise のネットワーク アクセスの構成 \/ Bitrise Web サイトの IP アドレス ", 
"snippet" : "Bitrise Web サイトは一連の静的 IP アドレスを介してアクセスできます。Web サイト自体とそのすべてのバックグラウンド ワーカーはこれらのアドレスで実行されています。 これらのアドレスは、セルフホステッド Git サービスを使用したり、 bitrise.yml リポジトリ内のファイル。この場合、ネットワークがワーカーに確実に接続できるように、関連する IP アドレスを許可リストに登録することをお勧めします。このようにして、Bitrise は、たとえば、 bitrise.yml ファイル、または ビルド ステータスの更新を送信する セルフホステッド リポジトリでのコミットとプル リ...", 
"body" : "Bitrise Web サイトは一連の静的 IP アドレスを介してアクセスできます。Web サイト自体とそのすべてのバックグラウンド ワーカーはこれらのアドレスで実行されています。 これらのアドレスは、セルフホステッド Git サービスを使用したり、 bitrise.yml リポジトリ内のファイル。この場合、ネットワークがワーカーに確実に接続できるように、関連する IP アドレスを許可リストに登録することをお勧めします。このようにして、Bitrise は、たとえば、 bitrise.yml ファイル、または ビルド ステータスの更新を送信する セルフホステッド リポジトリでのコミットとプル リクエストについて。 Bitrise Web サイトとそのバックグラウンド ワーカーの静的 IP アドレス IPアドレス 35.232.76.43 34.68.119.18 34.135.186.58 " }, 
{ "title" : "ビルドマシンのストレージスペースを解放する ", 
"url" : "インフラストラクチャー/マシンを構築する/ビルドマシンのストレージスペースを解放する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ マシンを構築する \/ ビルドマシンのストレージスペースを解放する ", 
"snippet" : "Bitriseビルドマシンの追加のディスクスペースを解放するには、ビルドでスクリプトステップを使用して、不要なツールとリソースを削除します。 追加のディスク容量が必要な場合は、使用していないツールやリソースをいつでも削除できます。あなたはただ使用する必要があります 脚本 ビルドの開始時にステップします。 java.io.IOException: デバイスにスペースが残っていません あなたが得るならば java.io.IOException: No space left on device 、 ビルド中のエラー 、以下の方法で追加のスペースを解放することを試みることができます - エラーは、ビル...", 
"body" : "Bitriseビルドマシンの追加のディスクスペースを解放するには、ビルドでスクリプトステップを使用して、不要なツールとリソースを削除します。 追加のディスク容量が必要な場合は、使用していないツールやリソースをいつでも削除できます。あなたはただ使用する必要があります 脚本 ビルドの開始時にステップします。 java.io.IOException: デバイスにスペースが残っていません あなたが得るならば java.io.IOException: No space left on device 、 ビルド中のエラー 、以下の方法で追加のスペースを解放することを試みることができます - エラーは、ビルド マシンに使用可能なスペースがないことを示しています。 スタックを確認してください GitHubのシステムレポート 。 システムレポートには、 プレインストールされたツール スタック上のそれらのバージョン。 ビルドに必要のないツールを見つけます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加する 脚本 ワークフローの最初に進みます。 の中に スクリプトの内容 ステップの入力で、ツールをアンインストールするために必要なコマンドを追加します。 不要なツールのアンインストール アプリにAndroidSDKツールが必要ない場合は、次のコマンドを使用してツールを削除できます。 脚本 ステップ： sudo rm -rf \/usr\/local\/share\/android-sdk \nsudo rm -rf \/opt\/android-ndk 使用しないiOSシミュレーターは削除できます。 sudo rm -rf ~\/Library\/Developer\/CoreSimulator\/Profiles\/Runtimes\/iOS\\\\ 10.3.simruntime\/ " }, 
{ "title" : "マシンタイプを構築する ", 
"url" : "インフラストラクチャー/マシンを構築する/マシンタイプを構築する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ マシンを構築する \/ マシンタイプを構築する ", 
"snippet" : "Bitriseは、仕様とクレジットコストが異なる複数のビルドマシンを提供しています。ニーズに応じて選択できます。 Bitriseは、仕様とクレジットコストが異なる複数のビルドマシンを提供しています。ニーズに応じて選択できます。 サブスクリプション プランごとのマシンの可用性 すべてのマシンがすべてのサブスクリプション プランで利用できるわけではありません。訪問 価格ページ あなたのプランで利用可能なマシンを見つけるために！ Bitriseビルドマシンタイプ オペレーティング·システム マシンタイプ名 CPU 羊 1分あたりのクレジットコスト のマシンタイプ ID YAML 構成 マックOS M...", 
"body" : "Bitriseは、仕様とクレジットコストが異なる複数のビルドマシンを提供しています。ニーズに応じて選択できます。 Bitriseは、仕様とクレジットコストが異なる複数のビルドマシンを提供しています。ニーズに応じて選択できます。 サブスクリプション プランごとのマシンの可用性 すべてのマシンがすべてのサブスクリプション プランで利用できるわけではありません。訪問 価格ページ あなたのプランで利用可能なマシンを見つけるために！ Bitriseビルドマシンタイプ オペレーティング·システム マシンタイプ名 CPU 羊 1分あたりのクレジットコスト のマシンタイプ ID YAML 構成 マックOS M1 Elite XL 8 CPU @ 3.2 GHz 12 GB 4\/分 g2-m1.8core M1マックスミディアム 5 CPU @3.2 GHz 27GB 6\/分 g2-m1-max.5core M1 最大大 10 CPU @3.2 GHz 54GB 8\/分 g2-m1-max.10core Standard 4 vCPU @ 3.2 GHz 19 GB 2\/分 g2.4core Elite 8 vCPU @ 3.2 GHz 35 GB 4\/分 g2.8core Elite XL 12 vCPU @ 3.2 GHz 54 GB 6\/分 g2.12core Linux Standard 4 vCPU @ 3.1 GHz 16 GB 1分 standard Elite 8 vCPU @ 3.1 GHz 32 GB 2\/分 elite Elite XL 16 vCPU @ 3.1 GHz 64 GB 4\/分 elite-xl スタックを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ ビルドのスタックを設定する アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "スタックを構築する ", 
"url" : "インフラストラクチャー/スタックを構築する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する ", 
"snippet" : "Bitrise ビルド スタックは、ビルドの実行に使用される仮想マシンのバージョンを定義します。主なタイプは、macOS スタックと Android & Docker スタックです。 ビルドスタックは、ビルドの実行に使用する仮想マシンのバージョンを示します。 3つの主要なスタックタイプがあります。 macOS スタック : これらのスタックは macOS オペレーティング システムで実行され、それぞれに複数の Xcode バージョンが含まれています。 iOSの構築に最適 アプリ .それらを使用してクロスプラットフォーム アプリを構築する場合は、Android ツールもインストールされています。...", 
"body" : "Bitrise ビルド スタックは、ビルドの実行に使用される仮想マシンのバージョンを定義します。主なタイプは、macOS スタックと Android & Docker スタックです。 ビルドスタックは、ビルドの実行に使用する仮想マシンのバージョンを示します。 3つの主要なスタックタイプがあります。 macOS スタック : これらのスタックは macOS オペレーティング システムで実行され、それぞれに複数の Xcode バージョンが含まれています。 iOSの構築に最適 アプリ .それらを使用してクロスプラットフォーム アプリを構築する場合は、Android ツールもインストールされています。 NS AndroidとDocker スタック：これらのスタックは、Docker環境のLinuxオペレーティングシステムで実行されます。すべてのAndroidツールがインストールされており、ネイティブAndroidアプリの構築に最適です。 各ビルドは独自の仮想マシンで実行され、ビルドが完了すると、仮想マシンは保存された状態 (「ベース ボックス」状態) にロールバックされます。こちらです あなたのビルドは常に保護されています 他の人や以前のビルドによって加えられた変更によって、 安定した環境 ビルド間で状態が保持されないため、ビルド ワークフローを定義します。 パスワードなしの sudo が有効 ビルドに使用されるユーザー アカウントは、次のように構成されています。 パスワードなしのsudo 有効にします。このようにして、ビルドやその他の自動化に必要な追加のものをすべてインストールできます。選択したスタックにツールがプリインストールされていない場合は、自分でインストールできます - ガイドを参照してください。 アプリをBitriseに追加した後、適切なスタックを選択します。スタックはいつでも変更できます スタック ワークフローエディタのタブ。 使用するスタックを選択すると、スタックの簡単な説明と、その特定のスタックの詳細を確認するための追加のリンクが表示されます（たとえば、選択したスタックにプリインストールされているツールやバージョンを確認できます）。 。 スタックステータスタイプ タイプ 説明 安定 一般的に利用可能であり、近い将来にサポートされる予定です。 Stackのプライマリツールのアップデートが利用可能になったときに更新されます。例：Xcode 7.3.1がリリースされたとき、Xcode 7.3スタックは7.3（.0）ではなく7.3.1になるように更新されました。 スタック準備タイプ タイプ 説明 プリブート スタックがプリブートとして利用可能であり、そのスタック構成で十分なプリブートマシンがある場合、ビルド環境がブートするのを待たずに、ビルドをすぐに開始できます。そのスタック構成で使用可能なプリブートマシンがこれ以上ない場合、ビルドはオンデマンド構成で開始されます。 オンデマンド スタックがオンデマンド構成として利用可能であり、スタックの（利用可能な）事前起動された構成がない場合、ビルドの開始時に、システムは選択した構成の仮想マシンを作成する必要があります。これは、関連する仮想マシンが作成および起動されている間、ビルドが準備環境状態になることを意味します。 macOS構成の場合、起動プロセスには通常約1〜1.5分かかります。準備時間は（もちろん）ビルド時間にはカウントされません。ビルドの実行時間には影響しません。 マシンタイプを構築する ビルドのスタックを設定する " }, 
{ "title" : "スタック更新ポリシー ", 
"url" : "インフラストラクチャー/スタックを構築する/スタック更新ポリシー.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ スタック更新ポリシー ", 
"snippet" : "Bitriseスタックは毎週更新されます。一部のスタックは完全に再構築されますが、他のスタックでは特定のキャッシュアーカイブのみが更新されます。 スタック bitrise.io 毎週、定期的に更新されます。一部のスタックでは、特定のキャッシュのみが更新され、macOSとLinuxの両方で、定期的に完全に再構築されるスタックがあります。 さまざまなスタックで使用できるツールの詳細については、関連するガイドをご覧ください。 Bitriseスタックにプレインストールされたツール。...", 
"body" : "Bitriseスタックは毎週更新されます。一部のスタックは完全に再構築されますが、他のスタックでは特定のキャッシュアーカイブのみが更新されます。 スタック bitrise.io 毎週、定期的に更新されます。一部のスタックでは、特定のキャッシュのみが更新され、macOSとLinuxの両方で、定期的に完全に再構築されるスタックがあります。 さまざまなスタックで使用できるツールの詳細については、関連するガイドをご覧ください。 Bitriseスタックにプレインストールされたツール。 " }, 
{ "title" : "macOS スタックの更新 ", 
"url" : "インフラストラクチャー/スタックを構築する/スタック更新ポリシー.html#macos-スタックの更新", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ スタック更新ポリシー \/ macOS スタックの更新 ", 
"snippet" : "macOSを分割します スタック OS、CPU アーキテクチャ、および Xcode のバージョンに基づくカテゴリに分類されます。 これらのスタックには複数の Xcode バージョンが含まれており、必要に応じて常に適切な Xcode バージョンを使用できるようにし、別の Xcode バージョンを使用する必要がある場合にスタック間の移行にかかる時間を短縮します。 たとえば、Xcode 14.2、Xcode 14.1、および Xcode 14.0 を含む M1 上の macOS 13 Ventura のスタックがあります。 macOS 安定版 スタックは、Xcode パッチ バージョン、Bitris...", 
"body" : "macOSを分割します スタック OS、CPU アーキテクチャ、および Xcode のバージョンに基づくカテゴリに分類されます。 これらのスタックには複数の Xcode バージョンが含まれており、必要に応じて常に適切な Xcode バージョンを使用できるようにし、別の Xcode バージョンを使用する必要がある場合にスタック間の移行にかかる時間を短縮します。 たとえば、Xcode 14.2、Xcode 14.1、および Xcode 14.0 を含む M1 上の macOS 13 Ventura のスタックがあります。 macOS 安定版 スタックは、Xcode パッチ バージョン、Bitrise CLI 関連の更新、依存関係マネージャー キャッシュの更新、および重要な修正でのみ更新されます。これらのスタックは、ビルドがスタックで機能した場合、スタックが利用可能である限り、同じビルドが同じ方法で実行されるように設計されています。 NS Xcodeエッジ スタックは 毎週再建 。これには、Xcodeの最新の安定版リリース、Stableスタックと同じプリインストールツール、および依存関係マネージャーのキャッシュ更新が含まれています。スタックは同じものを使用します スクリプト 新しいXcodeスタックの作成に使用します。 Xcodeベータ版 BitriseはXcodeベータバージョンをサポートしています。スタックが使用している特定のXcodeバージョンを確認できます。 Bitriseシステムレポートリポジトリ または、ワークフローエディタで選択したスタックの下にあるリンクをクリックします。 Xcodeバージョンの固定 新しいXcodeバージョンがリリースされるたびに、私たちの目的は、できるだけ早くそれをユーザーに提供することです。ただし、ビルドが破損する可能性があるため、既存の安定したスタックを新しいXcodeバージョンで更新しません。代わりに、新しいバージョンで新しいスタックを提供し、古いバージョンを維持し続けます。 依存関係マネージャーのキャッシュ更新について すべてのmacOSスタックは、依存関係マネージャーのキャッシュ更新（brew、cocoapods、bitrise CLI）を毎週受け取ります。これらのキャッシュの更新は、プレインストールされたツールのバージョンを変更せず、依存関係のインストールを高速化するためにパッケージマネージャーのキャッシュを更新するだけです。 " }, 
{ "title" : "macOS スタックで利用可能なシミュレーター ランタイム ", 
"url" : "インフラストラクチャー/スタックを構築する/スタック更新ポリシー.html#macos-スタックで利用可能なシミュレーター-ランタイム", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ スタック更新ポリシー \/ macOS スタックの更新 \/ macOS スタックで利用可能なシミュレーター ランタイム ", 
"snippet" : "macOS スタックで利用可能なシミュレーター ランタイムに関するポリシーは、以下に基づいています。 Apple の最小要件とサポートされている SDK . Bitrise スタックにプリインストールされたツール スタック上のシミュレーター ランタイムなど、プリインストールされているツールのリストに関心がある場合は、利用可能なすべてのスタックを見つけることができます。 GitHub のシステム レポート . 各 Xcode バージョンには、サポートされているシミュレーターのリストがあります。 Xcode の各バージョンでサポートされている最新のシミュレーター ランタイムをスタックに取り、互換性...", 
"body" : "macOS スタックで利用可能なシミュレーター ランタイムに関するポリシーは、以下に基づいています。 Apple の最小要件とサポートされている SDK . Bitrise スタックにプリインストールされたツール スタック上のシミュレーター ランタイムなど、プリインストールされているツールのリストに関心がある場合は、利用可能なすべてのスタックを見つけることができます。 GitHub のシステム レポート . 各 Xcode バージョンには、サポートされているシミュレーターのリストがあります。 Xcode の各バージョンでサポートされている最新のシミュレーター ランタイムをスタックに取り、互換性がある場合は、すべてのスタックでシミュレーター ランタイムを利用できるようにします。また、最も古いメジャー バージョンより前の最新バージョンの iOS シミュレーター ランタイムもサポートします。 Bitrise スタックで利用可能な iOS シミュレーター 例を見てみましょう： Xcode 12.5 には、iOS 10.3.1-14.5 シミュレーター ランタイムで動作するための最小要件があります。 14.5 シミュレーター ランタイムは最新バージョンであるため、すべてのスタックで利用できるようになっています。この場合、14.5 シミュレーターは、現在アクティブなすべての Xcode スタックと互換性があるため、それらすべてのスタックで使用できます。 Xcode 13.0 には、iOS 10.3.1-15.0 シミュレーター ランタイムで動作するための最小要件があります。 15.0 シミュレーター ランタイムは最新バージョンであるため、iOS 14.5 と同様に、互換性のあるすべてのスタック (Xcode 12.5 を除くすべて) で利用できるようにしています。 Xcode 14.2 である最後の Xcode バージョンまで、すべての Xcode バージョンを調べ、サポートされている最新のシミュレーター ランタイムを引き続き使用します。完了したら、最も古いメジャー バージョンの前に、iOS シミュレーター ランタイムの最新バージョンも取得します。この場合、最も古いメジャー バージョンは iOS 14.5 であり、それより前の最新の iOS シミュレーターは iOS 13.7 であるため、そのバージョンもすべてのスタックで使用できます。 この表は、macOS スタックのどの Xcode バージョンでどの iOS シミュレーター ランタイムを使用できるかを示しています。 iOS で利用可能なシミュレーター ランタイム (X = 利用可能) シミュレーター Xコード14.2 クロスコード 14.1 Xcode 14.0.1 Xcode 13.4.1 Xcode 13.3.1 Xcode 13.2.1 Xコード13.1 クロスコード 13.0 Xコード12.5 iOS 16.2 X iOS 16.1 X iOS16.0 X X X iOS 15.5 X X X X iOS 15.4 X X X X X iOS 15.2 X X X X X X iOS15.0 X X X X X X X X iOS14.5 X X X X X X X X X iOS14.4 iOS 14.3 iOS 14.2 iOS 14.1 iOS14.0 iOS 13.7 X X X X X X X X X iOS 13.6 iOS13.5 iOS13.4 iOS13.2 iOS 13.1 iOS13.0 " }, 
{ "title" : "AndroidとDockerのスタック ", 
"url" : "インフラストラクチャー/スタックを構築する/スタック更新ポリシー.html#androidとdockerのスタック", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ スタック更新ポリシー \/ AndroidとDockerのスタック ", 
"snippet" : "Android \/ Linuxスタックは docker 、複数の個別のDockerイメージを使用して、互いの上に構築されます。これらのDockerイメージはで見つけることができます GitHub 。 BitriseDockerイメージタイプ 画像タイプ 説明 GitHubリンク quay.ioリンク Bitriseベースイメージ 特定のツールがインストールされていない最低限のBitriseイメージ。 https:\/\/github.com\/bitrise-docker\/bitrise-base https:\/\/quay.io\/repository\/bitriseio\/bitrise-base A...", 
"body" : "Android \/ Linuxスタックは docker 、複数の個別のDockerイメージを使用して、互いの上に構築されます。これらのDockerイメージはで見つけることができます GitHub 。 BitriseDockerイメージタイプ 画像タイプ 説明 GitHubリンク quay.ioリンク Bitriseベースイメージ 特定のツールがインストールされていない最低限のBitriseイメージ。 https:\/\/github.com\/bitrise-docker\/bitrise-base https:\/\/quay.io\/repository\/bitriseio\/bitrise-base Androidベースイメージ ベア-Android固有のツールと環境を備えた最小限のベースイメージ。 https:\/\/github.com\/bitrise-docker\/android https:\/\/quay.io\/repository\/bitriseio\/android AndroidNDKイメージ AndroidNDKと環境がプリインストールされたAndroidベースイメージに基づいて構築されています。 https:\/\/github.com\/bitrise-docker\/android-ndk https:\/\/quay.io\/repository\/bitriseio\/android-ndk AndroidNDKLTSイメージ AndroidNDKDockerイメージのLTS「ピン」。 https:\/\/github.com\/bitrise-docker\/android-ndk-lts https:\/\/quay.io\/repository\/bitriseio\/android-ndk-lts " }, 
{ "title" : "スタックの非推奨と削除のポリシー ", 
"url" : "インフラストラクチャー/スタックを構築する/スタックの非推奨と削除のポリシー.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ スタックの非推奨と削除のポリシー ", 
"snippet" : "Bitriseでは、Androidスタックは約2年間サポートされています。 Xcodeスタックは、新しいXcodeバージョンがリリースされるにつれて徐々に非推奨になります。 すべてを保持しているわけではありません スタック 永遠に: 私たちの目的は、最高の製品を構築するのに役立つ最新のツールを提供することです。 アプリ あなたはできる。ただし、スタックの更新が行われるたびにビルド構成を作り直す必要はありません。信頼できる古いスタックを長期間使用し続けることができます。 ある時点で、いくつかの古いスタックを非推奨にします。スタックが非推奨になった場合でも、引き続き使用できますが、スタックは更新さ...", 
"body" : "Bitriseでは、Androidスタックは約2年間サポートされています。 Xcodeスタックは、新しいXcodeバージョンがリリースされるにつれて徐々に非推奨になります。 すべてを保持しているわけではありません スタック 永遠に: 私たちの目的は、最高の製品を構築するのに役立つ最新のツールを提供することです。 アプリ あなたはできる。ただし、スタックの更新が行われるたびにビルド構成を作り直す必要はありません。信頼できる古いスタックを長期間使用し続けることができます。 ある時点で、いくつかの古いスタックを非推奨にします。スタックが非推奨になった場合でも、引き続き使用できますが、スタックは更新されなくなります。その時点で、非推奨ではない新しいスタックに切り替えることを強くお勧めします。 非推奨のスタックは最終的に完全に削除されますが、心配する必要はありません。その前に、事前に十分な警告を表示します。発送いたします このようなアップデート 複数の異なるチャネルで。 " }, 
{ "title" : "macOS スタックの維持 ", 
"url" : "インフラストラクチャー/スタックを構築する/スタックの非推奨と削除のポリシー.html#macos-スタックの維持", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ スタックの非推奨と削除のポリシー \/ macOS スタックの維持 ", 
"snippet" : "新しいバージョンが出たときにすぐに切り替える必要がないように、さまざまな macOS スタックを提供しています。私たちのポリシーは次のとおりです。 Xcode の最新のメジャー リリース用に、すべての Xcode のマイナー バージョンの最新のパッチ バージョンを保持します。 以前のメジャー バージョンから最新の 2 つのマイナー バージョンの最新のパッチ バージョンを保持します。 以前の -1 メジャー バージョンから最新のマイナー バージョンの最新のパッチ バージョンを保持します。 スタックは、グローバルな使用量がすべてのビルドの 1% を下回った場合にのみ廃止されます。 macOS スタ...", 
"body" : "新しいバージョンが出たときにすぐに切り替える必要がないように、さまざまな macOS スタックを提供しています。私たちのポリシーは次のとおりです。 Xcode の最新のメジャー リリース用に、すべての Xcode のマイナー バージョンの最新のパッチ バージョンを保持します。 以前のメジャー バージョンから最新の 2 つのマイナー バージョンの最新のパッチ バージョンを保持します。 以前の -1 メジャー バージョンから最新のマイナー バージョンの最新のパッチ バージョンを保持します。 スタックは、グローバルな使用量がすべてのビルドの 1% を下回った場合にのみ廃止されます。 macOS スタックの維持 Xcode の最新バージョンが 13.4.x のときは、次のものが維持されていました。 Xcode 13 のすべてのマイナー バージョンのすべての最新パッチ リリース: 13.4.x 13.3.x 13.2.x 13.1.x 13.0.x 以前の 2 つの Xcode メジャー バージョンの最新バージョン: 12.5.x 12.4.x 11.7.x " }, 
{ "title" : "macOS スタックの廃止と削除 ", 
"url" : "インフラストラクチャー/スタックを構築する/スタックの非推奨と削除のポリシー.html#macos-スタックの廃止と削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ スタックの非推奨と削除のポリシー \/ macOS スタックの廃止と削除 ", 
"snippet" : "Monterey ベースのスタックでの Xcode 14.x の廃止 2023 年 3 月 13 日月曜日に、Monterey ベースのスタックで Xcode 14.x を廃止します。次の Xcode バージョンが影響を受けます。 macOS 12.5 (Monterey) 上の Xcode 14.0.x macOS 12.5 (Monterey) 上の Xcode 14.1.x 詳細については、次を参照してください。 Xcode 14.x の場合、Monterey から Ventura に移行する . Ventura スタックで VPN または DNS 関連の問題が発生した場合は、以下を確認...", 
"body" : "Monterey ベースのスタックでの Xcode 14.x の廃止 2023 年 3 月 13 日月曜日に、Monterey ベースのスタックで Xcode 14.x を廃止します。次の Xcode バージョンが影響を受けます。 macOS 12.5 (Monterey) 上の Xcode 14.0.x macOS 12.5 (Monterey) 上の Xcode 14.1.x 詳細については、次を参照してください。 Xcode 14.x の場合、Monterey から Ventura に移行する . Ventura スタックで VPN または DNS 関連の問題が発生した場合は、以下を確認してください。 macOS Ventura スタックでの VPN と DNS の問題 . 次のメジャーXcodeバージョンの最初のベータ版がリリースされると、最後のメジャーバージョンを除く最後のメジャーバージョンのすべてのマイナーバージョンが非推奨になります。 新しい Xcode ベータ版がリリースされたときのスタックの廃止 Xcode 14 ベータ版がリリースされたとき、以下を非推奨にしました。 Xcode 11.7 である最も古いメジャー バージョン。 最後の 2 つのマイナー バージョンを除く、最後のメジャー バージョンのマイナー バージョン。実際には、これは 13.4 と 13.3 を除くすべての macOS Xcode 13 スタックを非推奨にすることを意味します。ただし、古い Xcode 13 スタックのいずれかがまだすべてのビルドの 1% 以上で使用されている場合、それらは非推奨にはなりません。 新しいメジャーXcodeバージョンの最初の最終（非ベータ）バージョンがリリースされると、非推奨のスタックが削除されます。最も古いメジャーバージョンと、最新のマイナーバージョンを除く最後のメジャーバージョンのマイナーバージョン。 Xcodeの最終バージョンがリリースされたときにスタックを削除する Xcode 14 (最終版、非ベータ版) がリリースされたとき、次のスタックが削除される予定でした: Xcode 11.7 である最も古いメジャー バージョン。このシナリオでは、Xcode 12.5 が最も古いメジャー バージョンになり、利用可能な唯一の Xcode 12 バージョンになります。 最後の 2 つのマイナー バージョンを除く、最後のメジャー バージョンのマイナー バージョン。これは、Xcode 13.4 と 13.3 を維持することを意味します。 Xcode 13.2、13.1、および 13.0 は、すべてのビルドの 1% 以上で使用されていない限り削除されます。 これは、Xcodeの最新のパッチリリースバージョンが 約2。5年間サポート 、Xcodeメジャーバージョンリリースと同期しています。 " }, 
{ "title" : "AndroidとDockerスタックの非推奨 ", 
"url" : "インフラストラクチャー/スタックを構築する/スタックの非推奨と削除のポリシー.html#androidとdockerスタックの非推奨", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ スタックの非推奨と削除のポリシー \/ AndroidとDockerスタックの非推奨 ", 
"snippet" : "NS AndroidとDocker、Ubuntu スタックは、Ubuntu LTS（長期サポート）リリースとほぼ同期して、約2年間サポートされます。 前のとき AndroidとDocker、Ubuntu スタックがメンテナンスの終わりに達した場合、スタックを非推奨にし、削除するように指定します。その時点で、アプリのスタックを選択できなくなります。ただし、これらのスタックをすでに使用しているアプリは、削除されるまでそれらを使用し続けることができます。予定されている削除については、事前に警告しますので、計画を立てることができます。...", 
"body" : "NS AndroidとDocker、Ubuntu スタックは、Ubuntu LTS（長期サポート）リリースとほぼ同期して、約2年間サポートされます。 前のとき AndroidとDocker、Ubuntu スタックがメンテナンスの終わりに達した場合、スタックを非推奨にし、削除するように指定します。その時点で、アプリのスタックを選択できなくなります。ただし、これらのスタックをすでに使用しているアプリは、削除されるまでそれらを使用し続けることができます。予定されている削除については、事前に警告しますので、計画を立てることができます。 " }, 
{ "title" : "Bitriseスタックにプレインストールされたツール ", 
"url" : "インフラストラクチャー/スタックを構築する/bitriseスタックにプレインストールされたツール.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ Bitriseスタックにプレインストールされたツール ", 
"snippet" : "すべてのBitriseスタックには、多数のプリインストールされたツールとアプリケーションが付属しています。システムレポートリポジトリのリストを確認してください。 すべてのビットライズ スタック のビルド プロセスを確実にするために、多数のプリインストールされたツールとアプリケーションが用意されています。 アプリ 可能な限りスムーズかつ高速です。 スタックを作成または更新するたびに、そのシステム レポートも発行します。システム レポートには、プレインストールされているツールのリストとスタック上のそれらのバージョンが含まれます。システム レポート スクリプトもオープン ソースなので、自分で実行した...", 
"body" : "すべてのBitriseスタックには、多数のプリインストールされたツールとアプリケーションが付属しています。システムレポートリポジトリのリストを確認してください。 すべてのビットライズ スタック のビルド プロセスを確実にするために、多数のプリインストールされたツールとアプリケーションが用意されています。 アプリ 可能な限りスムーズかつ高速です。 スタックを作成または更新するたびに、そのシステム レポートも発行します。システム レポートには、プレインストールされているツールのリストとスタック上のそれらのバージョンが含まれます。システム レポート スクリプトもオープン ソースなので、自分で実行したい場合、または別のツールやシステム チェックを追加したい場合は、お気軽にプル リクエストをお送りください。 スタックは定期的に更新されます：macOSおよびLinuxスタック インストールされている最新のツールバージョンを提供するために毎週更新されます。 利用可能なすべてのスタックのシステムレポートは、 GitHub ： LINUXフォルダーには、AndroidとDockerスタックのシステムレポートがあります。 MACOSフォルダーには、Xcodeスタックのシステムレポートがあります。IntelベースのスタックとM1ベースのスタックは、それぞれのサブフォルダーにあります。 ビルド中のツールのインストール ビルド マシンで必要なツールが見つからない場合は、ビルド中にいつでもインストールできます。 ビルド中のツールのインストール. ナレッジベースで具体的な例をいくつか見つけることができます。 特定の fastlane バージョンのインストール 特定の npm バージョンのインストール " }, 
{ "title" : "M1スタック ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック ", 
"snippet" : "Bitriseは、すべてのクレジットベースのアカウントにAppleシリコンM1スタックを提供しています。 M1スタックで最新バージョンのステップを使用することをお勧めします。 Apple は 2020 年に Apple シリコン M1 チップを発表しました。これはハードウェア アーキテクチャの根本的な変化を表しており、将来的にはすべての iOS および macOS の開発が Apple シリコンを搭載した Mac で行われることを意味します。そのため、Bitrise は CI\/CD の目的で仮想化された M1 環境を提供しています。当社の Xcode スタックはデフォルトで M1 マシン上で実...", 
"body" : "Bitriseは、すべてのクレジットベースのアカウントにAppleシリコンM1スタックを提供しています。 M1スタックで最新バージョンのステップを使用することをお勧めします。 Apple は 2020 年に Apple シリコン M1 チップを発表しました。これはハードウェア アーキテクチャの根本的な変化を表しており、将来的にはすべての iOS および macOS の開発が Apple シリコンを搭載した Mac で行われることを意味します。そのため、Bitrise は CI\/CD の目的で仮想化された M1 環境を提供しています。当社の Xcode スタックはデフォルトで M1 マシン上で実行されます。 Intel ベースの Xcode スタックを引き続き選択できますが、パフォーマンスが大幅に向上した M1 マシンに切り替えることをお勧めします。 " }, 
{ "title" : "ビルド用のM1ベースのスタックの選択 ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#ビルド用のm1ベースのスタックの選択", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ ビルド用のM1ベースのスタックの選択 ", 
"snippet" : "他のスタックと同様に、M1ベースのスタックを選択するには2つのオプションがあります。 ワークフローエディタで選択します。 メタプロパティとして追加する bitrise.yml ファイル。 Workflow Editor bitrise.yml でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 関連するスタックセレクタメニューを見つけます。 すべてのワークフローのデフォルトスタックを設定する場合は、 デフォルトのスタック セクション。 ワークフロー固有のスタックを設定する場合は、 ワークフロー固有のスタック セクションを選択し、ワークフローを選択します。 ドロ...", 
"body" : "他のスタックと同様に、M1ベースのスタックを選択するには2つのオプションがあります。 ワークフローエディタで選択します。 メタプロパティとして追加する bitrise.yml ファイル。 Workflow Editor bitrise.yml でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 関連するスタックセレクタメニューを見つけます。 すべてのワークフローのデフォルトスタックを設定する場合は、 デフォルトのスタック セクション。 ワークフロー固有のスタックを設定する場合は、 ワークフロー固有のスタック セクションを選択し、ワークフローを選択します。 ドロップダウンメニューで、Xcodeバージョン13以降のXcodeスタックを選択します。 の中に デフォルトスタックのマシンタイプ セクションで、M1マシンを選択します。 クリック 保存 右上隅にあります。 アプリを開きます bitrise.yml ファイル。 を追加 meta とのエントリー bitrise.io 2 つのプロパティを含むプロパティ: stack と machine_type_id 、スタック ID とマシンタイプを指定します。 でスタック ID を見つけます。 システム レポート ページ : を含まないファイル名 .log 拡張子はスタック ID です。 M1 ベースのスタックを使用するには、Xcode バージョン 13 以降のスタックのいずれかを選択する必要があります。 マシンの種類は次のとおりです。 マシンタイプを構築する. M1 マシンの場合、サブスクリプション プランに応じて、次の 3 つのオプションがあります。 g2-m1.8core 、 g2-m1-max.5core 、 g2-m1-max.10core . デフォルトのスタックまたはワークフロー固有のスタックを設定できます。 デフォルトのスタックの場合、 meta 構造の最上位にあるプロパティ。たとえば、と同じレベルである必要があります format_version 。ファイルの最後に配置することをお勧めします。 meta:  \n bitrise.io:       \n    stack: osx-xcode-13.4.x    \n machine_type_id: g2-m1.8core\n ワークフロー固有のスタックを設定する場合は、ワークフロー自体の下にメタエントリを追加する必要があります。 workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack: osx-xcode-13.4.x\n  machine_type_id: g2-m1.8core この例では、ワークフロー固有のスタックを設定しています deploy ワークフロー。 " }, 
{ "title" : "IntelベースのスタックからM1への移行 ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#intelベースのスタックからm1への移行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ IntelベースのスタックからM1への移行 ", 
"snippet" : "開発環境をIntelベースのアーキテクチャからAppleシリコンに切り替えることは大きな変更であり、CI\/CDにも影響します。 Bitriseでは、移行が可能な限りシームレスになるように努めました。ステップを更新し、最も重要なツールのM1互換バージョンをM1スタックにインストールしました。 つまり、ほとんどの場合、公式のBitriseステップを使用すると、ビルドは通常どおりに機能するはずです。それでも、すべてをローカルで、自分のM1マシンでテストすることを強くお勧めします。あなたは使用することができます Bitrise CLI そうするために。 BitriseStepバージョン M1スタックの...", 
"body" : "開発環境をIntelベースのアーキテクチャからAppleシリコンに切り替えることは大きな変更であり、CI\/CDにも影響します。 Bitriseでは、移行が可能な限りシームレスになるように努めました。ステップを更新し、最も重要なツールのM1互換バージョンをM1スタックにインストールしました。 つまり、ほとんどの場合、公式のBitriseステップを使用すると、ビルドは通常どおりに機能するはずです。それでも、すべてをローカルで、自分のM1マシンでテストすることを強くお勧めします。あなたは使用することができます Bitrise CLI そうするために。 BitriseStepバージョン M1スタックのワークフローでは常に最新バージョンのビットライズステップを使用してください。これらは、Intelベースのスタックとも下位互換性があるように設計されています。 また、いくつかの制限があり、IntelベースのスタックからM1への移行に関して注意すべきいくつかの変更があります。最も重要なものを見ていきます。 " }, 
{ "title" : "Rosettaを使用する ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#rosettaを使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ IntelベースのスタックからM1への移行 \/ Rosettaを使用する ", 
"snippet" : "Rosettaはエミュレーター\/翻訳者です IntelとAppleのシリコンプロセッサ間の互換性を橋渡しするためにAppleによって設計されました。 Intelをターゲットとする実行可能ファイルを変換して、M1を搭載したマシンで実行できるようにします。 Rosettaがスタックにインストールされ、有効になっています。使用するには、 arch -x86_64 スクリプトで実行する各コマンドの前にプレフィックスを付けます。これは、x86_64命令を使用するようにシステムに指示します。 ロゼッタの制限 ロゼッタは翻訳できません： カーネル拡張。 x86_64コンピュータープラットフォームを仮想化する...", 
"body" : "Rosettaはエミュレーター\/翻訳者です IntelとAppleのシリコンプロセッサ間の互換性を橋渡しするためにAppleによって設計されました。 Intelをターゲットとする実行可能ファイルを変換して、M1を搭載したマシンで実行できるようにします。 Rosettaがスタックにインストールされ、有効になっています。使用するには、 arch -x86_64 スクリプトで実行する各コマンドの前にプレフィックスを付けます。これは、x86_64命令を使用するようにシステムに指示します。 ロゼッタの制限 ロゼッタは翻訳できません： カーネル拡張。 x86_64コンピュータープラットフォームを仮想化する仮想マシンアプリ。 " }, 
{ "title" : "XcodeおよびMacOSのバージョン要件 ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#xcodeおよびmacosのバージョン要件", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ IntelベースのスタックからM1への移行 \/ XcodeおよびMacOSのバージョン要件 ", 
"snippet" : "最も重要な要件は、Xcode13.0以降を使用する必要があることです。とにかくXcode13.0以降に移行することを強くお勧めします。 Appleは、AppStoreに送信されたアプリを受け付けなくなりました 古いバージョンのXcodeでビルドされた場合。 オペレーティングシステムに関しては、M1にはMacOSMontereyが必要です。 BigSurはAppleシリコンと互換性がありません。そのため、M1スタックはモントレーで実行されます。...", 
"body" : "最も重要な要件は、Xcode13.0以降を使用する必要があることです。とにかくXcode13.0以降に移行することを強くお勧めします。 Appleは、AppStoreに送信されたアプリを受け付けなくなりました 古いバージョンのXcodeでビルドされた場合。 オペレーティングシステムに関しては、M1にはMacOSMontereyが必要です。 BigSurはAppleシリコンと互換性がありません。そのため、M1スタックはモントレーで実行されます。 " }, 
{ "title" : "AndroidSDKのバージョン要件 ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#androidsdkのバージョン要件", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ IntelベースのスタックからM1への移行 \/ AndroidSDKのバージョン要件 ", 
"snippet" : "すべてのXcodeスタックには、クロスプラットフォームアプリのサポートの一部としてAndroidSDKも含まれています。 Googleは以前のバージョンにM1互換性を導入していないため、M1スタックにはAndroid32がインストールされています。...", 
"body" : "すべてのXcodeスタックには、クロスプラットフォームアプリのサポートの一部としてAndroidSDKも含まれています。 Googleは以前のバージョンにM1互換性を導入していないため、M1スタックにはAndroid32がインストールされています。 " }, 
{ "title" : "Homebrewのデフォルトパスへの変更 ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#homebrewのデフォルトパスへの変更", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ IntelベースのスタックからM1への移行 \/ Homebrewのデフォルトパスへの変更 ", 
"snippet" : "HomebrewはmacOSで最も人気のあるパッケージマネージャーであり、もちろんIntelベースとM1スタックの両方のBitriseで利用できます。 重要な違いが1つあります。パッケージのデフォルトパスが変更されました。 IntelベースのMacでは、パッケージのデフォルトパスは \/usr\/local\/ 。 M1ベースのMacでは、パッケージのデフォルトパスは次のとおりです。 \/usr\/local\/bin\/ 、 \/usr\/local\/share\/ 、 と \/usr\/local\/lib\/ 。 これは、ビルドでハードコードされたパスを使用してHomebrewパッケージにアクセスする場合にのみ重要...", 
"body" : "HomebrewはmacOSで最も人気のあるパッケージマネージャーであり、もちろんIntelベースとM1スタックの両方のBitriseで利用できます。 重要な違いが1つあります。パッケージのデフォルトパスが変更されました。 IntelベースのMacでは、パッケージのデフォルトパスは \/usr\/local\/ 。 M1ベースのMacでは、パッケージのデフォルトパスは次のとおりです。 \/usr\/local\/bin\/ 、 \/usr\/local\/share\/ 、 と \/usr\/local\/lib\/ 。 これは、ビルドでハードコードされたパスを使用してHomebrewパッケージにアクセスする場合にのみ重要です。その場合、パスをM1バージョンに変更する必要があります。 " }, 
{ "title" : "キャッシング ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#キャッシング-78584", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ IntelベースのスタックからM1への移行 \/ キャッシング ", 
"snippet" : "Bitriseでのキャッシュ ブランチに基づいて機能します。リポジトリの別のブランチで同じワークフローを実行すると、別のキャッシュアーカイブが作成されます。 The キャッシュ：プル ステップは、ダウンロード可能なキャッシュが現在実行中のビルドと同じスタックとCPUアーキテクチャで生成されたことを確認します。たとえば、Intelベースのスタックでビルドを実行しようとしていて、ステップがM1ベースのスタックで生成されたキャッシュアーカイブのみを検出した場合、キャッシュはダウンロードされません。これは、他のCPUアーキテクチャで生成されたキャッシュの使用に起因する安定性の問題を回避するためです。 ...", 
"body" : "Bitriseでのキャッシュ ブランチに基づいて機能します。リポジトリの別のブランチで同じワークフローを実行すると、別のキャッシュアーカイブが作成されます。 The キャッシュ：プル ステップは、ダウンロード可能なキャッシュが現在実行中のビルドと同じスタックとCPUアーキテクチャで生成されたことを確認します。たとえば、Intelベースのスタックでビルドを実行しようとしていて、ステップがM1ベースのスタックで生成されたキャッシュアーカイブのみを検出した場合、キャッシュはダウンロードされません。これは、他のCPUアーキテクチャで生成されたキャッシュの使用に起因する安定性の問題を回避するためです。 これは、実際には、特定のブランチにアクティブなキャッシュが1つしかないことを意味します。これは、M1ベースまたはIntelベースのキャッシュのいずれかですが、両方ではありません。あなたが実行する場合 キャッシュ：プッシュ 異なるアーキテクチャのキャッシュアーカイブがあるワークフローをステップすると、そのステップはそのキャッシュアーカイブを上書きします。 キャッシングステップのバージョン要件 CPUアーキテクチャに基づいてキャッシュアーカイブを区別するロジックは、古いバージョンのキャッシュでは機能しません。手順： The キャッシュ：プル ステップはバージョン2.6.0以降である必要があります。古いバージョンでは、CPUアーキテクチャに関係なく、見つかったキャッシュアーカイブがダウンロードされます。 The キャッシュ：プッシュ ステップはバージョン2.7.0以降である必要があります。古いバージョンでは、CPUアーキテクチャに関連するメタデータは追加されません。 " }, 
{ "title" : "その他の既知の問題と制限 ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#その他の既知の問題と制限", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ その他の既知の問題と制限 ", 
"snippet" : "M1には、他にもいくつかの制限と既知の問題があります。私たちは、ほとんどのユースケースで機能するソリューションがあることを確認するために懸命に取り組んでいます。...", 
"body" : "M1には、他にもいくつかの制限と既知の問題があります。私たちは、ほとんどのユースケースで機能するソリューションがあることを確認するために懸命に取り組んでいます。 " }, 
{ "title" : "Androidエミュレーションは利用できません ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#androidエミュレーションは利用できません", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ その他の既知の問題と制限 \/ Androidエミュレーションは利用できません ", 
"snippet" : "M1スタックは、ビルドでのAndroidエミュレーターの使用をサポートしていません。これは、Bitriseが仮想マシン上でビルドを実行し、Appleシリコンアーキテクチャがネストされた仮想化を許可していないためです。 ただし、Firebase Test Labを使用して、BitriseでAndroidデバイスのテストを実行することはできます。 Androidのデバイステスト。...", 
"body" : "M1スタックは、ビルドでのAndroidエミュレーターの使用をサポートしていません。これは、Bitriseが仮想マシン上でビルドを実行し、Appleシリコンアーキテクチャがネストされた仮想化を許可していないためです。 ただし、Firebase Test Labを使用して、BitriseでAndroidデバイスのテストを実行することはできます。 Androidのデバイステスト。 " }, 
{ "title" : "ぶら下がっているビルドの問題 ", 
"url" : "インフラストラクチャー/スタックを構築する/m1スタック.html#ぶら下がっているビルドの問題", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ M1スタック \/ その他の既知の問題と制限 \/ ぶら下がっているビルドの問題 ", 
"snippet" : "Appleのハイパーバイザーフレームワークには、私たちのような仮想化環境で問題を引き起こす可能性のあるバグがあります。この問題は、シミュレーターが起動されるたびに発生する可能性があります。たとえば、iOSステップのXcodeテストでは、iOSシミュレーターを使用してテストを実行します。シミュレーターが起動すると、ビルドが無期限にハングする可能性があります。 この問題は Apple に報告されており、macOS Ventura で公開される修正プログラムがテストされています。それまでは、回避策を使用することをお勧めします。 出力なしでぶら下がっているステップの検出と中止 以外のハングステップが発...", 
"body" : "Appleのハイパーバイザーフレームワークには、私たちのような仮想化環境で問題を引き起こす可能性のあるバグがあります。この問題は、シミュレーターが起動されるたびに発生する可能性があります。たとえば、iOSステップのXcodeテストでは、iOSシミュレーターを使用してテストを実行します。シミュレーターが起動すると、ビルドが無期限にハングする可能性があります。 この問題は Apple に報告されており、macOS Ventura で公開される修正プログラムがテストされています。それまでは、回避策を使用することをお勧めします。 出力なしでぶら下がっているステップの検出と中止 以外のハングステップが発生している場合 Xcode シミュレーターを起動する ステップ、私たちのガイドをチェックしてください 出力なしでぶら下がっているステップの検出と中止 . 回避策は簡単です。ビルドの開始時に Xcode シミュレーターを起動し、ハングするかどうかを確認し、ハングする場合はワークフローを再起動して、ハングの問題で時間とクレジットが無駄にならないようにします。 追加 Xcode シミュレーターを起動する 最初のステップ ワークフローとしてのステップ。 リポジトリを複製する前であっても、何よりもまずシミュレーターを起動することが重要です。問題が発生しない場合は、シミュレーターの起動に数秒しかかからず、後でワークフローで使用してテストを実行できます。 Step に 90 秒の起動タイムアウトを追加します。ワークフロー エディターまたは bitrise.yml ファイル： 宛先デバイス シミュレーターの宛先も必ず設定してください デバイス宛先指定子 ステップの入力。の中に bitrise.yml ファイル、入力の名前は destination . あなたは見つけることができます Xcode で利用可能な宛先デバイス . ワークフロー エディターのグラフィカル UI で: シミュレーターの起動タイムアウト (秒) 入力し、90 に設定します。 の中に bitrise.yml 、設定する必要があります wait_for_boot_timeout 90 までの入力: - xcode-start-simulator:\n inputs:\n - destination: platform=iOS Simulator,name=iPhone 8,OS=latest\n - wait_for_boot_timeout: 90 追加 Bitrise ワークフローのトリガー の直後にワークフローに進みます Xcode シミュレーターを起動する ステップ。 このステップを使用して、前のステップがハングしたかどうかを検出し、ハングした場合はビルドを再開します。 前のステップが失敗した場合でもステップを実行するように設定します。ワークフロー エディターまたは bitrise.yml ファイル ワークフロー エディターのグラフィカル UI で: 前のステップが失敗した場合に実行 トグルしてオンにします。 の中に bitrise.yml ファイル: 設定 is_always_run 属性 true . - trigger-bitrise-workflow:\n is_always_run: true をセットする run_if 属性: ステップは、 Xcode シミュレーターを起動する で終わった hanged 状態。 の Xcode シミュレーターを起動する ステップは 環境変数 シミュレーターの状態を保存します。これは、ビルドがハングしたかどうかを検出するために使用するものです。 YAML モードのみ! これは、 bitrise.yml あなたのアプリのファイル。 - trigger-bitrise-workflow:\n is_always_run: true\n run_if: '{{enveq \"BITRISE_SIMULATOR_STATUS\" \"hanged\"}}' API トークンとワークフロー ID を構成します。 トリガー API トークンのビルド : で見つけることができます コード Bitrise のアプリのページのタブ。 ワークフロー ID : トリガーするワークフローの名前。この場合、同じワークフローである必要があります。 の中に bitrise.yml ステップは次のようになります。 - trigger-bitrise-workflow:\n is_always_run: true\n run_if: '{{enveq \"BITRISE_SIMULATOR_STATUS\" \"hanged\"}}'\n inputs:\n - api_token: $TRIGGER_TOKEN\n - workflow_id: my-workflow-name 完全な YAML の例 - xcode-start-simulator:\n inputs:\n - destination: platform=iOS Simulator,name=iPhone 8,OS=latest\n - wait_for_boot_timeout: 90\n- trigger-bitrise-workflow:\n is_always_run: true\n run_if: '{{enveq \"BITRISE_SIMULATOR_STATUS\" \"hanged\"}}'\n inputs:\n - api_token: $TRIGGER_TOKEN\n - workflow_id: my-workflow-name それでおしまい。ビルドがシミュレーターの段階でハングした場合、ビルドは 90 秒以内に自動的に再起動されるため、問題によって膨大な時間が浪費されることはありません。 " }, 
{ "title" : "Android \/ Linux \/ Docker環境 ", 
"url" : "インフラストラクチャー/スタックを構築する/android---linux---docker環境.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ Android \/ Linux \/ Docker環境 ", 
"snippet" : "BitriseのAndroidスタックは、Dockerイメージから作成されたLinuxベースの仮想マシンで実行されます。すべての画像ファイルはGitHubにあります。 標準を使用します Docker 画像、公開 岸壁 、および関連 Dockerfile これはGitHubで見つけることができます（以下を参照）。 Dockerfileとは何ですか？ NS Dockerfile Dockerイメージ\/環境を記述し、Dockerイメージを構築するために直接使用されるファイルです。 プレインストールされたツール すべてのスタックには、多数のプリインストールされたツールが用意されています。 Bitris...", 
"body" : "BitriseのAndroidスタックは、Dockerイメージから作成されたLinuxベースの仮想マシンで実行されます。すべての画像ファイルはGitHubにあります。 標準を使用します Docker 画像、公開 岸壁 、および関連 Dockerfile これはGitHubで見つけることができます（以下を参照）。 Dockerfileとは何ですか？ NS Dockerfile Dockerイメージ\/環境を記述し、Dockerイメージを構築するために直接使用されるファイルです。 プレインストールされたツール すべてのスタックには、多数のプリインストールされたツールが用意されています。 Bitriseスタックにプレインストールされたツール現在、4つのDockerイメージがあり、それらは互いに積み重ねられています。 Bitriseベース画像 （（ リンク ）。 画像名ID： quay.io\/bitriseio\/bitrise-base-20.04 。 Android以外のすべてのツールと環境設定が含まれています。 これは最小の画像であるため、ローカルでも使用する場合は、Android以外のプロジェクトでベース画像として使用するのに理想的です。 Ruby 、 Go 、 Python 、 git そしてその bitriseコマンドラインツール すべてプレインストールされており、すぐに使用できます。 OS： Ubuntu 20.04 、64ビット。 関連するをチェックしてください Dockerfile どこ この画像には何がプリインストールされているかがわかります。 ベースのAndroid画像 （（ リンク ）。 画像名ID： quay.io\/bitriseio\/android-20.04 。 Android固有のツールと環境でBitriseBaseイメージを拡張します。 複数のAndroidSDK、ビルドツール、システムイメージのバージョンがプリインストールされています。 gradle と maven 。 あなたは使用することができます $ANDROID_HOME プリインストールされたAndroidSDKの場所を指す環境変数。 関連するをチェックしてください Dockerfile どこ この画像には何がプリインストールされているかがわかります。 AndroidNDKイメージ （（ リンク ）。 画像名ID： quay.io\/bitriseio\/android-ndk-20.04 。 ベースのAndroidイメージに基づいて構築され、最新のAndroidNDKで拡張されています。 あなたは使用することができます $ANDROID_NDK_HOME プレインストールされたAndroidNDKの場所を指す環境変数であり、 $PATH 。 関連するをチェックしてください Dockerfile どこ この画像には何がプリインストールされているかがわかります。 すべてのビルドは新しいVMで実行されます。 新しいコンテナだけではありません。 VMはビルド直後に破棄されます。これにより、完全な制御が可能になります Docker そして環境全体。 Dockerベースのスタックでビルドが開始されると、ボリュームマウントが行われます。 \/var\/run\/docker.sock コンテナにソケットを挿入します（呼び出しと同様） docker run -v \/var\/run\/docker.sock:\/var\/run\/docker.sock ... 。このアクセス許可方法についての説明を見つけることができます ここ ）。 NS docker dockerは単一バイナリソリューションから動的にロードされたコンポーネントへの移行を開始し、単純に共有するため、バイナリはベースDockerイメージ内にインストールする必要があります。 docker バイナリはもう十分ではありません。 すべてのDockerイメージにDockerをインストールするため、イメージを使用する場合、または独自のイメージをDockerイメージに基づいて使用する場合は、何もする必要はありません。 これは、あなたがにアクセスできることを意味します docker コンテナ内にあり、dockerを使用する他のツールを使用できます。 docker-compose 。たとえば、を使用してWebサイトプロジェクトでテストやその他の自動化を構成および実行できます。 docker-compose 。 あなたは呼び出すことができます docker info 、 docker build 、 docker run 、 docker login 、 docker push 自分のマシンでのやり方とまったく同じです。 共有ボリューム 走りたいなら docker ビルドボリュームと共有ボリュームでは、ベースDockerコンテナー（ビルドが実行されているコンテナー）と共有されるボリュームのみを共有できることに注意してください。これはどのように docker ボリューム共有を処理します。下のすべて \/bitrise ボリュームとしてマウントできますが、他のパスが動作することが保証されていません --volume マッピング。 これは、標準パスを使用し、相対パスを使用してボリュームをマウントする場合、デフォルトのソースコードディレクトリが内部にあるため、期待どおりに機能することを意味します。 \/bitrise （デフォルトでは \/bitrise\/src Dockerイメージ内）。 ただし、機能しないのは、ソースコードディレクトリを外部にあるように変更した場合です。 \/bitrise 、または絶対パスが外部にあるフォルダをマウントしたい \/bitrise 。 " }, 
{ "title" : "Javaバージョンの管理 ", 
"url" : "インフラストラクチャー/スタックを構築する/javaバージョンの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ Javaバージョンの管理 ", 
"snippet" : "すべてのBitrise仮想マシンには、Java 8、Java 11、およびJava17がプリインストールされています。デフォルトのバージョンはJava17ですが、いつでもバージョンを切り替えることができます。 デフォルトでは、すべてのBitriseスタックにはJava 11がプリインストールされており、すぐに使用できます。別のバージョンに切り替えない場合、ビルドはJava11を使用します。 今のところ、Java 8はすべてのスタックタイプで利用できますが、Java 8に切り替えるプロセスは、MacOSベースのスタックと比較してUbuntuベースのスタックではわずかに異なります。 Java 8 ...", 
"body" : "すべてのBitrise仮想マシンには、Java 8、Java 11、およびJava17がプリインストールされています。デフォルトのバージョンはJava17ですが、いつでもバージョンを切り替えることができます。 デフォルトでは、すべてのBitriseスタックにはJava 11がプリインストールされており、すぐに使用できます。別のバージョンに切り替えない場合、ビルドはJava11を使用します。 今のところ、Java 8はすべてのスタックタイプで利用できますが、Java 8に切り替えるプロセスは、MacOSベースのスタックと比較してUbuntuベースのスタックではわずかに異なります。 Java 8 Java 17 バージョンはいつでも切り替えることができます。別のJavaバージョン（たとえば、14）をインストールすることもできます。 Potential issues with Java versions Using a new Java version, or switching Java versions during a build might cause unexpected issues: JAVA_HOME isn't set correctly after switching to Java 11 on macOS-based stacks Using Android SDK tools with Java 11 java.lang.ClassNotFoundException " }, 
{ "title" : "Javaバージョンの設定ステップでJavaバージョンを設定する ", 
"url" : "インフラストラクチャー/スタックを構築する/javaバージョンの管理.html#javaバージョンの設定ステップでjavaバージョンを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ Javaバージョンの管理 \/ Javaバージョンの設定ステップでJavaバージョンを設定する ", 
"snippet" : "Java8とJava11を簡単に切り替えることができます。 Javaバージョンを設定する ステップ 。このステップでは、ビルドを実行する仮想マシンのグローバルJavaバージョンを設定できます。 新しいJavaバージョンのインストール このステップでは、Javaバージョンをインストールできません。スタックにプリインストールされているバージョンのみを切り替えることができます。デフォルトでスタックで使用できないJavaバージョンをインストールする場合は、を確認してください。 追加します Javaバージョンを設定する ワークフローに進みます。ワークフローの最初のステップとして設定することをお勧めします...", 
"body" : "Java8とJava11を簡単に切り替えることができます。 Javaバージョンを設定する ステップ 。このステップでは、ビルドを実行する仮想マシンのグローバルJavaバージョンを設定できます。 新しいJavaバージョンのインストール このステップでは、Javaバージョンをインストールできません。スタックにプリインストールされているバージョンのみを切り替えることができます。デフォルトでスタックで使用できないJavaバージョンをインストールする場合は、を確認してください。 追加します Javaバージョンを設定する ワークフローに進みます。ワークフローの最初のステップとして設定することをお勧めします。 を見つける ビルド用にグローバルに設定されるJavaバージョン 入力。 必要なバージョンに設定してください。あなたはから選ぶことができます 8 と 11 。 オプションは次のとおりです。 8 11（デフォルト値） 17 YAML example In this example, we're setting the Java version to 17 in the bitrise.yml file. primary:\n steps:\n - set-java-version@1:\n inputs:\n - set_java_version: '17' " }, 
{ "title" : "スクリプトステップを使用したJavaバージョンの設定 ", 
"url" : "インフラストラクチャー/スタックを構築する/javaバージョンの管理.html#スクリプトステップを使用したjavaバージョンの設定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ Javaバージョンの管理 \/ スクリプトステップを使用したJavaバージョンの設定 ", 
"snippet" : "使用したくない場合 Javaバージョンを設定する ビルドマシンでデフォルトのJavaバージョンを変更する手順は、必要ありません。同じことを次の方法で実行できます。 脚本 ステップ。 私たちの AndroidとDocker スタックはUbuntuを搭載した仮想マシンで実行されますが、 Xcode と Visual Studio for Mac スタックはmacOSで実行されます。プロセスはスタックタイプごとに少し異なりますが、すべてのスタックで、異なるJavaバージョンに切り替えるには次の3つのことが必要です。 Java自体とJavaコンパイラを選択したバージョンに設定します。 の設定 JAVA...", 
"body" : "使用したくない場合 Javaバージョンを設定する ビルドマシンでデフォルトのJavaバージョンを変更する手順は、必要ありません。同じことを次の方法で実行できます。 脚本 ステップ。 私たちの AndroidとDocker スタックはUbuntuを搭載した仮想マシンで実行されますが、 Xcode と Visual Studio for Mac スタックはmacOSで実行されます。プロセスはスタックタイプごとに少し異なりますが、すべてのスタックで、異なるJavaバージョンに切り替えるには次の3つのことが必要です。 Java自体とJavaコンパイラを選択したバージョンに設定します。 の設定 JAVA_HOME 環境変数 とともに export 指図。 この環境変数の保存 envman そのため、ワークフローのすべてのステップからアクセスできます。 ステップと環境変数 envmanが必要なのは、それがないと、Stepsがお互いにアクセスできないためです。 環境変数 。 1つのステップにのみJava環境を設定し、それをenvmanと一緒に保存しない場合、他のステップはデフォルトのJava環境であるJava11を使用します。 " }, 
{ "title" : "macOSベースのスタックの場合 ", 
"url" : "インフラストラクチャー/スタックを構築する/javaバージョンの管理.html#macosベースのスタックの場合", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ Javaバージョンの管理 \/ スクリプトステップを使用したJavaバージョンの設定 \/ macOSベースのスタックの場合 ", 
"snippet" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加する 脚本 何らかの方法でJavaを使用するステップの前にワークフローにステップします。 これを行う最も簡単な方法は、ワークフローの最初のステップとして配置することです。 次のコマンドをに追加します スクリプトコンテンツ ステップの入力： ビルドのグローバルJavaバージョンをJava11に設定するには、次のようにします。 jenv global 11 export JAVA_HOME=\"$(jenv prefix)\" envman a...", 
"body" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加する 脚本 何らかの方法でJavaを使用するステップの前にワークフローにステップします。 これを行う最も簡単な方法は、ワークフローの最初のステップとして配置することです。 次のコマンドをに追加します スクリプトコンテンツ ステップの入力： ビルドのグローバルJavaバージョンをJava11に設定するには、次のようにします。 jenv global 11\nexport JAVA_HOME=\"$(jenv prefix)\"\nenvman add --key JAVA_HOME --value \"$(jenv prefix)\" ビルドのグローバルJavaバージョンをJava8に設定するには： jenv global 1.8\nexport JAVA_HOME=\"$(jenv prefix)\"\nenvman add --key JAVA_HOME --value \"$(jenv prefix)\" クリック 保存する 右上隅にあります。 " }, 
{ "title" : "Ubuntuベースのスタックの場合 ", 
"url" : "インフラストラクチャー/スタックを構築する/javaバージョンの管理.html#ubuntuベースのスタックの場合", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ Javaバージョンの管理 \/ スクリプトステップを使用したJavaバージョンの設定 \/ Ubuntuベースのスタックの場合 ", 
"snippet" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加する 脚本 何らかの方法でJavaを使用するステップの前にワークフローにステップします。 これを行う最も簡単な方法は、ワークフローの最初のステップとして配置することです。 次のコマンドをに追加します スクリプトコンテンツ ステップの入力： ビルドのグローバルJavaバージョンをJava11に設定するには、次のようにします。 sudo update-alternatives --set javac \/usr\/lib\/jvm\/java-11...", 
"body" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加する 脚本 何らかの方法でJavaを使用するステップの前にワークフローにステップします。 これを行う最も簡単な方法は、ワークフローの最初のステップとして配置することです。 次のコマンドをに追加します スクリプトコンテンツ ステップの入力： ビルドのグローバルJavaバージョンをJava11に設定するには、次のようにします。 sudo update-alternatives --set javac \/usr\/lib\/jvm\/java-11-openjdk-amd64\/bin\/javac\nsudo update-alternatives --set java \/usr\/lib\/jvm\/java-11-openjdk-amd64\/bin\/java\n \nexport JAVA_HOME='\/usr\/lib\/jvm\/java-11-openjdk-amd64'\nenvman add --key JAVA_HOME --value '\/usr\/lib\/jvm\/java-11-openjdk-amd64' ビルドのグローバルJavaバージョンをJava8に設定するには： sudo update-alternatives --set javac \/usr\/lib\/jvm\/java-8-openjdk-amd64\/bin\/javac\nsudo update-alternatives --set java \/usr\/lib\/jvm\/java-8-openjdk-amd64\/jre\/bin\/java\n \nexport JAVA_HOME='\/usr\/lib\/jvm\/java-8-openjdk-amd64'\nenvman add --key JAVA_HOME --value '\/usr\/lib\/jvm\/java-8-openjdk-amd64'\n クリック 保存する 右上隅にあります。 " }, 
{ "title" : "AndroidスタックへのJavaバージョンのインストール ", 
"url" : "インフラストラクチャー/スタックを構築する/javaバージョンの管理.html#androidスタックへのjavaバージョンのインストール", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ スタックを構築する \/ Javaバージョンの管理 \/ AndroidスタックへのJavaバージョンのインストール ", 
"snippet" : "AndroidスタックにインストールされていないJavaまたはJDKバージョンが必要な場合は、このガイドに従ってください。以下の例では、Java \/ JDK1.14をインストールします。 脚本 ステップ。あなたはそれをあなたの選んだバージョンに適応させることができます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します 脚本 ワークフローに進みます。 の中に スクリプトコンテンツ ステップの入力、スクリプトを追加します： 以下の例ではJava14をインストールしますが、自由に置...", 
"body" : "AndroidスタックにインストールされていないJavaまたはJDKバージョンが必要な場合は、このガイドに従ってください。以下の例では、Java \/ JDK1.14をインストールします。 脚本 ステップ。あなたはそれをあなたの選んだバージョンに適応させることができます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します 脚本 ワークフローに進みます。 の中に スクリプトコンテンツ ステップの入力、スクリプトを追加します： 以下の例ではJava14をインストールしますが、自由に置き換えてください。 openjdk-14-jdk と java-1.14.0-openjdk-amd64 選択したバージョンのパーツ。 #!\/bin\/bash\nset -ex\n \nadd-apt-repository -y ppa:openjdk-r\/ppa\napt-get update -qq\napt-get install -y openjdk-14-jdk\nupdate-java-alternatives -s \/usr\/lib\/jvm\/java-1.14.0-openjdk-amd64\necho \"done\" 新しいビルドを開始します。この 脚本 ステップは、他に依存しないため、ワークフローの最初のステップにすることができます。 " }, 
{ "title" : "コードセキュリティ ", 
"url" : "インフラストラクチャー/コードセキュリティ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ コードセキュリティ ", 
"snippet" : "すべてのBitriseビルドは、以前のビルドにアクセスできない新しい仮想マシンで実行されます。私たちはあなたのソースコードを保存しません、そしてあなたはそれがアクセスされる方法を設定することができます。 コードのセキュリティを保証するために、すべての Bitrise ビルドは独自のクリーンな仮想マシンで実行され、ビルドの終了後に仮想マシン全体を破棄し、ビルドが使用するすべてのファイルとビルド中に行ったすべての変更を消去します。 これは、Android と Docker にも当てはまります。 スタック 、Docker コンテナーを使用してビルドを実行します。ビルド自体は、ビルドの環境として使用さ...", 
"body" : "すべてのBitriseビルドは、以前のビルドにアクセスできない新しい仮想マシンで実行されます。私たちはあなたのソースコードを保存しません、そしてあなたはそれがアクセスされる方法を設定することができます。 コードのセキュリティを保証するために、すべての Bitrise ビルドは独自のクリーンな仮想マシンで実行され、ビルドの終了後に仮想マシン全体を破棄し、ビルドが使用するすべてのファイルとビルド中に行ったすべての変更を消去します。 これは、Android と Docker にも当てはまります。 スタック 、Docker コンテナーを使用してビルドを実行します。ビルド自体は、ビルドの環境として使用される 1 つのみで、他の Docker コンテナーが開始されていない完全な仮想マシンを引き続き取得します。つまり、ビルド環境の分離ではなく、環境を管理するためにのみ Docker コンテナーを使用します。これは、すべてのビルドに完全な仮想マシンを使用することによって保証されます。 このようにして、ビルドは常に他のユーザーや以前のビルドからの変更から保護され、他の誰もコードにアクセスできず、安定した環境を使用してビルドを定義できます。 ワークフロー .すべてのビルドは、以前または並行して実行されているビルドとは関係なく、隔離された環境で完了します。 " }, 
{ "title" : "ソースコード ", 
"url" : "インフラストラクチャー/コードセキュリティ.html#ソースコード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ コードセキュリティ \/ ソースコード ", 
"snippet" : "ソースコードは保存されません。ソース コードは、ビルド マシン (仮想マシン) でのみアクセスできます。 ビットライズ構成 .あなたが持っていない場合 Gitクローン ステップ または、構成内の Git リポジトリにアクセスする他のステップの場合、ソース コードはまったく変更されません。ビルドの最後に、仮想マシン全体が破棄されます。そのため、変更をコミットしてリモート リポジトリにプッシュしない限り、仮想マシン上のソース コードに加えた変更は失われます。...", 
"body" : "ソースコードは保存されません。ソース コードは、ビルド マシン (仮想マシン) でのみアクセスできます。 ビットライズ構成 .あなたが持っていない場合 Gitクローン ステップ または、構成内の Git リポジトリにアクセスする他のステップの場合、ソース コードはまったく変更されません。ビルドの最後に、仮想マシン全体が破棄されます。そのため、変更をコミットしてリモート リポジトリにプッシュしない限り、仮想マシン上のソース コードに加えた変更は失われます。 " }, 
{ "title" : "コード署名およびその他のファイル ", 
"url" : "インフラストラクチャー/コードセキュリティ.html#コード署名およびその他のファイル", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ コードセキュリティ \/ コード署名およびその他のファイル ", 
"snippet" : "でアップロードするファイル コード署名 のタブ ワークフロー エディター に保存されます Amazon S3 Web サーバーからのみアクセスできるようにします。 必要な資格情報はどのデータベースにも保存されておらず、Webサーバーの環境でのみ使用できます。ビルドサーバーもファイルに直接アクセスできません。ビルドが開始されると、Webサーバーはこれらのファイルに対して読み取り専用の時間制限付きアクセスURLを生成します。 AmazonS3の事前署名されたURL 。...", 
"body" : "でアップロードするファイル コード署名 のタブ ワークフロー エディター に保存されます Amazon S3 Web サーバーからのみアクセスできるようにします。 必要な資格情報はどのデータベースにも保存されておらず、Webサーバーの環境でのみ使用できます。ビルドサーバーもファイルに直接アクセスできません。ビルドが開始されると、Webサーバーはこれらのファイルに対して読み取り専用の時間制限付きアクセスURLを生成します。 AmazonS3の事前署名されたURL 。 " }, 
{ "title" : "パスワード ", 
"url" : "インフラストラクチャー/コードセキュリティ.html#パスワード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ コードセキュリティ \/ パスワード ", 
"snippet" : "パスワードは、ハッシュ化された暗号化された形式で保存されます。パスワードを暗号化しています bcryptアルゴリズム 、複数のストレッチを使用します。...", 
"body" : "パスワードは、ハッシュ化された暗号化された形式で保存されます。パスワードを暗号化しています bcryptアルゴリズム 、複数のストレッチを使用します。 " }, 
{ "title" : "カスタマイズ可能なエンタープライズビルドプラットフォーム ", 
"url" : "インフラストラクチャー/カスタマイズ可能なエンタープライズビルドプラットフォーム.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ カスタマイズ可能なエンタープライズビルドプラットフォーム ", 
"snippet" : "Bitriseは、企業向けに2種類のカスタムビルドプラットフォームを提供しています。Bitriseファイアウォールの背後にある専用ビルドプラットフォームと、ユーザー自身の環境上のプライベートビルドプラットフォームです。 カスタムエンタープライズビルドプラットフォームを使用するということは、ニーズに合わせて特別に構成された専用の仮想マシン（VM）でBitriseビルドを実行することを意味します。プライベートクラウドを使用すると、ビルドをいつどのように実行するかを完全に制御できます。 Bitriseは、企業向けに2種類のカスタムビルドプラットフォームを提供しています。 専用ビルドプラットフォーム：...", 
"body" : "Bitriseは、企業向けに2種類のカスタムビルドプラットフォームを提供しています。Bitriseファイアウォールの背後にある専用ビルドプラットフォームと、ユーザー自身の環境上のプライベートビルドプラットフォームです。 カスタムエンタープライズビルドプラットフォームを使用するということは、ニーズに合わせて特別に構成された専用の仮想マシン（VM）でBitriseビルドを実行することを意味します。プライベートクラウドを使用すると、ビルドをいつどのように実行するかを完全に制御できます。 Bitriseは、企業向けに2種類のカスタムビルドプラットフォームを提供しています。 専用ビルドプラットフォーム：Bitriseファイアウォールの背後にある専用マシンのセット。これらのマシンは、他のBitriseビルドマシンと同じパブリックIPアドレスを持ちますが、専用に予約されています。 プライベートビルドプラットフォーム：このソリューションには、独自のファイアウォール、ストレージ容量、vSphere環境が含まれます。これにより、カスタム仮想化構成とサイト間VPNを作成できます。後者の場合、データがネットワークを離れることはなく、ビルドごとにVPNに個別に接続する必要はありません。 プライベートビルドプラットフォームは、多くの構成オプションを備えた高度なセットアップです。詳細については、お問い合わせください！ 専用ビルドプラットフォームとプライベートビルドプラットフォームの最も重要な違いを確認してください。 専用ビルドプラットフォームとプライベートビルドプラットフォーム 利用可能なサービス 専用ビルドプラットフォーム プライベートビルドプラットフォーム 仮想マシンで使用可能なリソースの選択 はい はい モバイルCI \/ CDのエキスパートである専任のカスタマーサクセスエンジニア。 はい はい 毎週の電話による最初の月の最初のオンボーディング支援。 はい はい Bitriseアカウントマネージャーとカスタマーサクセスエンジニアからの毎月のチェックインによる継続的なCI \/ CDのベストプラクティスの指導。 はい はい 仮想化、オーケストレーション、およびデータストレージのライセンスを含む毎週のインフラストラクチャメンテナンス。 はい はい 専用ファイアウォールとIPアドレスを備えたプライベートネットワーク - はい 管理ダッシュボードへのアクセス（vSphereおよびGoogle Cloud Platform） - はい VMにプリインストールされているツールをカスタマイズする - はい " }, 
{ "title" : "独自のDockerイメージを使用する ", 
"url" : "インフラストラクチャー/独自のdockerイメージを使用する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ 独自のDockerイメージを使用する ", 
"snippet" : "Bitriseで独自のDockerイメージを使用したり、ワークフローでカスタムDockerコマンドを実行したりできます。 DockerHubのカスタムイメージまたは独自のDockerfileを使用します。 Bitriseでは、すべてのビルドは、ビルドの最後に破棄される独自の個別の仮想マシンで実行されます。 Androidスタックでは、この目的でDockerを使用しています。スタックにはDockerイメージがプリインストールされていますが、独自のカスタムイメージを使用して、ワークフローでカスタムDockerコマンドを実行できます。 Bitriseで独自のDocker構成を使用するには、次の2つの...", 
"body" : "Bitriseで独自のDockerイメージを使用したり、ワークフローでカスタムDockerコマンドを実行したりできます。 DockerHubのカスタムイメージまたは独自のDockerfileを使用します。 Bitriseでは、すべてのビルドは、ビルドの最後に破棄される独自の個別の仮想マシンで実行されます。 Androidスタックでは、この目的でDockerを使用しています。スタックにはDockerイメージがプリインストールされていますが、独自のカスタムイメージを使用して、ワークフローでカスタムDockerコマンドを実行できます。 Bitriseで独自のDocker構成を使用するには、次の2つの方法があります。 走る docker ビルド中に自分自身に命令します。これを行うには、1つ以上を使用します 脚本 ステップ。 ワークフローエディタでカスタム画像を設定します。 macOSスタックにDockerはありません DockerはどのmacOSベースのスタックにもインストールされていません。 Dockerに関連するガイドは、Linuxベースのスタックにのみ適用されます。 実行することをお勧めします docker を含むコマンド 脚本 上の基本環境のDockerイメージを変更してはならないので手順 スタック あなたが本当にする必要がない限り、タブ！の実行 docker ビルド中のコマンドはより柔軟で、全体的に高レベルの制御を提供します。 GitHubサンプルリポジトリ サンプルリポジトリは次の場所にあります。 GitHub 、を使用してMac \/ Linuxで実行するように構成されています Bitrise CLI 。 " }, 
{ "title" : "スクリプトステップを使用したDockerコマンドの実行 ", 
"url" : "インフラストラクチャー/独自のdockerイメージを使用する.html#スクリプトステップを使用したdockerコマンドの実行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ 独自のDockerイメージを使用する \/ スクリプトステップを使用したDockerコマンドの実行 ", 
"snippet" : "ローカルとオンの両方でカスタムDocker構成を使用するための推奨される方法 bitrise.io 、Dockerコマンドを実行するためのスクリプトステップをワークフローに追加することです。同じ手順を使用して、Docker Hubなどのサービスに対して自分自身を認証し、選択したイメージを実行できます。 を使用してDockerコマンドを実行する方法に関する3つの例を提供します 脚本 ステップ：...", 
"body" : "ローカルとオンの両方でカスタムDocker構成を使用するための推奨される方法 bitrise.io 、Dockerコマンドを実行するためのスクリプトステップをワークフローに追加することです。同じ手順を使用して、Docker Hubなどのサービスに対して自分自身を認証し、選択したイメージを実行できます。 を使用してDockerコマンドを実行する方法に関する3つの例を提供します 脚本 ステップ： " }, 
{ "title" : "dockerhello-worldを実行しています ", 
"url" : "インフラストラクチャー/独自のdockerイメージを使用する.html#dockerhello-worldを実行しています", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ 独自のDockerイメージを使用する \/ スクリプトステップを使用したDockerコマンドの実行 \/ dockerhello-worldを実行しています ", 
"snippet" : "公式 hello-world DockerイメージはDockerHubでホストされます。 Docker Hubのイメージを使用する場合は、最初に認証する必要があります。 この例では、公式のスタートガイドに従って、 hello-world Dockerイメージ。この例では bitrise.yml ファイルには、イメージを実行できる簡単なビルド構成が表示されます。 --- format_version: 11 default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git trigger_map: - push_...", 
"body" : "公式 hello-world DockerイメージはDockerHubでホストされます。 Docker Hubのイメージを使用する場合は、最初に認証する必要があります。 この例では、公式のスタートガイドに従って、 hello-world Dockerイメージ。この例では bitrise.yml ファイルには、イメージを実行できる簡単なビルド構成が表示されます。 ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: \"*\"\n workflow: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n - git-clone@3.4.1: {}\n - script@1:\n title: docker run hello-world\n inputs:\n - content: |-\n #!\/bin\/bash\n # fail if any commands fails\n set -e\n # debug log\n set -x\n\n docker login -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN\n docker run hello-world " }, 
{ "title" : "Dockerfileの構築と実行 ", 
"url" : "インフラストラクチャー/独自のdockerイメージを使用する.html#dockerfileの構築と実行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ 独自のDockerイメージを使用する \/ スクリプトステップを使用したDockerコマンドの実行 \/ Dockerfileの構築と実行 ", 
"snippet" : "あなたはあなた自身を使うことができます Dockerfile Docker環境を定義するためのリポジトリ内のBitriseで： --- format_version: 11 default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git trigger_map: - push_branch: \"*\" workflow: primary - pull_request_source_branch: \"*\" workflow: primary workflows: primary: steps: - activat...", 
"body" : "あなたはあなた自身を使うことができます Dockerfile Docker環境を定義するためのリポジトリ内のBitriseで： ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: \"*\"\n workflow: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n - git-clone@3.4.1: {}\n - script@1:\n title: docker run\n inputs:\n - content: |-\n #!\/bin\/bash\n # fail if any commands fails\n set -e\n # debug log\n set -x\n\n docker build -t bitrise-minimal-sample .\n docker run --rm bitrise-minimal-sample このワークフローは次のようになります。 リポジトリのクローンを作成します。 走る docker build -t bitrise-minimal-sample . と docker run --rm bitrise-minimal-sample リポジトリのルートにあります。 あなたが持っている場合 Dockerfile リポジトリのルートで次のようになります。 FROM alpine:3.3\n\nCMD cat \/etc\/alpine-release 出力は次のようになります。 +------------------------------------------------------------------------------+\n| (2) docker run hello-world |\n+------------------------------------------------------------------------------+\n| id: script |\n| version: 1.1.3 |\n| collection: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git |\n| toolkit: bash |\n| time: 2016-11-21T14:28:23Z |\n+------------------------------------------------------------------------------+\n| |\n+ docker build -t bitrise-minimal-sample .\nSending build context to Docker daemon 69.12 kB\n\nStep 1 : FROM alpine:3.3\n3.3: Pulling from library\/alpine\n985c5f84712b: Pulling fs layer\n985c5f84712b: Verifying Checksum\n985c5f84712b: Download complete\n985c5f84712b: Pull complete\nDigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nStatus: Downloaded newer image for alpine:3.3\n ---> 6c2aa2137d97\nStep 2 : CMD cat \/etc\/alpine-release\n ---> Running in 507cfb961cc7\n ---> 02a0da3ac697\nRemoving intermediate container 507cfb961cc7\nSuccessfully built 02a0da3ac697\n+ docker run --rm bitrise-minimal-sample\n3.3.3\n| |\n+---+---------------------------------------------------------------+----------+\n| ✓ | docker run hello-world | 4.24 sec |\n+---+---------------------------------------------------------------+----------+ " }, 
{ "title" : "docker-composeを使用する ", 
"url" : "インフラストラクチャー/独自のdockerイメージを使用する.html#docker-composeを使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ 独自のDockerイメージを使用する \/ スクリプトステップを使用したDockerコマンドの実行 \/ docker-composeを使用する ", 
"snippet" : "を使用して、独自のDockerファイルからDockerイメージを実行することもできます。 docker-compose 指図。と compose, アプリケーションのサービスを構成してから、1つのコマンドですべてのサービスを開始できます。 たとえば、 docker-compose.yml リポジトリルート（Dockerfileがある場所）で次のようになります。 version: '2' services: sample-app: build: . これで、単一のdocker-compose呼び出しでサービスを実行できます。 脚本 ステップ： - script@1.1.3: title: doc...", 
"body" : "を使用して、独自のDockerファイルからDockerイメージを実行することもできます。 docker-compose 指図。と compose, アプリケーションのサービスを構成してから、1つのコマンドですべてのサービスを開始できます。 たとえば、 docker-compose.yml リポジトリルート（Dockerfileがある場所）で次のようになります。 version: '2'\nservices:\n sample-app:\n build: . これで、単一のdocker-compose呼び出しでサービスを実行できます。 脚本 ステップ： - script@1.1.3:\n title: docker run\n inputs:\n - content: |-\n #!\/bin\/bash\n # fail if any commands fails\n set -e\n # debug log\n set -x\n docker-compose run --rm sample-app Docker composeは、イメージを自動的にビルドして実行します。指定する必要はありません -t 以来のタグ services 名前はによって使用されます docker-compose 画像に自動的にタグを付けます。 " }, 
{ "title" : "DockerHubのカスタムDockerイメージを使用する ", 
"url" : "インフラストラクチャー/独自のdockerイメージを使用する.html#dockerhubのカスタムdockerイメージを使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ 独自のDockerイメージを使用する \/ DockerHubのカスタムDockerイメージを使用する ", 
"snippet" : "ご覧のとおり、DockerHubから取得したDockerイメージでBitriseを使用できます dockerhello-worldを実行しています 例。ただし、匿名ユーザー向けの無料プランでは、DockerHubで許可されるイメージプルの数は限られています。ワークフローエディターでイメージを設定した場合、認証は実行されません。プルは、BitriseパブリックIPアドレスからの匿名ユーザーによるプルになります。多くのユーザーがこのオプションを選択しているため、Docker Hubのレート制限は、一部のユーザーがビルドを開始できないことを意味します。 回避策は簡単です。スクリプトステップを使用して...", 
"body" : "ご覧のとおり、DockerHubから取得したDockerイメージでBitriseを使用できます dockerhello-worldを実行しています 例。ただし、匿名ユーザー向けの無料プランでは、DockerHubで許可されるイメージプルの数は限られています。ワークフローエディターでイメージを設定した場合、認証は実行されません。プルは、BitriseパブリックIPアドレスからの匿名ユーザーによるプルになります。多くのユーザーがこのオプションを選択しているため、Docker Hubのレート制限は、一部のユーザーがビルドを開始できないことを意味します。 回避策は簡単です。スクリプトステップを使用して独自のDockerHubアカウントで自分自身を認証し、ステップを使用してDockerHubからイメージをプルする必要があります。そうするために： DockerHubでパーソナルアクセストークンを作成します。 これは、パスワードの代わりにあなたを認証するために使用されます。 Bitriseで、2つ作成します 秘密の環境変数 ：1つはDocker Hubユーザー名用で、もう1つはパーソナルアクセストークン用です。 この例では、 DOCKERHUB_USER DockerHubのユーザー名と DOCKERHUB_TOKEN 。 使用 docker login のコマンド 脚本 シークレット環境変数を引数として認証する手順： - script@1.1.3: \n inputs: \n - content: | \n docker login -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN\n 使用 docker run のコマンド スクリプトステップ 選択したDockerイメージを実行します。 この例では、Dockerの公式です hello-world 画像。 hello-worldを、DockerHubから使用する任意のイメージに置き換えることができます。 - script@1.1.3: \n inputs: \n - content: | \n docker login -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN\n docker run hello-world " }, 
{ "title" : "ワークフローエディターでのカスタムDockerイメージの設定 ", 
"url" : "インフラストラクチャー/独自のdockerイメージを使用する.html#ワークフローエディターでのカスタムdockerイメージの設定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ 独自のDockerイメージを使用する \/ ワークフローエディターでのカスタムDockerイメージの設定 ", 
"snippet" : "bitrise.ioのワークフローエディターで、カスタムDockerイメージへのパスを設定するオプションがあります。 カスタムDocker環境でビルドを実行する場合は、ベースのDockerイメージの1つに基づいて独自のDockerイメージを作成することを強くお勧めします。私たちのイメージには、すべての基本ツールがプリインストールされており、標準のBitriseディレクトリが作成され、環境（ $BITRISE_DEPLOY_DIR ）設定され、ビルド仮想マシンに事前にキャッシュされます。 ただし、独自のDockerイメージを作成する場合は、このガイドを最初から最後までお読みください。 カスタムA...", 
"body" : "bitrise.ioのワークフローエディターで、カスタムDockerイメージへのパスを設定するオプションがあります。 カスタムDocker環境でビルドを実行する場合は、ベースのDockerイメージの1つに基づいて独自のDockerイメージを作成することを強くお勧めします。私たちのイメージには、すべての基本ツールがプリインストールされており、標準のBitriseディレクトリが作成され、環境（ $BITRISE_DEPLOY_DIR ）設定され、ビルド仮想マシンに事前にキャッシュされます。 ただし、独自のDockerイメージを作成する場合は、このガイドを最初から最後までお読みください。 カスタムAndroidDockerイメージ 独自のAndroidDockerイメージの作成と維持には、かなりの時間がかかる可能性があります。追加のツールをいくつかインストールするだけでよい場合は、たとえば、 脚本 代わりにステップ！詳細については、 追加のツールをインストールする ガイド。本当に必要な場合にのみ、独自のAndroidDockerイメージを使用する必要があります。 DockerHubでホストされているイメージを使用する Docker Hubでホストされているイメージを使用する場合は、イメージパスを設定しないでください。 スタック ワークフローエディタのタブ！使う 脚本 代わりに、Docker Hubアカウントを認証し、選択したイメージを実行します。 DockerHubのカスタムDockerイメージを使用する" }, 
{ "title" : "Bitrise画像から独自の画像を作成する ", 
"url" : "インフラストラクチャー/独自のdockerイメージを使用する.html#bitrise画像から独自の画像を作成する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ 独自のDockerイメージを使用する \/ ワークフローエディターでのカスタムDockerイメージの設定 \/ Bitrise画像から独自の画像を作成する ", 
"snippet" : "4つの異なるDockerイメージタイプを利用できます。必要に応じて、これらのいずれかに基づいて独自のイメージを作成できます。 DockerHubでホストされているイメージを使用する Docker Hubでホストされているイメージを使用する場合は、イメージパスを設定しないでください。 スタック ワークフローエディタのタブ！使う 脚本 代わりに、Docker Hubアカウントを認証し、選択したイメージを実行します。 DockerHubのカスタムDockerイメージを使用するBitriseDockerイメージタイプ 画像タイプ 説明 GitHubリンク quay.ioリンク Bitriseベースイメ...", 
"body" : "4つの異なるDockerイメージタイプを利用できます。必要に応じて、これらのいずれかに基づいて独自のイメージを作成できます。 DockerHubでホストされているイメージを使用する Docker Hubでホストされているイメージを使用する場合は、イメージパスを設定しないでください。 スタック ワークフローエディタのタブ！使う 脚本 代わりに、Docker Hubアカウントを認証し、選択したイメージを実行します。 DockerHubのカスタムDockerイメージを使用するBitriseDockerイメージタイプ 画像タイプ 説明 GitHubリンク quay.ioリンク Bitriseベースイメージ 特定のツールがインストールされていない最低限のBitriseイメージ。 https:\/\/github.com\/bitrise-docker\/bitrise-base https:\/\/quay.io\/repository\/bitriseio\/bitrise-base Androidベースイメージ ベア-Android固有のツールと環境を備えた最小限のベースイメージ。 https:\/\/github.com\/bitrise-docker\/android https:\/\/quay.io\/repository\/bitriseio\/android AndroidNDKイメージ AndroidNDKと環境がプリインストールされたAndroidベースイメージに基づいて構築されています。 https:\/\/github.com\/bitrise-docker\/android-ndk https:\/\/quay.io\/repository\/bitriseio\/android-ndk AndroidNDKLTSイメージ AndroidNDKDockerイメージのLTS「ピン」。 https:\/\/github.com\/bitrise-docker\/android-ndk-lts https:\/\/quay.io\/repository\/bitriseio\/android-ndk-lts 利用可能な画像の1つに基づいて独自の画像を作成するには、ベース画像を一番上に指定します Dockerfile とともに FROM 命令と画像のquay.ioID。この例では、最新バージョンのBitriseベースイメージを使用します。 FROM quay.io\/bitriseio\/docker-bitrise-base:latest ベースイメージとして使用するイメージのquay.ioIDを使用する必要があります。例えば、 quay.io\/bitriseio\/android 、 quay.io\/bitriseio\/android-ndk 、 quay.io\/bitriseio\/android-ndk-lts 、 また quay.io\/bitriseio\/bitrise-base 。 使用しないでください alpha ビルド用の画像 私たちが持っているすべてのDockerイメージについて quay.io 、私たちは alpha タグ付きバージョンも。 NS alpha それらは頻繁に再構築され、事前に準備されていません bitrise.io 、だからあなたはそれらを避けるべきです。 " }, 
{ "title" : "ビルドで作成したDockerイメージを使用する ", 
"url" : "インフラストラクチャー/独自のdockerイメージを使用する.html#ビルドで作成したdockerイメージを使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ 独自のDockerイメージを使用する \/ ワークフローエディターでのカスタムDockerイメージの設定 \/ ビルドで作成したDockerイメージを使用する ", 
"snippet" : "イメージをでプルできる場合は、ワークフローエディターで独自のDockerイメージを設定できます。 docker pull 指図 。そうするために： DockerHubでホストされているイメージを使用する Docker Hubでホストされているイメージを使用する場合は、イメージパスを設定しないでください。 スタック ワークフローエディタのタブ！使う 脚本 代わりに、Docker Hubアカウントを認証し、選択したイメージを実行します。 DockerHubのカスタムDockerイメージを使用するワークフローエディタに移動します。 クリック スタック タブ。 アプリのIDをコピーして貼り付けます。例...", 
"body" : "イメージをでプルできる場合は、ワークフローエディターで独自のDockerイメージを設定できます。 docker pull 指図 。そうするために： DockerHubでホストされているイメージを使用する Docker Hubでホストされているイメージを使用する場合は、イメージパスを設定しないでください。 スタック ワークフローエディタのタブ！使う 脚本 代わりに、Docker Hubアカウントを認証し、選択したイメージを実行します。 DockerHubのカスタムDockerイメージを使用するワークフローエディタに移動します。 クリック スタック タブ。 アプリのIDをコピーして貼り付けます。例えば、 quay.io\/bitriseio\/bitrise-base 。 クリック 保存する 右上隅にあります。 これで、独自のイメージを使用してビルドを実行できるようになります。 bitrise.io 。 " }, 
{ "title" : "Dockerでローカルにビルドを実行する ", 
"url" : "インフラストラクチャー/dockerでローカルにビルドを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ Dockerでローカルにビルドを実行する ", 
"snippet" : "DockerでBitriseビルドを自分のマシンで実行できます。Docker、Bitrise CLI、およびBitriseDockerイメージが必要です。 Linuxスタックビルドをローカルで実行できるようにするには、次のものが必要です。 docker ： Linuxの場合は、 公式インストール手順 。 Macの場合、Docker forMacを使用できます。これが最も簡単な開始方法です。 このガイドでは、 このBitriseAndroidサンプルプロジェクト 。 前方の大きな画像 公式のBitriseDockerイメージは、さまざまなプレインストールされたツールが含まれているため、非常に大き...", 
"body" : "DockerでBitriseビルドを自分のマシンで実行できます。Docker、Bitrise CLI、およびBitriseDockerイメージが必要です。 Linuxスタックビルドをローカルで実行できるようにするには、次のものが必要です。 docker ： Linuxの場合は、 公式インストール手順 。 Macの場合、Docker forMacを使用できます。これが最も簡単な開始方法です。 このガイドでは、 このBitriseAndroidサンプルプロジェクト 。 前方の大きな画像 公式のBitriseDockerイメージは、さまざまなプレインストールされたツールが含まれているため、非常に大きくなります。少なくとも20〜25GBの無料ディスクスペースが必要です。 あなたが精通していない場合 Bitrise CLI 、最初に試してみてください。何を知っていれば、CLIをマスターする必要はありません bitrise run WORKFLOW そうです、それはこのチュートリアルには十分なはずです。 " }, 
{ "title" : "quay.ioからDockerイメージをダウンロードする ", 
"url" : "インフラストラクチャー/dockerでローカルにビルドを実行する.html#quay-ioからdockerイメージをダウンロードする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ Dockerでローカルにビルドを実行する \/ quay.ioからDockerイメージをダウンロードする ", 
"snippet" : "インストール docker 。 あなたがあなたを持っていることを確認してください bitrise.yml リポジトリ内。 コミットする必要はありませんが、ファイルはリポジトリのルートディレクトリに存在する必要があります。 cd Mac \/ Linuxのリポジトリのディレクトリに移動します。 レジストリからイメージをプルします。 docker pull quay.io\/bitriseio\/android:latest 次のコマンドを実行します。 docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volu...", 
"body" : "インストール docker 。 あなたがあなたを持っていることを確認してください bitrise.yml リポジトリ内。 コミットする必要はありませんが、ファイルはリポジトリのルートディレクトリに存在する必要があります。 cd Mac \/ Linuxのリポジトリのディレクトリに移動します。 レジストリからイメージをプルします。 docker pull quay.io\/bitriseio\/android:latest\n 次のコマンドを実行します。 docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW` コンテナに飛び込んで内部を実験したい場合は、交換できます --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW と -it quay.io\/bitriseio\/android:latest bash コンテナ内でインタラクティブなbashシェルを開始します。例えば： docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android:latest bash\n 一般に、プロジェクトがAndroidプロジェクトであるが、Android NDKを使用していない場合は、貴重なディスクスペースを保持するために、 quay.io\/bitriseio\/android Dockerイメージ。他の公式のBitriseDocker画像は 岸壁のページ 。この例では、 quay.io\/bitriseio\/android 一。 からDockerイメージをダウンロードします 岸壁 ： docker pull quay.io\/bitriseio\/android:latest`\n この画像は10GBを超えるため、これにはかなりの時間がかかる可能性があることに注意してください。ダウンロードが失敗またはハングした場合は、同じコマンドを再度実行することで、いつでもダウンロードを再開できます。 Bitriseビルド構成をダウンロードします（ bitrise.yml ）リポジトリのルートディレクトリに移動します。 あなたはできる ダウンロード あなたのプロジェクトの bitrise.yml から bitrise.yml ワークフローエディタのタブ bitrise.io 。 ターミナル\/コマンドラインで（ cd ）リポジトリのルートディレクトリ。あなたの bitrise.yml この場所にあります。 問題を再現しようとする場合は、 git clone リポジトリを新しいディレクトリに配置します。これにより、ディレクトリには、リポジトリにコミットされたファイルのみが含まれます。通常の作業ディレクトリでコマンドを実行しようとすると、再現性の問題が頻繁に発生します。このディレクトリには、リポジトリにコミットされていないファイルが含まれている可能性があります。 .gitignore 。 " }, 
{ "title" : "ビルドの実行 ", 
"url" : "インフラストラクチャー/dockerでローカルにビルドを実行する.html#ビルドの実行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インフラストラクチャー \/ Dockerでローカルにビルドを実行する \/ ビルドの実行 ", 
"snippet" : "次のコマンドを使用してビルドを実行します。 docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW と -it quay.io\/bitriseio\/android:lates...", 
"body" : "次のコマンドを使用してビルドを実行します。 docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW と -it quay.io\/bitriseio\/android:latest bash コンテナ内でインタラクティブなbashシェルを開始します。 例えば： docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android:latest bash`. このコマンドは、現在のディレクトリ（リポジトリのディレクトリ）を共有ボリュームとしてDockerコンテナと共有し、コンテナ内のパスで使用できるようにします。 \/bitrise\/src 。 この後、あなたは実行することができます bitrise run WORKFLOW 、コンテナ内でワークフローを実行します。コンテナを終了するには、実行するだけです exit 。 交換することを忘れないでください WORKFLOW ワークフローの実際のIDを使用して bitrise.yml 、のようなもので primary ！ NS --env CI=false フラグは環境変数を設定します CI に false -これにより、BitriseCLIはCI環境でのみ実行する意味のある特定の手順をスキップします。たとえば、 Git Clone ステップ-あなたはすでにあなたのコードを持っているので、Dockerコンテナ内でそれを再びgitクローンする必要はありません（それが私たちがコードディレクトリをとして共有した理由です --volume ）。 NS --rm フラグは、Dockerにコンテナの後にコンテナを破棄するように指示します docker run コマンドが終了します。これは、コマンドを再度実行した場合、 docker run .. コマンドは、共有に保存されているファイルです --volume （リポジトリのディレクトリ内）。一時ファイルまたはその他の場所に生成された他のすべてのファイルは破棄されるか、保持されません。 ビルドが失敗した後にコンテナをデバッグする場合は、自由に削除してください --rm フラグを立て、既存のDockerコンテナに接続する方法についてのDockerチュートリアルを確認してください。コマンドを再度実行するだけでは同じコンテナは使用されませんが、新しいコンテナが作成されることに注意してください。 NS --privileged フラグを使用すると、Dockerコンテナーからホストのアクセス制御が可能になるため、使用するDockerイメージを信頼しない限り、このフラグを使用しないでください。このフラグは、たとえばVPNを機能させる（ホストのネットワーク構成を変更する）ために必要です。 NS --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" フラグは、コンテナーのホストからDockerソケットを公開します-これは、コンテナー内から他のDockerコンテナーを実行する場合、またはいずれかを実行する場合に必要です。 docker ビルド中\/コンテナ内のコマンド。 " }, 
{ "title" : "アカウント ", 
"url" : "アカウント.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント ", 
"snippet" : "Bitriseにサインアップすると、独自の個人ユーザーアカウントが作成されます。ユーザーアカウントを持っているだけでは、アプリを追加してビルドを実行するのに十分ではありません。そのためには、ワークスペースの一部である必要があります。 あなたのBitriseアカウントはあなたから管理されています アカウントページ 。このページから、次のことができます。 ユーザー名、メールアドレス、パスワード、アバターなどのプロフィールを編集します。 GitプロバイダーやAppleサービスなどの他のサービスへの接続を設定します。 二要素認証を有効にします。 自分が参加しているすべてのワークスペースを検索します。 ...", 
"body" : "Bitriseにサインアップすると、独自の個人ユーザーアカウントが作成されます。ユーザーアカウントを持っているだけでは、アプリを追加してビルドを実行するのに十分ではありません。そのためには、ワークスペースの一部である必要があります。 あなたのBitriseアカウントはあなたから管理されています アカウントページ 。このページから、次のことができます。 ユーザー名、メールアドレス、パスワード、アバターなどのプロフィールを編集します。 GitプロバイダーやAppleサービスなどの他のサービスへの接続を設定します。 二要素認証を有効にします。 自分が参加しているすべてのワークスペースを検索します。 BitriseAPIへのアクセスに使用されるパーソナルアクセストークンを作成および管理します。 テストデバイスを登録します。 まだビルドを実行できません！ Bitriseにサインアップすると、独自の個人ユーザーアカウントが作成されます。ユーザーアカウントを持っているだけでは、アプリを追加してビルドを実行するのに十分ではありません。 Bitriseで作業できるようにするには、次の3つのオプションの少なくとも1つが必要です。 ワークスペースの作成。 既存のワークスペースに招待されます。 アプリのチームへの外部貢献者として追加されます。 " }, 
{ "title" : "サービスへの接続 ", 
"url" : "アカウント/サービスへの接続.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 ", 
"snippet" : "GitHub \/ GitLab\/BitbucketアカウントなどのGitプロバイダーサービスをBitriseアカウントに接続できます。 Bitriseが提供するすべての機能を使用するには、Gitプロバイダーなどのサービスまたは使用しているAppleサービスのいずれかに接続することをお勧めします。 ガイドでは、GitHub \/ GitLab \/ BitbucketアカウントをBitriseアカウントに接続する方法（または、ワークスペースで使用されている場合は、セルフホストのGitLabインスタンスをBitriseアカウントに接続する方法）について説明しています。特定のGitプロバイダーからBit...", 
"body" : "GitHub \/ GitLab\/BitbucketアカウントなどのGitプロバイダーサービスをBitriseアカウントに接続できます。 Bitriseが提供するすべての機能を使用するには、Gitプロバイダーなどのサービスまたは使用しているAppleサービスのいずれかに接続することをお勧めします。 ガイドでは、GitHub \/ GitLab \/ BitbucketアカウントをBitriseアカウントに接続する方法（または、ワークスペースで使用されている場合は、セルフホストのGitLabインスタンスをBitriseアカウントに接続する方法）について説明しています。特定のGitプロバイダーからBitriseに接続できるアカウントは1つだけです。いつでも別のGitプロバイダーから新しいものを切断して接続できます。 また、BitriseをApp StoreConnectやAppleDeveloperPortalなどのAppleサービスに接続するために使用できる認証方法についても学習します。 Apple IDとパスワードを使用する場合でも、APIキー認証を使用する場合でも、私たちはあなたをカバーします。 " }, 
{ "title" : "サービスクレデンシャルユーザー ", 
"url" : "アカウント/サービスへの接続/サービスクレデンシャルユーザー.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ サービスクレデンシャルユーザー ", 
"snippet" : "サービスクレデンシャルは、接続されたGitプロバイダーアカウント（GitHub、GitLab、またはBitbucket）を使用して、Bitriseビルドの目的でこれらのサービスにアクセスするユーザーです。 サービスクレデンシャルは、接続されたGitプロバイダーアカウント（GitHub、GitLab、またはBitbucket）を使用して、Bitriseビルドの目的でこれらのサービスにアクセスするユーザーです。 サービスクレデンシャルユーザーを次のように設定する必要があります。 送信 ステータスレポートの作成 Gitプロバイダーに戻ります。 使用 選択的ビルド 自動Bitriseビルドをトリガーす...", 
"body" : "サービスクレデンシャルは、接続されたGitプロバイダーアカウント（GitHub、GitLab、またはBitbucket）を使用して、Bitriseビルドの目的でこれらのサービスにアクセスするユーザーです。 サービスクレデンシャルは、接続されたGitプロバイダーアカウント（GitHub、GitLab、またはBitbucket）を使用して、Bitriseビルドの目的でこれらのサービスにアクセスするユーザーです。 サービスクレデンシャルユーザーを次のように設定する必要があります。 送信 ステータスレポートの作成 Gitプロバイダーに戻ります。 使用 選択的ビルド 自動Bitriseビルドをトリガーするために変更する必要があるリポジトリ内の特定のファイルまたはディレクトリを指定できる機能。 を保存する bitrise.yml リポジトリ内のファイル 。 デフォルトでは、アプリをBitriseに追加したユーザーがサービス資格情報ユーザーとして設定されます。変更した場合でも、常にアプリのリポジトリにアクセスできるユーザーである必要があります。 サービスクレデンシャルユーザーが必須ではありません。次を使用できます。 サービスクレデンシャルユーザーなし 持っていないように設定します。ビルドを実行してビルドを自動的にトリガーすることはできますが、BitriseはビルドステータスレポートをGitプロバイダーに送信できず、選択的ビルド機能を使用したり、ビルドを保存したりすることはできません。 bitrise.yml リポジトリ内のファイル。 " }, 
{ "title" : "サービスクレデンシャルユーザーの変更 ", 
"url" : "アカウント/サービスへの接続/サービスクレデンシャルユーザー.html#サービスクレデンシャルユーザーの変更", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ サービスクレデンシャルユーザー \/ サービスクレデンシャルユーザーの変更 ", 
"snippet" : "サービスクレデンシャルユーザーはいつでも変更できますが、Bitriseユーザーが他のユーザーをサービスクレデンシャルユーザーとして設定することはできません。 役割の要件 サービスクレデンシャルユーザーを変更するには、 管理者 アプリのチームでの役割。 アプリで別のユーザーのクレデンシャルを使用する場合、そのユーザーはBitriseにログインし、次の手順を実行する必要があります。 ワークスペースのダッシュボードに移動します。 サービスクレデンシャルユーザーを変更するアプリを選択します クリック アプリの設定 。 左側で、 統合 メニューオプションから。 [サービスクレデンシャルユーザー]の部分ま...", 
"body" : "サービスクレデンシャルユーザーはいつでも変更できますが、Bitriseユーザーが他のユーザーをサービスクレデンシャルユーザーとして設定することはできません。 役割の要件 サービスクレデンシャルユーザーを変更するには、 管理者 アプリのチームでの役割。 アプリで別のユーザーのクレデンシャルを使用する場合、そのユーザーはBitriseにログインし、次の手順を実行する必要があります。 ワークスペースのダッシュボードに移動します。 サービスクレデンシャルユーザーを変更するアプリを選択します クリック アプリの設定 。 左側で、 統合 メニューオプションから。 [サービスクレデンシャルユーザー]の部分まで下にスクロールします。 クリック YOUR_USERNAMEに変更します 。 確認するには、をクリックします サービスクレデンシャルユーザーを設定する 。 " }, 
{ "title" : "GitHub \/ GitLab \/ BitbucketアカウントをBitriseに接続する ", 
"url" : "アカウント/サービスへの接続/github---gitlab---bitbucketアカウントをbitriseに接続する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ GitHub \/ GitLab \/ BitbucketアカウントをBitriseに接続する ", 
"snippet" : "自動Webhook登録など、Bitriseが提供するすべての機能を最大限に活用するには、GitHub \/ GitLab\/BitbucketアカウントをBitriseアカウントに接続する必要があります。 GitHub\/GitLab\/Bitbucket アカウントを Bitrise アカウントに接続すると、OAuth アプリケーションが Git プロバイダーに登録され、アカウントに属するリポジトリへの Bitrise アクセスが許可されます。これにより、Bitrise は次のことが可能になります。 利用可能なリポジトリを一覧表示する 新しいアプリの追加 . Webhook を自動登録する . We...", 
"body" : "自動Webhook登録など、Bitriseが提供するすべての機能を最大限に活用するには、GitHub \/ GitLab\/BitbucketアカウントをBitriseアカウントに接続する必要があります。 GitHub\/GitLab\/Bitbucket アカウントを Bitrise アカウントに接続すると、OAuth アプリケーションが Git プロバイダーに登録され、アカウントに属するリポジトリへの Bitrise アクセスが許可されます。これにより、Bitrise は次のことが可能になります。 利用可能なリポジトリを一覧表示する 新しいアプリの追加 . Webhook を自動登録する . Webhook により設定が可能 ビルドトリガー . SSH鍵の自動登録 . 次の 2 つの方法のいずれかで、3 つの Git プロバイダー アカウントすべてを Bitrise アカウントに接続できます。 新規追加時のアカウント連携 アプリ . からアカウントを接続する プロファイル設定 ページ。 Gitプロバイダーごとに1つのアカウント 同じGitプロバイダーの2つのアカウント（たとえば、2つのGitHubアカウント）をBitriseに接続することはできないことに注意してください。 1 つの Git プロバイダー アカウントの接続は最終的なものではありません。いつでもアカウントを切断して別のアカウントに接続できます。 間違った Git アカウントを Bitrise にリンクしました . " }, 
{ "title" : "アプリを追加するときにGitプロバイダーアカウントを接続する ", 
"url" : "アカウント/サービスへの接続/github---gitlab---bitbucketアカウントをbitriseに接続する.html#アプリを追加するときにgitプロバイダーアカウントを接続する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ GitHub \/ GitLab \/ BitbucketアカウントをBitriseに接続する \/ アプリを追加するときにGitプロバイダーアカウントを接続する ", 
"snippet" : "あなたにログインします bitrise.io アカウント。 クリック + トップメニューバーの記号を選択し、 新しいアプリを追加する 。 に 新しいアプリを作成する ページで、アカウントを選択し、アプリのプライバシー設定を設定します。 アプリのリポジトリのGitサービスプロバイダーを選択します。そのプロバイダーのアカウントがBitriseアカウントに接続されていない場合、UIに接続するオプションが表示されます。 クリック GitHub \/ GitLab\/Bitbucketを接続します 。これにより、Gitプロバイダーのログインページに移動します。 Gitプロバイダーアカウントにログインします。...", 
"body" : "あなたにログインします bitrise.io アカウント。 クリック + トップメニューバーの記号を選択し、 新しいアプリを追加する 。 に 新しいアプリを作成する ページで、アカウントを選択し、アプリのプライバシー設定を設定します。 アプリのリポジトリのGitサービスプロバイダーを選択します。そのプロバイダーのアカウントがBitriseアカウントに接続されていない場合、UIに接続するオプションが表示されます。 クリック GitHub \/ GitLab\/Bitbucketを接続します 。これにより、Gitプロバイダーのログインページに移動します。 Gitプロバイダーアカウントにログインします。 bitrise.ioを承認するように求められるはずです-やってください！成功した場合は、Bitriseにリダイレクトされ、アカウントが正常にリンクされたことを通知するポップアップメッセージが表示されます。クリック わかった 。 " }, 
{ "title" : "プロファイル設定ページからGitプロバイダーアカウントを接続する ", 
"url" : "アカウント/サービスへの接続/github---gitlab---bitbucketアカウントをbitriseに接続する.html#プロファイル設定ページからgitプロバイダーアカウントを接続する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ GitHub \/ GitLab \/ BitbucketアカウントをBitriseに接続する \/ プロファイル設定ページからGitプロバイダーアカウントを接続する ", 
"snippet" : "右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側のメニューバーで、接続するGitプロバイダーの名前の横にあるトグルをクリックします。 Gitプロバイダーアカウントにログインします。 bitrise.ioを承認するように求められるはずです-やってください！成功した場合は、Bitriseにリダイレクトされ、アカウントが正常にリンクされたことを通知するポップアップメッセージが表示されます。クリック わかった 。...", 
"body" : "右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側のメニューバーで、接続するGitプロバイダーの名前の横にあるトグルをクリックします。 Gitプロバイダーアカウントにログインします。 bitrise.ioを承認するように求められるはずです-やってください！成功した場合は、Bitriseにリダイレクトされ、アカウントが正常にリンクされたことを通知するポップアップメッセージが表示されます。クリック わかった 。 " }, 
{ "title" : "Gitプロバイダーアカウントの切断 ", 
"url" : "アカウント/サービスへの接続/github---gitlab---bitbucketアカウントをbitriseに接続する.html#gitプロバイダーアカウントの切断", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ GitHub \/ GitLab \/ BitbucketアカウントをBitriseに接続する \/ Gitプロバイダーアカウントの切断 ", 
"snippet" : "右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側のメニューバーで、切断するGitプロバイダーの名前の横にあるトグルをクリックします。...", 
"body" : "右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側のメニューバーで、切断するGitプロバイダーの名前の横にあるトグルをクリックします。 " }, 
{ "title" : "セルフホストのGitLabインスタンスを接続する ", 
"url" : "アカウント/サービスへの接続/セルフホストのgitlabインスタンスを接続する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ セルフホストのGitLabインスタンスを接続する ", 
"snippet" : "ワークスペースの場合、Bitriseは自己ホスト型GitLabインスタンスへの接続をサポートしています。完了したら、プライベートにホストされているリポジトリからBitriseにアプリを追加できます。 ワークスペースの場合、BitriseはセルフホストのGitLabインスタンスへの接続をサポートしています。接続は簡単で、接続が完了すると、プライベートにホストされているリポジトリからBitriseにアプリを追加できます。公開されているリポジトリで慣れ親しんだすべての機能が利用可能になります！ セルフホストのGitLabリポジトリにあるアプリのセットアップは非常に簡単です。BitriseはGitLa...", 
"body" : "ワークスペースの場合、Bitriseは自己ホスト型GitLabインスタンスへの接続をサポートしています。完了したら、プライベートにホストされているリポジトリからBitriseにアプリを追加できます。 ワークスペースの場合、BitriseはセルフホストのGitLabインスタンスへの接続をサポートしています。接続は簡単で、接続が完了すると、プライベートにホストされているリポジトリからBitriseにアプリを追加できます。公開されているリポジトリで慣れ親しんだすべての機能が利用可能になります！ セルフホストのGitLabリポジトリにあるアプリのセットアップは非常に簡単です。BitriseはGitLabインスタンス全体のアプリケーションとして承認され、次に アプリケーションID そしてその ひみつ BitriseOAuthアプリケーションに属する値を上のワークスペースに追加する必要があります bitrise.io 。 " }, 
{ "title" : "GitLab接続の構成 ", 
"url" : "アカウント/サービスへの接続/セルフホストのgitlabインスタンスを接続する.html#gitlab接続の構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ セルフホストのGitLabインスタンスを接続する \/ GitLab接続の構成 ", 
"snippet" : "BitriseでプライベートにホストされているGitLabリポジトリにアクセスするには、GitLabアカウントで新しいOAuthアプリケーションを作成し、サーバーにアクセスするための適切な資格情報を割り当てる必要があります。 公的に解決可能なIPアドレス セルフホストのGitLabインスタンスには、パブリックに解決可能なIPアドレスが必要です。そうでない場合、Bitriseはそれに接続できません。 を使用してGitLabインスタンスにログインします 根 特権。 Bitriseに接続する場合 root権限なし 、ワークスペースの他のチームメンバーは GitLabインスタンスのリポジトリにアクセス...", 
"body" : "BitriseでプライベートにホストされているGitLabリポジトリにアクセスするには、GitLabアカウントで新しいOAuthアプリケーションを作成し、サーバーにアクセスするための適切な資格情報を割り当てる必要があります。 公的に解決可能なIPアドレス セルフホストのGitLabインスタンスには、パブリックに解決可能なIPアドレスが必要です。そうでない場合、Bitriseはそれに接続できません。 を使用してGitLabインスタンスにログインします 根 特権。 Bitriseに接続する場合 root権限なし 、ワークスペースの他のチームメンバーは GitLabインスタンスのリポジトリにアクセスできません 。 上部のメニューバーにある小さなレンチアイコンをクリックして、管理領域に移動します。 左側のメニューバーで、 アプリケーション 、次にクリックします 新しいアプリ 。 の中に 名前 フィールドに、アプリケーションを明確に識別する名前を入力します。簡単にするために、お勧めします Bitrise 。 の中に URIをリダイレクトする フィールドに入力します https:\/\/app.bitrise.io\/users\/auth\/gitlab\/callback 。 の中に スコープ メニュー、チェック api 。 をセットする 信頼 オプション いいえ 。 新しく作成されたアプリが機密情報として構成されている場合、Bitriseはそのアプリにアクセスできません。 クリック 送信 。次のページで、 アプリケーションID と ひみつ 。でGitLabインスタンスに接続するには両方が必要です bitrise.io 。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 を選択 接続されたアカウント 左側のメニューバーのオプション。 セルフホストのGitLabクレデンシャルを追加します。 アプリID ひみつ セルフホストURL 完了です！これで、Bitriseを使用してプライベートにホストされているリポジトリにアクセスできるようになりました。 " }, 
{ "title" : "セルフホストのGitLabリポジトリから新しいアプリを追加する ", 
"url" : "アカウント/サービスへの接続/セルフホストのgitlabインスタンスを接続する.html#セルフホストのgitlabリポジトリから新しいアプリを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ セルフホストのGitLabインスタンスを接続する \/ セルフホストのGitLabリポジトリから新しいアプリを追加する ", 
"snippet" : "ログインする bitrise.io をクリックします + トップメニューバーの記号を選択し、 WebUIに新しいアプリを追加する オプションから。 アプリの所有者となるワークスペースを選択します。 Gitプロバイダーを選択するように求められたら、 GitLab 。を選択 セルフホスト オプション。 セルフホストのGitLabクレデンシャルを以前にワークスペースに提供したことがない場合は、この段階で提供できます。 クリック 接続 。 接続したら、通常どおり続行します。 新しいアプリを追加する...", 
"body" : "ログインする bitrise.io をクリックします + トップメニューバーの記号を選択し、 WebUIに新しいアプリを追加する オプションから。 アプリの所有者となるワークスペースを選択します。 Gitプロバイダーを選択するように求められたら、 GitLab 。を選択 セルフホスト オプション。 セルフホストのGitLabクレデンシャルを以前にワークスペースに提供したことがない場合は、この段階で提供できます。 クリック 接続 。 接続したら、通常どおり続行します。 新しいアプリを追加する" }, 
{ "title" : "Appleサービス接続 ", 
"url" : "アカウント/サービスへの接続/appleサービス接続.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Appleサービス接続 ", 
"snippet" : "iOSコードの署名とデプロイを管理するために、APIキー認証またはAppleID認証のいずれかを使用してBitriseビルドをAppleサービスに接続します。 ワークフローには、App StoreConnectやAppleDeveloperPortalなどの使用するAppleサービスからの情報を必要とするステップが含まれている場合があります。これらの2つのサービスは、次の手順でサポートされています。 iOSコード署名を管理する App Storeにデプロイして配信を接続（以前のiTunes Connect） App Store Connectへのデプロイ-アプリケーションローダー（以前のiTu...", 
"body" : "iOSコードの署名とデプロイを管理するために、APIキー認証またはAppleID認証のいずれかを使用してBitriseビルドをAppleサービスに接続します。 ワークフローには、App StoreConnectやAppleDeveloperPortalなどの使用するAppleサービスからの情報を必要とするステップが含まれている場合があります。これらの2つのサービスは、次の手順でサポートされています。 iOSコード署名を管理する App Storeにデプロイして配信を接続（以前のiTunes Connect） App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect） fastlane これらの手順を、ビルドがBitriseで実行されているときに使用するAppleサービスに接続するには、認証データをBitriseに提供し、アプリに確立された認証方法を選択する必要があります。 Appleの公式APIキーまたはAppleIDとパスワードを使用して認証できます。 iOSアプリ入門 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する ステップ入力でAppleサービスに接続する Apple認証が必要な手順 コード署名 iOSコード署名 iOSの展開 外部テスト用のiOSアプリのデプロイ iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理 " }, 
{ "title" : "Appleの2要素認証要件 ", 
"url" : "アカウント/サービスへの接続/appleサービス接続.html#appleの2要素認証要件", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Appleサービス接続 \/ Appleの2要素認証要件 ", 
"snippet" : "りんご 二要素認証 （2FA）は、Appleアカウントに追加のセキュリティレイヤーを提供します。 これまでにAPIキーを使用して認証を行っている場合は、2要素認証の要件の影響を受けません。 ただし、Apple IDとパスワードを使用して認証を行っている場合は、 新しい2FA要件 影響を受ける場合は、AppleDeveloperアカウントを再接続する必要があります Appleサービス接続 Bitriseプロファイルのページ。また、2要素認証\/ 2段階認証コードとアプリ固有のパスワードも提供する必要があります。アップルの公式ドキュメントをご覧ください。 アプリ固有のパスワードを生成する方法 。...", 
"body" : "りんご 二要素認証 （2FA）は、Appleアカウントに追加のセキュリティレイヤーを提供します。 これまでにAPIキーを使用して認証を行っている場合は、2要素認証の要件の影響を受けません。 ただし、Apple IDとパスワードを使用して認証を行っている場合は、 新しい2FA要件 影響を受ける場合は、AppleDeveloperアカウントを再接続する必要があります Appleサービス接続 Bitriseプロファイルのページ。また、2要素認証\/ 2段階認証コードとアプリ固有のパスワードも提供する必要があります。アップルの公式ドキュメントをご覧ください。 アプリ固有のパスワードを生成する方法 。 " }, 
{ "title" : "AppleDeveloperアカウントに接続する必要がある手順 ", 
"url" : "アカウント/サービスへの接続/appleサービス接続.html#appledeveloperアカウントに接続する必要がある手順", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Appleサービス接続 \/ AppleDeveloperアカウントに接続する必要がある手順 ", 
"snippet" : "次の手順では、Appleサービス（App StoreConnectやAppleDeveloper Portalなど）に接続する必要があります。これらの手順のいずれかを使用している場合は、正しい方法で接続を確立していることを確認してください。 Apple認証が必要な手順 ステップ 接続タイプ iOSコード署名を管理する APIキー認証、AppleID認証 iOS用のXcodeアーカイブとエクスポート APIキー認証、AppleID認証 iOSおよびtvOSXcodeアーカイブをエクスポートする APIキー認証、AppleID認証 iOS用のテスト用のXcodeビルド APIキー認証、AppleI...", 
"body" : "次の手順では、Appleサービス（App StoreConnectやAppleDeveloper Portalなど）に接続する必要があります。これらの手順のいずれかを使用している場合は、正しい方法で接続を確立していることを確認してください。 Apple認証が必要な手順 ステップ 接続タイプ iOSコード署名を管理する APIキー認証、AppleID認証 iOS用のXcodeアーカイブとエクスポート APIキー認証、AppleID認証 iOSおよびtvOSXcodeアーカイブをエクスポートする APIキー認証、AppleID認証 iOS用のテスト用のXcodeビルド APIキー認証、AppleID認証 fastlane ステップ入力によるAPIキー認証、Apple ID認証、APIキーまたはAppleID認証 iTunesConnectにデプロイするステップ ステップ入力によるAPIキー認証、Apple ID認証、APIキーまたはAppleID認証 App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect） ステップによるAPIキー認証、Apple ID認証、APIキーまたはAppleID認証 プロジェクトで使用できる認証に応じて、次のオプションがあります。 APIキー認証：可能であれば、この認証方法を使用することをお勧めします。二要素認証は必要ありません。必要なのは、提供することによってAppleサービスに接続することだけです 名前 、 発行者ID 、 キーID アップロードします 秘密鍵（.p8） 、次にアカウントを選択します チーム アプリの設定のタブ。指定したデータは、APIキー認証で機能するステップのそれぞれのフィールドに自動的に入力されます。 Apple ID認証：APIキー認証を使用できない場合は、AppleIDとパスワードで認証できます。あなたの Apple ID 、 パスワード 、 2FAコード と アプリ固有のパスワード 次に、の下のアカウントを選択します チーム アプリの設定のタブ。指定したデータは、AppleID認証で機能するステップのそれぞれのフィールドに自動的に入力されます。 ステップ入力によるAPIキーまたはAppleID認証：複数のチームに展開する場合、または認証が使用している接続されているチームとは異なるチームに展開する場合は、ステップの入力に優先認証を追加できます。これにより、以前に設定された接続が上書きされます Bitrise開発者接続 。 " }, 
{ "title" : "Appleサービスの許可 ", 
"url" : "アカウント/サービスへの接続/appleサービス接続.html#appleサービスの許可", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Appleサービス接続 \/ Appleサービスの許可 ", 
"snippet" : "BitriseをAppleサービスに正常に接続するには、AppleIDとAPIキーに対してAppleアカウントで適切な役割とアクセスを設定する必要があります。 BitriseをAppleサービスに正常に接続するには、AppleIDとAPIキーに対してAppleアカウントで適切な役割とアクセスを設定する必要があります。次のことができるようにするには、適切なアクセス権を設定する必要があります。 自動コード署名を使用します。 アプリをAppStoreにデプロイします。 必要な正確な役割とアクセスは、認証方法、Xcodeマネージド署名を使用するかどうか、アプリの展開プロセスの詳細など、さまざまな要因に...", 
"body" : "BitriseをAppleサービスに正常に接続するには、AppleIDとAPIキーに対してAppleアカウントで適切な役割とアクセスを設定する必要があります。 BitriseをAppleサービスに正常に接続するには、AppleIDとAPIキーに対してAppleアカウントで適切な役割とアクセスを設定する必要があります。次のことができるようにするには、適切なアクセス権を設定する必要があります。 自動コード署名を使用します。 アプリをAppStoreにデプロイします。 必要な正確な役割とアクセスは、認証方法、Xcodeマネージド署名を使用するかどうか、アプリの展開プロセスの詳細など、さまざまな要因によって異なります。 このガイドでは、2つの主要な役割に基づいて役割をリストします 認証方法 ：APIキー認証とAppleID認証。 " }, 
{ "title" : "APIキー認証で必要なアクセス ", 
"url" : "アカウント/サービスへの接続/appleサービス接続.html#apiキー認証で必要なアクセス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Appleサービス接続 \/ Appleサービスの許可 \/ APIキー認証で必要なアクセス ", 
"snippet" : "Apple APIキー認証でビットライズステップを使用するには、適切なアクセスレベルでApp StoreConnectAPIキーを作成する必要があります。適切なレベルは、何をする必要があるかによって異なります。 たとえば、プロジェクトでXcodeマネージドサインインを使用していて、生成されたIPAファイルを配布証明書とApp Storeプロビジョニングプロファイルとともにエクスポートする場合、App StoreConnectAPIキーには次のものが必要です。 管理者 アクセス。 表1「 自動コード署名に必要なアクセスが含まれています。この表では、エクスポートしようとしているIPAファイルのタイ...", 
"body" : "Apple APIキー認証でビットライズステップを使用するには、適切なアクセスレベルでApp StoreConnectAPIキーを作成する必要があります。適切なレベルは、何をする必要があるかによって異なります。 たとえば、プロジェクトでXcodeマネージドサインインを使用していて、生成されたIPAファイルを配布証明書とApp Storeプロビジョニングプロファイルとともにエクスポートする場合、App StoreConnectAPIキーには次のものが必要です。 管理者 アクセス。 表1「 自動コード署名に必要なアクセスが含まれています。この表では、エクスポートしようとしているIPAファイルのタイプに基づいてコード署名アクションをグループ化しました。主に2つのタイプがあります。 開発IPA：これは 発達 方法。 配布IPA：これは app-store 、 このために 、 また 企業 配布方法。 APIキー認証を使用した自動コード署名に必要なアクセス コード署名アクション Xcode管理署名をオンにした状態で必要なアクセス Xcode管理署名がオフになっている場合に必要なアクセス 開発IPAのエクスポート。これには次のものが含まれます。 開発プロビジョニングプロファイルの作成。 開発プロビジョニングプロファイルを削除します。 プロビジョニングプロファイルのダウンロード。 アプリIDの登録と構成。 デバイスUDIDの追加 デベロッパー デベロッパー AppStoreIPAのエクスポート。これには次のものが含まれます。 開発および配布プロビジョニングプロファイルの作成。 開発および配布プロビジョニングプロファイルの削除。 プロビジョニングプロファイルのダウンロード。 アプリIDの登録と構成。 デバイスUDIDの追加 管理者 デベロッパー 表2「 アプリをAppStoreにデプロイするために必要な役割が含まれています。 App Storeの展開の場合、必要なアクセスは、生成されたIPAファイルをアップロードする方法によって異なります。次のいずれかを実行できます。 追加の手順なしでIPAのみをアップロードします。 メタデータとスクリーンショットを含むIPAをアップロードし、レビューのためにアプリを送信します。 APIキー認証を使用したAppStoreの展開に必要なアクセス AppStoreのデプロイアクション APIキーに必要なアクセス メタデータなしで新しいIPAをアップロードする デベロッパー 新しいIPAのアップロードと： アプリのメタデータを更新しています。 スクリーンショットをアップロードしています。 AppStoreレビューのためにアプリを送信します。 アプリマネージャー " }, 
{ "title" : "AppleID認証で必要なアクセス ", 
"url" : "アカウント/サービスへの接続/appleサービス接続.html#appleid認証で必要なアクセス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Appleサービス接続 \/ Appleサービスの許可 \/ AppleID認証で必要なアクセス ", 
"snippet" : "AppleID認証でBitriseStepsを使用するには、AppleIDがAppleDeveloperチームで適切な役割を果たしていることを確認する必要があります。 表1「 Bitriseで自動コード署名を使用するために必要な役割が含まれています。この表では、エクスポートしようとしているIPAファイルのタイプに基づいてコード署名アクションをグループ化しました。主に2つのタイプがあります。 開発IPA：これは 発達 方法。 配布IPA：これは app-store 、 このために 、 また 企業 配布方法。 さまざまな配布方法の詳細をご覧ください。 Xcodeプロジェクト用に署名されたIPAを作...", 
"body" : "AppleID認証でBitriseStepsを使用するには、AppleIDがAppleDeveloperチームで適切な役割を果たしていることを確認する必要があります。 表1「 Bitriseで自動コード署名を使用するために必要な役割が含まれています。この表では、エクスポートしようとしているIPAファイルのタイプに基づいてコード署名アクションをグループ化しました。主に2つのタイプがあります。 開発IPA：これは 発達 方法。 配布IPA：これは app-store 、 このために 、 また 企業 配布方法。 さまざまな配布方法の詳細をご覧ください。 Xcodeプロジェクト用に署名されたIPAを作成する。 Xcodeマネージド署名 BitriseでAppleID認証を使用する場合、Xcode管理署名はプロジェクトで自動的にオフになります。代わりに、Bitriseは独自の自動コード署名ロジックを使用します。 AppleID認証を使用した自動コード署名に必要な役割 コード署名アクション 必要な役割 開発IPAのエクスポート。これには次のものが含まれます。 開発プロビジョニングプロファイルの作成。 開発プロビジョニングプロファイルを削除します。 プロビジョニングプロファイルのダウンロード。 アプリIDの登録と構成。 デバイスUDIDの追加 アプリマネージャー AppStoreIPAのエクスポート。これには次のものが含まれます。 開発および配布プロビジョニングプロファイルの作成。 開発および配布プロビジョニングプロファイルの削除。 プロビジョニングプロファイルのダウンロード。 アプリIDの登録と構成。 デバイスUDIDの追加 アプリマネージャー 表2「 アプリをAppStoreにデプロイするために必要な役割が含まれています。 App Storeの展開の場合、必要なアクセスは、生成されたIPAファイルをアップロードする方法によって異なります。次のいずれかを実行できます。 追加の手順なしでIPAのみをアップロードします。 メタデータとスクリーンショットを含むIPAをアップロードし、レビューのためにアプリを送信します。 APIキー認証を使用したAppStoreの展開に必要な役割 AppStoreのデプロイアクション AppleIDに必要な役割 メタデータなしで新しいIPAをアップロードする デベロッパー 新しいIPAのアップロードと： アプリのメタデータを更新しています。 スクリーンショットをアップロードしています。 AppStoreレビューのためにアプリを送信します。 アプリマネージャー " }, 
{ "title" : "APIキーを使用してAppleサービスに接続する ", 
"url" : "アカウント/サービスへの接続/apiキーを使用してappleサービスに接続する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ APIキーを使用してAppleサービスに接続する ", 
"snippet" : "APIキーを使用してAppleサービスに接続し、iOSコードの署名と展開を管理します。 BitriseをAppleServicesに接続する場合は、APIキー認証が推奨される方法です。 APIキーを使用してAppleサービス（App StoreConnectやAppleDeveloper Portalなど）に接続するには、最初にAppleサービス認証データを当社に追加する必要があります。 Apple Services Connection ページ、次にアプリのAPIキー。 BitriseをAppleServicesに接続する場合は、APIキー認証が推奨される方法です。 50個のAPIキーを追加...", 
"body" : "APIキーを使用してAppleサービスに接続し、iOSコードの署名と展開を管理します。 BitriseをAppleServicesに接続する場合は、APIキー認証が推奨される方法です。 APIキーを使用してAppleサービス（App StoreConnectやAppleDeveloper Portalなど）に接続するには、最初にAppleサービス認証データを当社に追加する必要があります。 Apple Services Connection ページ、次にアプリのAPIキー。 BitriseをAppleServicesに接続する場合は、APIキー認証が推奨される方法です。 50個のAPIキーを追加できます Appleサービス接続 ページですが、プロジェクトで使用できるのは1つだけです。 ステップ入力の変更は必要ありません この方法では、接続が確立されると、AppleAPIキーによる認証に関連するすべてのステップ入力が自動的に入力されます。これらのステップ入力フィールドを手動で変更する必要はまったくありません。 iOSアプリ入門 Appleサービス接続 AppleIDを使用してAppleサービスに接続する ステップ入力でAppleサービスに接続する Apple認証が必要な手順 コード署名 iOSコード署名 iOSの展開 外部テスト用のiOSアプリのデプロイ iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理 " }, 
{ "title" : "BitriseにAPIキー認証データを追加する ", 
"url" : "アカウント/サービスへの接続/apiキーを使用してappleサービスに接続する.html#bitriseにapiキー認証データを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ APIキーを使用してAppleサービスに接続する \/ BitriseにAPIキー認証データを追加する ", 
"snippet" : "オン App Store Connect 、 管理者アクセスで新しいAPIキーを生成する 下 ユーザーとアクセス 。 管理者アクセス 新しいAppStore ConnectAPIキーには管理者の役割を使用する必要があります。別の役割を設定すると、ステップとビルドは失敗します。 ログインする bitrise.io 。 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 メニューバーで選択します アップルサービス接続 。 クリック 接続を追加 。 すべての必須フィールドに入力し...", 
"body" : "オン App Store Connect 、 管理者アクセスで新しいAPIキーを生成する 下 ユーザーとアクセス 。 管理者アクセス 新しいAppStore ConnectAPIキーには管理者の役割を使用する必要があります。別の役割を設定すると、ステップとビルドは失敗します。 ログインする bitrise.io 。 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 メニューバーで選択します アップルサービス接続 。 クリック 接続を追加 。 すべての必須フィールドに入力します。 名前 、 発行者ID 、 そしてその キーID ステップ1で生成し、 秘密鍵をアップロードする（.p8） 。 1つの入力が欠落している場合、 接続 と 秘密鍵をアップロードする（.p8） ボタンは使用できなくなります。 クリック 接続 。 アプリにAppleデベロッパアカウントを割り当て続けます。 " }, 
{ "title" : "アプリへのAPIキー認証の割り当て ", 
"url" : "アカウント/サービスへの接続/apiキーを使用してappleサービスに接続する.html#アプリへのapiキー認証の割り当て", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ APIキーを使用してAppleサービスに接続する \/ アプリへのAPIキー認証の割り当て ", 
"snippet" : "AppleサービスのAPIキー認証を使用するには アプリ 、 絶対です： BitriseにAPIキーを追加します 。 そのAPIキーをアプリに割り当てます。 APIキーをアプリに割り当てるには： 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 下にスクロールして Appleサービスへの接続 セクション。 を見つける APIキー認証（推奨） オプションを選択し、ドロップダウンメニューから必要なAPIキーを選択します。 クリック APIキーを変更する ...", 
"body" : "AppleサービスのAPIキー認証を使用するには アプリ 、 絶対です： BitriseにAPIキーを追加します 。 そのAPIキーをアプリに割り当てます。 APIキーをアプリに割り当てるには： 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 下にスクロールして Appleサービスへの接続 セクション。 を見つける APIキー認証（推奨） オプションを選択し、ドロップダウンメニューから必要なAPIキーを選択します。 クリック APIキーを変更する 。 ポップアップウィンドウで、ドロップダウンメニューから必要なAPIキーを選択します。 上の画像のように、APIキーが設定されていない場合は、 最初に1つ追加する必要があります 。 The ステップ ビルド中にAppStoreConnectまたはAppleDeveloperPortalに接続できるようになりました。 " }, 
{ "title" : "AppleIDを使用してAppleサービスに接続する ", 
"url" : "アカウント/サービスへの接続/appleidを使用してappleサービスに接続する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ AppleIDを使用してAppleサービスに接続する ", 
"snippet" : "Apple IDを使用してAppleサービスに接続し、iOSコードの署名と展開を管理します。 Apple IDを使用してAppleサービス（App StoreConnectやAppleDeveloper Portalなど）に接続するには、最初にAppleIDとパスワードをに追加する必要があります。 Appleサービス接続 ページをクリックし、ビルドの実行中にAppleID認証を使用するアプリを選択します。 APIキー認証を使用できない場合は、このオプションを試すことをお勧めします。 Bitriseに接続できるAppleIDは1つだけであることに注意してください。 二要素認証が有効になっているA...", 
"body" : "Apple IDを使用してAppleサービスに接続し、iOSコードの署名と展開を管理します。 Apple IDを使用してAppleサービス（App StoreConnectやAppleDeveloper Portalなど）に接続するには、最初にAppleIDとパスワードをに追加する必要があります。 Appleサービス接続 ページをクリックし、ビルドの実行中にAppleID認証を使用するアプリを選択します。 APIキー認証を使用できない場合は、このオプションを試すことをお勧めします。 Bitriseに接続できるAppleIDは1つだけであることに注意してください。 二要素認証が有効になっているAppleアカウント Appleアカウントで2要素認証が有効になっている場合は、このプロセス中にアプリ固有のパスワードを入力する必要があります。学び AppleIDアカウントページの[セキュリティ]セクションでアプリ固有のパスワードを生成する方法 。 iOSアプリ入門 Appleサービス接続 APIキーを使用してAppleサービスに接続する ステップ入力でAppleサービスに接続する Apple認証が必要な手順 コード署名 iOSコード署名 iOSの展開 外部テスト用のiOSアプリのデプロイ iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理 " }, 
{ "title" : "BitriseにAppleID認証データを追加する ", 
"url" : "アカウント/サービスへの接続/appleidを使用してappleサービスに接続する.html#bitriseにappleid認証データを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ AppleIDを使用してAppleサービスに接続する \/ BitriseにAppleID認証データを追加する ", 
"snippet" : "右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側のメニューバーで、 Appleサービス接続 。 クリック 接続を追加 ボタン。 あなたの Apple ID と パスワード ポップアップウィンドウで。クリック 接続 。 あなたの〜を入力してください 検証コード の中に 二要素認証 窓。 追加します アプリ固有のパスワード 。クリック 確認 続ける。 確認コードを入力するように求められます。 認証は30日で期限切れになり、再度認証する必要があります。それが起こったら、 ...", 
"body" : "右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側のメニューバーで、 Appleサービス接続 。 クリック 接続を追加 ボタン。 あなたの Apple ID と パスワード ポップアップウィンドウで。クリック 接続 。 あなたの〜を入力してください 検証コード の中に 二要素認証 窓。 追加します アプリ固有のパスワード 。クリック 確認 続ける。 確認コードを入力するように求められます。 認証は30日で期限切れになり、再度認証する必要があります。それが起こったら、 Appleサービス接続 ページでは、再度認証するために2要素認証（2FA）コードを自動的に要求します。定義したAppleDeveloperアカウントのリストが表示されます。 Apple ID接続の右端には、3つのドットがあります。ドットをクリックして選択します 再認証 （（ 2SA \/ 2FA ）。 アプリにAppleDeveloperアカウントを割り当てることに進みます。 " }, 
{ "title" : "アプリへのAppleID認証の割り当て ", 
"url" : "アカウント/サービスへの接続/appleidを使用してappleサービスに接続する.html#アプリへのappleid認証の割り当て", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ AppleIDを使用してAppleサービスに接続する \/ アプリへのAppleID認証の割り当て ", 
"snippet" : "ステップでAppleID認証を使用する場合は、ビルドの実行中にAppleからデータを受信するために、アプリの認証方法も選択する必要があります。 他のユーザーのAppleクレデンシャルを割り当てることができません 自分のユーザーアカウントのAppleID認証データのみをアプリに設定できます。他の誰かのApple資格情報を必要とするアプリがある場合、そのユーザーはログインして自分で変更を加える必要があります。 Apple ID認証データをアプリに割り当てるには： 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを...", 
"body" : "ステップでAppleID認証を使用する場合は、ビルドの実行中にAppleからデータを受信するために、アプリの認証方法も選択する必要があります。 他のユーザーのAppleクレデンシャルを割り当てることができません 自分のユーザーアカウントのAppleID認証データのみをアプリに設定できます。他の誰かのApple資格情報を必要とするアプリがある場合、そのユーザーはログインして自分で変更を加える必要があります。 Apple ID認証データをアプリに割り当てるには： 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 下にスクロールして Appleサービスへの接続 セクション。 を見つける AppleID認証 オプションを選択し、接続ユーザーとして自分自身を設定します。 クリック <username>に変更します 。 このオプションが見つからない場合は、bitrise.ioでAppleのクレデンシャルを設定していない可能性があります。選択したユーザーを変更すると、前のユーザーが削除されることに注意してください。前のユーザーのAppleクレデンシャルを再度使用する必要がある場合は、そのユーザーがログインして自分で変更する必要があります。 接続のテスト クリックして 接続のテスト 、提供された資格情報を使用してBitriseがAppleサービスにアクセスできるかどうかを確認できます。 ステップは、ビルド中にAppleサービスに接続できるようになりました。 " }, 
{ "title" : "ステップ入力でAppleサービスに接続する ", 
"url" : "アカウント/サービスへの接続/ステップ入力でappleサービスに接続する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ ステップ入力でAppleサービスに接続する ", 
"snippet" : "認証が使用している接続されているものとは異なるチームに展開する場合は、ステップの入力に優先認証を追加できます。 複数のチームに展開する場合、または認証が使用している接続されているチームとは異なるチームに展開する場合は、ステップの入力に優先認証を追加できます。これにより、以前に設定された接続が上書きされます Bitrise開発者接続 。 この方法では、接続は、認証を設定した特定のステップに制限されます。 2FAおよびAppleID認証 Apple IDに2FAが必要な場合は、AppleID認証を使用する必要があります。 App Storeにデプロイして配信を接続（以前のiTunes Connec...", 
"body" : "認証が使用している接続されているものとは異なるチームに展開する場合は、ステップの入力に優先認証を追加できます。 複数のチームに展開する場合、または認証が使用している接続されているチームとは異なるチームに展開する場合は、ステップの入力に優先認証を追加できます。これにより、以前に設定された接続が上書きされます Bitrise開発者接続 。 この方法では、接続は、認証を設定した特定のステップに制限されます。 2FAおよびAppleID認証 Apple IDに2FAが必要な場合は、AppleID認証を使用する必要があります。 App Storeにデプロイして配信を接続（以前のiTunes Connect） そしてその 追い越し車線 ステップ入力を介して認証する代わりにステップ。 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する Apple認証が必要な手順 コード署名 iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理 " }, 
{ "title" : "APIキーを使用したステップでの認証 ", 
"url" : "アカウント/サービスへの接続/ステップ入力でappleサービスに接続する.html#apiキーを使用したステップでの認証", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ ステップ入力でAppleサービスに接続する \/ APIキーを使用したステップでの認証 ", 
"snippet" : "ステップ入力でのAPIキーまたはAppleID認証のいずれか ステップに追加できる認証のタイプは、APIキー1つまたはAppleID1つのみです。いずれの場合も、 Bitrise Apple Developer Connection 入力はに設定されます off 、それ以外の場合、ステップはで見つかった構成済みの認証方法で実行されます Appleサービス接続 （上の接続を削除することにした場合を除きます チーム タブ）。 ステップをワークフローに追加します。 APIキーをにアップロードします 一般的なファイルストレージ のセクション コード署名 ページ。 をセットする Bitrise Appl...", 
"body" : "ステップ入力でのAPIキーまたはAppleID認証のいずれか ステップに追加できる認証のタイプは、APIキー1つまたはAppleID1つのみです。いずれの場合も、 Bitrise Apple Developer Connection 入力はに設定されます off 、それ以外の場合、ステップはで見つかった構成済みの認証方法で実行されます Appleサービス接続 （上の接続を削除することにした場合を除きます チーム タブ）。 ステップをワークフローに追加します。 APIキーをにアップロードします 一般的なファイルストレージ のセクション コード署名 ページ。 をセットする Bitrise Apple Developer 繋がり への入力 off 。 をセットする 発行者ID ステップのそれぞれのフィールドの秘密の環境変数として。 を構成します APIキーパス と API発行者 入力。 変更を保存して、新しいビルドを実行します。 " }, 
{ "title" : "AppleIDとパスワードを使用したステップでの認証 ", 
"url" : "アカウント/サービスへの接続/ステップ入力でappleサービスに接続する.html#appleidとパスワードを使用したステップでの認証", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ ステップ入力でAppleサービスに接続する \/ AppleIDとパスワードを使用したステップでの認証 ", 
"snippet" : "ステップ入力でのAPIキーまたはAppleID認証のいずれか ステップに追加できる認証のタイプは、APIキー1つまたはAppleID1つのみです。いずれの場合も、 Bitrise Apple Developer Connection 入力はに設定されます off 、それ以外の場合、ステップはで見つかった構成済みの認証方法で実行されます Appleサービス接続 （上の接続を削除することにした場合を除きます チーム タブ）。 ステップをワークフローに追加します。 をセットする Apple ID と パスワード 。 をセットする Bitrise Apple Developer Connection ...", 
"body" : "ステップ入力でのAPIキーまたはAppleID認証のいずれか ステップに追加できる認証のタイプは、APIキー1つまたはAppleID1つのみです。いずれの場合も、 Bitrise Apple Developer Connection 入力はに設定されます off 、それ以外の場合、ステップはで見つかった構成済みの認証方法で実行されます Appleサービス接続 （上の接続を削除することにした場合を除きます チーム タブ）。 ステップをワークフローに追加します。 をセットする Apple ID と パスワード 。 をセットする Bitrise Apple Developer Connection への入力 off 。 変更を保存して、新しいビルドを実行します。 " }, 
{ "title" : "Apple認証が必要な手順 ", 
"url" : "アカウント/サービスへの接続/apple認証が必要な手順.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Apple認証が必要な手順 ", 
"snippet" : "APIキーまたはAppleIDのいずれかを使用してAppleサービスに接続する必要があるすべてのBitriseステップを確認してください。 このガイドでは、すべての 手順 認証を必要とする認証と、ユーザーの状況に応じて選択できる認証方法 アプリの 要件。 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する ステップ入力でAppleサービスに接続する コード署名 iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理...", 
"body" : "APIキーまたはAppleIDのいずれかを使用してAppleサービスに接続する必要があるすべてのBitriseステップを確認してください。 このガイドでは、すべての 手順 認証を必要とする認証と、ユーザーの状況に応じて選択できる認証方法 アプリの 要件。 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する ステップ入力でAppleサービスに接続する コード署名 iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理 " }, 
{ "title" : "iOSコード署名ステップの管理 ", 
"url" : "アカウント/サービスへの接続/apple認証が必要な手順.html#iosコード署名ステップの管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Apple認証が必要な手順 \/ iOSコード署名ステップの管理 ", 
"snippet" : "このステップ プロジェクトがBitriseで構築される前に、必要なコード署名アセットの設定を処理します。このステップでは、APIキーまたはApple IDとパスワード認証を使用して、Appleサービスに接続します。接続が構成されると、ステップは次のようになります。 iOSプロジェクトに必要なプロビジョニングプロファイルを生成、更新、ダウンロードします。 AppleDeveloperSiteでプロジェクトのバンドルIDを確認して登録します。 Bitriseアカウントに接続されているiOSデバイスをAppStoreConnectに登録します。 APIキーを使用してAppleサービスに接続するApp...", 
"body" : "このステップ プロジェクトがBitriseで構築される前に、必要なコード署名アセットの設定を処理します。このステップでは、APIキーまたはApple IDとパスワード認証を使用して、Appleサービスに接続します。接続が構成されると、ステップは次のようになります。 iOSプロジェクトに必要なプロビジョニングプロファイルを生成、更新、ダウンロードします。 AppleDeveloperSiteでプロジェクトのバンドルIDを確認して登録します。 Bitriseアカウントに接続されているiOSデバイスをAppStoreConnectに登録します。 APIキーを使用してAppleサービスに接続するAppleIDを使用してAppleサービスに接続する" }, 
{ "title" : "Xcode Archive＆Export for iOS Step ", 
"url" : "アカウント/サービスへの接続/apple認証が必要な手順.html#xcode-archive-export-for-ios-step", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Apple認証が必要な手順 \/ Xcode Archive＆Export for iOS Step ", 
"snippet" : "ステップは、を実行してXcodeプロジェクトをアーカイブします xcodebuild archive コマンドを実行してから、アーカイブをIPAファイルにエクスポートします。 xcodebuild -exportArchive 指図。このIPAファイルは、共有したり、テストデバイスにインストールしたり、App StoreConnectにアップロードしたりできます。このステップは、APIキー認証とAppleID認証で機能します。 ステップは、iOSコード署名を実行することもできます。 自動コード署名方式 inputはメソッドを指定します。デフォルトではオフになっています。 iOSコード署名を実行...", 
"body" : "ステップは、を実行してXcodeプロジェクトをアーカイブします xcodebuild archive コマンドを実行してから、アーカイブをIPAファイルにエクスポートします。 xcodebuild -exportArchive 指図。このIPAファイルは、共有したり、テストデバイスにインストールしたり、App StoreConnectにアップロードしたりできます。このステップは、APIキー認証とAppleID認証で機能します。 ステップは、iOSコード署名を実行することもできます。 自動コード署名方式 inputはメソッドを指定します。デフォルトではオフになっています。 iOSコード署名を実行するには、APIキーまたはAppleID認証を使用できます。 APIキーを使用してAppleサービスに接続するAppleIDを使用してAppleサービスに接続する" }, 
{ "title" : "iOSおよびtvOSXcodeアーカイブのエクスポートステップ ", 
"url" : "アカウント/サービスへの接続/apple認証が必要な手順.html#iosおよびtvosxcodeアーカイブのエクスポートステップ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Apple認証が必要な手順 \/ iOSおよびtvOSXcodeアーカイブのエクスポートステップ ", 
"snippet" : "既存の iOS および tvOS .xcarchive ファイルから IPA をエクスポートします。複数の iOS および tvOS Xcode アーカイブのエクスポート ステップを ワークフロー 複数の異なる署名済み IPA ファイルを作成します。 ステップは、iOSコード署名を実行することもできます。 自動コード署名方式 inputはメソッドを指定します。デフォルトではオフになっています。 iOSコード署名を実行するには、APIキーまたはAppleID認証を使用できます。 APIキーを使用してAppleサービスに接続するAppleIDを使用してAppleサービスに接続する...", 
"body" : "既存の iOS および tvOS .xcarchive ファイルから IPA をエクスポートします。複数の iOS および tvOS Xcode アーカイブのエクスポート ステップを ワークフロー 複数の異なる署名済み IPA ファイルを作成します。 ステップは、iOSコード署名を実行することもできます。 自動コード署名方式 inputはメソッドを指定します。デフォルトではオフになっています。 iOSコード署名を実行するには、APIキーまたはAppleID認証を使用できます。 APIキーを使用してAppleサービスに接続するAppleIDを使用してAppleサービスに接続する" }, 
{ "title" : "iOSステップのテスト用のXcodeビルド ", 
"url" : "アカウント/サービスへの接続/apple認証が必要な手順.html#iosステップのテスト用のxcodeビルド", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Apple認証が必要な手順 \/ iOSステップのテスト用のXcodeビルド ", 
"snippet" : "ステップはXcodeを実行します xcodebuild build-for-testingオプションを指定したコマンド。これにより、アプリと関連するテストが構築され、たとえば、サードパーティのテストサービスにアップロードして、実際のデバイスでテストを実行できるようになります。ステップはまた、 .xctestrun ファイル。実際のデバイスでテストを実行できるようにするには、コード署名が必要です。 The 自動コード署名方式 ステップ入力を使用すると、Bitriseで提供するAppleサービス接続に基づいてApple Developerアカウントにログインし、に基づいてプロジェクトに必要なプロビ...", 
"body" : "ステップはXcodeを実行します xcodebuild build-for-testingオプションを指定したコマンド。これにより、アプリと関連するテストが構築され、たとえば、サードパーティのテストサービスにアップロードして、実際のデバイスでテストを実行できるようになります。ステップはまた、 .xctestrun ファイル。実際のデバイスでテストを実行できるようにするには、コード署名が必要です。 The 自動コード署名方式 ステップ入力を使用すると、Bitriseで提供するAppleサービス接続に基づいてApple Developerアカウントにログインし、に基づいてプロジェクトに必要なプロビジョニングプロファイルをダウンロードできます。 配布方法 。 APIキーを使用してAppleサービスに接続するAppleIDを使用してAppleサービスに接続する" }, 
{ "title" : "iTunesConnectにデプロイするステップ ", 
"url" : "アカウント/サービスへの接続/apple認証が必要な手順.html#itunesconnectにデプロイするステップ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Apple認証が必要な手順 \/ iTunesConnectにデプロイするステップ ", 
"snippet" : "と このステップ 、スクリーンショット、メタデータ、バイナリをにアップロードできます https:\/\/appstoreconnect.apple.com\/ fastlaneを使用してAppStoreレビュー用にアプリを送信します 配達 アクション。 The App Store Connect with Deliver（以前のiTunes Connect）にデプロイします ステップは、AppleIDまたはAppStore Connect APIを使用するか、ステップ入力を介してAppleDeveloperAccountに接続できます。 2FA対応のAppleIDの場合、 App Store Co...", 
"body" : "と このステップ 、スクリーンショット、メタデータ、バイナリをにアップロードできます https:\/\/appstoreconnect.apple.com\/ fastlaneを使用してAppStoreレビュー用にアプリを送信します 配達 アクション。 The App Store Connect with Deliver（以前のiTunes Connect）にデプロイします ステップは、AppleIDまたはAppStore Connect APIを使用するか、ステップ入力を介してAppleDeveloperAccountに接続できます。 2FA対応のAppleIDの場合、 App Store Connect with Deliver（以前のiTunes Connect）にデプロイします ステップは、プロファイルのAppleServiceページで設定できるAppleID認証でのみ機能します。デフォルトの方法はAPIキー認証です。プロジェクトで機能する接続方法を選択します。 APIキーを使用してAppleサービスに接続するAppleIDを使用してAppleサービスに接続するステップ入力でAppleサービスに接続する" }, 
{ "title" : "App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect）ステップ ", 
"url" : "アカウント/サービスへの接続/apple認証が必要な手順.html#app-store-connectへのデプロイ-アプリケーションローダー-以前のitunes-connect-ステップ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Apple認証が必要な手順 \/ App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect）ステップ ", 
"snippet" : "と このステップ 、バイナリ（.ipaまたは.pkgファイル）をにアップロードできます https:\/\/appstoreconnect.apple.com\/ 。 The App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect） Stepは、App Store Connect API、Apple IDとパスワード、またはStep入力を使用してAppleDeveloperAccountに接続できます。プロジェクトで機能する接続方法を選択します。 APIキーを使用してAppleサービスに接続するAppleIDを使用してAppleサービスに接続する...", 
"body" : "と このステップ 、バイナリ（.ipaまたは.pkgファイル）をにアップロードできます https:\/\/appstoreconnect.apple.com\/ 。 The App Store Connectへのデプロイ-アプリケーションローダー（以前のiTunes Connect） Stepは、App Store Connect API、Apple IDとパスワード、またはStep入力を使用してAppleDeveloperAccountに接続できます。プロジェクトで機能する接続方法を選択します。 APIキーを使用してAppleサービスに接続するAppleIDを使用してAppleサービスに接続するステップ入力でAppleサービスに接続する" }, 
{ "title" : "fastlaneステップ ", 
"url" : "アカウント/サービスへの接続/apple認証が必要な手順.html#fastlaneステップ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ サービスへの接続 \/ Apple認証が必要な手順 \/ fastlaneステップ ", 
"snippet" : "このステップでは、 追い越し車線 ローカルと同じように Bitrise のレーン。についてのガイドをご覧ください fastlane を Bitrise に統合する 詳細については。 2FA 対応の Apple ID の場合、 追い越し車線 ステップは、で設定できる Apple ID 認証でのみ機能します。 アップルサービス あなたのプロフィールのページ。 Fastlane ステップで 2 要素認証が失敗する 場合によっては、 追い越し車線 ステップはの値を取得しません FASTLANE_SESSION Apple Developer ポータルに接続しようとすると変数が正しく設定され、2 要素認...", 
"body" : "このステップでは、 追い越し車線 ローカルと同じように Bitrise のレーン。についてのガイドをご覧ください fastlane を Bitrise に統合する 詳細については。 2FA 対応の Apple ID の場合、 追い越し車線 ステップは、で設定できる Apple ID 認証でのみ機能します。 アップルサービス あなたのプロフィールのページ。 Fastlane ステップで 2 要素認証が失敗する 場合によっては、 追い越し車線 ステップはの値を取得しません FASTLANE_SESSION Apple Developer ポータルに接続しようとすると変数が正しく設定され、2 要素認証が失敗する原因となります。チェックアウト 潜在的な回避策 この問題のために。 APIキーを使用してAppleサービスに接続するAppleIDを使用してAppleサービスに接続するステップ入力でAppleサービスに接続する" }, 
{ "title" : "BitriseでのSAMLSSO ", 
"url" : "アカウント/bitriseでのsamlsso.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO ", 
"snippet" : "VelocityおよびEnterpriseユーザーは、独自のSAMLSSOプロバイダーのシステムを使用してBitriseWorkspaceを作成してログインし、セキュリティの追加レイヤーを提供できます。 ワークスペースメンバーは、独自のSAMLSSOプロバイダーのシステムを使用してBitriseワークスペースにログインできます。 SAML SSOを使用すると、ワークスペースは、ビットライズワークスペースにアクセスするときにSAMLSSOプロバイダーのセキュリティガイドラインを適用できるようになります。 SSO によるロール レベル アクセスの管理はサポートされていません Bitrise は、S...", 
"body" : "VelocityおよびEnterpriseユーザーは、独自のSAMLSSOプロバイダーのシステムを使用してBitriseWorkspaceを作成してログインし、セキュリティの追加レイヤーを提供できます。 ワークスペースメンバーは、独自のSAMLSSOプロバイダーのシステムを使用してBitriseワークスペースにログインできます。 SAML SSOを使用すると、ワークスペースは、ビットライズワークスペースにアクセスするときにSAMLSSOプロバイダーのセキュリティガイドラインを適用できるようになります。 SSO によるロール レベル アクセスの管理はサポートされていません Bitrise は、SSO によるユーザー認証管理 (ロールの割り当て) をサポートしていません。 Bitrise は SSO によるユーザー認証 (サインアップ\/ログイン) をサポートしています。 SAML SSOをワークスペースに接続する前に、次のことを確認してください。 Bitriseに接続できるSAMLSSOプロバイダー（IDプロバイダー）があり、SAMLSSOプロバイダーの管理者が手元にあります。 Bitriseのアカウントには VelocityまたはEnterpriseBuildPlatformプラン 。ワークスペースがない場合は、先に進んで作成してください。 SAML SSOの設定は、Bitriseの既存のワークスペースと新しいワークスペースで同じです。 ワークスペースの所有者のみが、ビットライズワークスペースにSAMLSSOを設定できます。 " }, 
{ "title" : "Bitriseのシングルサインオンページに移動する ", 
"url" : "アカウント/bitriseでのsamlsso.html#bitriseのシングルサインオンページに移動する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitriseのシングルサインオンページに移動する ", 
"snippet" : "Bitriseのワークスペース所有者の場合は、 シングル・サインオン タブを使用して、SAMLSSOプロバイダーとBitriseワークスペース間のSAMLSSO接続を設定します。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 NS 概要 ページには、所有者であるすべてのワークスペースが表示されます。 SAMLSSO接続を設定するワークスペースを選択します。 左側のメニューバーで、 シングル・サインオン に連れて行ってくれます...", 
"body" : "Bitriseのワークスペース所有者の場合は、 シングル・サインオン タブを使用して、SAMLSSOプロバイダーとBitriseワークスペース間のSAMLSSO接続を設定します。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 NS 概要 ページには、所有者であるすべてのワークスペースが表示されます。 SAMLSSO接続を設定するワークスペースを選択します。 左側のメニューバーで、 シングル・サインオン に連れて行ってくれます シングルサインオンを有効にする ページ。 BitriseのワークスペースのSAMLSSOの設定を続行します。 " }, 
{ "title" : "SAMLSSOの承認 ", 
"url" : "アカウント/bitriseでのsamlsso.html#samlssoの承認", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ SAMLSSOの承認 ", 
"snippet" : "ワークスペースの所有者がSAMLSSOを設定すると、ワークスペース内の全員がSAMLSSOを介してワークスペースにログインする前にSAMLSSOを承認する必要があります。 通常の方法でBitriseにログインしていることを確認してください。同じブラウザウィンドウを使用して続行します。 Bitriseは、すべてのワークスペースメンバーに確認メールを送信します。クリックすると SAMLSSO経由でログイン ボタンをクリックするか、提供されたURLを使用して、WorkspaceメンバーはSAMLSSOログインを承認できます。電子メールには、ワークスペース所有者の電子メールアドレスも表示されます（連絡...", 
"body" : "ワークスペースの所有者がSAMLSSOを設定すると、ワークスペース内の全員がSAMLSSOを介してワークスペースにログインする前にSAMLSSOを承認する必要があります。 通常の方法でBitriseにログインしていることを確認してください。同じブラウザウィンドウを使用して続行します。 Bitriseは、すべてのワークスペースメンバーに確認メールを送信します。クリックすると SAMLSSO経由でログイン ボタンをクリックするか、提供されたURLを使用して、WorkspaceメンバーはSAMLSSOログインを承認できます。電子メールには、ワークスペース所有者の電子メールアドレスも表示されます（連絡する必要がある場合）。 SAMLSSO経由でログイン ボタンを押すか、同じブラウザの新しいタブにURLをコピーして貼り付けます。 あなたはBitriseに導かれます 「ワークスペース名」にサインインを許可する ページ。 クリック 承認する ワークスペースを信頼してBitriseアカウントのサインインプロセスを制御する場合。 すでにSAMLSSOプロバイダーにログインしている場合は、Bitriseダッシュボードに自動的に移動します。 そうでない場合は、SAML SSOプロバイダーのサイトにログインするように求められ、Bitriseダッシュボードに移動します。 クリック 許可しない 招待メールが信頼できないソースからのものである場合。 一致しない別のメールアドレスを使用している場合は、以下のエラーメッセージが表示されることに注意してください。 BitriseとSSOプロバイダーサイトの両方で正しい電子メールアドレスでログインしていることを確認してください。 すべてがうまくいけば、Bitriseダッシュボードに着陸するはずです。 " }, 
{ "title" : "SAMLSSOを使用して新しいWorkspaceメンバーを招待する ", 
"url" : "アカウント/bitriseでのsamlsso.html#samlssoを使用して新しいworkspaceメンバーを招待する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ SAMLSSOを使用して新しいWorkspaceメンバーを招待する ", 
"snippet" : "SAML SSOがワークスペースに設定されると、SAMLSSOを使用して新しいメンバーをワークスペースに招待できます。 新しいメンバーがSAMLSSOプロバイダーのグループメンバーになっていることを確認してください。 新しいメンバーに関連付けられている電子メールアドレスがSAMLSSOプロバイダーに登録されているものであり、Bitriseでも同じものを使用していることを確認してください。 BitriseのSAMLSSOワークスペースに移動し、 グループ タブ。 を見つける SAMLユーザー セクションをクリックし、 + 新しいメンバーを追加するために署名します。 メールアドレスを入力し、矢印ア...", 
"body" : "SAML SSOがワークスペースに設定されると、SAMLSSOを使用して新しいメンバーをワークスペースに招待できます。 新しいメンバーがSAMLSSOプロバイダーのグループメンバーになっていることを確認してください。 新しいメンバーに関連付けられている電子メールアドレスがSAMLSSOプロバイダーに登録されているものであり、Bitriseでも同じものを使用していることを確認してください。 BitriseのSAMLSSOワークスペースに移動し、 グループ タブ。 を見つける SAMLユーザー セクションをクリックし、 + 新しいメンバーを追加するために署名します。 メールアドレスを入力し、矢印アイコンをクリックします。これにより、メンバーがSAMLユーザーのリストに追加され、BitriseはSAML招待指示を新しいメンバーに自動的に送信します。 同じ方法を使用して新しいユーザーを追加し続けるか、をクリックして追加を完了することができます。 終わり ボタン。 新しいメンバーが招待プロセスを通過しないまで、次のように表示されます。 再招待 の名前の横にあるボタン グループ ページ。 SAML SSO経由でのサインアップに失敗し、招待がタイムアウトした場合は、このボタンをクリックして招待を再送信できます。サインアップに成功すると、ボタンは消えます。 " }, 
{ "title" : "新しいメンバーとしてSAMLSSOワークスペースに参加する ", 
"url" : "アカウント/bitriseでのsamlsso.html#新しいメンバーとしてsamlssoワークスペースに参加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ 新しいメンバーとしてSAMLSSOワークスペースに参加する ", 
"snippet" : "Bitriseワークスペースの所有者があなたをワークスペースに招待した場合、SAMLSSOを介してワークスペースに参加するための招待メールを受け取る必要があります。方法を見てみましょう！ メールボックスに移動して、タイトルの付いたメールを見つけてください Samlの招待状の説明 。 クリック SSO経由でサインイン ボタンを押すか、提供されたURLをコピーして、新しいブラウザに貼り付けます。私たちの もうすぐです ページが表示されます。 を提供する ユーザー名 Bitriseワークスペースで使用したい。ユーザー名には、文字、数字、アンダースコア（_）、ダッシュ（-）、ドット（。）のみを使用して...", 
"body" : "Bitriseワークスペースの所有者があなたをワークスペースに招待した場合、SAMLSSOを介してワークスペースに参加するための招待メールを受け取る必要があります。方法を見てみましょう！ メールボックスに移動して、タイトルの付いたメールを見つけてください Samlの招待状の説明 。 クリック SSO経由でサインイン ボタンを押すか、提供されたURLをコピーして、新しいブラウザに貼り付けます。私たちの もうすぐです ページが表示されます。 を提供する ユーザー名 Bitriseワークスペースで使用したい。ユーザー名には、文字、数字、アンダースコア（_）、ダッシュ（-）、ドット（。）のみを使用してください。 NS Eメール フィールドは編集できません。 クリック サインアップを完了する ボタン。すべてがうまくいけば、Bitriseに着陸し、最初のアプリを追加できます。 " }, 
{ "title" : "BitriseでのSAMLSSOステータスの確認 ", 
"url" : "アカウント/bitriseでのsamlsso.html#bitriseでのsamlssoステータスの確認", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ BitriseでのSAMLSSOステータスの確認 ", 
"snippet" : "ワークスペースの所有者がワークスペースのSAMLSSOを設定したので、すべてのワークスペースメンバー（ワークスペースの所有者を含む）は、で他のワークスペースメンバーのSAMLSSOステータスを確認できます。 人 タブ。 シングルサインオンタブへのアクセス NS シングル・サインオン タブは、ワークスペースの所有者のみが使用できます。 Bitriseには2種類のSAMLSSOステータスがあります。 SAML SSOが有効になっています： SAMLSSOを介したログインが有効になっています。 SAML SSOが無効になっています： ワークスペースメンバーは、SAMLSSO接続をまだ有効にしていませ...", 
"body" : "ワークスペースの所有者がワークスペースのSAMLSSOを設定したので、すべてのワークスペースメンバー（ワークスペースの所有者を含む）は、で他のワークスペースメンバーのSAMLSSOステータスを確認できます。 人 タブ。 シングルサインオンタブへのアクセス NS シングル・サインオン タブは、ワークスペースの所有者のみが使用できます。 Bitriseには2種類のSAMLSSOステータスがあります。 SAML SSOが有効になっています： SAMLSSOを介したログインが有効になっています。 SAML SSOが無効になっています： ワークスペースメンバーは、SAMLSSO接続をまだ有効にしていません。これを有効にするには、Workspaceメンバーは、Bitriseからの確認メールの指示に従う必要があります。 ワークスペースのプロファイルページに移動します。 クリック 人 左側のメニューのタブをクリックして、ワークスペースメンバーのSAMLSSOステータスを確認します。 ワークスペースの所有者 ワークスペースの所有者の場合は、[ グループ 左側のメニューのタブで、SAMLユーザーグループを探します。ここで、SAMLユーザーを確認および管理できます。 " }, 
{ "title" : "ワークスペースでのSAMLSSOの適用 ", 
"url" : "アカウント/bitriseでのsamlsso.html#ワークスペースでのsamlssoの適用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ ワークスペースでのSAMLSSOの適用 ", 
"snippet" : "ワークスペースにSAMLSSOを適用すると、セキュリティの追加レイヤーが提供されます。Bitriseワークスペースに独自のセキュリティガイドラインを適用できます（たとえば、パスワード形式の要件、2要素認証）。 強制されたSAMLSSO ワークスペースでSAMLSSOを適用すると、SAMLSSOがワークスペースにログイン\/サインアップする唯一の方法になります。 1つのワークスペースのみ Bitrise で SAML SSO を適用した 2 つのワークスペースのメンバーになることはできません。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペース...", 
"body" : "ワークスペースにSAMLSSOを適用すると、セキュリティの追加レイヤーが提供されます。Bitriseワークスペースに独自のセキュリティガイドラインを適用できます（たとえば、パスワード形式の要件、2要素認証）。 強制されたSAMLSSO ワークスペースでSAMLSSOを適用すると、SAMLSSOがワークスペースにログイン\/サインアップする唯一の方法になります。 1つのワークスペースのみ Bitrise で SAML SSO を適用した 2 つのワークスペースのメンバーになることはできません。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 ワークスペースに移動します シングル・サインオン タブ。 スイッチを右に切り替えて、SAMLSSOを適用します。 SAMLSSOを適用できません ワークスペースのメンバーがまだ SAML SSO 接続を有効にしていない場合、または SAML SSO を適用する別のワークスペースで SAML SSO を有効にしている場合、ワークスペースの所有者はワークスペースで SAML SSO を適用できません。 クリック 変更内容を保存 。 これで、WorkspaceメンバーはSAMLSSO経由でのみログインできます。 " }, 
{ "title" : "SAMLSSOが適用されたワークスペースに新しいユーザーを追加する ", 
"url" : "アカウント/bitriseでのsamlsso.html#samlssoが適用されたワークスペースに新しいユーザーを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ SAMLSSOが適用されたワークスペースに新しいユーザーを追加する ", 
"snippet" : "SAML SSOがワークスペースに適用された後でも、新しいユーザーをワークスペースに追加できます。ただし、この場合、2つのタイプの新規ユーザーを区別することが重要です。 Bitriseに既存のアカウントを持つユーザー ：ワークスペース管理者は、強制されたSSOをオフにして、ユーザーをワークスペースに招待することをお勧めします。招待されたBitriseユーザーは、招待プロセスを実行し、SSO接続を有効にする必要があります。それが完了すると、ワークスペース管理者は SSOを適用する スイッチを入れ直します。 Bitrise を初めて使用し、まだアカウントを登録していないユーザー : ワークスペース...", 
"body" : "SAML SSOがワークスペースに適用された後でも、新しいユーザーをワークスペースに追加できます。ただし、この場合、2つのタイプの新規ユーザーを区別することが重要です。 Bitriseに既存のアカウントを持つユーザー ：ワークスペース管理者は、強制されたSSOをオフにして、ユーザーをワークスペースに招待することをお勧めします。招待されたBitriseユーザーは、招待プロセスを実行し、SSO接続を有効にする必要があります。それが完了すると、ワークスペース管理者は SSOを適用する スイッチを入れ直します。 Bitrise を初めて使用し、まだアカウントを登録していないユーザー : ワークスペース管理者は強制 SSO をオフにする必要はありません。新しいユーザーを招待するだけで、次の説明に従ってサインアップ手順を完了する必要があります。 新しいメンバーとしてSAMLSSOワークスペースに参加する. または、新しいユーザーは直接 サインアップページ 、をクリックし、 SAML ボタンをクリックしてから、指示に従って同じ目標を達成します。 " }, 
{ "title" : "SAMLSSOを介してログインする ", 
"url" : "アカウント/bitriseでのsamlsso.html#samlssoを介してログインする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ SAMLSSOを介してログインする ", 
"snippet" : "SAML SSO接続がすでにワークスペースに追加されていて、SAML SSO接続も有効にしている場合は、パスワードと電子メールアドレスを使用せずにBitriseアカウントに簡単にログインできます。 期限切れのSAMLSSO証明書 SAML SSO証明書の有効期限が切れていて、SAML SSOを介してBitriseにログインできない場合は、サポートチームに連絡してログインを支援することができます。 クリック SSO経由でログイン 私たちに ログインページ 。 にリダイレクトされます シングルサインオンページを開始する 。 にワークスペース名を入力します Bitriseワークスペースの名前 分野。...", 
"body" : "SAML SSO接続がすでにワークスペースに追加されていて、SAML SSO接続も有効にしている場合は、パスワードと電子メールアドレスを使用せずにBitriseアカウントに簡単にログインできます。 期限切れのSAMLSSO証明書 SAML SSO証明書の有効期限が切れていて、SAML SSOを介してBitriseにログインできない場合は、サポートチームに連絡してログインを支援することができます。 クリック SSO経由でログイン 私たちに ログインページ 。 にリダイレクトされます シングルサインオンページを開始する 。 にワークスペース名を入力します Bitriseワークスペースの名前 分野。 クリック SSOを続行します ログインします。 SSOプロバイダーサイトにログインしている場合は、Bitriseダッシュボードに自動的にアクセスします。 SSOプロバイダーサイトでログアウトしている場合は、そこにリダイレクトされてログインします。ログインに成功すると、Bitriseダッシュボードにリダイレクトされます。 " }, 
{ "title" : "ワークスペースのSAMLSSOを無効にする ", 
"url" : "アカウント/bitriseでのsamlsso.html#ワークスペースのsamlssoを無効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ ワークスペースのSAMLSSOを無効にする ", 
"snippet" : "SAML SSOを無効にすると、Workspaceメンバーは通常のサインイン手順でサインインできるようになります。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 に移動します シングル・サインオン タブ。 以前にワークスペースにSAMLSSOが適用されている場合は、切り替えます SAMLSSOを適用する オフ。 クリック SSOを無効にする 。 アクションを確認\/キャンセルできる確認ポップアップが表示されます。クリックして注...", 
"body" : "SAML SSOを無効にすると、Workspaceメンバーは通常のサインイン手順でサインインできるようになります。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 に移動します シングル・サインオン タブ。 以前にワークスペースにSAMLSSOが適用されている場合は、切り替えます SAMLSSOを適用する オフ。 クリック SSOを無効にする 。 アクションを確認\/キャンセルできる確認ポップアップが表示されます。クリックして注意してください SSOを無効にする ボタンをクリックすると、すべてのワークスペースメンバーのSAMLSSOが無効になります。完了すると、Workspaceメンバーは通常のBitrise資格情報を使用してログインできるようになります。 あなたは受け取ります SSOが無効になっています ワークスペースで無効になっているSAMLSSOを確認するBitrise（letsconnect@bitrise.io）からの電子メール。 " }, 
{ "title" : "ワークスペースメンバーのSAMLSSOを無効にする ", 
"url" : "アカウント/bitriseでのsamlsso.html#ワークスペースメンバーのsamlssoを無効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ ワークスペースメンバーのSAMLSSOを無効にする ", 
"snippet" : "ワークスペースの所有者は、ワークスペースメンバーのビットライズ上のワークスペースへのSAMLSSO接続を無効にできます。行うには3つの方法があります。 赤をクリックして、SAMLユーザーグループからユーザーを削除します NS [グループ]タブの名前の横にある記号。 ワークスペースからユーザーを削除します。 ユーザーをSAMLSSOプロバイダーから削除します。これは、ユーザーがSAMLSSOでログインできなくなることを意味します。...", 
"body" : "ワークスペースの所有者は、ワークスペースメンバーのビットライズ上のワークスペースへのSAMLSSO接続を無効にできます。行うには3つの方法があります。 赤をクリックして、SAMLユーザーグループからユーザーを削除します NS [グループ]タブの名前の横にある記号。 ワークスペースからユーザーを削除します。 ユーザーをSAMLSSOプロバイダーから削除します。これは、ユーザーがSAMLSSOでログインできなくなることを意味します。 " }, 
{ "title" : "SAMLSSO構成の更新 ", 
"url" : "アカウント/bitriseでのsamlsso.html#samlsso構成の更新", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ SAMLSSO構成の更新 ", 
"snippet" : "ワークスペースの設定済みSAMLSSOは、 SSOを更新する のボタン シングル・サインオン ページ。 これは、SAML SSOプロバイダーの証明書の有効期限が切れていて、新しい証明書をBitriseに挿入する場合に便利です。別の使用例は、たとえば、SAML SSOが少し前に設定されていて、現在の設定の詳細を確認したい場合です。 [SSO の更新] ボタンへのアクセス 他のSAMLSSO構成と同様に、ワークスペースの所有者のみが[SSOの更新]ボタンにアクセスして使用できます。 ワークスペースの所有者として、ワークスペースをクリックします シングルサインオン タブ。 クリック SSOを更新する...", 
"body" : "ワークスペースの設定済みSAMLSSOは、 SSOを更新する のボタン シングル・サインオン ページ。 これは、SAML SSOプロバイダーの証明書の有効期限が切れていて、新しい証明書をBitriseに挿入する場合に便利です。別の使用例は、たとえば、SAML SSOが少し前に設定されていて、現在の設定の詳細を確認したい場合です。 [SSO の更新] ボタンへのアクセス 他のSAMLSSO構成と同様に、ワークスペースの所有者のみが[SSOの更新]ボタンにアクセスして使用できます。 ワークスペースの所有者として、ワークスペースをクリックします シングルサインオン タブ。 クリック SSOを更新する ボタン。これで、WorkspaceのSAMLSSOの構成の詳細にアクセスできます。 変更を加えてクリックします 変更内容を保存 。 今後、SAMLSSOリクエストはすべて新しい設定を自動的に使用します。 " }, 
{ "title" : "Bitrise用のGoogleSSOの設定 ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のgooglessoの設定.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のGoogleSSOの設定 ", 
"snippet" : "GoogleWorkspaceを使用してBitriseWorkspaceにSAMLSSOを追加します。 このガイドでは、BitriseをGoogleWorkspaceでSAMLアプリケーションとして設定する手順を説明します。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレ...", 
"body" : "GoogleWorkspaceを使用してBitriseWorkspaceにSAMLSSOを追加します。 このガイドでは、BitriseをGoogleWorkspaceでSAMLアプリケーションとして設定する手順を説明します。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに接続する前に： BitriseをSAMLアプリとして追加できるGoogle管理者アカウントを持っていることを確認してください。 Google Workspace管理者は、GoogleWorkspaceでのSAMLSSOの設定を支援できます。 ワークスペースの所有者のみがビットライズワークスペースにSAMLSSOを設定できることに注意してください。 Bitriseのアカウントには、 VelocityまたはEnterpriseプラン 。 次のことを行う必要があります。 GoogleWorkspaceとBitriseから構成情報を取得します。 グループまたは組織単位のBitriseアプリを有効にします。 " }, 
{ "title" : "GoogleWorkspaceとBitriseから構成情報を取得する ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のgooglessoの設定.html#googleworkspaceとbitriseから構成情報を取得する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のGoogleSSOの設定 \/ GoogleWorkspaceとBitriseから構成情報を取得する ", 
"snippet" : "Google管理コンソールにサインインします。 選択する アプリ に 管理コンソール ページ。 [アプリ]ページで、[ SAMLアプリ 。 に Webおよびモバイルアプリ ページをクリックし、 アプリを追加する ボタンをクリックし、を選択します カスタムSAMLアプリを追加する ドロップダウンからのオプション。 アプリの詳細ページで追加 Bitrise アプリ名として。それがなければならないことに注意してください Bitrise 他の形式は受け入れられないため。クリック 継続する 。 に IDプロバイダーの詳細の取得 ページ： をコピーします SSO URL に貼り付けます SAML SSOプ...", 
"body" : "Google管理コンソールにサインインします。 選択する アプリ に 管理コンソール ページ。 [アプリ]ページで、[ SAMLアプリ 。 に Webおよびモバイルアプリ ページをクリックし、 アプリを追加する ボタンをクリックし、を選択します カスタムSAMLアプリを追加する ドロップダウンからのオプション。 アプリの詳細ページで追加 Bitrise アプリ名として。それがなければならないことに注意してください Bitrise 他の形式は受け入れられないため。クリック 継続する 。 に IDプロバイダーの詳細の取得 ページ： をコピーします SSO URL に貼り付けます SAML SSOプロバイダーシングルサインオンURL（SSO URL） Bitriseで。 のコンテンツ全体をコピーします 証明書 フィールドに貼り付けて SAMLSSOプロバイダー証明書 Bitriseのフィールド。あなたはアップロードすることができます 証明書 ローカルコンピュータからも。 Bitriseにいる間に、 リンクをコピーする ボタンをコピーして アサーションコンシューマサービスURL（ACS URL） 。すぐにGoogleWorkspaceで必要になります。クリックしないでください SSOを構成する 今すぐボタン！ に戻りましょう IDプロバイダーの詳細の取得 GoogleWorkspaceのページ。クリック 継続する 。 に サービスプロバイダーの詳細 ページ： 貼り付けます アサーションコンシューマサービスURL（ACS URL） のBitriseの ACSのURL GoogleWorkspaceのフィールド。 （ステップ7でリンクを取得したことを思い出してください。） タイプ Bitrise の中に エンティティID 分野。それがなければならないことに注意してください Bitrise 他の形式は受け入れられないため。 カチカチ音をたてる 署名された応答 下のチェックボックス 開始URL（オプション） 。 クリック 継続する 。 クリック SSOを構成する Bitriseのボタン。 GoogleWorkspaceの 属性マッピング ページをクリックします 終了 -ここで何も設定する必要はありません。 " }, 
{ "title" : "グループまたは組織単位のBitriseアプリを有効にする ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のgooglessoの設定.html#グループまたは組織単位のbitriseアプリを有効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のGoogleSSOの設定 \/ グループまたは組織単位のBitriseアプリを有効にする ", 
"snippet" : "G Suiteで行う必要があるのは、選択したグループまたは組織に対して新しく作成されたBitriseアプリを有効にすることだけです。 に移動します Webおよびモバイルアプリ G Suiteのページで、 ビットライズ から アプリ リスト。 クリック ユーザーアクセス に到達するために サービスステータス ページ。 選択する みんなのためにオン ヒット 保存する 。...", 
"body" : "G Suiteで行う必要があるのは、選択したグループまたは組織に対して新しく作成されたBitriseアプリを有効にすることだけです。 に移動します Webおよびモバイルアプリ G Suiteのページで、 ビットライズ から アプリ リスト。 クリック ユーザーアクセス に到達するために サービスステータス ページ。 選択する みんなのためにオン ヒット 保存する 。 " }, 
{ "title" : "Bitrise用のADFSSSOの設定 ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のadfsssoの設定.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のADFSSSOの設定 ", 
"snippet" : "Microsoft Active Directoryフェデレーションサービスを使用して、BitriseワークスペースにSAMLSSOを追加します。 このガイドでは、を使用してSAMLSSOを設定する手順を説明します。 Microsoft ActiveDirectoryフェデレーションサービス （AD FS）。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信...", 
"body" : "Microsoft Active Directoryフェデレーションサービスを使用して、BitriseワークスペースにSAMLSSOを追加します。 このガイドでは、を使用してSAMLSSOを設定する手順を説明します。 Microsoft ActiveDirectoryフェデレーションサービス （AD FS）。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに接続する前に： SAML SSO構成プロセス中に、ADFS管理者が手元にいることを確認してください。 ワークスペースの所有者のみがビットライズワークスペースにSAMLSSOを設定できることに注意してください。 Bitriseのアカウントには、 VelocityまたはEnterpriseプラン 。 このチュートリアルでは、BitriseとAD FSの間を行き来するため、このプロセス中に両方のツールを使用できるようにすることをお勧めします。 ADFSでSAMLSSOを構成するには、次のことを行う必要があります。 追加します IDプロバイダーのサインオンURL BitriseのADFSから 。 AD FSによって生成された証明書をエクスポートし、Bitriseに追加します 。 証明書利用者の信頼としてBitriseをADFSに追加します 。 クレームルールを構成する 。 " }, 
{ "title" : "IDプロバイダーのサインオンURLを追加する ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のadfsssoの設定.html#idプロバイダーのサインオンurlを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のADFSSSOの設定 \/ IDプロバイダーのサインオンURLを追加する ", 
"snippet" : "Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 に移動します シングル・サインオン タブ。 追加します IDプロバイダーのサインオンURL ADFSから SAML SSOプロバイダーシングルサインオンURL（SSO URL） 分野。 たとえば、有効な値は次のとおりです。 https:\/\/<AD FS URL>.com\/adfs\/ls 。...", 
"body" : "Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 に移動します シングル・サインオン タブ。 追加します IDプロバイダーのサインオンURL ADFSから SAML SSOプロバイダーシングルサインオンURL（SSO URL） 分野。 たとえば、有効な値は次のとおりです。 https:\/\/<AD FS URL>.com\/adfs\/ls 。 " }, 
{ "title" : "ADFS証明書のエクスポート ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のadfsssoの設定.html#adfs証明書のエクスポート", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のADFSSSOの設定 \/ ADFS証明書のエクスポート ", 
"snippet" : "ADFSによって生成された証明書をに追加する必要があります SAMLSSOプロバイダー証明書 のフィールド シングル・サインオン Bitriseのページ。 AD FSで証明書を既に作成している場合は、ADFSサーバーからPEM形式で証明書をエクスポートできます。まだ作成していない場合は、次の手順に従ってください。 ADFSのTSおよびTD証明書を取得して構成する 。 の サーバーマネージャー 、 クリック ツール 、を選択します ADFS管理 。 を選択 証明書 左側のメニューペインのフォルダ。 下の証明書をクリックします トークン署名 。これにより、 証明書 窓。 クリック 詳細 のタブ 証...", 
"body" : "ADFSによって生成された証明書をに追加する必要があります SAMLSSOプロバイダー証明書 のフィールド シングル・サインオン Bitriseのページ。 AD FSで証明書を既に作成している場合は、ADFSサーバーからPEM形式で証明書をエクスポートできます。まだ作成していない場合は、次の手順に従ってください。 ADFSのTSおよびTD証明書を取得して構成する 。 の サーバーマネージャー 、 クリック ツール 、を選択します ADFS管理 。 を選択 証明書 左側のメニューペインのフォルダ。 下の証明書をクリックします トークン署名 。これにより、 証明書 窓。 クリック 詳細 のタブ 証明書 ページ。 打つ 次 に 証明書のエクスポートウィザード 窓。 を選択 Base-64でエンコードされたX.509（.CER） エクスポートファイル形式。クリック 次 。 で名前を付けます ファイル名 フィールドとヒット 保存する 。 証明書の設定を最終的に確認してください。これらのいずれかを変更する必要がある場合は、横にある戻る矢印をクリックしてください 証明書のエクスポートウィザード 。それ以外の場合は、 終了 。すぐに必要になるため、ADFSウィンドウは開いたままにしてください。 エクスポートされた証明書をテキストエディタで開き、その内容をコピーして SAMLSSOプロバイダー証明書 フィールドに入力するか、ローカルコンピュータからファイル自体をアップロードします。 クリックして設定を保存します SSOを構成する Bitriseで。 Bitriseを追加して、ADFSでSAMLSSO構成を続行しましょう。 " }, 
{ "title" : "証明書利用者の信頼としてBitriseをADFSに追加する ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のadfsssoの設定.html#証明書利用者の信頼としてbitriseをadfsに追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のADFSSSOの設定 \/ 証明書利用者の信頼としてBitriseをADFSに追加する ", 
"snippet" : "証明書のエクスポートが完了したら、Bitriseを次のように追加し続けることができます。 ADFSへの証明書利用者の信頼 。証明書利用者信頼の追加ウィザードが手順をガイドします。 AD FSで、をクリックします 依拠当事者の信頼 左側のメニューバーで、をクリックします 依拠当事者の信頼 。 選択する 依拠当事者の信頼を追加する 下 行動 。 に いらっしゃいませ ページで、 クレーム認識 オプションとヒット 始める 。 に データソースを選択 ページをクリックし、 証明書利用者に関するデータを手動で入力する ページ下部のオプション。クリック 次 。 に 表示名を指定する ページ、追加 表示名、...", 
"body" : "証明書のエクスポートが完了したら、Bitriseを次のように追加し続けることができます。 ADFSへの証明書利用者の信頼 。証明書利用者信頼の追加ウィザードが手順をガイドします。 AD FSで、をクリックします 依拠当事者の信頼 左側のメニューバーで、をクリックします 依拠当事者の信頼 。 選択する 依拠当事者の信頼を追加する 下 行動 。 に いらっしゃいませ ページで、 クレーム認識 オプションとヒット 始める 。 に データソースを選択 ページをクリックし、 証明書利用者に関するデータを手動で入力する ページ下部のオプション。クリック 次 。 に 表示名を指定する ページ、追加 表示名、 例えば MyCorp 。クリック 次 。 でトークン暗号化証明書を指定します 証明書を構成する ページはオプションです。クリック 次 。 に URを構成する Lページ、選択 SAML 2.0WebSSOプロトコルのサポートを有効にする コピーして貼り付けます アサーションコンシューマサービスURL（ACS URL） Bitriseから 証明書利用者SAML2。0SSOサービスURL ADFSのフィールド。クリック 次 。 に 識別子を構成する ページ、追加 Bitrise の中に 証明書利用者の信頼識別子 分野。クリック 追加 、次にヒット 次 。 のデフォルトのアクセス制御ポリシーを変更しないでください アクセス制御ポリシーを選択します 誰もがこのSAMLSSO接続にアクセスできるようにするためのページ。クリック 次 。 に 信頼を追加する準備ができました ページで、設定を確認して、をクリックします 次 。 に 終了 ページで、チェックボックスをオンにして、Bitriseの請求発行ポリシーを編集します。クリック 選ぶ 。 AD FSで、をクリックします 依拠当事者の信頼 左側のメニューバーで、をクリックします 依拠当事者の信頼 。 選択する 依拠当事者の信頼を追加する 下 行動 。 に いらっしゃいませ ページで、 クレーム認識 オプションとヒット 始める 。 に データソースを選択 ページをクリックし、 証明書利用者に関するデータを手動で入力する ページ下部のオプション。クリック 次 。 に 表示名を指定する ページ、追加 表示名、 例えば MyCorp 。クリック 次 。 でトークン暗号化証明書を指定します 証明書を構成する ページはオプションです。クリック 次 。 に URを構成する Lページ、選択 SAML 2.0WebSSOプロトコルのサポートを有効にする コピーして貼り付けます アサーションコンシューマサービスURL（ACS URL） Bitriseから 証明書利用者SAML2。0SSOサービスURL ADFSのフィールド。クリック 次 。 に 識別子を構成する ページ、追加 Bitrise の中に 証明書利用者の信頼識別子 分野。クリック 追加 、次にヒット 次 。 のデフォルトのアクセス制御ポリシーを変更しないでください アクセス制御ポリシーを選択します 誰もがこのSAMLSSO接続にアクセスできるようにするためのページ。クリック 次 。 に 信頼を追加する準備ができました ページで、設定を確認して、をクリックします 次 。 に 終了 ページで、チェックボックスをオンにして、Bitriseの請求発行ポリシーを編集します。クリック 選ぶ 。 " }, 
{ "title" : "クレームルールの構成 ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のadfsssoの設定.html#クレームルールの構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のADFSSSOの設定 \/ クレームルールの構成 ", 
"snippet" : "に クレームの編集 発行方針 ページをクリックし、 ルールを追加 ボタンを押して押します わかった 。 を作成します LDAP属性をクレームとして送信する ルールを要求してクリックします 次 。 に クレームルールの構成 ページ： [電子メールの送信]などのルール名をに追加します。 クレームルール名 分野。 を選択します 属性ストア これはおそらくActiveDirectoryです。 の中に LDAP属性の発信クレームタイプへのマッピング フィールドで[電子メールアドレス]を選択します。 クリック 終了 。 電子メールをフォーマッタNameIDに変換する別の新しいルールを追加します。これを行う...", 
"body" : "に クレームの編集 発行方針 ページをクリックし、 ルールを追加 ボタンを押して押します わかった 。 を作成します LDAP属性をクレームとして送信する ルールを要求してクリックします 次 。 に クレームルールの構成 ページ： [電子メールの送信]などのルール名をに追加します。 クレームルール名 分野。 を選択します 属性ストア これはおそらくActiveDirectoryです。 の中に LDAP属性の発信クレームタイプへのマッピング フィールドで[電子メールアドレス]を選択します。 クリック 終了 。 電子メールをフォーマッタNameIDに変換する別の新しいルールを追加します。これを行うには、をクリックします ルールを追加 の中に クレームの編集 発行方針 もう一度ページ。 に ルールテンプレートを選択 、 選択する 着信クレームを変換する のオプション クレームルールテンプレート 落ちる。クリック 次 。 たとえば、新しいルールに名前を付けます。 Transform E-mail 。 選択する 電子メールアドレス として 着信クレームタイプ 。 選択する NameId として 発信クレームタイプ。 選ぶ Eメール として 発信名ID形式 。 打つ わかった プロセスを終了します。 " }, 
{ "title" : "Bitrise用のAzureADSSOのセットアップ ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のazureadssoのセットアップ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のAzureADSSOのセットアップ ", 
"snippet" : "AzureADを使用してBitriseワークスペースにSAMLSSOを追加します。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに接続する前に： AzureADにログインしているAzureAD管理者が手元にあることを確...", 
"body" : "AzureADを使用してBitriseワークスペースにSAMLSSOを追加します。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに接続する前に： AzureADにログインしているAzureAD管理者が手元にあることを確認してください。 ワークスペースの所有者のみがビットライズワークスペースにSAMLSSOを設定できることに注意してください。 Bitriseのアカウントには、 VelocityまたはEnterpriseプラン 。 次のことを行う必要があります。 新しいアプリケーションとしてBitriseをAzureADに追加する 。 AzureADのBitriseアプリにユーザーとグループを追加します 。 BitriseとAzureADの間にSAMLSSOを設定する 。 " }, 
{ "title" : "新しいアプリケーションとしてAzureADにBitriseを追加する ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のazureadssoのセットアップ.html#新しいアプリケーションとしてazureadにbitriseを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のAzureADSSOのセットアップ \/ 新しいアプリケーションとしてAzureADにBitriseを追加する ", 
"snippet" : "ログインする Microsoft Azure 管理者として。 クリック Azure Active Directory 上のアイコン Azureサービス ページ。 クリック エンタープライズアプリケーション 下 管理 。 クリック 新しいアプリ Bitriseを新しいアプリとしてアカウントに追加します。 タイプ Bitrise の中に あなたのアプリの名前は何ですか？ 分野。 NS ギャラリーにない他のアプリケーションを統合する ボタンは自動的に選択されます。打つ 作成 。 新しく作成したアプリは、 すべてのアプリケーション ページ。 クリック ビットライズ そのに行くアプリ 概要 ページ。 B...", 
"body" : "ログインする Microsoft Azure 管理者として。 クリック Azure Active Directory 上のアイコン Azureサービス ページ。 クリック エンタープライズアプリケーション 下 管理 。 クリック 新しいアプリ Bitriseを新しいアプリとしてアカウントに追加します。 タイプ Bitrise の中に あなたのアプリの名前は何ですか？ 分野。 NS ギャラリーにない他のアプリケーションを統合する ボタンは自動的に選択されます。打つ 作成 。 新しく作成したアプリは、 すべてのアプリケーション ページ。 クリック ビットライズ そのに行くアプリ 概要 ページ。 BitriseをSAMLアプリとして構成し続けます。 " }, 
{ "title" : "AzureADのアプリにユーザー\/グループを追加する ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のazureadssoのセットアップ.html#azureadのアプリにユーザー-グループを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のAzureADSSOのセットアップ \/ AzureADのアプリにユーザー\/グループを追加する ", 
"snippet" : "アプリにSAMLを設定する前に、AzureADのアプリにすべてのユーザー\/グループを追加する必要があります。AzureADはSAMLSSOを使用してビットライズワークスペースにログインします。つまり、すべてのBitriseWorkspaceメンバーをAzureADのユーザーとして追加する必要があります。 選択する ユーザーとグループ 左のメニューから。 クリック +ユーザー\/グループを追加 。 のユーザーページ 割り当てを追加 、リストからユーザーを選択して、をクリックします 選択する 。完了したら、[ 役割を選択してください 落ちる。 に 割り当てを追加 ページをクリックします 割当 ユーザ...", 
"body" : "アプリにSAMLを設定する前に、AzureADのアプリにすべてのユーザー\/グループを追加する必要があります。AzureADはSAMLSSOを使用してビットライズワークスペースにログインします。つまり、すべてのBitriseWorkspaceメンバーをAzureADのユーザーとして追加する必要があります。 選択する ユーザーとグループ 左のメニューから。 クリック +ユーザー\/グループを追加 。 のユーザーページ 割り当てを追加 、リストからユーザーを選択して、をクリックします 選択する 。完了したら、[ 役割を選択してください 落ちる。 に 割り当てを追加 ページをクリックします 割当 ユーザーの追加を終了します。 " }, 
{ "title" : "BitriseとAzureAD間のSAMLSSOのセットアップ ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のazureadssoのセットアップ.html#bitriseとazuread間のsamlssoのセットアップ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のAzureADSSOのセットアップ \/ BitriseとAzureAD間のSAMLSSOのセットアップ ", 
"snippet" : "クリック シングル・サインオン 左側のメニュー。選択する SAML 。 あなたはに着陸します SAMLを使用したシングルサインオンのセットアップ ページ。 で鉛筆記号をクリックします 基本的なSAML構成 2つのフィールドを編集します。 追加 Bitrise として 識別子（エンティティID） 。このウィンドウは開いたままにしておきます。 Bitriseからのいくつかの情報ですぐに戻ってきます。 Bitriseのワークスペースに戻ります。 クリック シングル・サインオン タブをクリックし、 リンクをコピーする コピーするボタン アサーションコンシューマサービスURL（ACS URL） Bitr...", 
"body" : "クリック シングル・サインオン 左側のメニュー。選択する SAML 。 あなたはに着陸します SAMLを使用したシングルサインオンのセットアップ ページ。 で鉛筆記号をクリックします 基本的なSAML構成 2つのフィールドを編集します。 追加 Bitrise として 識別子（エンティティID） 。このウィンドウは開いたままにしておきます。 Bitriseからのいくつかの情報ですぐに戻ってきます。 Bitriseのワークスペースに戻ります。 クリック シングル・サインオン タブをクリックし、 リンクをコピーする コピーするボタン アサーションコンシューマサービスURL（ACS URL） Bitriseから。 に戻りましょう 基本的なSAML構成 AzureADのウィンドウ。 貼り付けます アサーションコンシューマサービスのURL Bitriseから 基本的なSAML構成の返信URLフィールド AzureADのページ。 クリック 保存する を閉じます 基本的なSAML構成 窓。 に シングル・サインオン Azure ADのページで、下にスクロールして Bitriseを設定する セクション。 をコピーします ログインURL に貼り付けます SAMLSSOプロバイダーのシングルサインオンURL （SSO URL） Bitriseのフィールド。 に シングル・サインオン Azure ADのページで、少し上にスクロールして SAML署名証明書 セクション。 クリック ダウンロード の隣に 証明書（Base64） 証明書をローカルコンピューターにダウンロードします。 証明書ファイルを開き、その内容をコピーしてに貼り付けます SAMLSSOプロバイダー証明書 Bitriseのフィールド、またはローカルコンピュータからファイル自体をアップロードすることもできます。 （コンテンツを手動で追加する場合は、完全なコンテンツが必要になります（ ----BEGIN CERTIFICATE----- と -----END CERTIFICATE----- 同様に）。 打つ SSOを構成する Bitriseで。 これで、AzureADでBitriseをSAMLSSOアプリとして正常にセットアップできました。 " }, 
{ "title" : "Bitrise用のAuth0SSOの設定 ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のauth0ssoの設定.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のAuth0SSOの設定 ", 
"snippet" : "Auth0を使用してBitriseワークスペースにSAMLSSOを追加します。 このガイドでは、を使用してSAMLSSOを設定する手順について説明します。 Auth0 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに...", 
"body" : "Auth0を使用してBitriseワークスペースにSAMLSSOを追加します。 このガイドでは、を使用してSAMLSSOを設定する手順について説明します。 Auth0 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに接続する前に： Auth0にログインしているAuth0管理者が手元にあります。 ワークスペースの所有者のみがビットライズワークスペースにSAMLSSOを設定できることに注意してください。 Bitriseのアカウントには、 VelocityまたはEnterpriseプラン 。 次のことを行う必要があります。 Auth0でWebアプリケーションとしてBitriseを作成します 。 Auth0からSAMLSSO情報を取得します 。 BitriseアプリのクライアントIDのマッピングルールを設定する 。 " }, 
{ "title" : "Auth0でWebアプリケーションとしてBitriseを作成する ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のauth0ssoの設定.html#auth0でwebアプリケーションとしてbitriseを作成する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のAuth0SSOの設定 \/ Auth0でWebアプリケーションとしてBitriseを作成する ", 
"snippet" : "ログインする Auth0 管理者として。 クリック アプリケーション 左側のメニューバーで、 +アプリケーションを作成する の右側にあるボタン アプリケーション ページ。 に アプリケーションを作成する ウィンドウで、「Bitrise」と入力します。 名前 分野。の中に アプリケーションタイプを選択してください 選択する 通常のWebアプリケーション 、をクリックし、 作成 ボタン。 新しく作成したBitriseアプリに着陸します クイックスタート ページ。クリック アドオン タブ。トグル SAML2 WEB APP のスイッチを右に切り替えます。これはにかかります アドオン：SAML2 WE...", 
"body" : "ログインする Auth0 管理者として。 クリック アプリケーション 左側のメニューバーで、 +アプリケーションを作成する の右側にあるボタン アプリケーション ページ。 に アプリケーションを作成する ウィンドウで、「Bitrise」と入力します。 名前 分野。の中に アプリケーションタイプを選択してください 選択する 通常のWebアプリケーション 、をクリックし、 作成 ボタン。 新しく作成したBitriseアプリに着陸します クイックスタート ページ。クリック アドオン タブ。トグル SAML2 WEB APP のスイッチを右に切り替えます。これはにかかります アドオン：SAML2 WEB APP 自動的にページ。 をコピーします アサーションコンシューマサービスURL（ACS URL） Bitriseから、それをに貼り付けます アプリケーションのコールバックURL 上のフィールド 設定 のタブ アドオン：SAML2 WEB APP ページ。一番下までスクロールします アドオン：SAML2 WEB APP ページとヒット 保存する 。 に戻る アドオン スイッチがオンになっているページ。 " }, 
{ "title" : "Auth0からSAMLSSO情報を取得する ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のauth0ssoの設定.html#auth0からsamlsso情報を取得する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のAuth0SSOの設定 \/ Auth0からSAMLSSO情報を取得する ", 
"snippet" : "Auth0でWebアプリケーションとしてBitriseを有効にしたら、証明書とIDプロバイダーの一意のログインURLを取得して、BitriseでのSAML構成を完了します。 Auth0で、 応用 、次にを選択します アドオン タブをクリックして、有効なBitriseアプリを見つけます。 クリック SAML2 WEB APP Webアプリを選択し、 使用法 タブ。クリックしてください Auth0証明書をダウンロードする の横にあるリンク IDプロバイダー証明書 ラベル。ダウンロードした証明書ファイルを開き、その内容をにコピーします。 SAMLSSOプロバイダー証明書 Bitriseのフィールド、...", 
"body" : "Auth0でWebアプリケーションとしてBitriseを有効にしたら、証明書とIDプロバイダーの一意のログインURLを取得して、BitriseでのSAML構成を完了します。 Auth0で、 応用 、次にを選択します アドオン タブをクリックして、有効なBitriseアプリを見つけます。 クリック SAML2 WEB APP Webアプリを選択し、 使用法 タブ。クリックしてください Auth0証明書をダウンロードする の横にあるリンク IDプロバイダー証明書 ラベル。ダウンロードした証明書ファイルを開き、その内容をにコピーします。 SAMLSSOプロバイダー証明書 Bitriseのフィールド、またはローカルコンピュータからファイル自体をアップロードします。 Auth0に戻り、コピーして貼り付けます IDプロバイダーのログインURL Bitriseに SAML SSOプロバイダーシングルサインオンURL（SSO URL） 。 クリック SSOを構成する Bitriseのボタン。 これで、Auth0のダイアログを閉じることができます。 " }, 
{ "title" : "BitriseアプリのクライアントIDのマッピングルールを設定する ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のauth0ssoの設定.html#bitriseアプリのクライアントidのマッピングルールを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のAuth0SSOの設定 \/ BitriseアプリのクライアントIDのマッピングルールを設定する ", 
"snippet" : "Bitriseは電子メールアドレスを介してSAMLSSOユーザーを認証するため、SAML SSOをテストする前に、Auth0で新しいマッピングルールを作成するようにしてください。このようにして、BitriseでSAML認証を成功させるためにAuth0クライアントIDを電子メールにマッピングします。 Auth0で、 認証パイプライン 左側のメニューバーにあります。クリック ルール 。 クリック +作成 新しいマッピングルールを設定します。 に ルールテンプレートを選択してください ページをクリックします <>空のルール 。 次のコードブロックをに追加します 脚本 ボックス：新しいBitriseア...", 
"body" : "Bitriseは電子メールアドレスを介してSAMLSSOユーザーを認証するため、SAML SSOをテストする前に、Auth0で新しいマッピングルールを作成するようにしてください。このようにして、BitriseでSAML認証を成功させるためにAuth0クライアントIDを電子メールにマッピングします。 Auth0で、 認証パイプライン 左側のメニューバーにあります。クリック ルール 。 クリック +作成 新しいマッピングルールを設定します。 に ルールテンプレートを選択してください ページをクリックします <>空のルール 。 次のコードブロックをに追加します 脚本 ボックス：新しいBitriseアプリのクライアントIDが必要になります。 アプリケーション 'ページ。 function mapSamlAttributes(user, context, callback) {\n if (context.clientID === '{your app's clientID'}')\n context.samlConfiguration.mappings = {\n \"http:\/\/schemas.xmlsoap.org\/ws\/2005\/05\/identity\/claims\/nameidentifier\": \"email\"\n }; \n }\n callback(null, user, context);\n} クリック 変更内容を保存 。 " }, 
{ "title" : "Bitrise用のIdaptiveSAMLSSOのセットアップ ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のidaptivesamlssoのセットアップ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のIdaptiveSAMLSSOのセットアップ ", 
"snippet" : "Idaptiveを使用して、BitriseワークスペースにSAMLSSOを追加します。 このガイドでは、BitriseをSAMLアプリケーションとして設定する手順を説明しています。 適応性 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML S...", 
"body" : "Idaptiveを使用して、BitriseワークスペースにSAMLSSOを追加します。 このガイドでは、BitriseをSAMLアプリケーションとして設定する手順を説明しています。 適応性 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに接続する前に： ワークスペースの所有者のみがビットライズワークスペースにSAMLSSOを設定できることに注意してください。 Bitriseのアカウントには、 VelocityまたはEnterpriseプラン 。 で管理ポータルにログインする必要があります 適応性 BitriseをSAMLSSOアプリとしてセットアップし、BitriseとIdaptive間の接続を確立します。を使用している場合 ユーザーポータル 、 切り替える 管理者ポータル Idaptiveでアバターをクリックします。 管理者としてIdaptiveにログインします。 に移動 アプリ、 その後に Webアプリ 。クリック Webアプリを追加する 右側のボタン。 に カスタム タブをクリックして選択します SAML 、をクリックします 追加 。に Webアプリを追加する ポップアップヒット はい 。 選ぶ 窓。自動的にに移動します 設定 ページ。 Bitriseをに追加します 名前 と アプリケーションID 上のフィールド 設定 ページをクリックしてクリックします 保存する 。 クリック 信頼 左側のメニューバーで、 手動構成 下 IDプロバイダーの構成 。 クリック 署名証明書 ドロップダウンして証明書をダウンロードします。証明書の全内容をコピーできるように、テキストエディタで開きます。ファイルをアップロードすることもできます。 コンテンツを挿入するか、ファイル自体をにアップロードします SAMLSSOプロバイダー証明書 のテキストボックス シングルサインオンを有効にする Bitriseのページ。 をコピーします シングルサインオンURL から 信頼 Idaptiveのページ。に挿入します SAML SSOプロバイダーシングルサインオンURL（SSO URL） 上のフィールド シングルサインオンを有効にする Bitriseのページ。 にいる間 シングルサインオンページ Bitriseの、コピー アサーションコンシューマサービスURL（ACS URL） URLをクリックします SSOを構成する 。 では、Idaptiveに戻りましょう。下 サービスプロバイダーの構成 クリック 手動構成 。タイプ ビットライズ の中に SPエンティティID \/発行者\/対象者 貼り付けます アサーションコンシューマサービスURL（ACS URL） Bitriseから アサーションコンシューマサービス（ACS）のURL Idaptiveについて。 下にスクロールして NameIDフォーマット 選択します 電子メールアドレス 。クリック 保存する 。 に移動 権限 をクリックします 追加 ボタン。の中に ユーザー、グループ、または役割を選択します ポップアップで、SAMLアプリに追加するユーザー名を入力します。それを選択してヒット 追加 。変更を保存します。これにより、BitriseSAMLアプリのステータスが次のように変更されます。 展開 。 これで、BitriseのSAMLSSOプロバイダーとしてIdaptiveを使用する準備が整いました。 " }, 
{ "title" : "Bitrise用のOktaSSOのセットアップ ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のoktassoのセットアップ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のOktaSSOのセットアップ ", 
"snippet" : "Oktaを使用してBitriseワークスペースにSAMLSSOを追加します。 このガイドでは、BitriseをSAMLアプリケーションとして設定する手順を説明しています。 オクタ 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワー...", 
"body" : "Oktaを使用してBitriseワークスペースにSAMLSSOを追加します。 このガイドでは、BitriseをSAMLアプリケーションとして設定する手順を説明しています。 オクタ 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに接続する前に： 手元にOktaにログインしているOkta管理者がいることを確認してください。 ワークスペースの所有者のみがビットライズワークスペースにSAMLSSOを設定できることに注意してください。 Bitriseのアカウントには、 VelocityまたはEnterpriseプラン 。 OktaにBitriseを追加する 。 BitriseをSAMLアプリとして構成する 。 " }, 
{ "title" : "OktaにBitriseを追加する ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のoktassoのセットアップ.html#oktaにbitriseを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のOktaSSOのセットアップ \/ OktaにBitriseを追加する ", 
"snippet" : "BitriseはOktaに統合されたアプリではありません。最初にBitriseをOktaに手動で追加する必要があります。その後、SAMLSSOを構成できます。 Bitrise WorkspaceアカウントからOktaにジャンプするので、両方のページが使用可能であることを確認してください。実際には、これは、ワークスペースの所有者がBitriseにログインし、Okta管理者がOktaにログインする必要があることを意味します。 Oktaにログインしてクリック 管理者 。 ダッシュボードでクリック アプリケーションの追加 下 ショートカット 。 緑をクリックします 新しいアプリを作成する ボタン。 N...", 
"body" : "BitriseはOktaに統合されたアプリではありません。最初にBitriseをOktaに手動で追加する必要があります。その後、SAMLSSOを構成できます。 Bitrise WorkspaceアカウントからOktaにジャンプするので、両方のページが使用可能であることを確認してください。実際には、これは、ワークスペースの所有者がBitriseにログインし、Okta管理者がOktaにログインする必要があることを意味します。 Oktaにログインしてクリック 管理者 。 ダッシュボードでクリック アプリケーションの追加 下 ショートカット 。 緑をクリックします 新しいアプリを作成する ボタン。 NS 新しいアプリケーション統合を作成する 画面が表示されます。 選択する SAML 2.0 オプションで メソッドで歌う をクリックします 作成 。 で 一般設定 ステップ、Bitriseをに入力します アプリ名 分野。 （オプションで、必要に応じてアプリのロゴを追加できます。）をクリックします。 次 。 Bitriseワークスペースに移動し、 シングル・サインオン 左側のメニューのタブ。 クリック リンクをコピーする コピーするボタン アサーションコンシューマサービスURL（ACS URL） 。 Okta'sに戻る SAML設定 手順7でコピーしたURLをに貼り付けます シングルサインオンURL 入力フィールド。 でBitriseと入力します オーディエンスURI（SPエンティティID） 。 今すぐOkta証明書ファイルをダウンロードして、その内容を貼り付けるか、ファイル自体をにアップロードできます。 SAMLSSOプロバイダー証明書 Bitriseワークスペースのフィールド シングル・サインオン ページ。あなたが記入する必要があるので、後でそれを残す場合はさらに簡単です アサーションコンシューマサービスURL（ACS URL） とにかくBitriseで。これは、BitriseをOktaでSAMLアプリとして構成するときに取得します。叩かないで SSOを構成する に シングルサインオン Bitriseのページはまだです。 クリック 次 。 記入してください フィードバック セクション。打つ 終了 。 おめでとうございます！ BitriseがアプリとしてOktaに正常に追加されました。 " }, 
{ "title" : "OktaのSAMLアプリとしてのBitriseの構成 ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のoktassoのセットアップ.html#oktaのsamlアプリとしてのbitriseの構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のOktaSSOのセットアップ \/ OktaのSAMLアプリとしてのBitriseの構成 ", 
"snippet" : "クリック 課題 Bitriseアプリのタブ。 ここでは、Bitriseを個人\/グループに割り当てることができます。 SAMLを介してBitriseワークスペースにアクセスするすべてのワークスペースメンバーにBitriseを割り当ててください。 クリック 入社する Bitriseアプリのタブ。 SAMLセットアップがまだ完了していないことがわかります。クリック セットアップ手順を表示する 。 NS Bitriseアプリケーション用にSAML2.0を構成する方法 ページが表示されます。 BitriseとOkta間のSAML接続をセットアップするために必要なすべての情報を要約しています。 をコピーし...", 
"body" : "クリック 課題 Bitriseアプリのタブ。 ここでは、Bitriseを個人\/グループに割り当てることができます。 SAMLを介してBitriseワークスペースにアクセスするすべてのワークスペースメンバーにBitriseを割り当ててください。 クリック 入社する Bitriseアプリのタブ。 SAMLセットアップがまだ完了していないことがわかります。クリック セットアップ手順を表示する 。 NS Bitriseアプリケーション用にSAML2.0を構成する方法 ページが表示されます。 BitriseとOkta間のSAML接続をセットアップするために必要なすべての情報を要約しています。 をコピーします IDプロバイダーのシングルサインオンURL Bitriseワークスペースに貼り付けます SAML SSOプロバイダーシングルサインオンURL（SSO URL） 。 証明書のコンテンツを貼り付けていない場合、またはファイル自体をにアップロードしていない場合 SAMLSSOプロバイダー証明書 Bitrise Workspaceのフィールドはまだですが、このページに表示されているので、これを実行できます。 クリック SSOを構成する Bitriseワークスペースで。 " }, 
{ "title" : "Bitrise用のPingIdentitySSOの設定 ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のpingidentityssoの設定.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のPingIdentitySSOの設定 ", 
"snippet" : "Ping Identityを使用して、BitriseワークスペースにSAMLSSOを追加します。 このガイドでは、BitriseをSAMLSSOアプリケーションとして設定する手順を説明します。 ping ID 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてくだ...", 
"body" : "Ping Identityを使用して、BitriseワークスペースにSAMLSSOを追加します。 このガイドでは、BitriseをSAMLSSOアプリケーションとして設定する手順を説明します。 ping ID 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに接続する前に： ログインしているPingOne管理者 PingOne 。 ワークスペースの所有者のみがビットライズワークスペースにSAMLSSOを設定できることに注意してください。 Bitriseのアカウントには、 VelocityまたはEnterpriseプラン 。 BitriseをPingIdentityに追加するには： クリック アプリケーション のトップバーに PingOne 。 オン 私のアプリケーション タブ、確認してください SAML が選択されています。クリック アプリケーションを追加 ドロップダウンして選択します 新しいSAMLアプリケーション 。 で アプリケーションの詳細、 必要なフィールドに入力して、をクリックします 次のステップに進む 。 で アプリケーション構成 、 出て SAML構成を持っています 選択されました。以下に記入してください。 アサーションコンシューマサービス（ACS） フィールド：を挿入します アサーションコンシューマサービスURL（ACS URL） Bitriseワークスペースからここにリンクします シングル・サインオン タブ。 エンティティIDフィールド ： タイプ Bitrise 。 署名 ： クリック サインレスポンス オプション。 上記の設定の概要は次のとおりです。 次のステップに進みます。 で SSO属性マッピング 、何も変更する必要はありません。次の手順に進みます。 で グループアクセス 、グループをアプリケーションに追加します。これらのグループは、SAMLSSOを介してBitriseにアクセスできるようになります。次のステップに進みます。 で セットアップの確認 ページで、前の手順で指定した詳細を再確認できます。このレビューページから次のファイルをダウンロードしてください。 クリック ダウンロード 取得するには 署名証明書 と SAMLメタデータ ファイル。 クリック 終了 。 2つのファイルを開いてみましょう。 のコンテンツ全体をコピーします SAMLメタデータ ファイルに貼り付けます SAMLSSOプロバイダー 証明書 あなたのBitriseのフィールド シングル・サインオン ページ。 を開きます 署名証明書 ファイルを作成してコピーします HTTP-POST SingleSignOnService Location リンクして貼り付けます SAML SSOプロバイダーシングルサインオンURL（SSO URL） Bitriseのフィールド。 クリック SSOを構成する Bitriseで。 これで、BitriseワークスペースにSAMLSSOが設定されました。 " }, 
{ "title" : "Bitrise用のOneLoginSSOのセットアップ ", 
"url" : "アカウント/bitriseでのsamlsso/bitrise用のoneloginssoのセットアップ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ BitriseでのSAMLSSO \/ Bitrise用のOneLoginSSOのセットアップ ", 
"snippet" : "OneLoginを使用して、BitriseワークスペースにSAMLSSOを追加します。 このガイドでは、BitriseをSAMLアプリケーションとして設定する手順を説明しています。 OneLogin 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 S...", 
"body" : "OneLoginを使用して、BitriseワークスペースにSAMLSSOを追加します。 このガイドでは、BitriseをSAMLアプリケーションとして設定する手順を説明しています。 OneLogin 。 SAMLSSOの制限 SAML SSOは、 VelocityまたはEnterpriseBuildプラン 。 SAML SSO機能は上記のプランに関連付けられているため、ダウングレードする場合は、この機能が失われます。ワークスペースのすべてのメンバーにダウングレードに関する電子メールが送信されます。ワークスペースでSAMLSSOを再度使用する場合は、2週間以内に再アップグレードしてください。 SAML SSOをワークスペースに接続する前に： BitriseでSAMLSSO接続をセットアップするときは、OneLoginの管理者が手元にあることを確認してください。 ワークスペースの所有者のみがビットライズワークスペースにSAMLSSOを設定できることに注意してください。 Bitriseのアカウントには、 VelocityまたはEnterpriseプラン 。 OneLoginでBitriseを構成するには： ログインする OneLogin 管理者として。 クリック 管理 トップバーに。 選択する アプリケーション をクリックします アプリを追加 。これはあなたをに連れて行きます アプリケーションを探す ページ。 タイプ Bitrise 検索バーで、を選択します SAML2.0 検索結果から入力します。 クリック 構成 左側のサイドバーのタブ。必要に応じて、アイコンを変更したり、説明を追加したりできます。確実に 組織（ビットライズ） がチェックされています。打つ 保存する 。 クリック 構成 もう一度タブを押して貼り付けます アサーションコンシューマサービスURL（ACS URL） Bitriseワークスペースから シングル・サインオン タブに シングルサインオンURL OneLoginのフィールド。打つ 保存する の OneLogin 。 選択する SSO 左側のサイドバーにあります。 クリック 詳細を見る X.509証明書の場合。の内容をコピーします X.509証明書 に貼り付けます SAMLSSOプロバイダー証明書 上のフィールド シングルサインオンを有効にする Bitriseのページ。 に戻る SSO OneLoginのページを作成し、 SAML 2.0エンドポイント（HTTP） リンク。に貼り付けます SAML SSOプロバイダーシングルサインオンURL（SSO URL） Bitriseのフィールド。 Bitriseに戻り、クリックします SSOを構成する 。 OneLoginとBitriseのユーザー Bitriseワークスペースのユーザーがすべてに追加されていることを確認してください ユーザー OneLoginのページ。そうでない場合は、 ユーザー 、 それから 新しいユーザー 新しいユーザーを追加します。招待状を送信することを忘れないでください（ その他のアクション ドロップダウンメニュー、 招待状を送信する ）新しいユーザーに送信して、ユーザーがOneLoginで自分のアカウントをアクティブ化できるようにします。ユーザーは、をクリックして、新しく作成されたBitriseアプリに追加する必要があります アプリケーション 下 ユーザー情報 をクリックします + サイン。追加されたユーザーがすべてBitriseのWorkspaceメンバーであることを確認してください。 OneLoginでのBitriseのセットアップを完了し、それをBitrise Workspaceに接続すると、すべてのWorkspaceメンバーは、BitriseWorkspaceへのSSO接続をアクティブ化するためのリンクを含む電子メールをBitriseから受け取ります。 " }, 
{ "title" : "プロファイル設定の編集 ", 
"url" : "アカウント/プロファイル設定の編集.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ プロファイル設定の編集 ", 
"snippet" : "プロファイル設定ページで、ユーザー名、パスワード、アカウントアバターなどのプロファイル設定を編集できます。 に プロファイル設定 ページ、あなたはすることができます： ユーザー名と関連するメールアドレスを変更します。 パスワードを変更してください。 個人情報と会社情報を更新します。 最初のワークスペースの作成 ワークスペース...", 
"body" : "プロファイル設定ページで、ユーザー名、パスワード、アカウントアバターなどのプロファイル設定を編集できます。 に プロファイル設定 ページ、あなたはすることができます： ユーザー名と関連するメールアドレスを変更します。 パスワードを変更してください。 個人情報と会社情報を更新します。 最初のワークスペースの作成 ワークスペース " }, 
{ "title" : "Bitriseのユーザー名、メールアドレス、パスワードを変更する ", 
"url" : "アカウント/プロファイル設定の編集.html#bitriseのユーザー名-メールアドレス-パスワードを変更する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ プロファイル設定の編集 \/ Bitriseのユーザー名、メールアドレス、パスワードを変更する ", 
"snippet" : "右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 ユーザー名を変更するには、に新しいユーザー名を入力します ユーザー名 分野。 メールアドレスを変更するには、に新しいメールアドレスを入力してください Eメール 分野。 パスワードを変更するには、に新しいパスワードを入力します パスワード フィールドに入力し、 パスワードを認証する 分野。 完了したら、をクリックします アップデート 。...", 
"body" : "右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 ユーザー名を変更するには、に新しいユーザー名を入力します ユーザー名 分野。 メールアドレスを変更するには、に新しいメールアドレスを入力してください Eメール 分野。 パスワードを変更するには、に新しいパスワードを入力します パスワード フィールドに入力し、 パスワードを認証する 分野。 完了したら、をクリックします アップデート 。 " }, 
{ "title" : "アカウントにアバターを追加する ", 
"url" : "アカウント/プロファイル設定の編集.html#アカウントにアバターを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ プロファイル設定の編集 \/ アカウントにアバターを追加する ", 
"snippet" : "Bitriseアカウントに独自のパーソナライズされたアバターを追加できます。 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側のアカウント名の上にあるデフォルトのアバターを見つけます。 画像をクリックしてください。 新しいアバターをドラッグアンドドロップします アバターを変更する ウィンドウ、またはをクリックします ブラウズ コンピュータから画像を選択します。...", 
"body" : "Bitriseアカウントに独自のパーソナライズされたアバターを追加できます。 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側のアカウント名の上にあるデフォルトのアバターを見つけます。 画像をクリックしてください。 新しいアバターをドラッグアンドドロップします アバターを変更する ウィンドウ、またはをクリックします ブラウズ コンピュータから画像を選択します。 " }, 
{ "title" : "通知設定の選択を解除する ", 
"url" : "アカウント/プロファイル設定の編集.html#通知設定の選択を解除する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ プロファイル設定の編集 \/ 通知設定の選択を解除する ", 
"snippet" : "デフォルトでは、Bitriseは、ニュースレターとプラットフォームの更新を、ユーザーが指定した電子メールアドレスに送信します。 プロフィール 。この設定は、次の3つの簡単な手順で選択解除できます。 クリック プロファイル設定 あなたのアバターの下。 クリック 通知 左側のメニューバーにあります。ニュースレターとプラットフォームの更新の両方がデフォルトで有効になっていることがわかります。 通知のいずれかまたは1つを受け取りたくない場合は、関連するチェックボックスをオフにします。...", 
"body" : "デフォルトでは、Bitriseは、ニュースレターとプラットフォームの更新を、ユーザーが指定した電子メールアドレスに送信します。 プロフィール 。この設定は、次の3つの簡単な手順で選択解除できます。 クリック プロファイル設定 あなたのアバターの下。 クリック 通知 左側のメニューバーにあります。ニュースレターとプラットフォームの更新の両方がデフォルトで有効になっていることがわかります。 通知のいずれかまたは1つを受け取りたくない場合は、関連するチェックボックスをオフにします。 " }, 
{ "title" : "パスワードのリセット ", 
"url" : "アカウント/パスワードのリセット.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ パスワードのリセット ", 
"snippet" : "パスワードを忘れた場合は、Bitriseログインページの[パスワードを忘れた場合]をクリックしてパスワードをリセットできます。詳細な手順が記載されたメールが届きます。 Bitriseにはさまざまな方法でログインできます。 Bitriseのユーザー名とパスワードを使用 Gitlab \/ Github \/ Bitbucketアカウントで SAML SSOが設定され、Bitrise Workspaceに適用されている場合は、BitriseWorkspace名を使用します ログインしようとしたがパスワードを忘れた場合： クリック パスワードをお忘れですか 私たちに ログインページ 。 あなたの Eメー...", 
"body" : "パスワードを忘れた場合は、Bitriseログインページの[パスワードを忘れた場合]をクリックしてパスワードをリセットできます。詳細な手順が記載されたメールが届きます。 Bitriseにはさまざまな方法でログインできます。 Bitriseのユーザー名とパスワードを使用 Gitlab \/ Github \/ Bitbucketアカウントで SAML SSOが設定され、Bitrise Workspaceに適用されている場合は、BitriseWorkspace名を使用します ログインしようとしたがパスワードを忘れた場合： クリック パスワードをお忘れですか 私たちに ログインページ 。 あなたの Eメール また ユーザー名 パスワード回復リンクの送信先がわかるようにします。 受信トレイで パスワードのリセット手順 Letsconnectによって送信されます。 クリック パスワードを再設定する または、URLをブラウザにコピーします。 新しいパスワードを追加して、 保存する 。 パスワードを変更したら、をクリックします ログイン ログインページに再度アクセスします。 あなたの ユーザー名 と新しい パスワード Bitriseダッシュボードにログインします。 3回目のログインに失敗した場合は、 reCAPTCHA あなたが人間であるかどうかを確認できるようになります。 何度もログインに失敗すると、自動的にロックアウトされます。受信トレイで私たちの 指示のロックを解除する Eメール！ " }, 
{ "title" : "二要素認証 ", 
"url" : "アカウント/二要素認証.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ 二要素認証 ", 
"snippet" : "プロファイル設定から、セキュリティの追加レイヤーとしてBitriseに2要素認証（2FA）を追加できます。 Bitriseアカウントで2要素認証（2FA）を有効にすると、アカウントに追加のセキュリティレイヤーが提供されます。 接続されているアカウント（GitHub、Bitbucket、GitLab）を確認し、まだ有効にしていない場合は2FAを有効にすることをお勧めします。...", 
"body" : "プロファイル設定から、セキュリティの追加レイヤーとしてBitriseに2要素認証（2FA）を追加できます。 Bitriseアカウントで2要素認証（2FA）を有効にすると、アカウントに追加のセキュリティレイヤーが提供されます。 接続されているアカウント（GitHub、Bitbucket、GitLab）を確認し、まだ有効にしていない場合は2FAを有効にすることをお勧めします。 " }, 
{ "title" : "二要素認証の有効化 ", 
"url" : "アカウント/二要素認証.html#二要素認証の有効化", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ 二要素認証 \/ 二要素認証の有効化 ", 
"snippet" : "ダウンロードとインストール Google認証システム お使いの携帯電話に。 ログインする bitrise.io そしてあなたのに行きます プロフィール 。 クリック プロファイル設定 。 下にスクロールしてクリックします 安全 左に。 クリック 2FAが有効になっている 下 二要素認証 。 Google認証システムを開き、画面に表示されるQRコードをスキャンします。 生成された6桁のコードを入力します。 2FAをアクティブにしてリカバリコードを保存すると、から確認メールが届きます。 Letsconnect@bitrise.io 。...", 
"body" : "ダウンロードとインストール Google認証システム お使いの携帯電話に。 ログインする bitrise.io そしてあなたのに行きます プロフィール 。 クリック プロファイル設定 。 下にスクロールしてクリックします 安全 左に。 クリック 2FAが有効になっている 下 二要素認証 。 Google認証システムを開き、画面に表示されるQRコードをスキャンします。 生成された6桁のコードを入力します。 2FAをアクティブにしてリカバリコードを保存すると、から確認メールが届きます。 Letsconnect@bitrise.io 。 " }, 
{ "title" : "二要素認証の無効化 ", 
"url" : "アカウント/二要素認証.html#二要素認証の無効化", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ 二要素認証 \/ 二要素認証の無効化 ", 
"snippet" : "すでにBitriseにログインしている場合は、次の手順に従って2要素認証（2FA）を無効にします。 ログインする bitrise.io そしてあなたのに行きます プロフィール 。 クリック プロファイル設定 。 下にスクロールしてクリックします 安全 左に。 クリック 2FAが有効になっている 下 二要素認証 。 ポップアップウィンドウにBitriseログインパスワードを入力します。...", 
"body" : "すでにBitriseにログインしている場合は、次の手順に従って2要素認証（2FA）を無効にします。 ログインする bitrise.io そしてあなたのに行きます プロフィール 。 クリック プロファイル設定 。 下にスクロールしてクリックします 安全 左に。 クリック 2FAが有効になっている 下 二要素認証 。 ポップアップウィンドウにBitriseログインパスワードを入力します。 " }, 
{ "title" : "オーセンティケーターとリカバリコードを紛失しましたか？ ", 
"url" : "アカウント/二要素認証.html#オーセンティケーターとリカバリコードを紛失しましたか-", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ 二要素認証 \/ オーセンティケーターとリカバリコードを紛失しましたか？ ", 
"snippet" : "2FAは、ログインフロー中に追加のセキュリティ手順を提供することにより、不要なログイン試行（パスワードの盗難など）からアカウントを保護します。これは、認証システムアプリでデバイスを紛失し、リカバリコードを紛失した場合、アカウントにアクセスできなくなり、BitriseSupportがアクティブ化された2FAをアカウントから削除できないことも意味します。 ただし、以前にアカウントに接続されたサードパーティのサービス（GitLab、GitHub、Bitbucketなど）がある場合は、それを介してログインを試みることができます。接続されているサードパーティアカウントがない場合は、Bitriseで新しい...", 
"body" : "2FAは、ログインフロー中に追加のセキュリティ手順を提供することにより、不要なログイン試行（パスワードの盗難など）からアカウントを保護します。これは、認証システムアプリでデバイスを紛失し、リカバリコードを紛失した場合、アカウントにアクセスできなくなり、BitriseSupportがアクティブ化された2FAをアカウントから削除できないことも意味します。 ただし、以前にアカウントに接続されたサードパーティのサービス（GitLab、GitHub、Bitbucketなど）がある場合は、それを介してログインを試みることができます。接続されているサードパーティアカウントがない場合は、Bitriseで新しいアカウントを作成することをお勧めします。 非常に特殊なケースでは、Bitriseはアカウントから2FAを削除できます。 Bitriseは、すでにBitriseに接続されているGitプロバイダーアカウントがある場合にのみ、アカウントでアクティブ化された2FAを無効にできることに注意してください。 Bitriseにサインアップするときに指定した電子メールアドレスを使用して、サポートチームに連絡してください。 2FAの削除をリクエストしている理由を説明してください。 サポートチームから、gitアカウントに次のタイトルの新しいパブリックリポジトリを作成するように求められます。 bitrise_verification 作成したリポジトリのリンクをサポートチームに送信します。 アカウントから2FAを削除すると、Bitriseアカウントにセキュリティリスクが生じる可能性があると判断した場合、サポートチームがリクエストを拒否できることに注意してください。 " }, 
{ "title" : "パーソナルアクセストークン ", 
"url" : "アカウント/パーソナルアクセストークン.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ パーソナルアクセストークン ", 
"snippet" : "パーソナルアクセストークンを使用して、BitriseAPIへの認証を行うことができます。新しいパーソナルアクセストークンはいつでも作成できますが、一度作成すると、その値を再度表示またはコピーすることはできません。 パーソナルアクセストークンを使用して、BitriseAPIへの認証を行うことができます。新しいパーソナルアクセストークンはいつでも作成できますが、一度作成すると、その値を再度表示またはコピーすることはできません。 BitriseAPIを使用した認証...", 
"body" : "パーソナルアクセストークンを使用して、BitriseAPIへの認証を行うことができます。新しいパーソナルアクセストークンはいつでも作成できますが、一度作成すると、その値を再度表示またはコピーすることはできません。 パーソナルアクセストークンを使用して、BitriseAPIへの認証を行うことができます。新しいパーソナルアクセストークンはいつでも作成できますが、一度作成すると、その値を再度表示またはコピーすることはできません。 BitriseAPIを使用した認証 " }, 
{ "title" : "パーソナルアクセストークンの作成 ", 
"url" : "アカウント/パーソナルアクセストークン.html#パーソナルアクセストークンの作成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ パーソナルアクセストークン \/ パーソナルアクセストークンの作成 ", 
"snippet" : "新しいパーソナルアクセストークンを作成するには： 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側で、 安全 タブ。 下にスクロールして パーソナルアクセストークン セクションをクリックし、をクリックします トークンを作成する 。 記入してください トークンの説明 フィールドに入力し、トークンの適切な有効期限（1時間、1日、1か月、またはまったくない）を選択します。 クリック 次 。 の中に パーソナルアクセストークン ポップアップウィンドウで、新しく生成されたトー...", 
"body" : "新しいパーソナルアクセストークンを作成するには： 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 左側で、 安全 タブ。 下にスクロールして パーソナルアクセストークン セクションをクリックし、をクリックします トークンを作成する 。 記入してください トークンの説明 フィールドに入力し、トークンの適切な有効期限（1時間、1日、1か月、またはまったくない）を選択します。 クリック 次 。 の中に パーソナルアクセストークン ポップアップウィンドウで、新しく生成されたトークンを確認できます。 クリック コピーして閉じる トークンをクリップボードに保存して安全な場所に貼り付け、完成させることができます。 " }, 
{ "title" : "パーソナルアクセストークンの再生成 ", 
"url" : "アカウント/パーソナルアクセストークン.html#パーソナルアクセストークンの再生成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ パーソナルアクセストークン \/ パーソナルアクセストークンの再生成 ", 
"snippet" : "既存のパーソナルアクセストークンはいつでも再生成できます。ただし、以前に生成されたトークンの値を再度表示することはできず、新しい値のみを表示できます。 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 に移動します 安全 タブ。 でトークンを見つけます パーソナルアクセストークン セクション。 クリック 編集 。 クリック トークンを再生成する 。 新しいトークンをコピーして、[ 終わり 。...", 
"body" : "既存のパーソナルアクセストークンはいつでも再生成できます。ただし、以前に生成されたトークンの値を再度表示することはできず、新しい値のみを表示できます。 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 に移動します 安全 タブ。 でトークンを見つけます パーソナルアクセストークン セクション。 クリック 編集 。 クリック トークンを再生成する 。 新しいトークンをコピーして、[ 終わり 。 " }, 
{ "title" : "Bitriseアカウントを削除する ", 
"url" : "アカウント/bitriseアカウントを削除する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アカウント \/ Bitriseアカウントを削除する ", 
"snippet" : "ご不便をおかけして申し訳ございませんが、Bitriseアカウントを削除したい場合は、プロファイル設定から削除できます。 あなたが行くのを見るのはいつも悲しいですが、Bitriseアカウントを削除したいのであれば、それは非常に簡単です。 ワークスペースの所有権 ワークスペースの唯一の確認済み所有者である場合は、ワークスペースの所有権を別のアカウントに譲渡するか、アカウントを削除する前に削除する必要があります。 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 ページの下部に...", 
"body" : "ご不便をおかけして申し訳ございませんが、Bitriseアカウントを削除したい場合は、プロファイル設定から削除できます。 あなたが行くのを見るのはいつも悲しいですが、Bitriseアカウントを削除したいのであれば、それは非常に簡単です。 ワークスペースの所有権 ワークスペースの唯一の確認済み所有者である場合は、ワークスペースの所有権を別のアカウントに譲渡するか、アカウントを削除する前に削除する必要があります。 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 ページの下部にある[ アカウントを削除します ボタンを押して、指示に従います。 " }, 
{ "title" : "ワークスペース ", 
"url" : "ワークスペース.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース ", 
"snippet" : "ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。複数のワークスペースを作成したり、他のBitriseユーザーからワークスペースに招待したりできます。 ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。複数のワークスペースを作成したり、他のBitriseユーザーからワークスペースに招待したりできます。 アプリを追加してビルドを実行できるようにするには、ワークスペースの一部であるか、アプリのチームの外部の貢献者である必要があります。 必要なワークスペースも必要です 有料サブスクリプションプラン Bitri...", 
"body" : "ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。複数のワークスペースを作成したり、他のBitriseユーザーからワークスペースに招待したりできます。 ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。複数のワークスペースを作成したり、他のBitriseユーザーからワークスペースに招待したりできます。 アプリを追加してビルドを実行できるようにするには、ワークスペースの一部であるか、アプリのチームの外部の貢献者である必要があります。 必要なワークスペースも必要です 有料サブスクリプションプラン Bitriseで。ワークスペースごとに、ワークスペースのアプリが使用できるクレジットの数を決定する異なるサブスクリプションプランを設定できます。 レガシーユーザー レガシーユーザーは、同時実行ベースのアカウントを持つユーザーです。ビルドの実行時にクレジットを使用しない場合は、同時実行ベースのアカウントがあります。レガシーユーザーは、引き続き個人アカウントにアプリを追加し、ワークスペースなしでそれらのアプリのビルドを実行できます。 最初のワークスペースの作成 プロファイル設定の編集 " }, 
{ "title" : "ワークスペースチーム ", 
"url" : "ワークスペース.html#ワークスペースチーム", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ ワークスペースチーム ", 
"snippet" : "ワークスペースのチームのメンバーになるということは、ワークスペースグループの1つのメンバーになることを意味します。ワークスペースが所有するアプリにグループを割り当てることができます。 Bitriseの[ワークスペースチーム]タブを使用して、チームメンバーをグループに分類できます。 ワークスペースチームのメンバーシップはグループに基づいています。ワークスペースグループは、チームメンバーのラッパーとして機能します。ワークスペースの所有者と管理者は グループを管理し、各アプリのチームに一度に複数のメンバーを追加します 、Bitriseでの新しいプロジェクトのセットアップをより迅速かつ簡単にします。特...", 
"body" : "ワークスペースのチームのメンバーになるということは、ワークスペースグループの1つのメンバーになることを意味します。ワークスペースが所有するアプリにグループを割り当てることができます。 Bitriseの[ワークスペースチーム]タブを使用して、チームメンバーをグループに分類できます。 ワークスペースチームのメンバーシップはグループに基づいています。ワークスペースグループは、チームメンバーのラッパーとして機能します。ワークスペースの所有者と管理者は グループを管理し、各アプリのチームに一度に複数のメンバーを追加します 、Bitriseでの新しいプロジェクトのセットアップをより迅速かつ簡単にします。特定のグループを特定の役割を持つアプリで作業するように割り当てることができ、同じグループのすべてのメンバーがアプリへの同じレベルのアクセス権を持ちます。 アプリチームとワークスペースグループの違い アプリチームはアプリごとに処理されますが、ワークスペースグループはグローバルに処理されます。 ワークスペースグループには、それ自体に固有の役割はありません。 アプリチームにグループを割り当てることができます そして彼らを選ぶ 役割 つまり、同じグループが異なるアプリで異なる役割を持つことができるということです。 ワークスペースは SAMLシングルサインオン ：いくつかの主要なIDプロバイダーで設定するためのガイドがあります。 " }, 
{ "title" : "ワークスペースの作成 ", 
"url" : "ワークスペース/ワークスペースの作成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ ワークスペースの作成 ", 
"snippet" : "Bitriseワークスペースを作成して、新しいアプリを追加したり、ビルドを実行したりできるようにします。 Bitriseにサインアップすると、最初のワークスペースを作成するように自動的に求められます。 ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。複数のワークスペースを作成したり、他のBitriseユーザーからワークスペースに招待したりできます。 Bitriseを使用するには、少なくとも1つのワークスペースにアクセスできる必要があります。新しいアカウントを作成する場合、新しいアプリを追加したり、ビルドを実行したりすることはできません。これを行う...", 
"body" : "Bitriseワークスペースを作成して、新しいアプリを追加したり、ビルドを実行したりできるようにします。 Bitriseにサインアップすると、最初のワークスペースを作成するように自動的に求められます。 ワークスペースは、Bitriseアプリとアプリで作業しているチームメンバーを管理できる環境です。複数のワークスペースを作成したり、他のBitriseユーザーからワークスペースに招待したりできます。 Bitriseを使用するには、少なくとも1つのワークスペースにアクセスできる必要があります。新しいアカウントを作成する場合、新しいアプリを追加したり、ビルドを実行したりすることはできません。これを行うには、ワークスペースを作成するか、既存のワークスペースに招待する必要があります。 Bitriseにサインアップすると、新しいワークスペースを作成するように自動的に求められます。ワークスペースの作成をスキップする場合、または後で追加のワークスペースを作成する場合は、次のように実行できます。 ログインする bitrise.io 。 上部のメニューバーで、 + シンボル。 選択する ワークスペースを作成する 。これはあなたをに連れて行きます 新しいワークスペースを作成する ページ。 を見つける ワークスペース名 入力フィールドに入力し、名前を追加します。 クリック ワークスペースを作成する 。 プランを選択してください。 チームと趣味の2つのオプションがあります。詳細に興味がある場合、または他のプランについて詳しく知りたい場合は、 価格ページ 詳細については。 どちらかをクリックします Teamsにサブスクライブする また 趣味を購読する 。 以上です。アプリの追加とワークスペースへのユーザーの招待を開始できます。 " }, 
{ "title" : "ワークスペースの請求と請求 ", 
"url" : "ワークスペース/ワークスペースの請求と請求.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ ワークスペースの請求と請求 ", 
"snippet" : "サブスクリプションプランと請求情報は、[ワークスペース]ページでいつでも変更できます。過去の請求書を検索してダウンロードすることもできます。 ワークスペースの作成時にその手順をスキップした場合でも、ワークスペースのサブスクリプションプランを設定するのは非常に簡単です。ワークスペースの所有者であれば、いつでもプランと請求情報を変更できます。 クレジットカードを設定すると、自動的に請求されます。その他のお支払い方法については、サポートにお問い合わせください。 請求書をお送りできるようにメールアドレスを設定してください。サイトを探し回る必要はありません。請求書は受信トレイに直接配信されます。ただし、...", 
"body" : "サブスクリプションプランと請求情報は、[ワークスペース]ページでいつでも変更できます。過去の請求書を検索してダウンロードすることもできます。 ワークスペースの作成時にその手順をスキップした場合でも、ワークスペースのサブスクリプションプランを設定するのは非常に簡単です。ワークスペースの所有者であれば、いつでもプランと請求情報を変更できます。 クレジットカードを設定すると、自動的に請求されます。その他のお支払い方法については、サポートにお問い合わせください。 請求書をお送りできるようにメールアドレスを設定してください。サイトを探し回る必要はありません。請求書は受信トレイに直接配信されます。ただし、サイトから手動でダウンロードしたい場合は、それも可能です。 " }, 
{ "title" : "ワークスペースの請求詳細の追加と更新 ", 
"url" : "ワークスペース/ワークスペースの請求と請求.html#ワークスペースの請求詳細の追加と更新", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ ワークスペースの請求と請求 \/ ワークスペースの請求詳細の追加と更新 ", 
"snippet" : "ワークスペースのメンバーであるアカウントでサインインします。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 請求する メニューオプションから。 お支払い情報をまだ提供していない場合は、提供してください：クリック クレジットカードを追加する の右側に 課金情報 メニュー。 自動的に請求されたくない場合は、クレジットカードを提供する必要はありません。この場合、電信送金などの別の支払い方法を設定するには、サポートにお問い...", 
"body" : "ワークスペースのメンバーであるアカウントでサインインします。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 請求する メニューオプションから。 お支払い情報をまだ提供していない場合は、提供してください：クリック クレジットカードを追加する の右側に 課金情報 メニュー。 自動的に請求されたくない場合は、クレジットカードを提供する必要はありません。この場合、電信送金などの別の支払い方法を設定するには、サポートにお問い合わせください。このオプションは、標準プランの6倍の同時実行、またはエリートプランの3倍の同時実行から利用できますが、年次請求の場合のみです。 詳細を記入してください。 ワークスペースの所有者のみがワークスペースの請求情報にアクセスできることに注意してください。 " }, 
{ "title" : "ワークスペースの請求書のメールアドレスを設定する ", 
"url" : "ワークスペース/ワークスペースの請求と請求.html#ワークスペースの請求書のメールアドレスを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ ワークスペースの請求と請求 \/ ワークスペースの請求書のメールアドレスを設定する ", 
"snippet" : "デフォルトでは、ワークスペースの請求書は、ワークスペースの作成時に提供された電子メールに送信されます。ただし、ワークスペースの所有者はいつでもワークスペースを変更できます。 ワークスペースの所有者であるアカウントでサインインします。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 請求する メニューオプションから。 を見つけます 請求書メール メニューをクリックしてクリックします メールアドレスを変更 。 新しいメー...", 
"body" : "デフォルトでは、ワークスペースの請求書は、ワークスペースの作成時に提供された電子メールに送信されます。ただし、ワークスペースの所有者はいつでもワークスペースを変更できます。 ワークスペースの所有者であるアカウントでサインインします。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 請求する メニューオプションから。 を見つけます 請求書メール メニューをクリックしてクリックします メールアドレスを変更 。 新しいメールアドレスを入力して、 保存する 。 " }, 
{ "title" : "ワークスペースの請求書のダウンロード ", 
"url" : "ワークスペース/ワークスペースの請求と請求.html#ワークスペースの請求書のダウンロード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ ワークスペースの請求と請求 \/ ワークスペースの請求書のダウンロード ", 
"snippet" : "ワークスペースの所有者であるアカウントでサインインします。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 請求する メニューオプションから。 を見つけます 過去の発言 メニュー。 必要な請求書を選択し、右側のダウンロードアイコンをクリックします。...", 
"body" : "ワークスペースの所有者であるアカウントでサインインします。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 請求する メニューオプションから。 を見つけます 過去の発言 メニュー。 必要な請求書を選択し、右側のダウンロードアイコンをクリックします。 " }, 
{ "title" : "他のユーザーをワークスペースに追加する ", 
"url" : "ワークスペース/他のユーザーをワークスペースに追加する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ 他のユーザーをワークスペースに追加する ", 
"snippet" : "ワークスペースのメンバーシップは、Bitriseのグループに基づいています。ワークスペースのアプリで作業するようにグループを割り当てることができるように、ワークスペースのグループにユーザーを追加します。 ワークスペースは、アプリを管理するための単なる環境ではありません。他のBitriseユーザーとのシームレスなコラボレーションも可能にします。他のユーザーをワークスペースに招待できます。もちろん、他のワークスペースにも招待できます。 ワークスペースで他のユーザーと作業できるようにするには、それらをワークスペースのグループに追加する必要があります。ワークスペースの一部になる唯一の方法は、ワークスペ...", 
"body" : "ワークスペースのメンバーシップは、Bitriseのグループに基づいています。ワークスペースのアプリで作業するようにグループを割り当てることができるように、ワークスペースのグループにユーザーを追加します。 ワークスペースは、アプリを管理するための単なる環境ではありません。他のBitriseユーザーとのシームレスなコラボレーションも可能にします。他のユーザーをワークスペースに招待できます。もちろん、他のワークスペースにも招待できます。 ワークスペースで他のユーザーと作業できるようにするには、それらをワークスペースのグループに追加する必要があります。ワークスペースの一部になる唯一の方法は、ワークスペースのグループの1つにメンバーになることです。 ワークスペースのグループと役割 ワークスペースグループには、固有の役割はまったくありません。 アプリチームにグループを割り当てることができます そして彼らを選ぶ 役割 つまり、同じグループが異なるアプリで異なる役割を持つことができるということです。 ワークスペースグループの名前は関係ありません：ワークスペースグループが呼び出された場合でも 管理者 、それは持っていません 管理者 デフォルトでは任意のアプリの役割であり、他の役割を持つアプリに割り当てることもできます。 ワークスペースの所有者を変更する BitriseAPIを使用した認証 " }, 
{ "title" : "ワークスペースのグループの作成 ", 
"url" : "ワークスペース/他のユーザーをワークスペースに追加する.html#ワークスペースのグループの作成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ 他のユーザーをワークスペースに追加する \/ ワークスペースのグループの作成 ", 
"snippet" : "所有者のみ ワークスペースのグループを作成できるのは、ワークスペースの所有者だけです。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 チーム メニューオプションから。 左側で、 グループ メニューオプションから。 を見つける 新しいグループを作成する 上部のセクション。 にグループ名を入力します グループ名を入力してください フィールドをクリックし、 作成 。...", 
"body" : "所有者のみ ワークスペースのグループを作成できるのは、ワークスペースの所有者だけです。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 チーム メニューオプションから。 左側で、 グループ メニューオプションから。 を見つける 新しいグループを作成する 上部のセクション。 にグループ名を入力します グループ名を入力してください フィールドをクリックし、 作成 。 " }, 
{ "title" : "ワークスペースグループへのメンバーの追加 ", 
"url" : "ワークスペース/他のユーザーをワークスペースに追加する.html#ワークスペースグループへのメンバーの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ 他のユーザーをワークスペースに追加する \/ ワークスペースグループへのメンバーの追加 ", 
"snippet" : "実際には、ワークスペースにメンバーを追加するということは、ワークスペースに属するグループにメンバーを追加することを意味します。ワークスペースに必要なグループができたら、それらにメンバーを追加するのは非常に簡単です。 禁止されている文字を含むメールアドレス メールアドレスでBitriseにサインアップする場合、アドレスに文字を含めることはできませんのでご注意ください + 。このようなメールアドレスを持つ古いアカウントはまだ存在しますが、そのアドレスを使用して組織に招待することはできません。それらを追加するときは、代わりにユーザー名を使用してください。 Bitriseにログインし、右上のアカウント...", 
"body" : "実際には、ワークスペースにメンバーを追加するということは、ワークスペースに属するグループにメンバーを追加することを意味します。ワークスペースに必要なグループができたら、それらにメンバーを追加するのは非常に簡単です。 禁止されている文字を含むメールアドレス メールアドレスでBitriseにサインアップする場合、アドレスに文字を含めることはできませんのでご注意ください + 。このようなメールアドレスを持つ古いアカウントはまだ存在しますが、そのアドレスを使用して組織に招待することはできません。それらを追加するときは、代わりにユーザー名を使用してください。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 チーム メニューオプションから。 を選択 グループ タブ。 必要なグループを見つけ、グループの右側にある3つのドットをクリックして、グループのドロップダウンメニューを表示します。 クリックしてください +メンバーを追加 ボタン。 ダイアログボックスのラジオボタンを使用して、電子メールアドレスを入力するか、既存のメンバーをグループに追加します。 選択する ワークスペースに新しいメンバーを招待します メールアドレスを入力します。クリック 招待を送る 下部に招待状を送信します。 選択する 既存のメンバーを追加する ドロップダウンメニューから既存のワークスペースメンバーの1つを選択します。クリック メンバーを追加 下部にチームメンバーをグループに追加します。 " }, 
{ "title" : "ワークスペースから他のユーザーを削除する ", 
"url" : "ワークスペース/ワークスペースから他のユーザーを削除する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ ワークスペースから他のユーザーを削除する ", 
"snippet" : "所有者のみ ワークスペースからユーザーを削除できるのは、ワークスペースの所有者のみです。 Bitrise にログインし、右上のアカウント セレクター ドロップダウン メニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイル ページに移動します。 左側で、選択 チーム メニューオプションから。 を選択 メンバー タブ。 削除したいユーザーを検索し、「 \"。 クリック 削除する 選択したユーザーをワークスペースから削除します。...", 
"body" : "所有者のみ ワークスペースからユーザーを削除できるのは、ワークスペースの所有者のみです。 Bitrise にログインし、右上のアカウント セレクター ドロップダウン メニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイル ページに移動します。 左側で、選択 チーム メニューオプションから。 を選択 メンバー タブ。 削除したいユーザーを検索し、「 \"。 クリック 削除する 選択したユーザーをワークスペースから削除します。 " }, 
{ "title" : "ワークスペースの所有者を変更する ", 
"url" : "ワークスペース/ワークスペースの所有者を変更する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ ワークスペースの所有者を変更する ", 
"snippet" : "ワークスペースの所有者は、ワークスペースにリンクされているすべてのアプリにアクセスして削除し、ワークスペースの請求の詳細を管理できます。所有者のみが他の所有者を追加または削除できます。 ワークスペースの所有者は、ワークスペースにリンクされているすべてのアプリにアクセスして削除したり、ワークスペースの請求の詳細を管理したり、他の所有者を追加または削除したりできます。ワークスペースの所有者は、ワークスペース内の独自のグループに属し、このグループのメンバーシップを介して管理されます。 すべてのワークスペースには、少なくとも1人の所有者が必要です。 Bitriseにログインし、右上のアカウントセレクタ...", 
"body" : "ワークスペースの所有者は、ワークスペースにリンクされているすべてのアプリにアクセスして削除し、ワークスペースの請求の詳細を管理できます。所有者のみが他の所有者を追加または削除できます。 ワークスペースの所有者は、ワークスペースにリンクされているすべてのアプリにアクセスして削除したり、ワークスペースの請求の詳細を管理したり、他の所有者を追加または削除したりできます。ワークスペースの所有者は、ワークスペース内の独自のグループに属し、このグループのメンバーシップを介して管理されます。 すべてのワークスペースには、少なくとも1人の所有者が必要です。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 チーム メニューオプションから。 を選択 所有者 タブ。 を見つける ワークスペースの所有者 グループ。 メールアドレスまたはユーザー名を入力します。問題のアカウントがワークスペースの所有者になります。 他のユーザーをワークスペースに追加する BitriseAPIを使用した認証 " }, 
{ "title" : "ワークスペースに関するFAQ ", 
"url" : "ワークスペース/ワークスペースに関するfaq.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ワークスペース \/ ワークスペースに関するFAQ ", 
"snippet" : "Bitrise Workspacesに関して最もよくある質問：それらは何ですか、そのアプリを管理する方法、メンバーとグループは何ができますか？ Bitriseのワークスペースとは何ですか？ ワークスペースは、社内のより大きなチームやメンバーをシームレスに管理するために使用されます。これは、会社の各アプリで作業しているすべての人を集め、さまざまなグループを作成して委任する場所です。 ワークスペースにアプリを追加するにはどうすればよいですか？ まず、ワークスペースの少なくとも1つのグループに追加する必要があります。次に、に移動します 新しいアプリページを追加する 左上のドロップダウンでワークスペー...", 
"body" : "Bitrise Workspacesに関して最もよくある質問：それらは何ですか、そのアプリを管理する方法、メンバーとグループは何ができますか？ Bitriseのワークスペースとは何ですか？ ワークスペースは、社内のより大きなチームやメンバーをシームレスに管理するために使用されます。これは、会社の各アプリで作業しているすべての人を集め、さまざまなグループを作成して委任する場所です。 ワークスペースにアプリを追加するにはどうすればよいですか？ まず、ワークスペースの少なくとも1つのグループに追加する必要があります。次に、に移動します 新しいアプリページを追加する 左上のドロップダウンでワークスペースを選択します。 これは、アプリの追加プロセス全体で変更できます。または、アプリの追加が完了した後、アプリの所有権を譲渡することで所有者を変更できます。 既存のアプリをワークスペースに移行\/転送するにはどうすればよいですか？ ワークスペースを作成したら、に移動して任意のアプリをワークスペースに転送できます。 Team 転送するアプリのタブをクリックし、 所有権を譲渡する 右上のボタン。 ワークスペース内の所有者とは何ですか？ ワークスペースには複数の所有者を含めることができます。所有者は、請求の管理、アプリの削除、請求メールの変更、グループの作成、削除、アプリへの割り当てを行うことができます。 ワークスペースの「メンバー」は何ができますか？ メンバーはに表示されます 人 ワークスペースのページのタブ。上のグループに含めることで、メンバーとして追加できます。 グループ タブ。これらのメンバーには、ワークスペースにアプリを追加し、ワークスペースのすべてのアプリのリストを表示するオプションがあります。 アプリ タブ。メンバーは、直接またはアプリを介してアプリへのアクセスが許可されている場合にのみ、ワークスペースのアプリにアクセスできます。 Group 、割り当てられた役割（管理者、開発者、またはテスター）に関して。 グループは何に適していますか？ グループは基本的にメンバーのラッパーです。グループを作成することで、所有者と管理者は各アプリのチームに一度に複数のメンバーを追加できるため、Bitriseで新しいプロジェクトをすばやく簡単にセットアップできます。また、複数のメンバーの役割の再割り当て、削除、および変更が迅速になります。 各グループは、アプリの1つのエンティティとして処理されます チーム タブ。それらをアプリのチームに追加したり、グループの役割を設定したり、アプリのチームからグループを削除したりすることで、アプリからそのグループのすべてのメンバーのアクセスを取り消すことができます。ただし、ワークスペースのページでのみ、グループの個々のメンバーを追加または削除することはできません。 チームとワークスペースの違いは何ですか？ チームはアプリごとに処理され、ワークスペースはグローバルに処理されます。 ワークスペースのアプリのチームには、直接または割り当てられたグループを介して招待されたメンバーを含めることができます。直接の役割を持つチームメンバーは、招待されたアプリにのみアクセスでき、ワークスペースにアプリを追加することはできません。チームのメンバーには、常に役割が割り当てられています（管理者、開発者、またはテスター）。 外部の貢献者は誰ですか？ 外部の貢献者は、直接的な役割を持つアプリのチームのメンバーであり、ワークスペース自体には招待されず、ワークスペースのアプリにのみ招待されます。 複数のワークスペースを持つことはできますか？ 1人のユーザーが好きなだけワークスペースを持つことができますが、ビルドを実行できるようにするには、各ワークスペースにアクティブなサブスクリプションが必要です。 ワークスペースのすべてのアプリから誰かを削除できますか？ ワークスペースの所有者である場合は、組織のメンバーと寄稿者を削除できます 人 タブ、ワンクリックで。所有者は、上のグループから誰かを削除することもできます グループ タブ。この場合、ユーザーはグループが割り当てられているすべてのアプリのチームから削除されます。 ワークスペースを退会するにはどうすればよいですか? ワークスペースの所有者でない場合は、最初にワークスペースの設定にアクセスして (画面右上のワークプレイスの横にある歯車アイコンを選択)、ワークプレイスから退出することができます。 チーム 左側のメニュー オプションから、 メンバー タブをクリックし、「 」 アイコンがメール アドレスの横に表示されます。 メール アドレスの横に [ワークスペースから削除] アイコンが表示されない 脱退したいワークスペースの所有者である場合は、まず、所有者のリストから自分自身を削除する必要があります。 所有者 タブ (まだ所有者がいない場合は、新しい所有者も追加する必要があります)。詳細については、次を参照してください。 ワークスペースの所有者を変更する. " }, 
{ "title" : "アプリ ", 
"url" : "アプリ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ ", 
"snippet" : "アプリはBitriseエクスペリエンスの主要な構成要素です。ソースコードを保存するGitリポジトリがアプリとしてBitriseに追加されます。 アプリは、Bitriseエクスペリエンスの主要な構成要素です。ソースコードを格納するGitリポジトリがアプリとしてBitriseに追加されます。そのため、Bitriseアプリは必ずしも実際のアプリケーションではありません。それは、Bitriseを使用してビルドを実行するコードにすぎません。 アクセスできるようになったら ワークスペース 、アプリの追加と管理を開始できます。初期設定後はいつでも、アプリのほぼすべての側面を構成できます。特に、次のことができ...", 
"body" : "アプリはBitriseエクスペリエンスの主要な構成要素です。ソースコードを保存するGitリポジトリがアプリとしてBitriseに追加されます。 アプリは、Bitriseエクスペリエンスの主要な構成要素です。ソースコードを格納するGitリポジトリがアプリとしてBitriseに追加されます。そのため、Bitriseアプリは必ずしも実際のアプリケーションではありません。それは、Bitriseを使用してビルドを実行するコードにすぎません。 アクセスできるようになったら ワークスペース 、アプリの追加と管理を開始できます。初期設定後はいつでも、アプリのほぼすべての側面を構成できます。特に、次のことができます。 アプリのリポジトリURLを変更します。 サービス資格情報の設定。 アプリのSSHキーを更新します。 新しいWebhookを登録し、既存のWebhookを更新します。 Bitriseアプリでの作業に招待されたユーザーは、アプリのチームを構成します。ユーザーを個別に招待することも、ワークスペースグループをアプリに割り当てることもできます。同じワークスペースグループは、異なるアプリチームで異なる役割を持つことができます。 " }, 
{ "title" : "Webhook ", 
"url" : "アプリ/webhook.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook ", 
"snippet" : "Bitriseは、着信Webhookを広範囲に使用して、Bitriseでビルドを自動的にトリガーし、発信Webhookを使用して、ビルドイベントのレポートをSlackなどの他のサービスに送信します。 Webhookは、コードをリポジトリにプッシュするなどのイベントによってトリガーされるユーザー定義のコールバックです。 BitriseはWebhookを広範囲に使用します。 Gitサービスプロバイダーに登録されている着信Webhookは、Bitriseでビルドを自動的にトリガーするために使用されます。 Webhook issues If your builds triggers don't wor...", 
"body" : "Bitriseは、着信Webhookを広範囲に使用して、Bitriseでビルドを自動的にトリガーし、発信Webhookを使用して、ビルドイベントのレポートをSlackなどの他のサービスに送信します。 Webhookは、コードをリポジトリにプッシュするなどのイベントによってトリガーされるユーザー定義のコールバックです。 BitriseはWebhookを広範囲に使用します。 Gitサービスプロバイダーに登録されている着信Webhookは、Bitriseでビルドを自動的にトリガーするために使用されます。 Webhook issues If your builds triggers don't work, there might be a problem with your webhooks: Builds aren't getting triggered . 送信Webhookは、ビルドイベントのレポートをSlackなどの他のサービスに送信するために使用されます。 アプリの作成時または後で、着信Webhookを自動的に追加できます。サポートされているサービスにWebhookを手動で追加することもできます。 発信Webhookは、Webサイトまたは BitriseAPI経由 。 手動でビルドを開始する ビルドを自動的にトリガーする 単一のトリガーで並列ビルドを開始する " }, 
{ "title" : "着信Webhookの追加 ", 
"url" : "アプリ/webhook/着信webhookの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ 着信Webhookの追加 ", 
"snippet" : "Bitriseの着信Webhookには、特定のコードイベント（コードプッシュ、Gitタグ、プルリクエスト）が発生したときにビルドを自動的に開始するという1つの目的があります。アプリをBitriseに追加するときに、着信Webhookを手動または自動でセットアップできます。 ほとんどのソースコードホスティングサービスは、Webhookを登録する機能を提供します。 Webhookは基本的に、指定されたイベントで呼び出されるURLです。 Bitriseの着信Webhookには、特定のコードイベント（コードプッシュ、Gitタグ、プルリクエスト）が発生したときにビルドを自動的に開始するという1つの目的が...", 
"body" : "Bitriseの着信Webhookには、特定のコードイベント（コードプッシュ、Gitタグ、プルリクエスト）が発生したときにビルドを自動的に開始するという1つの目的があります。アプリをBitriseに追加するときに、着信Webhookを手動または自動でセットアップできます。 ほとんどのソースコードホスティングサービスは、Webhookを登録する機能を提供します。 Webhookは基本的に、指定されたイベントで呼び出されるURLです。 Bitriseの着信Webhookには、特定のコードイベント（コードプッシュ、Gitタグ、プルリクエスト）が発生したときにビルドを自動的に開始するという1つの目的があります。着信Webhookをリポジトリに登録するだけで、 ビルドトリガーを構成する 。 Webhook issues If your builds triggers don't work, there might be a problem with your webhooks: Builds aren't getting triggered . " }, 
{ "title" : "着信Webhookを自動的に登録する ", 
"url" : "アプリ/webhook/着信webhookの追加.html#着信webhookを自動的に登録する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ 着信Webhookの追加 \/ 着信Webhookを自動的に登録する ", 
"snippet" : "自動Webhook登録は、GitHub、GitLab、およびBitbucketでホストされているアプリでサポートされています。 選択した場合 GitHub 、 GitLab, また Bitbucket アプリを追加するときにソースコードプロバイダーとして、Bitriseは、アプリのセットアップジャーニーの最後にボタンをクリックするだけで、そのWebhookを自動的にセットアップします。 ただし、アプリの追加時にWebhookの登録をスキップした場合は、後でいつでもこのWebhookを変更したり、新しいWebhookを追加したりできます。 Webhookを上のリポジトリに自動的に登録できます C...", 
"body" : "自動Webhook登録は、GitHub、GitLab、およびBitbucketでホストされているアプリでサポートされています。 選択した場合 GitHub 、 GitLab, また Bitbucket アプリを追加するときにソースコードプロバイダーとして、Bitriseは、アプリのセットアップジャーニーの最後にボタンをクリックするだけで、そのWebhookを自動的にセットアップします。 ただし、アプリの追加時にWebhookの登録をスキップした場合は、後でいつでもこのWebhookを変更したり、新しいWebhookを追加したりできます。 Webhookを上のリポジトリに自動的に登録できます Code アプリのタブ。自動登録とは、BitriseがリポジトリにWebhookを登録することを意味するため、手動でそこに移動してGitプロバイダーのWebサイトに追加する必要はありません。これには以下が必要です。 リポジトリに対する管理者権限があること。 リポジトリをホストするアカウントがBitriseアカウントに接続されていること。 Webhookを自動的に登録するには： BitriseアカウントがリポジトリをホストするGitプロバイダーアカウントに接続されていること、およびGitアカウントにリポジトリへの管理者権限があることを確認してください。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 クリック Webhookを自動的に設定する 。 Bitriseは、アプリのリポジトリにWebhookを自動的に登録します。 " }, 
{ "title" : "着信Webhookを手動で登録する ", 
"url" : "アプリ/webhook/着信webhookの追加.html#着信webhookを手動で登録する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ 着信Webhookの追加 \/ 着信Webhookを手動で登録する ", 
"snippet" : "Bitriseにアプリを登録した後、Webhookを手動でセットアップまたは変更できます。プロセスはGitプロバイダーによって異なりますが、Bitriseでは基本的な手順はそれぞれ同じです。 独自のWebhook実装を作成する 私たちのwebhookプロセッサはオープンソースです 。サポートされていないソリューションを探している場合は、GitHubページで問題を作成するか、実装を使用してプルリクエストを作成できます。必要に応じて、独自のファイアウォールの背後で独自のWebhookプロバイダーを実行することもできます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセ...", 
"body" : "Bitriseにアプリを登録した後、Webhookを手動でセットアップまたは変更できます。プロセスはGitプロバイダーによって異なりますが、Bitriseでは基本的な手順はそれぞれ同じです。 独自のWebhook実装を作成する 私たちのwebhookプロセッサはオープンソースです 。サポートされていないソリューションを探している場合は、GitHubページで問題を作成するか、実装を使用してプルリクエストを作成できます。必要に応じて、独自のファイアウォールの背後で独自のWebhookプロバイダーを実行することもできます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 ポップアップウィンドウで、ドロップダウンメニューからサービスを選択します。 Webhook URLをコピーして、Gitプロバイダーに登録します。 " }, 
{ "title" : "GitHubWebhookの追加 ", 
"url" : "アプリ/webhook/githubwebhookの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ GitHubWebhookの追加 ", 
"snippet" : "GithubでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびにBitriseがアプリのビルドを自動的にトリガーするように、Webhookを指定できます。 GitHubの場合、あなたがしなければならないのはあなたの登録することだけです bitrise-webhooks あなたのWebhookとしてのURL GitHub リポジトリ。 Webhookは自動または手動で登録できます。このガイドでは...", 
"body" : "GithubでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびにBitriseがアプリのビルドを自動的にトリガーするように、Webhookを指定できます。 GitHubの場合、あなたがしなければならないのはあなたの登録することだけです bitrise-webhooks あなたのWebhookとしてのURL GitHub リポジトリ。 Webhookは自動または手動で登録できます。このガイドでは、Webhookを手動で登録するプロセスについて説明します。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 クリック Webhookを手動で設定する 。 ポップアップウィンドウで、ドロップダウンメニューからGitHubを選択します。 WebhookのURLをコピーします。 GitHubリポジトリに移動し、 設定 。 選択する Webhookを追加する 下 Webhook 。 GitHub WebhookURLをBitriseからに貼り付けます ペイロードURL 。 同じページで、 個々のイベントを選択させてください 。 選択する プルリクエスト と 押す 。 を押します Webhookを追加する ボタンをクリックすれば完了です。 " }, 
{ "title" : "GitlabWebhookの追加 ", 
"url" : "アプリ/webhook/gitlabwebhookの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ GitlabWebhookの追加 ", 
"snippet" : "GitlabでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。 GitLabの場合、あなたがしなければならないのはあなたの登録することだけです bitrise-webhooks あなたのWebhookとしてのURL GitLab リポジトリ。 Webhookは自動または手動で登録できます。このガイドでは...", 
"body" : "GitlabでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。 GitLabの場合、あなたがしなければならないのはあなたの登録することだけです bitrise-webhooks あなたのWebhookとしてのURL GitLab リポジトリ。 Webhookは自動または手動で登録できます。このガイドでは、Webhookを手動で登録するプロセスについて説明します。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 クリック Webhookを手動で設定する 。 ポップアップウィンドウで、ドロップダウンメニューからGitLabを選択します。 WebhookのURLをコピーします。 でプロジェクトを開きます GitLab.com に移動 設定 プロジェクトの。 選択する 統合 。 入力します bitrise-webhooks URLフィールドのURL。 の中に 引き金 セクション選択： プッシュイベント タグプッシュイベント マージリクエストイベント クリック Webhookを追加する 。 それで全部です！次にコードをプッシュするとき、新しいタグをプッシュするとき、またはマージリクエストを作成\/更新するときに、ビルドがトリガーされます（Bitriseのイベントに対してトリガーマッピングが定義されている場合）。 " }, 
{ "title" : "BitbucketWebhookを追加する ", 
"url" : "アプリ/webhook/bitbucketwebhookを追加する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ BitbucketWebhookを追加する ", 
"snippet" : "BitbucketでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードをリポジトリにプッシュするたびにBitriseでビルドを自動的に開始するには、コードホスティングサービスでWebhookを設定して、リポジトリにプッシュしたコードでBitriseのビルドを自動的にトリガーできます。 Webhookは自動または手動で登録できます。このガイドでは、Webhookを手動で登録するプロセスについて説明します。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 ...", 
"body" : "BitbucketでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードをリポジトリにプッシュするたびにBitriseでビルドを自動的に開始するには、コードホスティングサービスでWebhookを設定して、リポジトリにプッシュしたコードでBitriseのビルドを自動的にトリガーできます。 Webhookは自動または手動で登録できます。このガイドでは、Webhookを手動で登録するプロセスについて説明します。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 アプリのページの[コード]タブに移動し、 入ってくるWEBHOOK メニューをクリックします 手動でセットアップ 。 選択する Bitbucket ドロップダウンメニューから。 ポップアップウィンドウで、ドロップダウンメニューから[BitbucketWebhooks]を選択します。 選択したサービスのWebhookURLをコピーします。 Bitbucketリポジトリに移動し、を選択します 設定 。 選択する Webhook 左から。 選択する Webhookを追加する 。 Bitbucket WebhookURLをBitriseからに貼り付けます URL を追加します 題名 。 選択する トリガーの完全なリストから選択します 。 選択する リポジトリプッシュ と プルリクエストが作成されました と 更新しました トリガー。準備ができたら、 保存する ボタンを押すと、転がる準備ができました！ " }, 
{ "title" : "GogsWebhookの追加 ", 
"url" : "アプリ/webhook/gogswebhookの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ GogsWebhookの追加 ", 
"snippet" : "コードプッシュやプルリクエストなどの指定されたアクションを実行するたびにBitriseがアプリのビルドを自動的にトリガーするように、GogsでWebhookを指定できます。 指定されたアクションを実行するたびにBitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。ゴグの場合、あなたがしなければならないのはあなたの登録することだけです bitrise-webhooks あなたのWebhookとしてのURL ゴグ リポジトリ。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開...", 
"body" : "コードプッシュやプルリクエストなどの指定されたアクションを実行するたびにBitriseがアプリのビルドを自動的にトリガーするように、GogsでWebhookを指定できます。 指定されたアクションを実行するたびにBitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。ゴグの場合、あなたがしなければならないのはあなたの登録することだけです bitrise-webhooks あなたのWebhookとしてのURL ゴグ リポジトリ。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 クリック Webhookを手動で設定する 。 ポップアップウィンドウで、ドロップダウンメニューから[ゴグ]を選択します。 WebhookのURLをコピーします。 リポジトリのホスティングURLでプロジェクトを開きます。 に移動 設定 プロジェクトの。 選択する Webhook 、 Webhookを追加する 、 それから ゴグ 。 指定します bitrise-webhooks URL（ ...\/h\/gogs\/BITRISE-APP-SLUG\/BITRISE-APP-API-TOKEN ） の中に ペイロードURL 分野。 をセットする コンテンツタイプ に application\/json 。 現時点ではシークレットは必要ありません。 トリガーを起動するように設定します プッシュイベントだけ 。 クリック Webhookを追加する 。 そして、あなたは完了です！今後、Gogsリポジトリにコードをプッシュするたびに、Bitriseでビルドがトリガーされます。 " }, 
{ "title" : "SlackWebhookの追加 ", 
"url" : "アプリ/webhook/slackwebhookの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ SlackWebhookの追加 ", 
"snippet" : "Bitriseビルドに関する自動メッセージをSlackに送信するようにWebhookを設定できます。 従来の Slack Webhook 統合 このガイドでは、従来の Slack Webhook 統合について説明します。 あなたは登録することができます bitrise-webhooks としてのURL 発信Webhook 。 URLが登録されたら、使用法のセクションで、メッセージで定義できるすべての受け入れ済みおよび必須のパラメーターと、いくつかの例を確認してください。...", 
"body" : "Bitriseビルドに関する自動メッセージをSlackに送信するようにWebhookを設定できます。 従来の Slack Webhook 統合 このガイドでは、従来の Slack Webhook 統合について説明します。 あなたは登録することができます bitrise-webhooks としてのURL 発信Webhook 。 URLが登録されたら、使用法のセクションで、メッセージで定義できるすべての受け入れ済みおよび必須のパラメーターと、いくつかの例を確認してください。 " }, 
{ "title" : "SlackのWebhookURLを取得する ", 
"url" : "アプリ/webhook/slackwebhookの追加.html#slackのwebhookurlを取得する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ SlackWebhookの追加 \/ SlackのWebhookURLを取得する ", 
"snippet" : "管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 Bitriseのアプリのページに移動します。 左側で、 統合 。 クリック Webhookを手動で設定する 。 ドロップダウンメニューからSlackを選択します。 WebhookのURLをコピーします。 SlackアプリにURLを登録する 。...", 
"body" : "管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 Bitriseのアプリのページに移動します。 左側で、 統合 。 クリック Webhookを手動で設定する 。 ドロップダウンメニューからSlackを選択します。 WebhookのURLをコピーします。 SlackアプリにURLを登録する 。 " }, 
{ "title" : "使用法：メッセージ形式 ", 
"url" : "アプリ/webhook/slackwebhookの追加.html#使用法-メッセージ形式", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ SlackWebhookの追加 \/ 使用法：メッセージ形式 ", 
"snippet" : "メッセージは次の形式である必要があります。 key:value|key:value|... 、サポートされている場所 keys それは： 次の2つのパラメータの少なくとも1つが必要です。 b また branch - 例： branch: master w また workflow - 例： workflow: primary その他のオプションのパラメーター： t また tag - 例： branch: master|tag: v1.0 c また commit - 例： workflow: primary|commit: eee55509f16e7715bdb43308bb55e8736da4e...", 
"body" : "メッセージは次の形式である必要があります。 key:value|key:value|... 、サポートされている場所 keys それは： 次の2つのパラメータの少なくとも1つが必要です。 b また branch - 例： branch: master w また workflow - 例： workflow: primary その他のオプションのパラメーター： t また tag - 例： branch: master|tag: v1.0 c また commit - 例： workflow: primary|commit: eee55509f16e7715bdb43308bb55e8736da4e21e m また message - 例： branch: master|message: ship it!! パラメータ要件 少なくともどちらか branch また workflow 指定する必要があり、必要に応じて両方を指定できます。オプションのパラメータはいくつでも自由に指定できます。 ワークフローで使用できる環境変数を次の形式で送信することもできます。 env[KEY1]:value1|ENV[KEY2]:value2 すべてのパラメーターが含まれている例： workflow: primary|b: master|tag: v1.0|commit:eee55509f16e7715bdb43308bb55e8736da4e21e|m: start my build!|ENV[DEVICE_NAME]:iPhone 6S|ENV[DEVICE_UDID]:82667b4079914d4aabed9c216620da5dedab630a " }, 
{ "title" : "Visual StudioWebhookの追加 ", 
"url" : "アプリ/webhook/visual-studiowebhookの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ Visual StudioWebhookの追加 ", 
"snippet" : "Visual StudioでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。 Visual Studioの場合、登録するだけです。 bitrise-webhooks のURL Visualstudio.com としてのプロジェクト サービスフック 統合。 管理者アクセスのみ の役割を持つユーザーのみ 管...", 
"body" : "Visual StudioでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。 Visual Studioの場合、登録するだけです。 bitrise-webhooks のURL Visualstudio.com としてのプロジェクト サービスフック 統合。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 クリック Webhookを手動で設定する 。 ポップアップウィンドウで、ドロップダウンメニューから[VisualStudio]を選択します。 WebhookのURLをコピーします。 でプロジェクトを開きます Visualstudio.com 。 に移動します 管理\/コントロールペイン プロジェクトの。 選択する サービスフック 。 クリック サブスクリプションを作成する 。 サービス統合を作成します。 [サービス]リストで、 Webフック オプション。 を選択 コードがプッシュされました としてのイベント 引き金 。 の中に フィルタ セクションを選択します リポジトリ 統合したい。 他のフィルターはデフォルトのままにしておくことができます。 クリック 次 。 に アクション セットアップフォームに入力します bitrise-webhooks URL（ ...\/h\/visualstudio\/BITRISE-APP-SLUG\/BITRISE-APP-API-TOKEN ） の中に URL 分野。他のすべてのオプションはデフォルトのままにしておくことができます。 クリック 終了 。 " }, 
{ "title" : "AssemblaWebhookの追加 ", 
"url" : "アプリ/webhook/assemblawebhookの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ AssemblaWebhookの追加 ", 
"snippet" : "AssemblaでWebhookを指定して、コードプッシュやプルリクエストなどの指定されたアクションを実行するたびにBitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。 Assemblaの場合、追加する必要があるのは bitrise-webhooks あなたへのURL アセンブラ スペース。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bi...", 
"body" : "AssemblaでWebhookを指定して、コードプッシュやプルリクエストなどの指定されたアクションを実行するたびにBitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。 Assemblaの場合、追加する必要があるのは bitrise-webhooks あなたへのURL アセンブラ スペース。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 クリック Webhookを手動で設定する 。 ポップアップウィンドウで、ドロップダウンメニューから[アセンブリ]を選択します。 WebhookのURLをコピーします。 にあなたのスペースを開きます assembla.com または組織のアセンブリドメイン。 に移動します Webhook スペースのセクション。 選択する 新しいWebhookを作成する 。 設定 題名 に Bitrise Webhook 。 指定します bitrise-webhooks URL。 （（ ...\/h\/assembla\/BITRISE-APP-SLUG\/BITRISE-APP-API-TOKEN ） の中に 外部URL 分野。 選択する application\/json の中に コンテンツタイプ 分野。 次のコードをに貼り付けます コンテンツ ： {\"assembla\": {\"space\": \"%{space}\", \"action\": \"%{action}\", \"object\": \"%{object}\"}, \"message\": {\"title\": \"%{title}\", \"body\": \"%{body}\", \"author\": \"%{author}\"}, \"git\": {\"repository_suffix\": \"%{repository_suffix}\", \"repository_url\": \"%{repository_url}\", \"branch\": \"%{branch}\", \"commit_id\": \"%{commit_id}\"}}\n 選択する コードコミット および\/または Gitプッシュ の中に 更新を投稿する： セクション。 クリック 追加 。 それで全部です！次回あなたは プッシュコード ビルドがトリガーされます（Bitriseのイベントに対してトリガーマッピングが定義されている場合）。 " }, 
{ "title" : "DeveoWebhookの追加 ", 
"url" : "アプリ/webhook/deveowebhookの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ DeveoWebhookの追加 ", 
"snippet" : "DeveoでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。 Deveoの場合、あなたがしなければならないのはあなたの登録することだけです bitrise-webhooks のURL Deveo リポジトリ。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 ...", 
"body" : "DeveoでWebhookを指定して、コードのプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにすることができます。 コードプッシュやプルリクエストなどの指定されたアクションを実行するたびに、Bitriseがアプリのビルドを自動的にトリガーするようにWebhookを設定できます。 Deveoの場合、あなたがしなければならないのはあなたの登録することだけです bitrise-webhooks のURL Deveo リポジトリ。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 クリック Webhookを手動で設定する 。 ポップアップウィンドウで、 Deveo ドロップダウンメニューから。 WebhookのURLをコピーします。 でリポジトリを開きます app.deveo.com 。 に移動 フック プロジェクトの。 をクリックして、新しいリポジトリフックを追加します。 + 右側のボタン。 リポジトリを選択し、 Webhook サービス。 を入力 bitrise-webhooks URL（ ...\/h\/deveo\/BITRISE-APP-SLUG\/BITRISE-APP-API-TOKEN の中に Url 分野）。 タイプ json の中に コンテンツタイプ 分野。 クリック フックを保存 。 それで全部です！次回あなたは プッシュコード また 新しいタグをプッシュします ビルドがトリガーされます（Bitriseのイベントに対してトリガーマッピングが定義されている場合）。 " }, 
{ "title" : "発信Webhookの追加 ", 
"url" : "アプリ/webhook/発信webhookの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ 発信Webhookの追加 ", 
"snippet" : "Bitriseがビルドイベント通知を任意のサービスに自動的に送信するように、発信Webhookを作成できます。 ビルドイベント通知を任意のサービスに送信するようにBitriseを構成できます。ビルドイベントは次のとおりです。 ビルドが開始されたとき。 ビルドが終了したとき。 この通知を使用して、まだサポートされていない場合はビルドステータスをgitプロバイダーと共有したり、ビルドの成功または失敗について適切なチームにのみ通知したり、社内リリースパイプラインを自動化するために使用したりできます。 Webサイトのインターフェイスで、Webhookを簡単に追加、削除、編集できます。 ファイアウォール...", 
"body" : "Bitriseがビルドイベント通知を任意のサービスに自動的に送信するように、発信Webhookを作成できます。 ビルドイベント通知を任意のサービスに送信するようにBitriseを構成できます。ビルドイベントは次のとおりです。 ビルドが開始されたとき。 ビルドが終了したとき。 この通知を使用して、まだサポートされていない場合はビルドステータスをgitプロバイダーと共有したり、ビルドの成功または失敗について適切なチームにのみ通知したり、社内リリースパイプラインを自動化するために使用したりできます。 Webサイトのインターフェイスで、Webhookを簡単に追加、削除、編集できます。 ファイアウォールの背後にあるサービスへのアクセス ファイアウォールの背後にあるサービスにアクセスする必要がある場合、発信Webhookを使用することはできません。ペイロードはファイアウォールを通過しません。このようなサービスにアクセスするには、Bitriseビルドマシンがアクセスできるようにファイアウォールを構成してから、ビルドマシン内からリクエストを行うことをお勧めします。その方法の詳細については、関連するガイドを確認してください。 Bitrise のネットワーク アクセスの構成ビルド中にVPNに接続する" }, 
{ "title" : "発信Webhookをアプリに追加する ", 
"url" : "アプリ/webhook/発信webhookの追加.html#発信webhookをアプリに追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ 発信Webhookの追加 \/ 発信Webhookをアプリに追加する ", 
"snippet" : "Bitriseによって送信されるWebhookをWebUIでセットアップおよび構成できます。方法を見てみましょう！ 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、を選択します。 統合 下にスクロールして 発信Webhook 。 クリック Webhookを追加する 。 通知を送信するサービスのURLをに入力します URL 分野。 いずれかを選択します 私にすべてを送ってください または 個々のイベントを選択 オプション。 私にすべてを送ってください ：サポート...", 
"body" : "Bitriseによって送信されるWebhookをWebUIでセットアップおよび構成できます。方法を見てみましょう！ 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、を選択します。 統合 下にスクロールして 発信Webhook 。 クリック Webhookを追加する 。 通知を送信するサービスのURLをに入力します URL 分野。 いずれかを選択します 私にすべてを送ってください または 個々のイベントを選択 オプション。 私にすべてを送ってください ：サポートされているすべてのイベントタイプがWebhookをトリガーします。現在、ビルドイベントのみがサポートされていますが、将来的には他のオプションもあります。 個々のイベントを選択 ：Webhookをトリガーする個々のイベントを指定できます。 必要に応じて、カスタムヘッダーをWebhookに追加します。 ヘッダー セクションで、ヘッダーの名前と値を指定します。完了したら、をクリックします ヘッダーを追加 。 たとえば、WebhookをリッスンするAPIがある場合、カスタムヘッダーとして設定されたAPIキーを使用してリクエストを追跡できます。 ヘッダー値の非表示 下のチェックボックスをオンにすると、ヘッダーの値を非表示にできます。 隠れる .これを行うと、値を再度表示または変更できなくなることに注意してください。 クリック Webhookを作成する 。 そして、あなたは完了です！ Webhookの横にある鉛筆アイコンをクリックすると、いつでもWebhookを変更できます。 " }, 
{ "title" : "発信Webhookへのカスタムヘッダーの追加 ", 
"url" : "アプリ/webhook/発信webhookの追加.html#発信webhookへのカスタムヘッダーの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ 発信Webhookの追加 \/ 発信Webhookへのカスタムヘッダーの追加 ", 
"snippet" : "を介して発信Webhookにヘッダーを追加できます コード Webインターフェイスのタブ。たとえば、WebhookをリッスンするAPIがある場合、カスタムヘッダーとして設定されたAPIキーを使用してリクエストを追跡できます。 次の場合にカスタムヘッダーを追加できます。 新しい発信Webhookを作成する 。 クリックして既存の発信Webhookを変更する 編集 URLの横にあるボタン。 ヘッダーを追加するには： を見つける WEBHOOKヘッダー セクション。 キーと値をヘッダーに追加します。ヘッダーを保存できるようにするには、両方が必要です。 クリック ヘッダーを追加 。 クリック Webh...", 
"body" : "を介して発信Webhookにヘッダーを追加できます コード Webインターフェイスのタブ。たとえば、WebhookをリッスンするAPIがある場合、カスタムヘッダーとして設定されたAPIキーを使用してリクエストを追跡できます。 次の場合にカスタムヘッダーを追加できます。 新しい発信Webhookを作成する 。 クリックして既存の発信Webhookを変更する 編集 URLの横にあるボタン。 ヘッダーを追加するには： を見つける WEBHOOKヘッダー セクション。 キーと値をヘッダーに追加します。ヘッダーを保存できるようにするには、両方が必要です。 クリック ヘッダーを追加 。 クリック Webhookを作成する \/ Webhookを更新する 。 " }, 
{ "title" : "発信Webhook配信の確認 ", 
"url" : "アプリ/webhook/発信webhookの追加.html#発信webhook配信の確認", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ Webhook \/ 発信Webhookの追加 \/ 発信Webhook配信の確認 ", 
"snippet" : "発信Webhookの最近の配信をいつでも確認し、必要に応じて再送信できます。配信が成功したかどうかに応じて、配信には適切なステータスコードが付けられます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 下にスクロールして 発信Webhook 。 Webhookを見つけて、 アイコン。 配信を選択して展開すると、完全なリクエストとレスポンスが表示されます。 Webhookペイロードはいつでも再配信できます。必要な配達を見つけて、 その横にあるアイコ...", 
"body" : "発信Webhookの最近の配信をいつでも確認し、必要に応じて再送信できます。配信が成功したかどうかに応じて、配信には適切なステータスコードが付けられます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 。 下にスクロールして 発信Webhook 。 Webhookを見つけて、 アイコン。 配信を選択して展開すると、完全なリクエストとレスポンスが表示されます。 Webhookペイロードはいつでも再配信できます。必要な配達を見つけて、 その横にあるアイコン。 ペイロードの編集 Webhookペイロードの配信を再試行する前に、Webhook構成を編集できます。それを閉めて 最近の配達 ポップアップウィンドウをクリックして、 Webhookの横にあるアイコンで編集します。終了したら、をクリックします Webhookを更新する 。 " }, 
{ "title" : "リポジトリのURLとデフォルトのブランチを設定する ", 
"url" : "アプリ/リポジトリのurlとデフォルトのブランチを設定する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ リポジトリのURLとデフォルトのブランチを設定する ", 
"snippet" : "Bitriseに新しいアプリを追加するときは、ソースコードを保存するために使用されるリポジトリと、Bitriseがデフォルトのブランチとして使用するブランチを指定します。これらはアプリ設定からいつでも変更できます。 Bitriseに新しいアプリを追加するときは、ソースコードを保存するために使用されるリポジトリと、Bitriseがデフォルトのブランチとして使用するブランチを指定します。 アプリをセットアップしたら、いつでもこれらを変更できます。...", 
"body" : "Bitriseに新しいアプリを追加するときは、ソースコードを保存するために使用されるリポジトリと、Bitriseがデフォルトのブランチとして使用するブランチを指定します。これらはアプリ設定からいつでも変更できます。 Bitriseに新しいアプリを追加するときは、ソースコードを保存するために使用されるリポジトリと、Bitriseがデフォルトのブランチとして使用するブランチを指定します。 アプリをセットアップしたら、いつでもこれらを変更できます。 " }, 
{ "title" : "リポジトリのURLを変更する ", 
"url" : "アプリ/リポジトリのurlとデフォルトのブランチを設定する.html#リポジトリのurlを変更する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ リポジトリのURLとデフォルトのブランチを設定する \/ リポジトリのURLを変更する ", 
"snippet" : "リポジトリのURLは、Bitriseがリポジトリにアクセスできるアドレスです。 SSHURLまたはHTTPSURLのいずれかです。セキュリティ上の理由から、すべてのプライベートアプリにSSHURLを使用することを強くお勧めします。 HTTPS URL の使用 HTTPS Git URL を使用できます。この場合、SSH キーは必要ありません。ただし、HTTPS URL を介してプライベート Git リポジトリまたは Git サブモジュールにアクセスするには、追加の構成が必要です。 HTTPS を使用したプライベート Git リポジトリへのアクセス . プロジェクトのリポジトリを移動した場合、ま...", 
"body" : "リポジトリのURLは、Bitriseがリポジトリにアクセスできるアドレスです。 SSHURLまたはHTTPSURLのいずれかです。セキュリティ上の理由から、すべてのプライベートアプリにSSHURLを使用することを強くお勧めします。 HTTPS URL の使用 HTTPS Git URL を使用できます。この場合、SSH キーは必要ありません。ただし、HTTPS URL を介してプライベート Git リポジトリまたは Git サブモジュールにアクセスするには、追加の構成が必要です。 HTTPS を使用したプライベート Git リポジトリへのアクセス . プロジェクトのリポジトリを移動した場合、またはその他の理由でURLが変更された場合は、Bitriseでリポジトリを更新して、問題なくビルドを続行できます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側のメニューから、 全般的 。 クリック 編集 。 を見つける リポジトリのURL 分野。 新しいURLを入力します。 クリック 保存 変更を保存します。 " }, 
{ "title" : "デフォルトのブランチを変更する ", 
"url" : "アプリ/リポジトリのurlとデフォルトのブランチを設定する.html#デフォルトのブランチを変更する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ リポジトリのURLとデフォルトのブランチを設定する \/ デフォルトのブランチを変更する ", 
"snippet" : "デフォルトのブランチは、他の構成で特に示されていない場合にBitriseが使用するリポジトリのブランチです。 デフォルトのブランチはいつでも変更できます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側のメニューから、 全般的 。 クリック 編集 。 を見つける デフォルトのブランチ 分野。 デフォルトのブランチとして使用するブランチの名前を入力します。 クリック 保存 変更を保存します。...", 
"body" : "デフォルトのブランチは、他の構成で特に示されていない場合にBitriseが使用するリポジトリのブランチです。 デフォルトのブランチはいつでも変更できます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側のメニューから、 全般的 。 クリック 編集 。 を見つける デフォルトのブランチ 分野。 デフォルトのブランチとして使用するブランチの名前を入力します。 クリック 保存 変更を保存します。 " }, 
{ "title" : "SSHキーの構成 ", 
"url" : "アプリ/sshキーの構成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ SSHキーの構成 ", 
"snippet" : "アプリのリポジトリにアクセスするには、BitriseにSSHキーが必要です。 Bitriseにアプリを最初に追加するときにSSHキーを追加できますが、アプリ設定の任意の時点でキーを更新できます。 SSHキーは認証の主要な方法です。アプリのリポジトリにアクセスするには、Bitriseは公開鍵とプライベートSSH鍵のペアを必要とし、公開鍵はアプリのGitリポジトリに登録されています。 HTTPS URL の使用 HTTPS Git URL を使用できます。この場合、SSH キーは必要ありません。ただし、HTTPS URL を介してプライベート Git リポジトリまたは Git サブモジュールにアク...", 
"body" : "アプリのリポジトリにアクセスするには、BitriseにSSHキーが必要です。 Bitriseにアプリを最初に追加するときにSSHキーを追加できますが、アプリ設定の任意の時点でキーを更新できます。 SSHキーは認証の主要な方法です。アプリのリポジトリにアクセスするには、Bitriseは公開鍵とプライベートSSH鍵のペアを必要とし、公開鍵はアプリのGitリポジトリに登録されています。 HTTPS URL の使用 HTTPS Git URL を使用できます。この場合、SSH キーは必要ありません。ただし、HTTPS URL を介してプライベート Git リポジトリまたは Git サブモジュールにアクセスするには、追加の構成が必要です。 HTTPS を使用したプライベート Git リポジトリへのアクセス . Bitriseにアプリを最初に追加するときにSSHキーを追加できますが、いつでもキーを更新できます。アプリを追加するときにSSHキーの構成をスキップして、後でSSHキーを登録することもできます。 独自のSSHキーを生成する 簡単なコマンドライン\/ターミナルコマンドを使用して、独自のSSHキーペアを生成できます。 ssh-keygen -t rsa -b 4096 -P '' -f .\/bitrise-ssh -m PEM これにより、現在のディレクトリ（コマンドを実行するディレクトリ）に2つのファイルが生成されます。 bitrise-ssh （秘密鍵） bitrise-ssh.pub （公開鍵） コピーして貼り付ける必要があります 公開鍵 Gitホスティングサービス（GitHub、Bitbucketなど）に、そしてアプリを登録するときに bitrise.io 、あなたは提供する必要があります 秘密鍵 。 SSHキーを設定するには bitrise.io ： 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 を見つける SSH設定 セクション。 クリック SSHキーペアを変更する 。 以前にSSHキーを追加したことがない場合は、ボタンに次のように表示されます。 SSHキーペアを追加します 代わりは。 次の3つのオプションから1つを選択します。 SSHキーペアを生成し、GitHubに自動追加します ：Bitriseは公開SSHキーをGitHubリポジトリに自動的に登録します。リポジトリに対する管理者権限がある場合は、これを選択してください。 SSHキーペアを生成する ：BitriseはSSHキーペアを生成するため、Gitリポジトリに公開キーを手動で登録する必要があります。 独自のSSHキーペアを使用する ：認証用に独自のSSHキーペアを提供し、公開キーをGitリポジトリに手動で登録する必要があります。 " }, 
{ "title" : "アプリへのユーザー アクセスの管理 ", 
"url" : "アプリ/アプリへのユーザー-アクセスの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリへのユーザー アクセスの管理 ", 
"snippet" : "アプリで共同作業するには、ユーザーはアプリのチームの一員である必要があります。ワークスペースグループは、ワークスペース設定の[チーム]ページまたは[アプリ設定]ページからアプリに追加できます。 各Bitriseアプリはワークスペースによって所有されていますが、これは、そのワークスペースに属するすべてのメンバーが特定のアプリにアクセスできることを意味するわけではありません。アプリで共同作業できるようにするには、ユーザーはアプリのチームの一員である必要があります。 アプリのチームは、アプリでの作業に招待されたすべてのユーザーで構成されます。アプリのチームにユーザーを追加するには、次の2つの方法があ...", 
"body" : "アプリで共同作業するには、ユーザーはアプリのチームの一員である必要があります。ワークスペースグループは、ワークスペース設定の[チーム]ページまたは[アプリ設定]ページからアプリに追加できます。 各Bitriseアプリはワークスペースによって所有されていますが、これは、そのワークスペースに属するすべてのメンバーが特定のアプリにアクセスできることを意味するわけではありません。アプリで共同作業できるようにするには、ユーザーはアプリのチームの一員である必要があります。 アプリのチームは、アプリでの作業に招待されたすべてのユーザーで構成されます。アプリのチームにユーザーを追加するには、次の2つの方法があります。 外部の貢献者を追加します。 アプリを所有するワークスペースからグループの1つを追加します。 同様に、アプリへのアクセスを取り消す方法は 2 つあります。 グループからのアクセスの取り消し ユーザーからのアクセスの取り消し " }, 
{ "title" : "アプリチームに外部の貢献者を追加する ", 
"url" : "アプリ/アプリへのユーザー-アクセスの管理.html#アプリチームに外部の貢献者を追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリへのユーザー アクセスの管理 \/ アプリチームに外部の貢献者を追加する ", 
"snippet" : "外部の貢献者とは、アプリのチームの一員であるが、そうではないユーザーです。 ワークスペースのメンバー それはアプリを所有しています。 管理者と所有者のみ あなたはする必要があります 管理者 アプリのチームまたは 所有者 アプリを所有するワークスペースの新しいチーム メンバーをアプリに追加できるようにします。 外部の貢献者を許可する ワークスペースは、外部の貢献者の許可を無効にすることができます。これを行うには、ワークスペースのプロファイルページに移動し、 人 左側のタブ。下にスクロールして 外部の貢献者 セクションとトグルオフ 外部の貢献者を許可する 。 外部の貢献者がいるアプリが外部の貢献者...", 
"body" : "外部の貢献者とは、アプリのチームの一員であるが、そうではないユーザーです。 ワークスペースのメンバー それはアプリを所有しています。 管理者と所有者のみ あなたはする必要があります 管理者 アプリのチームまたは 所有者 アプリを所有するワークスペースの新しいチーム メンバーをアプリに追加できるようにします。 外部の貢献者を許可する ワークスペースは、外部の貢献者の許可を無効にすることができます。これを行うには、ワークスペースのプロファイルページに移動し、 人 左側のタブ。下にスクロールして 外部の貢献者 セクションとトグルオフ 外部の貢献者を許可する 。 外部の貢献者がいるアプリが外部の貢献者を許可しないワークスペースに転送されると、アプリの既存の外部の貢献者はアプリのチームから自動的に削除されます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側のメニューから、 チーム . あなたが上にいることを確認してください 人々 タブ。 クリック 寄稿者を追加 。 メールアドレスを入力し、 役割を選択する . Bitriseに登録されていない場合は、招待メールを送信します。 クリック 保存 . " }, 
{ "title" : "アプリチームへのワークスペースグループの追加 ", 
"url" : "アプリ/アプリへのユーザー-アクセスの管理.html#アプリチームへのワークスペースグループの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリへのユーザー アクセスの管理 \/ アプリチームへのワークスペースグループの追加 ", 
"snippet" : "ワークスペースはグループで構成されます。グループには、ワークスペースに属するすべてのユーザーが含まれます。ワークスペースから特定のアプリにユーザーを割り当てるための最も便利な方法は、ユーザーのグループをアプリのチームに割り当てることです。 ワークスペースグループで構成されるアプリチーム と呼ばれるワークスペースを考えてみましょう TestSpace と呼ばれるアプリを所有しています TestApp 。 TestOrg 次のグループがあります。 グループアルファ -それらはに割り当てられています TestApp と 管理者 役割。このグループのメンバーは、他のグループをアプリに割り当てたり、外部...", 
"body" : "ワークスペースはグループで構成されます。グループには、ワークスペースに属するすべてのユーザーが含まれます。ワークスペースから特定のアプリにユーザーを割り当てるための最も便利な方法は、ユーザーのグループをアプリのチームに割り当てることです。 ワークスペースグループで構成されるアプリチーム と呼ばれるワークスペースを考えてみましょう TestSpace と呼ばれるアプリを所有しています TestApp 。 TestOrg 次のグループがあります。 グループアルファ -それらはに割り当てられています TestApp と 管理者 役割。このグループのメンバーは、他のグループをアプリに割り当てたり、外部の貢献者を追加したり、アプリの設定を変更したり、役割やワークフローを管理したりできます。 グループベータ -それらはに割り当てられています TestApp とともに デベロッパー 役割。このグループのメンバーは、ビルドの実行、ビルドログの表示、ビルドの表示を行うことができます。 グループガンマ -それらはに割り当てられています TestApp とともに テスター\/ QA 役割。ビルドのみを表示できます。 ワークスペースグループをBitriseアプリのチームに割り当てるには、次の2つの方法があります。 から割り当てることができます チーム ワークスペースのプロファイル設定ページのタブ。 あなたはそれをに割り当てることができます アプリの設定 アプリのページ。 " }, 
{ "title" : "ワークスペースのプロファイル設定ページからのグループの割り当て ", 
"url" : "アプリ/アプリへのユーザー-アクセスの管理.html#ワークスペースのプロファイル設定ページからのグループの割り当て", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリへのユーザー アクセスの管理 \/ アプリチームへのワークスペースグループの追加 \/ ワークスペースのプロファイル設定ページからのグループの割り当て ", 
"snippet" : "であるアカウントでサインインします オーナー ワークスペースの名前の横にある歯車のアイコンを選択して、ワークスペースのプロファイルページを開きます。 左側で、 チーム メニューオプションから、あなたが上にいることを確認してください グループ タブ。 割り当てるグループを選択し、によって示されるドロップダウンメニューをクリックします。 シンボル。 クリック アプリへのアクセスを管理する 。 必要なアプリを見つけてグループに適切な役割を選択するか、ラジオボタンを使用して現在のすべてのアプリのグループの役割を選択できます。 役割のチートシート の役割に関するチートシートを確認できます。 アプリチーム...", 
"body" : "であるアカウントでサインインします オーナー ワークスペースの名前の横にある歯車のアイコンを選択して、ワークスペースのプロファイルページを開きます。 左側で、 チーム メニューオプションから、あなたが上にいることを確認してください グループ タブ。 割り当てるグループを選択し、によって示されるドロップダウンメニューをクリックします。 シンボル。 クリック アプリへのアクセスを管理する 。 必要なアプリを見つけてグループに適切な役割を選択するか、ラジオボタンを使用して現在のすべてのアプリのグループの役割を選択できます。 役割のチートシート の役割に関するチートシートを確認できます。 アプリチームでのユーザーの役割、または任意のアプリでそれを見つける チーム タブ。 クリック 変更内容を保存 変更を確定します。 " }, 
{ "title" : "アプリ設定ページからのグループの割り当て ", 
"url" : "アプリ/アプリへのユーザー-アクセスの管理.html#アプリ設定ページからのグループの割り当て", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリへのユーザー アクセスの管理 \/ アプリチームへのワークスペースグループの追加 \/ アプリ設定ページからのグループの割り当て ", 
"snippet" : "のアプリのページに移動します bitrise.io 。 クリック アプリの設定 。 左側で、 チーム メニューオプションから。 あなたが上にいることを確認してください グループ タブ。 クリック グループへのアクセスを許可する 。 追加するグループを見つけ、ドロップダウンメニューを使用してグループの役割を選択します。 クリック 保存 。...", 
"body" : "のアプリのページに移動します bitrise.io 。 クリック アプリの設定 。 左側で、 チーム メニューオプションから。 あなたが上にいることを確認してください グループ タブ。 クリック グループへのアクセスを許可する 。 追加するグループを見つけ、ドロップダウンメニューを使用してグループの役割を選択します。 クリック 保存 。 " }, 
{ "title" : "グループからアプリへのアクセスを取り消す ", 
"url" : "アプリ/アプリへのユーザー-アクセスの管理.html#グループからアプリへのアクセスを取り消す", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリへのユーザー アクセスの管理 \/ グループからアプリへのアクセスを取り消す ", 
"snippet" : "管理者と所有者のみ あなたはする必要があります 管理者 アプリのチームまたは 所有者 アプリへのアクセスを取り消すには、アプリを所有するワークスペースの。 Bitrise でアプリを開きます。 クリック アプリの設定 . 左側のメニューから、 チーム . に行く グループ タブ。 削除したいグループを検索し、「 \"。 クリック アクセス権を取り消す 結果のウィンドウで、アプリからのグループのアクセスを取り消します。...", 
"body" : "管理者と所有者のみ あなたはする必要があります 管理者 アプリのチームまたは 所有者 アプリへのアクセスを取り消すには、アプリを所有するワークスペースの。 Bitrise でアプリを開きます。 クリック アプリの設定 . 左側のメニューから、 チーム . に行く グループ タブ。 削除したいグループを検索し、「 \"。 クリック アクセス権を取り消す 結果のウィンドウで、アプリからのグループのアクセスを取り消します。 " }, 
{ "title" : "1 人のユーザーからアプリへのアクセスを取り消す ", 
"url" : "アプリ/アプリへのユーザー-アクセスの管理.html#1-人のユーザーからアプリへのアクセスを取り消す", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリへのユーザー アクセスの管理 \/ 1 人のユーザーからアプリへのアクセスを取り消す ", 
"snippet" : "管理者と所有者のみ あなたはする必要があります 管理者 アプリのチームまたは 所有者 アプリへのアクセスを取り消すには、アプリを所有するワークスペースの。 Bitrise でアプリを開きます。 クリック アプリの設定 . 左側のメニューから、 チーム . に行く 人々 タブ。 削除したいユーザーを検索し、「 \"。 クリック はい 結果のウィンドウで、アプリからのアクセスを取り消します。...", 
"body" : "管理者と所有者のみ あなたはする必要があります 管理者 アプリのチームまたは 所有者 アプリへのアクセスを取り消すには、アプリを所有するワークスペースの。 Bitrise でアプリを開きます。 クリック アプリの設定 . 左側のメニューから、 チーム . に行く 人々 タブ。 削除したいユーザーを検索し、「 \"。 クリック はい 結果のウィンドウで、アプリからのアクセスを取り消します。 " }, 
{ "title" : "アプリチームでのユーザーの役割 ", 
"url" : "アプリ/アプリチームでのユーザーの役割.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリチームでのユーザーの役割 ", 
"snippet" : "Bitriseでは役割が非常に重要です。これらは、アプリケーションで実行できることと実行できないことを制限します。 役割はアプリベースで機能します。同じユーザーが異なるアプリケーションで異なる役割を持つことができます。そのため、ワークスペースには、ワークスペースの所有者の役割を除いて、固有の役割はありません。ワークスペースにはグループがあり、アプリのチームでさまざまなグループにさまざまな役割を割り当てることができます。...", 
"body" : "Bitriseでは役割が非常に重要です。これらは、アプリケーションで実行できることと実行できないことを制限します。 役割はアプリベースで機能します。同じユーザーが異なるアプリケーションで異なる役割を持つことができます。そのため、ワークスペースには、ワークスペースの所有者の役割を除いて、固有の役割はありません。ワークスペースにはグループがあり、アプリのチームでさまざまなグループにさまざまな役割を割り当てることができます。 " }, 
{ "title" : "所有者 ", 
"url" : "アプリ/アプリチームでのユーザーの役割.html#所有者", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリチームでのユーザーの役割 \/ 所有者 ", 
"snippet" : "BitriseアプリはWorkspacesが所有しています。アプリのチームでは、ワークスペースの所有者であるユーザーは オーナー アプリへのアクセス権。 所有者はアプリに無制限にアクセスできます。アプリを破棄したり、アプリの所有権を譲渡したりできるのは所有者だけであり、支払い情報にアクセスできるのは所有者だけです。...", 
"body" : "BitriseアプリはWorkspacesが所有しています。アプリのチームでは、ワークスペースの所有者であるユーザーは オーナー アプリへのアクセス権。 所有者はアプリに無制限にアクセスできます。アプリを破棄したり、アプリの所有権を譲渡したりできるのは所有者だけであり、支払い情報にアクセスできるのは所有者だけです。 " }, 
{ "title" : "管理者 ", 
"url" : "アプリ/アプリチームでのユーザーの役割.html#管理者", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリチームでのユーザーの役割 \/ 管理者 ", 
"snippet" : "アプリのチームの管理者向けの役割に関するチートシートは次のとおりです。 管理者はアプリを削除できませんが、他のメンバーをアプリでの作業に招待することはできます。管理者は他のユーザーに管理者権限を与えることもできますが、アプリの所有権を譲渡することはできません。...", 
"body" : "アプリのチームの管理者向けの役割に関するチートシートは次のとおりです。 管理者はアプリを削除できませんが、他のメンバーをアプリでの作業に招待することはできます。管理者は他のユーザーに管理者権限を与えることもできますが、アプリの所有権を譲渡することはできません。 " }, 
{ "title" : "開発者 ", 
"url" : "アプリ/アプリチームでのユーザーの役割.html#開発者", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリチームでのユーザーの役割 \/ 開発者 ", 
"snippet" : "開発者向けの役割に関するチートシートは次のとおりです。 開発者は、チームメンバーの役割を変更したり、新しいチームメンバーを追加したり、既存のチームメンバーを削除したり、ワークフローを作成、編集、削除したりすることはできません。ただし、ビルドを実行したり、ビルドログを表示したりすることはできます。 支払い情報、アクセストークン、さらにはWebhookなどの機密データにアクセスすることはできません。...", 
"body" : "開発者向けの役割に関するチートシートは次のとおりです。 開発者は、チームメンバーの役割を変更したり、新しいチームメンバーを追加したり、既存のチームメンバーを削除したり、ワークフローを作成、編集、削除したりすることはできません。ただし、ビルドを実行したり、ビルドログを表示したりすることはできます。 支払い情報、アクセストークン、さらにはWebhookなどの機密データにアクセスすることはできません。 " }, 
{ "title" : "テスター\/ QA ", 
"url" : "アプリ/アプリチームでのユーザーの役割.html#テスター--qa", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリチームでのユーザーの役割 \/ テスター\/ QA ", 
"snippet" : "テスター\/ QAの役割に関するチートシートは次のとおりです。 テスターはビルドのみを表示できます。ビルドログにアクセスしたり、アプリを変更したりすることはできません。 支払い情報、アクセストークン、さらにはWebhookなどの機密データにアクセスすることはできません。...", 
"body" : "テスター\/ QAの役割に関するチートシートは次のとおりです。 テスターはビルドのみを表示できます。ビルドログにアクセスしたり、アプリを変更したりすることはできません。 支払い情報、アクセストークン、さらにはWebhookなどの機密データにアクセスすることはできません。 " }, 
{ "title" : "アプリの所有者を変更する ", 
"url" : "アプリ/アプリの所有者を変更する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリの所有者を変更する ", 
"snippet" : "アプリの所有者は、ワークスペースプロファイルページまたはアプリのアプリ設定ページから変更できます。 ワークスペースはアプリを所有します。 Bitriseにアプリを追加するときは、アプリの所有者として機能するワークスペースを選択します。その時点から、ワークスペースの所有者のみがアプリの所有権を変更できます。 でアプリケーションを転送する必要がある場合があります ビットライズ 別のワークスペースに。これは2つの方法で行うことができます。 転送したいアプリを ワークスペースプロファイル ページの アプリ タブ。 任意のアプリをアプリから転送できます チーム タブ。...", 
"body" : "アプリの所有者は、ワークスペースプロファイルページまたはアプリのアプリ設定ページから変更できます。 ワークスペースはアプリを所有します。 Bitriseにアプリを追加するときは、アプリの所有者として機能するワークスペースを選択します。その時点から、ワークスペースの所有者のみがアプリの所有権を変更できます。 でアプリケーションを転送する必要がある場合があります ビットライズ 別のワークスペースに。これは2つの方法で行うことができます。 転送したいアプリを ワークスペースプロファイル ページの アプリ タブ。 任意のアプリをアプリから転送できます チーム タブ。 " }, 
{ "title" : "ワークスペースプロファイルページからのアプリの転送 ", 
"url" : "アプリ/アプリの所有者を変更する.html#ワークスペースプロファイルページからのアプリの転送", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリの所有者を変更する \/ ワークスペースプロファイルページからのアプリの転送 ", 
"snippet" : "所有者のみ アプリを別のワークスペースに転送するには、ワークスペースの所有者である必要があります。 外部の貢献者がいるアプリ 外部の貢献者がいるアプリを、外部の貢献者を許可しないワークスペースに転送すると、既存の貢献者はアプリのチームから自動的に削除されます。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 アプリ メニューオプションから。 クリック 所有権の譲渡（↔） アプリ名の横にあるボタンをクリックして、アプリ...", 
"body" : "所有者のみ アプリを別のワークスペースに転送するには、ワークスペースの所有者である必要があります。 外部の貢献者がいるアプリ 外部の貢献者がいるアプリを、外部の貢献者を許可しないワークスペースに転送すると、既存の貢献者はアプリのチームから自動的に削除されます。 Bitriseにログインし、右上のアカウントセレクタードロップダウンメニューを開きます。 ワークスペースを見つけ、その名前の横にある小さな歯車のアイコンをクリックして、ワークスペースのプロファイルページに移動します。 左側で、 アプリ メニューオプションから。 クリック 所有権の譲渡（↔） アプリ名の横にあるボタンをクリックして、アプリを選択します。 ユーザーまたはワークスペースを選択して、アプリをそれらに転送します。 クリック 所有権を譲渡する ファイナライズします。 所有権の譲渡は永続的です 譲渡が完了した後、アプリの所有権を変更できるのは新しい所有者だけです。 " }, 
{ "title" : "アプリ設定からアプリを転送する ", 
"url" : "アプリ/アプリの所有者を変更する.html#アプリ設定からアプリを転送する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリの所有者を変更する \/ アプリ設定からアプリを転送する ", 
"snippet" : "アプリの所有者であるアカウントでログインします。 を開きます アプリの設定 ページ。 あなたが持っていることを確認してください 全般的 左側のメニューオプションから選択します。 下にスクロールして 危険区域 ラベル。 クリック アプリの所有権を譲渡する ボタン。 ユーザーまたはワークスペースを選択して、アプリをそれらに転送します。 クリック 所有権を譲渡する ファイナライズします。 所有権の譲渡は永続的です！ 譲渡が完了した後、アプリの所有権を変更できるのは新しい所有者だけです。...", 
"body" : "アプリの所有者であるアカウントでログインします。 を開きます アプリの設定 ページ。 あなたが持っていることを確認してください 全般的 左側のメニューオプションから選択します。 下にスクロールして 危険区域 ラベル。 クリック アプリの所有権を譲渡する ボタン。 ユーザーまたはワークスペースを選択して、アプリをそれらに転送します。 クリック 所有権を譲渡する ファイナライズします。 所有権の譲渡は永続的です！ 譲渡が完了した後、アプリの所有権を変更できるのは新しい所有者だけです。 " }, 
{ "title" : "アプリのBitriseサポートアクセスを有効にする ", 
"url" : "アプリ/アプリのbitriseサポートアクセスを有効にする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ アプリのBitriseサポートアクセスを有効にする ", 
"snippet" : "アプリの設定ページからビットライズサポートアクセスを有効にすることができます。このようにして、サポートチームはプロジェクト、具体的にはワークフロー、ビルドログ、アプリ設定、およびbitrise.ymlにアクセスできます。 問題が発生した場合は、 サポートセンター ページを開いて、何が最も役立つかを確認してください。 ドキュメンテーション 、私たちをチェックしてください 知識ベース または私たちの コミュニティページ 特定の問題の解決策を見つけるため。をクリックして、サポートチームに連絡することもできます。 リクエストを送信する ボタン。 この記事では、を有効にする方法について説明します Bit...", 
"body" : "アプリの設定ページからビットライズサポートアクセスを有効にすることができます。このようにして、サポートチームはプロジェクト、具体的にはワークフロー、ビルドログ、アプリ設定、およびbitrise.ymlにアクセスできます。 問題が発生した場合は、 サポートセンター ページを開いて、何が最も役立つかを確認してください。 ドキュメンテーション 、私たちをチェックしてください 知識ベース または私たちの コミュニティページ 特定の問題の解決策を見つけるため。をクリックして、サポートチームに連絡することもできます。 リクエストを送信する ボタン。 この記事では、を有効にする方法について説明します Bitriseサポートアクセス サポートチームがプロジェクト、具体的にはワークフロー、ビルドログ、アプリ設定、またはymlにアクセスできるようにします。 Bitriseサポートユーザーは、有効にすると、アプリへの管理者アクセス権を持ちます。つまり、アプリの管理者アクセス権を持つ通常のユーザーが実行できることはすべて実行できます。ビルドにアクセスでき、ワークフローを編集したり、入力を変更したりできます。 チーム 、 コード とオプション アプリの設定 。 お支払い情報にアクセスできません BitriseSupportユーザーはあなたを見ることができません 口座情報 または任意 請求する 情報。アカウントの所有者のみがこの情報にアクセスでき、アカウント関連のレコードを変更する権利があります。 サポートユーザーは、サポートユーザーが有効になっていない他のアプリを表示できません。 Bitrise Support Accessはどのくらいアクティブなままですか？ セキュリティ上の理由により、Bitrise Support Accessをオンに切り替えると、2週間アクティブのままになり、その後自動的に取り消されます。 設定方法を見てみましょう！ 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 全般的 メニューオプションから。 下にスクロールして サポートアクセス スイッチを右に切り替えて有効にします。動作するまでに数秒かかる場合があり、有効なステータスを確認するにはページを更新する必要がある場合があります。 ワークフローが失敗した場合のベストプラクティスは、次のような失敗したワークフローの新しい正しいバージョンを作成することです。 support-testing 。あなたは私たちを比較することができます support-testing あなた自身で更新するか、 support-testing ワークフローを作成し、必要に応じて名前を変更して、さらに開発します。 " }, 
{ "title" : "サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ ", 
"url" : "アプリ/サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ ", 
"snippet" : "Bitriseは、ビルドを成功させるためにすべてのリポジトリまたはサブモジュールにアクセスする必要があるため、アプリにサブモジュールまたはプライベートリポジトリの依存関係がある場合は、それらへのアクセスもBitriseに許可する必要があります。 1つ以上のサブモジュールまたは他のプライベートリポジトリの依存関係を持つプロジェクト（CocoaPodsリポジトリなど）がある場合、ビルドを成功させるには、Bitriseがすべてのリポジトリまたはサブモジュールにアクセスする必要があります。 BitriseはSSHを使用してプライベートアプリのGitリポジトリにアクセスします。アクセスを許可するには、B...", 
"body" : "Bitriseは、ビルドを成功させるためにすべてのリポジトリまたはサブモジュールにアクセスする必要があるため、アプリにサブモジュールまたはプライベートリポジトリの依存関係がある場合は、それらへのアクセスもBitriseに許可する必要があります。 1つ以上のサブモジュールまたは他のプライベートリポジトリの依存関係を持つプロジェクト（CocoaPodsリポジトリなど）がある場合、ビルドを成功させるには、Bitriseがすべてのリポジトリまたはサブモジュールにアクセスする必要があります。 BitriseはSSHを使用してプライベートアプリのGitリポジトリにアクセスします。アクセスを許可するには、Bitriseアプリ用に生成された公開SSHキーを使用してすべてのリポジトリにアクセスできることを確認する必要があります。 アプリのプライバシー このガイドの範囲は、主にプライベートBitriseアプリを対象としています。 Gitクローン作成サブモジュールとリポジトリの依存関係のセクションでは、パブリックアプリを使用して複数のリポジトリにアクセスする方法について簡単に説明します。プロセスははるかに簡単で、必要なのはすべてのリポジトリにHTTPSgitクローンURLがあることを確認することだけです。公開アプリではSSHキーを使用できないため、SSHキーについて心配する必要はありません。 これを実現するには、次の2つの方法があります。 ビルド中にアクセスする必要があるすべてのリポジトリに同じSSHキーを登録します。 SSHキーをボットユーザーに登録し、そのユーザーをすべてのリポジトリに追加します。 すべてのリポジトリに同じSSHキーを登録するのが最善で最も安全な方法ですが、すべてのサービスがそれをサポートしているわけではありません。 GitLabとBitbucketはそれをサポートしていますが、GitHubはサポートしていません。コードがGitHubに保存されている場合は、読み進めてください。 ボットユーザーまたはマシンユーザー（GitHubではマシンユーザーと呼ばれます）を使用して、もう1つのオプションについて詳しく説明します。簡単に言うと、概念は単純です。Bitrise公開SSHキーをユーザーに登録し、そのユーザーをBitriseビルドでアクセスする必要のあるすべてのリポジトリに追加します。 読み取り専用アクセス権を持つマシンユーザー 特別なボット\/マシンユーザーを使用する必要はありません。SSHキーをgitホスティングサービスの自分のアカウントに追加できます。ただし、ベストプラクティスは、ビルド中にアクセスするリポジトリに対して、読み取り専用アクセス権を持つマシンユーザーを使用することです。 GitHubはこの方法を推奨しています 複数のリポジトリにアクセスするため。簡単に例を見てみましょう。 マルチビットアプリ MultiBitと呼ばれるBitriseアプリがあります。メインリポジトリがあり、Bitriseビルド中に他の2つのプライベートリポジトリから追加データをプルする必要があります。私たちのメインユーザーはBitManと呼ばれ、彼のGitHubアカウントは彼のBitriseアカウントにリンクされています。ビルド中にプライベートリポジトリにアクセスするために、BitManはGitHub上にBitBotと呼ばれる別のユーザーを作成します。 BitBotがマシンユーザーになります。 今、BitManはにアクセスします アプリの設定 彼のBitriseアプリのページ、およびから公開SSHキーをコピーします 現在のSSH公開鍵 分野。次に、BitManはSSHキーをGitHubのBitBotユーザーに追加し、BitBotを共同作業者として2つのプライベートリポジトリに追加します。これで、BitBotはBitrise公開鍵を持ち、必要に応じてプライベートリポジトリにアクセスできます。 BitManのセットアップが機能するかどうかをテストする時が来ました。 BitManはBitriseに移動し、ワークフローエディターを開きます。彼は持っています SSHキーをアクティブ化する SSHキーが機能するように、彼のリポジトリにステップインします。 BitManは 脚本 プライベートリポジトリのクローンを作成する手順- Gitクローン ステップはメインリポジトリでのみ機能します！すべてが完了すると、ビルドは期待どおりに機能するはずです。 " }, 
{ "title" : "マシンユーザーを使用してプライベートリポジトリにアクセスする ", 
"url" : "アプリ/サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ.html#マシンユーザーを使用してプライベートリポジトリにアクセスする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ \/ マシンユーザーを使用してプライベートリポジトリにアクセスする ", 
"snippet" : "NS マシンまたはボットユーザー は人間が使用しないGitHubユーザーであり、代わりに自動化にのみ使用されます。これは、プライベートリポジトリにアクセスするための最良の方法です。マシンユーザーを作成し、パブリックSSHキーをユーザーに追加してから、ユーザーにリポジトリへの読み取りアクセスを提供します。...", 
"body" : "NS マシンまたはボットユーザー は人間が使用しないGitHubユーザーであり、代わりに自動化にのみ使用されます。これは、プライベートリポジトリにアクセスするための最良の方法です。マシンユーザーを作成し、パブリックSSHキーをユーザーに追加してから、ユーザーにリポジトリへの読み取りアクセスを提供します。 " }, 
{ "title" : "マシンユーザーをリポジトリに追加する ", 
"url" : "アプリ/サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ.html#マシンユーザーをリポジトリに追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ \/ マシンユーザーを使用してプライベートリポジトリにアクセスする \/ マシンユーザーをリポジトリに追加する ", 
"snippet" : "マシンユーザーとして機能する新しいGitHubユーザーアカウントを作成します。 GitHubのリポジトリに移動し、 設定 タブ。 左側のメニューで、 共同編集者とチーム 。 下にスクロールして 共同編集者 窓。 検索入力フィールドで、新しく作成したアカウントのユーザー名を検索します。 クリック 共同編集者を追加 。 ユーザー権限をに変更します 読んだ 。 デフォルトでは、招待された共同編集者の許可は 書く 。もちろん、そのままにしておくこともできますが、Bitriseには読み取り権限で十分です。...", 
"body" : "マシンユーザーとして機能する新しいGitHubユーザーアカウントを作成します。 GitHubのリポジトリに移動し、 設定 タブ。 左側のメニューで、 共同編集者とチーム 。 下にスクロールして 共同編集者 窓。 検索入力フィールドで、新しく作成したアカウントのユーザー名を検索します。 クリック 共同編集者を追加 。 ユーザー権限をに変更します 読んだ 。 デフォルトでは、招待された共同編集者の許可は 書く 。もちろん、そのままにしておくこともできますが、Bitriseには読み取り権限で十分です。 " }, 
{ "title" : "マシンユーザーへのSSHキーの追加 ", 
"url" : "アプリ/サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ.html#マシンユーザーへのsshキーの追加-78640", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ \/ マシンユーザーを使用してプライベートリポジトリにアクセスする \/ マシンユーザーへのSSHキーの追加 ", 
"snippet" : "Bitriseがマシンユーザーを使用してリポジトリにアクセスできるようにするには、同じSSHキーをマシンユーザーとBitrise上のアプリに追加する必要があります。...", 
"body" : "Bitriseがマシンユーザーを使用してリポジトリにアクセスできるようにするには、同じSSHキーをマシンユーザーとBitrise上のアプリに追加する必要があります。 " }, 
{ "title" : "新しいアプリを追加するとき ", 
"url" : "アプリ/サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ.html#新しいアプリを追加するとき", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ \/ マシンユーザーを使用してプライベートリポジトリにアクセスする \/ マシンユーザーへのSSHキーの追加 \/ 新しいアプリを追加するとき ", 
"snippet" : "のプロセスを開始します Bitriseにアプリを追加する 。 リポジトリアクセスを設定するように求められたら、次のいずれかを選択できます 自動 また 独自のSSHを追加する ： 選択した場合 独自のSSHを追加する 、独自のSSHキーペアを生成できます。アプリ用に生成されたSSHキーを提供し、 GitHubマシンユーザーに公開鍵を追加します 。 選択した場合 自動 、 クリック する必要がある 追加のプライベートリポジトリを使用する必要があるかどうかを尋ねられたとき。 SSHをコピーします GitHubマシンユーザーへの公開鍵 。 プロセスを終了します。...", 
"body" : "のプロセスを開始します Bitriseにアプリを追加する 。 リポジトリアクセスを設定するように求められたら、次のいずれかを選択できます 自動 また 独自のSSHを追加する ： 選択した場合 独自のSSHを追加する 、独自のSSHキーペアを生成できます。アプリ用に生成されたSSHキーを提供し、 GitHubマシンユーザーに公開鍵を追加します 。 選択した場合 自動 、 クリック する必要がある 追加のプライベートリポジトリを使用する必要があるかどうかを尋ねられたとき。 SSHをコピーします GitHubマシンユーザーへの公開鍵 。 プロセスを終了します。 " }, 
{ "title" : "アプリがすでに存在する場合 ", 
"url" : "アプリ/サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ.html#アプリがすでに存在する場合", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ \/ マシンユーザーを使用してプライベートリポジトリにアクセスする \/ マシンユーザーへのSSHキーの追加 \/ アプリがすでに存在する場合 ", 
"snippet" : "Bitriseでアプリを開きます。 クリック アプリの設定 。 左側で、 統合 メニューオプションから。 からSSHキーをコピーします 現在のSSH公開鍵 分野。 SSH公開鍵をコピーして GitHubマシンユーザーに追加します 。...", 
"body" : "Bitriseでアプリを開きます。 クリック アプリの設定 。 左側で、 統合 メニューオプションから。 からSSHキーをコピーします 現在のSSH公開鍵 分野。 SSH公開鍵をコピーして GitHubマシンユーザーに追加します 。 " }, 
{ "title" : "Gitクローン作成サブモジュールとリポジトリの依存関係 ", 
"url" : "アプリ/サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ.html#gitクローン作成サブモジュールとリポジトリの依存関係", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ サブモジュールまたはプライベートリポジトリの依存関係を持つアプリ \/ Gitクローン作成サブモジュールとリポジトリの依存関係 ", 
"snippet" : "Bitriseビルド中に複数のリポジトリにアクセスする場合、2つのオプションがあります。 仮想マシン上のすべてのリポジトリのクローンを作成し、必要に応じてそれらにアクセスします。 追加のリポジトリをサブモジュールとしてメインリポジトリに追加します。 後者の場合、それらのクローンを作成することを心配する必要はありません。SSHアクセスを正しく設定すると、 Gitクローン ステップはすべての世話をします。 リポジトリの依存関係をサブモジュールとして追加したくない、または追加できない場合は、以下をお読みください。それらのクローンを作成する方法について説明します。 パブリックアプリとプライベートアプリ...", 
"body" : "Bitriseビルド中に複数のリポジトリにアクセスする場合、2つのオプションがあります。 仮想マシン上のすべてのリポジトリのクローンを作成し、必要に応じてそれらにアクセスします。 追加のリポジトリをサブモジュールとしてメインリポジトリに追加します。 後者の場合、それらのクローンを作成することを心配する必要はありません。SSHアクセスを正しく設定すると、 Gitクローン ステップはすべての世話をします。 リポジトリの依存関係をサブモジュールとして追加したくない、または追加できない場合は、以下をお読みください。それらのクローンを作成する方法について説明します。 パブリックアプリとプライベートアプリ アプリのすべてのサブモジュールまたはプライベートリポジトリの依存関係へのアクセスを許可する場合に留意すべき重要な詳細が1つあります。それは、アプリのプライバシー設定によって何が決まるかです。 gitURLを使用する必要があります 。 プライベートアプリをお持ちの場合：どこでもSSH URLを使用してください！ほとんどのサービスは、SSH URLに対してのみSSHキーベースの認証をサポートしています（たとえば、 git@github.com:bitrise-io\/bitrise.git ）。したがって、使用するすべてのプライベートリポジトリはSSHURLでアドレス指定する必要があります。 CocoaPods Podfileに直接プライベートgitリポジトリ参照がある場合は、そこでもSSHURLを使用する必要があります。同じことがサブモジュールとあなたが使用したい他のすべてのプライベートgitリポジトリURLにも当てはまります 登録したSSHキー オン bitrise.io 。 公開アプリをお持ちの場合：どこでもHTTPS URLを使用してください！ SSH URLには、リポジトリが公開されている場合でもSSHキーが必要です。セキュリティ上の理由から、公開アプリはSSHキーを持つことができません。パブリックリポジトリの場合、HTTPS git clone URLは認証を必要としないため、パブリックBitriseアプリに使用する必要があります。 Gitクローンステップ NS Gitクローン ステップはメインリポジトリでのみ機能します。複数のプライベートリポジトリにアクセスする必要がある場合は、複数追加しないでください Gitクローン ステップ。使用する 脚本 Bitrise仮想マシンでこれらのリポジトリのクローンを作成する手順。 ビルド中に追加のプライベートリポジトリのクローンを作成するには： BitriseパブリックSSHキーを持つユーザーをすべてのリポジトリに追加したことを確認してください。 あなたが持っていることを確認してください SSHキーをアクティブ化する ステップと Gitクローン ワークフローの開始時にステップします。 1つ以上追加する 脚本 追加のプライベートリポジトリをビルドに複製する手順。 ビルドを実行します。 クローンの問題 gitのクローン作成で問題が発生した場合（たとえば、すべてのサブモジュールがクローンされているわけではない場合）、クローン作成後に次のコマンドを試してください。 git submodule update –recursive –remote –merge –force " }, 
{ "title" : "公開アプリ ", 
"url" : "アプリ/公開アプリ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ 公開アプリ ", 
"snippet" : "パブリックアプリを作成するには、Bitriseに新しいアプリを追加し、プロセスの開始時にアプリのプライバシーをパブリックに設定します。 Bitriseアプリが公開されている場合、ビルドURLを持っている人は誰でもビルドログを見ることができます。 オープンソースプロジェクトは素晴らしいです-私たちは皆それらを愛しています！ただし、特に写真のCI \/ CDの場合は、維持するのが面倒な場合があります。そのため、Bitriseにパブリックアプリ機能を導入しました。これにより、すべての人の生活がずっと楽になります。 Bitriseアプリが公開されている場合、ビルドURLを持っている人は誰でもビルドログを...", 
"body" : "パブリックアプリを作成するには、Bitriseに新しいアプリを追加し、プロセスの開始時にアプリのプライバシーをパブリックに設定します。 Bitriseアプリが公開されている場合、ビルドURLを持っている人は誰でもビルドログを見ることができます。 オープンソースプロジェクトは素晴らしいです-私たちは皆それらを愛しています！ただし、特に写真のCI \/ CDの場合は、維持するのが面倒な場合があります。そのため、Bitriseにパブリックアプリ機能を導入しました。これにより、すべての人の生活がずっと楽になります。 Bitriseアプリが公開されている場合、ビルドURLを持っている人は誰でもビルドログを見ることができます。たとえば、GitHubのCIステータスチェックがプルリクエストで失敗した場合、誰でもビルドURLをクリックして、ビルドログを表示できます。 公開アプリを作成するには、Bitriseに新しいアプリを追加し、プロセスの開始時にアプリのプライバシーを次のように設定します。 公衆 。 後でプライバシーを変更することはできません この設定を後で変更することはできません。アプリをパブリックアプリとして追加すると、プライベートに戻すことはできません。アプリを再度追加する必要があります。 公開アプリを使用している場合、外部の寄稿者は問題のトラブルシューティングを簡単に行うことができます。たとえば、自分のアプリのプルリクエストによってビルドが失敗した理由を確認できます。 Bitriseログを表示するために、Bitriseチームに招待する必要はありません。また、Bitriseチームメンバーの助けも必要ありません。 もちろん、これは誰もがBitriseの公開アプリで何でもできるという意味ではありません。ログを表示しているユーザーが何らかの役割でアプリの作業に招待されていない場合、ユーザーは次のことしかできません。 ビルドログを表示します。 ビルドログをダウンロードします。 ビルドを表示する bitrise.yml ファイル。 公開アプリのビルドログは誰でも利用できます 覚えておいてください：公開アプリのビルドログと bitrise.yml ファイルは誰でも見ることができます-これらのファイルが見られたくないものを公開していないことを確認してください！ " }, 
{ "title" : "ホワイトラベルアプリバージョンの作成 ", 
"url" : "アプリ/ホワイトラベルアプリバージョンの作成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ ホワイトラベルアプリバージョンの作成 ", 
"snippet" : "ホワイトラベルプロジェクトのさまざまなバージョンを作成し、ワークフローをチェーンして環境変数に違いを設定することで、すべてまたは1つのバージョンのみをビルドできます。 このガイドでは、ホワイトラベルプロジェクトのさまざまなバージョンを作成し、ワークフローをチェーンして違いを設定することにより、すべてまたは1つのバージョンのみをビルドする方法について説明します。 環境変数。 この記事では、ホワイトラベルプロジェクトの3つの個別のバージョン（赤、緑、白）を作成しています。 このセットアップに必要なもの： 各バージョン固有のワークフローを起動するメインワークフロー。 バージョンを互いに区別するすべて...", 
"body" : "ホワイトラベルプロジェクトのさまざまなバージョンを作成し、ワークフローをチェーンして環境変数に違いを設定することで、すべてまたは1つのバージョンのみをビルドできます。 このガイドでは、ホワイトラベルプロジェクトのさまざまなバージョンを作成し、ワークフローをチェーンして違いを設定することにより、すべてまたは1つのバージョンのみをビルドする方法について説明します。 環境変数。 この記事では、ホワイトラベルプロジェクトの3つの個別のバージョン（赤、緑、白）を作成しています。 このセットアップに必要なもの： 各バージョン固有のワークフローを起動するメインワークフロー。 バージョンを互いに区別するすべてのパラメーターを設定できる1つ以上のバージョン固有のワークフロー。 ビルドロジックを記述し、バージョン固有のオプションをパラメーターとして参照するユーティリティワークフロー。 ユーティリティワークフローは、ワークフローIDの前にアンダースコアが付いているワークフローです。 。ユーティリティワークフローは、 bitrise_run コマンド：あなたはそれらを参照する必要があります before_run また after_run プロパティ。あなたはできる ユーティリティワークフローと通常のワークフローを連鎖させる ワークフローエディタで。 " }, 
{ "title" : "ホワイトラベルアプリのワークフローの準備 ", 
"url" : "アプリ/ホワイトラベルアプリバージョンの作成.html#ホワイトラベルアプリのワークフローの準備", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ ホワイトラベルアプリバージョンの作成 \/ ホワイトラベルアプリのワークフローの準備 ", 
"snippet" : "アプリを追加する 通常の方法でBitriseに。 上のアプリをクリックします ダッシュボード に行きます ワークフロー 。 の隣に ワークフロー 、 クリック +ワークフロー メインワークフローを作成します。 に基づいて新しいワークフローを追加します 空のワークフロー 。 この例では、メインのワークフローは次のように呼ばれます allcolor 。このワークフローは、チェーン内のバージョン固有のワークフローの実行を開始します。 クリック +ワークフロー バージョン固有のワークフローを作成します。 作成したいバージョンと同じ数のワークフローを追加し続けます。 に移動します 環境変数 タブをクリッ...", 
"body" : "アプリを追加する 通常の方法でBitriseに。 上のアプリをクリックします ダッシュボード に行きます ワークフロー 。 の隣に ワークフロー 、 クリック +ワークフロー メインワークフローを作成します。 に基づいて新しいワークフローを追加します 空のワークフロー 。 この例では、メインのワークフローは次のように呼ばれます allcolor 。このワークフローは、チェーン内のバージョン固有のワークフローの実行を開始します。 クリック +ワークフロー バージョン固有のワークフローを作成します。 作成したいバージョンと同じ数のワークフローを追加し続けます。 に移動します 環境変数 タブをクリックして、作成した各ワークフローにバージョン固有のパラメーターを追加します。 この画像でわかるように、ワークフロー環境変数を 緑 、 赤 と 白い ワークフローは残します allcolor 無傷。 に戻る ワークフロー タブをクリックしてクリックします ワークフロー あなたを作成するには ユーティリティワークフロー 。 たとえば、アンダースコアで始まる名前を付けるようにしてください。 _ランナー それ以外の場合、BitriseCLIはそれをユーティリティワークフローとして扱いません。 ユーティリティワークフローにステップを追加します。 この例では、 脚本 ワークフローから環境変数を継承し、ビルドログに値を出力するステップ。 " }, 
{ "title" : "ホワイトラベルアプリのワークフローの連鎖 ", 
"url" : "アプリ/ホワイトラベルアプリバージョンの作成.html#ホワイトラベルアプリのワークフローの連鎖", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ アプリ \/ ホワイトラベルアプリバージョンの作成 \/ ホワイトラベルアプリのワークフローの連鎖 ", 
"snippet" : "たくさんのワークフローの準備ができたので、次はそれらを正しい順序でチェーンします。 メインワークフローを選択します（ allcolor この例では）トリガーに応答します。 クリック 後にワークフローを追加 、バージョン固有のワークフローを選択し、 終わり 。 クリック 後にワークフローを追加 もう一度、バージョン固有のワークフローの直後にユーティリティワークフローを追加します。 ビルドするバージョンの数に応じて、ワークフローを追加し続けます。このガイドでは、後に3種類のワークフローを追加します allcolor ここで、各ワークフローの後に同じユーティリティワークフローが続きます。 これは、セ...", 
"body" : "たくさんのワークフローの準備ができたので、次はそれらを正しい順序でチェーンします。 メインワークフローを選択します（ allcolor この例では）トリガーに応答します。 クリック 後にワークフローを追加 、バージョン固有のワークフローを選択し、 終わり 。 クリック 後にワークフローを追加 もう一度、バージョン固有のワークフローの直後にユーティリティワークフローを追加します。 ビルドするバージョンの数に応じて、ワークフローを追加し続けます。このガイドでは、後に3種類のワークフローを追加します allcolor ここで、各ワークフローの後に同じユーティリティワークフローが続きます。 これは、セットアップがどのように見えるかです ワークフロー タブ。 ビルドのページに戻り、をクリックします ビルドの開始\/スケジュール 。 の中に ビルド構成 ポップアップウィンドウで、メインのワークフローを選択します ワークフロー 。これにより、チェーンワークフローが開始され、ホワイトラベルアプリのアプリバージョンがビルドされます。 簡単な例では、チェーンワークフローの出力を次に示します。 " }, 
{ "title" : "手順とワークフロー ", 
"url" : "手順とワークフロー.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー ", 
"snippet" : "ステップとワークフローは、Bitriseの仕組みの中心です。 Bitriseビルドは、ワークフローで定義された一連のステップであり、仮想マシン（または独自のマシン）でBitriseCLIによって実行されます。 ステップとワークフローは、Bitriseが機能する方法の中心です。 Bitriseビルドは、ワークフローで定義された一連のステップであり、仮想マシン（または独自のマシン）でBitriseCLIによって実行されます。 ステップには、ビルドタスクを実行するコードが含まれています。タスクを定義する入力とパラメーターを構成し、ステップが生成する出力を表示して再利用できます。 アプリのビルドが実行...", 
"body" : "ステップとワークフローは、Bitriseの仕組みの中心です。 Bitriseビルドは、ワークフローで定義された一連のステップであり、仮想マシン（または独自のマシン）でBitriseCLIによって実行されます。 ステップとワークフローは、Bitriseが機能する方法の中心です。 Bitriseビルドは、ワークフローで定義された一連のステップであり、仮想マシン（または独自のマシン）でBitriseCLIによって実行されます。 ステップには、ビルドタスクを実行するコードが含まれています。タスクを定義する入力とパラメーターを構成し、ステップが生成する出力を表示して再利用できます。 アプリのビルドが実行されている場合、ステップはワークフローで定義された順序で実行されます。 ワークフロー内でステップを簡単に移動したり、さまざまなワークフローをチェーンしたり、さまざまなブランチやコードイベントがさまざまなワークフローでビルドをトリガーするようにアプリを構成したりできます。 マシンタイプを構築する ステップ入力 アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "ステップ ", 
"url" : "手順とワークフロー/ステップ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ ", 
"snippet" : "ステップは、Bitriseでビルドタスクをカプセル化するスクリプト実行のブロックです。つまり、そのタスクを実行するコード、タスクに定義できる入力とパラメーター、およびタスクが生成する出力です。 ステップはBitriseの心臓部です。ステップはビルドタスクです。たとえば、 Gitクローン ステップは、ビルドの開始時にGitリポジトリのクローンを作成します。 GooglePlayデプロイ ステップは、完成したアプリをPlayストアにデプロイできます。 ステップには、ビルドタスクを実行するコードが含まれています。タスクを定義する入力とパラメーターを構成し、ステップが生成する出力を表示して再利用できま...", 
"body" : "ステップは、Bitriseでビルドタスクをカプセル化するスクリプト実行のブロックです。つまり、そのタスクを実行するコード、タスクに定義できる入力とパラメーター、およびタスクが生成する出力です。 ステップはBitriseの心臓部です。ステップはビルドタスクです。たとえば、 Gitクローン ステップは、ビルドの開始時にGitリポジトリのクローンを作成します。 GooglePlayデプロイ ステップは、完成したアプリをPlayストアにデプロイできます。 ステップには、ビルドタスクを実行するコードが含まれています。タスクを定義する入力とパラメーターを構成し、ステップが生成する出力を表示して再利用できます。出力を再利用するということは、別のステップがそれを入力の1つの値として使用できることを意味します。 ステップはYAML形式で定義され、bashまたはGoのいずれかで記述されています。 ステップのリストは次の場所にあります。 統合ページ . Bitrise StepLib . ワークフローエディター。 Bitrise ビルドの一部として、必要なカスタム スクリプトを作成して実行することもできます。 脚本 ステップ。必要なのは、スクリプト ランナー (デフォルトは bash) を指定し、スクリプトを追加して、ビルドを実行することだけです。これらのカスタム スクリプトの設定方法の詳細については、以下をご覧ください。 Bitrise スクリプト ステップ - 実行中 (Bash、Python、NodeJS、Ruby、Swift、Kotlin) . ビルドの目的で、ステップはワークフローエディターから直接管理できます。あなたはいつでもそれらを再配置し、それらのバージョンを設定し、ステップを追加または削除することができます。 マシンタイプを構築する 手順とワークフロー Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "ステップの種類 ", 
"url" : "手順とワークフロー/ステップ.html#ステップの種類", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップの種類 ", 
"snippet" : "Bitriseには300以上のステップがあります ステップライブラリ（StepLib） どのサードパーティ企業またはオープンソースチームが、サービス\/ツールに基づいてステップで強化できるか。 Bitriseには3つの異なるタイプのステップがあります。 GUIのラベルに基づいてそれぞれを識別できます。 公式のBitriseステップ ：これらのステップは、Bitriseによって作成および保守されます。これらのステップには、緑色のバッジと「B」のラベルが付いています。 確認済みの手順 ：これらのステップはコミュニティによって作成および保守されますが、Bitriseユーザーに対して安全で、保守され、一...", 
"body" : "Bitriseには300以上のステップがあります ステップライブラリ（StepLib） どのサードパーティ企業またはオープンソースチームが、サービス\/ツールに基づいてステップで強化できるか。 Bitriseには3つの異なるタイプのステップがあります。 GUIのラベルに基づいてそれぞれを識別できます。 公式のBitriseステップ ：これらのステップは、Bitriseによって作成および保守されます。これらのステップには、緑色のバッジと「B」のラベルが付いています。 確認済みの手順 ：これらのステップはコミュニティによって作成および保守されますが、Bitriseユーザーに対して安全で、保守され、一貫性があり、高品質のパフォーマンスを保証するサービス、ツール、またはオープンソースチームが所有しています。これらのステップには、青いバッジとチェックマークが付いています。確認済みの手順の詳細については、チェックアウトしてください 私たちのガイド 。 コミュニティのステップ ：これらのステップは、コミュニティの誰でも作成できます。これらのステップにはラベルがなく、バッジもありません。ステップを開発してBitriseコミュニティと共有する方法を学びたい場合は、チェックアウトしてください 新しいステップの開発。 " }, 
{ "title" : "ワークフローへのステップの追加 ", 
"url" : "手順とワークフロー/ステップ/ワークフローへのステップの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ワークフローへのステップの追加 ", 
"snippet" : "ステップは、ワークフローからいつでも追加または削除できます。ワークフローに任意のステップを追加できます-制限はまったくありません。たとえば、iOSアプリに固有のステップをAndroidアプリのワークフローに追加することができます。 ステップは、ワークフローからいつでも追加または削除できます。 Bitriseに新しいアプリを追加すると、プロジェクトスキャナーはいくつかのデフォルトのステップで少なくとも1つのワークフローを生成しますが、これらをまったく使用する必要はありません。どのステップを含めるかはあなた次第です。 ワークフローに任意のステップを追加できます-制限はまったくありません。これは、た...", 
"body" : "ステップは、ワークフローからいつでも追加または削除できます。ワークフローに任意のステップを追加できます-制限はまったくありません。たとえば、iOSアプリに固有のステップをAndroidアプリのワークフローに追加することができます。 ステップは、ワークフローからいつでも追加または削除できます。 Bitriseに新しいアプリを追加すると、プロジェクトスキャナーはいくつかのデフォルトのステップで少なくとも1つのワークフローを生成しますが、これらをまったく使用する必要はありません。どのステップを含めるかはあなた次第です。 ワークフローに任意のステップを追加できます-制限はまったくありません。これは、たとえばiOSアプリに固有のステップをAndroidアプリのワークフローに追加できることを意味することに注意してください。ワークフローには、関連するステップのみを追加するようにしてください。 " }, 
{ "title" : "ワークフローエディターでのステップの追加 ", 
"url" : "手順とワークフロー/ステップ/ワークフローへのステップの追加.html#ワークフローエディターでのステップの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ワークフローへのステップの追加 \/ ワークフローエディターでのステップの追加 ", 
"snippet" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 クリック + その位置にステップを挿入するには、2つのステップの間に記号を付けます。 必要なステップを検索します。 検索フィルター 検索フィールドの右側にあるフィルターに注意してください。デフォルトでは、フィルターはアプリのプラットフォームタイプに設定されています。たとえば、iOSアプリにステップを追加する場合、検索はiOSステップにフィルターされます。クリック 全て すべてのステップを検索します。 ステップをクリックして、ワークフローに追...", 
"body" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 クリック + その位置にステップを挿入するには、2つのステップの間に記号を付けます。 必要なステップを検索します。 検索フィルター 検索フィールドの右側にあるフィルターに注意してください。デフォルトでは、フィルターはアプリのプラットフォームタイプに設定されています。たとえば、iOSアプリにステップを追加する場合、検索はiOSステップにフィルターされます。クリック 全て すべてのステップを検索します。 ステップをクリックして、ワークフローに追加します。 " }, 
{ "title" : "代替ソースからのステップの追加 ", 
"url" : "手順とワークフロー/ステップ/ワークフローへのステップの追加.html#代替ソースからのステップの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ワークフローへのステップの追加 \/ 代替ソースからのステップの追加 ", 
"snippet" : "通常、公式のBitrise StepLibraryの一部であるStepsを使用することをお勧めします。ただし、必要に応じて、他のソースからステップを追加できます。GitURLまたはローカルパスのいずれかを使用できます。 Bitrise Webサイトでは、 git:: 特別なソースは、ビットライズステップライブラリにないステップを使用する最も簡単な方法です。方法を見てみましょう。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します bitrise.yml タブ。 使用するステップのgitURLを追加します。 この例では、gitソースからスクリプトス...", 
"body" : "通常、公式のBitrise StepLibraryの一部であるStepsを使用することをお勧めします。ただし、必要に応じて、他のソースからステップを追加できます。GitURLまたはローカルパスのいずれかを使用できます。 Bitrise Webサイトでは、 git:: 特別なソースは、ビットライズステップライブラリにないステップを使用する最も簡単な方法です。方法を見てみましょう。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します bitrise.yml タブ。 使用するステップのgitURLを追加します。 この例では、gitソースからスクリプトステップを追加しています。 - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: クリック 保存する 。 " }, 
{ "title" : "ワークフローからのステップの削除 ", 
"url" : "手順とワークフロー/ステップ/ワークフローへのステップの追加.html#ワークフローからのステップの削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ワークフローへのステップの追加 \/ ワークフローからのステップの削除 ", 
"snippet" : "ステップはいつでも削除できます。ただし、後日追加し直すと、ステップ入力がデフォルト値に設定されることに注意してください。カスタム構成はすべて失われます。 ステップの無効化 ステップを実行したくないが、ステップ構成をそのまま維持したい場合は、ステップを無効にすることができます。 ステップを条件付きで有効または無効にする。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 削除するステップをクリックします。 右側のゴミ箱アイコンをクリックします。 クリック 保存する 。...", 
"body" : "ステップはいつでも削除できます。ただし、後日追加し直すと、ステップ入力がデフォルト値に設定されることに注意してください。カスタム構成はすべて失われます。 ステップの無効化 ステップを実行したくないが、ステップ構成をそのまま維持したい場合は、ステップを無効にすることができます。 ステップを条件付きで有効または無効にする。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 削除するステップをクリックします。 右側のゴミ箱アイコンをクリックします。 クリック 保存する 。 " }, 
{ "title" : "ステップバージョン管理 ", 
"url" : "手順とワークフロー/ステップ/ステップバージョン管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップバージョン管理 ", 
"snippet" : "Bitrise Stepバージョンは、セマンティックバージョニングに従います。バージョン番号はMAJOR.MINOR.PATCHのようになります。たとえば、バージョン3.2.1は、3番目のメジャーバージョンの2番目のマイナーバージョンの最初のパッチです。 Bitrise ステップ バージョンはセマンティックバージョニングに従います。バージョン番号はMAJOR.MINOR.PATCHのようになります。たとえば、バージョン3.2.1は、3番目のメジャーバージョンの2番目のマイナーバージョンの最初のパッチです。 ワークフローで既存のバージョンのステップを使用したり、同じステップの異なるバージョンを異...", 
"body" : "Bitrise Stepバージョンは、セマンティックバージョニングに従います。バージョン番号はMAJOR.MINOR.PATCHのようになります。たとえば、バージョン3.2.1は、3番目のメジャーバージョンの2番目のマイナーバージョンの最初のパッチです。 Bitrise ステップ バージョンはセマンティックバージョニングに従います。バージョン番号はMAJOR.MINOR.PATCHのようになります。たとえば、バージョン3.2.1は、3番目のメジャーバージョンの2番目のマイナーバージョンの最初のパッチです。 ワークフローで既存のバージョンのステップを使用したり、同じステップの異なるバージョンを異なるワークフローで使用したりできます。 ステップは定期的に更新され、ユーザーのニーズに完全に対応できるようになっています。ただし、必要がない場合は最新バージョンを使用する必要はありません。古いバージョンが安定していてビルドと互換性がある場合は、引き続き使用するか、いつでもロールバックしてください。 " }, 
{ "title" : "ステップをメジャーバージョンまたはマイナーバージョンにロックする ", 
"url" : "手順とワークフロー/ステップ/ステップバージョン管理.html#ステップをメジャーバージョンまたはマイナーバージョンにロックする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップバージョン管理 \/ ステップをメジャーバージョンまたはマイナーバージョンにロックする ", 
"snippet" : "ワークフローエディターのグラフィカルUIで、任意のワークフローのメジャーバージョンまたはマイナーバージョンのいずれかにステップをロックするかどうかを選択できます。これにより、ワークフローが使用するステップのバージョンが決まります。 ステップをバージョンにロックすると、ワークフローは、ステップで選択されたバージョンタイプの最新リリース（メジャーまたはマイナー）を使用するように自動的に更新されますが、別のメジャーまたはマイナーバージョンがリリースされても更新されません。 ステップがメジャーバージョンにロックされている場合、新しいマイナーバージョンまたはそのメジャーバージョンの新しいパッチがリリース...", 
"body" : "ワークフローエディターのグラフィカルUIで、任意のワークフローのメジャーバージョンまたはマイナーバージョンのいずれかにステップをロックするかどうかを選択できます。これにより、ワークフローが使用するステップのバージョンが決まります。 ステップをバージョンにロックすると、ワークフローは、ステップで選択されたバージョンタイプの最新リリース（メジャーまたはマイナー）を使用するように自動的に更新されますが、別のメジャーまたはマイナーバージョンがリリースされても更新されません。 ステップがメジャーバージョンにロックされている場合、新しいマイナーバージョンまたはそのメジャーバージョンの新しいパッチがリリースされると、ステップは自動的に更新されます。新しいメジャーバージョンがリリースされた場合、それは更新されません。 ステップがマイナーバージョンにロックされている場合、そのマイナーバージョンの新しいパッチがリリースされた場合にのみ自動的に更新されます。新しいマイナーバージョンまたはメジャーバージョンがリリースされた場合、それは更新されません。 バージョンロック ワークフローでのサンプルステップの現在のバージョンは2.3.3です。新しいマイナーバージョンが出てきます：2.4.0。 ステップがメジャーバージョン2.xxにロックされている場合、ステップは2.4.0に更新されます。 ステップがマイナーバージョン2.3.xにロックされている場合、ステップは2.4.0に更新されません。 ここで、サンプルステップが新しいメジャーバージョン3.0.0を取得するとします。 その場合、ステップはどちらの方法でも自動的に更新されません。新しいバージョンを使用する場合は、ステップをメジャーバージョン3.xxまたはマイナーバージョン3.0.xのいずれかにロックする必要があります。このようにして、新しい更新によってビルドが破損しないことを確認できます。 ステップをメジャーバージョンまたはマイナーバージョンにロックするには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 ステップを選択します。 現在のバージョンの名前の横にあるドロップダウンメニューを開きます。 必要なメジャーバージョンまたはマイナーバージョンを選択します。たとえば、3.xxはそれを3番目のメジャーバージョンに設定します。 " }, 
{ "title" : "特定のステップバージョンを使用する ", 
"url" : "手順とワークフロー/ステップ/ステップバージョン管理.html#特定のステップバージョンを使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップバージョン管理 \/ 特定のステップバージョンを使用する ", 
"snippet" : "特定の静的ステップバージョンを使用するオプションがあります。たとえば、バージョン3.2.2。これは、ステップに対してどのような新しいバージョンがリリースされても、ワークフローでステップバージョンが更新されないことを意味します。 YAMLモードのみ！ グラフィカルUIで特定のステップバージョンを設定することはできないことに注意してください。ステップをロックできるのは、メジャーバージョンまたはマイナーバージョンのいずれかのみです。特定のステップバージョンの設定は、YAMLモードでのみ可能です。 特定のステップバージョンを設定するには、そのバージョンをアプリのステップ参照に追加する必要があります b...", 
"body" : "特定の静的ステップバージョンを使用するオプションがあります。たとえば、バージョン3.2.2。これは、ステップに対してどのような新しいバージョンがリリースされても、ワークフローでステップバージョンが更新されないことを意味します。 YAMLモードのみ！ グラフィカルUIで特定のステップバージョンを設定することはできないことに注意してください。ステップをロックできるのは、メジャーバージョンまたはマイナーバージョンのいずれかのみです。特定のステップバージョンの設定は、YAMLモードでのみ可能です。 特定のステップバージョンを設定するには、そのバージョンをアプリのステップ参照に追加する必要があります bitrise.yml ファイル： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します bitrise.yml タブ。 必要なワークフローとステップを見つけます。 ステップ参照の一部としてステップバージョンを設定します。 この例では、 SSHキーをアクティブ化する のステップ 主要な バージョン4.0.3へのワークフロー： workflows:\n primary:\n steps:\n - activate-ssh-key@4.0.3: " }, 
{ "title" : "ステップの利用可能な最新バージョンを使用する ", 
"url" : "手順とワークフロー/ステップ/ステップバージョン管理.html#ステップの利用可能な最新バージョンを使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップバージョン管理 \/ ステップの利用可能な最新バージョンを使用する ", 
"snippet" : "ステップの最新リリースにロックオンするということは、ステップの新しいバージョンがリリースされた場合、それを使用するようにユーザーのワークフローが更新されることを意味します。これには、新しいメジャーバージョンへの自動更新が含まれ、ビルドが破損する可能性があります。ので注意してください！ ワークフローが常に特定のステップの利用可能な最新バージョンを使用するようにするには、ステップ参照からバージョン情報を削除するだけです。 bitrise.yml アプリのファイル： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します bitrise.yml タブ。 必...", 
"body" : "ステップの最新リリースにロックオンするということは、ステップの新しいバージョンがリリースされた場合、それを使用するようにユーザーのワークフローが更新されることを意味します。これには、新しいメジャーバージョンへの自動更新が含まれ、ビルドが破損する可能性があります。ので注意してください！ ワークフローが常に特定のステップの利用可能な最新バージョンを使用するようにするには、ステップ参照からバージョン情報を削除するだけです。 bitrise.yml アプリのファイル： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します bitrise.yml タブ。 必要なワークフローとステップを見つけます。 ステップにバージョン情報がないことを確認してください。 この例では、 SSHキーをアクティブ化する のステップ 主要な 最新バージョンへのワークフロー： workflows:\n primary:\n steps:\n - activate-ssh-key: " }, 
{ "title" : "ステップ入力 ", 
"url" : "手順とワークフロー/ステップ/ステップ入力.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップ入力 ", 
"snippet" : "ステップ入力は、ビルドのステップを構成する方法です。ステップには、有効な値が必要な入力と、ビルドをカスタマイズするためのより多くのオプションを提供するオプションの入力が必要です。 ステップ入力は、ビルドのステップを構成する方法です。ステップには、有効な値が必要な入力と、ビルドをカスタマイズするためのより多くのオプションを提供するオプションの入力が必要です。 ステップをクリックして、現在選択されているものの右側に入力変数を表示します ワークフロー 。必要な入力は、ワークフローエディターでそのようにマークされます。必要な入力に有効な値がない場合、ステップは失敗します。 次のいずれかの方法でステップ...", 
"body" : "ステップ入力は、ビルドのステップを構成する方法です。ステップには、有効な値が必要な入力と、ビルドをカスタマイズするためのより多くのオプションを提供するオプションの入力が必要です。 ステップ入力は、ビルドのステップを構成する方法です。ステップには、有効な値が必要な入力と、ビルドをカスタマイズするためのより多くのオプションを提供するオプションの入力が必要です。 ステップをクリックして、現在選択されているものの右側に入力変数を表示します ワークフロー 。必要な入力は、ワークフローエディターでそのようにマークされます。必要な入力に有効な値がない場合、ステップは失敗します。 次のいずれかの方法でステップ入力を変更します。 入力フィールドをクリックします。 クリックすると 変化する 入力フィールドの横にあるオプション。 使用することもできます ステップ入力としての環境変数（環境変数）。 マシンタイプを構築する 手順とワークフロー ステップ Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "手順をスキップする ", 
"url" : "手順とワークフロー/ステップ/手順をスキップする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ 手順をスキップする ", 
"snippet" : "Bitriseビルドのステップを構成して、ワークフローの前のステップが失敗した場合にステップが実行されないようにすることができます。これは、ビルド時間とクレジットの浪費を回避するのに役立ちます。 Bitriseビルドの特定のステップをスキップできます。たとえば、前のステップでアプリのビルドに失敗した場合は、単体テストステップを実行しても意味がありません。 もちろん、前のステップが失敗した場合でも、ステップを実行する方がよい場合の例があります。たとえば、 キャッシュ：プル ステップは失敗します。次のステップを実行しない理由はありません。実際、次のステップが依存関係をインストールするステップである...", 
"body" : "Bitriseビルドのステップを構成して、ワークフローの前のステップが失敗した場合にステップが実行されないようにすることができます。これは、ビルド時間とクレジットの浪費を回避するのに役立ちます。 Bitriseビルドの特定のステップをスキップできます。たとえば、前のステップでアプリのビルドに失敗した場合は、単体テストステップを実行しても意味がありません。 もちろん、前のステップが失敗した場合でも、ステップを実行する方がよい場合の例があります。たとえば、 キャッシュ：プル ステップは失敗します。次のステップを実行しない理由はありません。実際、次のステップが依存関係をインストールするステップである場合、キャッシュのプルに失敗した場合にそのステップをスキップすることは非常に悪い考えです。 条件付きでステップを有効にする 特定の条件でのみ実行するようにステップを構成することもできます。 ステップを条件付きで有効または無効にする。 前のステップが失敗した場合にスキップされるように特定のステップを設定するには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 スキップするステップを選択します。 右側で、トグルを使用して無効にします 前のステップが失敗した場合に実行 オプション。 " }, 
{ "title" : "ステップを条件付きで有効または無効にする ", 
"url" : "手順とワークフロー/ステップ/ステップを条件付きで有効または無効にする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップを条件付きで有効または無効にする ", 
"snippet" : "任意のワークフローでステップを有効または無効にできます。また、ステップの条件を設定することもできます。これは、自分のコンピューターで、Bitrise CLIを使用するか、または bitrise.yml ワークフローエディタのタブ。 任意のワークフローでステップを有効または無効にできます。また、ステップの条件を設定することもできます。自分のコンピューターで、Bitrise CLIを使用するか、または bitrise.yml ワークフローエディタのタブ。 私たちは主に使用します run_if これらのことを行うための表現。 テンプレート式を確認してください ！ GitHub で例を表示することもで...", 
"body" : "任意のワークフローでステップを有効または無効にできます。また、ステップの条件を設定することもできます。これは、自分のコンピューターで、Bitrise CLIを使用するか、または bitrise.yml ワークフローエディタのタブ。 任意のワークフローでステップを有効または無効にできます。また、ステップの条件を設定することもできます。自分のコンピューターで、Bitrise CLIを使用するか、または bitrise.yml ワークフローエディタのタブ。 私たちは主に使用します run_if これらのことを行うための表現。 テンプレート式を確認してください ！ GitHub で例を表示することもできます。 テンプレート式の例 . NS run_if 任意の有効なGoテンプレートにすることができます NS run_if 任意の有効なものにすることができます テンプレートに移動 、評価する限り true また false （または、たとえば、任意の文字列表現 True 、 t 、 yes また y すべてが true ）。テンプレートが次のように評価された場合 true 、ステップは実行されます。それ以外の場合は実行されません。 例 run_if カスタム環境変数を確認するには： run_if: |-\n \t{{enveq \"CUSTOM_ENV_VAR_KEY\" \"test value to test against\"}}\n この run_if の値が CUSTOM_ENV_VAR_KEY ではありません test value to test against 。 " }, 
{ "title" : "ステップの無効化 ", 
"url" : "手順とワークフロー/ステップ/ステップを条件付きで有効または無効にする.html#ステップの無効化", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップを条件付きで有効または無効にする \/ ステップの無効化 ", 
"snippet" : "ワークフローからステップを削除したくないが実行したくない場合は、を使用してステップを無効にすることができます。 run_if 表現。 ワークフローの実験 ステップを削除したり無効にしたりせずに、ワークフローのさまざまな構成を試すには、ワークフローのクローンを作成することをお勧めします。元のワークフローを変更せずに、複製されたワークフローを必要なだけ変更できます。 アプリを開きます bitrise.yml ファイル。 無効にするステップを見つけます。 追加 run_if: false それに。 - script: run_if: false inputs: - content: |- #!\/bi...", 
"body" : "ワークフローからステップを削除したくないが実行したくない場合は、を使用してステップを無効にすることができます。 run_if 表現。 ワークフローの実験 ステップを削除したり無効にしたりせずに、ワークフローのさまざまな構成を試すには、ワークフローのクローンを作成することをお勧めします。元のワークフローを変更せずに、複製されたワークフローを必要なだけ変更できます。 アプリを開きます bitrise.yml ファイル。 無効にするステップを見つけます。 追加 run_if: false それに。 - script:\n run_if: false\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"This will never run, because of run_if:false\" " }, 
{ "title" : "CI環境でのみステップを実行する ", 
"url" : "手順とワークフロー/ステップ/ステップを条件付きで有効または無効にする.html#ci環境でのみステップを実行する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップを条件付きで有効または無効にする \/ CI環境でのみステップを実行する ", 
"snippet" : "CI環境でのみステップを実行すると、ビルドはローカルビルドの特定のステップをスキップします。ステップを無効にするのと同じように、 run_if 表現。これを使用して、ビルドをローカルでデバッグします。 NS .IsCI 国旗 多くのステップにこれがあります。 IsCI デフォルトで設定されているフラグ：たとえば、 Git Clone ステップ。ただし、変更することはできます run_if これらのステップのプロパティも：に設定するだけです run_if: true 。 CIモードをローカルで有効にする CIモードは、を設定することにより、ご使用のMac \/ PCで有効にできます。 CI 環境へ...", 
"body" : "CI環境でのみステップを実行すると、ビルドはローカルビルドの特定のステップをスキップします。ステップを無効にするのと同じように、 run_if 表現。これを使用して、ビルドをローカルでデバッグします。 NS .IsCI 国旗 多くのステップにこれがあります。 IsCI デフォルトで設定されているフラグ：たとえば、 Git Clone ステップ。ただし、変更することはできます run_if これらのステップのプロパティも：に設定するだけです run_if: true 。 CIモードをローカルで有効にする CIモードは、を設定することにより、ご使用のMac \/ PCで有効にできます。 CI 環境へ true （たとえば、実行 export CI=true Bashターミナルで）、または実行することによって bitrise run とともに --ci 国旗： bitrise --ci run ... 。 アプリを開きます bitrise.yml ファイル。 無効にするステップを見つけます。 追加 run_if: .IsCI それに。 - script:\n run_if: .IsCI\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"This will only ever run in a CI environment because run_if: IsCI\" " }, 
{ "title" : "ビルドが失敗した場合にのみステップを実行する ", 
"url" : "手順とワークフロー/ステップ/ステップを条件付きで有効または無効にする.html#ビルドが失敗した場合にのみステップを実行する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップを条件付きで有効または無効にする \/ ビルドが失敗した場合にのみステップを実行する ", 
"snippet" : "特定のステップに到達する前にビルドが失敗した場合にのみ、ステップを実行できます。に加えて run_if 、を使用する必要があります is_always_run プロパティも。 アプリを開きます bitrise.yml ファイル。 無効にするステップを見つけます。 追加 run_if: .IsBuildFailed それに。 追加 is_always_run: true それに。 これにより、前のステップが失敗した場合でも、ステップを実行できます。 - script: is_always_run: true run_if: .IsBuildFailed inputs: - content: |-...", 
"body" : "特定のステップに到達する前にビルドが失敗した場合にのみ、ステップを実行できます。に加えて run_if 、を使用する必要があります is_always_run プロパティも。 アプリを開きます bitrise.yml ファイル。 無効にするステップを見つけます。 追加 run_if: .IsBuildFailed それに。 追加 is_always_run: true それに。 これにより、前のステップが失敗した場合でも、ステップを実行できます。 - script:\n is_always_run: true\n run_if: .IsBuildFailed\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"Build Failed!\" " }, 
{ "title" : "ビルドに失敗せずに失敗したステップを無視する ", 
"url" : "手順とワークフロー/ステップ/ステップを条件付きで有効または無効にする.html#ビルドに失敗せずに失敗したステップを無視する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップを条件付きで有効または無効にする \/ ビルドに失敗せずに失敗したステップを無視する ", 
"snippet" : "通常、ビルド中にステップが失敗すると、ビルド自体も失敗します。もちろん、これはすべてのステップに当てはまるわけではありません。 Bitrise.ioキャッシュ：プル そしてその Bitrise.ioキャッシュ：プッシュ ビルドに失敗せずに手順が失敗する可能性があります。他のステップを構成して、それらの失敗がビルドに失敗しないようにすることもできます。 YAMLモードのみ ワークフローエディターのグラフィカルUIではこれを行うことはできません。アプリを編集する必要があります。 bitrise.yml ファイル。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。...", 
"body" : "通常、ビルド中にステップが失敗すると、ビルド自体も失敗します。もちろん、これはすべてのステップに当てはまるわけではありません。 Bitrise.ioキャッシュ：プル そしてその Bitrise.ioキャッシュ：プッシュ ビルドに失敗せずに手順が失敗する可能性があります。他のステップを構成して、それらの失敗がビルドに失敗しないようにすることもできます。 YAMLモードのみ ワークフローエディターのグラフィカルUIではこれを行うことはできません。アプリを編集する必要があります。 bitrise.yml ファイル。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します bitrise.yml タブ。 必要なステップを見つけます。 追加します is_skippable それにフラグを立てて、に設定します true ： - script: \n is_skippable: true \n inputs: \n - content: |- \n # !\/bin\/bash \n echo \"Failing Step.\" \n exit 1 \n # exit 1 would mark this step as Failed, but it won't break the Build \n # because of the is_skippable: true flag \/ property " }, 
{ "title" : "スクリプトステップで run_if 条件を設定する ", 
"url" : "手順とワークフロー/ステップ/ステップを条件付きで有効または無効にする.html#スクリプトステップで-run_if-条件を設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップを条件付きで有効または無効にする \/ スクリプトステップで run_if 条件を設定する ", 
"snippet" : "ステップを実行するかどうかを決定するために必要な条件は、複雑で多層的な場合があります。もしそうなら、複雑な Go テンプレートのチェーンを run_if Go ではなく他の言語を好む場合は特に、表現に圧倒される可能性があります。 このような場合、回避策を使用することをお勧めします。 脚本 ワークフローにステップ インし、特定の値に評価されるスクリプトを記述します。その値を環境変数に保存すると、条件式を含むステップでその値を確認するだけで済みます。 run_if 式に Go 以外のスクリプトを使用する この例では、単純な Bash スクリプトを作成してその値を保存し、事前設定された値と一致するか...", 
"body" : "ステップを実行するかどうかを決定するために必要な条件は、複雑で多層的な場合があります。もしそうなら、複雑な Go テンプレートのチェーンを run_if Go ではなく他の言語を好む場合は特に、表現に圧倒される可能性があります。 このような場合、回避策を使用することをお勧めします。 脚本 ワークフローにステップ インし、特定の値に評価されるスクリプトを記述します。その値を環境変数に保存すると、条件式を含むステップでその値を確認するだけで済みます。 run_if 式に Go 以外のスクリプトを使用する この例では、単純な Bash スクリプトを作成してその値を保存し、事前設定された値と一致するかどうかを確認します。 まず、スクリプト ステップを追加し、スクリプト コンテンツで値を定義します。値が定義されたら、使用します 環境人 環境変数に保存します。この特定のケースでは、Bash で変数を定義し、その変数を Env Var の値として使用します。 workflows: \n example: \n steps: \n - script@1:\n title: Do anything with Script step \n inputs: \n - content: |- \n #!\/usr\/bin\/env bash\n # fail if any commands fails \n set -e\n # debug log\n set -x\n # creating the variable and storing it as an Env Var \n my_variable='This is the value we need!' \n envman add --key OUR_CONDITION --value \"$my_variable\"\n 次に、単純な run_if 条件が必要な Step の式。この場合、私たちのステップは キャッシュを保存 ステップ、そしての値かどうかを確認します OUR_CONDITION variable は、前の Bash 変数に格納されている値と一致します。 - save-cache@1: \n run_if: |- \n {{getenv \"OUR_CONDITION\" | eq \"This is the value we need!\"}} 値が一致するので、 キャッシュを保存 ステップが実行されます。 " }, 
{ "title" : "run_if 式の例 ", 
"url" : "手順とワークフロー/ステップ/ステップを条件付きで有効または無効にする.html#run_if-式の例", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップを条件付きで有効または無効にする \/ run_if 式の例 ", 
"snippet" : "を使用するさまざまな方法があります。 run_if 表現。次のワークフローには、それらのほとんどの例と、コメント付きの説明が含まれています。式は 脚本 正常に実行されたときに、使用された式が真であったことを出力するステップ。 すべての式は有効な Go テンプレートです。 Go テンプレートについて学習するには、次のドキュメントをご覧ください。 テンプレート ドキュメントに移動 . workflows: primary: steps: # # Check if an Environment Variable's value is equal to a given string - script:...", 
"body" : "を使用するさまざまな方法があります。 run_if 表現。次のワークフローには、それらのほとんどの例と、コメント付きの説明が含まれています。式は 脚本 正常に実行されたときに、使用された式が真であったことを出力するステップ。 すべての式は有効な Go テンプレートです。 Go テンプレートについて学習するには、次のドキュメントをご覧ください。 テンプレート ドキュメントに移動 . workflows:\n primary:\n steps:\n #\n # Check if an Environment Variable's value is equal to a given string\n - script:\n title: Run-If expression\n run_if: |-\n {{getenv \"TEST_KEY\" | eq \"test value\"}}\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Use the enveq function to check if an Env Var's value is equal to a given string\n - script:\n title: Run-If expression\n run_if: '{{enveq \"TEST_KEY\" \"test value\"}}'\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Check if a given Env Var is NOT empty\n - script:\n title: Run-If expression\n run_if: '{{getenv \"TEST_KEY\" | ne \"\"}}'\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Check if two Env Vars have the same value\n - script:\n title: Run-If expression\n run_if: '{{getenv \"TEST_KEY_1\" | eq (getenv \"TEST_KEY_2\")}}'\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Use the available expression data properties\n # like IsCI (checks if the build runs in a CI environment) or IsBuildFailed (checks if the build has failed) directly\n - script:\n title: Run-If expression\n run_if: |-\n {{.IsCI}}\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # You don't have to wrap the expression in {{...}} if it's a simple\n # oneliner\n - script:\n title: Run-If expression\n run_if: $.IsCI\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # You can even remove the $ sign, it's optional in a simple\n # expression like this\n - script:\n title: Run-If expression\n run_if: .IsCI\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # If-Else condition, in this example the Step will run if the build runs in a CI environment\n - script:\n title: Run-If expression\n run_if: |-\n {{if .IsCI}}\n true\n {{else}}\n false\n {{end}}\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # You can use multiple conditions\n - script:\n title: CI and Not Failed\n run_if: |-\n {{.IsCI | and (not .IsBuildFailed)}}\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Check if the build is a pull request or not\n - script:\n title: Only if NOT a pull request\n run_if: not .IsPR\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n - script:\n title: Only if it was a Pull Request\n run_if: .IsPR\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"Pull Request ID: ${PULL_REQUEST_ID}\" " }, 
{ "title" : "ステップの制限時間を設定する ", 
"url" : "手順とワークフロー/ステップ/ステップの制限時間を設定する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ ステップの制限時間を設定する ", 
"snippet" : "秒単位で定義されるステップタイムアウトは、ステップの実行を許可される最大時間を設定します。ステップがその制限を超えると、ワークフローは次のステップに進みます。 設定して、ビルドが制限時間を超えないようにします ステップ ビルドがハングする原因となる可能性のあるステップのタイムアウト。 秒単位で定義されるステップタイムアウトは、ステップの実行を許可される最大時間を設定します。ステップがその制限を超えると、ワークフローは次のステップに進みます。これは、たとえば、ビルドがすぐには明らかでない理由でハングする場合に役立ちます。問題の原因であると疑われる1つまたは複数のステップのタイムアウトを設定できま...", 
"body" : "秒単位で定義されるステップタイムアウトは、ステップの実行を許可される最大時間を設定します。ステップがその制限を超えると、ワークフローは次のステップに進みます。 設定して、ビルドが制限時間を超えないようにします ステップ ビルドがハングする原因となる可能性のあるステップのタイムアウト。 秒単位で定義されるステップタイムアウトは、ステップの実行を許可される最大時間を設定します。ステップがその制限を超えると、ワークフローは次のステップに進みます。これは、たとえば、ビルドがすぐには明らかでない理由でハングする場合に役立ちます。問題の原因であると疑われる1つまたは複数のステップのタイムアウトを設定できます。 でステップを見つける bitrise.yml ファイル。 ファイルはローカルで編集することも、 bitrise.yml ワークフローエディタのタブ。 追加する timeout 他のステップ入力の前にプロパティを入力し、その値を秒単位で指定します。 - xcode-test@1.18.14:\n timeout: 120\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\" " }, 
{ "title" : "出力なしでぶら下がっているステップの検出と中止 ", 
"url" : "手順とワークフロー/ステップ/出力なしでぶら下がっているステップの検出と中止.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ 出力なしでぶら下がっているステップの検出と中止 ", 
"snippet" : "を使用して、一定時間ログ出力を生成しない停止中のステップを検出して中止できます。 出力タイムアウトなし 関数。この機能を使用して、構成可能なタイムアウト期間後にハングしたビルドを自動的に中止してクレジットを節約し、Bitrise がハングしたビルドに関するデータを収集できるようにすることができます。 を使用できます。 出力タイムアウトなし 次の 2 つの方法で機能します。 すべてのステップに対してグローバルに有効にする . 特定のステップのみ有効にする . の 出力タイムアウトなし 関数は、で説明されているような他のタイムアウト機能と一緒に使用できます M1 ハンギング ビルドの問題ガイド ま...", 
"body" : "を使用して、一定時間ログ出力を生成しない停止中のステップを検出して中止できます。 出力タイムアウトなし 関数。この機能を使用して、構成可能なタイムアウト期間後にハングしたビルドを自動的に中止してクレジットを節約し、Bitrise がハングしたビルドに関するデータを収集できるようにすることができます。 を使用できます。 出力タイムアウトなし 次の 2 つの方法で機能します。 すべてのステップに対してグローバルに有効にする . 特定のステップのみ有効にする . の 出力タイムアウトなし 関数は、で説明されているような他のタイムアウト機能と一緒に使用できます M1 ハンギング ビルドの問題ガイド またはで ステップの時間制限を設定する . " }, 
{ "title" : "すべてのステップに対してグローバルに No Output Timeout 機能を有効にする ", 
"url" : "手順とワークフロー/ステップ/出力なしでぶら下がっているステップの検出と中止.html#すべてのステップに対してグローバルに-no-output-timeout-機能を有効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ 出力なしでぶら下がっているステップの検出と中止 \/ すべてのステップに対してグローバルに No Output Timeout 機能を有効にする ", 
"snippet" : "Bitrise 1.50.0 以降が必要です を使用するには、Bitrise 1.50.0 以降のバージョンを使用する必要があります。 出力タイムアウトなし 関数。 有効にするには 出力タイムアウトなし すべてのステップでグローバルに: でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く シークレット タブ。 新しい秘密の環境変数を追加します。 BITRISE_NO_OUTPUT_TIMEOUT その値を、ビルドが中止する前に出力ログを待機する秒数に設定します。 600 秒 (10 分) に設定することをお勧めします。 ぶら下がっているビルドを自動的に...", 
"body" : "Bitrise 1.50.0 以降が必要です を使用するには、Bitrise 1.50.0 以降のバージョンを使用する必要があります。 出力タイムアウトなし 関数。 有効にするには 出力タイムアウトなし すべてのステップでグローバルに: でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く シークレット タブ。 新しい秘密の環境変数を追加します。 BITRISE_NO_OUTPUT_TIMEOUT その値を、ビルドが中止する前に出力ログを待機する秒数に設定します。 600 秒 (10 分) に設定することをお勧めします。 ぶら下がっているビルドを自動的に中止する に比べ ステップの制限時間の設定 、 出力タイムアウトなし 関数はビルドのみを中止し、出力ログは一定時間生成されません。 ログ出力によってタイムアウトがリセットされます。これにより、ステップが設定した値よりも長く実行される可能性があります BITRISE_NO_OUTPUT_TIMEOUT . クリック 保存 .ビルドのビルド ログをチェックして、関数が有効になっているかどうかを確認できます。 以上です！これ以降、設定した秒数の間、ステップが出力ログを生成しないときはいつでも BITRISE_NO_OUTPUT_TIMEOUT の場合、ビルドは次のメッセージで自動的に中止されます。 Abort via Bitrise DEN (no output timeout) . 特定のステップの No Output Timeout 機能を無効にする 有効にした場合 出力タイムアウトなし グローバルに機能し、特定のステップに対して無効にしたい場合は、追加できます no_output_timeout: 0 のすぐ上の Step プロパティ inputs: 選択したステップの一部 bitrise.yml . 例えば： steps: \n - virtual-device-testing-for-ios@1:\n no_output_timeout: 0\n inputs:\n - zip_path: \"$BITRISE_PROJECT_PATH\" " }, 
{ "title" : "特定のステップの No Output Timeout 機能を有効にする ", 
"url" : "手順とワークフロー/ステップ/出力なしでぶら下がっているステップの検出と中止.html#特定のステップの-no-output-timeout-機能を有効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ステップ \/ 出力なしでぶら下がっているステップの検出と中止 \/ 特定のステップの No Output Timeout 機能を有効にする ", 
"snippet" : "Bitrise 1.50.0 以降が必要です を使用するには、Bitrise 1.50.0 以降のバージョンを使用する必要があります。 出力タイムアウトなし 関数。 を有効にできます。 出力タイムアウトなし を追加することにより、特定のステップの機能 no_output_timeout Step の下の Step プロパティ bitrise.yml ファイル。 ワークフロー エディターでこれを行うには: でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く bitrise.yml タブ。 関数を使用するステップを検索します。 入れる no_output_...", 
"body" : "Bitrise 1.50.0 以降が必要です を使用するには、Bitrise 1.50.0 以降のバージョンを使用する必要があります。 出力タイムアウトなし 関数。 を有効にできます。 出力タイムアウトなし を追加することにより、特定のステップの機能 no_output_timeout Step の下の Step プロパティ bitrise.yml ファイル。 ワークフロー エディターでこれを行うには: でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く bitrise.yml タブ。 関数を使用するステップを検索します。 入れる no_output_timeout: 12 のすぐ上のステップ プロパティと値 inputs: ステップが 12 秒間出力ログを生成しない場合、ビルドを自動的に中止するために、選択したステップの一部。 の設定 no_output_timeout プロパティを 0 にステップします 無効にすることができます 出力タイムアウトなし を設定することにより、ステップの機能 no_output_timeout プロパティを 0 にステップします。 スクリプト ステップが常に自動的に中止される例を見てみましょう。 output_slows_down:\n steps:\n - script@1:\n title: Output is slower and slower\n no_output_timeout: 12\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n for i in {1..5}\n do\n DURATION=$((5*i))\n echo \"🏃‍step output (sleeping ${DURATION}s)\"\n sleep $DURATION\n done 以上です！ここで、ステップがハングし、 no_output_timeout Step プロパティ、ビルドは自動的に中止されます。 " }, 
{ "title" : "独自のビットライズステップの開発 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 ", 
"snippet" : "独自のBitriseステップと独自のプロジェクトスキャナーを開発し、それらをBitriseに送信して、他のユーザーも使用できるようにすることができます。 Bitriseへの貢献は簡単です。オープンソース統合を開発し、提出すれば完了です。このセクションでは、技術的な貢献に焦点を当てます：新しいものを作成する ステップ 独自の作成 プロジェクトスキャナー 。...", 
"body" : "独自のBitriseステップと独自のプロジェクトスキャナーを開発し、それらをBitriseに送信して、他のユーザーも使用できるようにすることができます。 Bitriseへの貢献は簡単です。オープンソース統合を開発し、提出すれば完了です。このセクションでは、技術的な貢献に焦点を当てます：新しいものを作成する ステップ 独自の作成 プロジェクトスキャナー 。 " }, 
{ "title" : "独自のステップを作成する ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発.html#独自のステップを作成する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 独自のステップを作成する ", 
"snippet" : "Bitriseは、200をはるかに超えるステップをユーザーに提供します。私たちはそれらの多くを自分たちで維持していますが、ユーザーのコミュニティは私たちのステップライブラリ（StepLib）に貢献するという素晴らしい仕事をしています。誰でもステップを送信できます-承認された場合、それは公式のBitrise StepLibの一部になり、すべてのBitriseユーザーが利用できるようになります！独自のステップを作成して世界と共有する方法を確認してください。 独自のステップを作成する 。...", 
"body" : "Bitriseは、200をはるかに超えるステップをユーザーに提供します。私たちはそれらの多くを自分たちで維持していますが、ユーザーのコミュニティは私たちのステップライブラリ（StepLib）に貢献するという素晴らしい仕事をしています。誰でもステップを送信できます-承認された場合、それは公式のBitrise StepLibの一部になり、すべてのBitriseユーザーが利用できるようになります！独自のステップを作成して世界と共有する方法を確認してください。 独自のステップを作成する 。 " }, 
{ "title" : "独自のスキャナーを作成する ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発.html#独自のスキャナーを作成する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 独自のスキャナーを作成する ", 
"snippet" : "Bitriseに新しいアプリを追加するたびに、プロジェクトスキャナーがプロジェクトタイプを自動的に検出します。このコンテキストでは、タイプとは、アプリの作成に使用されるプラットフォームまたはフレームワークを意味します。たとえば、Android、iOS、React Native、Flutterなどです。結果に基づいて、検出されたタイプで最も頻繁に使用されるステップを含む少なくとも1つのデフォルトワークフローを使用して、構成を自動的に作成します。 いくつかの理由で、スキャナーがアプリを検出しない場合があります。リポジトリに何かが不足しているか（Ionicアプリの場合はconfig.xmlファイルな...", 
"body" : "Bitriseに新しいアプリを追加するたびに、プロジェクトスキャナーがプロジェクトタイプを自動的に検出します。このコンテキストでは、タイプとは、アプリの作成に使用されるプラットフォームまたはフレームワークを意味します。たとえば、Android、iOS、React Native、Flutterなどです。結果に基づいて、検出されたタイプで最も頻繁に使用されるステップを含む少なくとも1つのデフォルトワークフローを使用して、構成を自動的に作成します。 いくつかの理由で、スキャナーがアプリを検出しない場合があります。リポジトリに何かが不足しているか（Ionicアプリの場合はconfig.xmlファイルなど）、スキャナーがないだけです。まだあなたのタイプのために。後者の場合は、 アプリを手動で構成する 、または独自のプロジェクト構成で独自のスキャナーを作成できます。 独自のBitriseプロジェクトスキャナーを作成します。 " }, 
{ "title" : "新しいステップの開発 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 ", 
"snippet" : "Bitrise Stepを開発し、それをStepライブラリに統合するには、コードを記述し、説明を作成して、レビューのためにすべてを送信する必要があります。 重複する手順 新しいステップの開発を決定する前に、同じ機能を実行する既存のステップがないことを確認してください。 あなたは私たちのステップを検索することができます 統合 ページまたは ステップライブラリ GitHubで。 ステップはビルドタスクです。たとえば、 Gitクローン ステップは、ビルドの開始時にGitリポジトリのクローンを作成します。 GooglePlayデプロイ ステップは、完成したアプリをPlayストアにデプロイできます。 ス...", 
"body" : "Bitrise Stepを開発し、それをStepライブラリに統合するには、コードを記述し、説明を作成して、レビューのためにすべてを送信する必要があります。 重複する手順 新しいステップの開発を決定する前に、同じ機能を実行する既存のステップがないことを確認してください。 あなたは私たちのステップを検索することができます 統合 ページまたは ステップライブラリ GitHubで。 ステップはビルドタスクです。たとえば、 Gitクローン ステップは、ビルドの開始時にGitリポジトリのクローンを作成します。 GooglePlayデプロイ ステップは、完成したアプリをPlayストアにデプロイできます。 ステップには、ビルドタスクを実行するコードが含まれています。タスクを定義する入力とパラメーターを構成し、ステップが生成する出力を表示して再利用できます。出力を再利用するということは、別のステップがそれを入力の1つの値として使用できることを意味します。 私たちのステップはで書かれています 行け またはBash。ステップは独自のGitリポジトリに含まれています：コードと step.yml ステップの構成を定義するファイル。ステップを他のユーザーが利用できるようにしたい場合は、 step.yml ファイルはに含まれている必要があります bitrise-steplib 他のユーザーがワークフローエディターで当社のWebサイトのステップを見つけることができるようにリポジトリ。 手順の共有 カスタムステップの共有はオプションです。単一のユーザーに固有のユースケースを持つステップは、他のユーザーにはあまり役立ちません。自分のマシンまたは任意のGitリポジトリからステップを実行できるため、カスタムステップはBitriseステップライブラリの一部である必要はありません。 他のユーザーとステップを共有する方法の詳細については、 手順の共有 ガイド。 ステップの動作の詳細については、次のガイドを参照してください。 YAMLの手順 ステップ入力 ステップ出力 ステッププロパティ " }, 
{ "title" : "新しいステップの開発を開始する前に ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#新しいステップの開発を開始する前に", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ 新しいステップの開発を開始する前に ", 
"snippet" : "新しいステップを作成する前に、Bitrise CLIをインストールしてセットアップし、 ステッププラグイン 最新バージョンに更新されます。 BitriseCLIをインストールします 。 ビットライズセットアップを実行します。 次のコマンドを使用して、Stepプラグインを最新バージョンに更新します。 bitrise plugin update step...", 
"body" : "新しいステップを作成する前に、Bitrise CLIをインストールしてセットアップし、 ステッププラグイン 最新バージョンに更新されます。 BitriseCLIをインストールします 。 ビットライズセットアップを実行します。 次のコマンドを使用して、Stepプラグインを最新バージョンに更新します。 bitrise plugin update step " }, 
{ "title" : "ステップの作成 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップの作成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップの作成 ", 
"snippet" : "Bitrise CLIのStepプラグインを使用して、新しいStepを作成します。これで、ステップの基本構造を作成します。特定のプロパティと入力が自動的に生成され、割り当てられます。後で何でも変更できるので、まだ心配しないでください。 ステッププラグイン 走る bitrise :step コマンドラインインターフェイスでコマンドを確認します。 ステップの基本構造の作成は簡単です。このプロセスに関連する概念については、後で詳しく説明します。今のところ、ステップを作成するプロセスを実行するだけです。このプロセスの最後に、 step.yml ファイル、 README.md ファイルといずれか mai...", 
"body" : "Bitrise CLIのStepプラグインを使用して、新しいStepを作成します。これで、ステップの基本構造を作成します。特定のプロパティと入力が自動的に生成され、割り当てられます。後で何でも変更できるので、まだ心配しないでください。 ステッププラグイン 走る bitrise :step コマンドラインインターフェイスでコマンドを確認します。 ステップの基本構造の作成は簡単です。このプロセスに関連する概念については、後で詳しく説明します。今のところ、ステップを作成するプロセスを実行するだけです。このプロセスの最後に、 step.yml ファイル、 README.md ファイルといずれか main.go または step.sh リポジトリ内のファイル。 始める前に ステップの作成プロセス中に、いくつかのオプションを設定するように求められます。ステップをBitriseに送信して確認する前に、これらのいずれかを変更できることに注意してください。データは、生成されたデータに含まれます。 step.yml 後で自由に編集できるファイル。最初のステップ作成プロセスでは、必要に応じてプレースホルダーを使用できます。 MacOSのターミナルアプリなどのコマンドラインインターフェイスを開きます。 まだ作成していない場合は、ステップ用の新しいディレクトリを作成し、そのディレクトリを入力します。 BitriseStepプラグインを使用してステップを作成します。 プロンプトが表示されたら、ステップの作成者の名前を設定します。 Enterキーを押して、デフォルト値のままにします。 プロンプトが表示されたら、ステップの名前を設定します。 プラグインは、この名前に基づいてステップIDを自動的に生成します。 要約を提供します：ステップが何をするかについてのほんの数文。 ステップの説明を提供します。 これには、ステップの構成情報とトラブルシューティング情報が含まれている必要があります。 ステップのプライマリカテゴリを選択します。 これを行うには、希望するオプションの番号を入力して、Enterキーを押します。これは後で変更できます。 使用するツールキットを選択します。GoまたはBashのいずれかを選択できます。 ステップのデータをホストするソースコードを設定します。 これを行うには、最初にGitHubでホストするか、他のサイトでホストするかを決定し、適切なオプションを入力します。 GitHubを選択した場合は、リポジトリを所有するアカウントのユーザー名を入力するように求められます。 GitHubに保存しないことを選択した場合は、リポジトリの有効なURLを指定する必要があります。 これで完了です。すべてがうまくいった場合、プラグインは現在のディレクトリのgitリポジトリを初期化し、 step.yml 、 README.md ファイル、およびいずれか main.go または main.sh ファイル。 次に、 step.yml ファイルが機能し、その設定方法。 " }, 
{ "title" : "step.ymlファイル ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#step-ymlファイル", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ step.ymlファイル ", 
"snippet" : "The step.yml fileは、ステップインターフェイス定義であり、依存関係、ステップ入力、ステップ出力、およびその他のステッププロパティが含まれています。また、ステップのソースコードの場所も示します。すべてのステップに1つ必要です。 ステッププラグインを使用して新しいステップを作成する場合、必要なすべてのプロパティに値が割り当てられますが、いつでも変更できます。したがって、最初のプロセスで設定したタイトルが以下のガイドラインに準拠していなくても心配する必要はありません。 の最も重要な構成オプションを見ていきます step.yml ステップの命名と説明、およびステップ入力とステップ出力の...", 
"body" : "The step.yml fileは、ステップインターフェイス定義であり、依存関係、ステップ入力、ステップ出力、およびその他のステッププロパティが含まれています。また、ステップのソースコードの場所も示します。すべてのステップに1つ必要です。 ステッププラグインを使用して新しいステップを作成する場合、必要なすべてのプロパティに値が割り当てられますが、いつでも変更できます。したがって、最初のプロセスで設定したタイトルが以下のガイドラインに準拠していなくても心配する必要はありません。 の最も重要な構成オプションを見ていきます step.yml ステップの命名と説明、およびステップ入力とステップ出力の設定を含むファイル。 " }, 
{ "title" : "ステップの命名と説明 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップの命名と説明", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップの命名と説明 ", 
"snippet" : "すべてのステップには、少なくともタイトルと要約が定義されている必要があります。 step.yml ファイル。これらは両方に表示されます 統合 ページと ワークフローエディター 。 The description プロパティはオプションですが、他のユーザーがステップの動作をよりよく理解できるように、プロパティを提供することを強くお勧めします。 説明と要約 両方 description と summary その値でMarkdownフォーマットを受け入れます。...", 
"body" : "すべてのステップには、少なくともタイトルと要約が定義されている必要があります。 step.yml ファイル。これらは両方に表示されます 統合 ページと ワークフローエディター 。 The description プロパティはオプションですが、他のユーザーがステップの動作をよりよく理解できるように、プロパティを提供することを強くお勧めします。 説明と要約 両方 description と summary その値でMarkdownフォーマットを受け入れます。 " }, 
{ "title" : "タイトル ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#タイトル", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップの命名と説明 \/ タイトル ", 
"snippet" : "タイトルプロパティ NS title プロパティが必要です！ NS title プロパティは、ステップの名前を設定します。 bitrise.io 。短くて説明的なものにする必要があります。サービスの名前と、サービスが実行する機能などを含めます。 Gitクローン 。ステップタイトルのガイドラインは次のとおりです。 「ステップ」という言葉は使用しないでください。 可能な場合は、名詞の代わりに命令動詞を使用してください。たとえば、代わりに スクリプトランナー 、 そのはず スクリプトを実行する 。 プラットフォームの名前は含めないでください。 サービスまたはツールの正しい名前を使用していることを確認...", 
"body" : "タイトルプロパティ NS title プロパティが必要です！ NS title プロパティは、ステップの名前を設定します。 bitrise.io 。短くて説明的なものにする必要があります。サービスの名前と、サービスが実行する機能などを含めます。 Gitクローン 。ステップタイトルのガイドラインは次のとおりです。 「ステップ」という言葉は使用しないでください。 可能な場合は、名詞の代わりに命令動詞を使用してください。たとえば、代わりに スクリプトランナー 、 そのはず スクリプトを実行する 。 プラットフォームの名前は含めないでください。 サービスまたはツールの正しい名前を使用していることを確認してください。たとえば、GithubではなくGitHubです。 実装の詳細は含めないでください。 " }, 
{ "title" : "サマリー ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#サマリー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップの命名と説明 \/ サマリー ", 
"snippet" : "サマリープロパティ サマリープロパティが必要です！ ステップに関する最も重要な情報の1行。 100文字を超えることはできません。 要約は、デフォルトでワークフローエディターに表示されます。ユーザーが要約を展開すると、ステップの説明が表示されます。もちろん、要約がある場合はその説明が表示されます。...", 
"body" : "サマリープロパティ サマリープロパティが必要です！ ステップに関する最も重要な情報の1行。 100文字を超えることはできません。 要約は、デフォルトでワークフローエディターに表示されます。ユーザーが要約を展開すると、ステップの説明が表示されます。もちろん、要約がある場合はその説明が表示されます。 " }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#説明-78653", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップの命名と説明 \/ 説明 ", 
"snippet" : "ステップの詳細な説明。以下を含める必要があります。 ステップが行うこと。 ステップで使用されるサービスとツール。 最も重要な入力を含む構成情報。 トラブルシューティング情報：潜在的な問題とその解決策。 デフォルトでは、ステップの説明はワークフローエディターで折りたたまれ、概要が表示されます。...", 
"body" : "ステップの詳細な説明。以下を含める必要があります。 ステップが行うこと。 ステップで使用されるサービスとツール。 最も重要な入力を含む構成情報。 トラブルシューティング情報：潜在的な問題とその解決策。 デフォルトでは、ステップの説明はワークフローエディターで折りたたまれ、概要が表示されます。 " }, 
{ "title" : "ステップカテゴリ ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップカテゴリ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップカテゴリ ", 
"snippet" : "あなたのステップについて私たちが知りたいもう一つのことがあります：それはどのタイプのステップですか？統合ページまたはワークフローエディターで確認できるように、ステップは、使用可能なプラットフォームと機能の2つの要素に基づいてさまざまなカテゴリに分類されます。...", 
"body" : "あなたのステップについて私たちが知りたいもう一つのことがあります：それはどのタイプのステップですか？統合ページまたはワークフローエディターで確認できるように、ステップは、使用可能なプラットフォームと機能の2つの要素に基づいてさまざまなカテゴリに分類されます。 " }, 
{ "title" : "プラットフォーム ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#プラットフォーム", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップカテゴリ \/ プラットフォーム ", 
"snippet" : "利用可能なプラットフォームタイプは、 project_type_tags 属性。ステップがすべてのプラットフォームまたはプロジェクトタイプで利用できる場合は、指定しないでください project_type_tags 。それ以外の場合は、ステップを使用できるすべてのプラットフォームタイプを選択してください。 使用可能な値は次のとおりです。 ios macos android react-native cordova ionic flutter...", 
"body" : "利用可能なプラットフォームタイプは、 project_type_tags 属性。ステップがすべてのプラットフォームまたはプロジェクトタイプで利用できる場合は、指定しないでください project_type_tags 。それ以外の場合は、ステップを使用できるすべてのプラットフォームタイプを選択してください。 使用可能な値は次のとおりです。 ios macos android react-native cordova ionic flutter " }, 
{ "title" : "カテゴリー ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#カテゴリー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップカテゴリ \/ カテゴリー ", 
"snippet" : "機能カテゴリは、 type_tags の属性 step.yml 。 1つのステップには、単一のタイプタグのみを割り当てる必要があります。使用する utility 他のタイプのどれもあなたのステップに合わないとあなたが信じる場合にのみ。 使用可能な値は次のとおりです。 build code-sign test deploy notification access-control artifact-info installer dependency utility...", 
"body" : "機能カテゴリは、 type_tags の属性 step.yml 。 1つのステップには、単一のタイプタグのみを割り当てる必要があります。使用する utility 他のタイプのどれもあなたのステップに合わないとあなたが信じる場合にのみ。 使用可能な値は次のとおりです。 build code-sign test deploy notification access-control artifact-info installer dependency utility " }, 
{ "title" : "ステップ入力 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップ入力-78653", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ入力 ", 
"snippet" : "ステップ入力はBitriseです 環境変数 ：これらは、ステップのユーザーがステップの動作を制御するために設定できるキーと値のペアで構成されます。たとえば、 Gitクローン ステップには、キーブランチを含む入力があります。 title: Git Clone Repository summary: Clone a repository to the specified path on the VM inputs: - branch: master この入力の値（上記の例ではmaster）は、リポジトリのどのブランチが複製されるかを決定するために使用されます。 ステップ入力はワークフローエディター...", 
"body" : "ステップ入力はBitriseです 環境変数 ：これらは、ステップのユーザーがステップの動作を制御するために設定できるキーと値のペアで構成されます。たとえば、 Gitクローン ステップには、キーブランチを含む入力があります。 title: Git Clone Repository\nsummary: Clone a repository to the specified path on the VM\ninputs:\n- branch: master この入力の値（上記の例ではmaster）は、リポジトリのどのブランチが複製されるかを決定するために使用されます。 ステップ入力はワークフローエディターに表示されます。入力は、ワークフローエディターに表示される順序で表示されます。 step.yml 。そのため、必要で頻繁に使用される入力を一番上に配置する必要があります。 " }, 
{ "title" : "ステップ入力キーと値 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップ入力キーと値", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ入力 \/ ステップ入力キーと値 ", 
"snippet" : "小文字を使用 スネークケース スタイル入力キー。例えば、 project_path 。 使用する opts 入力キーとして 入力キーはできません opts 、入力のオプションに使用されるため。 入力はステップ実行プロセスでのみ公開されるため、入力キーにドメイン固有のプレフィックスを追加する必要はありません。これの意味は project_path 入力は後続のステップと重複しません ' project_path 入力。 ステップ入力値は文字列です。BitriseCLIは、ステップ入力を環境変数としてステップに公開します。 可能であれば（そしてそれが理にかなっている場合は）ステップ入力のデフォルト...", 
"body" : "小文字を使用 スネークケース スタイル入力キー。例えば、 project_path 。 使用する opts 入力キーとして 入力キーはできません opts 、入力のオプションに使用されるため。 入力はステップ実行プロセスでのみ公開されるため、入力キーにドメイン固有のプレフィックスを追加する必要はありません。これの意味は project_path 入力は後続のステップと重複しません ' project_path 入力。 ステップ入力値は文字列です。BitriseCLIは、ステップ入力を環境変数としてステップに公開します。 可能であれば（そしてそれが理にかなっている場合は）ステップ入力のデフォルト値を提供します。これにより、Bitriseユーザーはステップ構成が簡単になります。 次の場合を除いて、環境変数をデフォルト値として使用しないでください。 彼らはによって公開されています BitriseCLIまたはbitrise.ioによる 。 これらは、別のステップによって出力として生成されます（たとえば、 $BITRISE_IPA_PATH 、 $BITRISE_AAB_PATH ）。 これは、ワークフローエディターが値のない必要な入力を強調表示して、ステップを表現するために、指定された入力に有効な値を設定しないと機能しないためです。自動的に割り当てられた値を持たない環境変数を入力のデフォルト値として設定すると、ワークフローエディターは、問題の必要な入力に有効な値が設定されていると見なします（デフォルトの環境変数にまだ値がない場合でも） ）。 また、この方法で環境変数に特定の名前を提案する理由はありません。ユーザーは、異なる名前の環境変数に同じ値が割り当てられている可能性があります。 ステップ入力がコードに渡される方法と、それらがどのように表示されるかについて説明しましょう。 " }, 
{ "title" : "ステップ入力の構成 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップ入力の構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ入力の構成 ", 
"snippet" : "ステップ入力は、 step.yml ファイル。 キーと値に加えて、ステップ入力には opts 財産。このプロパティには、入力がステップのコードに渡される方法と、ワークフローエディターでの表示方法を定義するさまざまなオプションが含まれています。入力の可能な値は、で設定できます。 opts 同様に。例を見てみましょう。 - install_defaults: \"yes\" opts: title: Installs default Codesign Files value_options: - \"no\" - \"yes\" 上記の入力にはキーinstall_defaultsがあり、そのデフォルト値はye...", 
"body" : "ステップ入力は、 step.yml ファイル。 キーと値に加えて、ステップ入力には opts 財産。このプロパティには、入力がステップのコードに渡される方法と、ワークフローエディターでの表示方法を定義するさまざまなオプションが含まれています。入力の可能な値は、で設定できます。 opts 同様に。例を見てみましょう。 - install_defaults: \"yes\"\n opts:\n title: Installs default Codesign Files\n value_options:\n - \"no\"\n - \"yes\" 上記の入力にはキーinstall_defaultsがあり、そのデフォルト値はyesです。 value_optionsオプションは、可能な値を定義します。この場合、yesとnoです。そのoptsプロパティには、入力の表示方法に関する情報が含まれています。この場合、これは単なるタイトルオプションであり、常に必要です。入力のキーの代わりに、タイトルがワークフローエディタに表示されます。 NS value_options 入力 NS value_options 入力には文字列が含まれている必要があります。これは、例に示されているように、引用符がないと検証が失敗することを意味します。 " }, 
{ "title" : "ステップ入力の命名と説明 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップ入力の命名と説明", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ入力の構成 \/ ステップ入力の命名と説明 ", 
"snippet" : "ステップ入力には、ステップ自体と同じように、名前、要約、および説明を含めることができます。これらを定義するには： 含める opts ステップ入力を持つプロパティ。 optsの下に、タイトル、要約、および説明オプションを入力します。 これらがどのように見えるかを見てみましょう！ 説明と要約 両方 description と summary その値でMarkdownフォーマットを受け入れます。 title ：短くて説明的な文または半文である必要があります：Xcodeプロジェクトのパス。内部で使用されるCLIフラグまたはAPIパラメーター名であってはなりません。これにより、基盤となるツールまたはサー...", 
"body" : "ステップ入力には、ステップ自体と同じように、名前、要約、および説明を含めることができます。これらを定義するには： 含める opts ステップ入力を持つプロパティ。 optsの下に、タイトル、要約、および説明オプションを入力します。 これらがどのように見えるかを見てみましょう！ 説明と要約 両方 description と summary その値でMarkdownフォーマットを受け入れます。 title ：短くて説明的な文または半文である必要があります：Xcodeプロジェクトのパス。内部で使用されるCLIフラグまたはAPIパラメーター名であってはなりません。これにより、基盤となるツールまたはサービスインターフェイスに関する既存の知識が不要になるため、ステップの構成が容易になります。また、下位互換性を維持しながら、ステップの実装を変更する方が簡単です。 summary ：これは説明の短いバージョンであり、入力の概要を簡単に説明します。 Bitriseワークフローエディターでは、ステップをクリックすると、入力の概要がデフォルトで表示されます。 description ：これは、ステップ入力のユーザー向けの説明です。これにより、入力のより深く、より詳細な説明が提供されます。デフォルトでは、ユーザーが問題の入力をクリックしない限り、ワークフローエディターには表示されません。 次に例を示します。 - install_defaults: \"yes\"\n opts:\n description: Installs default (Bitrise) Wildcard Provisioning Profile and\n Certificate files for testing.\n summary: Installs default (Bitrise) Wildcard code signing files.\n title: Installs default code signing files それでは、ステップの他の構成オプションについて説明しましょう。 " }, 
{ "title" : "必要な入力 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#必要な入力", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ入力の構成 \/ 必要な入力 ", 
"snippet" : "必要な入力には有効な値が必要です。そうでない場合、ステップは失敗します。 ステップ入力を必須としてマークするには、のis_requiredオプションを使用します opts 財産。 2つの値があります。 true と false 。に設定されている場合 true 、入力は次のように表示されます 必要 ワークフローエディタで。 - keychain_password: $BITRISE_KEYCHAIN_PASSWORD opts: title: \"Keychain's password\" is_required: true...", 
"body" : "必要な入力には有効な値が必要です。そうでない場合、ステップは失敗します。 ステップ入力を必須としてマークするには、のis_requiredオプションを使用します opts 財産。 2つの値があります。 true と false 。に設定されている場合 true 、入力は次のように表示されます 必要 ワークフローエディタで。 - keychain_password: $BITRISE_KEYCHAIN_PASSWORD\n opts:\n title: \"Keychain's password\"\n is_required: true " }, 
{ "title" : "敏感な入力 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#敏感な入力", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ入力の構成 \/ 敏感な入力 ", 
"snippet" : "ステップ入力をセンシティブとしてマークして、それらの値が公開されないようにすることができます。機密入力のみを受け入れます 秘密 値として。これにより、ビルドログに表示されなくなります。 ステップ入力を高感度としてマークするには、 is_sensitive のオプション opts 財産。 2つの値があります。 true と false 。に設定されている場合 true 、入力は次のように表示されます センシティブ ワークフローエディタで。 NS is_expand オプション 入力を機密としてマークすると、 is_expand 入力のオプションもtrueである必要があります。これはデフォルト設定...", 
"body" : "ステップ入力をセンシティブとしてマークして、それらの値が公開されないようにすることができます。機密入力のみを受け入れます 秘密 値として。これにより、ビルドログに表示されなくなります。 ステップ入力を高感度としてマークするには、 is_sensitive のオプション opts 財産。 2つの値があります。 true と false 。に設定されている場合 true 、入力は次のように表示されます センシティブ ワークフローエディタで。 NS is_expand オプション 入力を機密としてマークすると、 is_expand 入力のオプションもtrueである必要があります。これはデフォルト設定です。 inputs:\n - certificate_urls: $BITRISE_CERTIFICATE_URL\n opts:\n title: \"Certificate URL\"\n is_sensitive: true " }, 
{ "title" : "EnvVarsを入力値として使用する ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#envvarsを入力値として使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ入力の構成 \/ EnvVarsを入力値として使用する ", 
"snippet" : "前述のように、任意の入力の値として環境変数を使用することができます。デフォルトでは、StepはEnv Varを展開し、その値をStepの実行に渡します。これはによって定義されます is_expand のオプション opts 財産。 - project_path: $BITRISE_PROJECT_PATH opts: is_expand: true The is_expand オプションには、trueまたはfalseの2つの値を指定できます。に設定されている場合 true -これはデフォルトの動作です-、の値 $BITRISE_PROJECT_PATH ステップ実行に渡されます。に設定されてい...", 
"body" : "前述のように、任意の入力の値として環境変数を使用することができます。デフォルトでは、StepはEnv Varを展開し、その値をStepの実行に渡します。これはによって定義されます is_expand のオプション opts 財産。 - project_path: $BITRISE_PROJECT_PATH\n opts:\n is_expand: true The is_expand オプションには、trueまたはfalseの2つの値を指定できます。に設定されている場合 true -これはデフォルトの動作です-、の値 $BITRISE_PROJECT_PATH ステップ実行に渡されます。に設定されている場合 false 、文字列 $BITRISE_PROJECT_PATH 合格します（プロジェクトの場所が見つからないため、この特定のステップは失敗します）。 ステップコードのEnv変数 ステップのコードで環境変数を直接使用しないでください。代わりに、すべての外部変数をステップの入力として公開し、その入力のデフォルト値を使用する環境変数に設定します。このようにして、ステップのテストが簡単になり、ステップのユーザーは、必要な変数のコードを精査することなく、これらの入力を簡単に宣言できます。 " }, 
{ "title" : "入力をグループ化する ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#入力をグループ化する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ入力の構成 \/ 入力をグループ化する ", 
"snippet" : "カテゴリオプションは、入力をグループ化するために使用されます。同じカテゴリに属する入力は一緒に表示され、ワークフローエディタではデフォルトで折りたたまれています。 - default_certificate_passphrase: $BITRISE_DEFAULT_CERTIFICATE_PASSPHRASE opts: category: Default code signing files description: | Certificate passphrase of the default certificate. is_sensitive: true title: Default c...", 
"body" : "カテゴリオプションは、入力をグループ化するために使用されます。同じカテゴリに属する入力は一緒に表示され、ワークフローエディタではデフォルトで折りたたまれています。 - default_certificate_passphrase: $BITRISE_DEFAULT_CERTIFICATE_PASSPHRASE\n opts:\n category: Default code signing files\n description: |\n Certificate passphrase of the default certificate.\n is_sensitive: true\n title: Default certificate passphrase この場合、この入力は、同じカテゴリが設定されている他のすべての入力とともに表示されます。 ステップに6つを超える入力がある場合は、カテゴリを使用できます。グループまたはルートで推奨される入力の最大数は6です。 ステップカテゴリを設計するときは、次の点に注意してください。 必要な入力はグループ化しないでください！ グループ化された入力は、分類されていない入力の後に表示する必要があります。 " }, 
{ "title" : "入力の値のリストを受け入れる ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#入力の値のリストを受け入れる", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ入力の構成 \/ 入力の値のリストを受け入れる ", 
"snippet" : "特定の入力の値のリストを受け入れることは絶対に可能です。これを行う場合は、入力のキーにリストサフィックスを追加することを強くお勧めします（たとえば、 input_path_list ）、値が改行文字（\\ n）で区切られたリストとして提供されることを期待します（たとえば、最初の値\\ n2番目の値）。 値を区切るために本当に別の文字を使用する必要がない限り、このソリューションを使用してください。私たちの経験に基づくと、改行文字（\\ n）は、入力値では非常にまれであるため（、、;、=または他のより一般的な区切り文字と比較して）、ユニバーサル区切り文字として非常にうまく機能します。 ベストプラクティス...", 
"body" : "特定の入力の値のリストを受け入れることは絶対に可能です。これを行う場合は、入力のキーにリストサフィックスを追加することを強くお勧めします（たとえば、 input_path_list ）、値が改行文字（\\ n）で区切られたリストとして提供されることを期待します（たとえば、最初の値\\ n2番目の値）。 値を区切るために本当に別の文字を使用する必要がない限り、このソリューションを使用してください。私たちの経験に基づくと、改行文字（\\ n）は、入力値では非常にまれであるため（、、;、=または他のより一般的な区切り文字と比較して）、ユニバーサル区切り文字として非常にうまく機能します。 ベストプラクティスとして、空のアイテムを除外する必要があります。次のいずれかを使用します。 first value\\n\\nsecond value また first value\\n \\nsecond value " }, 
{ "title" : "ステップ出力 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップ出力", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ出力 ", 
"snippet" : "ステップは出力を生成でき、それを他のステップで入力として使用できます。つまり、ステップがアーティファクトを生成する場合、そのアーティファクトへのパスは、ビルド内の別のステップの入力になる可能性があります。たとえば、 iOS用のXcodeアーカイブとエクスポート ステップは、 $BITRISE_API_PATH 次に、の入力値として使用できる出力 iTunesConnectにデプロイする ステップ。 出力は、 step.yml ファイル、outputsプロパティの下。これらは入力と同じ構造を持っています。つまり、キーと値のペアで構成されています。出力のキーは、によって公開される環境変数と同様に、...", 
"body" : "ステップは出力を生成でき、それを他のステップで入力として使用できます。つまり、ステップがアーティファクトを生成する場合、そのアーティファクトへのパスは、ビルド内の別のステップの入力になる可能性があります。たとえば、 iOS用のXcodeアーカイブとエクスポート ステップは、 $BITRISE_API_PATH 次に、の入力値として使用できる出力 iTunesConnectにデプロイする ステップ。 出力は、 step.yml ファイル、outputsプロパティの下。これらは入力と同じ構造を持っています。つまり、キーと値のペアで構成されています。出力のキーは、によって公開される環境変数と同様に、後続のステップで入力値として使用できます。 bitrise.io または、BitriseCLIを使用できます。 " }, 
{ "title" : "ステップ出力キーと値 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップ出力キーと値", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ出力 \/ ステップ出力キーと値 ", 
"snippet" : "出力キーには大文字を使用してください スネークケース スタイル出力キー。例：OUTPUT_PATH。...", 
"body" : "出力キーには大文字を使用してください スネークケース スタイル出力キー。例：OUTPUT_PATH。 " }, 
{ "title" : "ステップ出力の命名と説明 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップ出力の命名と説明", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ出力 \/ ステップ出力の命名と説明 ", 
"snippet" : "ステップ出力は、常に環境変数 (Env Var) としてエクスポートされます。たとえば、 Xcode のアーカイブと iOS へのエクスポートの手順 IPA ファイルを生成します。この出力は、 BITRISE_IPA_PATH 環境変数: outputs: - BITRISE_IPA_PATH: opts: title: .ipa file path summary: Local path of the created .ipa file 例が示すように、出力定義にはキー ( BITRISE_IPA_PATH ) と opts また、タイトルと概要も含まれます。ワークフロー エディターでは、キ...", 
"body" : "ステップ出力は、常に環境変数 (Env Var) としてエクスポートされます。たとえば、 Xcode のアーカイブと iOS へのエクスポートの手順 IPA ファイルを生成します。この出力は、 BITRISE_IPA_PATH 環境変数: outputs:\n- BITRISE_IPA_PATH: \n opts: \n title: .ipa file path \n summary: Local path of the created .ipa file 例が示すように、出力定義にはキー ( BITRISE_IPA_PATH ) と opts また、タイトルと概要も含まれます。ワークフロー エディターでは、キーとタイトルがデフォルトで表示されます。これらは必須です。さらに、概要と説明を追加できます。 title : 短い説明文または半文である必要があります: 生成された IPA パス。これは必須です。 summary : これは説明の短いバージョンで、出力の概要を簡単に説明します。これはオプションであり、タイトルをクリックした場合にのみワークフロー エディターに表示されます。 description : これは、ステップ出力のユーザー向けの説明です。これにより、出力についてより深く、より詳細な説明が提供されます。これはオプションであり、タイトルをクリックした場合にのみワークフロー エディターに表示されます。 " }, 
{ "title" : "値のリストを含む出力 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#値のリストを含む出力", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップ出力 \/ 値のリストを含む出力 ", 
"snippet" : "特定の出力の値のリストを提供することは絶対に可能です。これを行う場合は、出力のキーにLISTサフィックスを追加することを強くお勧めします（たとえば、 BITRISE_APK_PATH_LIST ）、値が改行文字（\\ n）で区切られたリストとして提供されることを期待します（たとえば、最初の値\\ n2番目の値）。 値を区切るために本当に別の文字を使用する必要がない限り、このソリューションを使用してください。私たちの経験に基づくと、改行文字（\\ n）は、入力値では非常にまれであるため（、、;、=または他のより一般的な区切り文字と比較して）、ユニバーサル区切り文字として非常にうまく機能します。...", 
"body" : "特定の出力の値のリストを提供することは絶対に可能です。これを行う場合は、出力のキーにLISTサフィックスを追加することを強くお勧めします（たとえば、 BITRISE_APK_PATH_LIST ）、値が改行文字（\\ n）で区切られたリストとして提供されることを期待します（たとえば、最初の値\\ n2番目の値）。 値を区切るために本当に別の文字を使用する必要がない限り、このソリューションを使用してください。私たちの経験に基づくと、改行文字（\\ n）は、入力値では非常にまれであるため（、、;、=または他のより一般的な区切り文字と比較して）、ユニバーサル区切り文字として非常にうまく機能します。 " }, 
{ "title" : "ステップを実行するための条件を設定する ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップを実行するための条件を設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップを実行するための条件を設定する ", 
"snippet" : "ステップが特定のワークフローで実行されるかどうかを定義する3つのプロパティがあります。 is_always_run 、 is_skippable と run_if 。これらのプロパティはすべて、 step.yml ステップのデフォルトの動作を管理するファイル、またはケースバイケースで特定のアプリのbitrise.ymlファイルに設定されます。 is_always_run ：デフォルトでは、ワークフローの前のステップが失敗した場合、ステップは実行されません。ただし、 is_always_run プロパティはに設定されています true 、ワークフローの前のステップのステータスに関係なく、ステップ...", 
"body" : "ステップが特定のワークフローで実行されるかどうかを定義する3つのプロパティがあります。 is_always_run 、 is_skippable と run_if 。これらのプロパティはすべて、 step.yml ステップのデフォルトの動作を管理するファイル、またはケースバイケースで特定のアプリのbitrise.ymlファイルに設定されます。 is_always_run ：デフォルトでは、ワークフローの前のステップが失敗した場合、ステップは実行されません。ただし、 is_always_run プロパティはに設定されています true 、ワークフローの前のステップのステータスに関係なく、ステップが実行されます。これは、たとえば、ビルドに関する通知を送信できるステップの場合に非常に役立ちます。失敗したビルドに関する通知を送信できます。 is_skippable ：前述のように、ワークフローの前のステップが失敗した場合、ステップは実行されません。ただし、ステップの場合 is_skippable プロパティはに設定されています true 、ビルドは失敗せず、特定のステップが失敗した場合でも、後続のステップが実行されます。良い例は キャッシュ：プル ステップ：アプリにプル元のビルドキャッシュがない場合、ステップは失敗しますが、ビルドが失敗する理由はありません。 run_if ：ステップ実行を特定の条件に依存させたい場合は、 run_if 実行条件を定義するプロパティ。たとえば、CI環境でのみ実行されるようにステップを構成できます。詳しくはこちらをご覧ください ステップを条件付きで有効または無効にする 考えられるユースケースについてのガイド。 " }, 
{ "title" : "サブモジュールとステップの依存関係 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#サブモジュールとステップの依存関係", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ サブモジュールとステップの依存関係 ", 
"snippet" : "サブモジュールを使用したり、ステップでオンデマンドでダウンロードした他のリソースを要求したりしないでください。ステップに必要なすべてのものをステップのリポジトリに含めるようにしてください。そうしないと、たとえば、ネットワークエラーまたは何らかの認証の問題が原因でステップがリソースのダウンロードに失敗した場合に、問題が発生する可能性があります。サブモジュールの場合、ステップのリポジトリのサブモジュールとして使用するのではなく、他のリポジトリのコンテンツを含める必要があります。 ただし、apt-getやbrewなどのOS依存関係マネージャーからフェッチできる依存関係を宣言することはできます。ステッ...", 
"body" : "サブモジュールを使用したり、ステップでオンデマンドでダウンロードした他のリソースを要求したりしないでください。ステップに必要なすべてのものをステップのリポジトリに含めるようにしてください。そうしないと、たとえば、ネットワークエラーまたは何らかの認証の問題が原因でステップがリソースのダウンロードに失敗した場合に、問題が発生する可能性があります。サブモジュールの場合、ステップのリポジトリのサブモジュールとして使用するのではなく、他のリポジトリのコンテンツを含める必要があります。 ただし、apt-getやbrewなどのOS依存関係マネージャーからフェッチできる依存関係を宣言することはできます。ステップ依存関係は、Bitrise CLIで使用できない場合、BitriseCLIによってインストールされます。 PATH 環境変数。 ステップはBitriseCLIを実行できる任意の環境で実行できるため、Bitriseスタックにプリインストールされていることがわかっている場合でも、使用されているすべての依存関係を一覧表示します。未使用の依存関係（たとえば、デフォルトでサンプルとして追加されたgitとwget）は、ビルド時間を浪費します。 ステップの依存関係にはツールキットの依存関係を含めないでください。BitriseCLIがそれらを自動的にインストールします。ステップがGoBitrise CLIツールキットを使用している場合、golangで記述されたステップは依存関係としてgoをリストするべきではありません。 Bitrise CLIは、Homebrewパッケージマネージャーで利用可能なステップ依存関係をインストールできます。 deps:\n brew:\n - name: cmake ホストマシンのsources.listファイルにリストされているソースで利用可能なapt-get依存関係をインストールできます。 deps:\n apt_get:\n - name: cmake " }, 
{ "title" : "EnvVarを使用してステップリポジトリ内のファイルにアクセスする ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#envvarを使用してステップリポジトリ内のファイルにアクセスする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ サブモジュールとステップの依存関係 \/ EnvVarを使用してステップリポジトリ内のファイルにアクセスする ", 
"snippet" : "ステップリポジトリにバンドルする必要がある、ステップに必要なバイナリ、アセット、またはその他のものを保持する必要がある場合は、それらをステップリポジトリの横に含めることができます。 step.yml ファイルとステップのコード。 Bitrise CLIは、と呼ばれる環境変数を自動的にエクスポートします BITRISE_STEP_SOURCE_DIR これにより、いつでもこれらのファイルにアクセスできます。 たとえば、にアクセスできます .jar 次のように、ステップのリポジトリのルートにあるファイル： $BITRISE_STEP_SOURCE_DIR\/mytool.jar...", 
"body" : "ステップリポジトリにバンドルする必要がある、ステップに必要なバイナリ、アセット、またはその他のものを保持する必要がある場合は、それらをステップリポジトリの横に含めることができます。 step.yml ファイルとステップのコード。 Bitrise CLIは、と呼ばれる環境変数を自動的にエクスポートします BITRISE_STEP_SOURCE_DIR これにより、いつでもこれらのファイルにアクセスできます。 たとえば、にアクセスできます .jar 次のように、ステップのリポジトリのルートにあるファイル： $BITRISE_STEP_SOURCE_DIR\/mytool.jar " }, 
{ "title" : "ステップアイコンの追加 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/新しいステップの開発.html#ステップアイコンの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 新しいステップの開発 \/ ステップアイコンの追加 ", 
"snippet" : "ステップアイコンをステップに追加できます。ワークフローエディタと 統合 ページ。必要に応じて、いくつかの要件があります。 その背景色は透明であってはなりません。 サイズ：256x256ピクセル。 マージン：60ピクセル。 フォーマット：SVG。 確認済みの手順 確認のためにステップを送信して、 確認済みのステップ 、ステップアイコンを追加する必要があります。 ステップのアイコンを送信するには： .svgファイルを次の場所にあるStepLibフォークリポジトリに追加します。 STEPLIB_FORK_ROOT\/steps\/YOUR_STEP_ID\/assets\/icon.svg 。 に新しいプル...", 
"body" : "ステップアイコンをステップに追加できます。ワークフローエディタと 統合 ページ。必要に応じて、いくつかの要件があります。 その背景色は透明であってはなりません。 サイズ：256x256ピクセル。 マージン：60ピクセル。 フォーマット：SVG。 確認済みの手順 確認のためにステップを送信して、 確認済みのステップ 、ステップアイコンを追加する必要があります。 ステップのアイコンを送信するには： .svgファイルを次の場所にあるStepLibフォークリポジトリに追加します。 STEPLIB_FORK_ROOT\/steps\/YOUR_STEP_ID\/assets\/icon.svg 。 に新しいプルリクエストを作成します StepLibリポジトリ 。 " }, 
{ "title" : "すべてのBitriseユーザーとステップを共有する ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/すべてのbitriseユーザーとステップを共有する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ すべてのBitriseユーザーとステップを共有する ", 
"snippet" : "Bitriseステップが他の人にも役立つと思われる場合は、CLIコマンドまたはBitriseワークフローを介して共有できます。共有ステップは積極的に維持され、貢献者に開かれている必要があります。 あなたがあなたの ステップ 他の人に役立つことができます、あなたはそれを共有することができます！ただし、その前に、同じ問題を解決する他の手順がないことを確認してください。確認してもいい： のリストで リリースされたステップ 。 のリストで プルリクエストを開く StepLibで。 のリストで クローズドプルリクエスト StepLibで。 特定の機能が不足しているステップを見つけた場合は、その機能の新し...", 
"body" : "Bitriseステップが他の人にも役立つと思われる場合は、CLIコマンドまたはBitriseワークフローを介して共有できます。共有ステップは積極的に維持され、貢献者に開かれている必要があります。 あなたがあなたの ステップ 他の人に役立つことができます、あなたはそれを共有することができます！ただし、その前に、同じ問題を解決する他の手順がないことを確認してください。確認してもいい： のリストで リリースされたステップ 。 のリストで プルリクエストを開く StepLibで。 のリストで クローズドプルリクエスト StepLibで。 特定の機能が不足しているステップを見つけた場合は、その機能の新しいステップを開発または共有する前に、そのステップに貢献してみてください。あなたは私たちを使用することができます 統合ページ BitriseStepLibでステップを検索します。特定のステップのページでGitHubソースボタンをクリックすると、ステップのリポジトリに移動します。ここで、機能リクエストを送信したり、プルリクエストを開いたりできます。 また、共有ステップは積極的に維持され、貢献者に開かれている必要があることに注意してください。 " }, 
{ "title" : "新しいステップを共有する ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/すべてのbitriseユーザーとステップを共有する.html#新しいステップを共有する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ すべてのBitriseユーザーとステップを共有する \/ 新しいステップを共有する ", 
"snippet" : "共有プロセスは比較的簡単ですが、新しいステップを共有するときは、プロセスを慎重に実行するようにしてください。 bitriseshareコマンド ステップ開発中は、bitriseshareを実行するだけでいつでもヘルプを得ることができます。これにより、共有に関する短いガイドが印刷されます。 ステップを共有する方法は2つあります。 を使用して手動で行うことができます bitrise share 指図。 ステッププラグインを使用してステップを作成した場合は、 share-this-step ステップのディレクトリ内のワークフロー。...", 
"body" : "共有プロセスは比較的簡単ですが、新しいステップを共有するときは、プロセスを慎重に実行するようにしてください。 bitriseshareコマンド ステップ開発中は、bitriseshareを実行するだけでいつでもヘルプを得ることができます。これにより、共有に関する短いガイドが印刷されます。 ステップを共有する方法は2つあります。 を使用して手動で行うことができます bitrise share 指図。 ステッププラグインを使用してステップを作成した場合は、 share-this-step ステップのディレクトリ内のワークフロー。 " }, 
{ "title" : "始める前に ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/すべてのbitriseユーザーとステップを共有する.html#始める前に-78654", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ すべてのBitriseユーザーとステップを共有する \/ 新しいステップを共有する \/ 始める前に ", 
"snippet" : "開始する前に、次のことを確認してください。 ステップは公開Gitリポジトリにあります。 step.ymlファイルには、有効な課題追跡システムを指すsupport_urlプロパティが含まれています（たとえば、 問題 ステップのGitHubリポジトリのページ）。 step.ymlファイルには、リポジトリの正しいGitURLを指すsource_code_urlプロパティが含まれています。 複数のステップを共有する 複数のステップを共有する（つまり、Bitrise StepLibに複数の新しいstep.ymlファイルを追加する）ことは、別々のプルリクエストで行う必要があります！複数の新しいステップを含...", 
"body" : "開始する前に、次のことを確認してください。 ステップは公開Gitリポジトリにあります。 step.ymlファイルには、有効な課題追跡システムを指すsupport_urlプロパティが含まれています（たとえば、 問題 ステップのGitHubリポジトリのページ）。 step.ymlファイルには、リポジトリの正しいGitURLを指すsource_code_urlプロパティが含まれています。 複数のステップを共有する 複数のステップを共有する（つまり、Bitrise StepLibに複数の新しいstep.ymlファイルを追加する）ことは、別々のプルリクエストで行う必要があります！複数の新しいステップを含むプルリクエストを開くことはできません。 準備ができたら、好みの共有プロセスに進んでください。 " }, 
{ "title" : "bitriseshareコマンドとの共有 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/すべてのbitriseユーザーとステップを共有する.html#bitriseshareコマンドとの共有", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ すべてのBitriseユーザーとステップを共有する \/ 新しいステップを共有する \/ bitriseshareコマンドとの共有 ", 
"snippet" : "フォーク Bitrise StepLib リポジトリ。 フォークしたStepLibをローカルで共有できるように準備します。 $ bitrise share start -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> ステップのリポジトリにステップバージョンタグを追加します。 フォークされたStepLibリポジトリにステップを追加します。 $ bitrise share create --tag [step-version-tag] --git [step-git-uri].git --stepid [step-id] 必要...", 
"body" : "フォーク Bitrise StepLib リポジトリ。 フォークしたStepLibをローカルで共有できるように準備します。 $ bitrise share start -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> ステップのリポジトリにステップバージョンタグを追加します。 フォークされたStepLibリポジトリにステップを追加します。 $ bitrise share create --tag [step-version-tag] --git [step-git-uri].git --stepid [step-id] 必要に応じて、フォークされたStepLibで完全なヘルスチェックを実行します。 $ bitrise share audit -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> ステップのstep.ymlファイルを確認し、問題がなければ共有プロセスを終了します。これにより、step.ymlファイルがコミットされてフォークされたStepLibリポジトリにプッシュされます。 $ bitrise share finish これにより、step.ymlファイルがコミットされてフォークされたStepLibリポジトリにプッシュされます。 公式でプルリクエストを開きます Bitrise StepLib リポジトリ。 " }, 
{ "title" : "このステップを共有するワークフローとの共有 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/すべてのbitriseユーザーとステップを共有する.html#このステップを共有するワークフローとの共有", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ すべてのBitriseユーザーとステップを共有する \/ 新しいステップを共有する \/ このステップを共有するワークフローとの共有 ", 
"snippet" : "share-this-stepワークフローは、新しいステップを作成するときにStepプラグインが自動的に生成するbitrise.ymlファイルに含まれています。それを使用すると、ステップの共有は非常に簡単です。 フォーク Bitrise StepLib リポジトリ。 必要なワークフロー環境変数をbitrise.ymlファイルのアプリレベルの環境変数として設定します。 app: envs: - BITRISE_STEP_ID: - BITRISE_STEP_VERSION: - BITRISE_STEP_GIT_CLONE_URL: - MY_STEPLIB_REPO_FORK_GIT_URL:...", 
"body" : "share-this-stepワークフローは、新しいステップを作成するときにStepプラグインが自動的に生成するbitrise.ymlファイルに含まれています。それを使用すると、ステップの共有は非常に簡単です。 フォーク Bitrise StepLib リポジトリ。 必要なワークフロー環境変数をbitrise.ymlファイルのアプリレベルの環境変数として設定します。 app: envs: - BITRISE_STEP_ID: - BITRISE_STEP_VERSION: - BITRISE_STEP_GIT_CLONE_URL: - MY_STEPLIB_REPO_FORK_GIT_URL: BitriseCLIでshare-this-stepワークフローを実行します。 $ bitrise run share-this-step " }, 
{ "title" : "StepLibプルリクエストの問題の修正 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/すべてのbitriseユーザーとステップを共有する.html#steplibプルリクエストの問題の修正", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ すべてのBitriseユーザーとステップを共有する \/ 新しいステップを共有する \/ StepLibプルリクエストの問題の修正 ", 
"snippet" : "ステップバージョンをStepLibに送信したら、Bitriseチームがレビューするのを待ちます。変更を求める場合： プルリクエストを閉じます。 BitriseStepLibのフォークから共有ブランチを削除します。 ステップリポジトリの問題を修正します。 ステップリポジトリの修正を含むコミットに新しいバージョンタグを追加します。 を実行します 共有プロセス また。 問題を修正した後、プルリクエストをマージして、ステップを公開できるようになることを願っています。...", 
"body" : "ステップバージョンをStepLibに送信したら、Bitriseチームがレビューするのを待ちます。変更を求める場合： プルリクエストを閉じます。 BitriseStepLibのフォークから共有ブランチを削除します。 ステップリポジトリの問題を修正します。 ステップリポジトリの修正を含むコミットに新しいバージョンタグを追加します。 を実行します 共有プロセス また。 問題を修正した後、プルリクエストをマージして、ステップを公開できるようになることを願っています。 " }, 
{ "title" : "放棄されたステップ ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/すべてのbitriseユーザーとステップを共有する.html#放棄されたステップ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ すべてのBitriseユーザーとステップを共有する \/ 放棄されたステップ ", 
"snippet" : "あなたがステップメンテナである場合、誰かがあなたのステップに問題またはプルリクエストを提出した場合、あなたは合理的な時間枠内に到達可能であるはずです。ステップの重要な修正\/更新について何度か連絡を試み、数週間回答を拒否した場合、コレクション内のステップを非推奨、削除、または置き換える場合があります。放棄されたステップは、それを使用する人にとって脅威となる可能性があります。ステップを他の人と共有する場合は、このことに注意してください。 Bitrise StepLibにあるstep.ymlに含まれているリポジトリと課題追跡システムへの永続的なリンクがあるため、リポジトリと課題追跡システムを削除しな...", 
"body" : "あなたがステップメンテナである場合、誰かがあなたのステップに問題またはプルリクエストを提出した場合、あなたは合理的な時間枠内に到達可能であるはずです。ステップの重要な修正\/更新について何度か連絡を試み、数週間回答を拒否した場合、コレクション内のステップを非推奨、削除、または置き換える場合があります。放棄されたステップは、それを使用する人にとって脅威となる可能性があります。ステップを他の人と共有する場合は、このことに注意してください。 Bitrise StepLibにあるstep.ymlに含まれているリポジトリと課題追跡システムへの永続的なリンクがあるため、リポジトリと課題追跡システムを削除しないでください。それらが削除された場合、共有プロセス中にBitriseマネージドファイルホスティングサービスでも共有されるため、すでに共有されているステップバージョンは引き続き機能します。ステップの新しいバージョンがリリースされる可能性があり、Bitriseによって管理されます。 ステップを共有したが、それを維持することができなくなった、または維持する意思がなくなった場合は、このリポジトリにGitHubの問題を作成してください。 Bitrise StepLib " }, 
{ "title" : "ステップの問題の報告 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/すべてのbitriseユーザーとステップを共有する.html#ステップの問題の報告", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ すべてのBitriseユーザーとステップを共有する \/ ステップの問題の報告 ", 
"snippet" : "重大な（セキュリティまたは機能）問題があるステップのユーザーの場合は、ステップの問題追跡システムでチケットを作成してください。すべてのステップで、問題を報告するための好ましい方法を宣言します。 support_url 属性。 ステップのメンテナから長期間（数週間以上）応答がない場合は、このリポジトリにGitHubの問題を作成してください。 https:\/\/github.com\/bitrise-io\/bitrise-steplib 放棄されたステップのポリシーに従って、問題の解決を試みます。このコレクションに貢献するすべての人が、あなたが使用するためのステップを提供することによってあなたを助ける...", 
"body" : "重大な（セキュリティまたは機能）問題があるステップのユーザーの場合は、ステップの問題追跡システムでチケットを作成してください。すべてのステップで、問題を報告するための好ましい方法を宣言します。 support_url 属性。 ステップのメンテナから長期間（数週間以上）応答がない場合は、このリポジトリにGitHubの問題を作成してください。 https:\/\/github.com\/bitrise-io\/bitrise-steplib 放棄されたステップのポリシーに従って、問題の解決を試みます。このコレクションに貢献するすべての人が、あなたが使用するためのステップを提供することによってあなたを助けるためにそうすることを心に留めておいてください！ " }, 
{ "title" : "確認済みの手順 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/確認済みの手順.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 確認済みの手順 ", 
"snippet" : "検証済みステップは、所有者がBitriseユーザーに対して安全で、維持され、一貫性があり、高品質のパフォーマンスを保証するBitriseステップです。ステップを確認するには、確認済みバッジを申請する必要があります。...", 
"body" : "検証済みステップは、所有者がBitriseユーザーに対して安全で、維持され、一貫性があり、高品質のパフォーマンスを保証するBitriseステップです。ステップを確認するには、確認済みバッジを申請する必要があります。 " }, 
{ "title" : "検証済みの手順とは何ですか？ ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/確認済みの手順.html#検証済みの手順とは何ですか-", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 確認済みの手順 \/ 検証済みの手順とは何ですか？ ", 
"snippet" : "ステップには、特定のビルドタスクを実行するコードが含まれています。 Bitriseには300以上のステップがあります ステップライブラリ（StepLib） どのサードパーティ企業またはオープンソースチームが、サービス\/ツールに基づいてステップで強化できるか。これは、Bitriseがサービスの品質とセキュリティを確保するためにオーバーレイ制御を維持しながら、ステップへの更新をロールアウトするフルパワーを持っていることを意味します。 検証済みステップとは、サービスまたはツールの所有者またはオープンソースチームが、Bitriseユーザーに対して安全で維持された一貫性のある高品質のパフォーマンスを保証...", 
"body" : "ステップには、特定のビルドタスクを実行するコードが含まれています。 Bitriseには300以上のステップがあります ステップライブラリ（StepLib） どのサードパーティ企業またはオープンソースチームが、サービス\/ツールに基づいてステップで強化できるか。これは、Bitriseがサービスの品質とセキュリティを確保するためにオーバーレイ制御を維持しながら、ステップへの更新をロールアウトするフルパワーを持っていることを意味します。 検証済みステップとは、サービスまたはツールの所有者またはオープンソースチームが、Bitriseユーザーに対して安全で維持された一貫性のある高品質のパフォーマンスを保証することを意味します。私たちの公式のビットライズステップは私たちによって維持されていますが、私たちのコミュニティステップはコミュニティによって維持されています。ステップがGUIでどのタイプに該当するかを簡単に決定できます。 確認済みの手順には、青いバッジが付いています ビットライズ 。 公式のビットライズステップには、緑色のバッジが付いています。 コミュニティで作成されたステップにはバッジがありません。 このガイドでは、ステップをBitriseで検証する方法について説明します。 要件 会社所有のサービスおよびツールの場合：会社は、認証済みバッジを申請するためにステップで使用されるサービスまたはツールの所有者である必要があります。 オープンソースサービスまたはツールの場合：オープンソースまたはその他の非公式チームのメンバーである場合は、自分でこれに署名できること、およびチームに提出するステップに適用されることをチームの他のメンバーに確認してください。 。 あなたのステップは私たちに従わなければなりません サービスレベル契約 。 ステップには独自のステップアイコンが必要です。 確認済みステップになるには、ステップにワークフローレシピを含める必要があります。 弊社にご相談されることを強くお勧めします ステップ開発 ステップを作成する前のガイドライン。 " }, 
{ "title" : "ワークフローレシピとは何ですか？ ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/確認済みの手順.html#ワークフローレシピとは何ですか-", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 確認済みの手順 \/ 検証済みの手順とは何ですか？ \/ ワークフローレシピとは何ですか？ ", 
"snippet" : "ワークフローレシピは、Bitriseにステップを送信する人が、確認済みステップバッジを申請するときにまとめる必要があるテンプレートです。ステップを開発してワークフローレシピを含めないことを決定できますが、ステップを検証済みステップに変えるには、ワークフローレシピも送信する必要があります。 ワークフローレシピはに公開されています ビットライズ ここで、Bitriseコミュニティは、特定のセットアップで検証済みステップを使用する方法を学ぶことができます。 ご不明な点がございましたら、以下のパートナーシップチームにお問い合わせください。 Partners@bitrise.io 。...", 
"body" : "ワークフローレシピは、Bitriseにステップを送信する人が、確認済みステップバッジを申請するときにまとめる必要があるテンプレートです。ステップを開発してワークフローレシピを含めないことを決定できますが、ステップを検証済みステップに変えるには、ワークフローレシピも送信する必要があります。 ワークフローレシピはに公開されています ビットライズ ここで、Bitriseコミュニティは、特定のセットアップで検証済みステップを使用する方法を学ぶことができます。 ご不明な点がございましたら、以下のパートナーシップチームにお問い合わせください。 Partners@bitrise.io 。 " }, 
{ "title" : "確認済みのステップを宣伝する ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/確認済みの手順.html#確認済みのステップを宣伝する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 確認済みの手順 \/ 検証済みの手順とは何ですか？ \/ 確認済みのステップを宣伝する ", 
"snippet" : "検証済みステッププログラムの一環として、次の共同マーケティング活動の1つまたは複数に参加することを確約する必要があります。 アプリ内メッセージング。 専用の共同ブランドの電子メールキャンペーン、またはニュースレターの言及。 ブログ投稿コンテンツ。 ハウツー記事、ドキュメント、またはヘルプセンターページ。 ソーシャルメディア活動。 ウェビナーまたは仮想イベント。 ポッドキャスト。 イベント（パネル、炉辺談話、ビデオの声、またはスポンサーシップ）。 ケーススタディ\/ホワイトペーパー\/電子ブック\/（共有調査、紹介文、章の共同執筆、お互いのブログへの公開）。 YouTubeの公開チャンネルに投稿された...", 
"body" : "検証済みステッププログラムの一環として、次の共同マーケティング活動の1つまたは複数に参加することを確約する必要があります。 アプリ内メッセージング。 専用の共同ブランドの電子メールキャンペーン、またはニュースレターの言及。 ブログ投稿コンテンツ。 ハウツー記事、ドキュメント、またはヘルプセンターページ。 ソーシャルメディア活動。 ウェビナーまたは仮想イベント。 ポッドキャスト。 イベント（パネル、炉辺談話、ビデオの声、またはスポンサーシップ）。 ケーススタディ\/ホワイトペーパー\/電子ブック\/（共有調査、紹介文、章の共同執筆、お互いのブログへの公開）。 YouTubeの公開チャンネルに投稿されたビデオコンテンツ。 共同PRキャンペーン。 これらの共同マーケティングの機会により、製品のコンテンツ生成出力を増やし、市場開拓計画を拡大し、統合の採用を促進することができます。 Bitriseパートナーマネージャーに相談することができます（ Partners@bitrise.io ）どの共同マーケティング活動を実行できるかを確認し、マーケティング計画に基づいてどのレベルの関与を行いたいかを明確にします。単一の共同マーケティングイベントに関心を持つ人が多いため、参加は先着順で管理されます。 " }, 
{ "title" : "確認済みバッジの申請 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/確認済みの手順.html#確認済みバッジの申請", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 確認済みの手順 \/ 確認済みバッジの申請 ", 
"snippet" : "私たちに基づいてステップを作成します ステップ開発ガイドライン 。ステップのリポジトリはGitHub上にある必要があります。 私たちのステップを共有する bitrise-steplib 新しいプルリクエストチェックリストに記入します。 いつ CLAアシスタント プロンプトが表示されたら、Contributor LicenseAgreementに署名します。これが完了するまで、マージはPRでブロックされます。 記入してください パートナーシップフォーム ！ フォームを送信すると、パートナー管理チームから5営業日以内に連絡があり、残りのプロセスについて話し合います。 プロセスのいずれかの段階で、S...", 
"body" : "私たちに基づいてステップを作成します ステップ開発ガイドライン 。ステップのリポジトリはGitHub上にある必要があります。 私たちのステップを共有する bitrise-steplib 新しいプルリクエストチェックリストに記入します。 いつ CLAアシスタント プロンプトが表示されたら、Contributor LicenseAgreementに署名します。これが完了するまで、マージはPRでブロックされます。 記入してください パートナーシップフォーム ！ フォームを送信すると、パートナー管理チームから5営業日以内に連絡があり、残りのプロセスについて話し合います。 プロセスのいずれかの段階で、StepLibの別のステップですでにカバーされているステップ候補で何が起こるのか疑問に思った場合は、 ステップ複製についてはどうすればよいですか ？ " }, 
{ "title" : "検証済みステップの作成者向けのサービスレベル契約 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/確認済みの手順.html#検証済みステップの作成者向けのサービスレベル契約", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 確認済みの手順 \/ 検証済みステップの作成者向けのサービスレベル契約 ", 
"snippet" : "課題またはプルリクエスト（PR）を作成することにより、誰でもすでにStepLibの一部である検証済みステップに貢献できます。検証済みステップの作成者は、最初から最後まで貢献（たとえば、問題、PR、またはサードパーティのシステム変更などのメンテナンス）を管理する必要があります。 Bitriseは、検証済みステップ用に作成された未解決の問題とPRを監視し、それらの貢献が処理されない場合は検証済みステップの作成者に連絡します。検証済みステップの作成者が貢献者ライセンス契約およびこのSLAに記載されているように貢献を管理できない場合、Bitriseは検証済みバッジをステップから撤回します。これは、St...", 
"body" : "課題またはプルリクエスト（PR）を作成することにより、誰でもすでにStepLibの一部である検証済みステップに貢献できます。検証済みステップの作成者は、最初から最後まで貢献（たとえば、問題、PR、またはサードパーティのシステム変更などのメンテナンス）を管理する必要があります。 Bitriseは、検証済みステップ用に作成された未解決の問題とPRを監視し、それらの貢献が処理されない場合は検証済みステップの作成者に連絡します。検証済みステップの作成者が貢献者ライセンス契約およびこのSLAに記載されているように貢献を管理できない場合、Bitriseは検証済みバッジをステップから撤回します。これは、StepLibの検証済みステップが常に高品質であり、Bitriseユーザーの期待に応えるためです。 " }, 
{ "title" : "貢献の管理 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/確認済みの手順.html#貢献の管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 確認済みの手順 \/ 貢献の管理 ", 
"snippet" : "次のガイドラインは、検証済みステップの作成者が投稿を分類できるようにすることを目的としています。検証済みステップの作成者は、検証済みステップへの貢献に対して責任を負います。検証済みステップの作成者は、修正を実行するための推定時間をラベルに追加し、PRをマージすることにより、貢献を認めます。著者が投稿の種類を分類するために使用できるラベルは4つあります。 critical-bug ラベルは、現在の機能セットに異常な動作があることを意味します。これにより、ユーザーはステップを使用できなくなり、問題を修正するための回避策はありません。この重大なバグは、作成者が修正する必要があります。 bug ラベル...", 
"body" : "次のガイドラインは、検証済みステップの作成者が投稿を分類できるようにすることを目的としています。検証済みステップの作成者は、検証済みステップへの貢献に対して責任を負います。検証済みステップの作成者は、修正を実行するための推定時間をラベルに追加し、PRをマージすることにより、貢献を認めます。著者が投稿の種類を分類するために使用できるラベルは4つあります。 critical-bug ラベルは、現在の機能セットに異常な動作があることを意味します。これにより、ユーザーはステップを使用できなくなり、問題を修正するための回避策はありません。この重大なバグは、作成者が修正する必要があります。 bug ラベルは、現在の機能セットに異常な動作があることを意味します。これにより、ユーザーはステップを使用できなくなり、問題の回避策があります。このバグは作者が修正する必要があります。 feature-request ラベルは、新しい機能またはステップが要求されていることを意味します。検証済みステップの作成者は、機能を実装する価値があるかどうかを判断できます。 maintenance ラベルとは、ステップに新しい機能や潜在的なバグを追加しないように、ステップのソースコードを改善することを意味します。検証済みステップの作成者は、機能を実装する価値があるかどうかを判断できます。 rejected ラベルは、確認済みステップの作成者によって拒否された投稿は、最初の応答時間、つまり5営業日以内にクローズする必要があることを意味します。投稿を拒否する場合、検証済みステップの作成者は、最初の応答時間内に投稿者に説明を提供する必要があります。 accepted 貢献とは、指定された：重大-バグ、バグ、機能、メンテナンスが指定された解決時間内に修正\/マージされることを意味します。 最初の応答時間とは、検証済みステップの作成者が承認または拒否されたラベルを使用して投稿に応答する必要がある5日間のウィンドウがあることを意味します。 解決時間とは、検証済みステップの作成者がコントリビューション（発行またはPR）を完了する必要がある一定の営業日を意味します。 タイプ 最初の応答時間 解決時間 クリティカルバグ 5営業日 10営業日 バグ 5営業日 15営業日 機能リクエスト 5営業日 20営業日 メンテナンス 5営業日 20営業日 " }, 
{ "title" : "ステップの重複についてはどうすればよいですか？ ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/確認済みの手順.html#ステップの重複についてはどうすればよいですか-", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 確認済みの手順 \/ ステップの重複についてはどうすればよいですか？ ", 
"snippet" : "一般に、StepLibを合理化して、同じビルドタスクでのステップの重複を回避しようとします。ここでは、潜在的なステップの重複に関して、いくつかの質問と回答を見つけることができます。 ステップを送信して確認済みバッジを申請しようとしましたが、StepLibに同じビルドタスクの公式ビットライズステップがあることがわかりました。私は何をすべきか？ ステップを送信して、申請プロセスを実行します。アプリケーションが完了すると、公式のBitriseステップは廃止され、ユーザーは新しい確認済みステップを使用できるようになります。 ステップを送信して確認済みバッジを申請しようとしましたが、同じビルドタスクにコ...", 
"body" : "一般に、StepLibを合理化して、同じビルドタスクでのステップの重複を回避しようとします。ここでは、潜在的なステップの重複に関して、いくつかの質問と回答を見つけることができます。 ステップを送信して確認済みバッジを申請しようとしましたが、StepLibに同じビルドタスクの公式ビットライズステップがあることがわかりました。私は何をすべきか？ ステップを送信して、申請プロセスを実行します。アプリケーションが完了すると、公式のBitriseステップは廃止され、ユーザーは新しい確認済みステップを使用できるようになります。 ステップを送信して確認済みバッジを申請しようとしましたが、同じビルドタスクにコミュニティステップがあることがわかりました。私は何をすべきか？ ステップを送信して、申請プロセスを実行します。新しい確認済みステップとコミュニティステップは、どちらもStepLibで利用できます。 コミュニティステップを送信しようとしましたが、同じビルドタスクに検証済みステップがあることがわかりました。私は何をすべきか？ 検証済みステップがすでにStepLibで使用可能な場合、ステップの重複を避けるために、同じビルドタスクに対するコミュニティステップの送信を拒否します。コミュニティステップの開発者に、既存の検証済みステップの将来の更新に取り組むことを提案します。 " }, 
{ "title" : "独自のBitriseプロジェクトスキャナーの作成 ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/独自のbitriseプロジェクトスキャナーの作成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 独自のBitriseプロジェクトスキャナーの作成 ", 
"snippet" : "Bitriseプロジェクトスキャナーには、スキャン結果モデルが必要です。すべてのプラットフォームスキャナーは、可能なオプション、構成、および警告をこのモデルに書き込みます。これらは、指定されたオプションに必要な値を選択することにより、ステップ入力値に変換されます。 プロジェクトスキャナーは、特定のプロジェクトのタイプを識別し、基本的なBitrise構成を生成するツールです。サポートされているプロジェクトタイプごとに独自のスキャナーがあります。これらのスキャナーは個別のパッケージとして保存されます。 プロジェクトタイプのスキャナーは、少なくとも2つのワークフローを定義します。1つはテスト用（ p...", 
"body" : "Bitriseプロジェクトスキャナーには、スキャン結果モデルが必要です。すべてのプラットフォームスキャナーは、可能なオプション、構成、および警告をこのモデルに書き込みます。これらは、指定されたオプションに必要な値を選択することにより、ステップ入力値に変換されます。 プロジェクトスキャナーは、特定のプロジェクトのタイプを識別し、基本的なBitrise構成を生成するツールです。サポートされているプロジェクトタイプごとに独自のスキャナーがあります。これらのスキャナーは個別のパッケージとして保存されます。 プロジェクトタイプのスキャナーは、少なくとも2つのワークフローを定義します。1つはテスト用（ primary ）と建物用（ deploy ）。 正常に実行するための最小限のステップが含まれています 。 ステップの作成とテスト ビルドステップとテストステップには、特定の要件があります。 ビルドステップでは、アプリをデプロイできるようにビルドし、出力ファイルを指す環境変数を出力する必要があります。たとえば、iOSアプリをビルドするためのビルドステップでは、.ipaファイルを出力する必要があります（たとえば、 .xcodearchive ）およびこの.ipaファイルへのパス。 テストステップは、bitrise.ioのビルドページで表示できるように、テスト結果を出力する必要があります。 ウェブサイトに新しいプロジェクトを追加したり、自分のマシンでプロジェクトを初期化したりする場合、 bitrise-init ツールはすべてのスキャナーを反復処理し、各スキャナーのスキャナーインターフェイスメソッドを呼び出して、それらの出力を収集します。これらの出力に基づいて、基本構成が生成されます。 可能なワークフローは、スキャン結果モデルで説明されています。モデルの構成は次のとおりです。 オプション 構成 警告 YAMLでのモデルの基本構造は次のとおりです。 options:\n DETECTED_PLATFORM_1: OptionModel\n DETECTED_PLATFORM_2: OptionModel\n ...\n\nconfigs:\n DETECTED_PLATFORM_1:\n CONFIG_NAME_1: ConfigModel\n CONFIG_NAME_2: ConfigModel\n ...\n DETECTED_PLATFORM_2:\n CONFIG_NAME_1: ConfigModel\n CONFIG_NAME_2: ConfigModel\n ...\n ...\n\nwarnings:\n DETECTED_PLATFORM_1:\n - \"warning message 1\"\n - \"warning message 2\"\n ...\n DETECTED_PLATFORM_2:\n - \"warning message 1\"\n - \"warning message 2\"\n ... すべてのプラットフォームスキャナーは、可能なオプション、構成、および警告をこのモデルに書き込みます。これらは、指定されたオプションに必要な値を選択することにより、ステップ入力値に変換されます。 すべてのオプションチェーンの最後のオプションが構成を選択します。 警告は、特定のプロジェクト設定に関する問題を表示します。 " }, 
{ "title" : "オプション ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/独自のbitriseプロジェクトスキャナーの作成.html#オプション", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 独自のBitriseプロジェクトスキャナーの作成 \/ オプション ", 
"snippet" : "Options 質問とその質問に対する可能な回答を表します。例えば： 質問：iOSプロジェクトファイルへのパスは何ですか？ 考えられる回答：確認する可能性のあるパスのリスト これらの質問と回答は、ステップ入力に変換されます。スキャナーは入力値を決定するか、ユーザーが値を選択または入力できるようにする必要があります。 たとえば、 Xcode Archive & Export for iOS ステップには、という入力があります export-method 。これにより、エクスポートする.ipaのタイプがステップに通知されます。ソースコードに基づいて値を決定することはできないため、スキャナーはすべて...", 
"body" : "Options 質問とその質問に対する可能な回答を表します。例えば： 質問：iOSプロジェクトファイルへのパスは何ですか？ 考えられる回答：確認する可能性のあるパスのリスト これらの質問と回答は、ステップ入力に変換されます。スキャナーは入力値を決定するか、ユーザーが値を選択または入力できるようにする必要があります。 たとえば、 Xcode Archive & Export for iOS ステップには、という入力があります export-method 。これにより、エクスポートする.ipaのタイプがステップに通知されます。ソースコードに基づいて値を決定することはできないため、スキャナーはすべての可能な値を収集し、リストの形式でユーザーに提示して選択します。 オプションを選択すると、チェーンを開始できます。その後、さまざまなオプションが表示される可能性があります。たとえば、テストターゲットが関連付けられているXcodeスキームを選択すると、さまざまな「質問」が発生します。同様に、特定のオプションを選択すると、後で別のワークフローが生成される可能性があります。 " }, 
{ "title" : "オプションモデル ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/独自のbitriseプロジェクトスキャナーの作成.html#オプションモデル", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 独自のBitriseプロジェクトスキャナーの作成 \/ オプション \/ オプションモデル ", 
"snippet" : "The OptionModel 入力オプションを表します。 Goでは次のようになります。 \/\/ OptionModel ... type OptionModel struct { Title string EnvKey string ChildOptionMap map[string]*OptionModel Config string } Title ：入力の人間が読める名前。 EnvKey ：ステップモデルの入力のキーを表します。 ChildOptionMap ：ユーザーがオプションに特定の値を選択した場合の後続のオプションのマップ。 たとえば、の値を選択するシナリオを見てみましょう。 S...", 
"body" : "The OptionModel 入力オプションを表します。 Goでは次のようになります。 \/\/ OptionModel ...\ntype OptionModel struct {\n Title string\n EnvKey string\n\n ChildOptionMap map[string]*OptionModel\n Config string\n} Title ：入力の人間が読める名前。 EnvKey ：ステップモデルの入力のキーを表します。 ChildOptionMap ：ユーザーがオプションに特定の値を選択した場合の後続のオプションのマップ。 たとえば、の値を選択するシナリオを見てみましょう。 Scheme 入力。あなたは value_map の中に options 。可能な値は次のとおりです。 SchemeWithTest SchemeWithoutTest 選択することにより SchemeWithTest 、次のオプションは、テストの実行に使用されるシミュレーターに関連します。 選択することにより SchemeWithoutTest 、次のオプションは、.ipaファイルのエクスポート方法に関するものです。 {\n \"title\": \"Scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": {\n \"SchemeWithTest\": {\n \"title\": \"Simulator name\",\n \"env_key\": \"simulator_name\",\n ...\n },\n \"SchemeWithoutTest\": {\n \"title\": \"Export method\",\n \"env_key\": \"export_method\",\n ...\n }\n }\n} すべてのオプションチェーンには最初のオプションがあります：これは呼ばれます head 。オプションの可能な値は、オプションチェーンを分岐させることができます。 すべてのオプションブランチの最後 options 持っている必要があります config プロパティセット。 config 生成されたBitrise構成のIDを保持します。 オプションチェーンの最後 options 持つことはできません value_map 。 {\n \"title\": \"Scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": {\n \"SchemeWithTest\": {\n \"title\": \"Simulator name\",\n \"env_key\": \"simulator_name\",\n \"value_map\": {\n \"-\": {\n \"config\": \"bitrise_config_with_test\",\n }\n }\n },\n \"SchemeWithoutTest\": {\n \"title\": \"Export method\",\n \"env_key\": \"export_method\",\n \"value_map\": {\n \"development\": {\n \"config\": \"bitrise_config_without_test\",\n },\n \"app-store\": {\n \"config\": \"bitrise_config_without_test\",\n },\n \"ad-hoc\": {\n \"config\": \"bitrise_config_without_test\",\n }\n }\n }\n }\n}\n " }, 
{ "title" : "スキャナー ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/独自のbitriseプロジェクトスキャナーの作成.html#スキャナー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 独自のBitriseプロジェクトスキャナーの作成 \/ スキャナー ", 
"snippet" : "スキャナーは可能なものを生成します options チェーンと可能なワークフロー options プロジェクトタイプごと。 NS ActiveScanner 変数は、各スキャナーの実装を保持します。すべての特定のスキャナーは、 ScannerInterface 。 \/\/ ScannerInterface ... type ScannerInterface interface { Name() string DetectPlatform(string) (bool, error) Options() (models.OptionModel, models.Warnings, error) Con...", 
"body" : "スキャナーは可能なものを生成します options チェーンと可能なワークフロー options プロジェクトタイプごと。 NS ActiveScanner 変数は、各スキャナーの実装を保持します。すべての特定のスキャナーは、 ScannerInterface 。 \/\/ ScannerInterface ...\ntype ScannerInterface interface {\n Name() string\n DetectPlatform(string) (bool, error)\n\n Options() (models.OptionModel, models.Warnings, error)\n Configs() (models.BitriseConfigMap, error)\n\n DefaultOptions() models.OptionModel\n DefaultConfigs() (models.BitriseConfigMap, error)\n\n ExcludedScannerNames() []string\n} Name() string ：このメソッドは、スキャナー出力（警告、オプション、および構成）のログ記録と保存に使用されます。スキャナー出力はに保存されます map[SCANNER_NAME]OUTPUT 。たとえば、 options iOSプロジェクトの場合はに保存されます optionsMap[ios]options 。 DetectPlatform(string) (bool, error) ：このメソッドは、指定された検索ディレクトリにプロジェクトタイプが含まれているかどうかを判断するために使用されます。 Options() (models.OptionModel, models.Warnings, error) ：このメソッドは、プロジェクトのオプションブランチを生成するために使用されます。各ブランチは、最終的なビットライズ構成モデルを構築するための完全で有効なオプションセットを定義する必要があります。すべてのオプションブランチの最後 Options 構成IDを保存する必要があります。これには、選択したオプションが入力されます。 Configs() (models.BitriseConfigMap, error) ：このメソッドは、可能な構成を生成するために使用されます。 BitriseConfigMapの各要素は、ユーザーが選択したオプション値で満たされるビットライズ構成テンプレートです。 DefaultOptions() models.OptionModel and DefaultConfigs() (models.BitriseConfigMap, error) ：これらのメソッドは、特定のプロジェクトをスキャンせずにオプションと構成を生成するために使用されます。この場合、必要なすべてのステップ入力値はユーザーによって提供されます。このようにして、スキャナーに障害が発生した場合でも、ユーザーは開始するオプションがあります。 " }, 
{ "title" : "スキャナーのテスト ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/独自のbitriseプロジェクトスキャナーの作成.html#スキャナーのテスト", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 独自のBitriseプロジェクトスキャナーの作成 \/ スキャナー \/ スキャナーのテスト ", 
"snippet" : "スキャナーをテストするには、単体テストと統合テストの両方が必要です。 ユニットテストは、Goの標準テストライブラリを使用して記述されています。 統合テストでは、プロジェクトタイプのスキャナーがプロジェクトタイプのインスタンスに必要なビットライズ構成を生成していることを検証しています。これを行うには、新しいスキャナーを使用して特定のサンプルプロジェクトをスキャンし、生成されたスキャン結果を統合テストに合うように変更します。 変更の理由は、スキャナーが生成された構成にステップを追加しているが、ステップのバージョンは時々更新されるためです。ステップバージョンの定義は、次の場所にあります。 steps...", 
"body" : "スキャナーをテストするには、単体テストと統合テストの両方が必要です。 ユニットテストは、Goの標準テストライブラリを使用して記述されています。 統合テストでは、プロジェクトタイプのスキャナーがプロジェクトタイプのインスタンスに必要なビットライズ構成を生成していることを検証しています。これを行うには、新しいスキャナーを使用して特定のサンプルプロジェクトをスキャンし、生成されたスキャン結果を統合テストに合うように変更します。 変更の理由は、スキャナーが生成された構成にステップを追加しているが、ステップのバージョンは時々更新されるためです。ステップバージョンの定義は、次の場所にあります。 steps\/const.go 。 だから私たちは bitrise-init --ci config サンプルプロジェクトのルートディレクトリ、および生成された scan_result.yml ステップバージョンを置き換えるファイル %s 使用します fmt.Sprintf 最新の定義済みステップバージョンを構成に挿入します。 統合テストでは、 scan_result.yml 以前に生成された参照を使用してスキャナーによって生成されたファイル scan_result コンテンツ。 " }, 
{ "title" : "独自のスキャナーを提出する ", 
"url" : "手順とワークフロー/独自のビットライズステップの開発/独自のbitriseプロジェクトスキャナーの作成.html#独自のスキャナーを提出する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 独自のビットライズステップの開発 \/ 独自のBitriseプロジェクトスキャナーの作成 \/ スキャナー \/ 独自のスキャナーを提出する ", 
"snippet" : "独自のスキャナーをBitriseに送信できます。承認されたら、スキャナーを確認してbitrise-initツールに統合します。 新しいスキャナーの開発パスは、独自のサンプルプロジェクトで始まり、プロジェクトタイプの既存のステップを更新することで終わります。やってみよう！ プロジェクトタイプの典型的なインスタンスを示すオープンソースのサンプルアプリを検索または作成します。 以下を含める必要があります。 readmeファイル（このプロジェクトの更新、ビルド、およびテストに必要なツールバージョンを含む）。 a bitrise.yml スキャナーによって生成されたファイル。 既存のステップまたはカスタ...", 
"body" : "独自のスキャナーをBitriseに送信できます。承認されたら、スキャナーを確認してbitrise-initツールに統合します。 新しいスキャナーの開発パスは、独自のサンプルプロジェクトで始まり、プロジェクトタイプの既存のステップを更新することで終わります。やってみよう！ プロジェクトタイプの典型的なインスタンスを示すオープンソースのサンプルアプリを検索または作成します。 以下を含める必要があります。 readmeファイル（このプロジェクトの更新、ビルド、およびテストに必要なツールバージョンを含む）。 a bitrise.yml スキャナーによって生成されたファイル。 既存のステップまたはカスタムスクリプトを使用してサンプルアプリをビルドおよびテストします。 新しいプロジェクトタイプに必要な不足しているステップを作成します。 これらのステップのPRは、スキャナーを作成した後、スキャナーのPRをリンクする必要があります。 プロジェクトタイプのスキャナーを作成します。 必要な単体テストと統合テストを実行します。 bitrise-initプロジェクトへのスキャナープルリクエストを開きます。 そうすべき： 新しいプロジェクトタイプのサンプルアプリをリンクします。 テストと構築のための新しいプロジェクトタイプのガイドをリンクします。 新しいプロジェクトタイプのアイコンを含めます。そうでない場合は、アイコンを作成します。 新しいプロジェクトタイプを構築およびテストするために必要なツールをリストして、デフォルトのスタックを推奨します。 必要に応じて、既存のステップを新しいプロジェクトタイプで更新します。 これらのステップのPRは、スキャナーのPRをリンクする必要があります。 " }, 
{ "title" : "ワークフロー ", 
"url" : "手順とワークフロー/ワークフロー.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー ", 
"snippet" : "Bitriseワークフローはステップのコレクションです。アプリのビルドが実行されているとき、それぞれ ステップ ワークフローで定義された順序で実行されます。 Bitriseワークフローはステップのコレクションです。アプリのビルドが実行されているとき、それぞれ ステップ ワークフローで定義された順序で実行されます。ワークフローは、次の2つの方法で作成、定義、および変更できます。 でグラフィカルワークフローエディタを使用する bitrise.io 。 直接編集 bitrise.yml プロジェクトのファイル。 最終的に、両方の方法で bitrise.yml ファイル- ワークフローエディター 単に...", 
"body" : "Bitriseワークフローはステップのコレクションです。アプリのビルドが実行されているとき、それぞれ ステップ ワークフローで定義された順序で実行されます。 Bitriseワークフローはステップのコレクションです。アプリのビルドが実行されているとき、それぞれ ステップ ワークフローで定義された順序で実行されます。ワークフローは、次の2つの方法で作成、定義、および変更できます。 でグラフィカルワークフローエディタを使用する bitrise.io 。 直接編集 bitrise.yml プロジェクトのファイル。 最終的に、両方の方法で bitrise.yml ファイル- ワークフローエディター 単にそうするためのより友好的な方法です！ デフォルトでは、単一のビルドは単一のワークフローです。ただし、ワークフローをチェーンして連続して実行したり、複数のワークフローをトリガーして同時に実行したりすることもできます。 Workflows can also be arranged into Pipelines . A Pipeline consists of multiple Stages and each Stage consists of one or more Workflows which run in parallel. ビルド中にVPNに接続する ビルドアーティファクトの管理 " }, 
{ "title" : "デフォルトのワークフロー ", 
"url" : "手順とワークフロー/ワークフロー/デフォルトのワークフロー.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ デフォルトのワークフロー ", 
"snippet" : "に新しいアプリを追加するとき bitrise.io 、アプリに応じて、1つまたは2つのワークフローが自動的に作成されます。これらは 主要な そしてその 配備 ワークフロー。 に新しいアプリを追加するとき bitrise.io 、アプリに応じて、1つまたは2つのワークフローが自動的に作成されます。これらは 主要な そしてその 配備 ワークフロー。 トリガーは、特定のコードイベントが発生したときに、他のワークフロー（デプロイを含む）が自動的にトリガーされるように構成できます。 ワークフロー ビルド中にVPNに接続する ビルドアーティファクトの管理...", 
"body" : "に新しいアプリを追加するとき bitrise.io 、アプリに応じて、1つまたは2つのワークフローが自動的に作成されます。これらは 主要な そしてその 配備 ワークフロー。 に新しいアプリを追加するとき bitrise.io 、アプリに応じて、1つまたは2つのワークフローが自動的に作成されます。これらは 主要な そしてその 配備 ワークフロー。 トリガーは、特定のコードイベントが発生したときに、他のワークフロー（デプロイを含む）が自動的にトリガーされるように構成できます。 ワークフロー ビルド中にVPNに接続する ビルドアーティファクトの管理 " }, 
{ "title" : "主要なワークフロー ", 
"url" : "手順とワークフロー/ワークフロー/デフォルトのワークフロー.html#主要なワークフロー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ デフォルトのワークフロー \/ 主要なワークフロー ", 
"snippet" : "NS 主要な 新しいアプリを追加すると、ワークフローが自動的に作成されます。アプリを追加するプロセスが終了すると、Bitriseはアプリの最初のビルドを自動的にトリガーします。このビルドは 主要な ワークフロー。 NS 主要な ワークフローは、作成するすべてのアプリで同じではありません。プロジェクトの種類に応じて異なるステップが含まれています。たとえば、Androidプロジェクトの 主要な ワークフローには、 不足しているAndroidSDKコンポーネントをインストールする 、 NS Android Lint そしてその Androidユニットテスト ステップ。しかし、全体として、 主要な は...", 
"body" : "NS 主要な 新しいアプリを追加すると、ワークフローが自動的に作成されます。アプリを追加するプロセスが終了すると、Bitriseはアプリの最初のビルドを自動的にトリガーします。このビルドは 主要な ワークフロー。 NS 主要な ワークフローは、作成するすべてのアプリで同じではありません。プロジェクトの種類に応じて異なるステップが含まれています。たとえば、Androidプロジェクトの 主要な ワークフローには、 不足しているAndroidSDKコンポーネントをインストールする 、 NS Android Lint そしてその Androidユニットテスト ステップ。しかし、全体として、 主要な は、常に次のアクションを実行する基本的なワークフローです。 SSHキーがアプリに追加されている場合は、SSHキーをアクティブにします。このステップでは、それをファイルに保存してから、ユーザーのssh-agentにロードします。 ssh-add 指図。デフォルトでは、SSHキーが追加されていない場合、ステップは実行されません。 プロジェクトのGitリポジトリのクローンを作成します Gitクローンリポジトリ ステップ。 を実行します Bitrise.ioキャッシュ：プル と Bitrise.ioキャッシュ：プッシュ ステップ。 ビルドアーティファクトを Bitrise.ioにデプロイします ステップ。 " }, 
{ "title" : "デプロイワークフロー ", 
"url" : "手順とワークフロー/ワークフロー/デフォルトのワークフロー.html#デプロイワークフロー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ デフォルトのワークフロー \/ デプロイワークフロー ", 
"snippet" : "NS 配備 アプリでテストを構成している場合、新しいアプリを追加するとワークフローが自動的に作成されます。これは、いくつかの点でプライマリワークフローに似ています。 基本的な手順は同じです。 その具体的な手順は、プロジェクトの種類によって異なります。 NS 配備 ただし、ワークフローにはプロジェクトをビルドするステップも含まれており、ビルドが成功すると、アプリのインストールまたはオンラインでのデプロイに必要なアーティファクトが生成されます。たとえば、Androidプロジェクトの 配備 ワークフローには、 Androidビルド Gradleを使用してプロジェクトを構築するステップ、および And...", 
"body" : "NS 配備 アプリでテストを構成している場合、新しいアプリを追加するとワークフローが自動的に作成されます。これは、いくつかの点でプライマリワークフローに似ています。 基本的な手順は同じです。 その具体的な手順は、プロジェクトの種類によって異なります。 NS 配備 ただし、ワークフローにはプロジェクトをビルドするステップも含まれており、ビルドが成功すると、アプリのインストールまたはオンラインでのデプロイに必要なアーティファクトが生成されます。たとえば、Androidプロジェクトの 配備 ワークフローには、 Androidビルド Gradleを使用してプロジェクトを構築するステップ、および Androidサイン Google Playにデプロイしたり、テストデバイスにインストールしたりできる署名付きAPKを作成するステップ。 " }, 
{ "title" : "ワークフローの作成 ", 
"url" : "手順とワークフロー/ワークフロー/ワークフローの作成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ ワークフローの作成 ", 
"snippet" : "既存のワークフローに基づいて新しいBitriseワークフローを作成することも、空のワークフローを作成して自分でステップを追加することもできます。 自分で作成するのはとても簡単です ワークフロー ワークフローエディタを使用します。既存のワークフローに基づいて新しいワークフローを作成することも、空のワークフローを作成して自分でステップを追加することもできます。 たとえば、に基づいてワークフローを作成する場合 主要な 1つは、とまったく同じステップと入力値で作成されることを意味します。 主要な ワークフロー。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 クリ...", 
"body" : "既存のワークフローに基づいて新しいBitriseワークフローを作成することも、空のワークフローを作成して自分でステップを追加することもできます。 自分で作成するのはとても簡単です ワークフロー ワークフローエディタを使用します。既存のワークフローに基づいて新しいワークフローを作成することも、空のワークフローを作成して自分でステップを追加することもできます。 たとえば、に基づいてワークフローを作成する場合 主要な 1つは、とまったく同じステップと入力値で作成されることを意味します。 主要な ワークフロー。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 クリック +ワークフロー 。 ワークフローに名前を付けます。 長いタイトルは複数行に分割され、タイトル全体を読みやすくするため、名前は好きなだけ長くすることができます。 新しいワークフローの基礎として使用するワークフローを選択します。 または、 空のワークフロー 空のワークフローを作成するオプション。 必要なステップをワークフローに追加します。 クリック + その位置にステップを挿入するには、2つのステップの間に記号を付けます。ステップをクリックし、小さなゴミ箱の記号をクリックして、不要なステップを削除します。 クリック 保存する 右上隅にあります。 " }, 
{ "title" : "ワークフローの管理 ", 
"url" : "手順とワークフロー/ワークフロー/ワークフローの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ ワークフローの管理 ", 
"snippet" : "複数のワークフローをチェーンしたり、チェーン内のワークフローの順序を並べ替えたり、Bitriseワークフローエディターでいつでもワークフローの名前を変更したりできます。 Bitriseワークフローエディターでは、複数のワークフローをチェーンしたり、チェーン内のワークフローの順序を並べ替えたり、ワークフローの名前をいつでも変更したりできます。 Offline Workflow Editor The Workflow Editor is available both online and offline: You can use it online on bitrise.io. You can u...", 
"body" : "複数のワークフローをチェーンしたり、チェーン内のワークフローの順序を並べ替えたり、Bitriseワークフローエディターでいつでもワークフローの名前を変更したりできます。 Bitriseワークフローエディターでは、複数のワークフローをチェーンしたり、チェーン内のワークフローの順序を並べ替えたり、ワークフローの名前をいつでも変更したりできます。 Offline Workflow Editor The Workflow Editor is available both online and offline: You can use it online on bitrise.io. You can use the offline Workflow Editor . " }, 
{ "title" : "ワークフローを連鎖させる ", 
"url" : "手順とワークフロー/ワークフロー/ワークフローの管理.html#ワークフローを連鎖させる", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ ワークフローの管理 \/ ワークフローを連鎖させる ", 
"snippet" : "複数のワークフローを設定して、連続して実行することができます。これらのワークフローの順序を並べ替えたり、新しいワークフローをチェーンに追加したり、既存のワークフローをチェーンからいつでも削除したりできます。 Bitrise開始ビルドステップ このガイドで説明されているようにワークフローをチェーン化した場合でも、すべてのワークフローは同じ仮想マシンで実行されることに注意してください。ただし、 Bitrise Start Build ステップ、トリガーされたワークフローのそれぞれは、別々の仮想マシンで実行されます。 単一のトリガーで並列ビルドを開始する。 でアプリを開きます ビットライズ 。 クリ...", 
"body" : "複数のワークフローを設定して、連続して実行することができます。これらのワークフローの順序を並べ替えたり、新しいワークフローをチェーンに追加したり、既存のワークフローをチェーンからいつでも削除したりできます。 Bitrise開始ビルドステップ このガイドで説明されているようにワークフローをチェーン化した場合でも、すべてのワークフローは同じ仮想マシンで実行されることに注意してください。ただし、 Bitrise Start Build ステップ、トリガーされたワークフローのそれぞれは、別々の仮想マシンで実行されます。 単一のトリガーで並列ビルドを開始する。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 Click the ellipsis (...) button to the right of the name of the Workflow. クリック 前にワークフローを追加する 現在選択されているワークフローの前にワークフローをチェーンするか、をクリックします 後にワークフローを追加 現在選択されているワークフローの後にワークフローをチェーンします。 クリック 保存する 右上隅にあります。 Chaining Workflows in YAML In this example, we're chaining together three Workflows: test , deploy , and ci , using the before_run and after_run parameters. workflows:\n test:\n envs:\n - IS_TEST: \"true\"\n steps:\n # test Steps to run\n\n deploy:\n before_run:\n - test\n steps:\n # steps to deploy\n\n ci:\n before_run:\n - test\n after_run:\n - deploy\n\n ユーティリティ ワークフローを直接設定する方法の詳細については、 bitrise.yml ファイル、チェック ワークフローリファレンス. " }, 
{ "title" : "連鎖ワークフローの再配置 ", 
"url" : "手順とワークフロー/ワークフロー/ワークフローの管理.html#連鎖ワークフローの再配置", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ ワークフローの管理 \/ 連鎖ワークフローの再配置 ", 
"snippet" : "チェーンができたら、ドラッグアンドドロップメニューでワークフローの順序を簡単に並べ替えることができます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 Click the ellipsis (...) button to the right of the name of the Workflow. クリック 再配置 チェーンのワークフローを再配置できるドラッグアンドドロップメニューを表示します。 クリック 保存する 右上隅にあります。...", 
"body" : "チェーンができたら、ドラッグアンドドロップメニューでワークフローの順序を簡単に並べ替えることができます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 Click the ellipsis (...) button to the right of the name of the Workflow. クリック 再配置 チェーンのワークフローを再配置できるドラッグアンドドロップメニューを表示します。 クリック 保存する 右上隅にあります。 " }, 
{ "title" : "ワークフローの名前変更 ", 
"url" : "手順とワークフロー/ワークフロー/ワークフローの管理.html#ワークフローの名前変更", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ ワークフローの管理 \/ ワークフローの名前変更 ", 
"snippet" : "必要に応じていつでもワークフローの名前を変更できます。すばやく簡単です。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 クリック 名前を変更 ワークフローの名前の横。 新しい名前を入力し、チェックマークをクリックして新しい名前を保存します。 クリック 保存する 右上隅にあります。...", 
"body" : "必要に応じていつでもワークフローの名前を変更できます。すばやく簡単です。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 クリック 名前を変更 ワークフローの名前の横。 新しい名前を入力し、チェックマークをクリックして新しい名前を保存します。 クリック 保存する 右上隅にあります。 " }, 
{ "title" : "ユーティリティ ワークフロー ", 
"url" : "手順とワークフロー/ワークフロー/ワークフローの管理.html#ユーティリティ-ワークフロー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ ワークフローの管理 \/ ユーティリティ ワークフロー ", 
"snippet" : "Bitrise は、ユーティリティワークフローと呼ばれる特別なタイプのワークフローをサポートしています。ユーティリティ ワークフローの ID は常にアンダースコア文字で始まります。たとえば、 _setup .これらは通常、いくつかの異なるワークフローの開始時または終了時に必要なタスクを実行するために使用されます。アプリ。 ユーティリティ ワークフローを作成できます まったく同じように 通常のものを作成するとき。ユーティリティ ワークフローであることを示すには、名前の前にアンダースコアを付けるだけです。 Utility Workflows cannot run alone ユーティリティ ワーク...", 
"body" : "Bitrise は、ユーティリティワークフローと呼ばれる特別なタイプのワークフローをサポートしています。ユーティリティ ワークフローの ID は常にアンダースコア文字で始まります。たとえば、 _setup .これらは通常、いくつかの異なるワークフローの開始時または終了時に必要なタスクを実行するために使用されます。アプリ。 ユーティリティ ワークフローを作成できます まったく同じように 通常のものを作成するとき。ユーティリティ ワークフローであることを示すには、名前の前にアンダースコアを付けるだけです。 Utility Workflows cannot run alone ユーティリティ ワークフローは、スタンドアロン ワークフローとして実行できません。ワークフローの前または後に、通常のワークフローと一緒にチェーンする必要があります。 ワークフローを連鎖させる. Utility Workflow in YAML In this example, we have two utility Workflows, called _setup and _send-notifications . They are chained together with two Workflows called test and ci using the before_run and after_run parameters. workflows:\n _send-notifications:\n steps:\n # send notifications\n\n _setup:\n steps:\n # setup Steps to run\n\n test:\n before_run:\n - _setup\n envs:\n - IS_TEST: \"true\"\n steps:\n # test Steps to run\n\n ci:\n before_run:\n - test\n after_run:\n - _send-notifications ユーティリティ ワークフローを直接設定する方法の詳細については、 bitrise.yml ファイル、チェック ワークフローリファレンス. " }, 
{ "title" : "あるアプリから別のアプリへのワークフローのコピー ", 
"url" : "手順とワークフロー/ワークフロー/あるアプリから別のアプリへのワークフローのコピー.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ ワークフロー \/ あるアプリから別のアプリへのワークフローのコピー ", 
"snippet" : "既存のBitriseワークフローを任意の場所からコピーできます bitrise.yml ローカルファイルを含むファイル。 アプリがたくさんある場合、特に実行するワークフローにほとんど違いがない場合は、アプリごとにワークフローを個別に設定することに時間を費やしたくない場合があります。その場合、最も簡単な方法は、既存のワークフローをコピーすることです。 YAMLモードのみ ワークフローを別のアプリにコピーできるのは、YAMLモードの場合のみです。 既存のワークフローに基づいて新しいワークフローを作成できます ただし、同じアプリの場合のみです。 ワークフローはどこからでもコピーできます bitris...", 
"body" : "既存のBitriseワークフローを任意の場所からコピーできます bitrise.yml ローカルファイルを含むファイル。 アプリがたくさんある場合、特に実行するワークフローにほとんど違いがない場合は、アプリごとにワークフローを個別に設定することに時間を費やしたくない場合があります。その場合、最も簡単な方法は、既存のワークフローをコピーすることです。 YAMLモードのみ ワークフローを別のアプリにコピーできるのは、YAMLモードの場合のみです。 既存のワークフローに基づいて新しいワークフローを作成できます ただし、同じアプリの場合のみです。 ワークフローはどこからでもコピーできます bitrise.yml ローカルファイルを含むファイル。当社のWebサイトで既存のワークフローをあるBitriseアプリから別のアプリにコピーするには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します bitrise.yml タブ。 必要なワークフローを選択してコピーします。 コピー先のアプリを開きます。 に移動します ワークフロー タブ、次に bitrise.yml タブ。 下にワークフローを貼り付けます workflows 財産。 " }, 
{ "title" : "Androidアプリのワークフローレシピ ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ ", 
"snippet" : "iOSアプリ専用のワークフローレシピ。これらの一部はクロスプラットフォームアプリのiOSバージョンに使用できますが、その他はネイティブiOSアプリ専用です。 ワークフローレシピは、一般的なワークフロータスク用の既製のソリューションを提供します。 ここでは、iOSアプリ専用のワークフローレシピを見つけることができます。これらの一部は、クロスプラットフォームアプリのiOSバージョンにも使用できますが、ネイティブiOSアプリ専用のものもあります。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ ア...", 
"body" : "iOSアプリ専用のワークフローレシピ。これらの一部はクロスプラットフォームアプリのiOSバージョンに使用できますが、その他はネイティブiOSアプリ専用です。 ワークフローレシピは、一般的なワークフロータスク用の既製のソリューションを提供します。 ここでは、iOSアプリ専用のワークフローレシピを見つけることができます。これらの一部は、クロスプラットフォームアプリのiOSバージョンにも使用できますが、ネイティブiOSアプリ専用のものもあります。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "(Android) Visual Studio App Center にデプロイする ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--visual-studio-app-center-にデプロイする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Visual Studio App Center にデプロイする ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--visual-studio-app-center-にデプロイする.html#説明-78663", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Visual Studio App Center にデプロイする \/ 説明 ", 
"snippet" : "Visual Studio App Center を介してアプリをビルドし、テスターに配布します。...", 
"body" : "Visual Studio App Center を介してアプリをビルドし、テスターに配布します。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--visual-studio-app-center-にデプロイする.html#前提条件-78663", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Visual Studio App Center にデプロイする \/ 前提条件 ", 
"snippet" : "既存の Visual Studio アプリ センター アプリが登録されているプロジェクト。 API トークンを ひみつ あなたの Bitrise アプリに APPCENTER_API_TOKEN . リリース ビルドをデプロイする場合は、Bitrise でコード署名を設定して、リリース キーで APK をビルドおよび署名することを忘れないでください。...", 
"body" : "既存の Visual Studio アプリ センター アプリが登録されているプロジェクト。 API トークンを ひみつ あなたの Bitrise アプリに APPCENTER_API_TOKEN . リリース ビルドをデプロイする場合は、Bitrise でコード署名を設定して、リリース キーで APK をビルドおよび署名することを忘れないでください。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--visual-studio-app-center-にデプロイする.html#指示-78663", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Visual Studio App Center にデプロイする \/ 指示 ", 
"snippet" : "追加 Android ビルド 次の入力をステップ実行して設定します。 ビルドタイプ : これを APK . 変異体 : リリース、デバッグ、またはカスタム バリアントのいずれかを使用します (ある場合)。 リリース バリアントをビルドする場合は、 Android サイン ステップ . 署名されていないデバッグ バリアントをデプロイする予定がある場合は、これをスキップできます。 追加 AppCenter iOS デプロイ 次の入力をステップ実行して設定します。 APIトークン : $APPCENTER_API_TOKEN 所有者名 ： 例えば、 弊社 . アプリ名 ： 例えば、 マイアプリ . ...", 
"body" : "追加 Android ビルド 次の入力をステップ実行して設定します。 ビルドタイプ : これを APK . 変異体 : リリース、デバッグ、またはカスタム バリアントのいずれかを使用します (ある場合)。 リリース バリアントをビルドする場合は、 Android サイン ステップ . 署名されていないデバッグ バリアントをデプロイする予定がある場合は、これをスキップできます。 追加 AppCenter iOS デプロイ 次の入力をステップ実行して設定します。 APIトークン : $APPCENTER_API_TOKEN 所有者名 ： 例えば、 弊社 . アプリ名 ： 例えば、 マイアプリ . App Center CLI を使用してアプリ名を取得します。これは、Visual Studio App Center Web サイトに表示されるものとは異なる場合があるためです。 ステップのドキュメントまたはワークフロー エディターで他のオプションを確認してください。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--visual-studio-app-center-にデプロイする.html#bitrise-yml-78663", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Visual Studio App Center にデプロイする \/ bitrise.yml ", 
"snippet" : "- android-build@1: inputs: - variant: release - build_type: apk - sign-apk@1: {} - appcenter-deploy-android@2: inputs: - owner_name: my-company - app_name: my-app - app_path: \"$BITRISE_APK_PATH\" - api_token: \"$APPCENTER_API_TOKEN\"...", 
"body" : " - android-build@1:\n inputs:\n - variant: release\n - build_type: apk\n - sign-apk@1: {}\n - appcenter-deploy-android@2:\n inputs:\n - owner_name: my-company\n - app_name: my-app\n - app_path: \"$BITRISE_APK_PATH\"\n - api_token: \"$APPCENTER_API_TOKEN\" " }, 
{ "title" : "(Android) Firebase App Distribution へのデプロイ ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--firebase-app-distribution-へのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Firebase App Distribution へのデプロイ ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--firebase-app-distribution-へのデプロイ.html#説明-78664", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Firebase App Distribution へのデプロイ \/ 説明 ", 
"snippet" : "Firebase App Distribution を介してアプリをビルドし、テスターに配布します。この例では APK をビルドしてデプロイしますが、代わりに AAB を配布するようにワークフローを微調整できます。...", 
"body" : "Firebase App Distribution を介してアプリをビルドし、テスターに配布します。この例では APK をビルドしてデプロイしますが、代わりに AAB を配布するようにワークフローを微調整できます。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--firebase-app-distribution-へのデプロイ.html#前提条件-78664", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Firebase App Distribution へのデプロイ \/ 前提条件 ", 
"snippet" : "正確なパッケージ名が登録されている既存の Firebase プロジェクト。見る Firebase のドキュメント 詳細については。 を実行して、Firebase からトークンを取得します。 firebase login:ci ローカル。見る Firebase CLI ドキュメント 詳細については。 このトークンを ひみつ あなたの Bitrise アプリに FIREBASE_TOKEN . プロジェクトから Firebase アプリ ID を取得します。 一般設定 ページに移動し、この値を入力として Firebase アプリの配布 ステップ。 リリース ビルドをデプロイする場合は、忘れないでく...", 
"body" : "正確なパッケージ名が登録されている既存の Firebase プロジェクト。見る Firebase のドキュメント 詳細については。 を実行して、Firebase からトークンを取得します。 firebase login:ci ローカル。見る Firebase CLI ドキュメント 詳細については。 このトークンを ひみつ あなたの Bitrise アプリに FIREBASE_TOKEN . プロジェクトから Firebase アプリ ID を取得します。 一般設定 ページに移動し、この値を入力として Firebase アプリの配布 ステップ。 リリース ビルドをデプロイする場合は、忘れないでください Bitrise でコード署名をセットアップするには APK をビルドしてリリース キーで署名します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--firebase-app-distribution-へのデプロイ.html#指示-78664", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Firebase App Distribution へのデプロイ \/ 指示 ", 
"snippet" : "追加 Android ビルド 次の入力をステップ実行して設定します。 ビルドタイプ ：これを APK . 変異体 ： 使用する リリース 、 デバッグ 、またはカスタム バリアントの 1 つ (存在する場合)。 リリース バリアントをビルドする場合は、 人造人間のサイン ステップ。 署名されていないデバッグ バリアントをデプロイする予定がある場合は、これをスキップできます。 追加 Firebase アプリの配布 次の入力をステップ実行して設定します。 Firebase トークン : 前に定義した秘密の環境変数を使用します。 $FIREBASE_TOKEN . アプリのパス : これは、前の手順...", 
"body" : "追加 Android ビルド 次の入力をステップ実行して設定します。 ビルドタイプ ：これを APK . 変異体 ： 使用する リリース 、 デバッグ 、またはカスタム バリアントの 1 つ (存在する場合)。 リリース バリアントをビルドする場合は、 人造人間のサイン ステップ。 署名されていないデバッグ バリアントをデプロイする予定がある場合は、これをスキップできます。 追加 Firebase アプリの配布 次の入力をステップ実行して設定します。 Firebase トークン : 前に定義した秘密の環境変数を使用します。 $FIREBASE_TOKEN . アプリのパス : これは、前の手順でビルドおよび署名された APK を指す必要があります。デフォルトでは、次の場所にあります $BITRISE_DEPLOY_DIR\/app-release-bitrise-signed.apk ですが、正確なファイル名はプロジェクトの構成によって異なる場合があります。 Firebase アプリ ID : プロジェクトから Firebase アプリ ID を取得します。 一般設定 ページに移動し、この値を入力として Firebase アプリの配布 ステップ。 オプション : ステップ入力でテスト グループまたは個々のテスターを定義できます。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--firebase-app-distribution-へのデプロイ.html#bitrise-yml-78664", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Firebase App Distribution へのデプロイ \/ bitrise.yml ", 
"snippet" : "- android-build@1: inputs: - variant: release - build_type: apk - sign-apk@1: {} - firebase-app-distribution@0: inputs: - firebase_token: $FIREBASE_TOKEN - app_path: $BITRISE_DEPLOY_DIR\/app-release-bitrise-signed.apk - app: your_app_id_from_firebase - testers: email@company.com # optional - groups: ...", 
"body" : "- android-build@1:\n inputs:\n - variant: release\n - build_type: apk\n- sign-apk@1: {}\n- firebase-app-distribution@0:\n inputs:\n - firebase_token: $FIREBASE_TOKEN\n - app_path: $BITRISE_DEPLOY_DIR\/app-release-bitrise-signed.apk\n - app: your_app_id_from_firebase\n - testers: email@company.com # optional\n - groups: qa-team #optional " }, 
{ "title" : "(Android) Google Play へのデプロイ (内部、アルファ版、ベータ版、製品版) ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--google-play-へのデプロイ--内部-アルファ版-ベータ版-製品版-.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Google Play へのデプロイ (内部、アルファ版、ベータ版、製品版) ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--google-play-へのデプロイ--内部-アルファ版-ベータ版-製品版-.html#説明-78665", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Google Play へのデプロイ (内部、アルファ版、ベータ版、製品版) \/ 説明 ", 
"snippet" : "Android アプリを構築し、内部、アルファ、ベータ、または製品トラックとして Google Play にアップロードします。...", 
"body" : "Android アプリを構築し、内部、アルファ、ベータ、または製品トラックとして Google Play にアップロードします。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--google-play-へのデプロイ--内部-アルファ版-ベータ版-製品版-.html#前提条件-78665", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Google Play へのデプロイ (内部、アルファ版、ベータ版、製品版) \/ 前提条件 ", 
"snippet" : "アン Android キーストア ファイルがアップロードされました ビットライズへ。 Google Play API アクセス 設定されています。...", 
"body" : "アン Android キーストア ファイルがアップロードされました ビットライズへ。 Google Play API アクセス 設定されています。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--google-play-へのデプロイ--内部-アルファ版-ベータ版-製品版-.html#指示-78665", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Google Play へのデプロイ (内部、アルファ版、ベータ版、製品版) \/ 指示 ", 
"snippet" : "(オプション) Android の versionCode と versionName を変更する ステップ。入力変数を設定します。 build.gradle ファイルへのパス : デフォルト値は $PROJECT_LOCATION\/$MODULE\/build.gradle ほとんどの場合、変更する必要はありません。 新しいバージョン名 ： 例えば、 1.0.1 新バージョンコード ： 例えば、 42 . 追加 Android ビルド 次の入力をステップ実行して設定します。 ビルドタイプ ：これを aab . 変異体 ： 使用する リリース 、 デバッグ 、またはカスタム バリアントの 1 つ...", 
"body" : "(オプション) Android の versionCode と versionName を変更する ステップ。入力変数を設定します。 build.gradle ファイルへのパス : デフォルト値は $PROJECT_LOCATION\/$MODULE\/build.gradle ほとんどの場合、変更する必要はありません。 新しいバージョン名 ： 例えば、 1.0.1 新バージョンコード ： 例えば、 42 . 追加 Android ビルド 次の入力をステップ実行して設定します。 ビルドタイプ ：これを aab . 変異体 ： 使用する リリース 、 デバッグ 、またはカスタム バリアントの 1 つ (存在する場合)。 モジュール ： 例えば $MODULE . 追加 人造人間のサイン ステップ。 追加 Google Play デプロイ 次の入力をステップ実行して設定します。 サービス アカウントの JSON キー ファイル パス : $BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL . パッケージ名 ： 例えば、 com.your.package.name . 追跡 ：いずれかを選択 内部 、 アルファ 、 ベータ 、 また 製造 . 状態 : リリースのステータス。詳細については、 Google API リファレンス .おすすめされた 下書き 生産用と 完了 内部テストビルド用。 ワークフロー エディターまたはステップのドキュメントで、その他のオプションを確認してください。 Google Play へのデプロイがエラー 403 で失敗する Google Play ステップへのデプロイが次のエラーで失敗する場合があります。 \"error: Failed to perform edit insert call, error: googleapi: Error 403: The caller does not have permission, forbidden\" 考えられる解決策については、 ナレッジベースの記事 . " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--google-play-へのデプロイ--内部-アルファ版-ベータ版-製品版-.html#bitrise-yml-78665", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Google Play へのデプロイ (内部、アルファ版、ベータ版、製品版) \/ bitrise.yml ", 
"snippet" : "- change-android-versioncode-and-versionname@1: inputs: - new_version_name: 1.0.1 - new_version_code: '42' - build_gradle_path: \"$PROJECT_LOCATION\/$MODULE\/build.gradle\" - android-build@1: inputs: - project_location: \"$PROJECT_LOCATION\" - module: \"$MODULE\" - build_type: aab - variant: release - sign-...", 
"body" : "- change-android-versioncode-and-versionname@1:\n inputs:\n - new_version_name: 1.0.1\n - new_version_code: '42'\n - build_gradle_path: \"$PROJECT_LOCATION\/$MODULE\/build.gradle\"\n- android-build@1:\n inputs:\n - project_location: \"$PROJECT_LOCATION\"\n - module: \"$MODULE\"\n - build_type: aab\n - variant: release\n- sign-apk@1: {}\n- google-play-deploy@3:\n inputs:\n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\"\n - package_name: io.bitrise.sample.android\n - status: completed\n - track: internal " }, 
{ "title" : "(Android) Bitrise.io にデプロイ ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--bitrise-io-にデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Bitrise.io にデプロイ ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--bitrise-io-にデプロイ.html#説明-78666", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Bitrise.io にデプロイ \/ 説明 ", 
"snippet" : "アプリをビルドし、Bitrise.io を介してテスターに配布します 船のアドオン ....", 
"body" : "アプリをビルドし、Bitrise.io を介してテスターに配布します 船のアドオン . " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--bitrise-io-にデプロイ.html#指示-78666", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Bitrise.io にデプロイ \/ 指示 ", 
"snippet" : "リリース ビルドのデプロイ リリース ビルドをデプロイする場合は、Bitrise でコード署名を設定して、リリース キーで APK をビルドおよび署名することを忘れないでください。 追加 Android ビルド 次の入力をステップ実行して設定します。 ビルドタイプ ：これを APK . 変異体 ： 使用する リリース 、 デバッグ 、またはカスタム バリアントの 1 つ (存在する場合)。 リリース バリアントをビルドする場合は、 人造人間のサイン ステップ。 署名されていないデバッグ バリアントをデプロイする予定がある場合は、これをスキップできます。 を追加 Bitrise.io へのデプロ...", 
"body" : "リリース ビルドのデプロイ リリース ビルドをデプロイする場合は、Bitrise でコード署名を設定して、リリース キーで APK をビルドおよび署名することを忘れないでください。 追加 Android ビルド 次の入力をステップ実行して設定します。 ビルドタイプ ：これを APK . 変異体 ： 使用する リリース 、 デバッグ 、またはカスタム バリアントの 1 つ (存在する場合)。 リリース バリアントをビルドする場合は、 人造人間のサイン ステップ。 署名されていないデバッグ バリアントをデプロイする予定がある場合は、これをスキップできます。 を追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ステップ。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--bitrise-io-にデプロイ.html#bitrise-yml-78666", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Bitrise.io にデプロイ \/ bitrise.yml ", 
"snippet" : "- android-build@1: inputs: - variant: release - build_type: apk - sign-apk@1: {} - deploy-to-bitrise-io@2: {}...", 
"body" : "- android-build@1:\n inputs:\n - variant: release\n - build_type: apk\n- sign-apk@1: {}\n- deploy-to-bitrise-io@2: {} " }, 
{ "title" : "(Android) CI ワークフローの例 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--ci-ワークフローの例.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) CI ワークフローの例 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--ci-ワークフローの例.html#説明-78667", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) CI ワークフローの例 \/ 説明 ", 
"snippet" : "Android アプリのメイン ブランチでのコミットのワークフローの例。ワークフローには次が含まれます。 単体テストの実行 . 仮想デバイスでの UI テストの実行 . 糸くずの実行 . テストアプリの構築 . ビルド ステータスを含む Slack 通知の送信 . 今後のプル リクエスト ビルドのためにキャッシュを埋める。...", 
"body" : "Android アプリのメイン ブランチでのコミットのワークフローの例。ワークフローには次が含まれます。 単体テストの実行 . 仮想デバイスでの UI テストの実行 . 糸くずの実行 . テストアプリの構築 . ビルド ステータスを含む Slack 通知の送信 . 今後のプル リクエスト ビルドのためにキャッシュを埋める。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--ci-ワークフローの例.html#bitrise-yml-78667", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) CI ワークフローの例 \/ bitrise.yml ", 
"snippet" : "--- format_version: '11' default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git project_type: android workflows: ci: steps: - activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {} - cache-pull@2: {} - android-unit-test@1: inputs: - project_locat...", 
"body" : "---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\nworkflows:\n ci:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@6: {}\n - cache-pull@2: {}\n - android-unit-test@1:\n inputs:\n - project_location: $PROJECT_LOCATION\n - variant: $VARIANT\n - android-build-for-ui-testing@0:\n inputs:\n - variant: $VARIANT\n - module: $MODULE\n - virtual-device-testing-for-android@1:\n inputs:\n - test_type: instrumentation\n - android-lint@0:\n inputs:\n - variant: \"$VARIANT\"\n - android-build@1:\n inputs:\n - project_location: \"$PROJECT_LOCATION\"\n - module: \"$MODULE\"\n - variant: \"$VARIANT\"\n - deploy-to-bitrise-io@2: {}\n - slack@3:\n inputs:\n - channel: \"#build-notifications\"\n - webhook_url: \"$SLACK_WEBHOOK\"\n - cache-push@2: {}\napp:\n envs:\n - opts:\n is_expand: false\n PROJECT_LOCATION: \".\"\n - opts:\n is_expand: false\n MODULE: app\n - VARIANT: debug\n opts:\n is_expand: false\ntrigger_map:\n- push_branch: main\n workflow: ci " }, 
{ "title" : "(Android) 毎晩のワークフローの例 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--毎晩のワークフローの例.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 毎晩のワークフローの例 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--毎晩のワークフローの例.html#説明-78668", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 毎晩のワークフローの例 \/ 説明 ", 
"snippet" : "Android アプリのナイトリー ビルドのワークフローの例。ワークフローには次が含まれます。 バージョンコードとバージョン名の設定 . デフォルトでは、アプリはビルド番号を取得します ( $BITRISE_BUILD_NUMBER ) をバージョン コードとして使用します。 リリース Android App Bundle のビルドと Google Play 内部テストへのアップロード . テストアプリのビルドと bitrise.io へのアップロード . テストビルドの QR コードを Slack に送信する ....", 
"body" : "Android アプリのナイトリー ビルドのワークフローの例。ワークフローには次が含まれます。 バージョンコードとバージョン名の設定 . デフォルトでは、アプリはビルド番号を取得します ( $BITRISE_BUILD_NUMBER ) をバージョン コードとして使用します。 リリース Android App Bundle のビルドと Google Play 内部テストへのアップロード . テストアプリのビルドと bitrise.io へのアップロード . テストビルドの QR コードを Slack に送信する . " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--毎晩のワークフローの例.html#bitrise-yml-78668", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 毎晩のワークフローの例 \/ bitrise.yml ", 
"snippet" : "--- format_version: '11' default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git project_type: android workflows: nightly: steps: - activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {} - cache-pull@2: {} - change-android-versioncode-and-versionn...", 
"body" : "---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\nworkflows:\n nightly:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@6: {}\n - cache-pull@2: {}\n - change-android-versioncode-and-versionname@1:\n inputs:\n - new_version_name: 1.0.0\n - build_gradle_path: \"$PROJECT_LOCATION\/$MODULE\/build.gradle\"\n - android-build@1:\n inputs:\n - project_location: \"$PROJECT_LOCATION\"\n - module: \"$MODULE\"\n - build_type: aab\n - variant: release\n - sign-apk@1: {}\n - google-play-deploy@3:\n inputs:\n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\"\n - package_name: io.bitrise.sample.android\n - status: completed\n - track: internal\n - android-build@1:\n inputs:\n - project_location: \"$PROJECT_LOCATION\"\n - module: \"$MODULE\"\n - variant: \"$VARIANT\"\n - deploy-to-bitrise-io@2: {}\n - create-install-page-qr-code@1: {}\n - slack@3:\n inputs:\n - channel: \"#build-notifications\"\n - thumb_url: \"$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL\"\n - webhook_url: \"$SLACK_WEBHOOK\"\n - cache-push@2: {}\napp:\n envs:\n - opts:\n is_expand: false\n PROJECT_LOCATION: \".\"\n - opts:\n is_expand: false\n MODULE: app\n - VARIANT: debug\n opts:\n is_expand: false " }, 
{ "title" : "(Android) プルリクエストのワークフロー例 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--プルリクエストのワークフロー例.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) プルリクエストのワークフロー例 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--プルリクエストのワークフロー例.html#説明-78669", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) プルリクエストのワークフロー例 \/ 説明 ", 
"snippet" : "Android プル リクエスト検証のワークフローの例。ワークフローには次が含まれます。 単体テストの実行 . 仮想デバイスでの UI テストの実行 . 糸くずの実行 . テストアプリのビルドと bitrise.io へのアップロード . テスト ビルドの QR コードをプル リクエストに送信する . プル リクエストのワークフローをトリガーします。...", 
"body" : "Android プル リクエスト検証のワークフローの例。ワークフローには次が含まれます。 単体テストの実行 . 仮想デバイスでの UI テストの実行 . 糸くずの実行 . テストアプリのビルドと bitrise.io へのアップロード . テスト ビルドの QR コードをプル リクエストに送信する . プル リクエストのワークフローをトリガーします。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--プルリクエストのワークフロー例.html#bitrise-yml-78669", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) プルリクエストのワークフロー例 \/ bitrise.yml ", 
"snippet" : "--- format_version: '11' default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git project_type: android workflows: pull-request: steps: - activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {} - cache-pull@2: {} - android-unit-test@1: inputs: - pro...", 
"body" : "---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\nworkflows:\n pull-request:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@6: {}\n - cache-pull@2: {}\n - android-unit-test@1:\n inputs:\n - project_location: $PROJECT_LOCATION\n - variant: $VARIANT\n - android-build-for-ui-testing@0:\n inputs:\n - variant: $VARIANT\n - module: $MODULE\n - virtual-device-testing-for-android@1:\n inputs:\n - test_type: instrumentation\n - android-lint@0:\n inputs:\n - variant: \"$VARIANT\"\n - android-build@1:\n inputs:\n - project_location: \"$PROJECT_LOCATION\"\n - module: \"$MODULE\"\n - variant: \"$VARIANT\"\n - deploy-to-bitrise-io@2: {}\n - create-install-page-qr-code@1: {}\n - comment-on-github-pull-request@0:\n inputs:\n - body: |-\n ![QR code]($BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL)\n\n $BITRISE_PUBLIC_INSTALL_PAGE_URL\n - personal_access_token: \"$GITHUB_ACCESS_TOKEN\"\n - cache-push@2: {}\napp:\n envs:\n - opts:\n is_expand: false\n PROJECT_LOCATION: \".\"\n - opts:\n is_expand: false\n MODULE: app\n - VARIANT: debug\n opts:\n is_expand: false\ntrigger_map:\n- pull_request_source_branch: \"*\"\n workflow: pull-request " }, 
{ "title" : "(Android) 仮想デバイスでインストルメンテーション テストを実行する ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--仮想デバイスでインストルメンテーション-テストを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 仮想デバイスでインストルメンテーション テストを実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--仮想デバイスでインストルメンテーション-テストを実行する.html#説明-78670", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 仮想デバイスでインストルメンテーション テストを実行する \/ 説明 ", 
"snippet" : "仮想デバイスでインストルメンテーション (Espresso など) または robo\/gameloop テストを実行します。 当社のデバイス テスト ソリューション Firebase Test Lab に基づいています。結果のログ、ビデオ、スクリーンショットは Bitrise で見つけることができます。...", 
"body" : "仮想デバイスでインストルメンテーション (Espresso など) または robo\/gameloop テストを実行します。 当社のデバイス テスト ソリューション Firebase Test Lab に基づいています。結果のログ、ビデオ、スクリーンショットは Bitrise で見つけることができます。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--仮想デバイスでインストルメンテーション-テストを実行する.html#指示-78670", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 仮想デバイスでインストルメンテーション テストを実行する \/ 指示 ", 
"snippet" : "を追加 UI テスト用の Android ビルド ステップ。入力変数を設定します。 プロジェクトの場所 : デフォルトを使用 $BITRISE_SOURCE_DIR また $PROJECT_LOCATION .特定のパスを設定できますが、通常は自動的に公開される環境変数が最適なオプションです。 変異体 ： 使用 $VARIANT 環境変数 、またはバリアントを手動で指定します。 モジュール : 1 つを指定するか、空白のままにして、すべてのモジュールでテストを実行します。 を追加 [ベータ] Android の仮想デバイス テスト ステップ。入力変数を設定します。 試験の種類 : 計装 （また...", 
"body" : "を追加 UI テスト用の Android ビルド ステップ。入力変数を設定します。 プロジェクトの場所 : デフォルトを使用 $BITRISE_SOURCE_DIR また $PROJECT_LOCATION .特定のパスを設定できますが、通常は自動的に公開される環境変数が最適なオプションです。 変異体 ： 使用 $VARIANT 環境変数 、またはバリアントを手動で指定します。 モジュール : 1 つを指定するか、空白のままにして、すべてのモジュールでテストを実行します。 を追加 [ベータ] Android の仮想デバイス テスト ステップ。入力変数を設定します。 試験の種類 : 計装 （また ロボ また ゲームループ ) (オプション) テストデバイス （デフォルト： NexusLowRes,24,en,縦 ）。 を追加 Bitrise.io にデプロイする テスト結果を テストレポート アドオン。 仮想デバイスでインストルメンテーション テストを実行する際の潜在的な問題 仮想デバイスでインストルメンテーション テストを実行しているときに、予期しない問題が発生する場合があります。ナレッジベースでいくつかの例と考えられる解決策を見つけることができます。 不安定な Android エミュレータ テストのヒント [BETA] Android の仮想デバイス テストのステップでテストに失敗しました " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--仮想デバイスでインストルメンテーション-テストを実行する.html#bitrise-yml-78670", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 仮想デバイスでインストルメンテーション テストを実行する \/ bitrise.yml ", 
"snippet" : "- android-build-for-ui-testing@0: inputs: - variant: $VARIANT - module: $MODULE - virtual-device-testing-for-android@1: inputs: - test_type: instrumentation - deploy-to-bitrise-io@2: {}...", 
"body" : "- android-build-for-ui-testing@0:\n inputs:\n - variant: $VARIANT\n - module: $MODULE\n- virtual-device-testing-for-android@1:\n inputs:\n - test_type: instrumentation\n- deploy-to-bitrise-io@2: {} " }, 
{ "title" : "(Android) リリースワークフローの例 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--リリースワークフローの例.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) リリースワークフローの例 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--リリースワークフローの例.html#説明-78671", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) リリースワークフローの例 \/ 説明 ", 
"snippet" : "アプリのリリース ドラフトを Google Play にアップロードするワークフローの例。ワークフローには次が含まれます。 に基づくバージョン名の設定 ビルドに渡される環境変数 ( $VERSION_NAME ）。 リリース Android App Bundle の作成と Google Play へのアップロード ....", 
"body" : "アプリのリリース ドラフトを Google Play にアップロードするワークフローの例。ワークフローには次が含まれます。 に基づくバージョン名の設定 ビルドに渡される環境変数 ( $VERSION_NAME ）。 リリース Android App Bundle の作成と Google Play へのアップロード . " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--リリースワークフローの例.html#bitrise-yml-78671", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) リリースワークフローの例 \/ bitrise.yml ", 
"snippet" : "--- format_version: '11' default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git project_type: android workflows: release: steps: - activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {} - change-android-versioncode-and-versionname@1: inputs: - ne...", 
"body" : "---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\nworkflows:\n release:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@6: {}\n - change-android-versioncode-and-versionname@1:\n inputs:\n - new_version_name: \"$VERSION_NAME\"\n - new_version_code: \"$BITRISE_BUILD_NUMBER\"\n - build_gradle_path: \"$PROJECT_LOCATION\/$MODULE\/build.gradle\"\n - android-build@1:\n inputs:\n - project_location: \"$PROJECT_LOCATION\"\n - module: \"$MODULE\"\n - build_type: aab\n - variant: release\n - sign-apk@1: {}\n - google-play-deploy@3:\n inputs:\n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\"\n - package_name: io.bitrise.sample.android\n - status: draft\n - track: production\napp:\n envs:\n - opts:\n is_expand: false\n PROJECT_LOCATION: \".\"\n - opts:\n is_expand: false\n MODULE: app\n - VARIANT: debug\n opts:\n is_expand: false " }, 
{ "title" : "(Android) Lint の実行 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--lint-の実行.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Lint の実行 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--lint-の実行.html#説明-78672", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Lint の実行 \/ 説明 ", 
"snippet" : "Android プロジェクトで Lint を実行します。...", 
"body" : "Android プロジェクトで Lint を実行します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--lint-の実行.html#指示-78672", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Lint の実行 \/ 指示 ", 
"snippet" : "追加 Android リント ステップ。入力変数を設定します。 プロジェクトの場所 : デフォルトを使用 $BITRISE_SOURCE_DIR また $PROJECT_LOCATION . 特定のパスを設定できますが、自動的に公開されます 環境変数 通常、最適なオプションです。 変異体 ： 使用 $VARIANT 環境変数、またはバリアントを手動で指定します。 モジュール : 1 つを指定するか、空白のままにして、すべてのモジュールで lint を実行します。 を追加 Bitrise.io にデプロイする ステップ。このステップでは、lint レポートを ビルド アーティファクト ....", 
"body" : "追加 Android リント ステップ。入力変数を設定します。 プロジェクトの場所 : デフォルトを使用 $BITRISE_SOURCE_DIR また $PROJECT_LOCATION . 特定のパスを設定できますが、自動的に公開されます 環境変数 通常、最適なオプションです。 変異体 ： 使用 $VARIANT 環境変数、またはバリアントを手動で指定します。 モジュール : 1 つを指定するか、空白のままにして、すべてのモジュールで lint を実行します。 を追加 Bitrise.io にデプロイする ステップ。このステップでは、lint レポートを ビルド アーティファクト . " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--lint-の実行.html#bitrise-yml-78672", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) Lint の実行 \/ bitrise.yml ", 
"snippet" : "- android-lint@0: inputs: - variant: $VARIANT - deploy-to-bitrise-io@2: {}...", 
"body" : "- android-lint@0:\n inputs:\n - variant: $VARIANT\n- deploy-to-bitrise-io@2: {} " }, 
{ "title" : "Gradle ビルド プロファイリングを有効にする ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/gradle-ビルド-プロファイリングを有効にする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ Gradle ビルド プロファイリングを有効にする ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/gradle-ビルド-プロファイリングを有効にする.html#説明-78673", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ Gradle ビルド プロファイリングを有効にする \/ 説明 ", 
"snippet" : "すべての Gradle ビルドのパフォーマンス レポートを生成して保存し、ビルド速度の問題を特定したり、異なるビルドを比較したりします。...", 
"body" : "すべての Gradle ビルドのパフォーマンス レポートを生成して保存し、ビルド速度の問題を特定したり、異なるビルドを比較したりします。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/gradle-ビルド-プロファイリングを有効にする.html#指示-78673", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ Gradle ビルド プロファイリングを有効にする \/ 指示 ", 
"snippet" : "Bitrise ワークフローで使用する Android または Gradle ステップに関係なく、Gradle の追加のコマンド ライン引数を定義するオプションがあります。追加 - プロフィール 関連する入力変数に追加して、Gradle タスクのパフォーマンス レポートを生成します。以下の例では、引数を Android 単体テスト ステップ。 追加 Android 単体テスト ワークフローに進み、必要な入力変数を設定します。 プロジェクトの場所 : $PROJECT_LOCATION . モジュール : $MODULE . 変異体 : $VARIANT . 引数 : --profile2 . ...", 
"body" : "Bitrise ワークフローで使用する Android または Gradle ステップに関係なく、Gradle の追加のコマンド ライン引数を定義するオプションがあります。追加 - プロフィール 関連する入力変数に追加して、Gradle タスクのパフォーマンス レポートを生成します。以下の例では、引数を Android 単体テスト ステップ。 追加 Android 単体テスト ワークフローに進み、必要な入力変数を設定します。 プロジェクトの場所 : $PROJECT_LOCATION . モジュール : $MODULE . 変異体 : $VARIANT . 引数 : --profile2 . を追加 脚本 ワークフローの最後まで進み、レポート ファイルを圧縮し、ZIP ファイルをデプロイ ディレクトリにコピーします。 #!\/usr\/bin\/env bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\nzip -r $BITRISE_DEPLOY_DIR\/gradle-profile.zip $PROJECT_LOCATION\/build\/reports\/profile Gradle は HTML レポートを build\/reports\/profile\/ 、そのため、そのフォルダー内のすべてのファイル (HTML、CSS、および JS ファイル) を取得して圧縮し、ZIP アーカイブを次の場所に移動する必要があります。 $BITRISE_DEPLOY_DIR .このフォルダー内のファイルは、ビルド ページの アーティファクト タブ。 アプリの手動ビルドをトリガーします。 ダウンロードして解凍します gradle-profile.zip ファイルを開き、ブラウザで HTML レポートを開きます。 に行く アーティファクト タブを開き、レポートでビルドのさまざまな側面を確認します。 の 概要 タブには、タスクの実行以外に費やされた時間が表示されます。 の タスクの実行 タブには、実行時間でソートされたすべてのタスクが一覧表示されます。 キャッシュされたタスクは次のようにマークされます 最新の .これは、 Bitrise キャッシュの手順 複数のビルドのレポートを比較します。 Gradle の最適化のアイデアについては、 Googleのこの記事をチェックしてください . ビルド ログにのみタスクの実行時間を表示したい場合は、 ビルド時間トラッカー プラグイン。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/gradle-ビルド-プロファイリングを有効にする.html#bitrise-yml-78673", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ Gradle ビルド プロファイリングを有効にする \/ bitrise.yml ", 
"snippet" : "- android-unit-test@1: inputs: - project_location: $PROJECT_LOCATION - module: $MODULE - arguments: \"--profile\" - variant: $VARIANT - script@1: title: Collect Gradle profile report inputs: - content: |- #!\/usr\/bin\/env bash # fail if any commands fails set -e # debug log set -x zip -r $BITRISE_DEPLOY...", 
"body" : "- android-unit-test@1:\n inputs:\n - project_location: $PROJECT_LOCATION\n - module: $MODULE\n - arguments: \"--profile\"\n - variant: $VARIANT\n- script@1:\n title: Collect Gradle profile report\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n # fail if any commands fails\n set -e\n # debug log\n set -x\n\n zip -r $BITRISE_DEPLOY_DIR\/gradle-profile.zip $PROJECT_LOCATION\/build\/reports\/profile\n- deploy-to-bitrise-io@1: {} " }, 
{ "title" : "(Android) 単体テストを実行する ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--単体テストを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 単体テストを実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--単体テストを実行する.html#説明-78674", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 単体テストを実行する \/ 説明 ", 
"snippet" : "単体テストを実行する （例えば、 testDebugUnitTest ) Android アプリの場合。...", 
"body" : "単体テストを実行する （例えば、 testDebugUnitTest ) Android アプリの場合。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--単体テストを実行する.html#指示-78674", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 単体テストを実行する \/ 指示 ", 
"snippet" : "を追加 Android 単体テスト ステップ。 入力変数を設定します。 プロジェクトの場所 : デフォルトを使用 $BITRISE_SOURCE_DIR また $PROJECT_LOCATION .特定のパスを設定できますが、通常は自動的に公開される環境変数が最適なオプションです。 変異体 ： 使用 $VARIANT 環境変数 、またはバリアントを手動で指定します。 モジュール : 1 つを指定するか、空白のままにして、すべてのモジュールでテストを実行します。 を追加 Bitrise.io にデプロイする テスト結果を テストレポート アドオン。...", 
"body" : "を追加 Android 単体テスト ステップ。 入力変数を設定します。 プロジェクトの場所 : デフォルトを使用 $BITRISE_SOURCE_DIR また $PROJECT_LOCATION .特定のパスを設定できますが、通常は自動的に公開される環境変数が最適なオプションです。 変異体 ： 使用 $VARIANT 環境変数 、またはバリアントを手動で指定します。 モジュール : 1 つを指定するか、空白のままにして、すべてのモジュールでテストを実行します。 を追加 Bitrise.io にデプロイする テスト結果を テストレポート アドオン。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--単体テストを実行する.html#bitrise-yml-78674", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) 単体テストを実行する \/ bitrise.yml ", 
"snippet" : "- android-unit-test@1: inputs: - project_location: $PROJECT_LOCATION - variant: $VARIANT - deploy-to-bitrise-io@2: {}...", 
"body" : "- android-unit-test@1:\n inputs:\n - project_location: $PROJECT_LOCATION\n - variant: $VARIANT\n- deploy-to-bitrise-io@2: {} " }, 
{ "title" : "(Android) エミュレーターを使用してテストを実行する ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--エミュレーターを使用してテストを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) エミュレーターを使用してテストを実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--エミュレーターを使用してテストを実行する.html#説明-78675", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) エミュレーターを使用してテストを実行する \/ 説明 ", 
"snippet" : "ローカル エミュレーター インスタンスであらゆる種類のテスト (ユニット、インストルメンテーション) を実行します。...", 
"body" : "ローカル エミュレーター インスタンスであらゆる種類のテスト (ユニット、インストルメンテーション) を実行します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--エミュレーターを使用してテストを実行する.html#指示-78675", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) エミュレーターを使用してテストを実行する \/ 指示 ", 
"snippet" : "を追加 AVDマネージャー ステップ。エミュレーターをカスタマイズするには、ステップ構成を参照してください。 AVD Manager ステップの使用 の AVDマネージャー バックグラウンドで開始されます。これには数分かかる場合があります。そのため、ワークフローの最初に AVD Manager ステップを追加することをお勧めします ( SSH キー (RSA 秘密キー) をアクティブ化 ステップと Gitクローン ステップ) ビルドを高速化します。 を追加 UI テスト用の Android ビルド ステップし、必要な入力を構成します。 を追加 Androidエミュレータを待ちます ステップ。 ...", 
"body" : "を追加 AVDマネージャー ステップ。エミュレーターをカスタマイズするには、ステップ構成を参照してください。 AVD Manager ステップの使用 の AVDマネージャー バックグラウンドで開始されます。これには数分かかる場合があります。そのため、ワークフローの最初に AVD Manager ステップを追加することをお勧めします ( SSH キー (RSA 秘密キー) をアクティブ化 ステップと Gitクローン ステップ) ビルドを高速化します。 を追加 UI テスト用の Android ビルド ステップし、必要な入力を構成します。 を追加 Androidエミュレータを待ちます ステップ。 を追加 Android 計装テスト ステップし、必要な入力を構成します。 を追加 テスト結果をテスト レポート アドオンにエクスポートする 次の入力でステップします。 テストの名前 : エミュレータ テスト . テスト結果のベース パス : $BITRISE_SOURCE_DIR\/app\/build\/outputs\/androidTest-results . プロジェクト内のモジュール名に基づいてパスを調整することをお勧めします。 テスト結果検索パターン : *.xml . を追加 Bitrise.io にデプロイする テスト結果を テストレポート アドオン。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/androidアプリのワークフローレシピ/-android--エミュレーターを使用してテストを実行する.html#bitrise-yml-78675", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ Androidアプリのワークフローレシピ \/ (Android) エミュレーターを使用してテストを実行する \/ bitrise.yml ", 
"snippet" : "- avd-manager@1: {} - android-build-for-ui-testing@0: inputs: - module: \"$ANDROID_TESTING_MODULE\" - variant: \"$ANDROID_V_DEBUG\" - wait-for-android-emulator@1: - android-instrumented-test@0: {} - custom-test-results-export@0: inputs: - search_pattern: \"*.xml\" - base_path: $BITRISE_SOURCE_DIR\/app\/buil...", 
"body" : "- avd-manager@1: {}\n- android-build-for-ui-testing@0:\n inputs:\n - module: \"$ANDROID_TESTING_MODULE\"\n - variant: \"$ANDROID_V_DEBUG\"\n- wait-for-android-emulator@1:\n- android-instrumented-test@0: {}\n- custom-test-results-export@0:\n inputs:\n - search_pattern: \"*.xml\"\n - base_path: $BITRISE_SOURCE_DIR\/app\/build\/outputs\/androidTest-results\n - test_name: Emulator tests\n- deploy-to-bitrise-io@2: " }, 
{ "title" : "iOSアプリのワークフローレシピ ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ ", 
"snippet" : "iOSアプリ専用のワークフローレシピ。これらの一部は、クロスプラットフォームアプリのiOSバージョンにも使用できますが、ネイティブiOSアプリ専用のものもあります。 ワークフローレシピは、一般的なワークフロータスク用の既製のソリューションを提供します。 ここでは、iOSアプリ専用のワークフローレシピを見つけることができます。これらの一部は、クロスプラットフォームアプリのiOSバージョンにも使用できますが、ネイティブiOSアプリ専用のものもあります。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ クロスプラットフォームアプリのワーク...", 
"body" : "iOSアプリ専用のワークフローレシピ。これらの一部は、クロスプラットフォームアプリのiOSバージョンにも使用できますが、ネイティブiOSアプリ専用のものもあります。 ワークフローレシピは、一般的なワークフロータスク用の既製のソリューションを提供します。 ここでは、iOSアプリ専用のワークフローレシピを見つけることができます。これらの一部は、クロスプラットフォームアプリのiOSバージョンにも使用できますが、ネイティブiOSアプリ専用のものもあります。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "(iOS) Visual Studio App Center にデプロイする ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--visual-studio-app-center-にデプロイする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Visual Studio App Center にデプロイする ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--visual-studio-app-center-にデプロイする.html#説明-78677", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Visual Studio App Center にデプロイする \/ 説明 ", 
"snippet" : "アプリをビルドし、AppCenter を介してテスターに配布します。...", 
"body" : "アプリをビルドし、AppCenter を介してテスターに配布します。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--visual-studio-app-center-にデプロイする.html#前提条件-78677", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Visual Studio App Center にデプロイする \/ 前提条件 ", 
"snippet" : "アプリが登録されている既存の Visual Studio App Center プロジェクト。 API トークンを ひみつ あなたのBitriseプロジェクトの名前 APPCENTER_API_TOKEN . コード署名が設定されました。見る iOS コード署名 詳細については。...", 
"body" : "アプリが登録されている既存の Visual Studio App Center プロジェクト。 API トークンを ひみつ あなたのBitriseプロジェクトの名前 APPCENTER_API_TOKEN . コード署名が設定されました。見る iOS コード署名 詳細については。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--visual-studio-app-center-にデプロイする.html#指示-78677", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Visual Studio App Center にデプロイする \/ 指示 ", 
"snippet" : "追加 Xcode アーカイブ & iOS 用エクスポート ステップ。入力変数を設定します。 プロジェクト パス : デフォルトで $BITRISE_PROJECT_PATH . 図式 : デフォルトで $BITRISE_SCHEME . 配布方法 : 発達 、 このために また 企業 . 追加 AppCenter iOS デプロイ 次の入力をステップ実行して設定します。 APIトークン : $APPCENTER_API_TOKEN . 所有者名 ： 例えば、 弊社 . アプリ名 ： 例えば、 マイアプリ . App Center CLI を使用してアプリ名を取得します。これは、Visual S...", 
"body" : "追加 Xcode アーカイブ & iOS 用エクスポート ステップ。入力変数を設定します。 プロジェクト パス : デフォルトで $BITRISE_PROJECT_PATH . 図式 : デフォルトで $BITRISE_SCHEME . 配布方法 : 発達 、 このために また 企業 . 追加 AppCenter iOS デプロイ 次の入力をステップ実行して設定します。 APIトークン : $APPCENTER_API_TOKEN . 所有者名 ： 例えば、 弊社 . アプリ名 ： 例えば、 マイアプリ . App Center CLI を使用してアプリ名を取得します。これは、Visual Studio App Center Web サイトに表示されるものとは異なる場合があるためです。 ステップのドキュメントまたはワークフロー エディターで他のオプションを確認してください。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--visual-studio-app-center-にデプロイする.html#bitrise-yml-78677", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Visual Studio App Center にデプロイする \/ bitrise.yml ", 
"snippet" : "- xcode-archive@4: inputs: - project_path: \"$BITRISE_PROJECT_PATH\" - scheme: \"$BITRISE_SCHEME\" - automatic_code_signing: apple-id - distribution_method: development - appcenter-deploy-ios@2: inputs: - owner_name: my-company - app_name: my-app - api_token: \"$APPCENTER_API_TOKEN\"...", 
"body" : " - xcode-archive@4:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\"\n - automatic_code_signing: apple-id\n - distribution_method: development\n - appcenter-deploy-ios@2:\n inputs:\n - owner_name: my-company\n - app_name: my-app\n - api_token: \"$APPCENTER_API_TOKEN\" " }, 
{ "title" : "(iOS) CocoaPods の依存関係をキャッシュする ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--cocoapods-の依存関係をキャッシュする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CocoaPods の依存関係をキャッシュする ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--cocoapods-の依存関係をキャッシュする.html#説明-78678", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CocoaPods の依存関係をキャッシュする \/ 説明 ", 
"snippet" : "のコンテンツをキャッシュする Pods iOS プロジェクトのフォルダー。...", 
"body" : "のコンテンツをキャッシュする Pods iOS プロジェクトのフォルダー。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--cocoapods-の依存関係をキャッシュする.html#指示-78678", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CocoaPods の依存関係をキャッシュする \/ 指示 ", 
"snippet" : "追加 Bitrise.io キャッシュ:プル ステップ。 追加 CocoaPods のインストールを実行する ステップ。 追加 Bitrise.io キャッシュ:プッシュ ステップ。 オプションで設定できます アーカイブを圧縮 に 真実 .これは、キャッシュされたフォルダーが大きい場合に便利です。...", 
"body" : "追加 Bitrise.io キャッシュ:プル ステップ。 追加 CocoaPods のインストールを実行する ステップ。 追加 Bitrise.io キャッシュ:プッシュ ステップ。 オプションで設定できます アーカイブを圧縮 に 真実 .これは、キャッシュされたフォルダーが大きい場合に便利です。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--cocoapods-の依存関係をキャッシュする.html#bitrise-yml-78678", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CocoaPods の依存関係をキャッシュする \/ bitrise.yml ", 
"snippet" : "- cache-pull@2: {} - cocoapods-install@2: {} - cache-push@2: {}...", 
"body" : "- cache-pull@2: {}\n- cocoapods-install@2: {}\n- cache-push@2: {} " }, 
{ "title" : "(iOS) App Store Connect \/ TestFlight へのデプロイ ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--app-store-connect---testflight-へのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) App Store Connect \/ TestFlight へのデプロイ ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--app-store-connect---testflight-へのデプロイ.html#説明-78679", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) App Store Connect \/ TestFlight へのデプロイ \/ 説明 ", 
"snippet" : "アプリをアーカイブし、App Store Connect にアップロードして、App Store または TestFlight にリリースします。...", 
"body" : "アプリをアーカイブし、App Store Connect にアップロードして、App Store または TestFlight にリリースします。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--app-store-connect---testflight-へのデプロイ.html#前提条件-78679", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) App Store Connect \/ TestFlight へのデプロイ \/ 前提条件 ", 
"snippet" : "ソース コードが複製され、依存関係 (Cocoapods、Carthage など) がインストールされます。 コード署名が設定されました。見る iOS コード署名 詳細については。 Apple Developer 接続がセットアップされました。見る Apple サービス接続 詳細については。...", 
"body" : "ソース コードが複製され、依存関係 (Cocoapods、Carthage など) がインストールされます。 コード署名が設定されました。見る iOS コード署名 詳細については。 Apple Developer 接続がセットアップされました。見る Apple サービス接続 詳細については。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--app-store-connect---testflight-へのデプロイ.html#指示-78679", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) App Store Connect \/ TestFlight へのデプロイ \/ 指示 ", 
"snippet" : "(オプション) Xcode プロジェクトのビルド番号を設定する ステップ。入力変数を設定します。 Info.plist ファイルのパス ： 例えば、 MyApp\/Info.plist . ビルド番号 ： 例えば、 42 . バージョンナンバー ： 例えば、 1.1 . 追加 Xcode アーカイブ & iOS 用エクスポート ステップ。入力変数を設定します。 プロジェクト パス : デフォルトでは、 $BITRISE_PROJECT_PATH . 図式 : デフォルトで $BITRISE_SCHEME . 配布方法 : に設定する必要があります アプリストア . 追加 App Store Co...", 
"body" : "(オプション) Xcode プロジェクトのビルド番号を設定する ステップ。入力変数を設定します。 Info.plist ファイルのパス ： 例えば、 MyApp\/Info.plist . ビルド番号 ： 例えば、 42 . バージョンナンバー ： 例えば、 1.1 . 追加 Xcode アーカイブ & iOS 用エクスポート ステップ。入力変数を設定します。 プロジェクト パス : デフォルトでは、 $BITRISE_PROJECT_PATH . 図式 : デフォルトで $BITRISE_SCHEME . 配布方法 : に設定する必要があります アプリストア . 追加 App Store Connect へのデプロイ - Application Loader (以前の iTunes Connect) ステップ。入力変数を設定する Bitrise Apple 開発者接続 ： 例えば、 api_key . Deploy to App Store Connect with Deliver (旧 iTunes Connect) のさらに多くのオプション または、 Deliver を使用して App Store Connect にデプロイ (以前の iTunes Connect) 同様に、より多くのオプションを提供します。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--app-store-connect---testflight-へのデプロイ.html#bitrise-yml-78679", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) App Store Connect \/ TestFlight へのデプロイ \/ bitrise.yml ", 
"snippet" : "- set-xcode-build-number@1: inputs: - build_short_version_string: '1.0' - plist_path: BitriseTest\/Info.plist - xcode-archive@4: inputs: - project_path: \"$BITRISE_PROJECT_PATH\" - scheme: \"$BITRISE_SCHEME\" - automatic_code_signing: api_key - distribution_method: app-store - deploy-to-itunesconnect-app...", 
"body" : "- set-xcode-build-number@1:\n inputs:\n - build_short_version_string: '1.0'\n - plist_path: BitriseTest\/Info.plist\n- xcode-archive@4:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\"\n - automatic_code_signing: api_key\n - distribution_method: app-store\n- deploy-to-itunesconnect-application-loader@1:\n inputs:\n - connection: api_key " }, 
{ "title" : "(iOS) CI ワークフローの例 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--ci-ワークフローの例.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CI ワークフローの例 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--ci-ワークフローの例.html#説明-78680", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CI ワークフローの例 \/ 説明 ", 
"snippet" : "iOS アプリのメイン ブランチでのコミットのワークフローの例。ワークフローには次が含まれます。 インストール ココアポッド と カルタゴ 依存関係。 シミュレーターですべての単体テストと UI テストを実行する . テストアプリのビルドと bitrise.io へのアップロード . ビルド ステータスを含む Slack 通知を送信します。 今後のプル リクエスト ビルドのためにキャッシュを埋める...", 
"body" : "iOS アプリのメイン ブランチでのコミットのワークフローの例。ワークフローには次が含まれます。 インストール ココアポッド と カルタゴ 依存関係。 シミュレーターですべての単体テストと UI テストを実行する . テストアプリのビルドと bitrise.io へのアップロード . ビルド ステータスを含む Slack 通知を送信します。 今後のプル リクエスト ビルドのためにキャッシュを埋める " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--ci-ワークフローの例.html#bitrise-yml-78680", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CI ワークフローの例 \/ bitrise.yml ", 
"snippet" : "--- format_version: '11' default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git project_type: ios workflows: ci: steps: - activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {} - cache-pull@2: {} - cocoapods-install@2: {} - carthage@3: inputs: - ...", 
"body" : "---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: ios\nworkflows:\n ci:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@6: {}\n - cache-pull@2: {}\n - cocoapods-install@2: {}\n - carthage@3:\n inputs:\n - carthage_options: \"--use-xcframeworks --platform iOS\"\n - recreate-user-schemes@1:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - xcode-test@4:\n inputs:\n - log_formatter: xcodebuild\n - xcodebuild_options: \"-enableCodeCoverage YES\"\n - xcode-archive@4:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\"\n - automatic_code_signing: apple-id\n - distribution_method: development\n - deploy-to-bitrise-io@2: {}\n - slack@3:\n inputs:\n - channel: \"#build-notifications\"\n - webhook_url: \"$SLACK_WEBHOOK\"\n - cache-push@2: {}\napp:\n envs:\n - opts:\n is_expand: false\n BITRISE_PROJECT_PATH: BitriseTest.xcworkspace\n - opts:\n is_expand: false\n BITRISE_SCHEME: BitriseTest\n - opts:\n is_expand: false\n BITRISE_DISTRIBUTION_METHOD: development\ntrigger_map:\n- push_branch: main\n workflow: ci " }, 
{ "title" : "(iOS) bitrise.io にデプロイ ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--bitrise-io-にデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) bitrise.io にデプロイ ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--bitrise-io-にデプロイ.html#説明-78681", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) bitrise.io にデプロイ \/ 説明 ", 
"snippet" : "アプリをビルドし、Bitrise.io Ship を介してテスターに配布します。...", 
"body" : "アプリをビルドし、Bitrise.io Ship を介してテスターに配布します。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--bitrise-io-にデプロイ.html#前提条件-78681", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) bitrise.io にデプロイ \/ 前提条件 ", 
"snippet" : "コード署名が設定されました。見る iOS コード署名 詳細については。...", 
"body" : "コード署名が設定されました。見る iOS コード署名 詳細については。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--bitrise-io-にデプロイ.html#指示-78681", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) bitrise.io にデプロイ \/ 指示 ", 
"snippet" : "追加 Xcode アーカイブ & iOS 用エクスポート ステップ。入力変数を設定します。 プロジェクト パス : デフォルトでは、 $BITRISE_PROJECT_PATH . 図式 : デフォルトでは、 $BITRISE_SCHEME . 配布方法 : 発達 、 このために また 企業 . 追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ステップ。...", 
"body" : "追加 Xcode アーカイブ & iOS 用エクスポート ステップ。入力変数を設定します。 プロジェクト パス : デフォルトでは、 $BITRISE_PROJECT_PATH . 図式 : デフォルトでは、 $BITRISE_SCHEME . 配布方法 : 発達 、 このために また 企業 . 追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ステップ。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--bitrise-io-にデプロイ.html#bitrise-yml-78681", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) bitrise.io にデプロイ \/ bitrise.yml ", 
"snippet" : "- xcode-archive@4: inputs: - project_path: \"$BITRISE_PROJECT_PATH\" - scheme: \"$BITRISE_SCHEME\" - automatic_code_signing: apple-id - distribution_method: development - deploy-to-bitrise-io@2: {}...", 
"body" : " - xcode-archive@4:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\"\n - automatic_code_signing: apple-id\n - distribution_method: development\n - deploy-to-bitrise-io@2: {} " }, 
{ "title" : "(iOS) プル リクエストのワークフローの例 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--プル-リクエストのワークフローの例.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) プル リクエストのワークフローの例 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--プル-リクエストのワークフローの例.html#説明-78682", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) プル リクエストのワークフローの例 \/ 説明 ", 
"snippet" : "iOS プル リクエスト検証のワークフローの例。ワークフローには次が含まれます。 インストール ココアポッド と カルタゴ 依存関係。 シミュレーターですべての単体テストと UI テストを実行する . テストアプリのビルドと bitrise.io へのアップロード . テスト ビルドの QR コードをプル リクエストに送信する . プル リクエストのワークフローをトリガーします。...", 
"body" : "iOS プル リクエスト検証のワークフローの例。ワークフローには次が含まれます。 インストール ココアポッド と カルタゴ 依存関係。 シミュレーターですべての単体テストと UI テストを実行する . テストアプリのビルドと bitrise.io へのアップロード . テスト ビルドの QR コードをプル リクエストに送信する . プル リクエストのワークフローをトリガーします。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--プル-リクエストのワークフローの例.html#bitrise-yml-78682", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) プル リクエストのワークフローの例 \/ bitrise.yml ", 
"snippet" : "--- format_version: '11' default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git project_type: ios workflows: pull-request: steps: - activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {} - cache-pull@2: {} - cocoapods-install@2: {} - carthage@3: ...", 
"body" : "---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: ios\nworkflows:\n pull-request:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@6: {}\n - cache-pull@2: {}\n - cocoapods-install@2: {}\n - carthage@3:\n inputs:\n - carthage_options: \"--use-xcframeworks --platform iOS\"\n - recreate-user-schemes@1:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - xcode-test@4:\n inputs:\n - log_formatter: xcodebuild\n - xcodebuild_options: \"-enableCodeCoverage YES\"\n - xcode-archive@4:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\"\n - automatic_code_signing: apple-id\n - distribution_method: development\n - deploy-to-bitrise-io@2: {}\n - create-install-page-qr-code@1: {}\n - comment-on-github-pull-request@0:\n inputs:\n - body: |-\n ![QR code]($BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL)\n\n $BITRISE_PUBLIC_INSTALL_PAGE_URL\n - personal_access_token: \"$GITHUB_ACCESS_TOKEN\"\n - cache-push@2: {}\napp:\n envs:\n - opts:\n is_expand: false\n BITRISE_PROJECT_PATH: BitriseTest.xcworkspace\n - opts:\n is_expand: false\n BITRISE_SCHEME: BitriseTest\n - opts:\n is_expand: false\n BITRISE_DISTRIBUTION_METHOD: development\ntrigger_map:\n- pull_request_source_branch: \"*\"\n workflow: pull-request " }, 
{ "title" : "(iOS) Firebase App Distribution へのデプロイ ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--firebase-app-distribution-へのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Firebase App Distribution へのデプロイ ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--firebase-app-distribution-へのデプロイ.html#説明-78683", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Firebase App Distribution へのデプロイ \/ 説明 ", 
"snippet" : "Firebase App Distribution を介してアプリをビルドし、テスターに配布します。...", 
"body" : "Firebase App Distribution を介してアプリをビルドし、テスターに配布します。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--firebase-app-distribution-へのデプロイ.html#前提条件-78683", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Firebase App Distribution へのデプロイ \/ 前提条件 ", 
"snippet" : "正確なバンドル ID が登録されている既存の Firebase プロジェクト。フォローする Firebase ドキュメント 詳細については。 firebase を実行して Firebase からトークンを取得する login:ci ローカル。を参照してください Firebase CLI 詳細については、ドキュメントを参照してください。 このトークンをシークレットとして Bitrise プロジェクトに追加します。 FIREBASE_TOKEN . プロジェクトから Firebase アプリ ID を取得します。 一般設定 ページに移動し、この値を入力変数として [ベータ] Firebase アプ...", 
"body" : "正確なバンドル ID が登録されている既存の Firebase プロジェクト。フォローする Firebase ドキュメント 詳細については。 firebase を実行して Firebase からトークンを取得する login:ci ローカル。を参照してください Firebase CLI 詳細については、ドキュメントを参照してください。 このトークンをシークレットとして Bitrise プロジェクトに追加します。 FIREBASE_TOKEN . プロジェクトから Firebase アプリ ID を取得します。 一般設定 ページに移動し、この値を入力変数として [ベータ] Firebase アプリの配布 ステップ。 コード署名が設定されました。見る iOS コード署名 詳細については。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--firebase-app-distribution-へのデプロイ.html#指示-78683", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Firebase App Distribution へのデプロイ \/ 指示 ", 
"snippet" : "追加 Xcode アーカイブ & iOS 用エクスポート 次のような必要な入力変数をステップ実行して設定します。 図式 、 配布方法 および目的のコード署名方法。 追加 [ベータ] Firebase アプリの配布 次の入力変数をステップ実行して設定します。 Firebase トークン : 前に定義した秘密の環境変数を使用します。 $FIREBASE_TOKEN . Firebase アプリ ID : 詳細については、上記の前提条件セクションを参照してください。 必要に応じて、ステップ入力変数でテスト グループまたは個々のテスターを定義できます。...", 
"body" : "追加 Xcode アーカイブ & iOS 用エクスポート 次のような必要な入力変数をステップ実行して設定します。 図式 、 配布方法 および目的のコード署名方法。 追加 [ベータ] Firebase アプリの配布 次の入力変数をステップ実行して設定します。 Firebase トークン : 前に定義した秘密の環境変数を使用します。 $FIREBASE_TOKEN . Firebase アプリ ID : 詳細については、上記の前提条件セクションを参照してください。 必要に応じて、ステップ入力変数でテスト グループまたは個々のテスターを定義できます。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--firebase-app-distribution-へのデプロイ.html#bitrise-yml-78683", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Firebase App Distribution へのデプロイ \/ bitrise.yml ", 
"snippet" : "- xcode-archive@6: inputs: - distribution_method: development - scheme: # your scheme goes here - automatic_code_signing: api-key - firebase-app-distribution@0: inputs: - firebase_token: $FIREBASE_TOKEN - app: # your app ID from Firebase - testers: email@company.com # optional - groups: qa-team #opt...", 
"body" : "- xcode-archive@6:\n inputs:\n - distribution_method: development\n - scheme: # your scheme goes here\n - automatic_code_signing: api-key\n- firebase-app-distribution@0:\n inputs:\n - firebase_token: $FIREBASE_TOKEN\n - app: # your app ID from Firebase\n - testers: email@company.com # optional\n - groups: qa-team #optional " }, 
{ "title" : "(iOS) 毎晩のワークフローの例 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--毎晩のワークフローの例.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) 毎晩のワークフローの例 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--毎晩のワークフローの例.html#説明-78684", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) 毎晩のワークフローの例 \/ 説明 ", 
"snippet" : "iOS アプリのナイトリー ビルドのワークフローの例。ワークフローには次が含まれます。 インストール ココアポッド と カルタゴ 依存関係。 バージョンとビルド番号の設定 .デフォルトでは、アプリはビルド番号 ( $BITRISE_BUILD_NUMBER ) をバージョン コードとして使用します。 リリース ビルドのビルドと TestFlight へのアップロード . テストアプリのビルドと bitrise.io へのアップロード . テストビルドの QR コードを Slack に送信する . 私たちをチェックしてください ガイド スケジュールされたビルドを実行します。...", 
"body" : "iOS アプリのナイトリー ビルドのワークフローの例。ワークフローには次が含まれます。 インストール ココアポッド と カルタゴ 依存関係。 バージョンとビルド番号の設定 .デフォルトでは、アプリはビルド番号 ( $BITRISE_BUILD_NUMBER ) をバージョン コードとして使用します。 リリース ビルドのビルドと TestFlight へのアップロード . テストアプリのビルドと bitrise.io へのアップロード . テストビルドの QR コードを Slack に送信する . 私たちをチェックしてください ガイド スケジュールされたビルドを実行します。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--毎晩のワークフローの例.html#bitrise-yml-78684", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) 毎晩のワークフローの例 \/ bitrise.yml ", 
"snippet" : "--- format_version: '11' default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git project_type: ios workflows: nightly: steps: - activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {} - cache-pull@2: {} - cocoapods-install@2: {} - carthage@3: input...", 
"body" : "---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: ios\nworkflows:\n nightly:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@6: {}\n - cache-pull@2: {}\n - cocoapods-install@2: {}\n - carthage@3:\n inputs:\n - carthage_options: \"--use-xcframeworks --platform iOS\"\n - set-xcode-build-number@1:\n inputs:\n - build_short_version_string: '1.0'\n - plist_path: BitriseTest\/Info.plist\n - recreate-user-schemes@1:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - xcode-archive@4:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\"\n - automatic_code_signing: apple-id\n - distribution_method: app-store\n - deploy-to-itunesconnect-application-loader@1:\n inputs:\n - connection: apple_id\n - xcode-archive@4:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\"\n - automatic_code_signing: apple-id\n - distribution_method: development\n - deploy-to-bitrise-io@2: {}\n - deploy-to-bitrise-io@2: {}\n - create-install-page-qr-code@1: {}\n - slack@3:\n inputs:\n - channel: \"#build-notifications\"\n - thumb_url: \"$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL\"\n - webhook_url: \"$SLACK_WEBHOOK\"\n - cache-push@2: {}\napp:\n envs:\n - opts:\n is_expand: false\n BITRISE_PROJECT_PATH: BitriseTest.xcworkspace\n - opts:\n is_expand: false\n BITRISE_SCHEME: BitriseTest\n - opts:\n is_expand: false\n BITRISE_DISTRIBUTION_METHOD: development " }, 
{ "title" : "(iOS) 物理デバイスでテストを実行する ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--物理デバイスでテストを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) 物理デバイスでテストを実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--物理デバイスでテストを実行する.html#説明-78685", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) 物理デバイスでテストを実行する \/ 説明 ", 
"snippet" : "物理デバイスで単体テストまたは UI テストを実行します。私たちの デバイス テスト ソリューション に基づいています Firebase テスト ラボ .結果のログ、ビデオ、スクリーンショットは Bitrise で見つけることができます。...", 
"body" : "物理デバイスで単体テストまたは UI テストを実行します。私たちの デバイス テスト ソリューション に基づいています Firebase テスト ラボ .結果のログ、ビデオ、スクリーンショットは Bitrise で見つけることができます。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--物理デバイスでテストを実行する.html#前提条件-78685", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) 物理デバイスでテストを実行する \/ 前提条件 ", 
"snippet" : "ソース コードが複製され、依存関係 (Cocoapods、Carthage など) がインストールされます。 コード署名が設定されました。見る iOS コード署名 詳細については。...", 
"body" : "ソース コードが複製され、依存関係 (Cocoapods、Carthage など) がインストールされます。 コード署名が設定されました。見る iOS コード署名 詳細については。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--物理デバイスでテストを実行する.html#指示-78685", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) 物理デバイスでテストを実行する \/ 指示 ", 
"snippet" : "を追加 iOS のテスト用の Xcode ビルド ステップ。 を追加 [ベータ] iOS デバイスのテスト コード署名のステップとセットアップ。 を追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト テスト結果を テストレポート アドオン。...", 
"body" : "を追加 iOS のテスト用の Xcode ビルド ステップ。 を追加 [ベータ] iOS デバイスのテスト コード署名のステップとセットアップ。 を追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト テスト結果を テストレポート アドオン。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--物理デバイスでテストを実行する.html#bitrise-yml-78685", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) 物理デバイスでテストを実行する \/ bitrise.yml ", 
"snippet" : "- xcode-build-for-test@1: inputs: - automatic_code_signing: api_key - virtual-device-testing-for-ios@1: {} - deploy-to-bitrise-io@2: {}...", 
"body" : "- xcode-build-for-test@1:\n inputs:\n - automatic_code_signing: api_key\n- virtual-device-testing-for-ios@1: {}\n- deploy-to-bitrise-io@2: {} " }, 
{ "title" : "(iOS) シミュレーターでテストを実行する ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--シミュレーターでテストを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) シミュレーターでテストを実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--シミュレーターでテストを実行する.html#説明-78686", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) シミュレーターでテストを実行する \/ 説明 ", 
"snippet" : "シミュレーターで iOS アプリの単体テストまたは UI テストを実行します。...", 
"body" : "シミュレーターで iOS アプリの単体テストまたは UI テストを実行します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--シミュレーターでテストを実行する.html#指示-78686", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) シミュレーターでテストを実行する \/ 指示 ", 
"snippet" : "を追加 iOS の Xcode テスト ステップ。入力変数を設定します。 プロジェクト パス : デフォルト値は $BITRISE_PROJECT_PATH ほとんどの場合、変更する必要はありません。 図式 : デフォルト値は $BITRISE_SCHEME 、この変数は Bitrise にアプリを追加するときに設定したスキームを保存します。必要に応じて別のスキームを指定できますが、共有スキームである必要があります。 デバイス宛先指定子 ： （デフォルト： プラットフォーム=iOS シミュレーター、名前=iPhone 8 Plus、OS=最新 ）。 Xcode UI テスト用の追加シミュレータ...", 
"body" : "を追加 iOS の Xcode テスト ステップ。入力変数を設定します。 プロジェクト パス : デフォルト値は $BITRISE_PROJECT_PATH ほとんどの場合、変更する必要はありません。 図式 : デフォルト値は $BITRISE_SCHEME 、この変数は Bitrise にアプリを追加するときに設定したスキームを保存します。必要に応じて別のスキームを指定できますが、共有スキームである必要があります。 デバイス宛先指定子 ： （デフォルト： プラットフォーム=iOS シミュレーター、名前=iPhone 8 Plus、OS=最新 ）。 Xcode UI テスト用の追加シミュレーターのインストール 使用しているスタックでは利用できない Xcode UI テスト用のシミュレーターが必要な場合は、以下を確認してください。 この記事 ナレッジ ベースのガイドを参照してください。 を追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト s テスト結果を テスト レポート アドオン。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--シミュレーターでテストを実行する.html#bitrise-yml-78686", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) シミュレーターでテストを実行する \/ bitrise.yml ", 
"snippet" : "- xcode-test@4: {} - deploy-to-bitrise-io@2: {}...", 
"body" : "- xcode-test@4: {}\n- deploy-to-bitrise-io@2: {} " }, 
{ "title" : "(iOS) CocoaPods の依存関係をインストールする ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--cocoapods-の依存関係をインストールする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CocoaPods の依存関係をインストールする ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--cocoapods-の依存関係をインストールする.html#説明-78687", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CocoaPods の依存関係をインストールする \/ 説明 ", 
"snippet" : "CocoaPods の依存関係をインストールします。ステップでプロジェクト ファイルではなく、ワークスペースを使用していることを確認してください。これを行うには、次の値を確認します。 $BITRISE_PROJECT_PATH 環境変数。...", 
"body" : "CocoaPods の依存関係をインストールします。ステップでプロジェクト ファイルではなく、ワークスペースを使用していることを確認してください。これを行うには、次の値を確認します。 $BITRISE_PROJECT_PATH 環境変数。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--cocoapods-の依存関係をインストールする.html#指示-78687", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CocoaPods の依存関係をインストールする \/ 指示 ", 
"snippet" : "追加 CocoaPods のインストールを実行する ステップ。 (オプション) Podfile がルートにない場合は、 Podfile パス 入力変数。...", 
"body" : "追加 CocoaPods のインストールを実行する ステップ。 (オプション) Podfile がルートにない場合は、 Podfile パス 入力変数。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--cocoapods-の依存関係をインストールする.html#bitrise-yml-78687", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) CocoaPods の依存関係をインストールする \/ bitrise.yml ", 
"snippet" : "- cocoapods-install@2: {}...", 
"body" : "- cocoapods-install@2: {} " }, 
{ "title" : "(iOS) Carthage の依存関係をインストールする ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--carthage-の依存関係をインストールする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Carthage の依存関係をインストールする ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--carthage-の依存関係をインストールする.html#説明-78688", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Carthage の依存関係をインストールする \/ 説明 ", 
"snippet" : "Carthage の依存関係をインストールします。...", 
"body" : "Carthage の依存関係をインストールします。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--carthage-の依存関係をインストールする.html#指示-78688", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Carthage の依存関係をインストールする \/ 指示 ", 
"snippet" : "追加 カルタゴ ステップ。入力変数を設定します。 Github パーソナル アクセス トークン : GitHub アクセス トークンを シークレット ( $GITHUB_ACCESS_TOKEN ）。 GitHub のレート制限の問題を回避するには、このトークンが必要です。 GitHub ガイドを参照してください。 コマンドラインで使用するアクセス トークンの作成 パーソナル アクセス トークンの作成方法については、こちらをご覧ください。このトークンを作成するときは、すべてのスコープ ボックスをオフにします。このトークンが個人情報へのアクセスを必要とする理由はありません。 (オプション) セッ...", 
"body" : "追加 カルタゴ ステップ。入力変数を設定します。 Github パーソナル アクセス トークン : GitHub アクセス トークンを シークレット ( $GITHUB_ACCESS_TOKEN ）。 GitHub のレート制限の問題を回避するには、このトークンが必要です。 GitHub ガイドを参照してください。 コマンドラインで使用するアクセス トークンの作成 パーソナル アクセス トークンの作成方法については、こちらをご覧ください。このトークンを作成するときは、すべてのスコープ ボックスをオフにします。このトークンが個人情報へのアクセスを必要とする理由はありません。 (オプション) セット carthage コマンドの追加オプション : を参照 カルタゴのドキュメント 使用可能なオプションについては、たとえば、 --use-xcframeworks --platform iOS . ビルドで特定の Carthage バージョンを設定する あなたのプロジェクトが現在私たちのスタックで利用できない Carthage バージョンを必要とする場合は、こちらをチェックしてください。 ビルドで特定の Carthage バージョンを設定する . " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--carthage-の依存関係をインストールする.html#bitrise-yml-78688", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) Carthage の依存関係をインストールする \/ bitrise.yml ", 
"snippet" : "- carthage@3: inputs: - carthage_options: \"--use-xcframeworks --platform iOS\"...", 
"body" : "- carthage@3:\n inputs:\n - carthage_options: \"--use-xcframeworks --platform iOS\" " }, 
{ "title" : "(iOS) リリースワークフローの例 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--リリースワークフローの例.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) リリースワークフローの例 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--リリースワークフローの例.html#説明-78689", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) リリースワークフローの例 \/ 説明 ", 
"snippet" : "iOS アプリのリリース ドラフトを App Store にアップロードするワークフローの例。ワークフローには次が含まれます。 インストール ココアポッド と カルタゴ 依存関係。 バージョン番号の設定 に基づく ビルドに渡される環境変数 ( $VERSION_NUMBER ）。 リリース ビルドのビルドと App Store へのアップロード ....", 
"body" : "iOS アプリのリリース ドラフトを App Store にアップロードするワークフローの例。ワークフローには次が含まれます。 インストール ココアポッド と カルタゴ 依存関係。 バージョン番号の設定 に基づく ビルドに渡される環境変数 ( $VERSION_NUMBER ）。 リリース ビルドのビルドと App Store へのアップロード . " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--リリースワークフローの例.html#bitrise-yml-78689", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) リリースワークフローの例 \/ bitrise.yml ", 
"snippet" : "--- format_version: '11' default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git project_type: ios workflows: release: steps: - activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {} - cocoapods-install@2: {} - carthage@3: inputs: - carthage_optio...", 
"body" : "---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: ios\nworkflows:\n release:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@6: {}\n - cocoapods-install@2: {}\n - carthage@3:\n inputs:\n - carthage_options: \"--use-xcframeworks --platform iOS\"\n - set-xcode-build-number@1:\n inputs:\n - build_short_version_string: \"$VERSION_NUMBER\"\n - build_version: \"$BITRISE_BUILD_NUMBER\"\n - plist_path: BitriseTest\/Info.plist\n - recreate-user-schemes@1:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - xcode-archive@4:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\"\n - automatic_code_signing: apple-id\n - distribution_method: app-store\n - deploy-to-itunesconnect-application-loader@1:\n inputs:\n - connection: apple_id\napp:\n envs:\n - opts:\n is_expand: false\n BITRISE_PROJECT_PATH: BitriseTest.xcworkspace\n - opts:\n is_expand: false\n BITRISE_SCHEME: BitriseTest\n - opts:\n is_expand: false\n BITRISE_DISTRIBUTION_METHOD: development " }, 
{ "title" : "(iOS) ステップ入力を使用して Apple サービス接続資格情報をオーバーライドする ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--ステップ入力を使用して-apple-サービス接続資格情報をオーバーライドする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) ステップ入力を使用して Apple サービス接続資格情報をオーバーライドする ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--ステップ入力を使用して-apple-サービス接続資格情報をオーバーライドする.html#説明-78690", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) ステップ入力を使用して Apple サービス接続資格情報をオーバーライドする \/ 説明 ", 
"snippet" : "で構成された Apple サービス接続資格情報をオーバーライドできます。 アプリの設定 の下の入力を設定することによって App Store Connect 接続のオーバーライド の入力グループ Xcode アーカイブ & iOS 用エクスポート ステップ . これは、チームが複数の App Store アカウントを使用している場合、または単一の Bitrise で複数のアプリを管理している場合に役立ちます。 アプリ に基づいてさまざまな Apple サービス接続を使用したいと考えています。 ワークフロー ....", 
"body" : "で構成された Apple サービス接続資格情報をオーバーライドできます。 アプリの設定 の下の入力を設定することによって App Store Connect 接続のオーバーライド の入力グループ Xcode アーカイブ & iOS 用エクスポート ステップ . これは、チームが複数の App Store アカウントを使用している場合、または単一の Bitrise で複数のアプリを管理している場合に役立ちます。 アプリ に基づいてさまざまな Apple サービス接続を使用したいと考えています。 ワークフロー . " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--ステップ入力を使用して-apple-サービス接続資格情報をオーバーライドする.html#前提条件-78690", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) ステップ入力を使用して Apple サービス接続資格情報をオーバーライドする \/ 前提条件 ", 
"snippet" : "開始する前に、次を使用して生成または取得します App Store Connect : App Store Connect API 秘密鍵。 App Store Connect API キー ID。 App Store Connect API 発行者 ID。 詳細については、こちらをご覧ください App Store Connect API 秘密鍵の作成 ....", 
"body" : "開始する前に、次を使用して生成または取得します App Store Connect : App Store Connect API 秘密鍵。 App Store Connect API キー ID。 App Store Connect API 発行者 ID。 詳細については、こちらをご覧ください App Store Connect API 秘密鍵の作成 . " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--ステップ入力を使用して-apple-サービス接続資格情報をオーバーライドする.html#指示-78690", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) ステップ入力を使用して Apple サービス接続資格情報をオーバーライドする \/ 指示 ", 
"snippet" : "App Store Connect API 秘密鍵ファイル (.p8 ファイル) を 汎用ファイル ストレージ の中に コード署名 タブ。 追加 Xcode アーカイブ & iOS 用エクスポート ステップ (バージョン 4.6.0 以降) をワークフローに追加します。 をセットする 自動コード署名方法 への入力 api-key . 以下のステップ入力を設定します App Store Connect 接続のオーバーライド 入力グループ: App Store Connect API 秘密鍵 : App Store Connect API の秘密鍵 (.p8 ファイル) へのローカル パスまたはリ...", 
"body" : "App Store Connect API 秘密鍵ファイル (.p8 ファイル) を 汎用ファイル ストレージ の中に コード署名 タブ。 追加 Xcode アーカイブ & iOS 用エクスポート ステップ (バージョン 4.6.0 以降) をワークフローに追加します。 をセットする 自動コード署名方法 への入力 api-key . 以下のステップ入力を設定します App Store Connect 接続のオーバーライド 入力グループ: App Store Connect API 秘密鍵 : App Store Connect API の秘密鍵 (.p8 ファイル) へのローカル パスまたはリモート URL。にアップロードした App Store Connect API 秘密鍵ファイル (.p8 ファイル) に接続された、自動生成された環境変数にこの入力を設定します。 汎用ファイル ストレージ ステップ1で。 App Store Connect API キー ID : App Store Connect 認証に使用する秘密鍵 ID。 App Store Connect API 発行者 ID : App Store Connect 認証に使用する秘密鍵発行者 ID。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/iosアプリのワークフローレシピ/-ios--ステップ入力を使用して-apple-サービス接続資格情報をオーバーライドする.html#bitrise-yml-78690", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ iOSアプリのワークフローレシピ \/ (iOS) ステップ入力を使用して Apple サービス接続資格情報をオーバーライドする \/ bitrise.yml ", 
"snippet" : "- xcode-archive@4: inputs: - automatic_code_signing: api-key - api_key_path: \"$BITRISEIO_APP_STORE_CONNECT_API_ID_URL\" - api_key_id: \"$APP_STORE_API_ID\" - api_key_issuer_id: \"$APP_STORE_API_ISSUER_ID\"...", 
"body" : " - xcode-archive@4:\n inputs:\n - automatic_code_signing: api-key\n - api_key_path: \"$BITRISEIO_APP_STORE_CONNECT_API_ID_URL\"\n - api_key_id: \"$APP_STORE_API_ID\"\n - api_key_issuer_id: \"$APP_STORE_API_ISSUER_ID\"\n " }, 
{ "title" : "クロスプラットフォームアプリのワークフローレシピ ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ ", 
"snippet" : "FlutterやReactNativeなどのクロスプラットフォームフレームワークで構築されたアプリのワークフローレシピ。 ワークフローレシピは、一般的なワークフロータスク用の既製のソリューションを提供します。 ここでは、FlutterやReactNativeなどのクロスプラットフォームフレームワークで構築されたアプリのワークフローレシピを見つけることができます。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 bitr...", 
"body" : "FlutterやReactNativeなどのクロスプラットフォームフレームワークで構築されたアプリのワークフローレシピ。 ワークフローレシピは、一般的なワークフロータスク用の既製のソリューションを提供します。 ここでは、FlutterやReactNativeなどのクロスプラットフォームフレームワークで構築されたアプリのワークフローレシピを見つけることができます。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "(React Native) キャッシュの依存関係 (node_modules) ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--キャッシュの依存関係--node_modules-.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) キャッシュの依存関係 (node_modules) ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--キャッシュの依存関係--node_modules-.html#説明-78692", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) キャッシュの依存関係 (node_modules) \/ 説明 ", 
"snippet" : "依存関係のキャッシュを設定します ( node_modules React Native アプリのフォルダー)。...", 
"body" : "依存関係のキャッシュを設定します ( node_modules React Native アプリのフォルダー)。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--キャッシュの依存関係--node_modules-.html#指示-78692", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) キャッシュの依存関係 (node_modules) \/ 指示 ", 
"snippet" : "追加 Bitrise.io キャッシュ:プル ステップ。 次のいずれかを追加します yarn コマンドを実行する または npm コマンドを実行する プロジェクトのセットアップに基づいて、ワークフローに進みます。入力変数を設定します。 をセットする 実行する糸コマンド また 実行する引数を指定した npm コマンド への入力変数 インストール . 設定 node_modules をキャッシュする に はい . 追加 Bitrise.io キャッシュ:プッシュ ステップ。 (オプション) キャッシュを圧縮 への入力変数 真実 .これは、キャッシュ フォルダーが大きく、ビルド時間が遅い場合に役立ち...", 
"body" : "追加 Bitrise.io キャッシュ:プル ステップ。 次のいずれかを追加します yarn コマンドを実行する または npm コマンドを実行する プロジェクトのセットアップに基づいて、ワークフローに進みます。入力変数を設定します。 をセットする 実行する糸コマンド また 実行する引数を指定した npm コマンド への入力変数 インストール . 設定 node_modules をキャッシュする に はい . 追加 Bitrise.io キャッシュ:プッシュ ステップ。 (オプション) キャッシュを圧縮 への入力変数 真実 .これは、キャッシュ フォルダーが大きく、ビルド時間が遅い場合に役立ちます。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--キャッシュの依存関係--node_modules-.html#bitrise-yml-78692", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) キャッシュの依存関係 (node_modules) \/ bitrise.yml ", 
"snippet" : "使用する 糸 : - cache-pull@2: {} - yarn@0: inputs: - cache_local_deps: 'yes' - command: install - cache-push@2: inputs: - compress_archive: 'true' 使用する npm : - cache-pull@2: {} - npm@1: inputs: - cache_local_deps: 'yes' - command: install - cache-push@2: inputs: - compress_archive: 'true'...", 
"body" : "使用する 糸 : - cache-pull@2: {}\n- yarn@0:\n inputs:\n - cache_local_deps: 'yes'\n - command: install\n- cache-push@2:\n inputs:\n - compress_archive: 'true' 使用する npm : - cache-pull@2: {}\n- npm@1:\n inputs:\n - cache_local_deps: 'yes'\n - command: install\n- cache-push@2:\n inputs:\n - compress_archive: 'true' " }, 
{ "title" : "(React Native) Expo: Turtle CLI を使用してビルドする ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--expo--turtle-cli-を使用してビルドする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) Expo: Turtle CLI を使用してビルドする ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--expo--turtle-cli-を使用してビルドする.html#説明-78693", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) Expo: Turtle CLI を使用してビルドする \/ 説明 ", 
"snippet" : "アプリを Expo のサーバーに公開し、iOS App Store を構築する .ipa そしてアンドロイド .aab を使用して Expo プロジェクトからファイル タートル CLI ....", 
"body" : "アプリを Expo のサーバーに公開し、iOS App Store を構築する .ipa そしてアンドロイド .aab を使用して Expo プロジェクトからファイル タートル CLI . " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--expo--turtle-cli-を使用してビルドする.html#前提条件-78693", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) Expo: Turtle CLI を使用してビルドする \/ 前提条件 ", 
"snippet" : "に基づいて、iOS 配布証明書と App Store プロビジョニング プロファイルを生成します。 iOS コード署名ファイルの生成ガイド . 次の手順に従って Android キーストアを生成します。 Android Studio ガイドによる Android コード署名 . できることを確認してください Expo プロジェクトを公開する ローカル。...", 
"body" : "に基づいて、iOS 配布証明書と App Store プロビジョニング プロファイルを生成します。 iOS コード署名ファイルの生成ガイド . 次の手順に従って Android キーストアを生成します。 Android Studio ガイドによる Android コード署名 . できることを確認してください Expo プロジェクトを公開する ローカル。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--expo--turtle-cli-を使用してビルドする.html#指示-78693", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) Expo: Turtle CLI を使用してビルドする \/ 指示 ", 
"snippet" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ。 プロジェクトの iOS 配布証明書と App Store プロビジョニング プロファイルがアップロードされていることを確認します。 そうでない場合は、 プロビジョニング プロファイルを追加 そしてその コード署名用の証明書 (.p12 ファイル) を追加する 、 それぞれ。 プロジェクトの Android キーストア ファイルがアップロードされていることを確認します。 そうでない場合は、キーストア ファイルを アップロードファイル (最大 5 MB) のフィールド And...", 
"body" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ。 プロジェクトの iOS 配布証明書と App Store プロビジョニング プロファイルがアップロードされていることを確認します。 そうでない場合は、 プロビジョニング プロファイルを追加 そしてその コード署名用の証明書 (.p12 ファイル) を追加する 、 それぞれ。 プロジェクトの Android キーストア ファイルがアップロードされていることを確認します。 そうでない場合は、キーストア ファイルを アップロードファイル (最大 5 MB) のフィールド Android キーストア ファイル セクション。 に行く シークレット タブ。 シークレットの作成 ( IOS_DEVELOPMENT_TEAM ) プロジェクトの証明書とプロビジョニング プロファイルで発行された iOS 開発チームの ID を使用します。 公開に使用する Expo アカウントのユーザー名とパスワードを保存します。 EXPO_USERNAME と EXPO_PASSWORD シークレット . に移動します bitrise.yml タブ。 コピーペースト envs から bitrise.yml 以下をワークフローに追加します。 コピーペースト steps から bitrise.yml 以下をワークフローに追加します。 構築された .ipa と .aab ファイルは経由で公開されます BITRISE_IPA_PATH と BITRISE_AAB_PATH 環境変数。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--expo--turtle-cli-を使用してビルドする.html#bitrise-yml-78693", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) Expo: Turtle CLI を使用してビルドする \/ bitrise.yml ", 
"snippet" : "turtle_build: envs: - KEYSTORE_PATH: \/tmp\/keystore.jks - KEYSTORE_ALIAS: $BITRISEIO_ANDROID_KEYSTORE_ALIAS - EXPO_ANDROID_KEYSTORE_PASSWORD: $BITRISEIO_ANDROID_KEYSTORE_PASSWORD - EXPO_ANDROID_KEY_PASSWORD: $BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD - PROFILE_PATH: \/tmp\/profile.mobileprovision...", 
"body" : " turtle_build:\n envs:\n - KEYSTORE_PATH: \/tmp\/keystore.jks\n - KEYSTORE_ALIAS: $BITRISEIO_ANDROID_KEYSTORE_ALIAS\n - EXPO_ANDROID_KEYSTORE_PASSWORD: $BITRISEIO_ANDROID_KEYSTORE_PASSWORD\n - EXPO_ANDROID_KEY_PASSWORD: $BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD\n - PROFILE_PATH: \/tmp\/profile.mobileprovision\n - CERTIFICATE_PATH: \/tmp\/certificate.p12\n - EXPO_IOS_DIST_P12_PASSWORD: $BITRISE_CERTIFICATE_PASSPHRASE\n # Define these in your secrets\n - IOS_DEVELOPMENT_TEAM: $IOS_DEVELOPMENT_TEAM\n - EXPO_USERNAME: $EXPO_USERNAME\n - EXPO_PASSWORD: $EXPO_PASSWORD\n steps:\n - script@1:\n title: Install dependencies\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n set -ex\n\n node --version\n fastlane --version\n\n npm install -g turtle-cli\n turtle --version\n\n npm install -g expo-cli\n expo --version\n - file-downloader@1:\n title: Download Android Keystore\n inputs:\n - destination: $KEYSTORE_PATH\n - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n - file-downloader@1:\n title: Download iOS Certificate\n inputs:\n - destination: $CERTIFICATE_PATH\n - source: $BITRISE_CERTIFICATE_URL\n - file-downloader@1:\n title: Download iOS Provisioning Profile\n inputs:\n - destination: $PROFILE_PATH\n - source: $BITRISE_PROVISION_URL\n - npm@1:\n title: Install project dependencies\n inputs:\n - command: install\n - set-java-version@1:\n title: Set Java version to Java 8\n inputs:\n - set_java_version: \"8\"\n - script@1:\n title: Run Expo publish\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n set -ex\n\n expo login -u $EXPO_USERNAME -p $EXPO_PASSWORD --non-interactive\n expo publish\n - script@1:\n title: Run Turtle build\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n set -ex\n\n turtle setup:android\n aab_path=$BITRISE_DEPLOY_DIR\/expo-project.aab\n turtle build:android --type app-bundle --keystore-path $KEYSTORE_PATH --keystore-alias $KEYSTORE_ALIAS -o $aab_path\n envman add --key BITRISE_AAB_PATH --value $aab_path\n\n turtle setup:ios\n ipa_path=$BITRISE_DEPLOY_DIR\/expo-project.ipa\n turtle build:ios --team-id $IOS_DEVELOPMENT_TEAM --dist-p12-path $CERTIFICATE_PATH --provisioning-profile-path $PROFILE_PATH -o $ipa_path\n envman add --key BITRISE_IPA_PATH --value $ipa_path " }, 
{ "title" : "(React Native) テストを実行する ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--テストを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) テストを実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--テストを実行する.html#説明-78694", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) テストを実行する \/ 説明 ", 
"snippet" : "たとえば、Jest でテストを実行します。...", 
"body" : "たとえば、Jest でテストを実行します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--テストを実行する.html#指示-78694", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) テストを実行する \/ 指示 ", 
"snippet" : "次のいずれかを追加します yarn コマンドを実行する または npm コマンドを実行する プロジェクトのセットアップに基づいて、ワークフローに進みます。 をセットする 実行する糸コマンド また 実行する引数を指定した npm コマンド への入力変数 テスト ....", 
"body" : "次のいずれかを追加します yarn コマンドを実行する または npm コマンドを実行する プロジェクトのセットアップに基づいて、ワークフローに進みます。 をセットする 実行する糸コマンド また 実行する引数を指定した npm コマンド への入力変数 テスト . " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--テストを実行する.html#bitrise-yml-78694", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) テストを実行する \/ bitrise.yml ", 
"snippet" : "使用する 糸 : - yarn@0: inputs: - command: test 使用する npm : - npm@1: inputs: - command: test...", 
"body" : "使用する 糸 : - yarn@0:\n inputs:\n - command: test 使用する npm : - npm@1:\n inputs:\n - command: test " }, 
{ "title" : "(React Native) 依存関係をインストールする ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--依存関係をインストールする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) 依存関係をインストールする ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--依存関係をインストールする.html#説明-78695", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) 依存関係をインストールする \/ 説明 ", 
"snippet" : "yarn または npm を使用して依存関係をインストールします。...", 
"body" : "yarn または npm を使用して依存関係をインストールします。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--依存関係をインストールする.html#指示-78695", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) 依存関係をインストールする \/ 指示 ", 
"snippet" : "次のいずれかを追加します yarn コマンドを実行する または npm コマンドを実行する プロジェクトのセットアップに基づいて、ワークフローに進みます。 をセットする 実行する糸コマンド また 実行する引数を指定した npm コマンド への入力変数 インストール ....", 
"body" : "次のいずれかを追加します yarn コマンドを実行する または npm コマンドを実行する プロジェクトのセットアップに基づいて、ワークフローに進みます。 をセットする 実行する糸コマンド また 実行する引数を指定した npm コマンド への入力変数 インストール . " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-react-native--依存関係をインストールする.html#bitrise-yml-78695", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (React Native) 依存関係をインストールする \/ bitrise.yml ", 
"snippet" : "使用する 糸 : - yarn@0: inputs: - command: install 使用する npm : - npm@1: inputs: - command: install...", 
"body" : "使用する 糸 : - yarn@0:\n inputs:\n - command: install 使用する npm : - npm@1:\n inputs:\n - command: install " }, 
{ "title" : "(フラッター) テストを実行する ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-フラッター--テストを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (フラッター) テストを実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-フラッター--テストを実行する.html#説明-78696", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (フラッター) テストを実行する \/ 説明 ", 
"snippet" : "Flutter プロジェクトで任意のテストを実行します。...", 
"body" : "Flutter プロジェクトで任意のテストを実行します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-フラッター--テストを実行する.html#指示-78696", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (フラッター) テストを実行する \/ 指示 ", 
"snippet" : "追加 フラッターテスト ワークフローに進みます。入力変数を設定します。 プロジェクトの場所 ： 例えば、 $BITRISE_FLUTTER_PROJECT_LOCATION . ワークフロー エディターまたはステップの説明で、オプションの入力を確認してください。 を追加 Bitrise.io にデプロイする テスト結果をテスト レポート アドオンで利用できるようにする手順。...", 
"body" : "追加 フラッターテスト ワークフローに進みます。入力変数を設定します。 プロジェクトの場所 ： 例えば、 $BITRISE_FLUTTER_PROJECT_LOCATION . ワークフロー エディターまたはステップの説明で、オプションの入力を確認してください。 を追加 Bitrise.io にデプロイする テスト結果をテスト レポート アドオンで利用できるようにする手順。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-フラッター--テストを実行する.html#bitrise-yml-78696", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (フラッター) テストを実行する \/ bitrise.yml ", 
"snippet" : "- flutter-test@1: inputs: - project_location: \"$BITRISE_FLUTTER_PROJECT_LOCATION\" - deploy-to-bitrise-io@2: {}...", 
"body" : "- flutter-test@1:\n inputs:\n - project_location: \"$BITRISE_FLUTTER_PROJECT_LOCATION\"\n- deploy-to-bitrise-io@2: {} " }, 
{ "title" : "(Flutter) Flutter SDK をインストール ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-flutter--flutter-sdk-をインストール.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (Flutter) Flutter SDK をインストール ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-flutter--flutter-sdk-をインストール.html#説明-78697", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (Flutter) Flutter SDK をインストール \/ 説明 ", 
"snippet" : "Flutter の最新の安定版\/ベータ版または特定のバージョンをインストールします。...", 
"body" : "Flutter の最新の安定版\/ベータ版または特定のバージョンをインストールします。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-flutter--flutter-sdk-をインストール.html#指示-78697", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (Flutter) Flutter SDK をインストール \/ 指示 ", 
"snippet" : "追加 フラッターのインストール ステップ。キャッシュ プル ステップの前にこのステップを使用して、キャッシュが正しく機能することを確認します。 最新の安定版\/ベータ版または特定のバージョンをインストールします。 デフォルトでは、Step は最新の安定バージョンをインストールします。 最新のベータ版をインストールするには、Flutter SDK git リポジトリ バージョンの入力を beta に設定します。 特定のバージョンをインストールするには、Flutter SDK インストール バンドルの URL 入力を設定します。のリストを見つけることができます Flutter インストール バンドル...", 
"body" : "追加 フラッターのインストール ステップ。キャッシュ プル ステップの前にこのステップを使用して、キャッシュが正しく機能することを確認します。 最新の安定版\/ベータ版または特定のバージョンをインストールします。 デフォルトでは、Step は最新の安定バージョンをインストールします。 最新のベータ版をインストールするには、Flutter SDK git リポジトリ バージョンの入力を beta に設定します。 特定のバージョンをインストールするには、Flutter SDK インストール バンドルの URL 入力を設定します。のリストを見つけることができます Flutter インストール バンドルはこちら .スタック (MacOS または Linux) に基づいてバンドルを設定してください。 ベスト プラクティス 特定のバージョンを使用することをお勧めします。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-flutter--flutter-sdk-をインストール.html#bitrise-yml-78697", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (Flutter) Flutter SDK をインストール \/ bitrise.yml ", 
"snippet" : "特定のバージョン: --- - flutter-installer@0: inputs: - installation_bundle_url: https:\/\/storage.googleapis.com\/flutter_infra_release\/releases\/stable\/macos\/flutter_macos_2.5.3-stable.zip 最新の安定版: - flutter-installer@0: {} 最新のベータ版: - flutter-installer@0: inputs: - version: beta...", 
"body" : "特定のバージョン: ---\n- flutter-installer@0:\n inputs:\n - installation_bundle_url: https:\/\/storage.googleapis.com\/flutter_infra_release\/releases\/stable\/macos\/flutter_macos_2.5.3-stable.zip 最新の安定版: - flutter-installer@0: {} 最新のベータ版: - flutter-installer@0:\n inputs:\n - version: beta " }, 
{ "title" : "(フラッター) Dart アナライザーを実行する ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-フラッター--dart-アナライザーを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (フラッター) Dart アナライザーを実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-フラッター--dart-アナライザーを実行する.html#説明-78698", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (フラッター) Dart アナライザーを実行する \/ 説明 ", 
"snippet" : "Flutter アプリの Dart アナライザーを実行します。...", 
"body" : "Flutter アプリの Dart アナライザーを実行します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-フラッター--dart-アナライザーを実行する.html#指示-78698", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (フラッター) Dart アナライザーを実行する \/ 指示 ", 
"snippet" : "追加 フラッター分析 ワークフローに進みます。...", 
"body" : "追加 フラッター分析 ワークフローに進みます。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/クロスプラットフォームアプリのワークフローレシピ/-フラッター--dart-アナライザーを実行する.html#bitrise-yml-78698", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ クロスプラットフォームアプリのワークフローレシピ \/ (フラッター) Dart アナライザーを実行する \/ bitrise.yml ", 
"snippet" : "- flutter-analyze@0: inputs: - project_location: $BITRISE_FLUTTER_PROJECT_LOCATION...", 
"body" : "- flutter-analyze@0:\n inputs:\n - project_location: $BITRISE_FLUTTER_PROJECT_LOCATION " }, 
{ "title" : "一般的なワークフローレシピ ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ ", 
"snippet" : "プラットフォームタイプ（iOS、Android、Flutterなど）に固有ではないが、CI\/CDプロセスおよび一般的なBitriseの使用に役立つワークフローレシピ。 ワークフローレシピは、一般的なワークフロータスク用の既製のソリューションを提供します。ワークフロー全体の例とともに、さまざまなレシピです。 ここでは、プラットフォームタイプ（iOS、Android、Flutterなど）に固有ではないが、CI \/ CDプロセスおよび一般的なBitriseの使用に役立つワークフローレシピを見つけることができます。...", 
"body" : "プラットフォームタイプ（iOS、Android、Flutterなど）に固有ではないが、CI\/CDプロセスおよび一般的なBitriseの使用に役立つワークフローレシピ。 ワークフローレシピは、一般的なワークフロータスク用の既製のソリューションを提供します。ワークフロー全体の例とともに、さまざまなレシピです。 ここでは、プラットフォームタイプ（iOS、Android、Flutterなど）に固有ではないが、CI \/ CDプロセスおよび一般的なBitriseの使用に役立つワークフローレシピを見つけることができます。 " }, 
{ "title" : "(iOS\/Android) ビルド ステータスを Slack に送信する ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--ビルド-ステータスを-slack-に送信する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) ビルド ステータスを Slack に送信する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--ビルド-ステータスを-slack-に送信する.html#説明-78700", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) ビルド ステータスを Slack に送信する \/ 説明 ", 
"snippet" : "ビルドが完了したら、ビルド ステータスを含むメッセージを Slack に送信します。...", 
"body" : "ビルドが完了したら、ビルド ステータスを含むメッセージを Slack に送信します。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--ビルド-ステータスを-slack-に送信する.html#前提条件-78700", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) ビルド ステータスを Slack に送信する \/ 前提条件 ", 
"snippet" : "Slack Webhook をセットアップして、 環境変数 （例えば、 $SLACK_WEBHOOK ）。見る Slack統合の構成 詳細については。...", 
"body" : "Slack Webhook をセットアップして、 環境変数 （例えば、 $SLACK_WEBHOOK ）。見る Slack統合の構成 詳細については。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--ビルド-ステータスを-slack-に送信する.html#指示-78700", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) ビルド ステータスを Slack に送信する \/ 指示 ", 
"snippet" : "追加 Slack メッセージを送信する ステップ。入力変数を設定します。 Slack Webhook URL ： 例えば、 $SLACK_WEBHOOK . 対象の Slack チャネル、グループ、またはユーザー名 ： 例えば、 #ビルド通知 . ステップのドキュメントまたはワークフロー エディターで他のオプションを確認してください。...", 
"body" : "追加 Slack メッセージを送信する ステップ。入力変数を設定します。 Slack Webhook URL ： 例えば、 $SLACK_WEBHOOK . 対象の Slack チャネル、グループ、またはユーザー名 ： 例えば、 #ビルド通知 . ステップのドキュメントまたはワークフロー エディターで他のオプションを確認してください。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--ビルド-ステータスを-slack-に送信する.html#bitrise-yml-78700", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) ビルド ステータスを Slack に送信する \/ bitrise.yml ", 
"snippet" : "- slack@3: inputs: - channel: \"#build-notifications\" - webhook_url: $SLACK_WEBHOOK...", 
"body" : "- slack@3:\n inputs:\n - channel: \"#build-notifications\"\n - webhook_url: $SLACK_WEBHOOK " }, 
{ "title" : "Git リポジトリのクローン ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/git-リポジトリのクローン.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ Git リポジトリのクローン ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/git-リポジトリのクローン.html#説明-78701", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ Git リポジトリのクローン \/ 説明 ", 
"snippet" : "Git リポジトリのクローンを作成します。...", 
"body" : "Git リポジトリのクローンを作成します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/git-リポジトリのクローン.html#指示-78701", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ Git リポジトリのクローン \/ 指示 ", 
"snippet" : "追加 SSH キー (RSA 秘密キー) をアクティブ化 ステップ。これにより、ビルド VM 上の Git クライアントがプライベート リポジトリにアクセスできるようになります。 追加 Git クローン リポジトリ ステップ。 ステップのドキュメントまたはワークフロー エディターで他のオプションを確認してください。...", 
"body" : "追加 SSH キー (RSA 秘密キー) をアクティブ化 ステップ。これにより、ビルド VM 上の Git クライアントがプライベート リポジトリにアクセスできるようになります。 追加 Git クローン リポジトリ ステップ。 ステップのドキュメントまたはワークフロー エディターで他のオプションを確認してください。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/git-リポジトリのクローン.html#bitrise-yml-78701", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ Git リポジトリのクローン \/ bitrise.yml ", 
"snippet" : "- activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {}...", 
"body" : "- activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n- git-clone@6: {} " }, 
{ "title" : "Gitflow リリース ブランチのワークフローの例 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/gitflow-リリース-ブランチのワークフローの例.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ Gitflow リリース ブランチのワークフローの例 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/gitflow-リリース-ブランチのワークフローの例.html#説明-78702", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ Gitflow リリース ブランチのワークフローの例 \/ 説明 ", 
"snippet" : "特定のバージョンの Gitflow リリース ブランチを作成するワークフローの例。バージョンは、 環境変数 ワークフロー用。...", 
"body" : "特定のバージョンの Gitflow リリース ブランチを作成するワークフローの例。バージョンは、 環境変数 ワークフロー用。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/gitflow-リリース-ブランチのワークフローの例.html#前提条件-78702", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ Gitflow リリース ブランチのワークフローの例 \/ 前提条件 ", 
"snippet" : "Bitriseが持っていることを確認してください 書きます リポジトリへのアクセス 手動で SSH キーを追加する と 書きます GitHub の許可。...", 
"body" : "Bitriseが持っていることを確認してください 書きます リポジトリへのアクセス 手動で SSH キーを追加する と 書きます GitHub の許可。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/gitflow-リリース-ブランチのワークフローの例.html#bitrise-yml-78702", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ Gitflow リリース ブランチのワークフローの例 \/ bitrise.yml ", 
"snippet" : "# Run the workflow with $VERSION env set up to, for examaple, '2.4.3' create-release-branch: steps: - activate-ssh-key@4: run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}' - git-clone@6: {} - script@1: inputs: - content: |- #!\/usr\/bin\/env bash # fail if any commands fails set -e # debug log set -x ...", 
"body" : "# Run the workflow with $VERSION env set up to, for examaple, '2.4.3'\ncreate-release-branch:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@6: {}\n - script@1:\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n # fail if any commands fails\n set -e\n # debug log\n set -x\n\n git checkout -b release-$VERSION\n git push origin release-$VERSION " }, 
{ "title" : "(iOS\/Android) QR コードを Slack に送信する ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--qr-コードを-slack-に送信する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) QR コードを Slack に送信する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--qr-コードを-slack-に送信する.html#説明-78703", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) QR コードを Slack に送信する \/ 説明 ", 
"snippet" : "bitrise.io にアップロードした iOS または Android ビルドの QR コードを Slack に送信します。...", 
"body" : "bitrise.io にアップロードした iOS または Android ビルドの QR コードを Slack に送信します。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--qr-コードを-slack-に送信する.html#前提条件-78703", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) QR コードを Slack に送信する \/ 前提条件 ", 
"snippet" : "iOS または Android アプリをアーカイブしました。 Slack Webhook をセットアップして、 環境変数 （例えば、 $SLACK_WEBHOOK ）。見る Slack統合の構成 詳細については。...", 
"body" : "iOS または Android アプリをアーカイブしました。 Slack Webhook をセットアップして、 環境変数 （例えば、 $SLACK_WEBHOOK ）。見る Slack統合の構成 詳細については。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--qr-コードを-slack-に送信する.html#指示-78703", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) QR コードを Slack に送信する \/ 指示 ", 
"snippet" : "追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ステップ。 追加 インストールページのQRコードを作成 ステップ。 追加 Slack メッセージを送信する ステップ。入力変数を設定します。 Slack Webhook URL ： 例えば、 $SLACK_WEBHOOK . 対象の Slack チャネル、グループ、またはユーザー名 ： 例えば、 #ビルド通知 . サムネイルとして表示される画像ファイルへの URL : $BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL ....", 
"body" : "追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ステップ。 追加 インストールページのQRコードを作成 ステップ。 追加 Slack メッセージを送信する ステップ。入力変数を設定します。 Slack Webhook URL ： 例えば、 $SLACK_WEBHOOK . 対象の Slack チャネル、グループ、またはユーザー名 ： 例えば、 #ビルド通知 . サムネイルとして表示される画像ファイルへの URL : $BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL . " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/-ios-android--qr-コードを-slack-に送信する.html#bitrise-yml-78703", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ (iOS\/Android) QR コードを Slack に送信する \/ bitrise.yml ", 
"snippet" : "- deploy-to-bitrise-io@2: {} - create-install-page-qr-code@1: {} - slack@3: inputs: - channel: \"#build-notifications\" - thumb_url: $BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL - webhook_url: $SLACK_WEBHOOK...", 
"body" : "- deploy-to-bitrise-io@2: {}\n- create-install-page-qr-code@1: {}\n- slack@3:\n inputs:\n - channel: \"#build-notifications\"\n - thumb_url: $BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL\n - webhook_url: $SLACK_WEBHOOK " }, 
{ "title" : "親ワークフローからビルドを開始する ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/親ワークフローからビルドを開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ 親ワークフローからビルドを開始する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/親ワークフローからビルドを開始する.html#説明-78704", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ 親ワークフローからビルドを開始する \/ 説明 ", 
"snippet" : "親ワークフローから指定されたワークフローと並行して 1 つ以上のビルドを開始します。ステップを追加して、完了を待つことができます。 さまざまなアプリのビルドを開始する この方法を使用すると、同じアプリのビルドのみを開始できます。別のアプリの別のビルドを開始したい場合は、 Bitrise ワークフローのトリガー ステップ。...", 
"body" : "親ワークフローから指定されたワークフローと並行して 1 つ以上のビルドを開始します。ステップを追加して、完了を待つことができます。 さまざまなアプリのビルドを開始する この方法を使用すると、同じアプリのビルドのみを開始できます。別のアプリの別のビルドを開始したい場合は、 Bitrise ワークフローのトリガー ステップ。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/親ワークフローからビルドを開始する.html#前提条件-78704", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ 親ワークフローからビルドを開始する \/ 前提条件 ", 
"snippet" : "有効な Bitrise API キーがあることを確認してください シークレット ( $BITRISE_API_KEY ）。見る パーソナルアクセストークン 詳細については。 並行して実行する 1 つまたは複数のワークフロー (たとえば、 workflow-1 と workflow-2 ）。...", 
"body" : "有効な Bitrise API キーがあることを確認してください シークレット ( $BITRISE_API_KEY ）。見る パーソナルアクセストークン 詳細については。 並行して実行する 1 つまたは複数のワークフロー (たとえば、 workflow-1 と workflow-2 ）。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/親ワークフローからビルドを開始する.html#指示-78704", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ 親ワークフローからビルドを開始する \/ 指示 ", 
"snippet" : "を追加 Bitrise スタート ビルド ステップ。次の入力変数を設定します。 ワークフロー : 開始するワークフロー。ワークフローは 1 行に 1 つだけ挿入してください。 Bitrise アクセストークン : $BITRISE_API_KEY (オプション) トリガーされたワークフローが親ワークフローで実行されている間に、並行して実行する任意のステップを追加します。 (オプション) Bitrise ビルド待ち ステップ。をセットする Bitrise アクセストークン 入力変数: $BITRISE_API_KEY...", 
"body" : "を追加 Bitrise スタート ビルド ステップ。次の入力変数を設定します。 ワークフロー : 開始するワークフロー。ワークフローは 1 行に 1 つだけ挿入してください。 Bitrise アクセストークン : $BITRISE_API_KEY (オプション) トリガーされたワークフローが親ワークフローで実行されている間に、並行して実行する任意のステップを追加します。 (オプション) Bitrise ビルド待ち ステップ。をセットする Bitrise アクセストークン 入力変数: $BITRISE_API_KEY " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/親ワークフローからビルドを開始する.html#bitrise-yml-78704", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ 親ワークフローからビルドを開始する \/ bitrise.yml ", 
"snippet" : "parent-workflow: steps: - build-router-start@0: inputs: - workflows: |- workflow-1 workflow-2 - access_token: \"$BITRISE_API_KEY\" - script@1: inputs: - content: echo \"Doing something else...\" - build-router-wait@0: inputs: - access_token: \"$BITRISE_API_KEY\"...", 
"body" : "parent-workflow:\n steps:\n - build-router-start@0:\n inputs:\n - workflows: |-\n workflow-1\n workflow-2\n - access_token: \"$BITRISE_API_KEY\"\n - script@1:\n inputs:\n - content: echo \"Doing something else...\"\n - build-router-wait@0:\n inputs:\n - access_token: \"$BITRISE_API_KEY\" " }, 
{ "title" : "プル リクエスト ビルドのキャッシュ効率の最適化 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/プル-リクエスト-ビルドのキャッシュ効率の最適化.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ プル リクエスト ビルドのキャッシュ効率の最適化 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/プル-リクエスト-ビルドのキャッシュ効率の最適化.html#説明-78705", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ プル リクエスト ビルドのキャッシュ効率の最適化 \/ 説明 ", 
"snippet" : "Bitrise キャッシングはブランチベースです。特定のブランチでキャッシュを最新の状態に保つことで、キャッシュの効率を最適化できます。 ブランチにまだキャッシュ エントリがない場合は、リポジトリのデフォルト ブランチがフォールバックとして使用され、キャッシュ エントリがプルされます。プル リクエストがメイン ブランチを対象とする場合、このフォールバック メカニズムを使用してデフォルト ブランチのキャッシュがプルされます (プル リクエスト ブランチにはまだキャッシュ エントリがないため)。これは、プル リクエストの送信先がデフォルト ブランチであり、デフォルト ブランチのキャッシュが最新であ...", 
"body" : "Bitrise キャッシングはブランチベースです。特定のブランチでキャッシュを最新の状態に保つことで、キャッシュの効率を最適化できます。 ブランチにまだキャッシュ エントリがない場合は、リポジトリのデフォルト ブランチがフォールバックとして使用され、キャッシュ エントリがプルされます。プル リクエストがメイン ブランチを対象とする場合、このフォールバック メカニズムを使用してデフォルト ブランチのキャッシュがプルされます (プル リクエスト ブランチにはまだキャッシュ エントリがないため)。これは、プル リクエストの送信先がデフォルト ブランチであり、デフォルト ブランチのキャッシュが最新である場合でも、キャッシングが効率的であることを意味します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/プル-リクエスト-ビルドのキャッシュ効率の最適化.html#指示-78705", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ プル リクエスト ビルドのキャッシュ効率の最適化 \/ 指示 ", 
"snippet" : "デフォルト ブランチで頻繁に実行されるすべてのワークフローに、 Bitrise.io キャッシュ:プッシュ ステップ。これにより、成功したビルドのコンテンツでキャッシュが最新の状態に保たれます。次の 2 つの方法のいずれかをお勧めします。 デフォルト ブランチでのプッシュ イベントによってトリガーされる、デフォルト ブランチへのすべてのコミット (マージなど) の後にワークフローを実行します。 スケジュールされたナイトリー ビルドとしてワークフローを毎日実行します。これにより、デフォルト ブランチの最新の状態に基づいてコンテンツがプッシュされ、キャッシュがウォームアップされます。 (オプション...", 
"body" : "デフォルト ブランチで頻繁に実行されるすべてのワークフローに、 Bitrise.io キャッシュ:プッシュ ステップ。これにより、成功したビルドのコンテンツでキャッシュが最新の状態に保たれます。次の 2 つの方法のいずれかをお勧めします。 デフォルト ブランチでのプッシュ イベントによってトリガーされる、デフォルト ブランチへのすべてのコミット (マージなど) の後にワークフローを実行します。 スケジュールされたナイトリー ビルドとしてワークフローを毎日実行します。これにより、デフォルト ブランチの最新の状態に基づいてコンテンツがプッシュされ、キャッシュがウォームアップされます。 (オプション) キャッシュを圧縮 への入力変数 真実 .これは、キャッシュ フォルダーが大きく、ビルド時間が遅い場合に役立ちます。 プル リクエストを実行するワークフローに、 Bitrise.io キャッシュ:プル ステップ。 これにより、デフォルト ブランチで成功したビルドからキャッシュがプルされます。セキュリティと効率の理由から、プル リクエスト ビルドのキャッシュにコンテンツをプッシュすることはお勧めしません。ワークフローに Bitrise.io キャッシュ:プッシュ ステップ、プル リクエスト ビルドではデフォルトでスキップされます。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/プル-リクエスト-ビルドのキャッシュ効率の最適化.html#bitrise-yml-78705", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ プル リクエスト ビルドのキャッシュ効率の最適化 \/ bitrise.yml ", 
"snippet" : "デフォルト ブランチで実行されるワークフロー: # Add steps that produce the cached content (e.g. dependecies, builds) - cache-push@2: {} プル リクエストのワークフロー: - cache-pull@2: {} # Add steps that can utilise the restored cache content...", 
"body" : "デフォルト ブランチで実行されるワークフロー: # Add steps that produce the cached content (e.g. dependecies, builds)\n\n- cache-push@2: {} プル リクエストのワークフロー: - cache-pull@2: {}\n\n# Add steps that can utilise the restored cache content " }, 
{ "title" : "GitHub プル リクエスト: ビルドの QR コードを送信する ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/github-プル-リクエスト--ビルドの-qr-コードを送信する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ GitHub プル リクエスト: ビルドの QR コードを送信する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/github-プル-リクエスト--ビルドの-qr-コードを送信する.html#説明-78706", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ GitHub プル リクエスト: ビルドの QR コードを送信する \/ 説明 ", 
"snippet" : "bitrise.io にアップロードされたビルドの QR コードを添えて、GitHub プル リクエストにコメントを送信します。...", 
"body" : "bitrise.io にアップロードされたビルドの QR コードを添えて、GitHub プル リクエストにコメントを送信します。 " }, 
{ "title" : "前提条件 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/github-プル-リクエスト--ビルドの-qr-コードを送信する.html#前提条件-78706", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ GitHub プル リクエスト: ビルドの QR コードを送信する \/ 前提条件 ", 
"snippet" : "iOS または Android アプリをアーカイブしました。 GitHub の個人用アクセス トークンを持っています。 repo スコープであり、それを ひみつ ( $GITHUB_ACCESS_TOKEN ) を Bitrise アプリに追加します。...", 
"body" : "iOS または Android アプリをアーカイブしました。 GitHub の個人用アクセス トークンを持っています。 repo スコープであり、それを ひみつ ( $GITHUB_ACCESS_TOKEN ) を Bitrise アプリに追加します。 " }, 
{ "title" : "指示 ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/github-プル-リクエスト--ビルドの-qr-コードを送信する.html#指示-78706", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ GitHub プル リクエスト: ビルドの QR コードを送信する \/ 指示 ", 
"snippet" : "追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ステップ。 追加 インストールページのQRコードを作成 ステップ。 追加 GitHub プル リクエストへのコメント 次の入力変数をステップ実行して設定します。 GitHub パーソナル アクセス トークン : 以前に作成した Secret に設定し、 $GITHUB_ACCESS_TOKEN . 体 : 以下を追加します。 ![QR code]($BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL) $BITRISE_PUBLIC_INSTALL_PAGE_URL...", 
"body" : "追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ステップ。 追加 インストールページのQRコードを作成 ステップ。 追加 GitHub プル リクエストへのコメント 次の入力変数をステップ実行して設定します。 GitHub パーソナル アクセス トークン : 以前に作成した Secret に設定し、 $GITHUB_ACCESS_TOKEN . 体 : 以下を追加します。 ![QR code]($BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL)\n\n$BITRISE_PUBLIC_INSTALL_PAGE_URL " }, 
{ "title" : "bitrise.yml ", 
"url" : "手順とワークフロー/一般的なワークフローレシピ/github-プル-リクエスト--ビルドの-qr-コードを送信する.html#bitrise-yml-78706", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 手順とワークフロー \/ 一般的なワークフローレシピ \/ GitHub プル リクエスト: ビルドの QR コードを送信する \/ bitrise.yml ", 
"snippet" : "- deploy-to-bitrise-io@2: {} - create-install-page-qr-code@1: {} - comment-on-github-pull-request@0: inputs: - body: |- ![QR code]($BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL) $BITRISE_PUBLIC_INSTALL_PAGE_URL - personal_access_token: \"$GITHUB_ACCESS_TOKEN\"...", 
"body" : "- deploy-to-bitrise-io@2: {}\n- create-install-page-qr-code@1: {}\n- comment-on-github-pull-request@0:\n inputs:\n - body: |-\n ![QR code]($BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL)\n\n $BITRISE_PUBLIC_INSTALL_PAGE_URL\n - personal_access_token: \"$GITHUB_ACCESS_TOKEN\" " }, 
{ "title" : "ビルドとパイプライン ", 
"url" : "ビルドとパイプライン.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン ", 
"snippet" : "Bitriseビルドは、ステップのコレクションであるアプリのワークフローによって指定されます。アプリのビルド構成は、bitrise.ymlファイルまたはグラフィカルなワークフローエディターで変更できます。 Bitriseビルドは、アプリによって指定された一連のジョブです。 ワークフロー これはのコレクションです 手順 。アプリのビルド構成は、 bitrise.yml構成ファイル で変更できます bitrise.io のグラフィカルワークフローエディタまたはローカル。ファイルはに保存することができます bitrise.io また アプリのGitリポジトリ内 。 ビルドの実行中、ステップを定義する...", 
"body" : "Bitriseビルドは、ステップのコレクションであるアプリのワークフローによって指定されます。アプリのビルド構成は、bitrise.ymlファイルまたはグラフィカルなワークフローエディターで変更できます。 Bitriseビルドは、アプリによって指定された一連のジョブです。 ワークフロー これはのコレクションです 手順 。アプリのビルド構成は、 bitrise.yml構成ファイル で変更できます bitrise.io のグラフィカルワークフローエディタまたはローカル。ファイルはに保存することができます bitrise.io また アプリのGitリポジトリ内 。 ビルドの実行中、ステップを定義するスクリプトは、ワークフローで定義した順序で、設定した入力パラメーターを使用して実行されます。それらは、実行可能バイナリ、スクリーンショット、テストレポート、変数などを含むがこれらに限定されない、他のステップが使用できる複数の異なる出力を生成できます。 ビルドプロセスは次のとおりです。 ビルドを開始します 、手動または自動トリガーのいずれか。 環境の準備：仮想マシンがプロビジョニングされ、ビルドを実行する準備が整います。特定のビルド 環境変数 これらはステップで使用できるように事前設定されています。使用可能なスタックの詳細については、ワークフローエディタの スタック タブ。 ワークフローの実行：ワークフローのステップは、アプリケーションのワークフローエディターで定義されているのと同じ順序で上から下に実行されます。ステップをドラッグして並べ替えることができます。各ステップで生成されるログは、ビルドの詳細ページに表示されます。 クリーンアップ：ビルドの実行後、ビルドログが作成され、Bitriseサーバーに保存されます。 NS ビルドを実行している仮想マシン が破壊されるため、コード\/ファイルが悪用されることはありません。 200日間のビルド保持 に ビルド アプリのページには、過去200日間のビルドのみが表示されます。あなたがいる場合も同じ制限が適用されます 特定のビルドを検索する ページ上。この制限は、API呼び出しにも適用されます。 GET\/apps\/{app-slug}\/builds エンドポイントおよび関連するエンドポイントは、過去200日間のビルドのみを返すことができます。 ただし、正確なビルドURLがわかっている場合は、200日より古いビルドを表示できます。古いビルドを表示する必要があるが、正確なビルドURLがわからない場合は、サポートチームにお問い合わせください。 正確なビルドURLがわかっている場合は、ビルドにアクセスできます。 あなたは使用することができます GET\/apps\/{app-slug}\/archived-builds APIエンドポイント： アプリのアーカイブされたビルドの一覧表示。 ビルドが完了した後、ユーザーは次のことができます メールで通知 、またはできます 独自のSlack統合をセットアップする 、 例えば。 Bitrise Pipelineは、CI\/CD構成の最上位レベルです。パイプラインを使用して、CI \/ CDプロセス全体を整理し、複数の異なるタスクを並行しておよび\/または順次実行する高度な構成をセットアップできます。詳細については、を参照してください。 パイプラインを構築する 。 " }, 
{ "title" : "パイプラインの構築[ベータ版] ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] ", 
"snippet" : "Bitrise Pipelineは、CI\/CD構成の最上位レベルです。パイプラインを使用して、CI \/ CDプロセス全体を整理し、複数の異なるタスクを並行しておよび\/または順次実行する高度な構成をセットアップできます。 パイプラインの構成要素は次のとおりです。 手順 ：スクリプト実行のブロック。それぞれがCI\/CDプロセスで単一のタスクを定義します。 ワークフロー ：ステップのコレクション。アプリのビルドが実行されている場合、ステップはワークフローで定義された順序で実行されます。 ステージ：ワークフローのコレクション。ステージには、同じステージですべて並行して実行される複数のワークフローを含め...", 
"body" : "Bitrise Pipelineは、CI\/CD構成の最上位レベルです。パイプラインを使用して、CI \/ CDプロセス全体を整理し、複数の異なるタスクを並行しておよび\/または順次実行する高度な構成をセットアップできます。 パイプラインの構成要素は次のとおりです。 手順 ：スクリプト実行のブロック。それぞれがCI\/CDプロセスで単一のタスクを定義します。 ワークフロー ：ステップのコレクション。アプリのビルドが実行されている場合、ステップはワークフローで定義された順序で実行されます。 ステージ：ワークフローのコレクション。ステージには、同じステージですべて並行して実行される複数のワークフローを含めることができます。すべてのワークフローがステージで成功すると、パイプラインは次のステージに進みます。ワークフローのいずれかが失敗した場合、特定のステージを常に実行するように構成しない限り、パイプラインは他のステージを実行せずに終了します。 " }, 
{ "title" : "Bitriseパイプラインの構成 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/bitriseパイプラインの構成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Bitriseパイプラインの構成 ", 
"snippet" : "現在、パイプラインの構成は、直接編集することによってのみ可能です。 bitrise.yml ファイル。グラフィカルなワークフローエディターでワークフローを作成および変更できますが、パイプラインとステージをYAML形式で定義する必要があります。...", 
"body" : "現在、パイプラインの構成は、直接編集することによってのみ可能です。 bitrise.yml ファイル。グラフィカルなワークフローエディターでワークフローを作成および変更できますが、パイプラインとステージをYAML形式で定義する必要があります。 " }, 
{ "title" : "パイプライン、ステップ、およびワークフローの定義 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/bitriseパイプラインの構成.html#パイプライン-ステップ-およびワークフローの定義", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Bitriseパイプラインの構成 \/ パイプライン、ステップ、およびワークフローの定義 ", 
"snippet" : "The bitrise.yml ファイルには、パイプラインの完全な構成が含まれています。すべてのように bitrise.yml ファイルの場合、最初にフォーマットバージョンとプロジェクトタイプを定義する必要があります。 --- format_version: '8' default_step_lib_source: project_type: android これは最低限です bitrise.yml 構成。パイプラインを定義するには、パイプライン属性を使用する必要があります。 pipelines:   pipeline-successful:     stages:     - stage-s...", 
"body" : "The bitrise.yml ファイルには、パイプラインの完全な構成が含まれています。すべてのように bitrise.yml ファイルの場合、最初にフォーマットバージョンとプロジェクトタイプを定義する必要があります。 ---\nformat_version: '8'\ndefault_step_lib_source: \nproject_type: android これは最低限です bitrise.yml 構成。パイプラインを定義するには、パイプライン属性を使用する必要があります。 pipelines:  \n pipeline-successful:\n    stages:\n    - stage-successful-1: {}\n    - stage-successful-2: {}\n    - stage-successful-3: {} この例では、というパイプラインがあります pipeline-successful 、連続して実行される3つのステージがあります。これは、 stage-successful-1 正常に終了し、 stage-successful-2 開始します。いずれかのステージが失敗した場合、後続のステージは開始されません。代わりに、パイプラインが中止され、失敗としてマークされます。 各ステージは、 stages 属性。ステージの定義とは、ステージの一部であるワークフローを指定することを意味します。 stages:\n  stage-successful-1:\n    workflows:\n    - test-1: {}\n  stage-successful-2:\n    workflows:\n    - build-1: {}\n    - build-2: {}\n  stage-successful-3:\n    workflows:\n    - deploy-1: {}\n    - deploy-2: {} この例では、ステージは test-1 、 build-1 、 build-2 、 deploy-1 、 と deploy-2 ワークフロー。 " }, 
{ "title" : "パイプライントリガーの構成 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/bitriseパイプラインの構成.html#パイプライントリガーの構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Bitriseパイプラインの構成 \/ パイプライントリガーの構成 ", 
"snippet" : "自動ビルドトリガーを設定するには、トリガーマップが必要です。トリガーマップは、ビルドをトリガーするコードイベントを定義します。パイプライン構成では、プッシュ、プルリクエスト、タグなどの特定のコードイベントによってトリガーされるパイプラインを指定する必要があります。 ワークフロー エディターを使用したパイプライン トリガーの構成 この例では、bitrise.yml を使用してパイプライン トリガーを構成することに焦点を当てていますが、ワークフロー エディターの トリガー タブ。 trigger_map: - push_branch: \"pipe\"   pipeline: pipeline-suc...", 
"body" : "自動ビルドトリガーを設定するには、トリガーマップが必要です。トリガーマップは、ビルドをトリガーするコードイベントを定義します。パイプライン構成では、プッシュ、プルリクエスト、タグなどの特定のコードイベントによってトリガーされるパイプラインを指定する必要があります。 ワークフロー エディターを使用したパイプライン トリガーの構成 この例では、bitrise.yml を使用してパイプライン トリガーを構成することに焦点を当てていますが、ワークフロー エディターの トリガー タブ。 trigger_map:\n- push_branch: \"pipe\"\n  pipeline: pipeline-successful この例では、アプリのリポジトリのパイプブランチにコードをプッシュすると、 pipeline-successful パイプライン。同様の方法で、任意のコードイベントのトリガーを構成できます。コードイベント、ブランチ名またはタグ名、およびそれぞれのパイプラインを指定するだけです。次の属性を使用できます。 push_branch ：指定されたブランチへのコードプッシュは、指定されたパイプラインをトリガーします。 pull_request_source_branch ：指定されたブランチから開かれたプル要求は、指定されたパイプラインをトリガーします。 tag ：指定されたタグが付いたコミットは、指定されたパイプラインをトリガーします。 トリガーマップを含む、完全に構成されたパイプラインの例を次に示します。 ---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\ntrigger_map:\n- push_branch: \"*\"\n pipeline: pipeline-successful\npipelines:\n pipeline-successful:\n stages:\n - stage-successful-1: {}\n - stage-successful-2: {}\n - stage-successful-3: {}\nstages:\n stage-successful-1:\n workflows:\n - successful-20s: {}\n stage-successful-2:\n workflows:\n - successful-20s: {}\n - successful-30s: {}\n stage-successful-3:\n workflows:\n - successful-30s: {}\n - successful-20s: {}\nworkflows:\n successful-20s:\n steps:\n - script@1:\n title: Print secret1\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n set -ex \n echo $secret1\n - script@1:\n title: Print all env vars\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n set -ex \n printenv\n - script@1:\n title: Wait 20 seconds\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n set -ex\n sleep 20\n successful-30s:\n steps:\n - script@1:\n title: Wait 30 seconds\n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n set -ex\n sleep 30 " }, 
{ "title" : "常に実行するようにステージを構成する ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/bitriseパイプラインの構成.html#常に実行するようにステージを構成する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Bitriseパイプラインの構成 \/ 常に実行するようにステージを構成する ", 
"snippet" : "デフォルトでは、ステージが失敗した場合（ワークフローの1つが失敗したため）、パイプラインの他の後続のステージは実行されません。ただし、パイプラインを構成して、何があっても特定のステージを実行することができます。 これを行うには、設定する必要があります should_always_run ステージの属性をtrueに設定します。 stages:   stage-always-run-successful-1:     should_always_run: true     workflows:     - deploy-1: {}     - deploy-2: {} 上記の例では、ステージは s...", 
"body" : "デフォルトでは、ステージが失敗した場合（ワークフローの1つが失敗したため）、パイプラインの他の後続のステージは実行されません。ただし、パイプラインを構成して、何があっても特定のステージを実行することができます。 これを行うには、設定する必要があります should_always_run ステージの属性をtrueに設定します。 stages:\n  stage-always-run-successful-1:\n    should_always_run: true\n    workflows:\n    - deploy-1: {}\n    - deploy-2: {} 上記の例では、ステージは stage-always-run-successful-1 前のステージのステータスに関係なく、常に実行されます。これらのステージが実行されない唯一の方法は、パイプラインがユーザーによって中止された場合です。 " }, 
{ "title" : "失敗したステージのワークフローを中止する ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/bitriseパイプラインの構成.html#失敗したステージのワークフローを中止する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Bitriseパイプラインの構成 \/ 失敗したステージのワークフローを中止する ", 
"snippet" : "デフォルトでは、特定のステージのワークフローに障害が発生しても、同じステージの他のワークフローは自動的に中止されません。これらのワークフローは実行されますが、次のステージは開始されません。ただし、この動作を変更して、同じステージ内の他のすべてのワークフローを即座に自動的に中止することができます。 そのためには、を設定する必要があります abort_on_fail に属性 true ： stages:   stage-abort-on-fail-1:     abort_on_fail: true     workflows:     - deploy-1: {}     - deploy-2:...", 
"body" : "デフォルトでは、特定のステージのワークフローに障害が発生しても、同じステージの他のワークフローは自動的に中止されません。これらのワークフローは実行されますが、次のステージは開始されません。ただし、この動作を変更して、同じステージ内の他のすべてのワークフローを即座に自動的に中止することができます。 そのためには、を設定する必要があります abort_on_fail に属性 true ： stages:\n  stage-abort-on-fail-1:\n    abort_on_fail: true\n    workflows:\n    - deploy-1: {}\n    - deploy-2: {} " }, 
{ "title" : "異なるステージからのアーティファクトの使用 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/bitriseパイプラインの構成.html#異なるステージからのアーティファクトの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Bitriseパイプラインの構成 \/ 異なるステージからのアーティファクトの使用 ", 
"snippet" : "ワークフローでは、前のステージのワークフローによって生成されたアーティファクトを使用する必要がある場合があります。ステップ中にそれらを使用できるようにするには、 アーティファクトプル ステップ。 ステージ間で共有するファイルを指定する . パイプライン中間ファイルのプル ステップを使用する ....", 
"body" : "ワークフローでは、前のステージのワークフローによって生成されたアーティファクトを使用する必要がある場合があります。ステップ中にそれらを使用できるようにするには、 アーティファクトプル ステップ。 ステージ間で共有するファイルを指定する . パイプライン中間ファイルのプル ステップを使用する . " }, 
{ "title" : "ステージ間で共有するファイルの指定 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/bitriseパイプラインの構成.html#ステージ間で共有するファイルの指定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Bitriseパイプラインの構成 \/ 異なるステージからのアーティファクトの使用 \/ ステージ間で共有するファイルの指定 ", 
"snippet" : "を使用できます。 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト 後続のワークフローで使用するための中間ファイルとして、ファイルとディレクトリをプッシュする手順。そうするために： 追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ビルド アーティファクトを生成するワークフロー (通常はワークフローの最後) に進みます。 steps: ... - deploy-to-bitrise-io@2: {} ステップの構成 パイプライン ステージ間で共有するファイル 下の入力 パイプライン中間ファイル共有 カテゴリー。 を構成しているとき パイプライン...", 
"body" : "を使用できます。 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト 後続のワークフローで使用するための中間ファイルとして、ファイルとディレクトリをプッシュする手順。そうするために： 追加 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ビルド アーティファクトを生成するワークフロー (通常はワークフローの最後) に進みます。 steps:\n ...\n - deploy-to-bitrise-io@2: {} ステップの構成 パイプライン ステージ間で共有するファイル 下の入力 パイプライン中間ファイル共有 カテゴリー。 を構成しているとき パイプライン ステージ間で共有するファイル 追加する値は、次の構造を使用して、コロンで区切られた項目の改行で区切られたリストである必要があります。 <file_or_directory_path>:<environment_variable_key> file_or_directory_path : は、後続のステージ ワークフローと共有するファイルまたはディレクトリのローカル ファイル パスです。 ディレクトリの共有 ディレクトリは単一のファイルとしてアーカイブおよびアップロードされますが、 パイプライン中間ファイルのプル ステップは、そのようなアーカイブを自動的に抽出します。 environment_variable_key : 特定の項目に割り当てられる環境変数キーです。この環境変数は、アイテムによってダウンロードされた後、アイテムのローカル ファイル パスを保持します。 パイプライン中間ファイルのプル ステップ。 環境変数キーの使用 デフォルトの環境変数キーを使用する必要はありません。実際、必要なカスタム環境変数キーを割り当てることができます。 例えば、 \"$BITRISE_IPA_PATH:BITRISE_APP_STORE_IPA_PATH\" 例を見てみましょう！ ビルド テスト ファイルを含むディレクトリを共有したい場合 ( $BITRISE_TEST_BUNDLE_PATH ) によって生成される xcode-build-for-test ステップ、および IPA ファイル ( $BITRISE_IPA_PATH ) によって生成される xcode-archive ステップ、次の構造を使用する必要があります。 steps:\n ...\n - deploy-to-bitrise-io@2:\n inputs:\n - pipeline_intermediate_files: |-\n \"$BITRISE_TEST_BUNDLE_PATH:BITRISE_TEST_BUNDLE_PATH\"\n \"$BITRISE_IPA_PATH:BITRISE_IPA_PATH\" " }, 
{ "title" : "プル パイプライン中間ファイルの使用手順 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/bitriseパイプラインの構成.html#プル-パイプライン中間ファイルの使用手順", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Bitriseパイプラインの構成 \/ 異なるステージからのアーティファクトの使用 \/ プル パイプライン中間ファイルの使用手順 ", 
"snippet" : "前のステージでワークフローによって生成されたアーティファクトへのアクセスを必要とするワークフローがある場合は、 パイプライン中間ファイルのプル ステップ： 追加 パイプライン中間ファイルのプル ワークフローへのステップ (通常、ワークフローの開始時、または共有ファイルに依存するステップの前): steps: - pull-intermediate-files@1: {} 使用 artifact_sources ステージとワークフローのセットを指定するための入力。入力の構文は次のとおりです。 {stage-name}.{workflow-name} : steps: - pull-interme...", 
"body" : "前のステージでワークフローによって生成されたアーティファクトへのアクセスを必要とするワークフローがある場合は、 パイプライン中間ファイルのプル ステップ： 追加 パイプライン中間ファイルのプル ワークフローへのステップ (通常、ワークフローの開始時、または共有ファイルに依存するステップの前): steps:\n - pull-intermediate-files@1: {} 使用 artifact_sources ステージとワークフローのセットを指定するための入力。入力の構文は次のとおりです。 {stage-name}.{workflow-name} : steps:\n - pull-intermediate-files@1:\n inputs:\n - artifact_sources: stage-1\\..* 上記の例では、ステージ内のすべてのワークフローからすべてのアーティファクトを取得しています。 stage-1 . 特定のワークフローの設定とワイルドカードの使用 特定のワークフローを設定して、アーティファクトをプルするか、他の方法でワイルドカードを使用できます。 stage1.workflow1 - ステージ 1 のワークフロー 1 からアーティファクトを取得します。 stage1\\..* - stage1 のワークフローからすべてのアーティファクトを取得します。 .*\\.workflow1 - すべてのステージからワークフロー 1 の成果物を取得します。 .* - パイプラインで生成されたすべてのアーティファクトを取得します。 ステップが終了すると、ファイルとディレクトリが Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ステップが復元されます。 詳細については、 ステップ リポジトリ . " }, 
{ "title" : "パイプライン ステージ間で環境変数を共有する ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/bitriseパイプラインの構成.html#パイプライン-ステージ間で環境変数を共有する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Bitriseパイプラインの構成 \/ パイプライン ステージ間で環境変数を共有する ", 
"snippet" : "環境変数を共有できます ステージ の助けを借りてアーティファクトを作成することによって 脚本 ステップ そしてそのアーティファクトを パイプライン 中間ファイル。詳細については、こちらをご覧ください 異なるステージからのアーティファクトの使用 . がここにあります bitrise.yml 例： pipelines: share_env_vars: stages: - pub: {} - sub: {} stages: pub: workflows: - share_env_var_publish: {} sub: workflows: - share_env_var_receive: {} w...", 
"body" : "環境変数を共有できます ステージ の助けを借りてアーティファクトを作成することによって 脚本 ステップ そしてそのアーティファクトを パイプライン 中間ファイル。詳細については、こちらをご覧ください 異なるステージからのアーティファクトの使用 . がここにあります bitrise.yml 例： pipelines:\n share_env_vars:\n stages:\n - pub: {}\n - sub: {}\nstages:\n pub:\n workflows:\n - share_env_var_publish: {}\n sub: \n workflows:\n - share_env_var_receive: {}\nworkflows:\n share_env_var_publish:\n steps:\n - script@1:\n inputs:\n - content: |\n #!\/usr\/bin\/env bash\n set -e\n set -x\n touch vars.txt\n echo \"FIRST=1\" >> vars.txt\n echo \"SECOND=2\" >> vars.txt\n title: Make Env Var File\n - deploy-to-bitrise-io@2:\n inputs:\n - pipeline_intermediate_files: vars.txt:ENV_VARS_FILEPATH\n share_env_var_receive:\n steps:\n - pull-intermediate-files@1: {}\n - script@1:\n inputs:\n - content: |\n #!\/usr\/bin\/env bash\n set -e\n set -x\n while IFS='=' read -r k v; do\n envman add --key k --value $v\n done < \"$ENV_VARS_FILEPATH\"\n " }, 
{ "title" : "パイプラインの実行 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/パイプラインの実行.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ パイプラインの実行 ", 
"snippet" : "パイプラインを開始するには、次の2つの方法があります。 パイプラインを自動的にトリガーします。 パイプラインを手動で開始します。 パイプラインを自動的にトリガーするには、で説明されているようにトリガーを構成する必要があります。 パイプライントリガーの構成 。 パイプラインを手動で開始するには： Bitriseでアプリを開きます。 に移動します ビルド タブ。 クリック ビルドの開始\/スケジュール 。 下にスクロールして ワークフロー、パイプライン ドロップダウンメニュー。 実行するパイプラインを選択します。 クリック ビルドを開始 。 についてもっと読む 手動でビルドを開始する 。...", 
"body" : "パイプラインを開始するには、次の2つの方法があります。 パイプラインを自動的にトリガーします。 パイプラインを手動で開始します。 パイプラインを自動的にトリガーするには、で説明されているようにトリガーを構成する必要があります。 パイプライントリガーの構成 。 パイプラインを手動で開始するには： Bitriseでアプリを開きます。 に移動します ビルド タブ。 クリック ビルドの開始\/スケジュール 。 下にスクロールして ワークフロー、パイプライン ドロップダウンメニュー。 実行するパイプラインを選択します。 クリック ビルドを開始 。 についてもっと読む 手動でビルドを開始する 。 " }, 
{ "title" : "パイプラインを確認する ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/パイプラインを確認する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ パイプラインを確認する ", 
"snippet" : "パイプラインはダッシュボードにあります。アプリのビルドは、スタンドアロンまたはパイプラインとしてマークされます。パイプラインビルドをクリックして、 パイプラインの詳細 ページ。 に パイプラインの詳細 このページでは、パイプラインのステージと、ステージを構成するワークフローとそのステータスを確認できます。パイプラインによって生成されたすべてのアーティファクトも見つけることができます。...", 
"body" : "パイプラインはダッシュボードにあります。アプリのビルドは、スタンドアロンまたはパイプラインとしてマークされます。パイプラインビルドをクリックして、 パイプラインの詳細 ページ。 に パイプラインの詳細 このページでは、パイプラインのステージと、ステージを構成するワークフローとそのステータスを確認できます。パイプラインによって生成されたすべてのアーティファクトも見つけることができます。 " }, 
{ "title" : "パイプラインのワークフローの確認 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/パイプラインを確認する.html#パイプラインのワークフローの確認", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ パイプラインを確認する \/ パイプラインのワークフローの確認 ", 
"snippet" : "に ワークフロー パイプラインビルドページのタブでは、パイプラインを構成するすべての個々のワークフローとそのステータスを確認できます。ページにアクセスして特定のワークフローを確認するには： Bitriseでアプリを開きます。 に移動します ビルド タブ。 パイプラインビルドを見つけて選択します。パイプラインビルドはでマークされています （パイプライン） 。 に パイプラインビルド ページに移動します ワークフロー タブ。 確認するワークフローをクリックします。 GitHub チェックを使用してパイプラインのワークフローをチェックする パイプラインのワークフローの詳細は、GitHub Check...", 
"body" : "に ワークフロー パイプラインビルドページのタブでは、パイプラインを構成するすべての個々のワークフローとそのステータスを確認できます。ページにアクセスして特定のワークフローを確認するには： Bitriseでアプリを開きます。 に移動します ビルド タブ。 パイプラインビルドを見つけて選択します。パイプラインビルドはでマークされています （パイプライン） 。 に パイプラインビルド ページに移動します ワークフロー タブ。 確認するワークフローをクリックします。 GitHub チェックを使用してパイプラインのワークフローをチェックする パイプラインのワークフローの詳細は、GitHub Checks から直接確認できます。パイプラインの概要でワークフローをクリックするだけです。 " }, 
{ "title" : "パイプラインのアーティファクトをチェックする ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/パイプラインを確認する.html#パイプラインのアーティファクトをチェックする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ パイプラインを確認する \/ パイプラインのアーティファクトをチェックする ", 
"snippet" : "他のビルドと同様に、パイプラインはビルドアーティファクトを生成できます。パイプラインのワークフローによって生成されたすべてのビルドアーティファクトは、 アーティファクト パイプラインの詳細ページのタブ。 Bitriseでアプリを開きます。 に移動します ビルド タブ。 パイプラインビルドを見つけて選択します。パイプラインビルドはでマークされています （パイプライン） 。 に パイプラインビルド ページに移動します アーティファクト タブ。 確認するワークフローをクリックします。...", 
"body" : "他のビルドと同様に、パイプラインはビルドアーティファクトを生成できます。パイプラインのワークフローによって生成されたすべてのビルドアーティファクトは、 アーティファクト パイプラインの詳細ページのタブ。 Bitriseでアプリを開きます。 に移動します ビルド タブ。 パイプラインビルドを見つけて選択します。パイプラインビルドはでマークされています （パイプライン） 。 に パイプラインビルド ページに移動します アーティファクト タブ。 確認するワークフローをクリックします。 " }, 
{ "title" : "失敗したパイプラインの再構築 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/失敗したパイプラインの再構築.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ 失敗したパイプラインの再構築 ", 
"snippet" : "パイプラインのビルドが失敗した場合、2つのオプションがあります。 失敗したワークフローを再構築する 。 パイプライン全体を再構築する 。...", 
"body" : "パイプラインのビルドが失敗した場合、2つのオプションがあります。 失敗したワークフローを再構築する 。 パイプライン全体を再構築する 。 " }, 
{ "title" : "失敗したワークフローの再構築 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/失敗したパイプラインの再構築.html#失敗したワークフローの再構築", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ 失敗したパイプラインの再構築 \/ 失敗したワークフローの再構築 ", 
"snippet" : "パイプラインビルドで失敗または中止されたワークフローがある場合、パイプライン全体を再構築する必要なしに、失敗または中止されたワークフローを変更し、ワークフローと後続のワークフローを再構築することを選択できます。新しい試行は、最初に失敗または中止されたワークフローから開始されます。今回そのワークフローが成功した場合、ビルドは後続のワークフローに進みます。 常に実行が有効になっているステージ この新しい試行は、パイプラインの最初の失敗または中止されたワークフローの後にステージが来る場合、常に実行が再度有効になっているステージをトリガーします。 これは、パイプラインに1つ以上の失敗または中止されたワ...", 
"body" : "パイプラインビルドで失敗または中止されたワークフローがある場合、パイプライン全体を再構築する必要なしに、失敗または中止されたワークフローを変更し、ワークフローと後続のワークフローを再構築することを選択できます。新しい試行は、最初に失敗または中止されたワークフローから開始されます。今回そのワークフローが成功した場合、ビルドは後続のワークフローに進みます。 常に実行が有効になっているステージ この新しい試行は、パイプラインの最初の失敗または中止されたワークフローの後にステージが来る場合、常に実行が再度有効になっているステージをトリガーします。 これは、パイプラインに1つ以上の失敗または中止されたワークフローがあり、パイプライン全体を再構築したくない場合に役立ちます。 これらは、パイプラインビルドでワークフローを変更する方法の例です。 ワークフローに新しいステップを追加します。 ワークフローからステップを削除します。 ワークフローのステップを更新します。 ワークフローのステップ入力順序を変更します。 ワークフローのステップ順序を変更します。 " }, 
{ "title" : "パイプラインビルドで失敗したワークフローを再構築する ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/失敗したパイプラインの再構築.html#パイプラインビルドで失敗したワークフローを再構築する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ 失敗したパイプラインの再構築 \/ 失敗したワークフローの再構築 \/ パイプラインビルドで失敗したワークフローを再構築する ", 
"snippet" : "あなたは使用することができます 失敗したワークフローを再構築する パイプラインを部分的に再構築するアクション。 を使用するには 失敗したワークフローを再構築する アクション： Bitriseでアプリを開きます。 再構築するパイプラインビルドを選択します。 右上の[ 再構築 ドロップダウンメニュー。 選択する 失敗したワークフローを再構築する 。 失敗したワークフローアクションの制限を再構築する パイプラインの構築構成の中には、失敗したワークフローの再構築アクションを使用できないものがあります。見る 失敗したワークフローの再構築アクションの制限 詳細については。...", 
"body" : "あなたは使用することができます 失敗したワークフローを再構築する パイプラインを部分的に再構築するアクション。 を使用するには 失敗したワークフローを再構築する アクション： Bitriseでアプリを開きます。 再構築するパイプラインビルドを選択します。 右上の[ 再構築 ドロップダウンメニュー。 選択する 失敗したワークフローを再構築する 。 失敗したワークフローアクションの制限を再構築する パイプラインの構築構成の中には、失敗したワークフローの再構築アクションを使用できないものがあります。見る 失敗したワークフローの再構築アクションの制限 詳細については。 " }, 
{ "title" : "失敗したワークフローの再構築アクションの制限 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/失敗したパイプラインの再構築.html#失敗したワークフローの再構築アクションの制限", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ 失敗したパイプラインの再構築 \/ 失敗したワークフローの再構築 \/ 失敗したワークフローの再構築アクションの制限 ", 
"snippet" : "一部のビルドパイプライン構成では、 失敗したワークフローを再構築する アクション。この場合でも、新しい構成でパイプライン全体を再構築するオプションがあります。 次の場合、失敗したワークフローの再構築アクションを使用できなくなります。 パイプラインビルドからステージを削除します。 パイプラインビルドに新しいステージを追加します。 新しいワークフローをステージに追加します。 ステージからワークフローを削除します。 30日以上前に最初のパイプラインビルドを作成しました。...", 
"body" : "一部のビルドパイプライン構成では、 失敗したワークフローを再構築する アクション。この場合でも、新しい構成でパイプライン全体を再構築するオプションがあります。 次の場合、失敗したワークフローの再構築アクションを使用できなくなります。 パイプラインビルドからステージを削除します。 パイプラインビルドに新しいステージを追加します。 新しいワークフローをステージに追加します。 ステージからワークフローを削除します。 30日以上前に最初のパイプラインビルドを作成しました。 " }, 
{ "title" : "パイプライン全体の再構築 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/失敗したパイプラインの再構築.html#パイプライン全体の再構築", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ 失敗したパイプラインの再構築 \/ パイプライン全体の再構築 ", 
"snippet" : "The パイプライン全体を再構築する アクションは、新しいビルド番号で新しいパイプラインビルドを作成する場合、またはBuIldパイプライン構成で何かを変更した場合に役立ちます。 失敗したワークフローの再構築を使用できません アクション。 ビルドパイプラインの実行中にワークフローが失敗または中止された場合は、パイプライン全体を再構築して、新しいビルドパイプラインビルドを作成し、最初のステージからパイプラインを開始できます。 を使用するには パイプライン全体を再構築する アクション： Bitriseでアプリを開きます。 再構築するパイプラインビルドを選択します。 右上の[ 再構築 ドロップダウンメ...", 
"body" : "The パイプライン全体を再構築する アクションは、新しいビルド番号で新しいパイプラインビルドを作成する場合、またはBuIldパイプライン構成で何かを変更した場合に役立ちます。 失敗したワークフローの再構築を使用できません アクション。 ビルドパイプラインの実行中にワークフローが失敗または中止された場合は、パイプライン全体を再構築して、新しいビルドパイプラインビルドを作成し、最初のステージからパイプラインを開始できます。 を使用するには パイプライン全体を再構築する アクション： Bitriseでアプリを開きます。 再構築するパイプラインビルドを選択します。 右上の[ 再構築 ドロップダウンメニュー。 選択する パイプライン全体を再構築する 。 " }, 
{ "title" : "パイプライン管理に関するFAQ ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/パイプライン管理に関するfaq.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ パイプライン管理に関するFAQ ", 
"snippet" : "ワークフローエディタの[ワークフロー]タブでパイプラインを作成できますか？ いいえ、残念ながら、現時点では、編集する必要があります bitrise.yml ファイル。 bitrise.ymlファイルを自分のリポジトリに保存する場合、パイプラインを使用できますか？ そのとおり。パイプラインに違いはありません。 パイプラインのスタックを設定するにはどうすればよいですか？ 現在のバージョンでは、 アプリのデフォルトスタックを設定することも、スタンドアロンビルドの場合と同様にワークフロー固有のスタックを設定することもできます 。 パイプラインで環境変数を使用するにはどうすればよいですか？ アプリレベル...", 
"body" : "ワークフローエディタの[ワークフロー]タブでパイプラインを作成できますか？ いいえ、残念ながら、現時点では、編集する必要があります bitrise.yml ファイル。 bitrise.ymlファイルを自分のリポジトリに保存する場合、パイプラインを使用できますか？ そのとおり。パイプラインに違いはありません。 パイプラインのスタックを設定するにはどうすればよいですか？ 現在のバージョンでは、 アプリのデフォルトスタックを設定することも、スタンドアロンビルドの場合と同様にワークフロー固有のスタックを設定することもできます 。 パイプラインで環境変数を使用するにはどうすればよいですか？ アプリレベルとワークフローレベルを使い続けることができます 環境変数 。 失敗したパイプラインを再実行できますか？ はい。に移動します パイプラインの詳細 ページをクリックし、 再実行 ボタン。そこから、失敗したワークフローと後続のワークフローを再実行するか、パイプライン全体を再実行するかを選択できます。詳細については、を参照してください。 失敗したパイプラインを再構築する 。 ローリングビルド機能はパイプラインで機能しますか？ はい！新しいコミットやプルリクエストのために不要になったビルドでクレジットを無駄にすることを心配する必要はありません。 " }, 
{ "title" : "Pipelinesベータ版の既知の問題と制限 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/pipelinesベータ版の既知の問題と制限.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Pipelinesベータ版の既知の問題と制限 ", 
"snippet" : "パイプラインの構築は現在ベータ段階です。これは、計画されているすべての機能が利用できるわけではないことを意味します。できるだけ多くのユースケースをカバーできるように、後でいくつかの新機能を紹介します。現在のところ、次の問題と制限があります。...", 
"body" : "パイプラインの構築は現在ベータ段階です。これは、計画されているすべての機能が利用できるわけではないことを意味します。できるだけ多くのユースケースをカバーできるように、後でいくつかの新機能を紹介します。現在のところ、次の問題と制限があります。 " }, 
{ "title" : "視覚的なパイプラインエディタはありません ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/pipelinesベータ版の既知の問題と制限.html#視覚的なパイプラインエディタはありません", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Pipelinesベータ版の既知の問題と制限 \/ 視覚的なパイプラインエディタはありません ", 
"snippet" : "現在のイテレーションでは、ガイドで詳しく説明されているように、ビルドパイプラインをYAMLでセットアップおよび構成できます。ビジュアルUIは、将来のイテレーションの一部です。...", 
"body" : "現在のイテレーションでは、ガイドで詳しく説明されているように、ビルドパイプラインをYAMLでセットアップおよび構成できます。ビジュアルUIは、将来のイテレーションの一部です。 " }, 
{ "title" : "効率の悪いファイル管理とデータ転送 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/pipelinesベータ版の既知の問題と制限.html#効率の悪いファイル管理とデータ転送", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Pipelinesベータ版の既知の問題と制限 \/ 効率の悪いファイル管理とデータ転送 ", 
"snippet" : "現在、GoogleCloudStorageはすべてのビルドのファイル共有に使用されています。将来の反復では、スタックタイプに関係なく、データをビルドVMの近くに維持するために、Macデータセンターでもローカルストレージを使用する予定です。...", 
"body" : "現在、GoogleCloudStorageはすべてのビルドのファイル共有に使用されています。将来の反復では、スタックタイプに関係なく、データをビルドVMの近くに維持するために、Macデータセンターでもローカルストレージを使用する予定です。 " }, 
{ "title" : "Androidプラットフォームで現在サポートされているユースケース ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース ", 
"snippet" : "一部ご用意しました パイプライン 一般的な Android の使用例に基づいたレシピ。これらには、ユーザーが実行する必要がある最も頻繁なタスクが含まれています。例には全体が含まれます ワークフロー ほとんどの場合、コピーして貼り付けることができます。...", 
"body" : "一部ご用意しました パイプライン 一般的な Android の使用例に基づいたレシピ。これらには、ユーザーが実行する必要がある最も頻繁なタスクが含まれています。例には全体が含まれます ワークフロー ほとんどの場合、コピーして貼り付けることができます。 " }, 
{ "title" : "（Android）複数のデバイスまたはシャードでUIテストを並行して実行する ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#-android-複数のデバイスまたはシャードでuiテストを並行して実行する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）複数のデバイスまたはシャードでUIテストを並行して実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#説明-78715", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）複数のデバイスまたはシャードでUIテストを並行して実行する \/ 説明 ", 
"snippet" : "パイプラインを利用した並列ワークフローで単一モジュールのUI（インストルメンテーション）テストを実行します。シャードまたはデバイスごとにテストを並行して実行できます。 パイプラインには、シリアルに実行される2つのステージが含まれています。 build_for_ui_testing ：このステージはワークフローを実行します—名前も付けられます build_for_ui_testing —それは android-build-for-ui-testing テストで使用するAPKを作成し、 deploy-to-bitrise-io 後のステージで使用するためにそれらのAPKを保存するステップ。このステ...", 
"body" : "パイプラインを利用した並列ワークフローで単一モジュールのUI（インストルメンテーション）テストを実行します。シャードまたはデバイスごとにテストを並行して実行できます。 パイプラインには、シリアルに実行される2つのステージが含まれています。 build_for_ui_testing ：このステージはワークフローを実行します—名前も付けられます build_for_ui_testing —それは android-build-for-ui-testing テストで使用するAPKを作成し、 deploy-to-bitrise-io 後のステージで使用するためにそれらのAPKを保存するステップ。このステージを実際のテストとは別に実行すると、各テストステージで、テストステージごとに再構築するのではなく、これらの事前に作成されたAPKを使用できます。 run_ui_tests_on_devices ：このステージでは、3つのUIテストワークフローを並行して実行します— ui_test_on_phone 、 ui_test_on_tablet 、 ui_test_on_foldable —を使用する android-instrumented-test 特定のデバイスタイプごとに、前のワークフローで構築されたAPKでUIテストを実行する手順。 " }, 
{ "title" : "指示 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#指示-78715", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）複数のデバイスまたはシャードでUIテストを並行して実行する \/ 指示 ", 
"snippet" : "新しいBitriseサンプルプロジェクトでこの構成をテストするには、次の手順を実行します。 訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/Bitrise-Android-Modules-Sample.git ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主要 スキャンするブランチ。 プロジェクトスキャ...", 
"body" : "新しいBitriseサンプルプロジェクトでこの構成をテストするには、次の手順を実行します。 訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/Bitrise-Android-Modules-Sample.git ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主要 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 入る アプリ 指定されたモジュールとして。 入る デバッグ 指定されたバリアントとして。 通常どおりプロンプトを続行します—変更は必要ありません。 新しいBitriseプロジェクトのワークフローエディタを開きます。 に移動します bitrise.yml タブをクリックし、既存のyamlの内容を例の内容に置き換えます bitrise.yml 。 クリック ビルドの開始\/スケジュール ボタンをクリックし、 ui_test_on_multiple_devices のオプション ワークフロー、パイプライン ポップアップの下部にあるドロップダウンメニュー。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#bitrise-yml-78715", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）複数のデバイスまたはシャードでUIテストを並行して実行する \/ bitrise.yml ", 
"snippet" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/android-parallel-ui-tests-on-multiple-devices.md#bitriseyml...", 
"body" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/android-parallel-ui-tests-on-multiple-devices.md#bitriseyml " }, 
{ "title" : "（Android）ユニットテストとUIテストを並行して実行する ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#-android-ユニットテストとuiテストを並行して実行する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）ユニットテストとUIテストを並行して実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#説明-78715-1", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）ユニットテストとUIテストを並行して実行する \/ 説明 ", 
"snippet" : "パイプラインを利用して、単体テストとUIテストを並行して実行します。 このパイプラインには1つのステージが含まれています— stage_unit_and_ui_test —2つのワークフローを並行して実行します。 unit_tests ：このワークフローは、指定されたモジュールとバリアントの単体テストを、 android-unit-test ステップ。 ui_tests ：このワークフローは、指定されたモジュールとバリアントを使用してビルドします android-build-for-ui-testing ステップ、を使用してエミュレータを起動します avd-manager ステップ、エミュレー...", 
"body" : "パイプラインを利用して、単体テストとUIテストを並行して実行します。 このパイプラインには1つのステージが含まれています— stage_unit_and_ui_test —2つのワークフローを並行して実行します。 unit_tests ：このワークフローは、指定されたモジュールとバリアントの単体テストを、 android-unit-test ステップ。 ui_tests ：このワークフローは、指定されたモジュールとバリアントを使用してビルドします android-build-for-ui-testing ステップ、を使用してエミュレータを起動します avd-manager ステップ、エミュレータを使用して起動するのを待ちます wait-for-android-emulator ステップ、およびを使用してUIテストを実行します android-instrumented-test ステップ。 " }, 
{ "title" : "指示 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#指示-78715-1", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）ユニットテストとUIテストを並行して実行する \/ 指示 ", 
"snippet" : "訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/Bitrise-Android-Modules-Sample.git ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主要 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 入る アプリ 指定されたモジュールとして。 入る デバッグ 指...", 
"body" : "訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/Bitrise-Android-Modules-Sample.git ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主要 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 入る アプリ 指定されたモジュールとして。 入る デバッグ 指定されたバリアントとして。 通常どおりプロンプトを続行します—変更は必要ありません。 新しいBitriseプロジェクトのワークフローエディタを開きます。 に移動します bitrise.yml タブをクリックし、既存のyamlの内容を例の内容に置き換えます bitrise.yml 。 クリック ビルドの開始\/スケジュール ボタンをクリックし、 pipeline_unit_and_ui_test のオプション ワークフロー、パイプライン ポップアップの下部にあるドロップダウンメニュー。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#bitrise-yml-78715-1", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）ユニットテストとUIテストを並行して実行する \/ bitrise.yml ", 
"snippet" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/android-parallel-unit-and-ui-tests.md#bitriseyml...", 
"body" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/android-parallel-unit-and-ui-tests.md#bitriseyml " }, 
{ "title" : "（Android）モジュールごとのユニットテストシャーディング ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#-android-モジュールごとのユニットテストシャーディング", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）モジュールごとのユニットテストシャーディング ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#説明-78715-2", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）モジュールごとのユニットテストシャーディング \/ 説明 ", 
"snippet" : "パイプラインを利用した並列ワークフローで、モジュール化されたアプリの単体テストを実行します。 このパイプラインには、2つのワークフローを並行して実行する1つのステージ（stage_unit_test）が含まれています。 unit_test_app ：このワークフローは、を使用してアプリモジュールの単体テストを実行します android-unit-test ステップ。 unit_test_library ：このワークフローは、の単体テストを実行します lib-example モジュールを使用して android-unit-test ステップ。...", 
"body" : "パイプラインを利用した並列ワークフローで、モジュール化されたアプリの単体テストを実行します。 このパイプラインには、2つのワークフローを並行して実行する1つのステージ（stage_unit_test）が含まれています。 unit_test_app ：このワークフローは、を使用してアプリモジュールの単体テストを実行します android-unit-test ステップ。 unit_test_library ：このワークフローは、の単体テストを実行します lib-example モジュールを使用して android-unit-test ステップ。 " }, 
{ "title" : "指示 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#指示-78715-2", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）モジュールごとのユニットテストシャーディング \/ 指示 ", 
"snippet" : "訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/Bitrise-Android-Modules-Sample.git ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主要 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 入る アプリ 指定されたモジュールとして。 入る デバッグ 指...", 
"body" : "訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/Bitrise-Android-Modules-Sample.git ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主要 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 入る アプリ 指定されたモジュールとして。 入る デバッグ 指定されたバリアントとして。 通常どおりプロンプトを続行します—変更は必要ありません。 新しいBitriseプロジェクトのワークフローエディタを開きます。 に移動します bitrise.yml タブをクリックし、既存のyamlの内容を例の内容に置き換えます bitrise.yml 。 クリック ビルドの開始\/スケジュール ボタンをクリックし、を選択します pipeline_unit_test のオプション ワークフロー、パイプライン ポップアップの下部にあるドロップダウンメニュー。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/androidプラットフォームで現在サポートされているユースケース.html#bitrise-yml-78715-2", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ Androidプラットフォームで現在サポートされているユースケース \/ （Android）モジュールごとのユニットテストシャーディング \/ bitrise.yml ", 
"snippet" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/android-parallel-testing-unit-test-shards.md#bitriseyml...", 
"body" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/android-parallel-testing-unit-test-shards.md#bitriseyml " }, 
{ "title" : "iOSプラットフォームで現在サポートされているユースケース ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース ", 
"snippet" : "一部ご用意しました パイプライン iOS の一般的な使用例に基づいたレシピ。これらには、ユーザーが実行する必要のある最も頻繁なタスクが含まれています。...", 
"body" : "一部ご用意しました パイプライン iOS の一般的な使用例に基づいたレシピ。これらには、ユーザーが実行する必要のある最も頻繁なタスクが含まれています。 " }, 
{ "title" : "（iOS）複数のシミュレーターで並行してテストを実行する ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#-ios-複数のシミュレーターで並行してテストを実行する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）複数のシミュレーターで並行してテストを実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#説明-78716", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）複数のシミュレーターで並行してテストを実行する \/ 説明 ", 
"snippet" : "この例では、 sample-swift-project-with-parallel-ui-test iOSオープンソースサンプルアプリ。ユニットテストとUIテストの例がいくつかあり、テストプランを使用してテストをグループ化します。 The パイプライン構成の例 プロジェクトのすべてのテストケースをさまざまなiOSシミュレーターで実行する方法を紹介します。 run_tests_on_simulators パイプラインは2つのステージを順番に実行します。 build_tests stage を実行します build_tests ワークフロー。このワークフローgitは、サンプルプロジェクトのクローン...", 
"body" : "この例では、 sample-swift-project-with-parallel-ui-test iOSオープンソースサンプルアプリ。ユニットテストとUIテストの例がいくつかあり、テストプランを使用してテストをグループ化します。 The パイプライン構成の例 プロジェクトのすべてのテストケースをさまざまなiOSシミュレーターで実行する方法を紹介します。 run_tests_on_simulators パイプラインは2つのステージを順番に実行します。 build_tests stage を実行します build_tests ワークフロー。このワークフローgitは、サンプルプロジェクトのクローンを作成し、 xcode-build-for-test ターゲットと関連するテストを構築する手順。構築されたテストバンドルは次のステージに転送されます（ run_tests_on_simulators ）経由 deploy-to-bitrise-io ステップ。 ビルドテストバンドルは圧縮されています xcode-build-for-test ステップは、ビルドされたテストバンドルを圧縮し、生成されたzipを $BITRISE_DEPLOY_DIR 。そのディレクトリのコンテンツは、デフォルトでワークフローアーティファクトにデプロイされます。 deploy-to-bitrise-io ステップ。 アーティファクト ファイルのサイズ制限 デプロイするファイルの数に制限はありません アーティファクト ビルドごと。ただし、ファイルサイズには制限があり、1 ファイルあたり 2GB です。 run_tests_on_simulators Stageは、3つのワークフローを並行して実行します。 run_tests_iPad 、 run_tests_iPhone 、 と run_tests_iPod 。これらのワークフローは両方とも、新しいワークフローを使用します xcode-test-without-building 前のステージで構築されたテストバンドルに基づいてテストを実行するステップ。事前に構築されたテストバンドルは、 _pull_test_bundle ユーティリティワークフロー。 " }, 
{ "title" : "指示 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#指示-78716", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）複数のシミュレーターで並行してテストを実行する \/ 指示 ", 
"snippet" : "新しいBitriseサンプルプロジェクトで構成をテストするには、次の手順を実行します。 訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/sample-swift-project-with-parallel-ui-test ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主人 スキャンするブランチ。 プロジ...", 
"body" : "新しいBitriseサンプルプロジェクトで構成をテストするには、次の手順を実行します。 訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/sample-swift-project-with-parallel-ui-test ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主人 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 提供されている配布方法のいずれかを選択します（たとえば、 発達 、現在はテストに重点を置いているため、実際には問題ではありません）。 提供されたスタックを確認し、アプリアイコンとWebhook登録の選択をスキップして、最初のビルドを開始します。 新しいBitriseプロジェクトのワークフローエディタを開きます。 に移動します bitrise.yml タブを押して、既存のものを置き換えます bitrise.yml 例の内容で bitrise.yml ファイル。 クリック ビルドの開始\/スケジュール ボタンをクリックし、 run_tests_on_simulators 「 ワークフロー、パイプライン ポップアップの下部にある「」ドロップダウンメニュー。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#bitrise-yml-78716", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）複数のシミュレーターで並行してテストを実行する \/ bitrise.yml ", 
"snippet" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/ios-run-tests-in-parallel-on-multiple-simulators.md#bitriseyml...", 
"body" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/ios-run-tests-in-parallel-on-multiple-simulators.md#bitriseyml " }, 
{ "title" : "（iOS）テストグループを並行して実行する ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#-ios-テストグループを並行して実行する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）テストグループを並行して実行する ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#説明-78716-1", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）テストグループを並行して実行する \/ 説明 ", 
"snippet" : "この例では、 sample-swift-project-with-parallel-ui-test iOSオープンソースサンプルアプリ。ユニットテストとUIテストの例がいくつかあり、テストプランを使用してテストをグループ化します。 XCodeテストプラン Xcodeテストプランは、さまざまなテスト構成で一連のテストを実行する方法を提供します。 raywenderlich.comには素晴らしい Xcodeテストプランの開始方法に関するチュートリアル 。 パイプライン構成の例は、さまざまなテストグループを並行して実行する方法を示しています。 run_tests_groups パイプラインは2つのス...", 
"body" : "この例では、 sample-swift-project-with-parallel-ui-test iOSオープンソースサンプルアプリ。ユニットテストとUIテストの例がいくつかあり、テストプランを使用してテストをグループ化します。 XCodeテストプラン Xcodeテストプランは、さまざまなテスト構成で一連のテストを実行する方法を提供します。 raywenderlich.comには素晴らしい Xcodeテストプランの開始方法に関するチュートリアル 。 パイプライン構成の例は、さまざまなテストグループを並行して実行する方法を示しています。 run_tests_groups パイプラインは2つのステージを順番に実行します。 build_tests を実行するステージ build_tests ワークフロー。このワークフローgitは、サンプルプロジェクトのクローンを作成し、 xcode-build-for-test ターゲットと関連するテストを構築する手順。構築されたテストバンドルは次のステージに転送されます（ run_tests_groups ）経由 deploy-to-bitrise-io ステップ。 run_tests_groups Stageは、2つのワークフローを並行して実行します。 run_ui_tests と run_unit_tests 。これらのワークフローは両方とも新しいxを使用します code-test-without-building 前のステージで構築されたテストバンドルに基づいてテストを実行するステップ。事前に構築されたテストバンドルは、 _pull_test_bundle ユーティリティワークフロー。 " }, 
{ "title" : "指示 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#指示-78716-1", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）テストグループを並行して実行する \/ 指示 ", 
"snippet" : "訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/sample-swift-project-with-parallel-ui-test ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主人 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 提供されている配布方法のいずれかを選択します（...", 
"body" : "訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/sample-swift-project-with-parallel-ui-test ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主人 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 提供されている配布方法のいずれかを選択します（たとえば、 発達 、現在はテストに重点を置いているため、実際には問題ではありません）。 提供されたスタックを確認し、アプリアイコンとWebhook登録の選択をスキップして、最初のビルドを開始します。 新しいBitriseプロジェクトのワークフローエディタを開きます。 に移動します bitrise.yml タブを押して、既存のものを置き換えます bitrise.yml 例の内容で bitrise.yml ファイル。 クリック ビルドの開始\/スケジュール ボタンをクリックし、 run_tests_groups 「 ワークフロー、パイプライン ポップアップの下部にある「」ドロップダウンメニュー。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#bitrise-yml-78716-1", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）テストグループを並行して実行する \/ bitrise.yml ", 
"snippet" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/ios-run-test-groups-in-parallel.md#bitriseyml...", 
"body" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/ios-run-test-groups-in-parallel.md#bitriseyml " }, 
{ "title" : "（iOS）テスト結果のマージとテストレポートアドオンへのデプロイ ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#-ios-テスト結果のマージとテストレポートアドオンへのデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）テスト結果のマージとテストレポートアドオンへのデプロイ ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "説明 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#説明-78716-2", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）テスト結果のマージとテストレポートアドオンへのデプロイ \/ 説明 ", 
"snippet" : "Test Reportsアドオンは、Bitriseビルドに関連付けられています。異なるビルドで生成されたすべてのテストレポートをアドオンの単一のページに表示するには、レポートをマージして追加のビルドにデプロイする必要があります。 この例では、 sample-swift-project-with-parallel-ui-test iOSオープンソースサンプルアプリと拡張' iOSテストグループを並行して実行する 'テスト結果をマージおよびデプロイするパイプライン構成の例。 run_ui_tests と run_unit_tests ワークフローは、deploy-to-bitrise-ioステップ...", 
"body" : "Test Reportsアドオンは、Bitriseビルドに関連付けられています。異なるビルドで生成されたすべてのテストレポートをアドオンの単一のページに表示するには、レポートをマージして追加のビルドにデプロイする必要があります。 この例では、 sample-swift-project-with-parallel-ui-test iOSオープンソースサンプルアプリと拡張' iOSテストグループを並行して実行する 'テスト結果をマージおよびデプロイするパイプライン構成の例。 run_ui_tests と run_unit_tests ワークフローは、deploy-to-bitrise-ioステップで拡張され、生成されたテスト結果を次のステージで利用できるようにします。 run_tests_groups パイプラインは新しいステージで拡張されます： deploy_test_results 。このステージは、 deploy_test_results ワークフロー： artifact-pull ステップは、ステージによって以前に生成されたすべてのzip形式のテスト結果をダウンロードします。 run_tests_groups 。 script ステップは、各テスト結果をテストレポートアドオンデプロイディレクトリ内の新しいテスト実行ディレクトリに解凍し、関連するものを作成します test-info.json ファイル。 deploy-to-bitrise-io ステップは、マージされたテスト結果をデプロイします。 " }, 
{ "title" : "指示 ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#指示-78716-2", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）テスト結果のマージとテストレポートアドオンへのデプロイ \/ 指示 ", 
"snippet" : "訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/sample-swift-project-with-parallel-ui-test ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主人 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 提供されている配布方法のいずれかを選択します（...", 
"body" : "訪問 新しいアプリページを作成する 新しいアプリを作成します。 gitリポジトリを選択するように求められたら、 その他\/マニュアル サンプルプロジェクトリポジトリのURLを貼り付けます（ https:\/\/github.com\/bitrise-io\/sample-swift-project-with-parallel-ui-test ） の中に Gitリポジトリ（クローン）URL 分野。 表示されるポップアップで、これがパブリックリポジトリであることを確認します。 を選択 主人 スキャンするブランチ。 プロジェクトスキャナーが完了するのを待ちます。 提供されている配布方法のいずれかを選択します（たとえば、 発達 、現在はテストに重点を置いているため、実際には問題ではありません）。 提供されたスタックを確認し、アプリアイコンとWebhook登録の選択をスキップして、最初のビルドを開始します。 新しいBitriseプロジェクトのワークフローエディタを開きます。 に移動します bitrise.yml タブを押して、既存のものを置き換えます bitrise.yml 拡張された例の内容で bitrise.yml ファイル。 クリック ビルドの開始\/スケジュール ボタンをクリックし、 run_tests_groups 「 ワークフロー、パイプライン ポップアップの下部にある「」ドロップダウンメニュー。 パイプラインのビルドページを開きます。 を選択 deploy_test_results 建てる。 クリック 詳細とアドオン ビルドの詳細ページで、 テストレポートアドオン マージされたテストレポートを表示します。 " }, 
{ "title" : "bitrise.yml ", 
"url" : "ビルドとパイプライン/パイプラインの構築-ベータ版-/iosプラットフォームで現在サポートされているユースケース.html#bitrise-yml-78716-2", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ パイプラインの構築[ベータ版] \/ iOSプラットフォームで現在サポートされているユースケース \/ （iOS）テスト結果のマージとテストレポートアドオンへのデプロイ \/ bitrise.yml ", 
"snippet" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/ios-merging-test-results-and-deploying-to-the-test-reports-add-on.md#bitriseyml...", 
"body" : "GitHubリンク： https:\/\/github.com\/bitrise-io\/workflow-recipes\/blob\/main\/recipes\/ios-merging-test-results-and-deploying-to-the-test-reports-add-on.md#bitriseyml " }, 
{ "title" : "ビルド設定の構成 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 ", 
"snippet" : "ビルドの中心はbitrise.ymlファイルです。使用するステップ、プロジェクトタイプ、トリガーマップを構成し、アプリレベルおよびワークフローレベルの環境変数を指定できます。 ビルドを広範囲に構成およびカスタマイズできます。 Bitriseには、アプリを思いどおりに作成できるようにするための多数のオプションが用意されています。 ビルド構成の中心は bitrise.yml ファイル：このファイルには、使用するすべてのワークフローとステップの構成が含まれ、プロジェクトタイプ、トリガーマップが指定され、指定したアプリレベルおよびワークフローレベルの環境変数が含まれます。あなたはできる このファイルを...", 
"body" : "ビルドの中心はbitrise.ymlファイルです。使用するステップ、プロジェクトタイプ、トリガーマップを構成し、アプリレベルおよびワークフローレベルの環境変数を指定できます。 ビルドを広範囲に構成およびカスタマイズできます。 Bitriseには、アプリを思いどおりに作成できるようにするための多数のオプションが用意されています。 ビルド構成の中心は bitrise.yml ファイル：このファイルには、使用するすべてのワークフローとステップの構成が含まれ、プロジェクトタイプ、トリガーマップが指定され、指定したアプリレベルおよびワークフローレベルの環境変数が含まれます。あなたはできる このファイルをbitrise.ioまたはGitリポジトリに保存します そして、あなたはアクセスすることができます bitrise.yml 以前に実行したビルドのファイル。 あなたはできる 通知を構成する ビルドが終了するとすぐにユーザーに通知されるようにします。 コミットがプッシュされるかプルリクエストが開かれるたびにビルドを実行するのではなく、特定のファイルが変更された場合にのみ、ビルドを実行することができます。 選択的ビルド 特徴。 コミットがリポジトリに頻繁にプッシュされ、各コミットが新しいビルドをトリガーする場合、トリガーされた各ビルドが終了するまで待ってから、新しいビルドを開始する必要はありません。使用 ローリングビルド 時間を無駄にしないようにする機能！ " }, 
{ "title" : "ビルドのスタックを設定する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する ", 
"snippet" : "ビルドスタックは、Bitriseがビルドの実行に使用する仮想マシンのバージョンを示します。すべてのビルドのスタックを設定することも、ワークフローエディターまたはbitrise.ymlファイルでワークフロー固有のスタックを設定することもできます。 ビルドスタック ビルドの実行に使用する仮想マシンのバージョンを示します。すべてのビルドにスタックを設定することも、ワークフロー固有のスタックを設定することもできます。 マシンタイプを構築する スタックを構築する...", 
"body" : "ビルドスタックは、Bitriseがビルドの実行に使用する仮想マシンのバージョンを示します。すべてのビルドのスタックを設定することも、ワークフローエディターまたはbitrise.ymlファイルでワークフロー固有のスタックを設定することもできます。 ビルドスタック ビルドの実行に使用する仮想マシンのバージョンを示します。すべてのビルドにスタックを設定することも、ワークフロー固有のスタックを設定することもできます。 マシンタイプを構築する スタックを構築する " }, 
{ "title" : "ワークフローエディタでスタックを設定する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html#ワークフローエディタでスタックを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する \/ ワークフローエディタでスタックを設定する ", 
"snippet" : "を構成する最も簡単な方法 ビルドスタック ワークフローエディタにあります。デフォルトのスタックとワークフロー固有のスタックの両方を設定できます。...", 
"body" : "を構成する最も簡単な方法 ビルドスタック ワークフローエディタにあります。デフォルトのスタックとワークフロー固有のスタックの両方を設定できます。 " }, 
{ "title" : "[スタック]タブでデフォルトのスタックを設定する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html#-スタック-タブでデフォルトのスタックを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する \/ ワークフローエディタでスタックを設定する \/ [スタック]タブでデフォルトのスタックを設定する ", 
"snippet" : "アプリのデフォルトのスタックは、ワークフローに特定のスタックを設定していない場合に使用されるスタックです。 プロジェクトタイプ アプリのプロジェクトタイプを変更する場合は注意してください 設定 タブを選択したデフォルトスタックと互換性のないタイプに変更すると、スタックが自動的に互換性のあるものに変更されます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く スタックとマシン タブ。 の中に デフォルトのスタック セクションで、ドロップダウンメニューを開き、必要なスタックを選択します。 クリック 保存する 右上隅にあります。...", 
"body" : "アプリのデフォルトのスタックは、ワークフローに特定のスタックを設定していない場合に使用されるスタックです。 プロジェクトタイプ アプリのプロジェクトタイプを変更する場合は注意してください 設定 タブを選択したデフォルトスタックと互換性のないタイプに変更すると、スタックが自動的に互換性のあるものに変更されます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く スタックとマシン タブ。 の中に デフォルトのスタック セクションで、ドロップダウンメニューを開き、必要なスタックを選択します。 クリック 保存する 右上隅にあります。 " }, 
{ "title" : "[スタック]タブでワークフロー固有のスタックを設定する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html#-スタック-タブでワークフロー固有のスタックを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する \/ ワークフローエディタでスタックを設定する \/ [スタック]タブでワークフロー固有のスタックを設定する ", 
"snippet" : "ワークフローにスタックを設定すると、デフォルトのスタックに関係なく、そのワークフローは常にそのスタックで実行されます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く スタックとマシン タブ。 下にスクロールして、必要なワークフローを見つけます。 スタックを選択します。 クリック 保存する 右上隅にあります。...", 
"body" : "ワークフローにスタックを設定すると、デフォルトのスタックに関係なく、そのワークフローは常にそのスタックで実行されます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く スタックとマシン タブ。 下にスクロールして、必要なワークフローを見つけます。 スタックを選択します。 クリック 保存する 右上隅にあります。 " }, 
{ "title" : "ワークフロー エディターでのマシン タイプの設定 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html#ワークフロー-エディターでのマシン-タイプの設定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する \/ ワークフローエディタでスタックを設定する \/ ワークフロー エディターでのマシン タイプの設定 ", 
"snippet" : "ワークフロー エディターで、ビルドに使用するマシン タイプを定義できます。使用可能なマシンの種類は、使用するスタックの種類によって異なります。 表1「. マシンタイプを設定するには: でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く スタックとマシン タブ。 の中に デフォルト スタック セクションで、 デフォルト スタックのマシンタイプ セクションを開き、マシン タイプを選択します。 必要に応じて、ワークフロー固有のスタック セットを持つワークフローのワークフロー固有のマシン タイプを選択します。...", 
"body" : "ワークフロー エディターで、ビルドに使用するマシン タイプを定義できます。使用可能なマシンの種類は、使用するスタックの種類によって異なります。 表1「. マシンタイプを設定するには: でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く スタックとマシン タブ。 の中に デフォルト スタック セクションで、 デフォルト スタックのマシンタイプ セクションを開き、マシン タイプを選択します。 必要に応じて、ワークフロー固有のスタック セットを持つワークフローのワークフロー固有のマシン タイプを選択します。 " }, 
{ "title" : "bitrise.ymlファイルでスタックを設定する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html#bitrise-ymlファイルでスタックを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する \/ bitrise.ymlファイルでスタックを設定する ", 
"snippet" : "デフォルトのスタックとワークフロー固有のタスクの両方をで設定できます bitrise.yml アプリのファイル。使用 meta 適切なスタックIDを持つフィールド： meta:       bitrise.io:        stack: osx-xcode-13.1.x これは、次の場合に特に便利です。 あなたの bitrise.yml アプリのリポジトリに保存されているファイル 。 スタックID スタックIDを見つける簡単な方法は システムレポートページ ：ファイル名なし .log 拡張子はスタックIDです。または、ワークフローエディターでスタックを設定してから、でIDを確認することもで...", 
"body" : "デフォルトのスタックとワークフロー固有のタスクの両方をで設定できます bitrise.yml アプリのファイル。使用 meta 適切なスタックIDを持つフィールド： meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x これは、次の場合に特に便利です。 あなたの bitrise.yml アプリのリポジトリに保存されているファイル 。 スタックID スタックIDを見つける簡単な方法は システムレポートページ ：ファイル名なし .log 拡張子はスタックIDです。または、ワークフローエディターでスタックを設定してから、でIDを確認することもできます。 bitrise.yml タブ、を見つけることによって meta 分野。 システムレポートには、 プレインストールされたツール それはスタックで利用可能です。 " }, 
{ "title" : "bitrise.ymlでデフォルトスタックを設定する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html#bitrise-ymlでデフォルトスタックを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する \/ bitrise.ymlファイルでスタックを設定する \/ bitrise.ymlでデフォルトスタックを設定する ", 
"snippet" : "アプリのデフォルトのスタックは、ワークフローに特定のスタックを設定していない場合に使用されるスタックです。 アプリを開きます bitrise.yml ファイル。 を追加 meta 外に入る workflows プロパティまたはあなたの最後に bitrise.yml ファイル： meta:       bitrise.io:        stack:  必ず二重インデントを使用してください。 スタックIDを追加します。 スタックIDはで見つけることができます システムレポートページ ：ファイル名なし .log 拡張子はスタックIDです。 meta:       bitrise.io:     ...", 
"body" : "アプリのデフォルトのスタックは、ワークフローに特定のスタックを設定していない場合に使用されるスタックです。 アプリを開きます bitrise.yml ファイル。 を追加 meta 外に入る workflows プロパティまたはあなたの最後に bitrise.yml ファイル： meta:      \n bitrise.io:       \n stack:  必ず二重インデントを使用してください。 スタックIDを追加します。 スタックIDはで見つけることができます システムレポートページ ：ファイル名なし .log 拡張子はスタックIDです。 meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " }, 
{ "title" : "bitrise.ymlでワークフロー固有のスタックを設定する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html#bitrise-ymlでワークフロー固有のスタックを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する \/ bitrise.ymlファイルでスタックを設定する \/ bitrise.ymlでワークフロー固有のスタックを設定する ", 
"snippet" : "ワークフローにスタックを設定すると、デフォルトのスタックに関係なく、そのワークフローは常にそのスタックで実行されます。 アプリを開きます bitrise.yml ファイル。 を見つける workflows プロパティを選択し、必要なワークフローの名前を見つけます。 追加する meta ワークフロー自体の下のエントリ： workflows: deploy: meta:       bitrise.io:        stack:  スタックIDを追加します。 スタックIDはで見つけることができます システムレポートページ ：ファイル名なし .log 拡張子はスタックIDです。 workflow...", 
"body" : "ワークフローにスタックを設定すると、デフォルトのスタックに関係なく、そのワークフローは常にそのスタックで実行されます。 アプリを開きます bitrise.yml ファイル。 を見つける workflows プロパティを選択し、必要なワークフローの名前を見つけます。 追加する meta ワークフロー自体の下のエントリ： workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack:  スタックIDを追加します。 スタックIDはで見つけることができます システムレポートページ ：ファイル名なし .log 拡張子はスタックIDです。 workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " }, 
{ "title" : "bitrise.ymlファイルでマシンタイプを設定する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html#bitrise-ymlファイルでマシンタイプを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する \/ bitrise.ymlファイルでスタックを設定する \/ bitrise.ymlファイルでマシンタイプを設定する ", 
"snippet" : "ビルドに使用するマシンタイプを定義することもできます bitrise.yml あなたのアプリの。マシンタイプは、ビルドで使用されるハードウェアリソースを指します。たとえば、Eliteマシンには、標準マシンよりも多くのCPUコアと使用可能なRAMがあります。 でマシンタイプを設定するには bitrise.yml ファイル、あなたは使用する必要があります machine_type_id の属性 meta エントリ： 利用可能なマシンID 使用可能なマシンタイプIDは次の場所にあります。 マシンタイプを構築する。 アプリを開きます bitrise.yml ファイル。 を見つける workflows ...", 
"body" : "ビルドに使用するマシンタイプを定義することもできます bitrise.yml あなたのアプリの。マシンタイプは、ビルドで使用されるハードウェアリソースを指します。たとえば、Eliteマシンには、標準マシンよりも多くのCPUコアと使用可能なRAMがあります。 でマシンタイプを設定するには bitrise.yml ファイル、あなたは使用する必要があります machine_type_id の属性 meta エントリ： 利用可能なマシンID 使用可能なマシンタイプIDは次の場所にあります。 マシンタイプを構築する。 アプリを開きます bitrise.yml ファイル。 を見つける workflows プロパティを選択し、必要なワークフローの名前を見つけます。 追加する meta エントリ： # setting an 8-core Gen2 machine for an Xcode stack as the default machine type of the app:\nmeta:\n bitrise.io:\n machine_type_id: g2.8core\n# setting a 12-core Gen2 machine as a Workflow-specific machine type\nworkflows:\n deploy: \n meta: \n bitrise.io: \n machine_type_id: g2.12core " }, 
{ "title" : "マシンタイプを構築する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのスタックを設定する.html#マシンタイプを構築する-78718", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのスタックを設定する \/ マシンタイプを構築する ", 
"snippet" : "Bitriseは、仕様とクレジットコストが異なる複数のビルドマシンを提供しています。ニーズに応じて選択できます。 Bitriseは、仕様とクレジットコストが異なる複数のビルドマシンを提供しています。ニーズに応じて選択できます。 サブスクリプション プランごとのマシンの可用性 すべてのマシンがすべてのサブスクリプション プランで利用できるわけではありません。訪問 価格ページ あなたのプランで利用可能なマシンを見つけるために！ Bitriseビルドマシンタイプ オペレーティング·システム マシンタイプ名 CPU 羊 1分あたりのクレジットコスト のマシンタイプ ID YAML 構成 マックOS M...", 
"body" : "Bitriseは、仕様とクレジットコストが異なる複数のビルドマシンを提供しています。ニーズに応じて選択できます。 Bitriseは、仕様とクレジットコストが異なる複数のビルドマシンを提供しています。ニーズに応じて選択できます。 サブスクリプション プランごとのマシンの可用性 すべてのマシンがすべてのサブスクリプション プランで利用できるわけではありません。訪問 価格ページ あなたのプランで利用可能なマシンを見つけるために！ Bitriseビルドマシンタイプ オペレーティング·システム マシンタイプ名 CPU 羊 1分あたりのクレジットコスト のマシンタイプ ID YAML 構成 マックOS M1 Elite XL 8 CPU @ 3.2 GHz 12 GB 4\/分 g2-m1.8core M1マックスミディアム 5 CPU @3.2 GHz 27GB 6\/分 g2-m1-max.5core M1 最大大 10 CPU @3.2 GHz 54GB 8\/分 g2-m1-max.10core Standard 4 vCPU @ 3.2 GHz 19 GB 2\/分 g2.4core Elite 8 vCPU @ 3.2 GHz 35 GB 4\/分 g2.8core Elite XL 12 vCPU @ 3.2 GHz 54 GB 6\/分 g2.12core Linux Standard 4 vCPU @ 3.1 GHz 16 GB 1分 standard Elite 8 vCPU @ 3.1 GHz 32 GB 2\/分 elite Elite XL 16 vCPU @ 3.1 GHz 64 GB 4\/分 elite-xl " }, 
{ "title" : "アプリのbitrise.ymlファイルの管理 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/アプリのbitrise-ymlファイルの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ アプリのbitrise.ymlファイルの管理 ", 
"snippet" : "ビルドの中心はbitrise.ymlファイルです。使用するステップ、プロジェクトタイプ、トリガーマップを構成し、アプリレベルおよびワークフローレベルの環境変数を指定できます。 NS bitrise.yml ファイルはBitriseセットアップの中心であり、アプリのビルド構成全体を保存します。スタック、トリガーマップ、および含まれるワークフローとステップを指定します。ワークフローエディターのグラフィカルUIでワークフローを編集する場合、実際には bitrise.yml ファイル。 YAMLファイルのサイズ制限 の合計サイズに注意してください bitrise.yml そしてその bitrise.s...", 
"body" : "ビルドの中心はbitrise.ymlファイルです。使用するステップ、プロジェクトタイプ、トリガーマップを構成し、アプリレベルおよびワークフローレベルの環境変数を指定できます。 NS bitrise.yml ファイルはBitriseセットアップの中心であり、アプリのビルド構成全体を保存します。スタック、トリガーマップ、および含まれるワークフローとステップを指定します。ワークフローエディターのグラフィカルUIでワークフローを編集する場合、実際には bitrise.yml ファイル。 YAMLファイルのサイズ制限 の合計サイズに注意してください bitrise.yml そしてその bitrise.secrets.yml ファイルは400KBを超えることはできません。 管理する方法は2つあります bitrise.yml アプリのファイル： ファイルをGitリポジトリに保持します。このソリューションを使用すると、 bitrise.yml ファイル。 続けて bitrise.io ：Bitriseは構成を保存し、Webサイトからいつでもアクセスできます。このソリューションでは、構成ファイルはリポジトリから完全に独立しています。 2つのソリューションはいつでも切り替えることができます。 bitrise.ymlリファレンス あなたはについての詳細な参照情報を見つけることができます bitrise.yml 関連ガイドのファイル： bitrise.ymlの基本。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ 秘密 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "bitrise.ymlファイルをリポジトリに保存する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/アプリのbitrise-ymlファイルの管理.html#bitrise-ymlファイルをリポジトリに保存する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ アプリのbitrise.ymlファイルの管理 \/ bitrise.ymlファイルをリポジトリに保存する ", 
"snippet" : "GitHub Enterprise 残念ながら、この機能はGitHubEnterpriseユーザーにはまだサポートされていません。 この回避策は、たとえば、GitHubEnterpriseおよびBitbucketServerユーザーに対して機能します。 あなたが保存するとき bitrise.yml リポジトリ内の構成ファイルの場合、Bitriseのビルドプロセスはそのファイルを使用してビルドを実行します。この意味は： 構成ファイルのバージョン管理を完全に制御できます。 ワークフローまたはトリガーマップに変更を加えるたびに、リポジトリ内のファイルに変更をコミットする必要があります。 自分で作成す...", 
"body" : "GitHub Enterprise 残念ながら、この機能はGitHubEnterpriseユーザーにはまだサポートされていません。 この回避策は、たとえば、GitHubEnterpriseおよびBitbucketServerユーザーに対して機能します。 あなたが保存するとき bitrise.yml リポジトリ内の構成ファイルの場合、Bitriseのビルドプロセスはそのファイルを使用してビルドを実行します。この意味は： 構成ファイルのバージョン管理を完全に制御できます。 ワークフローまたはトリガーマップに変更を加えるたびに、リポジトリ内のファイルに変更をコミットする必要があります。 自分で作成する必要はありません bitrise.yml 事前にファイル：に保存されているファイルを使用できます bitrise.io 。を保存する方法を見てみましょう bitrise.yml まだ含まれていないリポジトリ内のファイル。 同じリポジトリを持つ複数のアプリ 1つしか保存できません bitrise.yml 特定のリポジトリ内のファイル。 Bitriseはルートディレクトリでファイルを検索するため、現在、2つを別々のフォルダに含める方法はありません。 2つ以上のBitriseアプリが同じリポジトリに接続されている場合は、それらのすべてのワークフローを同じリポジトリに保存できます bitrise.yml ファイル。もちろん、ワークフローごとに異なる名前を付ける必要があります。2つにすることはできません。 primary たとえば、同じファイル内のワークフロー。 Bitriseでアプリを開き、に移動します チーム タブ。 確認してください サービスクレデンシャルユーザー セクション。サービスクレデンシャルユーザーは、少なくとも read リポジトリへのアクセス。 サービスクレデンシャルの統合 アプリがサービスクレデンシャルユーザー統合がサポートされていないリポジトリを使用している場合（たとえば、リポジトリはプライベートIPサブネットでのみアクセス可能）、Webサイトが取得できないため、この機能は機能しないことに注意してください。 bitrise.yml IPアドレスの制限による。 に移動します ワークフロー タブ。 ワークフローエディタで、に移動します bitrise.yml タブ。 クリック アプリリポジトリに保存する 。 追加するように求められたら bitrise.yml アプリのリポジトリには、次の2つのオプションがあります。 現在のコンテンツをコピーします bitrise.yml クリップボードにファイルします。次に、独自のファイルを作成して、その内容をコピーできます。 現在のダウンロード bitrise.yml ファイル。 リポジトリで、コミットします bitrise.yml デフォルトのブランチのルートにファイルします。 リポジトリのブランチ アプリのデフォルトブランチには常に bitrise.yml その上にファイルします。あなたは別のものを保存することができます bitrise.yml 他のブランチのファイル： リポジトリ内の複数のブランチにbitrise.ymlファイルを保存する。 Bitriseアプリのデフォルトブランチはで確認できます bitrise.io に行くことによって 設定 タブと検索 デフォルトのブランチ オプション。 Bitriseで、をクリックします 設定を更新 。 確認するように求められたら bitrise.yml ファイルが有効です。クリックしてください 継続する 。 ファイルが有効であることを確認してください NS bitrise.yml リポジトリ内のファイルは常に有効である必要があります。誤った構文が含まれていると、ビルドが破損する可能性があります。 すべてがうまくいけば、あなたはあなたのを正常に変更したという確認を受け取るはずです bitrise.yml ストレージ設定。 Bitrise Web サイトの IP アドレスを許可リストに登録する コードを保存するために何らかの形式の自己ホスト型ソリューションを使用する場合、Bitrise Web サイトとそのバックグラウンド ワーカーの静的 IP アドレスを許可リストに登録する必要がある場合があります。これにより、保存などの機能を使用できます。 bitrise.yml ファイルを自分のリポジトリに置くか、Bitrise からビルド ステータスの更新を受け取ります。 Bitrise Web サイトの IP アドレス. " }, 
{ "title" : "リポジトリに保存されているbitrise.ymlを更新しています ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/アプリのbitrise-ymlファイルの管理.html#リポジトリに保存されているbitrise-ymlを更新しています", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ アプリのbitrise.ymlファイルの管理 \/ リポジトリに保存されているbitrise.ymlを更新しています ", 
"snippet" : "あなたが保存するとき bitrise.yml リポジトリ内のファイルでも、オンラインワークフローエディタを使用してビルド構成を変更できます。ワークフローエディタに保存した後、変更をコミットする必要があります。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 更新するワークフローに変更を加えます。 クリック 保存する 右上隅にあります。 を更新するように求められます bitrise.yml リポジトリ内のファイル。 2つのオプションがあります。 現在のコンテンツをコピーします bitrise.yml クリップボードにファイルします。次に、独自のファイルを作成...", 
"body" : "あなたが保存するとき bitrise.yml リポジトリ内のファイルでも、オンラインワークフローエディタを使用してビルド構成を変更できます。ワークフローエディタに保存した後、変更をコミットする必要があります。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 更新するワークフローに変更を加えます。 クリック 保存する 右上隅にあります。 を更新するように求められます bitrise.yml リポジトリ内のファイル。 2つのオプションがあります。 現在のコンテンツをコピーします bitrise.yml クリップボードにファイルします。次に、独自のファイルを作成して、その内容をコピーできます。 現在のダウンロード bitrise.yml ファイル。 リポジトリで、コミットします bitrise.yml ファイル。 リポジトリのブランチ アプリのデフォルトブランチには常に bitrise.yml その上にファイルします。あなたは別のものを保存することができます bitrise.yml 他のブランチのファイル： リポジトリ内の複数のブランチにbitrise.ymlファイルを保存する。 Bitriseで、をクリックします 私はこれで終わりです をフェッチするには bitrise.yml リポジトリから。 [完了]をクリックする前に変更をコミットします リポジトリへの変更をコミットしていない場合、これにより変更が上書きされます。 " }, 
{ "title" : "リポジトリ内の複数のブランチにbitrise.ymlファイルを保存する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/アプリのbitrise-ymlファイルの管理.html#リポジトリ内の複数のブランチにbitrise-ymlファイルを保存する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ アプリのbitrise.ymlファイルの管理 \/ リポジトリ内の複数のブランチにbitrise.ymlファイルを保存する ", 
"snippet" : "最初に追加するとき bitrise.yml リポジトリに、デフォルトのブランチにコミットする必要があります。あなたはでアプリのデフォルトのブランチをチェックアウトすることができます bitrise.io 下 設定 タブ。 保存することを選択した場合 bitrise.yml リポジトリ内のファイルの場合、デフォルトのブランチには bitrise.yml ！ ただし、初期構成を行って、 bitrise.yml リポジトリから、保存できます bitrise.yml 他のブランチ上のファイルを作成し、それらのいずれかを使用してビルドを実行します。 Bitriseでリポジトリのブランチを構築する場合は、...", 
"body" : "最初に追加するとき bitrise.yml リポジトリに、デフォルトのブランチにコミットする必要があります。あなたはでアプリのデフォルトのブランチをチェックアウトすることができます bitrise.io 下 設定 タブ。 保存することを選択した場合 bitrise.yml リポジトリ内のファイルの場合、デフォルトのブランチには bitrise.yml ！ ただし、初期構成を行って、 bitrise.yml リポジトリから、保存できます bitrise.yml 他のブランチ上のファイルを作成し、それらのいずれかを使用してビルドを実行します。 Bitriseでリポジトリのブランチを構築する場合は、 bitrise.yml そのブランチ上のファイル。そして、あなたは常に維持する必要があることを忘れないでください bitrise.yml デフォルトのブランチにあるファイル。 複数のブランチにbitrise.ymlファイルを使用したBitriseセットアップ FantasticAppというアプリがあるとしましょう。 FantasticAppのGitリポジトリでは、デフォルトのブランチが呼び出されます main 。もあります deploy ブランチ。 コードのプッシュまたはプルリクエスト main と呼ばれるワークフローをトリガーします main-workflow 。コードのプッシュまたはプルリクエスト deploy と呼ばれるワークフローをトリガーします deploy-workflow 。 リポジトリには、 bitrise.yml 両方のファイル main そしてその deploy 両方のワークフローを含むブランチ。ワークフローに変更を加えると、FantasticAppチームは変更されたものをコミットします bitrise.yml 両方のブランチにファイルして、ワークフローが両方で最新であることを確認します。 " }, 
{ "title" : "bitrise.ymlファイルをbitrise.ioに戻す ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/アプリのbitrise-ymlファイルの管理.html#bitrise-ymlファイルをbitrise-ioに戻す", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ アプリのbitrise.ymlファイルの管理 \/ bitrise.ymlファイルをbitrise.ioに戻す ", 
"snippet" : "デフォルト設定では、 bitrise.yml 上のファイル bitrise.io ：新しいアプリを追加すると、自動的に作成されます bitrise.yml あなたのためのファイルとそれは私たちのウェブサイトに保存されています。これがうまくいけば、何も変更する必要はありません！ ただし、ストレージ設定を変更して構成ファイルをリポジトリに保持している場合は、いつでも簡単に元に戻してファイルを保存できます。 bitrise.io 。 Bitriseでアプリを開きます。 に移動します ワークフロー タブ。 ワークフローエディタで、に移動します bitrise.yml タブ。 クリック bitrise....", 
"body" : "デフォルト設定では、 bitrise.yml 上のファイル bitrise.io ：新しいアプリを追加すると、自動的に作成されます bitrise.yml あなたのためのファイルとそれは私たちのウェブサイトに保存されています。これがうまくいけば、何も変更する必要はありません！ ただし、ストレージ設定を変更して構成ファイルをリポジトリに保持している場合は、いつでも簡単に元に戻してファイルを保存できます。 bitrise.io 。 Bitriseでアプリを開きます。 に移動します ワークフロー タブ。 ワークフローエディタで、に移動します bitrise.yml タブ。 クリック bitrise.ioに保存 。 どちらかを選択してください bitrise.yml ファイルはで使用する必要があります bitrise.io 今から。 あなたはの内容をコピーすることができます bitrise.yml アプリのリポジトリに保存されているファイル。 あなたはの最後のバージョンをコピーすることができます bitrise.yml 使用したファイル bitrise.io 。 クリック 設定を更新 。 すべてがうまくいけば、あなたはあなたのを正常に変更したという確認を受け取るはずです bitrise.yml ストレージ設定。 " }, 
{ "title" : "アプリのbitrise.ymlファイルを編集する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/アプリのbitrise-ymlファイルを編集する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ アプリのbitrise.ymlファイルを編集する ", 
"snippet" : "bitrise.ioのグラフィカルワークフローエディターでファイルを編集するか、ファイルをダウンロードしてローカルで編集することができます。ワークフローエディターでワークフローまたはステップを変更するときは常に、アプリのbitrise.yml構成ファイルを間接的に編集しています。 あなたが変更するときはいつでも ワークフロー または ステップ ワークフローエディターでは、アプリのを間接的に編集しています bitrise.yml 構成ファイル。ただし、必要に応じて、YAMLでファイルを直接編集できます。 これには、の構造にある程度精通している必要があります。 bitrise.yml ファイル。続...", 
"body" : "bitrise.ioのグラフィカルワークフローエディターでファイルを編集するか、ファイルをダウンロードしてローカルで編集することができます。ワークフローエディターでワークフローまたはステップを変更するときは常に、アプリのbitrise.yml構成ファイルを間接的に編集しています。 あなたが変更するときはいつでも ワークフロー または ステップ ワークフローエディターでは、アプリのを間接的に編集しています bitrise.yml 構成ファイル。ただし、必要に応じて、YAMLでファイルを直接編集できます。 これには、の構造にある程度精通している必要があります。 bitrise.yml ファイル。続きを読む： bitrise.ymlの基本bitrise.ioのグラフィカルワークフローエディターでファイルを編集するか、ダウンロードしてローカルで編集することができます。 " }, 
{ "title" : "bitrise.ymlファイルをオンラインで編集する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/アプリのbitrise-ymlファイルを編集する.html#bitrise-ymlファイルをオンラインで編集する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ アプリのbitrise.ymlファイルを編集する \/ bitrise.ymlファイルをオンラインで編集する ", 
"snippet" : "ビルド構成をyml形式で編集できます。 bitrise.ymlエディター アプリのワークフローエディターに移動して、 bitrise.yml タブ。 で折りたたんで展開します - と + サイン。 押す NS \/ Cmd + NS 検索して、検索できる場所を置き換えます RegExp 、 Match Whole Word 、大文字と小文字を区別する、大文字と小文字を区別しない、または選択したセクションでのみ検索します。 使用 プレビューサイドバー ナビゲーションを簡単にするために右側にあります。 変更を保存するには、をクリックします 保存する 右上隅にあります。 現在のをダウンロードするには ...", 
"body" : "ビルド構成をyml形式で編集できます。 bitrise.ymlエディター アプリのワークフローエディターに移動して、 bitrise.yml タブ。 で折りたたんで展開します - と + サイン。 押す NS \/ Cmd + NS 検索して、検索できる場所を置き換えます RegExp 、 Match Whole Word 、大文字と小文字を区別する、大文字と小文字を区別しない、または選択したセクションでのみ検索します。 使用 プレビューサイドバー ナビゲーションを簡単にするために右側にあります。 変更を保存するには、をクリックします 保存する 右上隅にあります。 現在のをダウンロードするには bitrise.yml ファイルをクリックします 現在保存されている設定をダウンロードする 。または、ファイルの特定のセクションを選択して、それらをローカルのいずれかにコピーすることもできます。 bitrise.yml ファイルまたは別のアプリに bitrise.yml ファイル。 " }, 
{ "title" : "bitrise.ymlファイルをローカルで編集する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/アプリのbitrise-ymlファイルを編集する.html#bitrise-ymlファイルをローカルで編集する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ アプリのbitrise.ymlファイルを編集する \/ bitrise.ymlファイルをローカルで編集する ", 
"snippet" : "私たちのymlスキームはで共有されています スキーマストア 。これは、次のファイルをローカルで編集すると、構文の強調表示とオートコンプリートが利用できることを意味します。 bitrise.yml step.yml bitrise.json 次のエディタはオートコンプリート機能をサポートしています。 IntelliJ IDEA PhpStorm PyCharm ライダー RubyMine Visual Studio 2013+ VisualStudioコード Visual Studio for Mac WebStorm JSONBuddy...", 
"body" : "私たちのymlスキームはで共有されています スキーマストア 。これは、次のファイルをローカルで編集すると、構文の強調表示とオートコンプリートが利用できることを意味します。 bitrise.yml step.yml bitrise.json 次のエディタはオートコンプリート機能をサポートしています。 IntelliJ IDEA PhpStorm PyCharm ライダー RubyMine Visual Studio 2013+ VisualStudioコード Visual Studio for Mac WebStorm JSONBuddy " }, 
{ "title" : "ビルドのbitrise.ymlファイルへのアクセス ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのbitrise-ymlファイルへのアクセス.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのbitrise.ymlファイルへのアクセス ", 
"snippet" : "アプリのダッシュボードからビルドを選択し、bitrise.ymlドロップダウンメニューから[show bitrise.yml]を選択すると、ビルドのbitrise.ymlファイルにアクセスできます。 Bitriseでビルドを実行すると、いつでも確認できます。 bitrise.yml 使用したビルドの構成。あなたはそれをダウンロードして、それを現在のものと比較することができます bitrise.yml ファイルを作成し、現在の構成ファイルをビルドの構成ファイルに置き換えることもできます。 ビルドの構成ファイルにアクセスするには： 上のアプリケーションを選択します ダッシュボード ビルドの1つを選...", 
"body" : "アプリのダッシュボードからビルドを選択し、bitrise.ymlドロップダウンメニューから[show bitrise.yml]を選択すると、ビルドのbitrise.ymlファイルにアクセスできます。 Bitriseでビルドを実行すると、いつでも確認できます。 bitrise.yml 使用したビルドの構成。あなたはそれをダウンロードして、それを現在のものと比較することができます bitrise.yml ファイルを作成し、現在の構成ファイルをビルドの構成ファイルに置き換えることもできます。 ビルドの構成ファイルにアクセスするには： 上のアプリケーションを選択します ダッシュボード ビルドの1つを選択します。 選択する bitrise.yml 右側、ビルドステータスカードの上。 ドロップダウンメニューで、 bitrise.ymlを表示する 。 " }, 
{ "title" : "bitrise.ymlファイルの変更を確認する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのbitrise-ymlファイルへのアクセス.html#bitrise-ymlファイルの変更を確認する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのbitrise.ymlファイルへのアクセス \/ bitrise.ymlファイルの変更を確認する ", 
"snippet" : "クリックしたら bitrise.ymlを表示する 、あなたは見るでしょう BUILD'S BITRISE YML ビルドの構成の詳細を表示するポップアップウィンドウ。ビルドの場合 bitrise.yml コンテンツが現在のビルドと異なります bitrise.yml 、2つのエディターが並べて表示されます。 BITRISE.YMLの変更 ポップアップウィンドウ。ビルド間の違いは、次の色で強調表示されています。 緑は追加されたコンテンツを意味します。 青は変更されたコンテンツを意味します。 赤は削除されたコンテンツを意味します。...", 
"body" : "クリックしたら bitrise.ymlを表示する 、あなたは見るでしょう BUILD'S BITRISE YML ビルドの構成の詳細を表示するポップアップウィンドウ。ビルドの場合 bitrise.yml コンテンツが現在のビルドと異なります bitrise.yml 、2つのエディターが並べて表示されます。 BITRISE.YMLの変更 ポップアップウィンドウ。ビルド間の違いは、次の色で強調表示されています。 緑は追加されたコンテンツを意味します。 青は変更されたコンテンツを意味します。 赤は削除されたコンテンツを意味します。 " }, 
{ "title" : "現在のbitrise.ymlをビルドのbitrise.ymlに復元する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのbitrise-ymlファイルへのアクセス.html#現在のbitrise-ymlをビルドのbitrise-ymlに復元する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのbitrise.ymlファイルへのアクセス \/ 現在のbitrise.ymlをビルドのbitrise.ymlに復元する ", 
"snippet" : "あなたはいつでも現在を変更することができます bitrise.yml アプリの以前のビルドの1つの構成への構成。そうするために： 上のアプリケーションを選択します ダッシュボード ビルドの1つを選択します。 選択する bitrise.yml 右側、ビルドステータスカードの上。 ドロップダウンメニューで、 bitrise.ymlを表示する 。 の中に BITRISE.YMLの変更 ポップアップウィンドウで、 戻す ボタン。 打つ わかった の中に 本気ですか？ 現在のを確認して上書きするためのポップアップウィンドウ bitrise.yml 。...", 
"body" : "あなたはいつでも現在を変更することができます bitrise.yml アプリの以前のビルドの1つの構成への構成。そうするために： 上のアプリケーションを選択します ダッシュボード ビルドの1つを選択します。 選択する bitrise.yml 右側、ビルドステータスカードの上。 ドロップダウンメニューで、 bitrise.ymlを表示する 。 の中に BITRISE.YMLの変更 ポップアップウィンドウで、 戻す ボタン。 打つ わかった の中に 本気ですか？ 現在のを確認して上書きするためのポップアップウィンドウ bitrise.yml 。 " }, 
{ "title" : "ビルドのbitrise.ymlファイルを削除する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドのbitrise-ymlファイルへのアクセス.html#ビルドのbitrise-ymlファイルを削除する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドのbitrise.ymlファイルへのアクセス \/ ビルドのbitrise.ymlファイルを削除する ", 
"snippet" : "必要に応じて、ビルドを削除するだけです。 bitrise.yml ファイル。ただし、このアクションは元に戻せないことに注意してください。特定のビルドを表示することはできません。 bitrise.yml あなたがそれを削除したらファイル。 上のアプリケーションを選択します ダッシュボード ビルドの1つを選択します。 選択する bitrise.yml 右側、ビルドステータスカードの上。 ドロップダウンメニューで、 bitrise.ymlを削除します 。 確認ウィンドウで、をクリックします はい 。...", 
"body" : "必要に応じて、ビルドを削除するだけです。 bitrise.yml ファイル。ただし、このアクションは元に戻せないことに注意してください。特定のビルドを表示することはできません。 bitrise.yml あなたがそれを削除したらファイル。 上のアプリケーションを選択します ダッシュボード ビルドの1つを選択します。 選択する bitrise.yml 右側、ビルドステータスカードの上。 ドロップダウンメニューで、 bitrise.ymlを削除します 。 確認ウィンドウで、をクリックします はい 。 " }, 
{ "title" : "選択的ビルド ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/選択的ビルド.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ 選択的ビルド ", 
"snippet" : "選択的ビルド設定は、ビルドの変更検出を提供します。これを有効にすると、特定のファイルまたはフォルダーが変更された場合にのみアプリのビルドをトリガーできます。 NS 選択的ビルド 設定により、ビルドの変更が検出されます。これを有効にすると、特定のファイルまたはフォルダーが変更された場合にのみアプリのビルドをトリガーできます。 次の場合は、この設定を使用できます。 1つのリポジトリに複数のアプリがあります。 複数のアプリがリポジトリ内の共通ファイルを共有します。 Github以外のプロジェクトでの選択的ビルド セレクティブビルド機能の現在のバージョンは、GitHubプロジェクトでのみ機能します。リ...", 
"body" : "選択的ビルド設定は、ビルドの変更検出を提供します。これを有効にすると、特定のファイルまたはフォルダーが変更された場合にのみアプリのビルドをトリガーできます。 NS 選択的ビルド 設定により、ビルドの変更が検出されます。これを有効にすると、特定のファイルまたはフォルダーが変更された場合にのみアプリのビルドをトリガーできます。 次の場合は、この設定を使用できます。 1つのリポジトリに複数のアプリがあります。 複数のアプリがリポジトリ内の共通ファイルを共有します。 Github以外のプロジェクトでの選択的ビルド セレクティブビルド機能の現在のバージョンは、GitHubプロジェクトでのみ機能します。リポジトリが別のGitホスティングサービスによってホストされている場合、このオプションは利用できません。 選択的ビルド機能の使用 アプリのリポジトリへのコミットが、次の場合にのみBitriseビルドをトリガーすることを確認したいとします。 mycode.go 上のファイル develop ブランチはコミットで変更されます。 この例では、 develop 。 コードプッシュが発生するたびにビルドを開始するトリガーがあります develop ブランチ。 選択的ビルド機能で、 mycode.go 入力フィールドのファイル。 にコミットした場合 develop を変更するブランチ mycode.go ファイルの場合、Bitriseはビルドをトリガーします。コミットによってファイルが変更されない場合、Bitriseはビルドをトリガーしません。 選択的ビルドを構成するには： 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 適切なサービスクレデンシャルユーザーがアプリに設定されている必要があることを確認してください チーム ページ。 このユーザーには、プロジェクトのGitHubリポジトリの管理者権限が必要です。 あなたのアプリをクリックしてください ダッシュボード 。 クリック 設定 上部のナビゲーションバーにあります。 を見つける 選択的ビルドを有効にする オプションを選択し、右側のスイッチを切り替えます。 にファイル名とファイルパスを追加します ファイル名\/パスを追加 窓。ここで複数のファイルまたはファイルパスを追加できます。ビルドは、これらのファイルが変更された場合にのみトリガーされます。 ボタンが見つかりませんか？ 上のスクリーンショットのようにボタンが見つからない場合は、次の2つの理由が考えられます。 アプリのリポジトリはGitHubでホストされていません。 The サービスクレデンシャルユーザー が正しく設定されていないか、リポジトリに対する管理者権限がありません。 ポップアップウィンドウで、必要なパスを設定します。 一度に1つのパスを追加できます。 " }, 
{ "title" : "ファイル名またはファイルパスにパターンを使用する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/選択的ビルド.html#ファイル名またはファイルパスにパターンを使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ 選択的ビルド \/ ファイル名またはファイルパスにパターンを使用する ", 
"snippet" : "選択的ビルド機能の正確なファイル名やファイルパスを設定する必要はありません。パターンを設定できます。正規表現の使用はサポートされていませんが、パターンに特定のメタ文字が含まれている場合があります。 * ：すべてのファイルに一致します。 a* : a で始まるすべてのファイルに一致します。 *a : a で終わるすべてのファイルに一致します。 *a* : を含むすべてのファイルに一致します (先頭または末尾を含む)。 ** ：ディレクトリを再帰的に照合します。 ? ：任意の1文字に一致します。 \\ ：次のメタ文字をエスケープします。 [set] ：セット内の任意の1文字に一致します。...", 
"body" : "選択的ビルド機能の正確なファイル名やファイルパスを設定する必要はありません。パターンを設定できます。正規表現の使用はサポートされていませんが、パターンに特定のメタ文字が含まれている場合があります。 * ：すべてのファイルに一致します。 a* : a で始まるすべてのファイルに一致します。 *a : a で終わるすべてのファイルに一致します。 *a* : を含むすべてのファイルに一致します (先頭または末尾を含む)。 ** ：ディレクトリを再帰的に照合します。 ? ：任意の1文字に一致します。 \\ ：次のメタ文字をエスケープします。 [set] ：セット内の任意の1文字に一致します。 " }, 
{ "title" : "ローリングビルド ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ローリングビルド.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ローリングビルド ", 
"snippet" : "ローリングビルド機能を使用すると、同じブランチで別のビルドがトリガーされた場合に、保留中のビルドまたはすでに実行中のビルドを自動的に中止するようにBitriseを構成できます。 実行中のビルドまたは保留中のビルドをキャンセルできます。手動で中止する必要はありません。オンにすると ローリングビルド 機能として、アプリの以前のビルドは、新しいビルドが開始されると自動的に中止できます。 を使用して新しいビルドを開始した場合、手動ビルドとスケジュールされたビルドもキャンセルされることに注意してください。 ローリングビルド オプションが有効になっています。 ビルドはいつ中止されますか？ ビルドがすでに実...", 
"body" : "ローリングビルド機能を使用すると、同じブランチで別のビルドがトリガーされた場合に、保留中のビルドまたはすでに実行中のビルドを自動的に中止するようにBitriseを構成できます。 実行中のビルドまたは保留中のビルドをキャンセルできます。手動で中止する必要はありません。オンにすると ローリングビルド 機能として、アプリの以前のビルドは、新しいビルドが開始されると自動的に中止できます。 を使用して新しいビルドを開始した場合、手動ビルドとスケジュールされたビルドもキャンセルされることに注意してください。 ローリングビルド オプションが有効になっています。 ビルドはいつ中止されますか？ ビルドがすでに実行されているブランチでビルドをトリガーすると、同じワークフローを実行している場合にのみ、実行中のビルドが中止されます。 たとえば、でビルドをトリガーした場合 主人 リポジトリのブランチ 配備 ワークフロー、同じ上で実行されているビルドはキャンセルされません 主人 との分岐 主要な ワークフロー。 中止するトリガービルドのタイプを設定することもできます。方法を見てみましょう！ 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 ビルド 。 を見つける ローリングビルド セクション。 新しいビルドが開始されたときに中止するビルドのタイプを選択します。 オプションを有効にすると、次のようになります。 プル リクエストに対して有効 : 以前のビルドをすべてキャンセルします 保留 プル リクエストおよび関連するすべてのプッシュ。 ランニング ビルドは いいえ キャンセルされない限り 実行中のビルドは中止されます も有効です。 プッシュが有効 : 以前のすべてのビルドを引き続きキャンセルします 保留 同じブランチへのプッシュ用。 ランニング ビルドは いいえ キャンセルされない限り 実行中のビルドは中止されます も有効です。 実行中のビルドは中止されます ：保留中のビルドに加えて、実行中のビルドも自動キャンセルします。 出来た！これからは、トリガーされたビルドが必要ない場合は、ビルドが完了するのを待つ必要はありません。 " }, 
{ "title" : "電子メール通知の構成 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/電子メール通知の構成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ 電子メール通知の構成 ", 
"snippet" : "Bitriseの組み込みの電子メール通知システムは、アプリケーションでの作業に割り当てられているすべてのユーザーにビルドに関する電子メールを送信します。これらはビルドが終了したときに送信され、成功したビルドと失敗したビルドの両方に対して構成できます。 通知は、Bitriseでのアクティビティに関する更新です。通常、これらはビルドの状態に関係しますが、さまざまなことに関する通知を受け取ることができます。 組み込みの電子メール通知システムは、アプリケーションでの作業に割り当てられているすべてのユーザーにビルドに関する電子メールを送信します。これらはビルドが終了したときに送信され、成功したビルドと失...", 
"body" : "Bitriseの組み込みの電子メール通知システムは、アプリケーションでの作業に割り当てられているすべてのユーザーにビルドに関する電子メールを送信します。これらはビルドが終了したときに送信され、成功したビルドと失敗したビルドの両方に対して構成できます。 通知は、Bitriseでのアクティビティに関する更新です。通常、これらはビルドの状態に関係しますが、さまざまなことに関する通知を受け取ることができます。 組み込みの電子メール通知システムは、アプリケーションでの作業に割り当てられているすべてのユーザーにビルドに関する電子メールを送信します。これらはビルドが終了したときに送信され、成功したビルドと失敗したビルドの両方に対して構成できます。 アプリを見る 自動電子メールメッセージを受信するには、 あなたはアプリを見ている必要があります 。視聴をオフにすると、自動メールは受信されません。 電子メール通知は、最初に作成したときにすべてのアプリケーションに対して自動的に設定されますが、これらの通知設定はいつでも変更できます。 メール通知設定の変更別の解決策は、専用のステップを介して電子メールを送信することです。これにより、通知に関してさらに多くのカスタマイズが可能になります。 ステップ付きのメールを送信する" }, 
{ "title" : "アプリを見る ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/電子メール通知の構成.html#アプリを見る", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ 電子メール通知の構成 \/ アプリを見る ", 
"snippet" : "アプリを視聴するということは、そのアプリのメール通知を受け取ることを意味します。これは、作成する、または招待されるすべてのアプリのデフォルト設定です。アプリの視聴をオフにすると、自動通知が届かなくなります。 機能を切り替えるには、ダッシュボードに移動して、視聴するアプリまたは視聴を解除するアプリを開きます。右上に、ラベルの付いたボタンが表示されます 見て 現在アプリを見ている場合。そうでない場合、ボタンは表示されます 時計 。それを切り替えます。...", 
"body" : "アプリを視聴するということは、そのアプリのメール通知を受け取ることを意味します。これは、作成する、または招待されるすべてのアプリのデフォルト設定です。アプリの視聴をオフにすると、自動通知が届かなくなります。 機能を切り替えるには、ダッシュボードに移動して、視聴するアプリまたは視聴を解除するアプリを開きます。右上に、ラベルの付いたボタンが表示されます 見て 現在アプリを見ている場合。そうでない場合、ボタンは表示されます 時計 。それを切り替えます。 " }, 
{ "title" : "メール通知設定の変更 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/電子メール通知の構成.html#メール通知設定の変更", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ 電子メール通知の構成 \/ メール通知設定の変更 ", 
"snippet" : "電子メール通知は、最初にアプリケーションを作成するときに、すべてのアプリケーションに対して自動的に設定されます。成功したビルドと失敗したビルドの両方について、3つの可能な設定があります。 いつも 。これは、失敗したビルドのデフォルト設定です。 一度もない 。 同じブランチでビルドステータスが変更されたときにメールを送信する 。これは、ビルドを成功させるためのデフォルト設定です。これは、ビルド＃1とビルド＃2の両方が成功した場合、ビルド＃2に関する通知を受け取らないことを意味します。ただし、ビルド＃3が失敗し、ビルド＃4が再び成功した場合は、通知されます。 メール通知の設定はいつでも変更できます...", 
"body" : "電子メール通知は、最初にアプリケーションを作成するときに、すべてのアプリケーションに対して自動的に設定されます。成功したビルドと失敗したビルドの両方について、3つの可能な設定があります。 いつも 。これは、失敗したビルドのデフォルト設定です。 一度もない 。 同じブランチでビルドステータスが変更されたときにメールを送信する 。これは、ビルドを成功させるためのデフォルト設定です。これは、ビルド＃1とビルド＃2の両方が成功した場合、ビルド＃2に関する通知を受け取らないことを意味します。ただし、ビルド＃3が失敗し、ビルド＃4が再び成功した場合は、通知されます。 メール通知の設定はいつでも変更できます。完全に無効にすることもできます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 通知 。 メール通知まで下にスクロールします。 適切なドロップダウンメニューから、ビルドの成功と失敗の両方に必要な設定を選択します。 たとえば、通知の受信を無効にする場合は、両方のオプションを次のように設定します。 一度もない 。 " }, 
{ "title" : "ステップ付きのメールを送信する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/電子メール通知の構成.html#ステップ付きのメールを送信する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ 電子メール通知の構成 \/ ステップ付きのメールを送信する ", 
"snippet" : "NS Mailgunでメールを送信する ステップは、HTMLまたはプレーンテキスト形式のいずれかで、カスタマイズされた更新を含む任意の電子メールアドレスに電子メールを送信できます。環境変数を使用して、情報を送信したり、電子メールにファイルを添付したりできます。 ステップを使用するには、次のものが必要です。 Mailgunアカウント。 MailgunAPIキー。 Mailgunドメイン名。 ステップがすべてのビルドで実行されることを確認してください！ あなたが使用する場合 Mailgunでメールを送信する ワークフローにステップインし、次のことを確認してください 前のステップが失敗した場合でも、...", 
"body" : "NS Mailgunでメールを送信する ステップは、HTMLまたはプレーンテキスト形式のいずれかで、カスタマイズされた更新を含む任意の電子メールアドレスに電子メールを送信できます。環境変数を使用して、情報を送信したり、電子メールにファイルを添付したりできます。 ステップを使用するには、次のものが必要です。 Mailgunアカウント。 MailgunAPIキー。 Mailgunドメイン名。 ステップがすべてのビルドで実行されることを確認してください！ あなたが使用する場合 Mailgunでメールを送信する ワークフローにステップインし、次のことを確認してください 前のステップが失敗した場合でも、常に実行するように設定されています ！これは、ステップのデフォルト設定です。変更した場合、ビルドが失敗してもメールは届きません。 MailgunAPIキーを保持するシークレット環境変数を作成します。 キーに名前を付けることをお勧めします $MAILGUN_API_KEY 。これは、ステップの関連する入力のデフォルト値です。 Mailgunドメインを保持するシークレット環境変数を作成します。 キーに名前を付けることをお勧めします $MAILGUN_DOMAIN 。これは、ステップの関連する入力のデフォルト値です。 追加します Mailgunでメールを送信する ワークフローの最後に進みます。 を見つける メールに送信 ステップの入力。入力をクリックしてから、 シークレット変数を選択 。 電子メールアドレスのリストを含む新しいシークレット環境変数を作成します。 必要なキーを選択できます。アドレスはコンマで区切る必要があります。 電子メールの件名と、2つの潜在的な電子メールメッセージを設定します。1つはビルドが成功した場合、もう1つはビルドが失敗した場合です。 任意の入力（件名とメッセージ）に環境変数を挿入できます。電子メールでは、変数の値が表示されます。 デフォルトのメッセージは、アプリの名前、ビルドの番号、およびビルドが成功したか失敗したかを送信します。 必要に応じてファイルを添付します。 添付ファイル inputは、ファイルパスまたは環境変数を入力として受け入れます。 複数のファイルを添付できます。パスはコンマで区切ります。 ビルドを実行し、メールをチェックしてください！ " }, 
{ "title" : "Slack統合の構成 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/slack統合の構成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ Slack統合の構成 ", 
"snippet" : "アプリのワークフローに「Slackメッセージの送信」ステップを追加することで、SlackをBitriseのアプリに統合できます。 もちろん、BitriseはSlack統合をサポートしており、セットアップは非常に簡単です。 Slackメッセージを個々のユーザー、グループ、またはチャネルに送信します。メッセージをカスタマイズし、添付ファイルを含め、ユーザーをビルドページに移動させるリンクボタンを追加します。 専用のステップを使用するには、次のいずれかが必要です。 Slack Webhook URL または Slackボットユーザー用のSlackAPIトークン 。 ステップがすべてのビルドで実行され...", 
"body" : "アプリのワークフローに「Slackメッセージの送信」ステップを追加することで、SlackをBitriseのアプリに統合できます。 もちろん、BitriseはSlack統合をサポートしており、セットアップは非常に簡単です。 Slackメッセージを個々のユーザー、グループ、またはチャネルに送信します。メッセージをカスタマイズし、添付ファイルを含め、ユーザーをビルドページに移動させるリンクボタンを追加します。 専用のステップを使用するには、次のいずれかが必要です。 Slack Webhook URL または Slackボットユーザー用のSlackAPIトークン 。 ステップがすべてのビルドで実行されることを確認してください！ あなたが使用する場合 Slackメッセージを送信する ワークフローにステップインし、次のことを確認してください 前のステップが失敗した場合でも、常に実行するように設定されています ！これは、ステップのデフォルト設定です。変更した場合、ビルドが失敗してもメッセージは送信されません。 追加します Slackメッセージを送信する ワークフローに進みます。 どちらかを見つける Slack Webhook URL または SlackAPIトークン 入力。入力をクリックしてから、 シークレット変数を選択 。 WebhookURLまたはSlackAPIトークンを格納する新しいシークレット環境変数を作成します。 必要なキーを選択できます。 ステップの関連する入力を使用してSlackメッセージをカスタマイズします。 以下を含むがこれらに限定されないいくつかのオプションがあります。 ターゲットチャネル、グループ、またはユーザー名の設定：これは名前またはエンコードされたIDにすることができます。 送信するメッセージのテキスト。 メッセージのボットのユーザー名 メッセージの色 添付ファイル メッセージに添付されているリンクボタン ワークフローエディターのすべての入力をチェックして、Slackメッセージをカスタマイズするすべての方法を確認してください。 " }, 
{ "title" : "ビルドマシンでのGitクレデンシャルの設定 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドマシンでのgitクレデンシャルの設定.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドマシンでのGitクレデンシャルの設定 ", 
"snippet" : "ビルドの実行中にBitriseから独自のGitリポジトリへのコミットをプッシュバックする場合は、ビルドマシンでGitクレデンシャルを設定できます。 スタックのデフォルトのGitユーザー名とユーザーのメールアドレスは次のとおりです。 git config --global user.email \"please-set-your-email@bitrise.io\" git config --global user.name \"J. Doe (https:\/\/devcenter.bitrise.io\/builds\/setting-your-git-credentials-on-build-machi...", 
"body" : "ビルドの実行中にBitriseから独自のGitリポジトリへのコミットをプッシュバックする場合は、ビルドマシンでGitクレデンシャルを設定できます。 スタックのデフォルトのGitユーザー名とユーザーのメールアドレスは次のとおりです。 git config --global user.email \"please-set-your-email@bitrise.io\"\ngit config --global user.name \"J. Doe (https:\/\/devcenter.bitrise.io\/builds\/setting-your-git-credentials-on-build-machines\/)\"\n 押し戻したい場合（ git push ）Bitriseからの独自のリポジトリへのコミット ビルドの実行中 、 必ず 自分のユーザー名とメールアドレスを設定します 。これを実現するには、次の3つの方法があります。 カスタムスクリプトステップを使用して、 git config 指図。 GitクレデンシャルをEnvVarsとして設定できます。 あなたは使用することができます Gitクレデンシャルを設定する ステップ。 " }, 
{ "title" : "EnvVarsを使用してGitクレデンシャルを設定する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドマシンでのgitクレデンシャルの設定.html#envvarsを使用してgitクレデンシャルを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドマシンでのGitクレデンシャルの設定 \/ EnvVarsを使用してGitクレデンシャルを設定する ", 
"snippet" : "Gitにはさまざまな基本機能があります 環境変数 に似ている Bitrise Env Vars 。ワークフローのステップ数を減らしたい場合は、特定のGit環境変数を利用してBitriseでEnvVarsを設定できます。 ワークフローエディタを開きます。 に移動します 環境変数 タブ。 次のEnv変数を作成します。 GIT_AUTHOR_NAME ：これは、人間が読める形式の「作成者」の名前です。 GIT_AUTHOR_EMAIL ：これは「作者」のメールアドレスです。 GIT_COMMITTER_NAME ：これは、人間が読める形式の「コミッター」の名前です。 GIT_COMMITTER_EM...", 
"body" : "Gitにはさまざまな基本機能があります 環境変数 に似ている Bitrise Env Vars 。ワークフローのステップ数を減らしたい場合は、特定のGit環境変数を利用してBitriseでEnvVarsを設定できます。 ワークフローエディタを開きます。 に移動します 環境変数 タブ。 次のEnv変数を作成します。 GIT_AUTHOR_NAME ：これは、人間が読める形式の「作成者」の名前です。 GIT_AUTHOR_EMAIL ：これは「作者」のメールアドレスです。 GIT_COMMITTER_NAME ：これは、人間が読める形式の「コミッター」の名前です。 GIT_COMMITTER_EMAIL ：これは「コミッター」のメールアドレスです。 " }, 
{ "title" : "Gitクレデンシャルの設定ステップを使用したGitクレデンシャルの設定 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドマシンでのgitクレデンシャルの設定.html#gitクレデンシャルの設定ステップを使用したgitクレデンシャルの設定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドマシンでのGitクレデンシャルの設定 \/ Gitクレデンシャルの設定ステップを使用したGitクレデンシャルの設定 ", 
"snippet" : "追加する Gitクレデンシャルを設定する ワークフローの最初のステップとしてステップします。ステップはあなたがする前に最初に来なければなりません git commit 。このようにして、現在のビルドに加えた変更が、ユーザー名と電子メールアドレスに関連付けられたコミットに確実に添付されるようにすることができます。 の中に Gitユーザー名 フィールドで、値を独自のユーザー名に設定します。 の中に Gitのメールアドレス フィールドで、値を自分のメールアドレスに設定します。 ビルドを開始します。 すべてがうまくいけば、Gitプロバイダーのリポジトリに変更が表示されるはずです。新しいユーザー名とメー...", 
"body" : "追加する Gitクレデンシャルを設定する ワークフローの最初のステップとしてステップします。ステップはあなたがする前に最初に来なければなりません git commit 。このようにして、現在のビルドに加えた変更が、ユーザー名と電子メールアドレスに関連付けられたコミットに確実に添付されるようにすることができます。 の中に Gitユーザー名 フィールドで、値を独自のユーザー名に設定します。 の中に Gitのメールアドレス フィールドで、値を自分のメールアドレスに設定します。 ビルドを開始します。 すべてがうまくいけば、Gitプロバイダーのリポジトリに変更が表示されるはずです。新しいユーザー名とメールアドレスは、ビルドからGitプロバイダーにプッシュする今後のすべてのコミットで表示されます。 " }, 
{ "title" : "ビルドステータスをGitホスティングプロバイダーに報告する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドステータスをgitホスティングプロバイダーに報告する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドステータスをGitホスティングプロバイダーに報告する ", 
"snippet" : "ビルドステータスレポートをGitプロバイダーにプッシュバックするには、Bitriseを認証し、アプリの[チーム]タブでサービス資格情報ユーザーを指定する必要があります。 Bitrise は、ビルド ステータス レポートを Git プロバイダー (GitHub\/GitLab\/Bitbucket) にプッシュ バックできます。 Bitrise を認証するだけで、Git ホスティング サービスと通信できます。ビルド ステータス レポートとは別に、これにより、SSH キーや Webhook の自動登録などの他の操作が可能になります。 ステータスレポートは、自動的にトリガーされるビルドのみを対象としてい...", 
"body" : "ビルドステータスレポートをGitプロバイダーにプッシュバックするには、Bitriseを認証し、アプリの[チーム]タブでサービス資格情報ユーザーを指定する必要があります。 Bitrise は、ビルド ステータス レポートを Git プロバイダー (GitHub\/GitLab\/Bitbucket) にプッシュ バックできます。 Bitrise を認証するだけで、Git ホスティング サービスと通信できます。ビルド ステータス レポートとは別に、これにより、SSH キーや Webhook の自動登録などの他の操作が可能になります。 ステータスレポートは、自動的にトリガーされるビルドのみを対象としています ステータスレポートは、コードプッシュまたはプルリクエストによってトリガーされたビルドなど、自動的にトリガーされたビルドに対してのみ送信されます。 これを行うには、でサービス資格情報ユーザーを指定する必要があります チーム 上のアプリのタブ bitrise.io 。また、このユーザーが、選択したgitホスティングサービスに接続されたアカウントを持っていることを確認する必要があります。 bitrise.io 。このアカウントは、BitriseがgitホスティングプロバイダーのAPIと通信するために使用されます。 " }, 
{ "title" : "ビルドステータスレポートの構成 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドステータスをgitホスティングプロバイダーに報告する.html#ビルドステータスレポートの構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドステータスをGitホスティングプロバイダーに報告する \/ ビルドステータスレポートの構成 ", 
"snippet" : "Bitrise Web サイトの IP アドレスを許可リストに登録する コードを保存するために何らかの形式の自己ホスト型ソリューションを使用する場合、Bitrise Web サイトとそのバックグラウンド ワーカーの静的 IP アドレスを許可リストに登録する必要がある場合があります。これにより、保存などの機能を使用できます。 bitrise.yml ファイルを自分のリポジトリに置くか、Bitrise からビルド ステータスの更新を受け取ります。 Bitrise Web サイトの IP アドレス. ステータスを報告するには、次のことを確認する必要があります サービスクレデンシャルユーザーの Bit...", 
"body" : "Bitrise Web サイトの IP アドレスを許可リストに登録する コードを保存するために何らかの形式の自己ホスト型ソリューションを使用する場合、Bitrise Web サイトとそのバックグラウンド ワーカーの静的 IP アドレスを許可リストに登録する必要がある場合があります。これにより、保存などの機能を使用できます。 bitrise.yml ファイルを自分のリポジトリに置くか、Bitrise からビルド ステータスの更新を受け取ります。 Bitrise Web サイトの IP アドレス. ステータスを報告するには、次のことを確認する必要があります サービスクレデンシャルユーザーの BitriseアカウントはGitプロバイダーアカウントに接続されています。このGitアカウントには、アプリのリポジトリへのアクセス権が必要です。 サービスクレデンシャルユーザーの制限 自分をサービスクレデンシャルユーザーとして設定することしかできません。そのためには、 管理者 アプリのチームでの役割。 サービスクレデンシャルユーザーが特定のBitriseユーザーである必要がある場合、そのユーザーはログインして自分で設定する必要があります。 ビルドステータスレポートが可能であることを確認するには： アカウントがリポジトリをホストするGitプロバイダーに接続されていることを確認してください。 接続されたアカウント 左側のメニュー。 右上隅にあるアカウントセレクタのドロップダウンメニューを開きます。 を選択 プロファイル設定 オプション。 これはあなたをに連れて行きます プロフィールを編集する ページ。 アカウントがリポジトリをホストするGitプロバイダーに接続されていることを確認してください。 接続されたアカウント 左側のメニュー。 接続された Git プロバイダー アカウントに、ステータス レポートを送信するために必要なレベルの権限があることを確認してください。 GitHub と Bitbucket では、 管理者 アクセスが必要です。 GitLab では、 メンテナー アクセスが必要です。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 に移動します チーム 上のアプリのタブ bitrise.io 。 を見つける サービスクレデンシャルユーザー メニューをクリックし、接続されたアカウントを持つユーザーを選択します。 クリック Git接続をテストする ボタンをクリックして、選択したユーザーの接続を使用して、ビルドステータスをホスティングプロバイダーに送り返すことができることを確認します。 " }, 
{ "title" : "ビルドステータスレポートのトラブルシューティング ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドステータスをgitホスティングプロバイダーに報告する.html#ビルドステータスレポートのトラブルシューティング", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドステータスをGitホスティングプロバイダーに報告する \/ ビルドステータスレポートのトラブルシューティング ", 
"snippet" : "ビルドがGitホスティングプロバイダー（GitHub、GitLab、またはBitbucket）にステータスレポートを送信しない場合は、問題の原因を見つけるために少し調査する必要があります。潜在的な問題を見てみましょう！...", 
"body" : "ビルドがGitホスティングプロバイダー（GitHub、GitLab、またはBitbucket）にステータスレポートを送信しない場合は、問題の原因を見つけるために少し調査する必要があります。潜在的な問題を見てみましょう！ " }, 
{ "title" : "サービスクレデンシャルユーザーの確認 ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドステータスをgitホスティングプロバイダーに報告する.html#サービスクレデンシャルユーザーの確認", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドステータスをGitホスティングプロバイダーに報告する \/ ビルドステータスレポートのトラブルシューティング \/ サービスクレデンシャルユーザーの確認 ", 
"snippet" : "NS サービスクレデンシャルユーザー 上のアプリの bitrise.io gitホスティングプロバイダーに接続されたアカウントを持っている必要があります。 サービスクレデンシャルユーザーを確認し、Git接続をテストできます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 上のアプリのページに移動します bitrise.io 。 を見つける Service credential User メニュー。デフォルトでは、アプリの所有者はサービス資格情報ユーザーです。 現在の...", 
"body" : "NS サービスクレデンシャルユーザー 上のアプリの bitrise.io gitホスティングプロバイダーに接続されたアカウントを持っている必要があります。 サービスクレデンシャルユーザーを確認し、Git接続をテストできます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 上のアプリのページに移動します bitrise.io 。 を見つける Service credential User メニュー。デフォルトでは、アプリの所有者はサービス資格情報ユーザーです。 現在の使用者 この図では、現在アクティブなユーザーはサービス資格ユーザーです。サービスクレデンシャルユーザーが別のユーザーである場合、ボタンのテキストを含め、これは少し異なって見えます。 確認してください Account Settings page サービス資格情報ユーザーのアカウントの。 " }, 
{ "title" : "リポジトリの権限とリポジトリのURLを確認する ", 
"url" : "ビルドとパイプライン/ビルド設定の構成/ビルドステータスをgitホスティングプロバイダーに報告する.html#リポジトリの権限とリポジトリのurlを確認する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド設定の構成 \/ ビルドステータスをGitホスティングプロバイダーに報告する \/ ビルドステータスレポートのトラブルシューティング \/ リポジトリの権限とリポジトリのURLを確認する ", 
"snippet" : "ワークスペースまたはチームへのBitriseアクセスを許可していることを確認してください。 Bitriseアクセスを許可しなかったか、リポジトリを所有するGitHubワークスペースまたはBitbucketチームへのアクセスを拒否した可能性があります。 URLリポジトリが最新であることを確認してください。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 全般的 。 リポジトリのURLを見つけて、それが正しいことを確認します。...", 
"body" : "ワークスペースまたはチームへのBitriseアクセスを許可していることを確認してください。 Bitriseアクセスを許可しなかったか、リポジトリを所有するGitHubワークスペースまたはBitbucketチームへのアクセスを拒否した可能性があります。 URLリポジトリが最新であることを確認してください。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 全般的 。 リポジトリのURLを見つけて、それが正しいことを確認します。 " }, 
{ "title" : "ビルドの開始 ", 
"url" : "ビルドとパイプライン/ビルドの開始.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 ", 
"snippet" : "Bitriseのビルドは、手動、スケジュール設定、トリガーの設定、APIの使用など、さまざまな方法で開始できます。 Bitriseでビルドを開始するには、次の複数の方法があります。 手動でビルドを開始するビルドのスケジューリングビルドを自動的にトリガーするAPIを使用する場合： ビルドのトリガーと中止特定のコミットまたはGitタグをスキップするようにビットライズを構成して、これらがビルドをトリガーしないようにすることもできます。...", 
"body" : "Bitriseのビルドは、手動、スケジュール設定、トリガーの設定、APIの使用など、さまざまな方法で開始できます。 Bitriseでビルドを開始するには、次の複数の方法があります。 手動でビルドを開始するビルドのスケジューリングビルドを自動的にトリガーするAPIを使用する場合： ビルドのトリガーと中止特定のコミットまたはGitタグをスキップするようにビットライズを構成して、これらがビルドをトリガーしないようにすることもできます。 " }, 
{ "title" : "手動でビルドを開始する ", 
"url" : "ビルドとパイプライン/ビルドの開始/手動でビルドを開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ 手動でビルドを開始する ", 
"snippet" : "ダッシュボードから必要なアプリを選択し、[ビルドの開始\/スケジュール]ボタンをクリックすると、手動でビルドを開始できます。 Bitriseで手動でビルドを開始するには、文字通り2回クリックする必要があります。すべてをデフォルト設定のままにしておくと。それをしたくない場合、または少なくともデフォルト設定が何であるかを確認したい場合は、読んでください！ 基本構成オプションを使用してビルドを開始するには： あなたのに行きます ダッシュボード 必要なアプリを選択します。 選択する ビルドの開始\/スケジュール 。 これにより、 ビルド構成 ポップアップウィンドウ。 実行するブランチを入力します ブランチ...", 
"body" : "ダッシュボードから必要なアプリを選択し、[ビルドの開始\/スケジュール]ボタンをクリックすると、手動でビルドを開始できます。 Bitriseで手動でビルドを開始するには、文字通り2回クリックする必要があります。すべてをデフォルト設定のままにしておくと。それをしたくない場合、または少なくともデフォルト設定が何であるかを確認したい場合は、読んでください！ 基本構成オプションを使用してビルドを開始するには： あなたのに行きます ダッシュボード 必要なアプリを選択します。 選択する ビルドの開始\/スケジュール 。 これにより、 ビルド構成 ポップアップウィンドウ。 実行するブランチを入力します ブランチ 入力フィールド。 設定できるブランチは1つだけです。リポジトリへのプルリクエストがフォークされたブランチから行われる場合は、そのブランチの名前を入力してプルリクエストのビルドを実行します。 プルリクエストビルド プルリクエストのブランチのビルドを開始することは、プルリクエストのビルドと同じではありません。プルリクエストブランチの手動で開始されたビルドは、そのブランチのコードの状態のみをビルドします。ただし、自動的にトリガーされるプルリクエストのビルドでは、プルリクエストをマージすると、コードの状態が次のようにビルドされます。 必要に応じて、ビルドメッセージを メッセージ 分野。 特定のコミットのGitコミットメッセージを入力しても、そのコミットのビルドはトリガーされないことに注意してください。 から実行するワークフローを選択します ワークフロー メニュー。 いずれかを選択しない場合、Bitriseはアプリのワークフローに基づいてワークフローを選択します トリガーマップ ビルドのスケジューリング NS このビルドをスケジュールする オプションを使用すると、特定の時間にトリガーされるようにビルドを構成できます。続きを読む： ビルドのスケジューリング。 Webhook ビルドを自動的にトリガーする 単一のトリガーで並列ビルドを開始する " }, 
{ "title" : "ビルドを開始\/スケジュールするための高度な構成オプション ", 
"url" : "ビルドとパイプライン/ビルドの開始/手動でビルドを開始する.html#ビルドを開始-スケジュールするための高度な構成オプション-78729", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ 手動でビルドを開始する \/ ビルドを開始\/スケジュールするための高度な構成オプション ", 
"snippet" : "選択した場合 高度 の中に ビルド構成 ウィンドウ、あなたはで利用可能なすべてのオプションがあります 基本 、およびその他いくつか： Gitタグ ：入力したタグでタグ付けされた特定のブランチまたはコミットを構築します。これを設定すると、コミットハッシュを設定できなくなります。 Gitタグとコミットハッシュは競合するオプションです Gitタグとコミットハッシュの両方を指定することはできません。一方を設定すると、もう一方は消えます。これにより、競合する入力値を入力できなくなります。 ハッシュをコミットする ：特定のコミットのハッシュをここにコピーして、その特定のコミットをビルドします。このオプショ...", 
"body" : "選択した場合 高度 の中に ビルド構成 ウィンドウ、あなたはで利用可能なすべてのオプションがあります 基本 、およびその他いくつか： Gitタグ ：入力したタグでタグ付けされた特定のブランチまたはコミットを構築します。これを設定すると、コミットハッシュを設定できなくなります。 Gitタグとコミットハッシュは競合するオプションです Gitタグとコミットハッシュの両方を指定することはできません。一方を設定すると、もう一方は消えます。これにより、競合する入力値を入力できなくなります。 ハッシュをコミットする ：特定のコミットのハッシュをここにコピーして、その特定のコミットをビルドします。このオプションは、ビルドステータスの更新をgitホスティングサービスに送信することもできます。これを設定すると、Gitタグを設定できなくなります。 コミットハッシュはブランチオプションよりも優先されます の場合 ブランチ オプションは、選択したコミットハッシュが存在しないブランチを指定します。Bitriseは、指定されたコミットがあるブランチを見つけて、そのブランチでビルドを実行します。 カスタム環境変数 ：ビルドで使用されるカスタム環境変数を作成します。見る ビルド開始時にカスタムEnv変数を設定する。 生成されたcURLコマンド ：[ビルド構成]ウィンドウで設定したオプションに基づいて、自動生成されたcURLコマンドを提供します。これはコピーして貼り付けることができ、cURLがインストールされている任意のプラットフォームで実行できます。 " }, 
{ "title" : "ビルドを自動的にトリガーする ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドを自動的にトリガーする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドを自動的にトリガーする ", 
"snippet" : "トリガーイベントとワークフローを指定することにより、Bitriseで自動ビルドトリガーを構成できます。コードプッシュ、プルリクエスト、またはGitタグからビルドをトリガーできます。 ビルドをトリガーするコードイベントと実行する宛先ワークフローを指定することで、Bitriseで自動ビルドトリガーを構成できます。複数のトリガーを定義し、いつでも新しいトリガーを追加したり、既存のトリガーを削除したりできます。 トリガーには次の3つのタイプがあります。 コードプッシュ：アプリのリポジトリの指定されたブランチへのコードプッシュは、ビルドをトリガーします。 プルリクエスト：プルリクエストがビルドをトリガー...", 
"body" : "トリガーイベントとワークフローを指定することにより、Bitriseで自動ビルドトリガーを構成できます。コードプッシュ、プルリクエスト、またはGitタグからビルドをトリガーできます。 ビルドをトリガーするコードイベントと実行する宛先ワークフローを指定することで、Bitriseで自動ビルドトリガーを構成できます。複数のトリガーを定義し、いつでも新しいトリガーを追加したり、既存のトリガーを削除したりできます。 トリガーには次の3つのタイプがあります。 コードプッシュ：アプリのリポジトリの指定されたブランチへのコードプッシュは、ビルドをトリガーします。 プルリクエスト：プルリクエストがビルドをトリガーするソースブランチや宛先ブランチを指定します。 Gitタグ：特定のタグを使用したコミットにより、ビルドがトリガーされます。 トリガーを管理できます トリガー ワークフローエディタのセクション、または直接編集できます bitrise.yml それらを設定するためにあなたのアプリの。このガイドでは、WebサイトのUIでトリガーを設定および管理する方法について説明します。 YAML形式でトリガーを設定する方法については、関連するガイドをご覧ください。 トリガーマップを使用してビルドをトリガーする。 トリガーの制限 デフォルトでは、1つのトリガーでトリガーできるワークフローは1つだけです。 1つのトリガーから複数のワークフローをトリガーする必要がある場合は、いくつかの回避策があります。 ワークフローをつなぐ だから彼らはお互いを追いかけます。 使用 Bitrise Start Build そしてその Bitriseビルドを待つ 手順 。 また、同じブランチ（たとえば、main）で同じコードイベント（たとえば、コードプッシュ）に対して2つの異なるトリガーを設定することはできません。ワークフローエディタでは、保存しようとしても構成を保存できません。 Webhook 手動でビルドを開始する 単一のトリガーで並列ビルドを開始する " }, 
{ "title" : "コードプッシュによるビルドのトリガー ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドを自動的にトリガーする.html#コードプッシュによるビルドのトリガー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドを自動的にトリガーする \/ コードプッシュによるビルドのトリガー ", 
"snippet" : "コードプッシュ時にトリガーを作成することで、コードがリポジトリにプッシュされるたびにビルドを自動的に開始するようにBitriseを構成できます。リポジトリのブランチと実行するワークフローの両方を指定できます。 ビルドをトリガーするためのWebhook ビルドを自動的にトリガーするには、リポジトリのホスティングサービスで設定された着信Webhookが必要です。で詳細を読む Webhook セクション。 でアプリを開きます bitrise.io 。 に移動します ワークフロー タブ。 に移動します トリガー タブ。 を選択 押す オプション。 クリック +トリガーを追加 。 の中に プッシュブラン...", 
"body" : "コードプッシュ時にトリガーを作成することで、コードがリポジトリにプッシュされるたびにビルドを自動的に開始するようにBitriseを構成できます。リポジトリのブランチと実行するワークフローの両方を指定できます。 ビルドをトリガーするためのWebhook ビルドを自動的にトリガーするには、リポジトリのホスティングサービスで設定された着信Webhookが必要です。で詳細を読む Webhook セクション。 でアプリを開きます bitrise.io 。 に移動します ワークフロー タブ。 に移動します トリガー タブ。 を選択 押す オプション。 クリック +トリガーを追加 。 の中に プッシュブランチ ウィンドウに、ブランチの名前を入力します（たとえば、 主人 。スペルミスがないことを確認してください。そうでない場合、トリガーは機能しません。 ブランチまたはタグを指定するときにパターンを使用する NS * シンボルは、構成されたトリガーで、ブランチ名またはタグ名のワイルドカードとして使用できます。パターンにも使用できます。たとえば、パターン *-dev 接尾辞が付いたブランチまたはタグに使用できます -dev 。複数のトリガーがある場合、最初に一致したトリガーのみがワークフローを開始することに注意してください。 ワイルドカードの使用の詳細については、次を参照してください。 トリガー マップでのワイルドカードの使用トリガーするワークフローを選択します（たとえば、 主要な ）。 クリック 保存する 右上隅にあります。 完了です。今後、コードがアプリのリポジトリの選択されたブランチにプッシュされると、Bitriseは選択されたワークフローでビルドをトリガーします！ " }, 
{ "title" : "プルリクエストを使用したビルドのトリガー ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドを自動的にトリガーする.html#プルリクエストを使用したビルドのトリガー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドを自動的にトリガーする \/ プルリクエストを使用したビルドのトリガー ", 
"snippet" : "トリガーを設定して、指定されたソースブランチからリポジトリの指定されたターゲットブランチへのプルリクエストが開かれるたびに、Bitriseでビルドが自動的にトリガーされるようにすることができます。 ビルドをトリガーするためのWebhook ビルドを自動的にトリガーするには、リポジトリのホスティングサービスで設定された着信Webhookが必要です。で詳細を読む Webhook セクション。 でアプリを開きます bitrise.io 。 に移動します ワークフロー タブ。 に移動します トリガー タブ。 を選択 プルリクエスト オプション。 デフォルトのトリガーで、 ソースブランチ と ターゲット...", 
"body" : "トリガーを設定して、指定されたソースブランチからリポジトリの指定されたターゲットブランチへのプルリクエストが開かれるたびに、Bitriseでビルドが自動的にトリガーされるようにすることができます。 ビルドをトリガーするためのWebhook ビルドを自動的にトリガーするには、リポジトリのホスティングサービスで設定された着信Webhookが必要です。で詳細を読む Webhook セクション。 でアプリを開きます bitrise.io 。 に移動します ワークフロー タブ。 に移動します トリガー タブ。 を選択 プルリクエスト オプション。 デフォルトのトリガーで、 ソースブランチ と ターゲットブランチ オプション。 クリック +トリガーを追加 。 ソースブランチとターゲットブランチの名前を入力します。スペルミスがないことを確認してください。そうでない場合、トリガーは機能しません。 ソースブランチフィールドまたはターゲットブランチフィールドのいずれか、または両方を空のままにしておくことができます。トリガーはそれに応じて機能します。たとえば、新しいアプリのデフォルトのように両方を空のままにすると、プルリクエストごとにビルドがトリガーされます。 ブランチまたはタグを指定するときにパターンを使用する NS * シンボルは、構成されたトリガーで、ブランチ名またはタグ名のワイルドカードとして使用できます。パターンにも使用できます。たとえば、パターン *-dev 接尾辞が付いたブランチまたはタグに使用できます -dev 。複数のトリガーがある場合、最初に一致したトリガーのみがワークフローを開始することに注意してください。 ワイルドカードの使用の詳細については、次を参照してください。 トリガー マップでのワイルドカードの使用トリガーするワークフローを選択します（たとえば、 主要な ）。 クリック 保存する 右上隅にあります。 そして、あなたは完了です！今後、リポジトリでプルリクエストが開かれると、Bitriseは選択されたワークフローでビルドをトリガーします。 " }, 
{ "title" : "Gitタグを使用したビルドのトリガー ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドを自動的にトリガーする.html#gitタグを使用したビルドのトリガー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドを自動的にトリガーする \/ Gitタグを使用したビルドのトリガー ", 
"snippet" : "Gitタグのパターンを指定して、特定のワークフローをトリガーできます。これは、特定の状態でアプリをビルドしてデプロイするための良い方法です。そして、セットアップはとても簡単です！ ビルドをトリガーするためのWebhook ビルドを自動的にトリガーするには、リポジトリのホスティングサービスで設定された着信Webhookが必要です。で詳細を読む Webhook セクション。 GitLabなどの特定のプロバイダーでは、Webhookのセットアップでタグプッシュイベントを特別に有効にする必要があることに注意してください。 でアプリを開きます bitrise.io 。 に移動します ワークフロー タブ。...", 
"body" : "Gitタグのパターンを指定して、特定のワークフローをトリガーできます。これは、特定の状態でアプリをビルドしてデプロイするための良い方法です。そして、セットアップはとても簡単です！ ビルドをトリガーするためのWebhook ビルドを自動的にトリガーするには、リポジトリのホスティングサービスで設定された着信Webhookが必要です。で詳細を読む Webhook セクション。 GitLabなどの特定のプロバイダーでは、Webhookのセットアップでタグプッシュイベントを特別に有効にする必要があることに注意してください。 でアプリを開きます bitrise.io 。 に移動します ワークフロー タブ。 に移動します トリガー タブ。 を選択 鬼ごっこ オプション。 クリック +トリガーを追加 。 の中に 鬼ごっこ ウィンドウに、ビルドをトリガーするタグを追加します。 ブランチまたはタグを指定するときにパターンを使用する NS * シンボルは、構成されたトリガーで、ブランチ名またはタグ名のワイルドカードとして使用できます。パターンにも使用できます。たとえば、パターン *-dev 接尾辞が付いたブランチまたはタグに使用できます -dev 。複数のトリガーがある場合、最初に一致したトリガーのみがワークフローを開始することに注意してください。 ワイルドカードの使用の詳細については、次を参照してください。 トリガー マップでのワイルドカードの使用トリガーするワークフローを選択します（たとえば、 主要な ）。 クリック 保存する 右上隅にあります。 そして、あなたは完了です！ " }, 
{ "title" : "ビルドのスケジューリング ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドのスケジューリング.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドのスケジューリング ", 
"snippet" : "ビルドを特定の時間に自動的に実行するようにスケジュールできます。 ビルドを特定の時間に自動的に実行するようにスケジュールして、最も都合のよいときにログを確認できるようにすることができます。 ビルドをスケジュールするときに、カスタムを定義できます 環境変数 。 GitタグとGitコミットハッシュに高度なフィルターを設定することもできます。 定期的にスケジュールされたビルドが1つ以上ある場合は、次のことができます。 それらの構成を編集します。 いつでも手動でトリガーします。 それらを一時的に無効にします。 それらを完全に削除します。...", 
"body" : "ビルドを特定の時間に自動的に実行するようにスケジュールできます。 ビルドを特定の時間に自動的に実行するようにスケジュールして、最も都合のよいときにログを確認できるようにすることができます。 ビルドをスケジュールするときに、カスタムを定義できます 環境変数 。 GitタグとGitコミットハッシュに高度なフィルターを設定することもできます。 定期的にスケジュールされたビルドが1つ以上ある場合は、次のことができます。 それらの構成を編集します。 いつでも手動でトリガーします。 それらを一時的に無効にします。 それらを完全に削除します。 " }, 
{ "title" : "ビルドのスケジューリング ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドのスケジューリング.html#ビルドのスケジューリング-78731-1", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドのスケジューリング \/ ビルドのスケジューリング ", 
"snippet" : "Bitriseの基本的な構成オプションを使用してビルドをスケジュールする方法： あなたのに行きます ダッシュボード 必要なアプリを選択します。 選択する ビルドの開始\/スケジュール 。 これにより、 ビルド構成 ポップアップウィンドウ。 の中に ビルド構成 ポップアップウィンドウで、スイッチを右に切り替えて有効にします このビルドをスケジュールする 特徴。 で時間と分を設定します HH\/MM 分野。 スケジュールされたビルドのタイムフォーマットとタイムゾーン Bitriseは、ビルドをスケジュールするときに24時間形式を使用します。 Web UIで設定した時刻は、独自のタイムゾーンに基づいてお...", 
"body" : "Bitriseの基本的な構成オプションを使用してビルドをスケジュールする方法： あなたのに行きます ダッシュボード 必要なアプリを選択します。 選択する ビルドの開始\/スケジュール 。 これにより、 ビルド構成 ポップアップウィンドウ。 の中に ビルド構成 ポップアップウィンドウで、スイッチを右に切り替えて有効にします このビルドをスケジュールする 特徴。 で時間と分を設定します HH\/MM 分野。 スケジュールされたビルドのタイムフォーマットとタイムゾーン Bitriseは、ビルドをスケジュールするときに24時間形式を使用します。 Web UIで設定した時刻は、独自のタイムゾーンに基づいており、UTCとして変換および保存されます。他のタイムゾーンのチームメンバーがスケジュールされたビルドにアクセスすると、自分のタイムゾーンの時刻も表示されます。 タイムラインで、ビルドを実行する日を選択します。 実行するブランチを入力します ブランチ 入力フィールド。 設定できるブランチは1つだけです。リポジトリへのプルリクエストがフォークされたブランチから行われる場合は、そのブランチの名前を入力してプルリクエストのビルドを実行します。 プルリクエストビルド プルリクエストのブランチのビルドを開始することは、プルリクエストのビルドと同じではありません。プルリクエストブランチの手動で開始されたビルドは、そのブランチのコードの状態のみをビルドします。ただし、自動的にトリガーされるプルリクエストのビルドでは、プルリクエストをマージすると、コードの状態が次のようにビルドされます。 必要に応じて、ビルドメッセージを メッセージ 分野。 特定のコミットのGitコミットメッセージを入力しても、そのコミットのビルドはトリガーされないことに注意してください。 から実行するワークフローを選択します ワークフロー メニュー。 いずれかを選択しない場合、Bitriseはアプリのワークフローに基づいてワークフローを選択します トリガーマップ クリック ビルドのスケジュール ポップアップウィンドウの下部にあります。 " }, 
{ "title" : "ビルドを開始\/スケジュールするための高度な構成オプション ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドのスケジューリング.html#ビルドを開始-スケジュールするための高度な構成オプション-78731", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドのスケジューリング \/ ビルドのスケジューリング \/ ビルドを開始\/スケジュールするための高度な構成オプション ", 
"snippet" : "選択した場合 高度 の中に ビルド構成 ウィンドウ、あなたはで利用可能なすべてのオプションがあります 基本 、およびその他いくつか： Gitタグ ：入力したタグでタグ付けされた特定のブランチまたはコミットを構築します。これを設定すると、コミットハッシュを設定できなくなります。 Gitタグとコミットハッシュは競合するオプションです Gitタグとコミットハッシュの両方を指定することはできません。一方を設定すると、もう一方は消えます。これにより、競合する入力値を入力できなくなります。 ハッシュをコミットする ：特定のコミットのハッシュをここにコピーして、その特定のコミットをビルドします。このオプショ...", 
"body" : "選択した場合 高度 の中に ビルド構成 ウィンドウ、あなたはで利用可能なすべてのオプションがあります 基本 、およびその他いくつか： Gitタグ ：入力したタグでタグ付けされた特定のブランチまたはコミットを構築します。これを設定すると、コミットハッシュを設定できなくなります。 Gitタグとコミットハッシュは競合するオプションです Gitタグとコミットハッシュの両方を指定することはできません。一方を設定すると、もう一方は消えます。これにより、競合する入力値を入力できなくなります。 ハッシュをコミットする ：特定のコミットのハッシュをここにコピーして、その特定のコミットをビルドします。このオプションは、ビルドステータスの更新をgitホスティングサービスに送信することもできます。これを設定すると、Gitタグを設定できなくなります。 コミットハッシュはブランチオプションよりも優先されます の場合 ブランチ オプションは、選択したコミットハッシュが存在しないブランチを指定します。Bitriseは、指定されたコミットがあるブランチを見つけて、そのブランチでビルドを実行します。 カスタム環境変数 ：ビルドで使用されるカスタム環境変数を作成します。見る ビルド開始時にカスタムEnv変数を設定する。 生成されたcURLコマンド ：[ビルド構成]ウィンドウで設定したオプションに基づいて、自動生成されたcURLコマンドを提供します。これはコピーして貼り付けることができ、cURLがインストールされている任意のプラットフォームで実行できます。 " }, 
{ "title" : "スケジュールされたビルドの編集 ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドのスケジューリング.html#スケジュールされたビルドの編集", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドのスケジューリング \/ スケジュールされたビルドの編集 ", 
"snippet" : "定期的にスケジュールされたビルドの構成を変更するには： に移動します ビルド アプリのタブ。 上部に、スケジュールされたビルドのリストが表示されます。 クリック スケジュールされたショー 。 小さな歯車のアイコンをクリックして、設定メニューを開きます。 クリック スケジュールされたビルドを編集する 。 必要な変更を加えてクリックします 変更内容を保存 。...", 
"body" : "定期的にスケジュールされたビルドの構成を変更するには： に移動します ビルド アプリのタブ。 上部に、スケジュールされたビルドのリストが表示されます。 クリック スケジュールされたショー 。 小さな歯車のアイコンをクリックして、設定メニューを開きます。 クリック スケジュールされたビルドを編集する 。 必要な変更を加えてクリックします 変更内容を保存 。 " }, 
{ "title" : "スケジュールされたビルドを手動でトリガーする ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドのスケジューリング.html#スケジュールされたビルドを手動でトリガーする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドのスケジューリング \/ スケジュールされたビルドを手動でトリガーする ", 
"snippet" : "スケジュールされたビルドをすぐにトリガーするには： に移動します ビルド アプリのタブ。 上部に、スケジュールされたビルドのリストが表示されます。 クリック スケジュールされたショー 。 クリック 今すぐトリガー 。...", 
"body" : "スケジュールされたビルドをすぐにトリガーするには： に移動します ビルド アプリのタブ。 上部に、スケジュールされたビルドのリストが表示されます。 クリック スケジュールされたショー 。 クリック 今すぐトリガー 。 " }, 
{ "title" : "スケジュールされたビルドを無効にする ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドのスケジューリング.html#スケジュールされたビルドを無効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドのスケジューリング \/ スケジュールされたビルドを無効にする ", 
"snippet" : "定期的にスケジュールされたビルドを一時的に無効にするには： に移動します ビルド アプリのタブ。 上部に、スケジュールされたビルドのリストが表示されます。 クリック スケジュールされたショー 。 トグル 有効 オプション。 ビルドは、再度有効にするまで実行されません。...", 
"body" : "定期的にスケジュールされたビルドを一時的に無効にするには： に移動します ビルド アプリのタブ。 上部に、スケジュールされたビルドのリストが表示されます。 クリック スケジュールされたショー 。 トグル 有効 オプション。 ビルドは、再度有効にするまで実行されません。 " }, 
{ "title" : "スケジュールされたビルドの削除 ", 
"url" : "ビルドとパイプライン/ビルドの開始/ビルドのスケジューリング.html#スケジュールされたビルドの削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ ビルドのスケジューリング \/ スケジュールされたビルドの削除 ", 
"snippet" : "定期的にスケジュールされたビルドを完全に削除するには： に移動します ビルド アプリのタブ。 上部に、スケジュールされたビルドのリストが表示されます。 クリック スケジュールされたショー 。 小さな歯車のアイコンをクリックして、設定メニューを開きます。 クリック 消去 次にクリックします 消去 確認を求められたら、もう一度。...", 
"body" : "定期的にスケジュールされたビルドを完全に削除するには： に移動します ビルド アプリのタブ。 上部に、スケジュールされたビルドのリストが表示されます。 クリック スケジュールされたショー 。 小さな歯車のアイコンをクリックして、設定メニューを開きます。 クリック 消去 次にクリックします 消去 確認を求められたら、もう一度。 " }, 
{ "title" : "プルリクエストビルドの承認 ", 
"url" : "ビルドとパイプライン/ビルドの開始/プルリクエストビルドの承認.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ プルリクエストビルドの承認 ", 
"snippet" : "アプリに公開されたシークレットが含まれている場合は、プルリクエストによって開始されたBitriseビルドの手動承認を要求するオプションがあります。このオプションは、パブリックアプリでは無効にできません。 すべてのプルリクエストを作成する必要はありません。結局のところ、ほとんどのプロジェクトでは、誰でもリポジトリのフォークを作成してプルリクエストを送信できます。ただし、 アプリ Bitriseで設定されています 秘密 たとえば、プルリクエストビルドで公開されている場合は、誰もがこれらのシークレットにアクセスできるようにしたくないでしょう。 そのため、承認を要求するオプションがあります プルリクエ...", 
"body" : "アプリに公開されたシークレットが含まれている場合は、プルリクエストによって開始されたBitriseビルドの手動承認を要求するオプションがあります。このオプションは、パブリックアプリでは無効にできません。 すべてのプルリクエストを作成する必要はありません。結局のところ、ほとんどのプロジェクトでは、誰でもリポジトリのフォークを作成してプルリクエストを送信できます。ただし、 アプリ Bitriseで設定されています 秘密 たとえば、プルリクエストビルドで公開されている場合は、誰もがこれらのシークレットにアクセスできるようにしたくないでしょう。 そのため、承認を要求するオプションがあります プルリクエストビルド 開始する前に。この機能は、パブリックアプリとプライベートアプリでは動作が多少異なります。 プライベートアプリ：デフォルトでは、フォークから送信されたプルリクエストには承認が必要です。設定を変更することができます。シークレットがPRに公開されていない場合、ビルドは承認を求めずに実行されます。 パブリックアプリ：フォークから送信されたプルリクエストはデフォルトで承認が必要であり、変更することはできません。公開アプリはこの機能をオプトアウトできません。 " }, 
{ "title" : "プライベートアプリの手動承認を有効にする ", 
"url" : "ビルドとパイプライン/ビルドの開始/プルリクエストビルドの承認.html#プライベートアプリの手動承認を有効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ プルリクエストビルドの承認 \/ プライベートアプリの手動承認を有効にする ", 
"snippet" : "手動承認を有効または無効にするには、 管理者 または オーナー アプリケーションのチームで。アプリケーションはプライベートである必要があります。パブリックアプリはこの機能をオプトアウトできません。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 下にスクロールして 手動ビルド承認オプションを有効にする 。 下にスクロールして 手動ビルド承認 。 この設定はプライベートアプリでのみ変更できることに注意してください。公開アプリの場合、これは常に有効になっています。 スイッ...", 
"body" : "手動承認を有効または無効にするには、 管理者 または オーナー アプリケーションのチームで。アプリケーションはプライベートである必要があります。パブリックアプリはこの機能をオプトアウトできません。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 下にスクロールして 手動ビルド承認オプションを有効にする 。 下にスクロールして 手動ビルド承認 。 この設定はプライベートアプリでのみ変更できることに注意してください。公開アプリの場合、これは常に有効になっています。 スイッチを切り替えて、有効または無効にします。 デフォルトでは、有効に設定されています。 " }, 
{ "title" : "PRビルドの承認 ", 
"url" : "ビルドとパイプライン/ビルドの開始/プルリクエストビルドの承認.html#prビルドの承認", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ プルリクエストビルドの承認 \/ PRビルドの承認 ", 
"snippet" : "PRビルドの承認 PR ビルドの承認は、Bitrise での承認を意味することに注意してください。たとえば、GitHub でプル リクエストを承認するだけでは、Bitrise でビルドを開始するには不十分です。所有者は、Bitrise 自体でビルドを承認する必要があります。 フォークからプルリクエストが送信されると、PRビルドが承認を待っていることが通知されます。 アプリの名前と、リポジトリ自体およびアプリへのリンクが記載された通知メールが送信されます ビルド Bitriseのページ。 Gitプロバイダーでは、CIチェックのステータスが表示されます 保留中-承認待ち に ビルド アプリのページ...", 
"body" : "PRビルドの承認 PR ビルドの承認は、Bitrise での承認を意味することに注意してください。たとえば、GitHub でプル リクエストを承認するだけでは、Bitrise でビルドを開始するには不十分です。所有者は、Bitrise 自体でビルドを承認する必要があります。 フォークからプルリクエストが送信されると、PRビルドが承認を待っていることが通知されます。 アプリの名前と、リポジトリ自体およびアプリへのリンクが記載された通知メールが送信されます ビルド Bitriseのページ。 Gitプロバイダーでは、CIチェックのステータスが表示されます 保留中-承認待ち に ビルド アプリのページに確認ボックスが表示されます。 ビルドを承認して実行するには、[ ビルドの承認と実行 ボタン。クリックする レビュー GitプロバイダーのWebサイトでプルリクエストを開きます。 " }, 
{ "title" : "トリガーマップを使用してビルドをトリガーする ", 
"url" : "ビルドとパイプライン/ビルドの開始/トリガーマップを使用してビルドをトリガーする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ トリガーマップを使用してビルドをトリガーする ", 
"snippet" : "Bitriseでは、コードのプッシュまたはプルリクエストなどのイベントのトリガー（またはWebhook）を作成して、ビルドを自動的に開始できます。 1つのイベントまたは複数のイベント（たとえば、 code push とのために pull request イベント）、関連するイベントが発生するたびに、ソースコードホスティングサービスがWebhookを呼び出します。 オン bitrise.io これらのWebhook呼び出しはトリガーと呼ばれ、さまざまなワークフローにマップすることも、まったくマップしないこともできます。トリガーをワークフローにマップしない場合は、 bitrise.io ビルドを開...", 
"body" : "Bitriseでは、コードのプッシュまたはプルリクエストなどのイベントのトリガー（またはWebhook）を作成して、ビルドを自動的に開始できます。 1つのイベントまたは複数のイベント（たとえば、 code push とのために pull request イベント）、関連するイベントが発生するたびに、ソースコードホスティングサービスがWebhookを呼び出します。 オン bitrise.io これらのWebhook呼び出しはトリガーと呼ばれ、さまざまなワークフローにマップすることも、まったくマップしないこともできます。トリガーをワークフローにマップしない場合は、 bitrise.io ビルドを開始しません。ワークフローにマップすると、選択したワークフローでビルドが開始されます。 次の例では、非常に単純なBitrise構成を使用します（ bitrise.yml ）、これは選択したワークフローのIDを出力するだけです。 bitrise.ymlファイルとは何ですか NS bitrise.yml fileは、アプリの構成をYAML形式で表現したものです。あなたはできる： ファイルをローカルで編集し、リポジトリに保存します。 上のファイルを編集します bitrise.yml 上のワークフローエディタのタブ bitrise.io 。 ワークフローエディターのグラフィカルUIでステップとワークフローを更新します。すべての変更はに反映されます bitrise.yml ファイル。 ---\nformat_version: 1.3.0\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_target_branch: \"*\"\n pull_request_source_branch: \"*\"\n workflow: primary\n- tag: \"*\"\n workflow: primary\nworkflows:\n primary:\n steps:\n - script:\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"$BITRISE_TRIGGERED_WORKFLOW_ID\" 上記の例 bitrise.yml を選択します 主要な すべてのコードプッシュのブランチ（ push_branch: \"*\" ）、タグプッシュ（ tag: \"*\" ）およびすべてのプルリクエスト（ pull_request_target_branch: \"*\" ＆ pull_request_source_branch: \"*\" ）。 この構成により、ビルドが開始されます。 主要な すべてのコードプッシュのワークフロー。ただし、他には何もありません（たとえば、プルリクエストのワークフローではありません）。 " }, 
{ "title" : "トリガーマップのコンポーネント ", 
"url" : "ビルドとパイプライン/ビルドの開始/トリガーマップを使用してビルドをトリガーする.html#トリガーマップのコンポーネント", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ トリガーマップを使用してビルドをトリガーする \/ トリガーマップのコンポーネント ", 
"snippet" : "NS trigger_map フィルタのリストであり、 workflow トリガーが一致する場合に選択する必要のある特定のフィルターです。すべてのフィルターアイテムには、少なくとも1つの条件が含まれている必要があります。 これは、を指定するだけのアイテムを持つことはできないことを意味します workflow 、少なくとも1つのフィルター（ push_branch \/ pull_request_source_branch \/ pull_request_target_branch \/ tag ）を指定する必要があります！ 利用可能なフィルター： push_branch ：コードプッシュイベントのブ...", 
"body" : "NS trigger_map フィルタのリストであり、 workflow トリガーが一致する場合に選択する必要のある特定のフィルターです。すべてのフィルターアイテムには、少なくとも1つの条件が含まれている必要があります。 これは、を指定するだけのアイテムを持つことはできないことを意味します workflow 、少なくとも1つのフィルター（ push_branch \/ pull_request_source_branch \/ pull_request_target_branch \/ tag ）を指定する必要があります！ 利用可能なフィルター： push_branch ：コードプッシュイベントのブランチパラメーターと照合されるフィルター。 pull_request_source_branch ：プルリクエストイベントのソースブランチパラメーター（プルリクエストが開始されたブランチ）と照合されるフィルター。 pull_request_target_branch ：プルリクエストイベントのターゲットブランチパラメータと照合されるフィルタ-プルリクエストがマージされるブランチ。 tag ：タグプッシュイベントのタグ（名前）パラメーターと照合されるフィルター。 pattern ：非推奨-このフィルターは、コードのプッシュイベントとプルリクエストイベントの両方に使用され、 is_pull_request_allowed 。新しいフィルターを使用するとイベントマッピングをより適切に制御できるため、このフィルターは非推奨になりました。 1つのトリガー= 1つのビルド 1つのトリガーは単一のワークフローのみを選択できます\/単一のビルドのみを開始できます。トリガーに一致する最初のアイテムは、ビルドのワークフローを選択します！ アイテムの順序も重要です。 trigger_map:\n- push_branch: \"*\"\n push_branch: \"master*\"\n workflow: primary 指定することにより push_branch: master 後のアイテム push_branch: \"*\" アイテム、 push_branch: master すべてのコードプッシュイベントが一致するため、選択されることはありません push_branch: \"*\" 最初に、トリガーに一致する最初のアイテムがビルドのワークフローを選択します！ 1つのアイテムに複数のフィルターを定義する場合、そのアイテムのワークフローを選択するには、すべてのフィルターが一致する必要があります。例えば： trigger_map:\n- pull_request_target_branch: \"master\"\n pull_request_source_branch: \"develop\"\n workflow: primary これは、 primary プルリクエストのソースブランチが develop そして、ターゲットブランチは master 。 個別に処理する必要があるフィルターを指定する場合、たとえば、 primary ソースが develop 、および対象となるものを選択します master ： trigger_map:\n- pull_request_target_branch: \"master\"\n workflow: primary\n- pull_request_source_branch: \"develop\"\n workflow: primary 同じアイテムにフィルターを混在させることはできません 混ぜ合わせることはできません push_branch 、 tag そしてその pull_request 同じアイテムのフィルター。これは事実上、イベントがコードプッシュイベントとプルリクエスト（またはタグプッシュ）イベントである場合にワークフローを選択する必要があることを意味します。これは単純に不可能です。ソースコードホスティングサービスは、プルリクエスト（マージ前の状態）、タグ、およびコードプッシュイベント用に個別のWebhookを送信します。単一のWebhookイベントが同時にコードプッシュ、タグプッシュ、およびプルリクエストになることはありません。単一のウェブフックは、常に1つのタイプ（コードプッシュ、タグプッシュ、またはプルリクエスト）にのみ関連します。 " }, 
{ "title" : "単一のブランチを構築する ", 
"url" : "ビルドとパイプライン/ビルドの開始/トリガーマップを使用してビルドをトリガーする.html#単一のブランチを構築する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ トリガーマップを使用してビルドをトリガーする \/ 単一のブランチを構築する ", 
"snippet" : "コードプッシュごとに1つのブランチのみをビルドしたいが、他には何もしない場合（他のブランチへのプッシュはビルドをトリガーせず、プルリクエストやタグもトリガーしない）、必要なのは trigger_map これは他のものをワークフローにマップせず、構築したいブランチのみをマップします。 たとえば、ビルドするだけの場合 master コードプッシュのブランチ： trigger_map: - push_branch: master workflow: primary または、ビルドするだけの場合 feature\/ 枝： trigger_map: - push_branch: feature\/* wor...", 
"body" : "コードプッシュごとに1つのブランチのみをビルドしたいが、他には何もしない場合（他のブランチへのプッシュはビルドをトリガーせず、プルリクエストやタグもトリガーしない）、必要なのは trigger_map これは他のものをワークフローにマップせず、構築したいブランチのみをマップします。 たとえば、ビルドするだけの場合 master コードプッシュのブランチ： trigger_map:\n- push_branch: master\n workflow: primary または、ビルドするだけの場合 feature\/ 枝： trigger_map:\n- push_branch: feature\/*\n workflow: primary または2つ一緒に： trigger_map:\n- push_branch: master\n workflow: primary\n- push_branch: feature\/*\n workflow: primary この構成は、いずれかで発生するすべてのコードプッシュのビルドを開始します master または feature\/ ブランチし、両方に同じワークフローを使用します（ primary ）。 別のワークフローを使用する場合 master ブランチの場合、あなたがしなければならないのは変更することだけです workflow: そのトリガーマップアイテムの場合： trigger_map:\n- push_branch: master\n workflow: deploy\n- push_branch: feature\/*\n workflow: primary この構成ではワークフローを使用します deploy すべてのコードプッシュオン master 、およびワークフロー primary すべてのコードプッシュオン feature\/ ブランチし、他のビルドを開始しません。 " }, 
{ "title" : "トリガー マップでのワイルドカードの使用 ", 
"url" : "ビルドとパイプライン/ビルドの開始/トリガーマップを使用してビルドをトリガーする.html#トリガー-マップでのワイルドカードの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ トリガーマップを使用してビルドをトリガーする \/ トリガー マップでのワイルドカードの使用 ", 
"snippet" : "トリガー マップを作成する場合、正確なブランチ名を指定する必要はありません。ワイルドカードを使用してパターンを一致させることができます。 Bitrise は、 グロブ この構文：使用できます * ワイルドカードとして。の複数のセクションを使用できます * ただし、他のパターン マッチング機能はサポートされていません。 ワイルドカードの使用 UI のワイルドカード 以下のすべての例は、トリガー マップが bitrise.yml アプリのファイル。ただし、ワイルドカードを使用できます。 トリガー 同様に、ワークフロー エディターのタブを次のように変更します。 ビルドを自動的にトリガーするトリガー ...", 
"body" : "トリガー マップを作成する場合、正確なブランチ名を指定する必要はありません。ワイルドカードを使用してパターンを一致させることができます。 Bitrise は、 グロブ この構文：使用できます * ワイルドカードとして。の複数のセクションを使用できます * ただし、他のパターン マッチング機能はサポートされていません。 ワイルドカードの使用 UI のワイルドカード 以下のすべての例は、トリガー マップが bitrise.yml アプリのファイル。ただし、ワイルドカードを使用できます。 トリガー 同様に、ワークフロー エディターのタブを次のように変更します。 ビルドを自動的にトリガーするトリガー primary 文字列を含むブランチにコードがプッシュされたときのワークフロー dev その名前のどこかに： trigger_map:\n- push_branch: \"*dev*\" \n workflow: primary トリガー primary 両方を含むブランチに対してプル リクエストが開かれるときのワークフロー dev と feature その名前の任意の場所で、2 つの文字列の間にあるもの: trigger_map:\n- pull_request_source_branch: \"*\" \n pull_request_target_branch: \"*dev*feature*\" \n workflow: primary トリガー primary で終わる Git タグでコミットがプッシュされたときのワークフロー v1.0 : - tag: \"*v1.0\" \n workflow: primary " }, 
{ "title" : "単一のトリガーで並列ビルドを開始する ", 
"url" : "ビルドとパイプライン/ビルドの開始/単一のトリガーで並列ビルドを開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ 単一のトリガーで並列ビルドを開始する ", 
"snippet" : "Bitrise StartforBuildとBitriseWaitfor Build Stepsを使用して、複数の並列ビルドを開始できます。 ビルド パイプラインを使用して単一のトリガーで並列ビルドを開始する クレジットベースのアカウントを持っていて、1 つのトリガーで複数のタスクを並行して実行する予定がある場合は、Build Pipelines を使用することをお勧めします。詳細については、こちらをご覧ください パイプラインの構築 . 複数の同時実行性がある場合、またはクレジットベースのアカウントがある場合は、複数のビルドを同時に実行できます。そして、私たちはあなたの生活をできるだけ楽にした...", 
"body" : "Bitrise StartforBuildとBitriseWaitfor Build Stepsを使用して、複数の並列ビルドを開始できます。 ビルド パイプラインを使用して単一のトリガーで並列ビルドを開始する クレジットベースのアカウントを持っていて、1 つのトリガーで複数のタスクを並行して実行する予定がある場合は、Build Pipelines を使用することをお勧めします。詳細については、こちらをご覧ください パイプラインの構築 . 複数の同時実行性がある場合、またはクレジットベースのアカウントがある場合は、複数のビルドを同時に実行できます。そして、私たちはあなたの生活をできるだけ楽にしたいので、これらのビルドは単一のトリガーで自動的に開始することができます。それがどのように機能するかを見てみましょう！ この例では、1つのアプリの3つのワークフローが同時に実行されるように設定されています。これらのワークフローを呼びましょう 引き金 、 建物 と テスト 。と呼ばれるワークフロー 引き金 プルリクエストによってトリガーされ、ワークフローがトリガーされます 建物 と テスト 同時に実行されます。 すべてのワークフローは、個別のクリーンな仮想マシンで実行されます。また、さまざまなタイプのスタックで実行することもできます。ワークフローのスタックを選択するには、アプリのワークフローエディターに移動して、 スタック タブ。 いずれかのビルドが失敗した場合、そのビルドは失敗したビルドと見なされます。ビルドがWebhookによってトリガーされた場合、Bitriseは要約されたビルド結果をGitプロバイダーに送信します。並列ビルドのいずれかが失敗した場合、失敗したステータスが報告されます。 「子」ビルドのレポートはありません Bitriseは、他のすべてのビルドをトリガーした元の「親」ビルドについてのみGitステータスレポートを送信します。 「子」ビルドは、ステータスレポートをGitプロバイダーに送り返しません。 たとえば、ビルドAがビルドBとCをトリガーする場合、Aが終了するとステータスレポートが送信されます。ただし、ビルドBとCの個別のステータスレポートはありません。 何が必要： パーソナルアクセストークン。 トークンを格納する秘密の環境変数。 NS Bitrise Start Build ステップ。 NS Bitriseビルドを待つ ステップ。 CIでのBitriseStart Build Step 以来 Bitriseビルド開始 ステップは、現在実行中のビルドのパラメーター（たとえば、アプリスラッグ、ビルドスラッグ、ビルド番号）に大きく依存して、 API、使用できません Bitriseビルド開始 ローカルにステップします。 bitrise.ymlの例 あなたはあなたを編集することができます bitrise.yml 上のファイル bitrise.yml ワークフローエディタのタブ、またはファイルをローカルで編集できます。以下の例はBitriseUIに焦点を当てていますが、YAML形式を使用する場合は、 私たちの例をチェックしてください ！ を作成します パーソナルアクセストークン あなたのユーザーのために。 に移動 プロファイル設定 を選択します 安全 左側のオプション。クリック 新しいを生成する ボタン。 トークンのコピー トークンが生成されたら、必ずコピーしてください。再び表示することはできません。 に秘密の環境変数を作成する 秘密 アプリのワークフローエディターのタブで、トークンを値として追加します。 シークレットに使用したいキーを自由に使用してください。次のような単純なものをお勧めします $ACCESS_TOKEN 。 追加します Bitrise Start Build にステップ 引き金 ワークフロー。 注意してください Bitrise Start Build ステップは、開始するすべてのビルドに環境変数を設定します。 $SOURCE_BITRISE_BUILD_NUMBER 。ステップによってトリガーされる各ビルドには独自のビルド番号がありますが、ソースビルド番号はすべてのビルド番号で同じです。 個人用アクセストークンを保存するシークレット環境をに追加します ビットライズアクセストークン ステップの入力：をクリックします シークレット変数を選択 ボタンをクリックして、作成したキーを選択します。 を見つける ワークフロー ステップの入力、および追加 建物 と テスト それに。 追加します Bitriseビルドを待つ の最後のステップとしてのステップ 引き金 ワークフロー。 ビルドステータスの確認 ステップは、ステップで定義されたビルドのステータスをチェックします。ビルドはで定義されています ナメクジを作る 入力：スラッグはの出力です Bitrise Start Build ステップ。スラッグによって定義されたビルドが実行されている限り、ステップは実行中のビルドを保持します。ステップに含まれるビルドのいずれかが失敗すると、ビルドは失敗します。 個人用アクセストークンを保存するシークレット環境をに追加します ビットライズアクセストークン ステップの入力：をクリックします シークレット変数を選択 ボタンをクリックして、作成したキーを選択します。 そして、あなたは完了です！トリガーすると 引き金 ワークフロー、 Bitrise Start Build ワークフローのステップにより、さらに2つのビルドが同時に実行されます。これらの2つのビルドが成功した場合、 Bitriseビルドを待つ ステップで最初のビルドを終了します。ビルドが成功したかどうかに関係なく、単一のステータスレポートがgitホスティングプロバイダーに送信されます。 Webhook 手動でビルドを開始する ビルドを自動的にトリガーする " }, 
{ "title" : "bitrise.ymlの例 ", 
"url" : "ビルドとパイプライン/ビルドの開始/単一のトリガーで並列ビルドを開始する.html#bitrise-ymlの例", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ 単一のトリガーで並列ビルドを開始する \/ bitrise.ymlの例 ", 
"snippet" : "Trigger: steps: - build-router-start@0: inputs: - workflows: |- Building Testing - access_token: \"$BITRISE_API_KEY\" - build-router-wait@0: inputs: - access_token: \"$BITRISE_API_KEY\"...", 
"body" : "Trigger:\n steps:\n - build-router-start@0:\n inputs:\n - workflows: |-\n Building\n Testing\n - access_token: \"$BITRISE_API_KEY\"\n - build-router-wait@0:\n inputs:\n - access_token: \"$BITRISE_API_KEY\" " }, 
{ "title" : "特定のコミットまたはプルリクエストをスキップする ", 
"url" : "ビルドとパイプライン/ビルドの開始/特定のコミットまたはプルリクエストをスキップする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ 特定のコミットまたはプルリクエストをスキップする ", 
"snippet" : "設定によっては、リポジトリ内のすべてのコード変更がBitriseビルドをトリガーする可能性があります。ただし、必要に応じて、特定のコミットまたはプルリクエストをスキップできます。 設定によっては、リポジトリ内のすべてのコード変更がBitriseビルドをトリガーする可能性があります。ただし、必要に応じて、特定のコミットまたはプルリクエストをスキップできます。スキップとは、このコンテキストでは、トリガーがそうするように設定されている場合でも、コードの変更がBitriseでのビルドをトリガーしないことを意味します。...", 
"body" : "設定によっては、リポジトリ内のすべてのコード変更がBitriseビルドをトリガーする可能性があります。ただし、必要に応じて、特定のコミットまたはプルリクエストをスキップできます。 設定によっては、リポジトリ内のすべてのコード変更がBitriseビルドをトリガーする可能性があります。ただし、必要に応じて、特定のコミットまたはプルリクエストをスキップできます。スキップとは、このコンテキストでは、トリガーがそうするように設定されている場合でも、コードの変更がBitriseでのビルドをトリガーしないことを意味します。 " }, 
{ "title" : "コミットがビルドをトリガーしないようにする ", 
"url" : "ビルドとパイプライン/ビルドの開始/特定のコミットまたはプルリクエストをスキップする.html#コミットがビルドをトリガーしないようにする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ 特定のコミットまたはプルリクエストをスキップする \/ コミットがビルドをトリガーしないようにする ", 
"snippet" : "特定のコミットがビルドをトリガーしないようにするには、次のいずれかを含めます [skip ci] また [ci skip] コミットメッセージ内： This is not important, please [skip ci] または： I just changed the README [ci skip] ヘッド\/ラストコミットメッセージのみがチェックされます！ 複数のコミットをプッシュすると、最後の（先頭の）コミットのメッセージのみがチェックされます。 skip ci パターン！ 結局、ビルドを開始したい場合は、次の2つの選択肢があります。 コミットをリベースします（コミットメッセージを変...", 
"body" : "特定のコミットがビルドをトリガーしないようにするには、次のいずれかを含めます [skip ci] また [ci skip] コミットメッセージ内： This is not important, please [skip ci] または： I just changed the README \n\n[ci skip] \n ヘッド\/ラストコミットメッセージのみがチェックされます！ 複数のコミットをプッシュすると、最後の（先頭の）コミットのメッセージのみがチェックされます。 skip ci パターン！ 結局、ビルドを開始したい場合は、次の2つの選択肢があります。 コミットをリベースします（コミットメッセージを変更します）。 別のコミットをプッシュします。 空のコミットをプッシュする Gitを使用すると、空のコミットを作成してプッシュできます。スキップされたビルドをビルドしたい場合は、 git commit --allow-empty -m \"I decided to run this\" 関連するブランチでコミットをプッシュします。 " }, 
{ "title" : "プルリクエストがビルドをトリガーしないようにする ", 
"url" : "ビルドとパイプライン/ビルドの開始/特定のコミットまたはプルリクエストをスキップする.html#プルリクエストがビルドをトリガーしないようにする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ 特定のコミットまたはプルリクエストをスキップする \/ プルリクエストがビルドをトリガーしないようにする ", 
"snippet" : "プルリクエストは、それ自体が（仮想）コミットとして扱われます。コミットメッセージは、プルリクエストのタイトルと説明です。です いいえ プルリクエストを構成する個々のコミットのコミットメッセージ。 プルリクエストをスキップするには、 skip ci プルリクエストのタイトルまたは説明のパターン。 個々のコミットメッセージはチェックされません 置く skip ci プルリクエストを構成する個々のコミットのコミットメッセージのパターンは機能しません。適切なトリガーが設定されている場合、プルリクエストはビルドをトリガーします。 プルリクエストをスキップしないことを決定した場合\/プルリクエストでさらにコ...", 
"body" : "プルリクエストは、それ自体が（仮想）コミットとして扱われます。コミットメッセージは、プルリクエストのタイトルと説明です。です いいえ プルリクエストを構成する個々のコミットのコミットメッセージ。 プルリクエストをスキップするには、 skip ci プルリクエストのタイトルまたは説明のパターン。 個々のコミットメッセージはチェックされません 置く skip ci プルリクエストを構成する個々のコミットのコミットメッセージのパターンは機能しません。適切なトリガーが設定されている場合、プルリクエストはビルドをトリガーします。 プルリクエストをスキップしないことを決定した場合\/プルリクエストでさらにコミットする場合は、単に削除することができます skip ci プルリクエストのタイトルまたは説明からのパターン。これにより、最新のコミットで新しいビルドが自動的にトリガーされ、プルリクエストの今後のすべてのコミットもビルドされます（ skip ci 再びパターン）。 " }, 
{ "title" : "ドラフトPRによってトリガーされたビルドを終了する ", 
"url" : "ビルドとパイプライン/ビルドの開始/特定のコミットまたはプルリクエストをスキップする.html#ドラフトprによってトリガーされたビルドを終了する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドの開始 \/ 特定のコミットまたはプルリクエストをスキップする \/ ドラフトPRによってトリガーされたビルドを終了する ", 
"snippet" : "あなたが使用するとき GitHubのドラフトPR関数 、Bitriseは環境変数をビルド環境変数リストに挿入します。このEnvVarがビルドEnvVarリストで使用可能な場合、その値は常に次のように設定されます。 true 。 あなたは見つけることができます GITHUB_PR_IS_DRAFT ビルドにEnvVarを設定し、ビルドをすぐに中止して、2つの方法で同時実行\/クレジットを保存します。 以下のスクリプトコマンドをに挿入すると 脚本 ステップ、コマンドはドラフトPR Env Varが定義されている場合、それをキャッチし、ビルドは失敗します。 #!\/usr\/bin\/env bash # ...", 
"body" : "あなたが使用するとき GitHubのドラフトPR関数 、Bitriseは環境変数をビルド環境変数リストに挿入します。このEnvVarがビルドEnvVarリストで使用可能な場合、その値は常に次のように設定されます。 true 。 あなたは見つけることができます GITHUB_PR_IS_DRAFT ビルドにEnvVarを設定し、ビルドをすぐに中止して、2つの方法で同時実行\/クレジットを保存します。 以下のスクリプトコマンドをに挿入すると 脚本 ステップ、コマンドはドラフトPR Env Varが定義されている場合、それをキャッチし、ビルドは失敗します。 #!\/usr\/bin\/env bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\nif [[ -z \"${GITHUB_PR_IS_DRAFT}\" ]]; then\n echo 'Not a draft PR'\nelse\n exit 1\nfi\n 空の緑色のビルドを非常に高速に実行したい場合は、以下に挿入することをお勧めします run_if ステップをスキップするには、ワークフローの各ステップにコマンドを送信します。 workflow1:\n steps:\n - script@1:\n run_if: '{{enveq \"GITHUB_PR_IS_DRAFT\" \"\"}}' \n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n # fail if any commands fails\n set -e\n # debug log\n set -x ドラフトPR後に新しいビルドを開始する 以前にビルドでドラフトPRを使用したことがあるが、同じPRからコードへの変更をマージする準備ができている場合は、[ レビューの準備ができました GitHubのボタンは、Bitriseでの新しいビルドをトリガーしません。以前のビルドには、PR関連の環境変数のドラフトも含まれます。この場合、Webサイトから新しいビルドを手動で開始するか、新しいコミットでCIをトリガーすることをお勧めします。 " }, 
{ "title" : "キャッシング ", 
"url" : "ビルドとパイプライン/キャッシング.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング ", 
"snippet" : "すべてのBitriseビルドはクリーンな仮想マシンで実行されますが、Bitrise.io Cache：PushStepを使用してコンテンツをビルドキャッシュに保存できます。 すべてのBitriseビルドは、クリーンな仮想マシンで実行されます。つまり、通常、キャッシュを使用せずに、依存関係のインストールなど、すべてを仮想マシン上で最初から実行する必要があります。 キャッシュを使用すると、インストールされている依存関係やビルド中に生成されたファイルなど、選択したファイルやディレクトリの内容を保持できます。そして、それは非常に簡単です。ワークフローで2つのステップを使用する必要があります。 キャッシ...", 
"body" : "すべてのBitriseビルドはクリーンな仮想マシンで実行されますが、Bitrise.io Cache：PushStepを使用してコンテンツをビルドキャッシュに保存できます。 すべてのBitriseビルドは、クリーンな仮想マシンで実行されます。つまり、通常、キャッシュを使用せずに、依存関係のインストールなど、すべてを仮想マシン上で最初から実行する必要があります。 キャッシュを使用すると、インストールされている依存関係やビルド中に生成されたファイルなど、選択したファイルやディレクトリの内容を保持できます。そして、それは非常に簡単です。ワークフローで2つのステップを使用する必要があります。 キャッシュは単一のアーカイブファイルとして保存されます。キャッシュされたパスの内容が何らかの方法で変更されると、ファイル全体が更新されます。ビルドを実行するリポジトリのすべてのブランチには、独自のキャッシュアーカイブがあります。キャッシュを生成されたスタックとは別のスタックで使用しようとすると、キャッシュは使用されないことに注意してください。 iOS用のXcodeアーカイブとエクスポート Androidビルド " }, 
{ "title" : "キーベースのキャッシュ ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ ", 
"snippet" : "Bitrise のキーベースのキャッシュは、キャッシュ アーカイブをキーに関連付けることで機能します。ワークフローは、キーを参照してキャッシュ アーカイブを復元できます。ビルド ファイルは、キーが示すキャッシュ アーカイブに保存できます。 Credit-based only Key-based caching is only available on credit-based accounts. Legacy concurrency-based accounts can use branch-based caching . キーベースのキャッシュは、キャッシュ アーカイブをキーに関連付けること...", 
"body" : "Bitrise のキーベースのキャッシュは、キャッシュ アーカイブをキーに関連付けることで機能します。ワークフローは、キーを参照してキャッシュ アーカイブを復元できます。ビルド ファイルは、キーが示すキャッシュ アーカイブに保存できます。 Credit-based only Key-based caching is only available on credit-based accounts. Legacy concurrency-based accounts can use branch-based caching . キーベースのキャッシュは、キャッシュ アーカイブをキーに関連付けることによって機能します。ワークフローは、キーを参照してキャッシュ アーカイブを復元できます。ワークフローの最後に、キーが示すキャッシュ アーカイブにビルド ファイルを保存できます。これにより、キャッシュ アーカイブが上書きされます。 キャッシュ キーには、実行時に置き換えられる変数やその他の動的要素を含めることができます。ユーザーは、定期的に新しいキャッシュ アーカイブを作成し、古いアーカイブを自動的に破棄するキャッシュを設定できます。 新しいキャッシュ アーカイブは、作成後 7 日間有効です。アーカイブが更新されると、タイマーが再起動します。アーカイブが 7 日間更新されない場合、アーカイブは自動的に破棄されます。 " }, 
{ "title" : "キーベースのキャッシュの使用 ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#キーベースのキャッシュの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ キーベースのキャッシュの使用 ", 
"snippet" : "キーベースのキャッシュには、一緒に使用する必要がある 2 つのステップが必要です。 キャッシュを保存 : ビルド ファイルをキーで識別されるキャッシュ アーカイブに保存します。 キャッシュを復元 : キーで識別されるキャッシュ アーカイブにビルド ファイルを復元します。 どちらのステップも、キー文字列を介してキャッシュ アーカイブにアクセスします。これらのキーは、 キャッシュキー ステップ入力;各キーは個別のキャッシュ アーカイブを識別します。...", 
"body" : "キーベースのキャッシュには、一緒に使用する必要がある 2 つのステップが必要です。 キャッシュを保存 : ビルド ファイルをキーで識別されるキャッシュ アーカイブに保存します。 キャッシュを復元 : キーで識別されるキャッシュ アーカイブにビルド ファイルを復元します。 どちらのステップも、キー文字列を介してキャッシュ アーカイブにアクセスします。これらのキーは、 キャッシュキー ステップ入力;各キーは個別のキャッシュ アーカイブを識別します。 " }, 
{ "title" : "新しいキャッシュ アーカイブの作成 ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#新しいキャッシュ-アーカイブの作成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ キーベースのキャッシュの使用 \/ 新しいキャッシュ アーカイブの作成 ", 
"snippet" : "主な制限事項 キャッシュ キーの最大長は 512 文字です (それより長いキーは切り捨てられます)。キーにコンマ (,) を使用することはできません。 追加 キャッシュを保存 ワークフローの最後に進みます。 の中に キャッシュキー 入力、キャッシュ キーを定義します。このキーは、キャッシュ アーカイブを識別するために使用されます。 使用できます テンプレートと関数 ビルド環境やその他の要因に応じて変化する動的キーを作成します。 複数のキーを指定できます。ステップはそれらを順番に評価し、最初のものと一致させます。続きを読む： キャッシュ アーカイブのキー マッチング動的キーによる条件付きキャッシ...", 
"body" : "主な制限事項 キャッシュ キーの最大長は 512 文字です (それより長いキーは切り捨てられます)。キーにコンマ (,) を使用することはできません。 追加 キャッシュを保存 ワークフローの最後に進みます。 の中に キャッシュキー 入力、キャッシュ キーを定義します。このキーは、キャッシュ アーカイブを識別するために使用されます。 使用できます テンプレートと関数 ビルド環境やその他の要因に応じて変化する動的キーを作成します。 複数のキーを指定できます。ステップはそれらを順番に評価し、最初のものと一致させます。続きを読む： キャッシュ アーカイブのキー マッチング動的キーによる条件付きキャッシュ ビルド中にコンテンツが変更されていない場合、キャッシュのアーカイブとアップロードを自動的にスキップできるようにステップを構成できます。 動的キーでの条件付きキャッシュの使用. OS を参照するキーを使用して新しいキャッシュ アーカイブを作成する この例では、ビルド マシンのオペレーティング システムの種類を参照するキーを持つキャッシュ アーカイブを作成しています。 - save-cache@1:\n inputs:\n - key: |-\n npm-cache-{{ .OS }} の中に キャッシュへのパス 入力、キャッシュするファイルとフォルダーを定義します。 入力ではワイルドカードを使用できます。 * と ** .入力値は実行時に評価されます。 node_modules フォルダーにすべてのファイルとフォルダーを再帰的にキャッシュする - save-cache@1:\n inputs:\n - key: |-\n npm-cache-{{ .OS }}\n - paths: node_modules\/ 専用のキーベースのキャッシュ 手順 次のような専用のキーベースのキャッシュ手順を使用できます。 NPM キャッシュを保存 、npm または yarn の依存関係をキャッシュします。 専用のキーベースのキャッシュ手順の完全なリストについては、こちらをご覧ください 依存関係マネージャーの専用キャッシュ手順. キャッシュ アーカイブが作成されると、 アプリの設定 ページ： ビルド外のキーベースのキャッシュ アーカイブの管理. " }, 
{ "title" : "既存のキャッシュ アーカイブの復元 ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#既存のキャッシュ-アーカイブの復元", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ キーベースのキャッシュの使用 \/ 既存のキャッシュ アーカイブの復元 ", 
"snippet" : "追加 キャッシュを復元 ワークフローの最初に進みます。 の中に キャッシュキー 入力に、復元するキャッシュのキーを入力します。 使用できます テンプレートと関数 ビルド環境やその他の要因に応じて変化する動的キーを作成します。 複数のキーを指定できます。ステップはそれらを順番に評価し、最初に一致するものを選択します。続きを読む： キャッシュ アーカイブのキー マッチング. 2 つのキーのいずれかからのキャッシュ アーカイブの復元 この例では、次の 2 つのキーのいずれかを復元しています。 まず、現在のワークフローの名前を含むキーを持つキャッシュ アーカイブを探します。たとえば、現在のワークフロー...", 
"body" : "追加 キャッシュを復元 ワークフローの最初に進みます。 の中に キャッシュキー 入力に、復元するキャッシュのキーを入力します。 使用できます テンプレートと関数 ビルド環境やその他の要因に応じて変化する動的キーを作成します。 複数のキーを指定できます。ステップはそれらを順番に評価し、最初に一致するものを選択します。続きを読む： キャッシュ アーカイブのキー マッチング. 2 つのキーのいずれかからのキャッシュ アーカイブの復元 この例では、次の 2 つのキーのいずれかを復元しています。 まず、現在のワークフローの名前を含むキーを持つキャッシュ アーカイブを探します。たとえば、現在のワークフローの名前が primary 、ステップはキーを持つアーカイブを探します npm-cache-primary . 次に、現在のブランチの名前を含むキーを持つアーカイブを探します。たとえば、現在のブランチの名前が main 、ステップはキーを持つアーカイブを探します npm-cache-main . - restore-cache@1:\n inputs:\n - key: |-\n npm-cache-{{ .Workflow }}\n npm-cache-{{ .Branch }}\n " }, 
{ "title" : "キーベースのキャッシング テンプレートと関数 ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#キーベースのキャッシング-テンプレートと関数", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ キーベースのキャッシング テンプレートと関数 ", 
"snippet" : "どちらのキーベースのキャッシング ステップも、ステップ入力でのテンプレート要素の使用をサポートしています。ステップは実行時にキー テンプレートを評価し、使用される最終的なキャッシュ キーは、ビルド環境またはリポジトリ内の特定のファイルに応じて変わる可能性があります。...", 
"body" : "どちらのキーベースのキャッシング ステップも、ステップ入力でのテンプレート要素の使用をサポートしています。ステップは実行時にキー テンプレートを評価し、使用される最終的なキャッシュ キーは、ビルド環境またはリポジトリ内の特定のファイルに応じて変わる可能性があります。 " }, 
{ "title" : "利用可能なキャッシング テンプレート ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#利用可能なキャッシング-テンプレート", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ キーベースのキャッシング テンプレートと関数 \/ 利用可能なキャッシング テンプレート ", 
"snippet" : "キーベースのキャッシング テンプレート テンプレート式 意味 可能な値 cache-key-{{ .Branch }} ビルドが実行されている現在の git ブランチ。 アプリの既存のブランチの正確な名前。 cache-key-{{ .CommitHash }} ビルドが実行される git コミットの SHA-256 ハッシュ。 既存のコミット ハッシュ。 cache-key-{{ .Workflow }} 現在の Bitrise ワークフロー名 (例: primary ）。 アプリの既存のワークフローの正確な名前。 {{ .Arch }}-cache-key の現在の CPU アーキテクチャ...", 
"body" : "キーベースのキャッシング テンプレート テンプレート式 意味 可能な値 cache-key-{{ .Branch }} ビルドが実行されている現在の git ブランチ。 アプリの既存のブランチの正確な名前。 cache-key-{{ .CommitHash }} ビルドが実行される git コミットの SHA-256 ハッシュ。 既存のコミット ハッシュ。 cache-key-{{ .Workflow }} 現在の Bitrise ワークフロー名 (例: primary ）。 アプリの既存のワークフローの正確な名前。 {{ .Arch }}-cache-key の現在の CPU アーキテクチャ ビルドスタック ( amd64 また arm64 ）。 amd64 : Intel ベースのスタックの場合。 arm64 ： 為に M1 ベースのスタック . {{ .OS }}-cache-key ビルド スタックの現在のオペレーティング システム ( linux また darwin ）。 linux : Linux ベースのスタックの場合。 darwin : macOS ベースのスタックの場合。 " }, 
{ "title" : "テンプレートのキャッシュでの関数の使用 ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#テンプレートのキャッシュでの関数の使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ キーベースのキャッシング テンプレートと関数 \/ テンプレートのキャッシュでの関数の使用 ", 
"snippet" : "キーベースのキャッシュ テンプレートは、次の 2 つの異なる関数の使用をサポートしています。 checksum : この関数は、1 つ以上のファイルの内容の SHA-256 チェックサムを計算します。これは、キャッシュするコンテンツを記述するファイルに基づいて一意のキャッシュ キーを作成する場合に役立ちます。 例1「. getenv : この関数は、 環境変数 (Env Var) または変数が定義されていない場合は空の文字列。 例2「チェックサム機能の使用 使用 checksum のチェックサムを計算するキーを作成する関数 package-lock.json ファイル： - save-cach...", 
"body" : "キーベースのキャッシュ テンプレートは、次の 2 つの異なる関数の使用をサポートしています。 checksum : この関数は、1 つ以上のファイルの内容の SHA-256 チェックサムを計算します。これは、キャッシュするコンテンツを記述するファイルに基づいて一意のキャッシュ キーを作成する場合に役立ちます。 例1「. getenv : この関数は、 環境変数 (Env Var) または変数が定義されていない場合は空の文字列。 例2「チェックサム機能の使用 使用 checksum のチェックサムを計算するキーを作成する関数 package-lock.json ファイル： - save-cache@1:\n inputs:\n - key: npm-cache-{{ checksum \"package-lock.json\" }}\n - paths: node_modules 使用 checksum 任意のチェックサムを計算するキーを作成する関数 .gradle ファイルと gradle.properties ファイル： - save-cache@1:\n inputs:\n - key: gradle-cache-{{ checksum \"**\/*.gradle*\" \"gradle.properties\" }}\n - paths: AndroidApp getenv 関数の使用 使用 getenv の値を含むキーを作成する関数 BITRISE_BUILD_NUMBER 環境変数。 - save-cache@1:\n inputs:\n - key: npm-cache-{{ getenv \"BITRISE_BUILD_NUMBER\" }}\n - paths: node_modules " }, 
{ "title" : "キャッシュ アーカイブのキー マッチング ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#キャッシュ-アーカイブのキー-マッチング", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ キャッシュ アーカイブのキー マッチング ", 
"snippet" : "で複数のキーを定義することができます。 キャッシュキー キーベースのキャッシング手順の入力。 1 行に 1 つのキーをリストすることで、追加のキーを指定できます。リストは優先順位に従っているため、Step は最初に指定した最初のキーに一致するものを見つけようとします。そのキーにキャッシュが保存されていない場合は、2 番目のキーに一致するものを見つけようとします (したがって、の上）。 inputs: key: | key-1 key-2 key-3 複数のキーを一覧表示するだけでなく、各キーを保存されたキャッシュ キーのプレフィックスとして使用しても、一致するキャッシュ アーカイブを取得できま...", 
"body" : "で複数のキーを定義することができます。 キャッシュキー キーベースのキャッシング手順の入力。 1 行に 1 つのキーをリストすることで、追加のキーを指定できます。リストは優先順位に従っているため、Step は最初に指定した最初のキーに一致するものを見つけようとします。そのキーにキャッシュが保存されていない場合は、2 番目のキーに一致するものを見つけようとします (したがって、の上）。 inputs:\n key: |\n key-1\n key-2\n key-3 複数のキーを一覧表示するだけでなく、各キーを保存されたキャッシュ キーのプレフィックスとして使用しても、一致するキャッシュ アーカイブを取得できます。たとえば、キー my-cache- キーで保存された既存のアーカイブと一致できます my-cache-a6a102ff .最初のキーがチェックサム キーと完全に一致するようにキーを構成し、より一般的なプレフィックス キーをフォールバックとして使用することをお勧めします。 inputs:\n key: |\n npm-cache-{{ checksum \"package-lock.json\" }}\n npm-cache- " }, 
{ "title" : "動的キーでの条件付きキャッシュの使用 ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#動的キーでの条件付きキャッシュの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ 動的キーでの条件付きキャッシュの使用 ", 
"snippet" : "ビルドを実行するたびにキャッシュ アーカイブを更新したくない場合があります。キャッシュをスキップすると、次のことが可能になります。 正しくない可能性のあるビルド データをキャッシュに保存しないようにします。 PR 検証ワークフローを高速化します。 保存および転送されるデータの量を制限します。 キャッシュされたコンテンツがビルド中にまったく変更されなかった場合、 キャッシュを保存 ステップは、キャッシュの圧縮とアップロードを自動的にスキップできます。これを機能させるには、キャッシュのコンテンツが変更されるたびに変更される一意のキャッシュ キーがキャッシュ アーカイブにあることを確認する必要があり...", 
"body" : "ビルドを実行するたびにキャッシュ アーカイブを更新したくない場合があります。キャッシュをスキップすると、次のことが可能になります。 正しくない可能性のあるビルド データをキャッシュに保存しないようにします。 PR 検証ワークフローを高速化します。 保存および転送されるデータの量を制限します。 キャッシュされたコンテンツがビルド中にまったく変更されなかった場合、 キャッシュを保存 ステップは、キャッシュの圧縮とアップロードを自動的にスキップできます。これを機能させるには、キャッシュのコンテンツが変更されるたびに変更される一意のキャッシュ キーがキャッシュ アーカイブにあることを確認する必要があります。実際には、これには チェックサム付きの動的キー キャッシュされたコンテンツを記述するファイル。チェックサムは、ファイルの内容に基づいて計算されます。ファイルが変更されていない場合は、チェックサムも変更されません。 この機能を利用できるようにステップを構成することを強くお勧めします。以下の手順に従うか、スキップして YAML の例 . キャッシュの保存ステップを完全にスキップする キャッシュされるコンテンツが変更された場合でも、キャッシュ アーカイブを更新したくない場合は、次のいずれかを削除できます。 キャッシュを保存 ワークフローからステップするか、ステップの条件を設定できます。 ステップを条件付きで有効または無効にする. でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 ワークフローを開き、 キャッシュを保存 ステップ。 をセットする 一意のキャッシュ キー への入力 真実 . 入力が 間違い ステップは引き続きキャッシュのアップロードをスキップできますが、最初にキャッシュ アーカイブを作成してチェックサムを計算する必要があります。これには時間がかかります。 の中に キャッシュキー 入力、キャッシュされたコンテンツを記述するファイルのチェックサムを含むキーを作成します。 例えば、 npm-cache-{{ checksum \"package-lock.json\" }} は、変更されない限り変更されない動的キーです。 package-lock.json ファイルは変更されません。 同じ動的キーを キャッシュキー の入力 キャッシュを復元する ステップ。 すべてが正しく構成されている場合、2 つのキャッシュ ステップのキーが一致すると、キャッシュ アーカイブは更新されません。 チェックサム付きの動的キーを使用する YAML の例 この例では、キャッシュ キーはすべての合計を計算します。 .gradle ファイルと gradle.properties ファイル。両方の キャッシュを復元する そしてその キャッシュを保存 ステップは同じキャッシュ キーを探します。 workflows: \n caching: \n steps: \n - restore-cache@1: \n inputs: \n - key: gradle-cache-{{ checksum \"**\/*.gradle*\" \"gradle.properties\" }} \n - save-cache@1: \n inputs: \n - key: gradle-cache-{{ checksum \"**\/*.gradle*\" \"gradle.properties\" }} \n - is_key_unique: 'true' " }, 
{ "title" : "ビルド外のキーベースのキャッシュ アーカイブの管理 ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#ビルド外のキーベースのキャッシュ-アーカイブの管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ ビルド外のキーベースのキャッシュ アーカイブの管理 ", 
"snippet" : "ビルドを実行せずに、キャッシュ アーカイブに個別にアクセスできます。これにより、いくつかのことを追跡できます。 異なるキャッシュ アーカイブに関連付けられているキャッシュ キー。 キャッシュ アーカイブが占めるストレージ容量。 各キャッシュ アーカイブの有効期限が切れる時期。 さらに、任意のキャッシュ アーカイブをダウンロードできます (まだ有効期限が切れていない場合)。キャッシュ キーをコピーし、アーカイブを削除できます。 アーカイブにアクセスするには: 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開...", 
"body" : "ビルドを実行せずに、キャッシュ アーカイブに個別にアクセスできます。これにより、いくつかのことを追跡できます。 異なるキャッシュ アーカイブに関連付けられているキャッシュ キー。 キャッシュ アーカイブが占めるストレージ容量。 各キャッシュ アーカイブの有効期限が切れる時期。 さらに、任意のキャッシュ アーカイブをダウンロードできます (まだ有効期限が切れていない場合)。キャッシュ キーをコピーし、アーカイブを削除できます。 アーカイブにアクセスするには: 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、選択 ビルド . 下にスクロールして ビルド キャッシュを管理する セクション。 を選択 キーベースのキャッシュ タブ。 あなたはできる： をクリックしてキャッシュ キーをコピーします。 キーのコピー アイコン。 をクリックしてキャッシュ アーカイブをダウンロードする ダウンロード アイコン。 をクリックしてキャッシュ アーカイブを削除する 消去 アイコン。 " }, 
{ "title" : "依存関係マネージャーの専用キャッシュ手順 ", 
"url" : "ビルドとパイプライン/キャッシング/キーベースのキャッシュ.html#依存関係マネージャーの専用キャッシュ手順", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キーベースのキャッシュ \/ 依存関係マネージャーの専用キャッシュ手順 ", 
"snippet" : "キーベースのキャッシュは強力で柔軟です。 キャッシュを保存 と キャッシュを復元する プラットフォームやキャッシュするデータの種類に関係なく、あらゆるアプリでステップを実行します。ただし、これらの手順は慎重に構成する必要があり、間違いを犯す可能性があります。最も頻繁に使用される依存関係マネージャーの依存関係をキャッシュするためのシンプルなソリューションを探している場合は、構成をまったく必要としない専用のステップを提供します。 専用のキャッシング ステップは、アーカイブと同じストレージ スペースにアーカイブを保存します。 キャッシュを保存 と キャッシュを復元する ステップですが、これら 2 つ...", 
"body" : "キーベースのキャッシュは強力で柔軟です。 キャッシュを保存 と キャッシュを復元する プラットフォームやキャッシュするデータの種類に関係なく、あらゆるアプリでステップを実行します。ただし、これらの手順は慎重に構成する必要があり、間違いを犯す可能性があります。最も頻繁に使用される依存関係マネージャーの依存関係をキャッシュするためのシンプルなソリューションを探している場合は、構成をまったく必要としない専用のステップを提供します。 専用のキャッシング ステップは、アーカイブと同じストレージ スペースにアーカイブを保存します。 キャッシュを保存 と キャッシュを復元する ステップですが、これら 2 つとは異なり、適切なキャッシュ パスとキャッシュ キーが自動的に設定されます。 以下の専用ステップが利用可能です。 ココアポッドのキャッシュを保存 と Cocoapods キャッシュの復元 SPM キャッシュの保存 と SPM キャッシュの復元 NPM キャッシュを保存 と NPM キャッシュの復元 Gradle キャッシュを保存 と Gradle キャッシュの復元 カルタゴのキャッシュを保存 と カルタゴのキャッシュを復元する Dartキャッシュを保存 と Dartキャッシュを復元する これらのステップを使用するには、復元バージョンをワークフローの最初に追加し、保存バージョンをワークフローの最後に追加するだけです。他の構成は必要ありません。 " }, 
{ "title" : "ブランチベースのキャッシュ ", 
"url" : "ビルドとパイプライン/キャッシング/ブランチベースのキャッシュ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ ブランチベースのキャッシュ ", 
"snippet" : "ブランチベース (レガシー) キャッシュでは、ビルドを実行するリポジトリのすべてのブランチに独自のキャッシュ アーカイブがあります。同じサーバー上でのみキャッシュ アーカイブを使用できます。 スタック で生成されました。キャッシュは単一のアーカイブ ファイルとして保存されます。キャッシュされたパスの内容が何らかの形で変更されると、ファイル全体が更新されます。 キャッシュの有効期限を作成する 特定のブランチに関連するビルドキャッシュは、7日後に期限切れになります。つまり、自動的に削除されます。ただし、その間にそのブランチに新しいビルドがない場合に限ります。これは、特定のブランチで1週間以上頻繁に...", 
"body" : "ブランチベース (レガシー) キャッシュでは、ビルドを実行するリポジトリのすべてのブランチに独自のキャッシュ アーカイブがあります。同じサーバー上でのみキャッシュ アーカイブを使用できます。 スタック で生成されました。キャッシュは単一のアーカイブ ファイルとして保存されます。キャッシュされたパスの内容が何らかの形で変更されると、ファイル全体が更新されます。 キャッシュの有効期限を作成する 特定のブランチに関連するビルドキャッシュは、7日後に期限切れになります。つまり、自動的に削除されます。ただし、その間にそのブランチに新しいビルドがない場合に限ります。これは、特定のブランチで1週間以上頻繁にビルドを行う場合、キャッシュが削除されないことを意味します。その特定のブランチで7日を超えてビルドを開始しない場合、関連するキャッシュが削除され、次のビルドは最初のビルドと同じように実行されます。 デフォルトのブランチキャッシュがフォールバックとして使用されます ブランチにまだキャッシュが保存されていない場合は、デフォルトのブランチのキャッシュが使用されます。キャッシュは、パブリック Bitrise アプリのプル リクエスト ビルドでは利用できません。 で指定されたすべてのフォルダとファイル キャッシュ パス の入力 Bitrise.io キャッシュ:プッシュ ステップ ステップが特定のフォルダーとファイルを無視するように構成されていない限り、キャッシュされます。ほとんどの場合、この入力の値を変更する必要はありません。独自のキャッシュ機能を持たないステップによって生成されたファイルをキャッシュする場合にのみ、ここに何かを追加する必要があります。独自のキャッシュ機能を備えたステップの例: iOS用のXcodeアーカイブとエクスポート Androidビルド Gradleランナー Cocoapodsインストールを実行します Homebrewインストール ビルド中にキャッシュにアクセスする方法を確認するには、以下を確認してください。 ビルドでのキャッシュの使用. " }, 
{ "title" : "ブランチベースのキャッシュに関するテクニカル ノート ", 
"url" : "ビルドとパイプライン/キャッシング/ブランチベースのキャッシュ.html#ブランチベースのキャッシュに関するテクニカル-ノート", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ ブランチベースのキャッシュ \/ ブランチベースのキャッシュに関するテクニカル ノート ", 
"snippet" : "従来のブランチ ベースのビルド キャッシュ機能は、次の 2 つの部分に分割されます。 ビルドキャッシュAPI。 ステップ。 Build CacheAPIはシンプルなAPIです。リソース（ビルドキャッシュアーカイブ）への必要なアクセス権があることを確認し、安全な（期限付きで期限切れの）ダウンロードおよびアップロードURLを提供します。ファイルは処理されません。 ステップは、キャッシュを比較し、キャッシュアーカイブを作成するロジックを実行する責任があります。これは、独自のステップを記述し、独自の比較および圧縮ロジックを実装できることを意味します。唯一の要件は、ステップがBuild CacheAPI...", 
"body" : "従来のブランチ ベースのビルド キャッシュ機能は、次の 2 つの部分に分割されます。 ビルドキャッシュAPI。 ステップ。 Build CacheAPIはシンプルなAPIです。リソース（ビルドキャッシュアーカイブ）への必要なアクセス権があることを確認し、安全な（期限付きで期限切れの）ダウンロードおよびアップロードURLを提供します。ファイルは処理されません。 ステップは、キャッシュを比較し、キャッシュアーカイブを作成するロジックを実行する責任があります。これは、独自のステップを記述し、独自の比較および圧縮ロジックを実装できることを意味します。唯一の要件は、ステップがBuild CacheAPIを使用してダウンロードおよびアップロードURLを取得する必要があることです。キャッシュファイルの形式や内容に制限はありません。 専用ガイドで独自のステップの開発について詳しく読む： 新しいステップの開発。 キャッシュが利用できない可能性があります キャッシュにアクセスできなくてもビルドが失敗しないようにコードを記述することは、常に良い考えです。また、キャッシュはインターネット経由でダウンロードされることに注意してください。リソースまたは依存関係を Bitrise ビルド キャッシュに保存すると、通常のダウンロード場所に信頼性の問題がある場合に役立つかもしれませんが、必ずしも時間を節約できるわけではありません。 " }, 
{ "title" : "ビルドでのキャッシュの使用 ", 
"url" : "ビルドとパイプライン/キャッシング/ビルドでのキャッシュの使用.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ ビルドでのキャッシュの使用 ", 
"snippet" : "キャッシュには、2つの専用のBitriseステップを使用できます。Bitrise.ioキャッシュプルを使用してキャッシュを利用し、ビルドでそのコンテンツを使用します。Bitrise.ioキャッシュプッシュを使用して、ビルドの情報をキャッシュに保存します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. ビルドでキャッシュを...", 
"body" : "キャッシュには、2つの専用のBitriseステップを使用できます。Bitrise.ioキャッシュプルを使用してキャッシュを利用し、ビルドでそのコンテンツを使用します。Bitrise.ioキャッシュプッシュを使用して、ビルドの情報をキャッシュに保存します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. ビルドでキャッシュを使用する基本はシンプルで、ワークフローに応じてすぐに使用できます。2つの専用ステップを使用するだけです。 追加します Bitrise.ioキャッシュ：プルステップ キャッシュが必要になる直前。 たとえば、iOSアプリの場合、 Bitrise.ioキャッシュ：プル 間のステップ Gitクローンリポジトリ および依存関係インストーラーの手順（ CocoaPodsインストールを実行します または カルタゴ 手順）。あなたは置くべきではありません Bitrise.ioキャッシュ：プル の前のステップ Gitクローンリポジトリ ステップ。 キャッシュの有効期限を作成する 特定のブランチに関連するビルドキャッシュは、7日後に期限切れになります。つまり、自動的に削除されます。ただし、その間にそのブランチに新しいビルドがない場合に限ります。これは、特定のブランチで1週間以上頻繁にビルドを行う場合、キャッシュが削除されないことを意味します。その特定のブランチで7日を超えてビルドを開始しない場合、関連するキャッシュが削除され、次のビルドは最初のビルドと同じように実行されます。 追加します Bitrise.ioキャッシュ：プッシュ ワークフローの最後のステップとしてのステップ。 単純なユースケースの場合、それだけです。あなたがしなければならないのはそれだけです。これらのステップは、独自のキャッシュ機能を備えたステップと一緒にすぐに機能します。ただし、詳細を確認して独自のキャッシュ構成を作成したい場合は、このまま読み進めてください。 プルリクエストビルド デフォルトでは、プルリクエストによってトリガーされるビルドを実行すると、 Bitrise.ioキャッシュ：プッシュ ステップは機能しません。この場合、プルリクエストビルドはビルドキャッシュを読み取ることはできますが、更新することはできません。 これは変更しないことを強くお勧めします。セキュリティの観点から、ベストプラクティスは、プルリクエストビルドが他のBitriseビルドに影響を与える可能性のあるものを変更しないようにすることです。 どうしても変更する必要がある場合は、 run_if アプリの表現 bitrise.yml ファイル。についてもっと読む run_if 式： ステップを条件付きで有効または無効にする。 ビルドキャッシュの構成\/ガイドの例は、 ビルドキャッシュディスカッションページ 。 " }, 
{ "title" : "ビルドキャッシュにファイルとフォルダーを含める ", 
"url" : "ビルドとパイプライン/キャッシング/ビルドでのキャッシュの使用.html#ビルドキャッシュにファイルとフォルダーを含める", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ ビルドでのキャッシュの使用 \/ ビルドキャッシュにファイルとフォルダーを含める ", 
"snippet" : "前述のように、で指定されたすべてのファイルとフォルダ Bitrise.ioキャッシュ：プッシュ ステップの キャッシュパス ステップが特定のフォルダーとファイルを無視するように構成されていない限り、入力はキャッシュされます。ほとんどの場合、この入力を変更する必要はありません。独自のキャッシュ機能が組み込まれているステップを使用する場合、特定のユースケースがない限り、ファイルやフォルダーの指定について心配する必要はありません。 ステップにキャッシュ機能があるかどうかを確認するには、その入力を確認してください。キャッシュをオンまたはオフにする入力がない場合、問題のステップには独自のキャッシュ機能が...", 
"body" : "前述のように、で指定されたすべてのファイルとフォルダ Bitrise.ioキャッシュ：プッシュ ステップの キャッシュパス ステップが特定のフォルダーとファイルを無視するように構成されていない限り、入力はキャッシュされます。ほとんどの場合、この入力を変更する必要はありません。独自のキャッシュ機能が組み込まれているステップを使用する場合、特定のユースケースがない限り、ファイルやフォルダーの指定について心配する必要はありません。 ステップにキャッシュ機能があるかどうかを確認するには、その入力を確認してください。キャッシュをオンまたはオフにする入力がない場合、問題のステップには独自のキャッシュ機能がありません。 独自のキャッシュ機能を持たないステップのファイルを含めるには： ワークフローで、 Bitrise.ioキャッシュ：プッシュ ステップ。 を見つける キャッシュパス 入力。 キャッシュに含めるファイルとフォルダーの1つまたは複数のパスを追加します。絶対パス、またはリポジトリのルートからの相対パスのいずれかを使用できます。 " }, 
{ "title" : "ファイルと依存関係を無視する ", 
"url" : "ビルドとパイプライン/キャッシング/ビルドでのキャッシュの使用.html#ファイルと依存関係を無視する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ ビルドでのキャッシュの使用 \/ ファイルと依存関係を無視する ", 
"snippet" : "あなたはまた言うことができます Bitrise.ioキャッシュ：プッシュ 特定のコンテンツを明確に無視する手順。無視するということは、次の2つのいずれかを意味します。 ファイルまたはフォルダーの変更はチェックされません。指定されたパスが以前のキャッシュアーカイブに含まれている場合、以前と同じ内容で新しいパスに含まれます。 ファイルまたはフォルダは完全に除外されます。つまり、変更に関係なく、キャッシュにはまったくアップロードされません。 ファイルまたはフォルダのいずれかに対していずれかのオプションを選択できます。 特定のファイルまたはフォルダーを無視するには： ワークフローで、 Bitrise....", 
"body" : "あなたはまた言うことができます Bitrise.ioキャッシュ：プッシュ 特定のコンテンツを明確に無視する手順。無視するということは、次の2つのいずれかを意味します。 ファイルまたはフォルダーの変更はチェックされません。指定されたパスが以前のキャッシュアーカイブに含まれている場合、以前と同じ内容で新しいパスに含まれます。 ファイルまたはフォルダは完全に除外されます。つまり、変更に関係なく、キャッシュにはまったくアップロードされません。 ファイルまたはフォルダのいずれかに対していずれかのオプションを選択できます。 特定のファイルまたはフォルダーを無視するには： ワークフローで、 Bitrise.ioキャッシュ：プッシュ ステップ。 を見つける 変更チェックからパスを無視する 入力。 無視するファイルとフォルダーの1つまたは複数のパスを追加します。絶対パス、またはリポジトリのルートからの相対パスのいずれかを使用できます。 特定のパスをキャッシュアーカイブから完全に除外する場合は、パスの前に ! 。例えば、 !my\/path\/ 。 特定のパスを変更チェックから除外する場合は、プレフィックスなしでパスを追加するだけです。パスが無視されたキャッシュパスアイテム内にあり、パスの前に ! 、パスはキャッシュアーカイブに含まれますが、変更がないかチェックされません。たとえば、追加した場合 my\/path\/ 入力に対して、パスディレクトリはアーカイブに含まれますが、変更がないかチェックされません。 もちろん、パスに特定のパターンを指定することもできます。例えば： パス要素を * ： a\/*\/b ：これは一致します a\/x\/b パスの一部を ** ： a\/**\/b 一致します a\/x\/y\/z\/b でディレクトリ全体を無視する \/ 。例えば、 \/my\/full\/path\/ パスフォルダ内のすべてを無視します。 パスを無視する 無効なキャッシュアイテムになるパスを無視することはできません。たとえば、 a\/path\/to\/cache キャッシュされるパス、無視することはできません a\/path\/to 、それはすべてのファイルを無視し、変更をチェックしないため、フィンガープリントを生成できませんでした a\/path\/to\/cache 。これでステップが失敗することはありません。次の警告が表示されるだけです。 No path to cache, skip caching... ただし、キャッシュパス内のパスは無視できます。たとえば、パスが a\/path\/to\/cache 、無視できます a\/path\/to\/cache\/.ignore-me 、それが内部の唯一のファイルでない限り a\/path\/to\/cache 。 " }, 
{ "title" : "ビルドキャッシュのダウンロードまたは削除 ", 
"url" : "ビルドとパイプライン/キャッシング/ビルドでのキャッシュの使用.html#ビルドキャッシュのダウンロードまたは削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ ビルドでのキャッシュの使用 \/ ビルドキャッシュのダウンロードまたは削除 ", 
"snippet" : "キャッシュを生成したすべてのブランチのビルドキャッシュをダウンロードして削除できます。キャッシュのサイズと、特定のキャッシュが最後に使用された時刻を確認できます。 単一のブランチのキャッシュを削除する 単一のブランチに関連するキャッシュのみを削除する場合は、デフォルトのブランチのキャッシュも削除する必要があります。これは、ビルドがキャッシュのないブランチで実行される場合、 Bitrise.ioキャッシュ：プル ステップ デフォルトのブランチのキャッシュを取得します。 ビルドキャッシュを管理するには： 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 ...", 
"body" : "キャッシュを生成したすべてのブランチのビルドキャッシュをダウンロードして削除できます。キャッシュのサイズと、特定のキャッシュが最後に使用された時刻を確認できます。 単一のブランチのキャッシュを削除する 単一のブランチに関連するキャッシュのみを削除する場合は、デフォルトのブランチのキャッシュも削除する必要があります。これは、ビルドがキャッシュのないブランチで実行される場合、 Bitrise.ioキャッシュ：プル ステップ デフォルトのブランチのキャッシュを取得します。 ビルドキャッシュを管理するには： 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 ビルド 。 を見つける ビルドキャッシュの管理 セクション。 を選択 ブランチベース (レガシー) キャッシング タブ。 ポップアップウィンドウでキャッシュアーカイブを確認できます。キャッシュアーカイブのいずれか、またはすべてをダウンロードまたは削除できます。 " }, 
{ "title" : "Cocoapodsのキャッシング ", 
"url" : "ビルドとパイプライン/キャッシング/cocoapodsのキャッシング.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ Cocoapodsのキャッシング ", 
"snippet" : "ワークフローの最後にBitrise.ioCache：Push Stepを配置することで、Cocoapodsコンテンツをキャッシュできます。このキャッシュされたデータを後で使用するには、Gitクローンステップの後にBitrise.io Cache：Pullステップを使用します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順....", 
"body" : "ワークフローの最後にBitrise.ioCache：Push Stepを配置することで、Cocoapodsコンテンツをキャッシュできます。このキャッシュされたデータを後で使用するには、Gitクローンステップの後にBitrise.io Cache：Pullステップを使用します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. 開始する前に、最新バージョンの Cocoapodsインストール ワークフローにステップインします。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 を挿入します Bitrise.ioキャッシュ：プル 後のステップ Gitクローン しかし前に Cocoapodsのインストール 手順。 キャッシュのステップバージョン：プルステップ ステップがバージョン 1.0.0 以降であることを確認してください。古いバージョンでは、キャッシュ用のパスを手動で指定する必要があります。 を挿入します Bitrise.ioキャッシュ：プッシュ ワークフローの最後にステップします。 そして、それはあなたがしなければならないすべてです！以前のバージョンを使用したい場合 キャッシュ 手順、あなたはより多くの情報を見つけることができます ここ 。 " }, 
{ "title" : "キャッシングGradle ", 
"url" : "ビルドとパイプライン/キャッシング/キャッシングgradle.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ キャッシングGradle ", 
"snippet" : "ワークフローの最後にBitrise.ioCache：Push Stepを配置することで、Gradleコンテンツをキャッシュできます。このキャッシュされたデータを後で使用するには、Gitクローンステップの後にBitrise.io Cache：Pullステップを使用します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. 開始...", 
"body" : "ワークフローの最後にBitrise.ioCache：Push Stepを配置することで、Gradleコンテンツをキャッシュできます。このキャッシュされたデータを後で使用するには、Gitクローンステップの後にBitrise.io Cache：Pullステップを使用します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. 開始する前に、最新バージョンの Androidビルド ワークフローにステップインします。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 を挿入します キャッシュ：プル 後のステップ Gitクローン しかし前に Androidビルド ステップ。 キャッシュのステップバージョン：プルステップ ステップがバージョン 1.0.0 以降であることを確認してください。古いバージョンでは、キャッシュ用のパスを手動で指定する必要があります。 を挿入します キャッシュ：プッシュ ワークフローの最後に進みます。 そして、あなたは完了です！ " }, 
{ "title" : "Mavenのキャッシュ ", 
"url" : "ビルドとパイプライン/キャッシング/mavenのキャッシュ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ Mavenのキャッシュ ", 
"snippet" : "ワークフローの最後にBitrise.ioCache：Push Stepを配置することで、Mavenコンテンツをキャッシュできます。このキャッシュされたデータを後で使用するには、Gitクローンステップの後にBitrise.io Cache：Pullステップを使用します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. でアプ...", 
"body" : "ワークフローの最後にBitrise.ioCache：Push Stepを配置することで、Mavenコンテンツをキャッシュできます。このキャッシュされたデータを後で使用するには、Gitクローンステップの後にBitrise.io Cache：Pullステップを使用します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 を挿入します キャッシュ：プル 後のステップ Git Clone しかし前に Android Build ステップ。 キャッシュのステップバージョン：プルステップ ステップがバージョン 1.0.0 以降であることを確認してください。古いバージョンでは、キャッシュ用のパスを手動で指定する必要があります。 を挿入します Bitrise.ioキャッシュ：プッシュ ワークフローの最後に進みます。 の中に キャッシュパス ステップの入力、入力 $HOME\/.m2 。 そして、あなたは完了です！ " }, 
{ "title" : "RubyGemsのキャッシュ ", 
"url" : "ビルドとパイプライン/キャッシング/rubygemsのキャッシュ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ RubyGemsのキャッシュ ", 
"snippet" : "ワークフローの最後にBitrise.ioCache：Push Stepを配置することで、RubyGemsをキャッシュできます。このキャッシュされたデータを後で使用するには、Gitクローンステップの後にBitrise.io Cache：Pullステップを使用します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. Ruby ...", 
"body" : "ワークフローの最後にBitrise.ioCache：Push Stepを配置することで、RubyGemsをキャッシュできます。このキャッシュされたデータを後で使用するには、Gitクローンステップの後にBitrise.io Cache：Pullステップを使用します。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. Ruby Gemsは、デフォルトではbitrise.io仮想マシンにキャッシュされません。 Ruby Gemsは、現在の場所に応じた場所にインストールされます rbenv バージョン。バージョンは実行することで確認できます rbenv version 。 このディレクトリの場所は、次のコマンドで取得できます。 gem environment gemdir 。ただし、このディレクトリを次のようにキャッシュするだけでは不十分です。 rbenv ルビーバージョン固有のgemへのリンクを設定します：ルビーバージョン固有のディレクトリ全体-たとえば、 \/Users\/vagrant\/.rbenv\/versions\/2.5.3 -キャッシュする必要があります。 の値を設定することはお勧めしません $GEM_HOME 環境変数。インストールされているgemが見つからない可能性があるため。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加する 脚本 ワークフローに進みます。 をセットする $GEM_CACHE_PATH の環境変数 脚本 ステップ。 - script:\n title: Set GEM_CACHE_PATH env var\n inputs:\n - content: |-\n #!\/bin\/bash\n set -ex\n RBENV_DIR=\"`cd $(rbenv which ruby)\/..\/..;pwd`\"\n echo \"Gem cache directory: $RBENV_DIR\"\n envman add --key GEM_CACHE_PATH --value $RBENV_DIR を挿入します キャッシュ：プル 後のステップ Gitクローン しかし前に Androidビルド ステップ。 を挿入します キャッシュ：プッシュ ワークフローの最後に進みます。 入力を開きます Cache paths ステップの キャッシュ：プッシュ と追加 $GEM_CACHE_PATH 追加のキャッシュディレクトリとして新しい行に。 そして、あなたは完了です！ " }, 
{ "title" : "自作インストーラーのキャッシュ ", 
"url" : "ビルドとパイプライン/キャッシング/自作インストーラーのキャッシュ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ 自作インストーラーのキャッシュ ", 
"snippet" : "Homebrewインストーラーのキャッシュを有効にするには、 キャッシュ入力 に はい の中に 醸造インストール ステップ。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. NS Homebrewインストール ステップはキャッシュをサポートします：オプションが有効になっている場合、ダウンロードされたbrewインストーラーは...", 
"body" : "Homebrewインストーラーのキャッシュを有効にするには、 キャッシュ入力 に はい の中に 醸造インストール ステップ。 ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. NS Homebrewインストール ステップはキャッシュをサポートします：オプションが有効になっている場合、ダウンロードされたbrewインストーラーは次の場所からキャッシュされます brew --cache 。キャッシュパスは ~\/Library\/Caches\/Homebrew\/ 。 brewインストーラーのキャッシュを有効にするには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加または選択（すでにワークフローの一部である場合） Homebrewインストール ステップ。 をセットする キャッシュ オプション yes 。 いつものように、 保存する 。 " }, 
{ "title" : "Swift パッケージのキャッシュ ", 
"url" : "ビルドとパイプライン/キャッシング/swift-パッケージのキャッシュ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ キャッシング \/ Swift パッケージのキャッシュ ", 
"snippet" : "ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 挿入します Bitrise.io キャッシュ:プル 次のステップ Gitクローン の前にステップ Xcode ビルド ステップ。 キャッシュのステップバージョン：プルステップ ステップがバー...", 
"body" : "ブランチベースのキャッシュ vs キーベースのキャッシュ このガイドは、従来のブランチ ベースのキャッシュに関するものです。キーベースのキャッシュについては、詳細ガイドをご覧ください。 キーベースのキャッシュ. 専用のキーベースのキャッシュ手順については、こちらをご覧ください。 依存関係マネージャーの専用キャッシュ手順. でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 挿入します Bitrise.io キャッシュ:プル 次のステップ Gitクローン の前にステップ Xcode ビルド ステップ。 キャッシュのステップバージョン：プルステップ ステップがバージョン 1.0.0 以降であることを確認してください。古いバージョンでは、キャッシュ用のパスを手動で指定する必要があります。 で Swift パッケージのキャッシュを有効にしてください。 Xcode ビルド ステップ。 たとえば、 Xcode アーカイブ & iOS 用エクスポート ステップ、設定することでキャッシュを有効にすることができます キャッシュ コンテンツの収集を有効にする への入力 swift_packages 下 キャッシング 入力グループ。 挿入します Bitrise.io キャッシュ:プッシュ ワークフローの最後に進みます。 " }, 
{ "title" : "ビルドファイルの管理 ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 ", 
"snippet" : "「bitrise.ioへのデプロイ」ステップを使用すると、ビルド中に生成されたファイルをbitrise.ioにデプロイできます。コード署名ファイルをアップロードすることもできます。アップロードされたファイルは、ビルドページの[アプリとアーティファクト]タブで表示できます。 Bitriseでファイルを管理すると、ビルドで使用するファイルをアップロードできます。コード署名のためにファイルをアップロードする必要があります。ビルドは、出力としてファイルも生成します。 あなたはできる： 汎用ファイルストレージにファイルをアップロードします。 ビルドでアップロードされたファイルを使用します。 ビルドで暗号...", 
"body" : "「bitrise.ioへのデプロイ」ステップを使用すると、ビルド中に生成されたファイルをbitrise.ioにデプロイできます。コード署名ファイルをアップロードすることもできます。アップロードされたファイルは、ビルドページの[アプリとアーティファクト]タブで表示できます。 Bitriseでファイルを管理すると、ビルドで使用するファイルをアップロードできます。コード署名のためにファイルをアップロードする必要があります。ビルドは、出力としてファイルも生成します。 あなたはできる： 汎用ファイルストレージにファイルをアップロードします。 ビルドでアップロードされたファイルを使用します。 ビルドで暗号化されたファイルを使用します。 を使用して bitrise.ioにデプロイします ステップ、ビルド中に生成されたファイルをbitrise.ioにデプロイできます。これらのファイルは、ビルドページの[アプリとアーティファクト]タブで表示できます。 AndroidとiOSの両方のコード署名ファイルをアップロードすることもできます。についてもっと読む Androidコード署名 と iOSコード署名 詳細なガイドで。 " }, 
{ "title" : "ビルド用のファイルのアップロード ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/ビルド用のファイルのアップロード.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ ビルド用のファイルのアップロード ", 
"snippet" : "ビルドで機能させるためにファイルが必要な場合は、ワークフローエディターの[コード署名]タブでファイルをアップロードできます。 ビルドを機能させるためにファイルが必要な場合は、それらをにアップロードします。 汎用ファイルストレージ 。 NS 汎用ファイルストレージ すべてのファイルタイプを受け入れます。必要なのは、一意のIDを指定してファイルをアップロードすることだけです。 ファイルがアップロードされると、保存されます 環境変数として（環境変数） 。このEnvVarを使用してファイルにアクセスし、ビルドで使用できます。ファイルは次のようにもなります。 どちらかを持っている人なら誰でもダウンロード...", 
"body" : "ビルドで機能させるためにファイルが必要な場合は、ワークフローエディターの[コード署名]タブでファイルをアップロードできます。 ビルドを機能させるためにファイルが必要な場合は、それらをにアップロードします。 汎用ファイルストレージ 。 NS 汎用ファイルストレージ すべてのファイルタイプを受け入れます。必要なのは、一意のIDを指定してファイルをアップロードすることだけです。 ファイルがアップロードされると、保存されます 環境変数として（環境変数） 。このEnvVarを使用してファイルにアクセスし、ビルドで使用できます。ファイルは次のようにもなります。 どちらかを持っている人なら誰でもダウンロード 管理者または所有者の役割 Bitriseのアプリのチームで。これを防ぐことができます： アップロードしたファイルを保護するプルリクエストビルドに公開されました。 一般的なファイルストレージの制限 Generic File Storageには、アップロードのサイズとファイル数に特定の制限があります。 5MBを超えるファイルをアップロードすることはできません。 同時に保存できるのは、合計5つの異なるファイルのみです。さらにアップロードする場合は、ストレージ内のファイルの1つを削除する必要があります。 ファイルをアップロードするには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ。 に行く 汎用ファイル ストレージ セクション。 の中に ファイルストレージID 入力フィールドに、一意のIDを入力します。 一意のIDは、Bitriseが保存する生成されたダウンロードURLの一部になります。 環境変数 。 ファイルをアップロードします。 2つのオプションがあります。 の任意の場所をクリックします ファイルをアップロードする セクションを選択し、コンピュータからファイルを選択します。 ファイルをにドラッグアンドドロップします ファイルをアップロードする セクション。 ファイルサイズは5MBを超えることはできないことに注意してください。 " }, 
{ "title" : "アップロードしたファイルを保護する ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/ビルド用のファイルのアップロード.html#アップロードしたファイルを保護する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ ビルド用のファイルのアップロード \/ アップロードしたファイルを保護する ", 
"snippet" : "ファイルをにアップロードしたら 一般的なファイルストレージ 、アップロードしたファイルを保護モードに設定できます。つまり、アカウントからファイルをダウンロードしたり公開したりすることはできませんが、ビルドでは引き続き使用できます。 Bitriseは、アップロードされたファイルに添付された環境変数を次のように処理します。 ひみつ 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ、次に 汎用ファイル ストレージ セクション。 横の省略記号ボタンをクリックして、 保護する 。 クリック 保護する ポップアップウィンドウで。...", 
"body" : "ファイルをにアップロードしたら 一般的なファイルストレージ 、アップロードしたファイルを保護モードに設定できます。つまり、アカウントからファイルをダウンロードしたり公開したりすることはできませんが、ビルドでは引き続き使用できます。 Bitriseは、アップロードされたファイルに添付された環境変数を次のように処理します。 ひみつ 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ、次に 汎用ファイル ストレージ セクション。 横の省略記号ボタンをクリックして、 保護する 。 クリック 保護する ポップアップウィンドウで。 " }, 
{ "title" : "ビルドでのファイルの使用 ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/ビルドでのファイルの使用.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ ビルドでのファイルの使用 ", 
"snippet" : "ビルドでファイルを使用するには、ワークフローでファイルダウンローダーのようなステップを使用してファイルをダウンロードするか、ファイルの自動生成されたEnvVarをステップ入力として使用できます。 Bitriseビルドでファイルを使用する方法は複数あります。 ファイルを生成するほとんどのステップは、ファイルパスを出力環境変数（Env Var）に格納します。同じワークフローの後続のステップでは、そのEnvVarを再利用してファイルにアクセスできます。 あなたはできる 汎用ファイルストレージにファイルをアップロードする そして、URLを入力として受け入れるステップで、自動生成されたEnvVarをステ...", 
"body" : "ビルドでファイルを使用するには、ワークフローでファイルダウンローダーのようなステップを使用してファイルをダウンロードするか、ファイルの自動生成されたEnvVarをステップ入力として使用できます。 Bitriseビルドでファイルを使用する方法は複数あります。 ファイルを生成するほとんどのステップは、ファイルパスを出力環境変数（Env Var）に格納します。同じワークフローの後続のステップでは、そのEnvVarを再利用してファイルにアクセスできます。 あなたはできる 汎用ファイルストレージにファイルをアップロードする そして、URLを入力として受け入れるステップで、自動生成されたEnvVarをステップ入力値として使用します。 あなたはできる 汎用ファイルストレージにファイルをアップロードする ステップの1つを使用します（たとえば、 ファイルダウンローダー ステップ）ビルド用のファイルをダウンロードします。これは、ローカルファイルパスを必要とするステップで機能するため、入力値としてURLを直接サポートしません。 " }, 
{ "title" : "ファイルダウンローダーステップを使用してファイルをダウンロードする ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/ビルドでのファイルの使用.html#ファイルダウンローダーステップを使用してファイルをダウンロードする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ ビルドでのファイルの使用 \/ ファイルダウンローダーステップを使用してファイルをダウンロードする ", 
"snippet" : "一度あなた 汎用ファイルストレージにファイルをアップロードしました 、それにアクセスする方法の1つは、 ファイルダウンローダー ステップ。このステップは、ローカルパスのみを値として受け入れるステップ入力でファイルを使用する必要がある場合に役立ちます。 ステップは指定した場所にファイルをダウンロードし、その後のすべてのステップはその場所にあるファイルにアクセスできます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ、次に 汎用ファイル ストレージ セクション。 ファイルを見つけて、そのファイル名の下に環境変数（Env V...", 
"body" : "一度あなた 汎用ファイルストレージにファイルをアップロードしました 、それにアクセスする方法の1つは、 ファイルダウンローダー ステップ。このステップは、ローカルパスのみを値として受け入れるステップ入力でファイルを使用する必要がある場合に役立ちます。 ステップは指定した場所にファイルをダウンロードし、その後のすべてのステップはその場所にあるファイルにアクセスできます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ、次に 汎用ファイル ストレージ セクション。 ファイルを見つけて、そのファイル名の下に環境変数（Env Var）をコピーします。 に移動します ワークフロー タブ。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します ファイルダウンローダー ワークフローに進みます。 の中に ソースURLをダウンロード 入力して、前にコピーしたEnvVarを貼り付けます。 の中に 宛先パスをダウンロードする 入力には、ファイルをダウンロードするパスを指定します。リポジトリのルートからの相対パスである必要があります。 入力値としてEnvVarを使用する 入力に直接指定する代わりに、ファイルパスをApp EnvVarに保存できます。そうすれば、他のステップでEnv Varを介してファイルを参照できるため、毎回パスを指定する必要はありません。 たとえば、パスをに保存すると BITRISEIO_MY_FILE_LOCAL_PATH Env Varは、入力のパスとして使用でき、後続のすべてのステップでファイルにアクセスするためにも使用できます。 クリック 保存する 右上隅にあります。 " }, 
{ "title" : "カスタムスクリプトステップを使用してファイルをダウンロードする ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/ビルドでのファイルの使用.html#カスタムスクリプトステップを使用してファイルをダウンロードする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ ビルドでのファイルの使用 \/ カスタムスクリプトステップを使用してファイルをダウンロードする ", 
"snippet" : "使用したくない場合 ファイルダウンローダー ビルドでアップロードされたファイルをダウンロードしてアクセスするステップ。独自のカスタムスクリプトステップを使用することもできます。ダウンロードURLを取得し、ビルドマシンに存在する完全なダウンロードパスを指定してファイルをダウンロードするだけです。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ、次に 汎用ファイル ストレージ セクション。 ファイルを見つけて、そのファイル名の下に環境変数（Env Var）をコピーします。 に移動します ワークフロー タブ。 からワークフロー...", 
"body" : "使用したくない場合 ファイルダウンローダー ビルドでアップロードされたファイルをダウンロードしてアクセスするステップ。独自のカスタムスクリプトステップを使用することもできます。ダウンロードURLを取得し、ビルドマシンに存在する完全なダウンロードパスを指定してファイルをダウンロードするだけです。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ、次に 汎用ファイル ストレージ セクション。 ファイルを見つけて、そのファイル名の下に環境変数（Env Var）をコピーします。 に移動します ワークフロー タブ。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加する 脚本 ワークフローに進みます。 を見つける スクリプトの内容 ステップの入力。 スクリプトを追加してファイルをダウンロードし、ダウンロード場所をEnvVarに保存します。 以下の例では、ダウンロードURLはに保存されています BITRISE_IO_MY_FILE_ID_URL 環境変数使用しています envman ローカルパスをに保存するには BITRISEIO_MY_FILE_LOCAL_PATH 環境変数以降の手順では、このEnvVarを使用してファイルにアクセスできます。 #!\/bin\/bash\nset -ex\n\n# specify local download path\nexport file_local_path=download\/path\/to\/my\/file\n\n# download the file\nwget -O \"$file_local_path\" \"$BITRISEIO_MY_FILE_ID_URL\"\necho \"file downloaded to: $file_local_path\"\n\n# OPTIONALLY: export the file's local path, to be able to use it in subsequent steps as an input value\nenvman add --key BITRISEIO_MY_FILE_LOCAL_PATH --value \"$file_local_path\" または、たとえば、場所をApp Env Varとして設定し、スクリプトステップ内でパスを定義する代わりに、そのパスにダウンロードすることもできます。 " }, 
{ "title" : "ビルドで暗号化されたファイルを使用する ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/ビルドで暗号化されたファイルを使用する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ ビルドで暗号化されたファイルを使用する ", 
"snippet" : "Bitriseで暗号化されたファイルを簡単に使用できます。コンピュータでファイルを暗号化した後、それを汎用ファイルストレージにアップロードして、 ファイルの復号化 ステップまたは独自のカスタム復号化ソリューションを使用して、必要なときに復号化します。 Bitriseで暗号化されたファイルを簡単かつ安全に使用できます。あなたがする必要があるのはあなたのコンピュータ上のファイルを暗号化することです、 Generic FileStorageにアップロードします を使用します ファイルの復号化 ステップまたは独自のカスタム復号化ソリューションを使用して、必要なときに復号化します。 GPG暗号化 注意し...", 
"body" : "Bitriseで暗号化されたファイルを簡単に使用できます。コンピュータでファイルを暗号化した後、それを汎用ファイルストレージにアップロードして、 ファイルの復号化 ステップまたは独自のカスタム復号化ソリューションを使用して、必要なときに復号化します。 Bitriseで暗号化されたファイルを簡単かつ安全に使用できます。あなたがする必要があるのはあなたのコンピュータ上のファイルを暗号化することです、 Generic FileStorageにアップロードします を使用します ファイルの復号化 ステップまたは独自のカスタム復号化ソリューションを使用して、必要なときに復号化します。 GPG暗号化 注意してください ファイルの復号化 ステップは、GPGで暗号化されたファイルのみを復号化します。他の暗号化ソフトウェアを使用している場合、ステップを使用してファイルを復号化することはできません。もちろん、独自の復号化ソリューションを 脚本 ステップ。 " }, 
{ "title" : "ファイルの暗号化 ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/ビルドで暗号化されたファイルを使用する.html#ファイルの暗号化", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ ビルドで暗号化されたファイルを使用する \/ ファイルの暗号化 ", 
"snippet" : "この例では、 pwgen パスワードジェネレータツールと GPG ファイルを暗号化するための暗号化ソフトウェアとして。 ターミナル\/コマンドラインを開きます。 暗号化用の32文字のパスフレーズを作成します。 パスフレーズを保持する Bitriseでファイルを復号化するには、このパスフレーズが必要になります。 pwgen -s 32 1 ファイルを暗号化します。この例では、ファイルは次のように呼び出されます。 my_secret_file 。 gpg -c my_secret_file オプションで、非対話型の方法でファイルを暗号化できます。 gpg --batch --passphrase <...", 
"body" : "この例では、 pwgen パスワードジェネレータツールと GPG ファイルを暗号化するための暗号化ソフトウェアとして。 ターミナル\/コマンドラインを開きます。 暗号化用の32文字のパスフレーズを作成します。 パスフレーズを保持する Bitriseでファイルを復号化するには、このパスフレーズが必要になります。 pwgen -s 32 1 ファイルを暗号化します。この例では、ファイルは次のように呼び出されます。 my_secret_file 。 gpg -c my_secret_file オプションで、非対話型の方法でファイルを暗号化できます。 gpg --batch --passphrase <passphrase> -c my_secret_file " }, 
{ "title" : "ビルド中にファイルを復号化してダウンロードする ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/ビルドで暗号化されたファイルを使用する.html#ビルド中にファイルを復号化してダウンロードする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ ビルドで暗号化されたファイルを使用する \/ ビルド中にファイルを復号化してダウンロードする ", 
"snippet" : "ファイルの暗号化に成功したら、ファイルをBitriseにアップロードし、ビルド中に復号化できるようにする必要があります。この手順では、 ファイルの復号化 ファイルを復号化する手順。 GPG暗号化 注意してください ファイルの復号化 ステップは、GPGで暗号化されたファイルのみを復号化します。他の暗号化ソフトウェアを使用している場合、ステップを使用してファイルを復号化することはできません。もちろん、独自の復号化ソリューションを 脚本 ステップ。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 秘密 タブをクリックし、復号化パスフレーズをとして追...", 
"body" : "ファイルの暗号化に成功したら、ファイルをBitriseにアップロードし、ビルド中に復号化できるようにする必要があります。この手順では、 ファイルの復号化 ファイルを復号化する手順。 GPG暗号化 注意してください ファイルの復号化 ステップは、GPGで暗号化されたファイルのみを復号化します。他の暗号化ソフトウェアを使用している場合、ステップを使用してファイルを復号化することはできません。もちろん、独自の復号化ソリューションを 脚本 ステップ。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 秘密 タブをクリックし、復号化パスフレーズをとして追加します ひみつ 。 ファイルをアップロードする 汎用ファイルストレージへ Bitriseで。 Generic File Storageで、アップロードされたファイルの名前で環境変数（Env Var）をコピーします。このEnvVarは、ファイルのダウンロードURLを保存します。 に移動します ワークフロー タブ。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します ファイルの復号化 ワークフローに進みます。 Generic FileStorageからコピーしたEnvVarをに貼り付けます 暗号化されたファイルパス 入力。 の中に 出力ファイルパス 入力には、復号化されたファイルを配置するパスを指定します。後続のステップは、このパスでファイルにアクセスできるようになります。 入力値としてEnvVarを使用する 入力に直接指定する代わりに、ファイルパスをApp EnvVarに保存できます。そうすれば、他のステップでEnv Varを介してファイルを参照できるため、毎回パスを指定する必要はありません。 たとえば、パスをに保存すると BITRISEIO_MY_FILE_LOCAL_PATH Env Varは、入力のパスとして使用でき、後続のすべてのステップでファイルにアクセスするためにも使用できます。 " }, 
{ "title" : "オンラインでアーティファクトを作成する ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/オンラインでアーティファクトを作成する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ オンラインでアーティファクトを作成する ", 
"snippet" : "Bitriseでのビルドは、アーティファクトを生成する可能性があり、多くの場合、生成されます。たとえば、テストレポート、イメージ、実行可能バイナリなどです。アプリのビルドを選択した場合は、 アーティファクト タブで、ビルド中に生成されたアーティファクトを確認できます。 Bitriseでビルドすると、テストレポート、イメージ、実行可能バイナリなどのアーティファクトが生成される可能性があります。ビルド中に生成されたアーティファクトを確認するには、ビルドをクリックしてから、 アーティファクト 。 すべてのファイルタイプがサポートされており、 アーティファクト 。ファイルの種類に応じて、をクリックする...", 
"body" : "Bitriseでのビルドは、アーティファクトを生成する可能性があり、多くの場合、生成されます。たとえば、テストレポート、イメージ、実行可能バイナリなどです。アプリのビルドを選択した場合は、 アーティファクト タブで、ビルド中に生成されたアーティファクトを確認できます。 Bitriseでビルドすると、テストレポート、イメージ、実行可能バイナリなどのアーティファクトが生成される可能性があります。ビルド中に生成されたアーティファクトを確認するには、ビルドをクリックしてから、 アーティファクト 。 すべてのファイルタイプがサポートされており、 アーティファクト 。ファイルの種類に応じて、をクリックするとアーティファクトをインラインで表示できます。 目 アイコンを表示するか、ローカルコンピュータにダウンロードします。 にデプロイされるファイルの数に制限はありません アーティファクト ビルドごと。ただし、ファイルサイズには1ファイルあたり2GBの制限があります。 " }, 
{ "title" : "アーティファクトへのファイルのデプロイ ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/オンラインでアーティファクトを作成する.html#アーティファクトへのファイルのデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ オンラインでアーティファクトを作成する \/ アーティファクトへのファイルのデプロイ ", 
"snippet" : "アーティファクトはにデプロイされます アーティファクト ビルドのページのセクション Bitrise.ioにデプロイします ステップ。ビルド中に生成されたすべてのファイルをデプロイし、それらをに保存します $BITRISE_DEPLOY_DIR ディレクトリ。 アーティファクトをデプロイするには、 Bitrise.ioにデプロイします アーティファクトを生成するステップの後のステップ、または Bitrise.ioにデプロイします ステップはワークフローの最後にあります。 ステップを適切な場所に配置します 追加します Bitrise.ioにデプロイします 適切な場所に足を踏み入れてください。ビルド...", 
"body" : "アーティファクトはにデプロイされます アーティファクト ビルドのページのセクション Bitrise.ioにデプロイします ステップ。ビルド中に生成されたすべてのファイルをデプロイし、それらをに保存します $BITRISE_DEPLOY_DIR ディレクトリ。 アーティファクトをデプロイするには、 Bitrise.ioにデプロイします アーティファクトを生成するステップの後のステップ、または Bitrise.ioにデプロイします ステップはワークフローの最後にあります。 ステップを適切な場所に配置します 追加します Bitrise.ioにデプロイします 適切な場所に足を踏み入れてください。ビルド中にファイルを生成する他のステップの前にステップを挿入すると、 Bitrise.ioにデプロイします デプロイするものは何もありません。 デプロイディレクトリで見つかったサブディレクトリのコンテンツは、 アーティファクト ビルドのセクション。ただし、デフォルトを変更すると、アーティファクトをzipファイルに圧縮できます。 false の値 true の中に アーティファクトを1つのファイルに圧縮します のフィールド Bitrise.ioにデプロイします ステップ。これにより、ディレクトリ全体とそのサブディレクトリが圧縮され、次の場所に展開されます。 アーティファクト 。 " }, 
{ "title" : "ターゲットディレクトリパスの変更 ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/オンラインでアーティファクトを作成する.html#ターゲットディレクトリパスの変更", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ オンラインでアーティファクトを作成する \/ アーティファクトへのファイルのデプロイ \/ ターゲットディレクトリパスの変更 ", 
"snippet" : "ターゲットディレクトリパスを別のパスに変更できますが、ワークフローの他のステップで同じディレクトリパスを参照して、生成されたファイルが同じディレクトリに収集されるようにしてください。...", 
"body" : "ターゲットディレクトリパスを別のパスに変更できますが、ワークフローの他のステップで同じディレクトリパスを参照して、生成されたファイルが同じディレクトリに収集されるようにしてください。 " }, 
{ "title" : "ビルドが失敗した場合のアーティファクトの表示 ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/オンラインでアーティファクトを作成する.html#ビルドが失敗した場合のアーティファクトの表示", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ オンラインでアーティファクトを作成する \/ アーティファクトへのファイルのデプロイ \/ ビルドが失敗した場合のアーティファクトの表示 ", 
"snippet" : "とともに 前のステップが失敗した場合に実行 トグルを有効にすると、ビルドが失敗した場合でも、ビルドアーティファクト（正常に生成されたアーティファクトのみ）にアクセスできます。たとえば、生成されたテストレポートファイルを調べることで、失敗したビルドのバグを検出できます。...", 
"body" : "とともに 前のステップが失敗した場合に実行 トグルを有効にすると、ビルドが失敗した場合でも、ビルドアーティファクト（正常に生成されたアーティファクトのみ）にアクセスできます。たとえば、生成されたテストレポートファイルを調べることで、失敗したビルドのバグを検出できます。 " }, 
{ "title" : "ビルドアーティファクトにアクセスできるのは誰ですか？ ", 
"url" : "ビルドとパイプライン/ビルドファイルの管理/オンラインでアーティファクトを作成する.html#ビルドアーティファクトにアクセスできるのは誰ですか-", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドファイルの管理 \/ オンラインでアーティファクトを作成する \/ アーティファクトへのファイルのデプロイ \/ ビルドアーティファクトにアクセスできるのは誰ですか？ ", 
"snippet" : "の遺物 アーティファクト アプリの所有者、管理者、開発者、テスター\/ QAであるすべての人がアクセスできます。これらの役割に加えて、デフォルトの構成を維持する場合 アプリの公開ページを有効にする この機能を使用すると、URLを受け取った人は誰でも、アプリとそのアーティファクトにアクセスできるようになります。...", 
"body" : "の遺物 アーティファクト アプリの所有者、管理者、開発者、テスター\/ QAであるすべての人がアクセスできます。これらの役割に加えて、デフォルトの構成を維持する場合 アプリの公開ページを有効にする この機能を使用すると、URLを受け取った人は誰でも、アプリとそのアーティファクトにアクセスできるようになります。 " }, 
{ "title" : "環境変数 ", 
"url" : "ビルドとパイプライン/環境変数.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 環境変数 ", 
"snippet" : "環境変数（Env Var）は、ステップ入力に挿入することでビルドで使用できるデータを保持するキーと値のペアです。 環境変数 (Env Var) は、ビルドで使用できるデータを保持するキーと値のペアです。 ステップ 入力。たとえば、アプリのリポジトリの作業ディレクトリは環境変数に保存されることが多いため、それを必要とするすべてのステップ入力のパスを指定する必要はありません。 アプリ全体または特定の環境変数を構成できます ワークフロー .アプリ レベルの環境変数は、アプリのすべてのワークフローで使用できます。ワークフロー レベルの環境変数は、特定のワークフローでのみ使用できます。 環境変数リストと...", 
"body" : "環境変数（Env Var）は、ステップ入力に挿入することでビルドで使用できるデータを保持するキーと値のペアです。 環境変数 (Env Var) は、ビルドで使用できるデータを保持するキーと値のペアです。 ステップ 入力。たとえば、アプリのリポジトリの作業ディレクトリは環境変数に保存されることが多いため、それを必要とするすべてのステップ入力のパスを指定する必要はありません。 アプリ全体または特定の環境変数を構成できます ワークフロー .アプリ レベルの環境変数は、アプリのすべてのワークフローで使用できます。ワークフロー レベルの環境変数は、特定のワークフローでのみ使用できます。 環境変数リストと個々の環境変数のサイズ制限 デフォルトでは、環境変数リストのサイズは 120 KB です。これで説明されているように、スクリプト ステップを使用してリスト サイズを簡単に増やすことができます。 ナレッジ ベースの記事 . 環境変数のデフォルトのサイズ制限は 20 KB です。これに従って、スクリプトステップを使用してこの制限を増やすことができます ナレッジベースの記事 . シークレットは特定のタイプの環境変数です。シークレットは暗号化された形式で情報を非表示にし、その値はビルドログに公開されません。 機密情報を保護する シークレットとは異なり、Env Varはプルリクエストによってトリガーされるビルドで完全に公開されるため、EnvVarに機密情報を追加しないでください。 " }, 
{ "title" : "環境変数の範囲 ", 
"url" : "ビルドとパイプライン/環境変数.html#環境変数の範囲", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 環境変数 \/ 環境変数の範囲 ", 
"snippet" : "ユーザーは、3 つの異なるレベルで環境変数を宣言できます。 アプリレベル。 ワークフロー レベル。 ステップレベル。 自動的に公開される環境変数 ユーザーが宣言した環境変数に加えて、Bitrise CLI または bitrise.io によって自動的に公開される環境変数があります。これらは、どのビルドでも常に使用できます。これらのリストは次の場所にあります。 利用可能な環境変数アプリ レベルの環境変数 特定のアプリのすべてのビルドで使用できます。たとえば、新しいワークフローを作成すると、すぐに、すべてのアプリ レベルの環境変数に自動的にアクセスできるようになります。 ワークフロー レベルの環境...", 
"body" : "ユーザーは、3 つの異なるレベルで環境変数を宣言できます。 アプリレベル。 ワークフロー レベル。 ステップレベル。 自動的に公開される環境変数 ユーザーが宣言した環境変数に加えて、Bitrise CLI または bitrise.io によって自動的に公開される環境変数があります。これらは、どのビルドでも常に使用できます。これらのリストは次の場所にあります。 利用可能な環境変数アプリ レベルの環境変数 特定のアプリのすべてのビルドで使用できます。たとえば、新しいワークフローを作成すると、すぐに、すべてのアプリ レベルの環境変数に自動的にアクセスできるようになります。 ワークフロー レベルの環境変数 定義された特定のワークフローでのみ使用できます。 primary ワークフローには、キーを持つ環境変数があります TEST_ENV 、 君の deploy ワークフローはその環境変数にアクセスできません。 ワークフローの連鎖 もし、あんたが ワークフローを連鎖させる 、 after_run パラメータを設定し、ワークフローの 1 つで環境変数を定義すると、チェーン内の後続のすべてのワークフローがその環境変数にアクセスできるようになります。 ステップ レベルの環境変数 ビルドの特定のステップ内で定義されます。このような環境変数は、他のワークフローや、同じワークフロー内の前のステップでは使用できません。ただし、後続のステップはそれにアクセスできます。ステップ出力は、環境変数としても公開されます。 レベルに関係なく、ワークフロー エディターとアプリの両方で環境変数を設定できます。 bitrise.yml ファイル、またはカスタム スクリプトを使用したビルド中に、 環境人 道具： ワークフロー エディターで環境変数を設定するビルド中の環境変数の設定と管理環境変数には、そのレベルに基づいて特定の処理順序があります。 環境変数の可用性の順序" }, 
{ "title" : "環境変数の可用性の順序 ", 
"url" : "ビルドとパイプライン/環境変数.html#環境変数の可用性の順序", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 環境変数 \/ 環境変数の可用性の順序 ", 
"snippet" : "環境変数（Env Var）は、EnvVarが処理された後に使用可能になります。 BitriseCLIによって公開されたEnvVarがあります。これらは最初から利用できます：たとえば、 BITRISE_SOURCE_DIR と BITRISE_TRIGGERED_WORKFLOW_ID 。 他のすべてのEnvVarは処理され、ビルドが進むにつれて利用できるようになります。 処理順序は次のとおりです。 BitriseCLIによって公開されたEnvVars。 秘密 ：ワークフローが開始する前に処理されます。 APIを介してビルド用に指定された1回限りの環境変数。 アプリ環境変数。 ワークフロー環境変...", 
"body" : "環境変数（Env Var）は、EnvVarが処理された後に使用可能になります。 BitriseCLIによって公開されたEnvVarがあります。これらは最初から利用できます：たとえば、 BITRISE_SOURCE_DIR と BITRISE_TRIGGERED_WORKFLOW_ID 。 他のすべてのEnvVarは処理され、ビルドが進むにつれて利用できるようになります。 処理順序は次のとおりです。 BitriseCLIによって公開されたEnvVars。 秘密 ：ワークフローが開始する前に処理されます。 APIを介してビルド用に指定された1回限りの環境変数。 アプリ環境変数。 ワークフロー環境変数：指定されたワークフローの処理が開始されると、そのワークフローに指定された環境変数が使用可能になります。 ワークフローにワークフローがある場合 その前後に連鎖 、チェーンワークフローの環境変数は、ワークフローの最初のステップが実行される直前に処理され、使用可能になります。 ステップ入力：ステップが開始する直前に、ステップごとに公開されます。 ステップ出力：特定のステップによって公開されるため、ステップの終了後に後続のステップで使用できます。 " }, 
{ "title" : "ワークフロー エディターで環境変数を設定する ", 
"url" : "ビルドとパイプライン/環境変数.html#ワークフロー-エディターで環境変数を設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 環境変数 \/ ワークフロー エディターで環境変数を設定する ", 
"snippet" : "すべてのEnvVar値は文字列です 環境変数またはシークレットの値は文字列のみにすることができます。数値（たとえば7）を設定しても、文字列として渡されます。 $文字を使用する あなたは使用することができます $ Env VarまたはSecretの値（パスワードなど）に文字が含まれていますが、その場合は常に 入力の変数を置き換えますか？ 非アクティブに切り替えます。変数のキーを入力の値に置き換えると、Bitrise CLIはその値を別の環境変数として扱います。これは、 $ キャラクター。 新しい環境変数（環境変数）を設定するには： でアプリを開きます ビットライズ 。 クリック ワークフロー メ...", 
"body" : "すべてのEnvVar値は文字列です 環境変数またはシークレットの値は文字列のみにすることができます。数値（たとえば7）を設定しても、文字列として渡されます。 $文字を使用する あなたは使用することができます $ Env VarまたはSecretの値（パスワードなど）に文字が含まれていますが、その場合は常に 入力の変数を置き換えますか？ 非アクティブに切り替えます。変数のキーを入力の値に置き換えると、Bitrise CLIはその値を別の環境変数として扱います。これは、 $ キャラクター。 新しい環境変数（環境変数）を設定するには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 環境変数 タブ。 環境変数のレベルを選択します。 下にスクロールして アプリ環境変数 アプリレベルの環境変数を設定するセクション。 下にスクロールして、 ワークフロー環境変数 その特定のワークフローの環境変数を設定するセクション。 クリック 新しく追加する 選択したセクションのボタン。 EnvVarキーをに入力します 鍵 入力フィールドと値を 価値 入力フィールド。 入力の変数を置き換える すべての環境変数には is_expand プロパティ、デフォルト値は false . UI では、これは 入力の変数を置き換えますか? トグル。次の場合を除いて、有効にすることはお勧めしません。 Env Var または Secret の値は、別の Env Var または Secret です . このオプションを切り替えると、Env Varのキーの代わりに、EnvVarの値がビルドに渡されます。通常、これは必要ありません。 クリック 保存する 右上隅にあります。 それでおしまい。新しいEnvVarが保存され、使用できるようになります。 " }, 
{ "title" : "ビルド開始時にカスタムEnv変数を設定する ", 
"url" : "ビルドとパイプライン/環境変数.html#ビルド開始時にカスタムenv変数を設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 環境変数 \/ ビルド開始時にカスタムEnv変数を設定する ", 
"snippet" : "新しいビルドをスケジュールする場合、または新しいビルドを手動で開始する場合は、カスタム環境変数（Env Var）を設定するオプションがあります。これらの変数は、開始またはスケジュールしたビルドでのみ使用できます。 App EnvVarと同じキーを使用しないでください アプリの環境変数は、カスタムの環境変数よりも優先されます。つまり、App EnvVarと同じキーを使用してカスタムEnvVarを定義すると、ビルドはApp EnvVarの値を使用します。 あなたのに行きます ダッシュボード 必要なアプリを選択します。 選択する ビルドの開始\/スケジュール 。 これにより、 ビルド構成 ポップアップ...", 
"body" : "新しいビルドをスケジュールする場合、または新しいビルドを手動で開始する場合は、カスタム環境変数（Env Var）を設定するオプションがあります。これらの変数は、開始またはスケジュールしたビルドでのみ使用できます。 App EnvVarと同じキーを使用しないでください アプリの環境変数は、カスタムの環境変数よりも優先されます。つまり、App EnvVarと同じキーを使用してカスタムEnvVarを定義すると、ビルドはApp EnvVarの値を使用します。 あなたのに行きます ダッシュボード 必要なアプリを選択します。 選択する ビルドの開始\/スケジュール 。 これにより、 ビルド構成 ポップアップウィンドウ。 の中に ビルド構成 ポップアップウィンドウで、 高度 タブ。 を見つける カスタム環境変数 セクション。 キーと値を入力します。 入力の変数を置き換える すべての環境変数には is_expand プロパティ、デフォルト値は false . UI では、これは 入力の変数を置き換えますか? トグル。次の場合を除いて、有効にすることはお勧めしません。 Env Var または Secret の値は、別の Env Var または Secret です . このオプションを切り替えると、Env Varのキーの代わりに、EnvVarの値がビルドに渡されます。通常、これは必要ありません。 を押します +環境変数を追加 ボタン。 ビルドの開始またはスケジューリングを終了します。 " }, 
{ "title" : "ステップ入力でのEnv変数の使用 ", 
"url" : "ビルドとパイプライン/環境変数.html#ステップ入力でのenv変数の使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 環境変数 \/ ステップ入力でのEnv変数の使用 ", 
"snippet" : "多くの ステップ入力 環境変数（環境変数）を受け入れ、 秘密 入力値として。 敏感な入力 としてマークされた入力フィールド センシティブ シークレットのみを入力として受け入れます。通常、これらの入力の値を変更することはお勧めしません。 Env VarまたはSecretをステップ入力値として使用するには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 ワークフローからステップを選択します。たとえば、 Gitクローンリポジトリ ステップ。 ステップ入力を選択します。たとえば、 クローン作成...", 
"body" : "多くの ステップ入力 環境変数（環境変数）を受け入れ、 秘密 入力値として。 敏感な入力 としてマークされた入力フィールド センシティブ シークレットのみを入力として受け入れます。通常、これらの入力の値を変更することはお勧めしません。 Env VarまたはSecretをステップ入力値として使用するには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 ワークフローからステップを選択します。たとえば、 Gitクローンリポジトリ ステップ。 ステップ入力を選択します。たとえば、 クローン作成先（ローカル）ディレクトリパス の入力 Gitクローンリポジトリ ステップ。 入力の名前の横にあるをクリックします 変数を挿入 。 リストからEnvVarを見つけて、選択します。 キー（またはその一部）をに入力すると、EnvVarを検索できます。 キーでフィルタリング 検索フィールド。 ステップによって生成された環境変数 環境変数のインタラクティブリストには、ワークフローの前のステップで生成された環境変数が表示されます。たとえば、ワークフローの3番目のステップの入力の1つに環境変数を挿入する場合は、最初と2番目のステップで生成された環境変数から選択できます。 それでおしまい。次にそのワークフローのビルドを実行するとき、ステップ入力は挿入されたEnv変数の値をステップ入力値として使用します。 " }, 
{ "title" : "EnvVarの値でのEnvVarの使用 ", 
"url" : "ビルドとパイプライン/環境変数.html#envvarの値でのenvvarの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 環境変数 \/ EnvVarの値でのEnvVarの使用 ", 
"snippet" : "環境変数（Env Var）には通常、単純な文字列値が含まれています。ただし、他のEnvVarを値として含むEnvVarを設定することは可能です。 変数値としての秘密 ここで説明する方法は、 秘密 。 EnvVar内にシークレットを埋め込むこともできます。 いつでも、Env Varの値に別の環境変数を使用できます。いわば、EnvVarを埋め込みます。たとえば、の値を設定するとします。 $BITRISE_AUTH Env Var to $PERSONAL_ACCESS_TOKEN これは別のEnv変数です。 これを行うには、次のキーを確認する必要があります $BITRISE_AUTH ワークフロー...", 
"body" : "環境変数（Env Var）には通常、単純な文字列値が含まれています。ただし、他のEnvVarを値として含むEnvVarを設定することは可能です。 変数値としての秘密 ここで説明する方法は、 秘密 。 EnvVar内にシークレットを埋め込むこともできます。 いつでも、Env Varの値に別の環境変数を使用できます。いわば、EnvVarを埋め込みます。たとえば、の値を設定するとします。 $BITRISE_AUTH Env Var to $PERSONAL_ACCESS_TOKEN これは別のEnv変数です。 これを行うには、次のキーを確認する必要があります $BITRISE_AUTH ワークフローとステップに渡される埋め込みEnv変数になるように、その値に置き換えられます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 環境変数 タブ。 必要なEnvVarのキーの下で、 入力の変数を置き換えますか？ アクティブに切り替えます。 " }, 
{ "title" : "ビルド中の環境変数の設定と管理 ", 
"url" : "ビルドとパイプライン/環境変数.html#ビルド中の環境変数の設定と管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 環境変数 \/ ビルド中の環境変数の設定と管理 ", 
"snippet" : "ステップで環境変数を定義することにより、ビルド中に環境変数を設定できます。 脚本 ステップ。これを行うには、 環境人 道具。 新しい環境変数は次のステップから有効になります で作成する環境変数 envman ツールは、ワークフローの後続のステップからのみ有効になります。つまり、新しく作成された環境変数を、それが作成された同じステップで使用することはできません。 これは、私たちが使用している簡単な例です envman キーで新しい環境変数を追加するには MY_RELEASE_NOTE : envman add --key MY_RELEASE_NOTE --value \"This is the ...", 
"body" : "ステップで環境変数を定義することにより、ビルド中に環境変数を設定できます。 脚本 ステップ。これを行うには、 環境人 道具。 新しい環境変数は次のステップから有効になります で作成する環境変数 envman ツールは、ワークフローの後続のステップからのみ有効になります。つまり、新しく作成された環境変数を、それが作成された同じステップで使用することはできません。 これは、私たちが使用している簡単な例です envman キーで新しい環境変数を追加するには MY_RELEASE_NOTE : envman add --key MY_RELEASE_NOTE --value \"This is the release note\" あなたは呼び出すことができます envman を含む任意のステップで 脚本 ステップ、または独自のスクリプト (リポジトリに保存されている) で呼び出す場合は、 bitrise 建てる。 値を次のように指定できます --value パラメータ、またはパイプを使用して： echo 'hi' | envman add --key MY_RELEASE_NOTE ファイルから値を読み取ることもできます。 envman add --key MY_RELEASE_NOTE --valuefile .\/some\/file\/path Env Varが公開されると、他のEnvVarと同じように使用できます。これらの公開されたEnv変数は、他のステップの入力でも使用できます。 これは、リリース ノートの環境変数を公開し、それを別の環境変数で使用する例です。 脚本 ステップイン Slack メッセージを送信する ステップ： workflows:\n example:\n steps:\n - script:\n inputs:\n - content: |\n #!\/bin\/bash\n envman add --key MY_RELEASE_NOTE --value \"This is the release note\"\n - script:\n inputs:\n - content: |\n #!\/bin\/bash\n echo \"My Release Note: $MY_RELEASE_NOTE\"\n - slack:\n inputs:\n - channel: ...\n - webhook_url: ...\n - message: \"Release Note: $MY_RELEASE_NOTE\" 別のEnvVarのキーを介してアクセスできるようにEnvVarの値を公開する場合は、そうすることができます。 たとえば、の値を公開するには BITRISE_BUILD_NUMBER キーの下 MY_BUILD_NUMBER ：  envman add --key MY_BUILD_NUMBER --value \"${BITRISE_BUILD_NUMBER}\" この後、後続のステップはの値を取得できます BITRISE_BUILD_NUMBER から MY_BUILD_NUMBER 環境変数の値を変更した場合 BITRISE_BUILD_NUMBER この後、の値 MY_BUILD_NUMBER 変更されることはなく、元の値を保持します。 カスタムEnvVarが定義されているかどうかを知る必要がある場合は、簡単に確認でき、値を上書きすることもできます。 #!\/bin\/bash\nset -ex\nif [ ! -z \"$API_PROJECT_SCHEME\" ] ; then\n envman add --key PROJECT_SCHEME --value \"$API_PROJECT_SCHEME\"\nfi このスクリプトは、 API_PROJECT_SCHEME Env Varが定義されており、定義されている場合、その値はに割り当てられます。 PROJECT_SCHEME 環境変数、の元の値を上書きします PROJECT_SCHEME 。 " }, 
{ "title" : "bitrise.yml で環境変数を設定する ", 
"url" : "ビルドとパイプライン/環境変数.html#bitrise-yml-で環境変数を設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 環境変数 \/ bitrise.yml で環境変数を設定する ", 
"snippet" : "環境変数を直接設定できます bitrise.yml アプリの構成ファイル。アプリの構成ファイルで、アプリ レベルとワークフロー レベルの両方の環境変数を設定できます。 この例では、アプリレベルの Env Var を持つ構成があります。 TEST_KEY : app: envs: - opts: is_expand: false TEST_KEY: test value 入力の変数を置き換える すべての環境変数には is_expand プロパティ、デフォルト値は false . UI では、これは 入力の変数を置き換えますか? トグル。次の場合を除いて、有効にすることはお勧めしません。 Env ...", 
"body" : "環境変数を直接設定できます bitrise.yml アプリの構成ファイル。アプリの構成ファイルで、アプリ レベルとワークフロー レベルの両方の環境変数を設定できます。 この例では、アプリレベルの Env Var を持つ構成があります。 TEST_KEY : app: \n envs: \n - opts: \n is_expand: false \n TEST_KEY: test value 入力の変数を置き換える すべての環境変数には is_expand プロパティ、デフォルト値は false . UI では、これは 入力の変数を置き換えますか? トグル。次の場合を除いて、有効にすることはお勧めしません。 Env Var または Secret の値は、別の Env Var または Secret です . このオプションを切り替えると、Env Varのキーの代わりに、EnvVarの値がビルドに渡されます。通常、これは必要ありません。 この例では、 deploy-alpha ワークフローは、と呼ばれる環境変数を定義します ENV_TYPE を実行し、その環境変数を使用できる別のワークフローを実行します。 workflows:\n\n deploy-alpha:\n envs:\n - ENV_TYPE: alpha\n after_run:\n - _deploy\n\n _deploy:\n steps:\n - script:\n inputs:\n - content: |\n #!\/bin\/bash\n echo \"ENV_TYPE: $ENV_TYPE\" あなたが実行する場合 deploy-alpha ワークフロー、それは設定します ENV_TYPE Env Var to alpha 、それからそれは実行されます deploy そのEnv変数を使用できるワークフロー。この例では、単にその値を出力します（印刷されるテキストは次のようになります： ENV_TYPE: alpha ）。 " }, 
{ "title" : "秘密 ", 
"url" : "ビルドとパイプライン/秘密.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 秘密 ", 
"snippet" : "シークレットは特定のタイプの環境変数です。それらはbitrise.ymlに表示されず、その値はビルドログに公開されません。 シークレットは特定のタイプの環境変数です。シークレットは暗号化された形式で情報を非表示にし、その値はビルドログに公開されません。それらはに表示されません bitrise.yml 構成のいずれか。パスワードやAPIキーなどの機密情報をシークレットとして保存できます。 環境変数と同様に、シークレットはステップ入力の値として使用できます。 ステップ入力でのEnv変数の使用敏感な入力 としてマークされた入力フィールド センシティブ シークレットのみを入力として受け入れます。通常、...", 
"body" : "シークレットは特定のタイプの環境変数です。それらはbitrise.ymlに表示されず、その値はビルドログに公開されません。 シークレットは特定のタイプの環境変数です。シークレットは暗号化された形式で情報を非表示にし、その値はビルドログに公開されません。それらはに表示されません bitrise.yml 構成のいずれか。パスワードやAPIキーなどの機密情報をシークレットとして保存できます。 環境変数と同様に、シークレットはステップ入力の値として使用できます。 ステップ入力でのEnv変数の使用敏感な入力 としてマークされた入力フィールド センシティブ シークレットのみを入力として受け入れます。通常、これらの入力の値を変更することはお勧めしません。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "秘密を設定する ", 
"url" : "ビルドとパイプライン/秘密.html#秘密を設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 秘密 \/ 秘密を設定する ", 
"snippet" : "すべてのEnvVar値は文字列です 環境変数またはシークレットの値は文字列のみにすることができます。数値（たとえば7）を設定しても、文字列として渡されます。 $文字を使用する あなたは使用することができます $ Env VarまたはSecretの値（パスワードなど）に文字が含まれていますが、その場合は常に 入力の変数を置き換えますか？ 非アクティブに切り替えます。変数のキーを入力の値に置き換えると、Bitrise CLIはその値を別の環境変数として扱います。これは、 $ キャラクター。 ワークフローエディタのグラフィカルUIで新しいシークレットを作成する方法は2つあります。最初の手順では、[シ...", 
"body" : "すべてのEnvVar値は文字列です 環境変数またはシークレットの値は文字列のみにすることができます。数値（たとえば7）を設定しても、文字列として渡されます。 $文字を使用する あなたは使用することができます $ Env VarまたはSecretの値（パスワードなど）に文字が含まれていますが、その場合は常に 入力の変数を置き換えますか？ 非アクティブに切り替えます。変数のキーを入力の値に置き換えると、Bitrise CLIはその値を別の環境変数として扱います。これは、 $ キャラクター。 ワークフローエディタのグラフィカルUIで新しいシークレットを作成する方法は2つあります。最初の手順では、[シークレット]タブを使用しています。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 秘密 タブ。 クリック 新しく追加する ボタン。 EnvVarキーをに入力します 鍵 入力フィールドと値を 価値 入力フィールド。 リクエストをプルするためのシークレットの公開 値の下に、 プルリクエストを公開しますか？ トグル。デフォルトでは、シークレットはプルリクエストに公開されていません。しないことを強くお勧めします シークレットをプルリクエストに公開する ほとんどの場合。 入力の変数を置き換える すべての環境変数には is_expand プロパティ、デフォルト値は false . UI では、これは 入力の変数を置き換えますか? トグル。次の場合を除いて、有効にすることはお勧めしません。 Env Var または Secret の値は、別の Env Var または Secret です . このオプションを切り替えると、Env Varのキーの代わりに、EnvVarの値がビルドに渡されます。通常、これは必要ありません。 シークレットの下の右側で、 保存する ボタン。 もう1つの方法は、ステップ入力値を変更するときにシークレットを作成することです。これは、ステップ入力が次のようにマークされている場合にのみ実行できます。 センシティブ 。機密性の高い入力はシークレットのみを受け入れるため、リストから既存のシークレットを選択するか、新しいシークレットを作成できます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 ワークフローを選択し、構成するステップを見つけます。 変更する機密入力を見つけます。 入力フィールドをクリックします。 下 新しいシークレット環境変数を作成する ラベルを付けて、新しいシークレットのキーと値を指定します。 リクエストをプルするためのシークレットの公開 値の下に、 プルリクエストを公開しますか？ トグル。デフォルトでは、シークレットはプルリクエストに公開されていません。しないことを強くお勧めします シークレットをプルリクエストに公開する ほとんどの場合。 入力の変数を置き換える すべての環境変数には is_expand プロパティ、デフォルト値は false . UI では、これは 入力の変数を置き換えますか? トグル。次の場合を除いて、有効にすることはお勧めしません。 Env Var または Secret の値は、別の Env Var または Secret です . このオプションを切り替えると、Env Varのキーの代わりに、EnvVarの値がビルドに渡されます。通常、これは必要ありません。 クリック 新しく追加する ボタン。 " }, 
{ "title" : "既存のシークレットの編集 ", 
"url" : "ビルドとパイプライン/秘密.html#既存のシークレットの編集", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 秘密 \/ 既存のシークレットの編集 ", 
"snippet" : "新しいシークレットEnvVarを追加したら 秘密 タブをクリックすると、いつでも戻ってきたり、コンテンツを変更したり、好奇心旺盛な目から保護したりできます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 秘密 タブ。 クリック 編集 あなたの秘密の価値の隣。 必要に応じてコンテンツを変更します。 シークレットの下の右側で、 保存する ボタン。...", 
"body" : "新しいシークレットEnvVarを追加したら 秘密 タブをクリックすると、いつでも戻ってきたり、コンテンツを変更したり、好奇心旺盛な目から保護したりできます。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 秘密 タブ。 クリック 編集 あなたの秘密の価値の隣。 必要に応じてコンテンツを変更します。 シークレットの下の右側で、 保存する ボタン。 " }, 
{ "title" : "秘密の価値を守る ", 
"url" : "ビルドとパイプライン/秘密.html#秘密の価値を守る", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 秘密 \/ 秘密の価値を守る ", 
"snippet" : "通常、あなたはすることができます 見せる と 隠れる をクリックしてシークレットの値 目 アイコン。この機能は、秘密のenv変数のリストが長い場合に便利です。 秘密 そして、他の値を非表示にしたまま、1つのシークレットの値のみをチェックしたいとします。値が非表示の場合、その値は 消した目 アイコン。 ただし、シークレットを保護することで、シークレットの値を永続的に非表示にすることができます。そうすると、自分自身を含め、誰も値を変更したり、値を再度表示したりすることができなくなります。 シークレットの保護は元に戻せません シークレットを保護することは元に戻せません。値を変更する必要がある場合は、...", 
"body" : "通常、あなたはすることができます 見せる と 隠れる をクリックしてシークレットの値 目 アイコン。この機能は、秘密のenv変数のリストが長い場合に便利です。 秘密 そして、他の値を非表示にしたまま、1つのシークレットの値のみをチェックしたいとします。値が非表示の場合、その値は 消した目 アイコン。 ただし、シークレットを保護することで、シークレットの値を永続的に非表示にすることができます。そうすると、自分自身を含め、誰も値を変更したり、値を再度表示したりすることができなくなります。 シークレットの保護は元に戻せません シークレットを保護することは元に戻せません。値を変更する必要がある場合は、シークレットを削除して新しいシークレットを作成する必要があります。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 秘密 タブ。 クリック 編集 あなたの秘密の価値の隣。 クリック 保護する 。 ポップアップウィンドウは、プロセスが元に戻せないことを警告します。クリック 保護する 。 それでおしまい。シークレットの価値を表示することはできなくなりました。 " }, 
{ "title" : "リクエストをプルするためのシークレットの公開 ", 
"url" : "ビルドとパイプライン/秘密.html#リクエストをプルするためのシークレットの公開", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 秘密 \/ リクエストをプルするためのシークレットの公開 ", 
"snippet" : "デフォルトでは、プルリクエストはシークレットの値にアクセスできません。これは、リポジトリのフォークから開かれたプルリクエストがビルドをトリガーした場合、そのビルドはアプリのシークレットを使用できないことを意味します。 プルリクエストビルドに特定のシークレットへのアクセスを許可する必要がある場合は、そのシークレットをプルリクエストに公開できます。ただし、公開されている場合でも、その値はログに表示されません。[編集済み]として表示されます。 保護された秘密は公開できません 秘密がされたら 保護された 、プルリクエストビルドに公開することはできません。 公開アプリ アプリが公開アプリの場合、アプリの...", 
"body" : "デフォルトでは、プルリクエストはシークレットの値にアクセスできません。これは、リポジトリのフォークから開かれたプルリクエストがビルドをトリガーした場合、そのビルドはアプリのシークレットを使用できないことを意味します。 プルリクエストビルドに特定のシークレットへのアクセスを許可する必要がある場合は、そのシークレットをプルリクエストに公開できます。ただし、公開されている場合でも、その値はログに表示されません。[編集済み]として表示されます。 保護された秘密は公開できません 秘密がされたら 保護された 、プルリクエストビルドに公開することはできません。 公開アプリ アプリが公開アプリの場合、アプリのシークレットをプルリクエストビルドに公開することはできません。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 秘密 タブ。 クリック 編集 あなたの秘密の価値の隣。 トグル プルリクエストを公開しますか？ トグル。 シークレットが公開されると、プルリクエストビルドがシークレットにアクセスできるようになります。 " }, 
{ "title" : "中央の場所からの秘密の管理 ", 
"url" : "ビルドとパイプライン/秘密.html#中央の場所からの秘密の管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 秘密 \/ 中央の場所からの秘密の管理 ", 
"snippet" : "デフォルトでは、すべてのシークレットはアプリレベルで処理されます。対応する値がアプリごとに異なる場合でも、複数のBitriseアプリでシークレットキーを再利用できます。 ただし、すべてのアプリに同じ値を保持するシークレットを設定し、そのシークレットを1つの場所から管理することは可能です。たとえば、すべてのアプリが同じAPIにアクセスする必要がある場合、APIキーを含むシークレットを中央の場所に保存することは理にかなっています。 APIキーが変更された場合は、その1つの場所で変更するだけで、変更はすべてのBitriseアプリに適用されます。 このようなシークレット（または複数のシークレット）を設...", 
"body" : "デフォルトでは、すべてのシークレットはアプリレベルで処理されます。対応する値がアプリごとに異なる場合でも、複数のBitriseアプリでシークレットキーを再利用できます。 ただし、すべてのアプリに同じ値を保持するシークレットを設定し、そのシークレットを1つの場所から管理することは可能です。たとえば、すべてのアプリが同じAPIにアクセスする必要がある場合、APIキーを含むシークレットを中央の場所に保存することは理にかなっています。 APIキーが変更された場合は、その1つの場所で変更するだけで、変更はすべてのBitriseアプリに適用されます。 このようなシークレット（または複数のシークレット）を設定するには、次の2つのことが必要です。 シークレットを保存するための中央のボールトまたはデータベース（HashiCorpやDopplerなど）。 CLI経由でアクセスできる必要があります。 NS 脚本 中央のボールト\/データベースにアクセスする手順を実行し、シークレットをプルして、Bitriseで機密に設定します。 新しいシークレットを作成し、ビルド中に中央の場所に保存するには： シークレットを保存するボールトまたはデータベースに、キーと値のペアとして追加します。 追加する 脚本 シークレットを使用するすべてのワークフローに進みます。 ボールトにアクセスしてシークレットをプルするために必要なコマンドを追加します。正確なコマンドは、使用しているサービスによって異なります。 使用 envman シークレットを機密としてマークするツール。 envmanツールの構文は次のとおりです。 envman add --key KEY --value value --sensitive 。 ステップでビルドログにシークレットの値が表示されていないことを確認してください。これを行うには、削除します set -x ステップから content 。 秘密の編集 シークレットの編集をオフにしている場合、シークレットは編集されないため、その値は引き続きログに表示されることに注意してください。 HashiCorpVaultに秘密を保存する あなたが持っているとしましょう HashiCorp Vault と呼ばれるインスタンス secret\/hello 。このボールトインスタンスには2つのシークレットがあります。 foo 値で world と foo2 値で world2 。 Bitriseビルドでこれらのシークレットを使用するには、次のことを行う必要があります。 Vaultインスタンスからそれらをエクスポートします。 それらを繰り返し処理し、両方を機密としてマークします。 このスクリプトを使用して、次の両方を実現できます。 # Exporting the Secrets\nvault kv get --format=json secret\/hello | jq -r '.data.data | to_entries[] | [.key, .value] | @tsv' | \n# Iterating over the Secrets and marking them as sensitive\nwhile IFS=$'\\t' read -r key value; do\n envman add --key \"$key\" --value \"$value\" --sensitive\ndone " }, 
{ "title" : "秘密の編集 ", 
"url" : "ビルドとパイプライン/秘密.html#秘密の編集", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 秘密 \/ 秘密の編集 ", 
"snippet" : "Bitrise CLIは、Secret EnvVarsを自動的に編集して印刷します [REDACTED] キーの後に改行を入れて、ビルドログにシークレット環境変数が表示されないようにします。これは、プライベートアプリとパブリックアプリの両方に適用されます。 シークレットをログに表示する必要がある場合でも、いつでもこれをオフにすることができます。 これは潜在的なセキュリティリスクです。シークレット編集をオフにしないことを強くお勧めします。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 秘密 タブ。 クリック 新しく追加する 登録するには BI...", 
"body" : "Bitrise CLIは、Secret EnvVarsを自動的に編集して印刷します [REDACTED] キーの後に改行を入れて、ビルドログにシークレット環境変数が表示されないようにします。これは、プライベートアプリとパブリックアプリの両方に適用されます。 シークレットをログに表示する必要がある場合でも、いつでもこれをオフにすることができます。 これは潜在的なセキュリティリスクです。シークレット編集をオフにしないことを強くお勧めします。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します 秘密 タブ。 クリック 新しく追加する 登録するには BITRISE_SECRET_FILTERING 偽の値を持つ秘密の環境変数。 クリック 保存する 右上隅にあります。 " }, 
{ "title" : "ビルドステータス ", 
"url" : "ビルドとパイプライン/ビルドステータス.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドステータス ", 
"snippet" : "[ビルド]ページでは、すべてのビルドの現在のステータスを追跡できます。ビルドステータスには、保留、開始、実行中、中止、失敗、成功の6つがあります。 に ビルド ページでは、すべてのビルドの現在のステータスを追跡できます。 6つの異なるビルドステータスがあります。 保留 ：プランの同時実行制限で許可されているよりも多くのビルドが開始されています。私たちをチェックしてください 価格ページ 詳細については。 労働者を待っています ：ビルドがトリガーされると、Bitriseはそれを実行するための仮想マシンを作成します。コンピューティングリソースがすぐに利用できない場合、ビルドはキューに入れられ、 労働...", 
"body" : "[ビルド]ページでは、すべてのビルドの現在のステータスを追跡できます。ビルドステータスには、保留、開始、実行中、中止、失敗、成功の6つがあります。 に ビルド ページでは、すべてのビルドの現在のステータスを追跡できます。 6つの異なるビルドステータスがあります。 保留 ：プランの同時実行制限で許可されているよりも多くのビルドが開始されています。私たちをチェックしてください 価格ページ 詳細については。 労働者を待っています ：ビルドがトリガーされると、Bitriseはそれを実行するための仮想マシンを作成します。コンピューティングリソースがすぐに利用できない場合、ビルドはキューに入れられ、 労働者を待っています ステータスが表示されます。 ランニング ：仮想マシンの準備が整うと、ビルドの実行が開始されます。これは、Bitriseがワークフローで定義されたすべてのステップを実行していることを意味します。 中止 ：ビルドは、ユーザーが手動で中止することも、ユーザーが自動的に中止することもできます。 ローリングビルド機能 または、ビルド時間がなくなったためです。 成功して中止 Aborted with successと呼ばれる特定のステータスがあります。これは、ビルドがAPIによって中止されたが、gitホスティングプロバイダーに成功として報告されたことを意味します。 使用 abort_with_success パラメータ付き ビルドを中止するためのBitriseAPI呼び出し しかし、それでも成功したものとして数えます。 失敗した ：ほとんどの場合、いずれかのステップが失敗するとビルドは失敗します。次のような例外があります キャッシング手順 、 そして、次のことができます ステップをスキップ可能としてマークする つまり、失敗してもビルドは実行され続けます。 成功 ：Bitriseがスキップ可能としてマークされていないすべてのステップを正常に実行した場合、ビルドは成功としてマークされます。 ビルドステータスはいつでも確認できます ビルド アプリのページ、およびステータスレポートを送信できます： ビルドステータスをGitホスティングプロバイダーに報告する" }, 
{ "title" : "ビルド中のツールのインストール ", 
"url" : "ビルドとパイプライン/ビルド中のツールのインストール.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド中のツールのインストール ", 
"snippet" : "ビルドマシンにプリインストールされていないツールが必要で、そのためのステップが見つからない場合は、いつでもインストールして、スクリプトまたはスクリプトステップで使用できます。 そうでないツールが必要な場合 ビルドマシンにプリインストールされています ステップが見つからない場合は、いつでもインストールしてスクリプトで使用できます。 脚本 ステップ。追加する Script ワークフローに進み、そこにスクリプトを作成するか、リポジトリからスクリプトを実行します。パスワードなし sudo すべてのビルド仮想マシンで有効になっているため、自由に使用できます sudo あなたがそれを必要とするならば。 動...", 
"body" : "ビルドマシンにプリインストールされていないツールが必要で、そのためのステップが見つからない場合は、いつでもインストールして、スクリプトまたはスクリプトステップで使用できます。 そうでないツールが必要な場合 ビルドマシンにプリインストールされています ステップが見つからない場合は、いつでもインストールしてスクリプトで使用できます。 脚本 ステップ。追加する Script ワークフローに進み、そこにスクリプトを作成するか、リポジトリからスクリプトを実行します。パスワードなし sudo すべてのビルド仮想マシンで有効になっているため、自由に使用できます sudo あなたがそれを必要とするならば。 動作するスクリプトができたら、 ステップに変換することもできます オプションで他の人と共有します（StepLibを介して）。続きを読む： 新しいステップの開発でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 クリック + 私たちからその位置にステップを挿入するためのサイン ステップライブラリ 。 の中に Search steps バーで「スクリプト」を検索し、 Script ステップ 。これにより、ワークフローにステップが追加されます。 ワークフローのステップをクリックします。 スクリプトをに挿入します Script content 入力フィールド。 リポジトリからスクリプトを実行する リポジトリからスクリプトを実行する場合は、これから実行できます Script ステップ。パスはリポジトリのルートからの相対パスです。たとえば、 Bashスクリプト で path\/to\/script.sh あなたはそれをに追加することができます Script content フィールドを入力し、次のコマンドで実行します。 #!\/bin\/bash\nset -ex\nbash .\/path\/to\/script.sh Bash以外のスクリプトも実行できます。たとえば、 Rubyスクリプト ： #!\/bin\/bash\nset -ex\nruby .\/path\/to\/script.rb macOSにcmakeをインストールする インストール cmake とともに Script 次の方法でmacOSを踏む brew 指図： #!\/bin\/bash\nset -ex\nbrew install cmake Homebrewインストール また、使用することができます Homebrewインストール インストールする手順 cmake および他の多くのツール。 Linuxにcmakeをインストールする インストール cmake とともに Script 次の方法でLinuxをステップします apt-get 指図： #!\/bin\/bash\nset -ex\nsudo apt-get install -y cmake apt-getには-yフラグを使用します 追加しない場合 -y （はい）へのフラグ apt-get 指図、 apt-get 手動で受け入れるか拒否する必要があるプロンプトが表示されます。これはご使用のLinuxマシンでは問題になりませんが、CI環境では手動入力を提供できません。 apt-get 。この問題を防ぎ、プロンプトを自動的に受け入れるには、 -y 例に示すように、フラグ。 npmコマンドを実行します また、使用することができます npmコマンドを実行します インストールする手順 cmake および他の多くのツール。 " }, 
{ "title" : "bitrise.ymlファイルでdepsを宣言してツールをインストールする ", 
"url" : "ビルドとパイプライン/ビルド中のツールのインストール.html#bitrise-ymlファイルでdepsを宣言してツールをインストールする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド中のツールのインストール \/ bitrise.ymlファイルでdepsを宣言してツールをインストールする ", 
"snippet" : "依存関係インストーラーを使用して依存関係またはツールをインストールする代わりにステップまたは Script ステップ、あなたも使用することができます deps のオプション bitrise.yml 。あなたが宣言した場合 deps 特定のステップについては、 Bitrise CLI そのツールがインストールされているかどうかを確認し、必要に応じてインストールします。 選択したツールまたは依存関係がすでに使用可能な場合、BitriseCLIはそれをインストールしません。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します bitrise.yml タ...", 
"body" : "依存関係インストーラーを使用して依存関係またはツールをインストールする代わりにステップまたは Script ステップ、あなたも使用することができます deps のオプション bitrise.yml 。あなたが宣言した場合 deps 特定のステップについては、 Bitrise CLI そのツールがインストールされているかどうかを確認し、必要に応じてインストールします。 選択したツールまたは依存関係がすでに使用可能な場合、BitriseCLIはそれをインストールしません。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動します bitrise.yml タブ。 必要なステップを見つけます。そのステップの依存関係を宣言します。 追加 deps ステップタイトルの下： workflows:\n test:\n steps:\n - script:\n deps: パッケージマネージャー名とパッケージ名を宣言します。 workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n - name: cmake\n apt_get:\n - name: cmake バイナリ名の宣言 （パッケージマネージャーを介さずに）別のソースから利用できる可能性のある依存関係を宣言する場合は、関連するものも宣言する必要があります。 binary name 。パッケージがバイナリ名と一致しない場合は、次のように宣言できます。 bin_name 。例はAWSCLIで、両方のパッケージマネージャーのパッケージ名は awscli 、しかしバイナリ自体は aws 。 workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n - name: awscli\n bin_name: aws " }, 
{ "title" : "ビルド中にVPNに接続する ", 
"url" : "ビルドとパイプライン/ビルド中にvpnに接続する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド中にVPNに接続する ", 
"snippet" : "ビルド中にVPNに接続するには、OpenVPNサーバーのセットアップなどのVPN接続を確立するステップがあることを確認してください。 サーバーに接続できるようにするには、ビルドにVPN接続が必要になる場合があります。 git clone リポジトリまたはプライベートAPIにアクセスします。 VPNに接続するには、次のことを行う必要があります。 ローカルネットワークのアドレス空間がと衝突しないことを確認してください Bitrise仮想マシンのアドレス空間 これはVPNでエラーを引き起こす可能性があるためです。 必要なVPNコンポーネントをインストールして構成します。 VPNに接続します。 もちろ...", 
"body" : "ビルド中にVPNに接続するには、OpenVPNサーバーのセットアップなどのVPN接続を確立するステップがあることを確認してください。 サーバーに接続できるようにするには、ビルドにVPN接続が必要になる場合があります。 git clone リポジトリまたはプライベートAPIにアクセスします。 VPNに接続するには、次のことを行う必要があります。 ローカルネットワークのアドレス空間がと衝突しないことを確認してください Bitrise仮想マシンのアドレス空間 これはVPNでエラーを引き起こす可能性があるためです。 必要なVPNコンポーネントをインストールして構成します。 VPNに接続します。 もちろん、VPN接続を使用する前に、ワークフローのどこにでもVPNを構成して接続できます。たとえば、リポジトリにアクセスするためにVPN接続が必要な場合は、 Gitクローン ステップ。 SSHセッション VPNツールを選択してセットアップ\/構成を行うときは、既存のSSHセッションを再起動したり中止したりしないように注意する必要があります。 NS bitrise.io ビルドのコントロール\/マスターマシンとビルド仮想マシン間のSSH接続が終了すると、ワーカーはビルドを中止します。 ワークフロー デフォルトのワークフロー ビルドアーティファクトの管理 " }, 
{ "title" : "VPN経由でリポジトリにアクセスする ", 
"url" : "ビルドとパイプライン/ビルド中にvpnに接続する.html#vpn経由でリポジトリにアクセスする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド中にVPNに接続する \/ VPN経由でリポジトリにアクセスする ", 
"snippet" : "アプリケーションのリポジトリにVPN経由でのみアクセスできる場合は、何よりも注意すべき点が2つあります。 ビルド中は、リポジトリを仮想マシンに複製する前にVPN接続を確立する必要があります。実際には、これは、接続を確立するステップを、 Gitクローン ワークフローにステップインします。 新しいアプリを追加するときは、回避策が必要です。アプリの追加プロセス中にVPNなしでアクセスできるダミーリポジトリを使用します。 この回避策を実行してみましょう！ VPN接続なしでアクセスできる空のリポジトリを作成します。 このリポジトリをソースとして使用して、新しいアプリを追加します。プライベートアプリである...", 
"body" : "アプリケーションのリポジトリにVPN経由でのみアクセスできる場合は、何よりも注意すべき点が2つあります。 ビルド中は、リポジトリを仮想マシンに複製する前にVPN接続を確立する必要があります。実際には、これは、接続を確立するステップを、 Gitクローン ワークフローにステップインします。 新しいアプリを追加するときは、回避策が必要です。アプリの追加プロセス中にVPNなしでアクセスできるダミーリポジトリを使用します。 この回避策を実行してみましょう！ VPN接続なしでアクセスできる空のリポジトリを作成します。 このリポジトリをソースとして使用して、新しいアプリを追加します。プライベートアプリであることを確認してください！ Webhookを登録する必要はありません。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 全般的 。 完了したら、に移動します 設定 アプリのタブ。 ポップアップウィンドウで、新しいリポジトリのURLを貼り付けます。 クリック 変更内容を保存 。 ワークフロー内のリポジトリにアクセスする必要があるステップの前に、VPN接続を確立する1つまたは複数のステップを配置します。 これで完了です。 VPN接続を確立するさまざまな方法については、構成例をご覧ください。 " }, 
{ "title" : "VPN構成の例 ", 
"url" : "ビルドとパイプライン/ビルド中にvpnに接続する.html#vpn構成の例", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド中にVPNに接続する \/ VPN構成の例 ", 
"snippet" : "このセクションでは、ビルド中にVPNに接続するための3つの構成例を示します。 OpenVPNサーバーの使用 。 StrongswanVPNの使用 。 CiscoVPNの使用 。...", 
"body" : "このセクションでは、ビルド中にVPNに接続するための3つの構成例を示します。 OpenVPNサーバーの使用 。 StrongswanVPNの使用 。 CiscoVPNの使用 。 " }, 
{ "title" : "OpenVPNサーバーへの接続手順の使用 ", 
"url" : "ビルドとパイプライン/ビルド中にvpnに接続する.html#openvpnサーバーへの接続手順の使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド中にVPNに接続する \/ VPN構成の例 \/ OpenVPNサーバーへの接続手順の使用 ", 
"snippet" : "を使用するには OpenVPNサーバーに接続します ステップでは、事前にOpenVPNサーバーを構築してから、証明書ファイルと秘密鍵をエンコードする必要があります。 OpenVPNサーバーをセットアップする 。 Base64で以下をエンコードします。 CA証明書 クライアント証明書 クライアントの秘密鍵 次のコマンドを使用して、ファイルをbase64エンコードできます。 $ base64 <filepath> Bitriseでアプリを開き、 ワークフロー タブ。 エンコードされた証明書とキーを次のように登録します 秘密 。 次のキーはVPNステップのデフォルト入力であるため、使用することをお勧...", 
"body" : "を使用するには OpenVPNサーバーに接続します ステップでは、事前にOpenVPNサーバーを構築してから、証明書ファイルと秘密鍵をエンコードする必要があります。 OpenVPNサーバーをセットアップする 。 Base64で以下をエンコードします。 CA証明書 クライアント証明書 クライアントの秘密鍵 次のコマンドを使用して、ファイルをbase64エンコードできます。 $ base64 <filepath> Bitriseでアプリを開き、 ワークフロー タブ。 エンコードされた証明書とキーを次のように登録します 秘密 。 次のキーはVPNステップのデフォルト入力であるため、使用することをお勧めします。 CA証明書： $VPN_CA_CRT_BASE64 クライアント証明書： $VPN_CLIENT_CRT_BASE64 秘密鍵： VPN_CLIENT_KEY_BASE64 追加します OpenVPNサーバーに接続します ワークフローに進みます。 VPN接続が必要になる可能性のあるステップの前にステップを追加します。 以前に作成したシークレットをそれぞれの入力に追加します。 Base64でエンコードされたCA証明書 Base64でエンコードされたクライアント証明書 Base64でエンコードされたクライアント秘密鍵 推奨キーを使用してシークレットを作成した場合は、入力を変更する必要はありません。 その他の必要な入力を入力します。 ホスト ：OpenVPNサーバーのIPまたはホスト名 港 ：OpenVPNサーバーのポート番号 プロトコル ：OpenVPNサーバープロトコル " }, 
{ "title" : "StrongswanVPNの使用 ", 
"url" : "ビルドとパイプライン/ビルド中にvpnに接続する.html#strongswanvpnの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド中にVPNに接続する \/ VPN構成の例 \/ StrongswanVPNの使用 ", 
"snippet" : "これは、リポジトリに保存してそこから実行するか、コンテンツをコピーして貼り付けることができるサンプルスクリプトです。 スクリプトステップ あなたの中で bitrise 構成 （ bitrise.yml \/ワークフロー）。 このスクリプトは、Strongswan VPN を使用して VPN に接続します。 macOS または Linux で動作します。スクリプトが正常に実行されると、後続の Bitrise ステップは VPN 接続を介してデバイスとサービスにアクセスできます。 #!\/usr\/bin\/env bash set -e echo \"WAN IP\" # This prints the s...", 
"body" : "これは、リポジトリに保存してそこから実行するか、コンテンツをコピーして貼り付けることができるサンプルスクリプトです。 スクリプトステップ あなたの中で bitrise 構成 （ bitrise.yml \/ワークフロー）。 このスクリプトは、Strongswan VPN を使用して VPN に接続します。 macOS または Linux で動作します。スクリプトが正常に実行されると、後続の Bitrise ステップは VPN 接続を介してデバイスとサービスにアクセスできます。 #!\/usr\/bin\/env bash\nset -e\n\necho \"WAN IP\"\n# This prints the servers Internet IP adress to the log, useful for debugging\ncurl http:\/\/httpbin.org\/ip\n\ncase \"$OSTYPE\" in\n linux*)\n echo \"Configuring for Linux\"\n\n # Variables\n etc_dir=\/etc\n etc_sudo='sudo' # Sudo is needed for Linux Strongswan configuration\n\n # Install strongswan\n echo \"Installing Strongswan...\"\n sudo apt-get install -y strongswan\n\n ;;\n darwin*)\n echo \"Configuring for Mac OS\"\n\n # Variables\n etc_dir=\/usr\/local\/etc\n etc_sudo='' # Sudo is NOT needed for Mac OS Strongswan configuration\n\n # Install Strongswan using homebrew\n echo \"Installing OpenSSL...\"\n # Manually install OpenSSL first to save time, since installing Strongswan directly compiles OpenSSL from source instead\n brew install openssl\n echo \"Installing Strongswan...\"\n brew install strongswan\n\n ;;\n *)\n echo \"Unknown operative system: $OSTYPE, exiting\"\n exit 1\n ;;\nesac\n\n\n# Method for rendering a template string file (when run, returns the input string with $VARIABLES replaced from env)\nrender_template() {\n eval \"echo \\\"$(cat $1)\\\"\"\n}\n\n# Create a temporary directory to hold files\ntemp_dir=\/tmp\/vpn-config\nmkdir $temp_dir\n\n# IPsec config file, see examples at https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/IKEv1Examples and https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/IKEv2Examples\necho \"Downloading ipsec.conf...\"\nwget https:\/\/www.example.com\/ipsec.conf.template -O $temp_dir\/ipsec.conf.template\n# IPsec credentials file, see documentation at https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/IpsecSecrets\necho \"Downloading ipsec.secrets...\"\nwget https:\/\/www.example.com\/ipsec.secrets.template -O $temp_dir\/ipsec.secrets.template\n# In some cases you might need to download the certificate, or certificate chain, of your other VPN endpoint\necho \"Downloading server.crt...\"\nwget https:\/\/www.example.com\/server.crt -O $temp_dir\/server.crt\n\necho \"Rendering config templates\"\nrender_template $temp_dir\/ipsec.conf.template > $temp_dir\/ipsec.conf\nrender_template $temp_dir\/ipsec.secrets.template > $temp_dir\/ipsec.secrets\n\necho \"Installing configuration\"\n$etc_sudo cp $temp_dir\/ipsec.conf $etc_dir\/ipsec.conf\n$etc_sudo cp $temp_dir\/ipsec.secrets $etc_dir\/ipsec.secrets\n$etc_sudo cp $temp_dir\/server.crt $etc_dir\/ipsec.d\/ocspcerts\/server.crt\n\n# Start the ipsec service\necho \"Starting ipsec\"\nsudo ipsec start\n\n# We're sleeping between commands, mostly since Mac OS seems to have some problems otherwise\nsleep 1\n\n# Output some helpful status to the log\necho \"Status ipsec\"\nsudo ipsec statusall\n\nsleep 1\n\n# Switch out myconnection with the name of your connection in ipsec.conf\necho \"Initiating VPN connection\"\nsudo ipsec up myconnection\n\nsleep 1\n\ncase \"$OSTYPE\" in\n linux*)\n ;;\n darwin*)\n # In Mac OS El Capitan, the `sudo ipsec up` command consistently fails the first time, but succeeds after a restart of the ipsec service\n echo \"Restarting ipsec\"\n sudo ipsec restart\n\n sleep 1\n\n echo \"Initiating VPN connection\"\n sudo ipsec up myconnection\n\n sleep 1\n\n # This step might apply if you are routing all traffic trough the IPsec connection (that is, if your remote IP range is 0.0.0.0\/0)\n # Mac OS El Capitan seems to have problems getting the DNS configuration from the Strongswan interface. Also IPv6 sometimes causes issues. So we're manually turning off IPv6 and forcing a new DNS configuration.\n echo \"Disabling IPv6 and forcing DNS settings\"\n # Fetch main interface\n main_interface=$(networksetup -listnetworkserviceorder | awk -F'\\\\) ' '\/\\(1\\)\/ {print $2}')\n # Completely disable IPv6\n sudo networksetup -setv6off \"$main_interface\"\n # Switch 10.0.0.1 with your DNS server\n sudo networksetup -setdnsservers \"$main_interface\" 10.0.0.1\n ;;\n *) ;;\nesac\n\n# Your VPN connection should be up and running. Any following steps of your Bitrise workflow can access devices over your VPN connection 🎉\n " }, 
{ "title" : "CiscoVPNの使用 ", 
"url" : "ビルドとパイプライン/ビルド中にvpnに接続する.html#ciscovpnの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルド中にVPNに接続する \/ VPN構成の例 \/ CiscoVPNの使用 ", 
"snippet" : "あなたは使用することができます CiscoVPN接続 手順：vpncを使用して、VPN3000コンセントレーター、Juniper \/ Netscreen、IOS、およびPIXが提供するCiscoVPNに接続します。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します CiscoVPN接続 ワークフローの開始時にステップします。 次のいずれかの方法で、ステップに必要なVPNクライアント設定と資格情報を提供します。 既存のvpnc構成ファイルの使用： vpnc.conf を使用して ...", 
"body" : "あなたは使用することができます CiscoVPN接続 手順：vpncを使用して、VPN3000コンセントレーター、Juniper \/ Netscreen、IOS、およびPIXが提供するCiscoVPNに接続します。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します CiscoVPN接続 ワークフローの開始時にステップします。 次のいずれかの方法で、ステップに必要なVPNクライアント設定と資格情報を提供します。 既存のvpnc構成ファイルの使用： vpnc.conf を使用して コマンドラインオプション ステップの入力。この入力で指定されたオプションは、構成ファイルよりも優先されます。 vpncの設定の詳細については、 vpncホームページ そしてその vpncマニュアル 。 " }, 
{ "title" : "特定のビルドを見つける ", 
"url" : "ビルドとパイプライン/特定のビルドを見つける.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ 特定のビルドを見つける ", 
"snippet" : "アプリに複数のビルドがある場合は、ビルド番号やコミットメッセージなどのさまざまなオプションを使用して、アプリのメインページで特定のビルドを検索できます。 200日間のビルド保持 に ビルド アプリのページには、過去200日間のビルドのみが表示されます。あなたがいる場合も同じ制限が適用されます 特定のビルドを検索する ページ上。この制限は、API呼び出しにも適用されます。 GET\/apps\/{app-slug}\/builds エンドポイントおよび関連するエンドポイントは、過去200日間のビルドのみを返すことができます。 ただし、正確なビルドURLがわかっている場合は、200日より古いビルドを表示...", 
"body" : "アプリに複数のビルドがある場合は、ビルド番号やコミットメッセージなどのさまざまなオプションを使用して、アプリのメインページで特定のビルドを検索できます。 200日間のビルド保持 に ビルド アプリのページには、過去200日間のビルドのみが表示されます。あなたがいる場合も同じ制限が適用されます 特定のビルドを検索する ページ上。この制限は、API呼び出しにも適用されます。 GET\/apps\/{app-slug}\/builds エンドポイントおよび関連するエンドポイントは、過去200日間のビルドのみを返すことができます。 ただし、正確なビルドURLがわかっている場合は、200日より古いビルドを表示できます。古いビルドを表示する必要があるが、正確なビルドURLがわからない場合は、サポートチームにお問い合わせください。 正確なビルドURLがわかっている場合は、ビルドにアクセスできます。 あなたは使用することができます GET\/apps\/{app-slug}\/archived-builds APIエンドポイント： アプリのアーカイブされたビルドの一覧表示。 アプリに複数のビルドがある場合 bitrise.io 、さまざまなオプションを使用して特定のものを検索できます。そうするために： Bitriseでアプリを開きます。 アプリのメインページで、ビルドのリストの上に検索オプションがあります。いくつかのオプションがあります。 の中に ビルド番号またはコミットメッセージを検索する フィールドに、ビルド番号またはコミットメッセージを入力してビルドを検索します。 ステータスフィルターのドロップダウンメニューからフィルターを選択して、特定のステータスのビルドを検索します。 ブランチフィルタードロップダウンメニューからフィルターを選択して、特定のブランチで実行されたビルドを検索します。 [ワークフロー]ドロップダウンメニューからフィルターを選択して、特定のワークフローで実行されたビルドを検索します。 トリガードロップダウンメニューからフィルターを選択して、トリガーオプション（プッシュ、プルリクエスト、またはタグ）のいずれかによってトリガーされたビルドを検索します。 " }, 
{ "title" : "ビルドのナンバリングとアプリのバージョン管理 ", 
"url" : "ビルドとパイプライン/ビルドのナンバリングとアプリのバージョン管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドのナンバリングとアプリのバージョン管理 ", 
"snippet" : "すべてのBitriseビルドにはビルド番号があります。アプリの最初のビルドはデフォルトで1番であり、ビルド番号はビルドごとに増加します。ビルド番号を手動で変更することもできます。 すべてのBitriseビルドにはビルド番号があります。アプリの最初のビルドはデフォルトで1であり、ビルド番号はビルドごとに増加します。ビルドのBitriseビルド番号は、Webサイト、および $BITRISE_BUILD_NUMBER 環境変数。この変数は、何らかの理由でBitriseビルド番号が必要な任意のステップまたはスクリプトで使用できます。 Bitriseを使用して、アプリのバージョン管理を自動的に処理するこ...", 
"body" : "すべてのBitriseビルドにはビルド番号があります。アプリの最初のビルドはデフォルトで1番であり、ビルド番号はビルドごとに増加します。ビルド番号を手動で変更することもできます。 すべてのBitriseビルドにはビルド番号があります。アプリの最初のビルドはデフォルトで1であり、ビルド番号はビルドごとに増加します。ビルドのBitriseビルド番号は、Webサイト、および $BITRISE_BUILD_NUMBER 環境変数。この変数は、何らかの理由でBitriseビルド番号が必要な任意のステップまたはスクリプトで使用できます。 Bitriseを使用して、アプリのバージョン管理を自動的に処理することもできます。私たちはあなたのためにそれを行うための2つのステップがあります： Bitriseでアプリのバージョン管理を自動的に設定する" }, 
{ "title" : "マシンユーザーへのSSHキーの追加 ", 
"url" : "ビルドとパイプライン/ビルドのナンバリングとアプリのバージョン管理.html#マシンユーザーへのsshキーの追加-78757", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドのナンバリングとアプリのバージョン管理 \/ マシンユーザーへのSSHキーの追加 ", 
"snippet" : "Bitriseがマシンユーザーを使用してリポジトリにアクセスできるようにするには、同じSSHキーをマシンユーザーとBitrise上のアプリに追加する必要があります。 負のビルド番号 ビルド番号は、0または正の整数である必要があります。負の数は受け入れられません。ただし、すでに使用している任意の番号を設定できます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 ビルド 。 下にスクロールして 次のビルド番号 。 この数は、ビルドを実行するたびに自動的に増加し...", 
"body" : "Bitriseがマシンユーザーを使用してリポジトリにアクセスできるようにするには、同じSSHキーをマシンユーザーとBitrise上のアプリに追加する必要があります。 負のビルド番号 ビルド番号は、0または正の整数である必要があります。負の数は受け入れられません。ただし、すでに使用している任意の番号を設定できます。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 ビルド 。 下にスクロールして 次のビルド番号 。 この数は、ビルドを実行するたびに自動的に増加しますが、手動で設定できます。 番号を変更するには、をクリックします 編集 。 " }, 
{ "title" : "Bitriseでアプリのバージョン管理を自動的に設定する ", 
"url" : "ビルドとパイプライン/ビルドのナンバリングとアプリのバージョン管理.html#bitriseでアプリのバージョン管理を自動的に設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドのナンバリングとアプリのバージョン管理 \/ Bitriseでアプリのバージョン管理を自動的に設定する ", 
"snippet" : "アプリに関する重要な情報を含むファイルを変更して、Gitリポジトリでアプリのバージョンを追跡します（たとえば、 Info.plist iOSアプリおよびいずれかのファイル build.gradle ファイルまたは AndroidManifest.xml Androidアプリ用のファイル）。 Bitriseには、これを行うための2つのステップがあります。これらの2つのステップでは、Bitriseビルド番号またはその他の指定された番号をそれぞれのファイルに挿入できます。 AndroidのversionCodeとversionNameを変更します Androidアプリ用。 Xcodeプロジェクトのビ...", 
"body" : "アプリに関する重要な情報を含むファイルを変更して、Gitリポジトリでアプリのバージョンを追跡します（たとえば、 Info.plist iOSアプリおよびいずれかのファイル build.gradle ファイルまたは AndroidManifest.xml Androidアプリ用のファイル）。 Bitriseには、これを行うための2つのステップがあります。これらの2つのステップでは、Bitriseビルド番号またはその他の指定された番号をそれぞれのファイルに挿入できます。 AndroidのversionCodeとversionNameを変更します Androidアプリ用。 Xcodeプロジェクトのビルド番号を設定する iOSアプリ用。 どちらのステップも、関連する入力で数値（整数および\/または数値文字列）または環境変数のいずれかを受け入れます。デフォルトでは、両方とも $BITRISE_BUILD_NUMBER ビルド番号のデフォルト値としての環境変数。 " }, 
{ "title" : "AndroidアプリのversionCodeとversionNameを設定する ", 
"url" : "ビルドとパイプライン/ビルドのナンバリングとアプリのバージョン管理.html#androidアプリのversioncodeとversionnameを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドのナンバリングとアプリのバージョン管理 \/ Bitriseでアプリのバージョン管理を自動的に設定する \/ AndroidアプリのversionCodeとversionNameを設定する ", 
"snippet" : "Androidアプリの場合、この設定は内部バージョン番号として使用され、アプリのビルドが別のビルドよりも新しいかどうかを判断します。 NS versionName 設定は、ユーザーに表示されるバージョン番号として使用される文字列です。 Androidのバージョン管理の詳細については、こちらをご覧ください。 このテーマに関するAndroid開発者ガイド 。 マニフェストファイルのバージョン情報 このガイドでは、バージョン情報を build.gradle ファイル。これが推奨される方法です。直接で設定することもできます。 AndroidManifest.xml ファイルですが、ビルド前にマニフェス...", 
"body" : "Androidアプリの場合、この設定は内部バージョン番号として使用され、アプリのビルドが別のビルドよりも新しいかどうかを判断します。 NS versionName 設定は、ユーザーに表示されるバージョン番号として使用される文字列です。 Androidのバージョン管理の詳細については、こちらをご覧ください。 このテーマに関するAndroid開発者ガイド 。 マニフェストファイルのバージョン情報 このガイドでは、バージョン情報を build.gradle ファイル。これが推奨される方法です。直接で設定することもできます。 AndroidManifest.xml ファイルですが、ビルド前にマニフェストファイルに設定されたバージョン情報は、によって上書きされることに注意してください。 build.gradle ビルド中のファイルの設定。 Androidのバージョン管理を構成するには： 追加します AndroidのversionCodeとversionNameを変更します ワークフローに進みます。 あなたへのパスを設定します build.gradle のファイル build.gradleファイルへのパス 入力。 に値を追加します 新しいversionCode 入力。 デフォルト値は $BITRISE_BUILD_NUMBER 環境変数。 に値を追加します 新しいversionName 入力。 " }, 
{ "title" : "iOSアプリのCFBundleVersionとCFBundleShortVersionStringを設定する ", 
"url" : "ビルドとパイプライン/ビルドのナンバリングとアプリのバージョン管理.html#iosアプリのcfbundleversionとcfbundleshortversionstringを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドのナンバリングとアプリのバージョン管理 \/ Bitriseでアプリのバージョン管理を自動的に設定する \/ iOSアプリのCFBundleVersionとCFBundleShortVersionStringを設定する ", 
"snippet" : "iOSアプリの場合、 CFBundleVersion キー（Xcodeの「バンドルバージョン」）はアプリのビルド番号であり、 CFBundleShortVersionString キー（Xcodeの「バンドルバージョン文字列、短い」）はアプリのバージョン番号です。 iOSのバージョン管理に関する詳細情報については、 CFBundleVersion そしてその CFBundleShortVersionString キー、チェックしてください このアップルテクニカルノート ;調べることもできます 最も重要なキーの概要 。 Xcode 13+ を使用したアプリの iOS バージョン管理の設定 Xco...", 
"body" : "iOSアプリの場合、 CFBundleVersion キー（Xcodeの「バンドルバージョン」）はアプリのビルド番号であり、 CFBundleShortVersionString キー（Xcodeの「バンドルバージョン文字列、短い」）はアプリのバージョン番号です。 iOSのバージョン管理に関する詳細情報については、 CFBundleVersion そしてその CFBundleShortVersionString キー、チェックしてください このアップルテクニカルノート ;調べることもできます 最も重要なキーの概要 。 Xcode 13+ を使用したアプリの iOS バージョン管理の設定 Xcode 13+ を使用して Bitrise で iOS のバージョン管理をセットアップするには、Xcode で以下を更新します。 をセットする Info.plist ファイルの生成 に No 、 下 事業 と ターゲット 上で ビルド設定 タブ。 必要なすべてのキーが定義されていることを確認してください Info.plist ファイル。 追加します Xcodeプロジェクトのビルド番号を設定する ワークフローに進みます。 ファイルパスをに設定します Info.plist のファイル Info.plist file path 入力。 に値を追加します ビルド番号 入力。これにより、 CFBundleVersion で指定された値へのキー Info.plist ファイル。デフォルト値は $BITRISE_BUILD_NUMBER 環境価値。 必要に応じて、に値を追加します バージョンナンバー 入力。これにより、 CFBundleShortVersionString で指定された値へのキー Info.plist ファイル。この入力は必要ありません。 " }, 
{ "title" : "ビルドバージョンのオフセット ", 
"url" : "ビルドとパイプライン/ビルドのナンバリングとアプリのバージョン管理.html#ビルドバージョンのオフセット", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドのナンバリングとアプリのバージョン管理 \/ ビルドバージョンのオフセット ", 
"snippet" : "同じアプリに対して以前に別の方法でバージョン追跡を処理した場合は、アプリのビルドバージョン番号をオフセットすることもできます。必要なのは、ビルド番号に追加する値を設定することだけです。値は、固定整数値または環境変数のいずれかです。 ビルドがトリガーされるたびにバージョン番号をBitriseビルド番号でオフセットするには、 $BITRISE_BUILD_NUMBER 環境変数： Androidアプリの場合は、 versionCodeオフセット の入力 AndroidのversionCodeとversionNameを変更します ステップアンドセット $ BITRISE_BUILD_NUMBER そ...", 
"body" : "同じアプリに対して以前に別の方法でバージョン追跡を処理した場合は、アプリのビルドバージョン番号をオフセットすることもできます。必要なのは、ビルド番号に追加する値を設定することだけです。値は、固定整数値または環境変数のいずれかです。 ビルドがトリガーされるたびにバージョン番号をBitriseビルド番号でオフセットするには、 $BITRISE_BUILD_NUMBER 環境変数： Androidアプリの場合は、 versionCodeオフセット の入力 AndroidのversionCodeとversionNameを変更します ステップアンドセット $ BITRISE_BUILD_NUMBER その値として。変数の値は、で指定された値に追加されます versionCode 入力。 iOSアプリの場合は、 ビルド番号オフセット の入力 Xcodeプロジェクトのビルド番号を設定する ステップアンドセット $ BITRISE_BUILD_NUMBER その値として。変数の値は、で指定された値に追加されます ビルド番号 入力。 Androidアプリのバージョンをオフセットする アプリがあり、Bitriseで5番目のビルドを実行しようとしているとします。 Bitriseの使用を開始する前に、アプリには6つのビルドがあったため、ビルド番号を6だけオフセットしたいとします。次の構成が使用されます。 - Version Code: $BITRISE_BUILD_NUMBER\n- Version Code Offset: 6\n- Version Name: 1.0.5 の値 $BITRISE_BUILD_NUMBER （この例では5に等しい）がに追加されます Version Code Offset 価値。そのような、 android:versionName 値は1.0.5（11）に設定され、アプリの1.0.5バージョンの11番目のビルドであることを示します。 iOSアプリのバージョンをオフセットする アプリがあり、Bitriseで5番目のビルドを実行しようとしているとします。 Bitriseの使用を開始する前に、アプリには6つのビルドがあったため、ビルド番号を6だけオフセットしたいとします。次の構成が使用されます。 - Build Number: $BITRISE_BUILD_NUMBER\n- Build Number Offset: 6\n- Version Number: 1.1 の値 $BITRISE_BUILD_NUMBER （この例では5に等しい）がに追加されます Build Number Offset 価値。そのような、 CFBundleShortVersionString 1.1（11）に設定され、アプリの1.1バージョンの11番目のビルドであることを示します。 " }, 
{ "title" : "ビルドデータとトラブルシューティング ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "ビルドログ ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/ビルドログ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ ビルドログ ", 
"snippet" : "Bitriseでは、ビルドログに簡単にアクセスできます。ビルドログは、Webサイト全体で表示することも、ダウンロードして自分のデバイスで表示することもできます。 ビルドログを使用すると、ユーザーはビルドを分析して、何がうまくいかなかったのか、何がうまくいったのかを見つけることができます。 Bitriseでは、ビルドログに簡単にアクセスできます。ビルドログは、Webサイト全体で表示することも、ダウンロードして自分のデバイスで表示することもできます。 200日間のビルド保持 に ビルド アプリのページには、過去200日間のビルドのみが表示されます。あなたがいる場合も同じ制限が適用されます 特定のビ...", 
"body" : "Bitriseでは、ビルドログに簡単にアクセスできます。ビルドログは、Webサイト全体で表示することも、ダウンロードして自分のデバイスで表示することもできます。 ビルドログを使用すると、ユーザーはビルドを分析して、何がうまくいかなかったのか、何がうまくいったのかを見つけることができます。 Bitriseでは、ビルドログに簡単にアクセスできます。ビルドログは、Webサイト全体で表示することも、ダウンロードして自分のデバイスで表示することもできます。 200日間のビルド保持 に ビルド アプリのページには、過去200日間のビルドのみが表示されます。あなたがいる場合も同じ制限が適用されます 特定のビルドを検索する ページ上。この制限は、API呼び出しにも適用されます。 GET\/apps\/{app-slug}\/builds エンドポイントおよび関連するエンドポイントは、過去200日間のビルドのみを返すことができます。 ただし、正確なビルドURLがわかっている場合は、200日より古いビルドを表示できます。古いビルドを表示する必要があるが、正確なビルドURLがわからない場合は、サポートチームにお問い合わせください。 正確なビルドURLがわかっている場合は、ビルドにアクセスできます。 あなたは使用することができます GET\/apps\/{app-slug}\/archived-builds APIエンドポイント： アプリのアーカイブされたビルドの一覧表示。 " }, 
{ "title" : "ビルドログの検索 ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/ビルドログ.html#ビルドログの検索", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ ビルドログ \/ ビルドログの検索 ", 
"snippet" : "ビルドを実行すると、ビルドログが自動的に生成されます。すべてのビルドには、独自のビルドログURLを持つ独自のログがあります。ビルドログのURLには、ビルドスラッグ（特定のビルドの16進識別子）が含まれています。 Bitriseサポートの支援 Bitrise Supportがビルドログを要求した場合、最善の方法はビルドURLを送信することです。 Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 あなたが持っていることを確認してください ログ タブが選択されました。 上で ログ タブでは、ワークフローのステップとそのステータスを確認で...", 
"body" : "ビルドを実行すると、ビルドログが自動的に生成されます。すべてのビルドには、独自のビルドログURLを持つ独自のログがあります。ビルドログのURLには、ビルドスラッグ（特定のビルドの16進識別子）が含まれています。 Bitriseサポートの支援 Bitrise Supportがビルドログを要求した場合、最善の方法はビルドURLを送信することです。 Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 あなたが持っていることを確認してください ログ タブが選択されました。 上で ログ タブでは、ワークフローのステップとそのステータスを確認できます。デフォルトでは、失敗したすべてのステップが展開されます。 ステップの右側にある下向き矢印をクリックして、ステップの情報を展開します。これにより、ビルド ログの関連部分が表示されます。 " }, 
{ "title" : "ビルドログページ ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/ビルドログ.html#ビルドログページ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ ビルドログ \/ ビルドログページ ", 
"snippet" : "ビルド ログ ページには、ビルドの一部であったすべてのステップとそのステータスが表示されます。デフォルトでは、失敗したステップが展開され、トラブルシューティングに便利なようにエラー メッセージが強調表示されます。ステップを展開すると、以下も表示できます。 ステップの実行の開始時刻。 ステップ ID。これが、 bitrise.yml 構成ファイルはステップを識別します。詳細については、次を参照してください。 ステップリファレンス\/ IDフォーマット. ステップの現在のバージョン。バージョン番号の下で、ステップのリリース ノートを確認できます。ビルドが最新バージョンのステップで実行されなかった場合...", 
"body" : "ビルド ログ ページには、ビルドの一部であったすべてのステップとそのステータスが表示されます。デフォルトでは、失敗したステップが展開され、トラブルシューティングに便利なようにエラー メッセージが強調表示されます。ステップを展開すると、以下も表示できます。 ステップの実行の開始時刻。 ステップ ID。これが、 bitrise.yml 構成ファイルはステップを識別します。詳細については、次を参照してください。 ステップリファレンス\/ IDフォーマット. ステップの現在のバージョン。バージョン番号の下で、ステップのリリース ノートを確認できます。ビルドが最新バージョンのステップで実行されなかった場合は、 アップデート をクリックしてワークフロー エディターを開き、ステップを別のバージョンに更新します。 下 ステップのリソース で、Step のドキュメントを確認できます。 統合 ページ、および GitHub のソース コードと課題トラッカー。 ビルド ログの内容を 1 つのファイルで完全に表示するには、 ログをダウンロードする . " }, 
{ "title" : "ビルドログをライブでフォローする ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/ビルドログ.html#ビルドログをライブでフォローする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ ビルドログ \/ ビルドログをライブでフォローする ", 
"snippet" : "ビルドのログをライブで確認できます。つまり、ビルドの実行中です。さらに、ビルドが行われているときにログを追跡することもできます。つまり、ビルドが進むにつれて、ログは新しいセクションが表示されたときに自動的にスクロールします。 そうするために： ビルドを開始します。 ビルドのページに移動します。 ログまで下にスクロールします。 クリック 従う 。 フォローを停止するには、ログ内の任意の場所に手動で移動する必要があります。フォローはいつでも再開できます。...", 
"body" : "ビルドのログをライブで確認できます。つまり、ビルドの実行中です。さらに、ビルドが行われているときにログを追跡することもできます。つまり、ビルドが進むにつれて、ログは新しいセクションが表示されたときに自動的にスクロールします。 そうするために： ビルドを開始します。 ビルドのページに移動します。 ログまで下にスクロールします。 クリック 従う 。 フォローを停止するには、ログ内の任意の場所に手動で移動する必要があります。フォローはいつでも再開できます。 " }, 
{ "title" : "ビルドログのダウンロード ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/ビルドログ.html#ビルドログのダウンロード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ ビルドログ \/ ビルドログのダウンロード ", 
"snippet" : "Bitriseのアプリにアクセスできない人にビルドログを送信する必要がある場合、またはログを独自のアーカイブに保存する場合は、Bitriseからログファイルをダウンロードするだけです。 ログセキュリティ ビルドログには機密情報が含まれている可能性があることに注意してください。ログファイルをダウンロードして他の人に送信する前に、必ず内容を確認してください。使用をお勧めします 秘密 ビルドログに機密情報が表示されないようにするため。 Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 を開きます ログ ドロップダウンメニューをクリックし...", 
"body" : "Bitriseのアプリにアクセスできない人にビルドログを送信する必要がある場合、またはログを独自のアーカイブに保存する場合は、Bitriseからログファイルをダウンロードするだけです。 ログセキュリティ ビルドログには機密情報が含まれている可能性があることに注意してください。ログファイルをダウンロードして他の人に送信する前に、必ず内容を確認してください。使用をお勧めします 秘密 ビルドログに機密情報が表示されないようにするため。 Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 を開きます ログ ドロップダウンメニューをクリックして、 ログをダウンロードする ボタン。 " }, 
{ "title" : "ビルドログの削除 ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/ビルドログ.html#ビルドログの削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ ビルドログ \/ ビルドログの削除 ", 
"snippet" : "必要に応じて、Bitriseのビルドのログを削除できます。たとえば、新しいチームメンバーに、以前のログに表示されている機密情報を表示させたくない場合に便利です。 すべてのチームメンバーがログを削除することを許可されているわけではありません。 管理者 また オーナー チームの役割はそれを行うことができます。 削除は最終的です ログの削除は元に戻せないことに注意してください。一度削除すると、ログファイルを復元する方法はありません。 Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 を開きます ログ ドロップダウンメニューをクリックして...", 
"body" : "必要に応じて、Bitriseのビルドのログを削除できます。たとえば、新しいチームメンバーに、以前のログに表示されている機密情報を表示させたくない場合に便利です。 すべてのチームメンバーがログを削除することを許可されているわけではありません。 管理者 また オーナー チームの役割はそれを行うことができます。 削除は最終的です ログの削除は元に戻せないことに注意してください。一度削除すると、ログファイルを復元する方法はありません。 Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 を開きます ログ ドロップダウンメニューをクリックして、 ログを削除する ボタン。 ポップアップ ウィンドウで、 ログの削除 . " }, 
{ "title" : "リモートアクセス ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/リモートアクセス.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ リモートアクセス ", 
"snippet" : "リモートアクセスを使用すると、ユーザーはSSHまたは画面共有アプリを介してビルドの仮想マシンに接続できます。画面共有アプリには、ビルドのビルドの詳細ページからアクセスできます。 リモートアクセスにより、ユーザーはSSHまたは画面共有アプリを介してビルドの仮想マシンに接続できます。失敗したビルドは、リモートアクセスを有効にして再ビルドできるため、トラブルシューティングがはるかに簡単になります。たとえば、ビルドログにエラーに関する十分な情報がない場合などです。 承認 を持っているユーザー テスター\/ QA アプリの役割はリモートアクセスを使用できません。 ビルドマシンでリモートアクセスを使用するに...", 
"body" : "リモートアクセスを使用すると、ユーザーはSSHまたは画面共有アプリを介してビルドの仮想マシンに接続できます。画面共有アプリには、ビルドのビルドの詳細ページからアクセスできます。 リモートアクセスにより、ユーザーはSSHまたは画面共有アプリを介してビルドの仮想マシンに接続できます。失敗したビルドは、リモートアクセスを有効にして再ビルドできるため、トラブルシューティングがはるかに簡単になります。たとえば、ビルドログにエラーに関する十分な情報がない場合などです。 承認 を持っているユーザー テスター\/ QA アプリの役割はリモートアクセスを使用できません。 ビルドマシンでリモートアクセスを使用するには、次の2つの方法があります。 SSH ：これは、Linux \/ DockerベースのマシンとMacOSマシンの両方で使用できます。 スクリーンシェア ：これはMacOSマシンでのみ使用できます。 VNCシステムを使用しています。 どちらの方法でも、ビルド中およびビルド終了後10分間、ビルドマシンにリモートでアクセスできます。 リモート アクセスの可用性の拡張 リモート アクセスの可用性を拡張したい場合は、失敗したステップの後に簡単なカスタム スクリプト ステップを追加することで実現できます。チェックアウト リモートアクセスの可用性を拡張する 詳細については。 " }, 
{ "title" : "SSHによるリモートアクセス ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/リモートアクセス.html#sshによるリモートアクセス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ リモートアクセス \/ SSHによるリモートアクセス ", 
"snippet" : "SSHを使用してBitriseビルドマシンにアクセスするには、コマンドラインインターフェイスと正しいコマンドとパスワードが必要です。 Bitriseでアプリを開きます。 アプリのメインページで、リモートアクセスで再実行するビルドを見つけてクリックします。 に 再構築 ボタンをクリックし、下向き矢印をクリックしてドロップダウンメニューを開きます。 選択する リモートアクセスで再構築 。これにより、リモートでアクセスできる新しいビルドが開始されます。 SSHセクションで、 指示 コマンドラインインターフェイスで実行します。 そして完了！ビルドが実行されている仮想マシンにアクセスできるはずです。...", 
"body" : "SSHを使用してBitriseビルドマシンにアクセスするには、コマンドラインインターフェイスと正しいコマンドとパスワードが必要です。 Bitriseでアプリを開きます。 アプリのメインページで、リモートアクセスで再実行するビルドを見つけてクリックします。 に 再構築 ボタンをクリックし、下向き矢印をクリックしてドロップダウンメニューを開きます。 選択する リモートアクセスで再構築 。これにより、リモートでアクセスできる新しいビルドが開始されます。 SSHセクションで、 指示 コマンドラインインターフェイスで実行します。 そして完了！ビルドが実行されている仮想マシンにアクセスできるはずです。 " }, 
{ "title" : "スクリーンシェアによるリモートアクセス ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/リモートアクセス.html#スクリーンシェアによるリモートアクセス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ リモートアクセス \/ スクリーンシェアによるリモートアクセス ", 
"snippet" : "スクリーンシェアアプリでBitriseビルドマシンにアクセスするには、正しいユーザー名、パスワード、アドレス、およびVNCスクリーンシェアアプリが必要です。 macOSのみ 画面共有を使用したリモートアクセスは、macOSベースで実行されるワークフローでのみ使用できます スタック 。ワークフローのスタック（またはワークフロー固有のスタックがない場合、アプリのデフォルトスタック）がLinuxベースのスタックである場合、画面共有の手順はまったく表示されません。 Bitriseでアプリを開きます。 リモートアクセスで再実行するビルドを見つけます。 クリック リモートアクセスで再構築 オプション。 選...", 
"body" : "スクリーンシェアアプリでBitriseビルドマシンにアクセスするには、正しいユーザー名、パスワード、アドレス、およびVNCスクリーンシェアアプリが必要です。 macOSのみ 画面共有を使用したリモートアクセスは、macOSベースで実行されるワークフローでのみ使用できます スタック 。ワークフローのスタック（またはワークフロー固有のスタックがない場合、アプリのデフォルトスタック）がLinuxベースのスタックである場合、画面共有の手順はまったく表示されません。 Bitriseでアプリを開きます。 リモートアクセスで再実行するビルドを見つけます。 クリック リモートアクセスで再構築 オプション。 選択する リモートアクセスで再構築 。これにより、リモートでアクセスできる新しいビルドが開始されます。 下 スクリーンシェア オプションで、必要な情報を見つけます。 住所 ユーザー名 パスワード VNC画面共有アプリケーションを開きます。 最も簡単なオプションは、デフォルトを使用することです 画面共有 macOS上のアプリケーション。 必要なフィールドに下の情報を入力します スクリーンシェア オプション。 そして完了！これで、ビルドが実行されている仮想マシンにアクセスできるようになります。 " }, 
{ "title" : "VM上でファイルを見つける ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/リモートアクセス.html#vm上でファイルを見つける", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ リモートアクセス \/ VM上でファイルを見つける ", 
"snippet" : "ビルドを実行したBitrise仮想マシンに正常にログインしたら、ファイル自体に飛び込んで、リアルタイムで何が起こっているかを確認できます。 BitriseがアプリのVMへのクローン作成を完了した後は、いつでも次の場所からアプリにアクセスできます。 \/Users\/Vagrant\/git...", 
"body" : "ビルドを実行したBitrise仮想マシンに正常にログインしたら、ファイル自体に飛び込んで、リアルタイムで何が起こっているかを確認できます。 BitriseがアプリのVMへのクローン作成を完了した後は、いつでも次の場所からアプリにアクセスできます。 \/Users\/Vagrant\/git " }, 
{ "title" : "リモートアクセスの可用性を拡張する ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/リモートアクセス.html#リモートアクセスの可用性を拡張する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ リモートアクセス \/ リモートアクセスの可用性を拡張する ", 
"snippet" : "リモートアクセスは、ビルドの実行中およびビルド終了後10分間利用できます。これだけでは不十分な場合は、リモートアクセスを長期間利用できるようにするための簡単な回避策があります。 追加する 脚本 ビルドが失敗する原因となるステップの次のステップ。 トグル 前のステップが失敗した場合に実行 を確実にするためのオプション 脚本 ステップは常に実行されます。 秒単位で指定された時間、ビルドを「スリープ」させるコマンドを追加します。 sleep 5400 この例では、ビルドを90分間実行します。もちろん、ビルド時間の制限を超えないようにする必要があります。 それでおしまい。ビルドがまだ実行されている間に...", 
"body" : "リモートアクセスは、ビルドの実行中およびビルド終了後10分間利用できます。これだけでは不十分な場合は、リモートアクセスを長期間利用できるようにするための簡単な回避策があります。 追加する 脚本 ビルドが失敗する原因となるステップの次のステップ。 トグル 前のステップが失敗した場合に実行 を確実にするためのオプション 脚本 ステップは常に実行されます。 秒単位で指定された時間、ビルドを「スリープ」させるコマンドを追加します。 sleep 5400 この例では、ビルドを90分間実行します。もちろん、ビルド時間の制限を超えないようにする必要があります。 それでおしまい。ビルドがまだ実行されている間に、仮想マシンを調べて、失敗の原因となった可能性のある問題を探すことができます。 " }, 
{ "title" : "自分のマシンでビルドをデバッグする ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/自分のマシンでビルドをデバッグする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ 自分のマシンでビルドをデバッグする ", 
"snippet" : "Bitriseでビルドが失敗した場合は、ローカルで実行してみることをお勧めします。デバッグするには：完全にクリーンなgitクローンを使用し、BitriseCLIを使用してマシンでビルドを実行します。 Bitriseでビルドが失敗した場合は、ローカルのマシンで実行することをお勧めします。これを行うには、次のようにします。 プロジェクトのオンラインリポジトリの完全にクリーンなgitクローンを作成します。 BitriseCLIを使用してマシンでビルドを実行します。 これは、とりわけ、非常に一般的な問題を排除するのに役立ちます。コミットされていないファイルまたはgitignoredファイルは作業ディレ...", 
"body" : "Bitriseでビルドが失敗した場合は、ローカルで実行してみることをお勧めします。デバッグするには：完全にクリーンなgitクローンを使用し、BitriseCLIを使用してマシンでビルドを実行します。 Bitriseでビルドが失敗した場合は、ローカルのマシンで実行することをお勧めします。これを行うには、次のようにします。 プロジェクトのオンラインリポジトリの完全にクリーンなgitクローンを作成します。 BitriseCLIを使用してマシンでビルドを実行します。 これは、とりわけ、非常に一般的な問題を排除するのに役立ちます。コミットされていないファイルまたはgitignoredファイルは作業ディレクトリにありますが、オンラインでgitリポジトリにコミットされていないため、Bitriseがリポジトリを複製して実行するときに使用できません。建てる。その他の考えられる問題は次のとおりです。 コード署名ファイルはローカルマシンに存在しますが、Bitriseにはアップロードされません。 ビルドに使用されるツールのバージョンの違い。 Androidプロジェクト それでも問題をローカルで再現できない場合は、 $HOME\/.gradle （隠し）ディレクトリ、Gradleキャッシュをクリアします。 （クイックターミナル\/コマンドラインコマンド： rm -rf $HOME\/.gradle ）。 クリーンなgitクローンからdockerを実行します プロジェクトでAndroid \/ Linux環境を使用している場合は、ビルドが実行されている環境とまったく同じ環境をダウンロードして使用できます。 bitrise.io 。 理想的には、最初にクリーンなgitクローンを作成して実行する必要があります docker そこから、あなたの中にあるファイルが .gitignore ビルドには影響せず、ビルドはと同じように実行できます bitrise.io 。 " }, 
{ "title" : "完全にクリーンなgitクローンを使用したテスト ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/自分のマシンでビルドをデバッグする.html#完全にクリーンなgitクローンを使用したテスト", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ 自分のマシンでビルドをデバッグする \/ 完全にクリーンなgitクローンを使用したテスト ", 
"snippet" : "マシンでターミナル\/コマンドラインインターフェイスを開きます。 次のように入力します。 cd \/tmp 次の方法でリポジトリのクローンを作成します。 git clone REPOURL .\/quick-repo-test --branch BRANCH-YOU-WANT-TO-TEST ： git clone https:\/\/github.com\/bitrise-io\/bitrise.git .\/quick-repo-test --branch master タイプ cd .\/quick-repo-test. テストするコマンドを実行するか、プロジェクトをビルドするか、このディレクトリからプロ...", 
"body" : "マシンでターミナル\/コマンドラインインターフェイスを開きます。 次のように入力します。 cd \/tmp 次の方法でリポジトリのクローンを作成します。 git clone REPOURL .\/quick-repo-test --branch BRANCH-YOU-WANT-TO-TEST ： git clone https:\/\/github.com\/bitrise-io\/bitrise.git .\/quick-repo-test --branch master タイプ cd .\/quick-repo-test. テストするコマンドを実行するか、プロジェクトをビルドするか、このディレクトリからプロジェクトファイルを開きます。 " }, 
{ "title" : "BitriseCLIを使用したテスト ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/自分のマシンでビルドをデバッグする.html#bitrisecliを使用したテスト", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ 自分のマシンでビルドをデバッグする \/ BitriseCLIを使用したテスト ", 
"snippet" : "完全にクリーンなgitクローンを実行した後、を使用してローカルでビルドを実行します Bitrise CLI 。 BitriseCLIをインストールします 。 アプリをダウンロードする bitrise.yml からのファイル bitrise.io 。 次のコマンドでビルドを実行します。 bitrise run <workflow-name> （例えば、 bitrise run primary ）。 これにより、ほとんどの場合、問題の再現に役立ち、自分のマシンで問題のデバッグを試みることができます。 これらの条件下でビルドが成功したが、それでもBitriseで失敗した場合は、 サポートにお問い合わ...", 
"body" : "完全にクリーンなgitクローンを実行した後、を使用してローカルでビルドを実行します Bitrise CLI 。 BitriseCLIをインストールします 。 アプリをダウンロードする bitrise.yml からのファイル bitrise.io 。 次のコマンドでビルドを実行します。 bitrise run <workflow-name> （例えば、 bitrise run primary ）。 これにより、ほとんどの場合、問題の再現に役立ち、自分のマシンで問題のデバッグを試みることができます。 これらの条件下でビルドが成功したが、それでもBitriseで失敗した場合は、 サポートにお問い合わせください！ " }, 
{ "title" : "GitHubでのビットライズチェック ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック ", 
"snippet" : "Bitrise Checksは、BitriseがGitHubに送り返す従来のステータスチェックの拡張バージョンを提供するGithubアプリです。 Bitrise Checksは、BitriseがGitHubに送り返す従来のステータスチェックの拡張バージョンを提供するGithubアプリです。ビットライズチェックには、ビットライズビルドの概要とチェックステータスが含まれます。クリックするとビットライズチェックを表示できます 詳細 GitHubのプルリクエストのリンク。詳細なビルドの概要とビルドステータスを展開します。BitriseChecksは、 チェック GitHubのタブ。 GitHub En...", 
"body" : "Bitrise Checksは、BitriseがGitHubに送り返す従来のステータスチェックの拡張バージョンを提供するGithubアプリです。 Bitrise Checksは、BitriseがGitHubに送り返す従来のステータスチェックの拡張バージョンを提供するGithubアプリです。ビットライズチェックには、ビットライズビルドの概要とチェックステータスが含まれます。クリックするとビットライズチェックを表示できます 詳細 GitHubのプルリクエストのリンク。詳細なビルドの概要とビルドステータスを展開します。BitriseChecksは、 チェック GitHubのタブ。 GitHub Enterprise Server はサポートされていません Bitrise Checks は、GitHub Enterprise Server デプロイメントではサポートされていません。 GitHub Enterprise 環境で Bitrise Checks を使用する場合は、GitHub Enterprise Cloud を使用することをお勧めします。 3つの異なるチェックステータスがあります。 成功。 失敗した。 必要なアクション（手動プルリクエスト承認の場合）。 " }, 
{ "title" : "ビットライズチェックのインストール ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html#ビットライズチェックのインストール", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック \/ ビットライズチェックのインストール ", 
"snippet" : "ビットライズチェックの使用は、数回クリックするだけです。これをやろう！ 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、選択 統合 メニューオプションから。 クリック Bitrise Checks アプリを GitHub リポジトリにインストールします トグルの下のリンク。最初に Bitrise Checks をインストールする必要があるため、まだスイッチを切り替えないでください。 このリンクから GitHub の ビットライズチェック インストールページ。 ...", 
"body" : "ビットライズチェックの使用は、数回クリックするだけです。これをやろう！ 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、選択 統合 メニューオプションから。 クリック Bitrise Checks アプリを GitHub リポジトリにインストールします トグルの下のリンク。最初に Bitrise Checks をインストールする必要があるため、まだスイッチを切り替えないでください。 このリンクから GitHub の ビットライズチェック インストールページ。 上で ビットライズ チェックをインストールする ページで、Bitrise Checks を追加するユーザーまたは GitHub 組織を選択します。 Bitrise Checksをすべてのリポジトリにインストールするか、選択したいくつかのリポジトリにインストールするかを決定します。これにより、Bitrise Checksにリポジトリと統合する権限を付与し、GitHubChecksを使用してチェック結果を表示します。 GitHubプロンプトで、GitHubパスワードを入力します。 すべてがうまくいけば、あなたは上陸します ビットライズチェック GitHubのページ。ページの左上隅に、Bitrise Checks が GitHub アカウントに正常にインストールされたことを示す青いメモが表示されます。 " }, 
{ "title" : "BitriseでGitHubチェックを有効にする ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html#bitriseでgithubチェックを有効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック \/ BitriseでGitHubチェックを有効にする ", 
"snippet" : "一度 BitriseChecksがインストールされています GitHubでは、アプリのページでGitHubチェックを有効にする必要があります。 ビットライズ 。 GitHubチェックの有効化は制限されています ワークスペースの所有者とアプリの管理者のみがこの切り替えを有効にできることに注意してください アプリの設定 アプリのページ。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 メニューオプションから。 下にスクロールして、 GitHubチェック ス...", 
"body" : "一度 BitriseChecksがインストールされています GitHubでは、アプリのページでGitHubチェックを有効にする必要があります。 ビットライズ 。 GitHubチェックの有効化は制限されています ワークスペースの所有者とアプリの管理者のみがこの切り替えを有効にできることに注意してください アプリの設定 アプリのページ。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 統合 メニューオプションから。 下にスクロールして、 GitHubチェック スイッチ。 スイッチを切り替えることはできませんか？ スイッチを切り替えることができない場合は、チェックアウトしてください GitHubチェックを有効にできません。 そして、あなたは完了です！これで、GitHubでアプリに対して開いたプルリクエストは、ビットライズチェックで検証され、ビルドがビットライズで自動的に開始されます（ プルリクエストトリガー Bitriseで適切に設定されています）。 Bitriseでアプリのページに簡単にアクセスできます。ビルドの概要またはをクリックした場合 ビットライズチェックの詳細を表示する 上のリンク チェック タブをクリックすると、アプリのビルドページにすばやく移動します。 " }, 
{ "title" : "GitHubチェックを有効にできません ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html#githubチェックを有効にできません", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック \/ BitriseでGitHubチェックを有効にする \/ GitHubチェックを有効にできません ", 
"snippet" : "スイッチを切り替えてGitHubチェックを有効にできない主な理由は2つあります。 Bitrise Checksを最初にインストールしない限り、スイッチを切り替えることはできません。完了したら、先に進んでスイッチを右に切り替えて有効にします。 すでにBitriseに追加されているアプリのGitHubリポジトリの名前を変更または移動し、BitriseChecksをインストールした場合。リポジトリのGitHubURLは明らかに変更されています。 GitHubチェック スイッチは、GithubとBitriseのURLが完全に一致する場合にのみ機能します（リダイレクトURLは許可されていません）。したが...", 
"body" : "スイッチを切り替えてGitHubチェックを有効にできない主な理由は2つあります。 Bitrise Checksを最初にインストールしない限り、スイッチを切り替えることはできません。完了したら、先に進んでスイッチを右に切り替えて有効にします。 すでにBitriseに追加されているアプリのGitHubリポジトリの名前を変更または移動し、BitriseChecksをインストールした場合。リポジトリのGitHubURLは明らかに変更されています。 GitHubチェック スイッチは、GithubとBitriseのURLが完全に一致する場合にのみ機能します（リダイレクトURLは許可されていません）。したがって、この場合、あなたはしなければなりません 手動で更新します リポジトリのURL あなたのアプリの 。 " }, 
{ "title" : "以前のCIチェックからビットライズチェックに切り替える ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html#以前のciチェックからビットライズチェックに切り替える", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック \/ 以前のCIチェックからビットライズチェックに切り替える ", 
"snippet" : "マージする前にプルリクエストのステータスチェックをすでに使用している場合は、 ci\/bitrise\/... システムをチェックしてください。ビットライズチェックを使用できるようにするには、手動でから切り替える必要があります ci\/bitrise\/... に ビットライズ それらの詳細なチェックにアクセスします。方法を見てみましょう！ に移動します 設定 リポジトリのタブ。 クリック ブランチ サイドメニューにあります。下 マージする前にステータスチェックに合格する必要があります 、あなたが見ることができます ci\/bitrise\/... 選択されたチェックシステムとして。 選択する ビットライ...", 
"body" : "マージする前にプルリクエストのステータスチェックをすでに使用している場合は、 ci\/bitrise\/... システムをチェックしてください。ビットライズチェックを使用できるようにするには、手動でから切り替える必要があります ci\/bitrise\/... に ビットライズ それらの詳細なチェックにアクセスします。方法を見てみましょう！ に移動します 設定 リポジトリのタブ。 クリック ブランチ サイドメニューにあります。下 マージする前にステータスチェックに合格する必要があります 、あなたが見ることができます ci\/bitrise\/... 選択されたチェックシステムとして。 選択する ビットライズ それ以外の ci\/bitrise\/... 。 プルリクエストをマージします。 " }, 
{ "title" : "GitHubチェックを無効にする ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html#githubチェックを無効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック \/ GitHubチェックを無効にする ", 
"snippet" : "を切り替えると、BitriseのGitHubチェックを簡単に無効にできます GITHUBチェックを有効にする で左に切り替えます 設定 アプリのページ。 GitHubアカウントからBitriseChecksをアンインストールする場合は、[ アンインストール のボタン GitHubアプリをインストールします ページ。...", 
"body" : "を切り替えると、BitriseのGitHubチェックを簡単に無効にできます GITHUBチェックを有効にする で左に切り替えます 設定 アプリのページ。 GitHubアカウントからBitriseChecksをアンインストールする場合は、[ アンインストール のボタン GitHubアプリをインストールします ページ。 " }, 
{ "title" : "GitHubはテストの概要をチェックします ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html#githubはテストの概要をチェックします", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック \/ GitHubはテストの概要をチェックします ", 
"snippet" : "アプリのリポジトリにUIまたは単体テストが含まれている場合は、ワークフローの適切なテスト手順を使用してこれらのテストを実行できます。 Bitrise.ioにデプロイします ステップ、あなたのテスト結果は私たちに表示されます テストレポート ページとGitHubチェックでもそれらを見ることができます。 たとえば、Android アプリがある場合は、 Android の仮想ユニット テスト GitHub Checks ですべてのテスト結果を確認できるようにするための手順。...", 
"body" : "アプリのリポジトリにUIまたは単体テストが含まれている場合は、ワークフローの適切なテスト手順を使用してこれらのテストを実行できます。 Bitrise.ioにデプロイします ステップ、あなたのテスト結果は私たちに表示されます テストレポート ページとGitHubチェックでもそれらを見ることができます。 たとえば、Android アプリがある場合は、 Android の仮想ユニット テスト GitHub Checks ですべてのテスト結果を確認できるようにするための手順。 " }, 
{ "title" : "ステップバイステップのエラーレポート ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html#ステップバイステップのエラーレポート", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック \/ GitHubはテストの概要をチェックします \/ ステップバイステップのエラーレポート ", 
"snippet" : "CIビルドが実行されると、GitHub Checksのテストの概要に、ステップの成功したテストと失敗したテストが左側のサイドバーの別々のタブに表示されます。ステップをクリックすると、より詳細なレポートの概要が表示され、実行可能なエラーレポートとともに多数のテストが一覧表示されます。ビルドの概要は、[ビットライズ]タブで確認できます。 GitHub Checksのテストの概要では、次の手順の詳細情報しか印刷できないことに注意してください。 iOS用Xcodeテスト Androidユニットテスト iOSデバイスのテスト Android用の仮想デバイステスト フラッターテスト 他のステップで生成され...", 
"body" : "CIビルドが実行されると、GitHub Checksのテストの概要に、ステップの成功したテストと失敗したテストが左側のサイドバーの別々のタブに表示されます。ステップをクリックすると、より詳細なレポートの概要が表示され、実行可能なエラーレポートとともに多数のテストが一覧表示されます。ビルドの概要は、[ビットライズ]タブで確認できます。 GitHub Checksのテストの概要では、次の手順の詳細情報しか印刷できないことに注意してください。 iOS用Xcodeテスト Androidユニットテスト iOSデバイスのテスト Android用の仮想デバイステスト フラッターテスト 他のステップで生成されたテスト結果をにエクスポートできます Bitrise.ioにデプロイします 2つの方法でステップします。 を使用することを強くお勧めします テスト結果をテストレポートアドオンにエクスポートする ステップ：このステップは、入力に基づいてテスト結果を見つけます。 独自のカスタムを構成できます 脚本 必要なファイルを作成してエクスポートするステップ。 " }, 
{ "title" : "失敗したステップのテスト結果を確認する ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html#失敗したステップのテスト結果を確認する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック \/ GitHubはテストの概要をチェックします \/ 失敗したステップのテスト結果を確認する ", 
"snippet" : "ビルドに失敗したテストがある場合、GitHubチェックでそれらにアクセスする方法は次のとおりです。 クリック ビットライズチェック 落ちる。 ステップをクリックして、特定のステップのエラーレポートを表示します。 ここから他のステップまたはビルドの概要をクリックできます。 The ビットライズチェックの詳細を表示する リンクをクリックすると、Bitriseのビルドページに移動します。...", 
"body" : "ビルドに失敗したテストがある場合、GitHubチェックでそれらにアクセスする方法は次のとおりです。 クリック ビットライズチェック 落ちる。 ステップをクリックして、特定のステップのエラーレポートを表示します。 ここから他のステップまたはビルドの概要をクリックできます。 The ビットライズチェックの詳細を表示する リンクをクリックすると、Bitriseのビルドページに移動します。 " }, 
{ "title" : "GitHub チェックを使用してビルドを再実行する ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/githubでのビットライズチェック.html#github-チェックを使用してビルドを再実行する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ GitHubでのビットライズチェック \/ GitHubはテストの概要をチェックします \/ GitHub チェックを使用してビルドを再実行する ", 
"snippet" : "役割要件 GitHub Checks を使用してビルドを再実行するには、 GitHub アカウントが Bitrise に接続されている必要があります 、アプリのチームで少なくとも開発者の役割を持っている必要があります。これらの条件が満たされない場合、再実行チェックはエラーなしで失敗します。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . GitHub Checks を使用してビルドを再実行する場合: チェックを再実行する GitHub でプル リクエストを開きます。 を開きます 小切手 タブ。 クリック すべてのチェッ...", 
"body" : "役割要件 GitHub Checks を使用してビルドを再実行するには、 GitHub アカウントが Bitrise に接続されている必要があります 、アプリのチームで少なくとも開発者の役割を持っている必要があります。これらの条件が満たされない場合、再実行チェックはエラーなしで失敗します。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . GitHub Checks を使用してビルドを再実行する場合: チェックを再実行する GitHub でプル リクエストを開きます。 を開きます 小切手 タブ。 クリック すべてのチェックを再実行します . " }, 
{ "title" : "Meercode ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/meercode.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ Meercode ", 
"snippet" : "Meercode アドオンは 2023 年 2 月 1 日に廃止されました。ビルド、テスト、クレジット データを監視するための無料の代替手段として Bitrise Insights をチェックしてください。 Meercode 廃止通知 2023 年 2 月 1 日に Bitrise での Meercode のサポートを終了します。ビルドを監視するために現在 Meercode を使用している、または使用する予定がある場合は、チェックアウトすることをお勧めします。 洞察を構築する 代替として。...", 
"body" : "Meercode アドオンは 2023 年 2 月 1 日に廃止されました。ビルド、テスト、クレジット データを監視するための無料の代替手段として Bitrise Insights をチェックしてください。 Meercode 廃止通知 2023 年 2 月 1 日に Bitrise での Meercode のサポートを終了します。ビルドを監視するために現在 Meercode を使用している、または使用する予定がある場合は、チェックアウトすることをお勧めします。 洞察を構築する 代替として。 " }, 
{ "title" : "MeercodeとBitriseの統合 ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/meercode.html#meercodeとbitriseの統合", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ Meercode \/ MeercodeとBitriseの統合 ", 
"snippet" : "Meercodeを使用してBitriseビルドを監視するには： アプリのチームの管理者は、アプリのMeercodeアドオンを有効にする必要があります。 アドオンを有効にしたら、アプリの他のチームメンバーが自分のアカウントでアドオンを承認する必要があります。 Meercodeとパーソナルアクセストークンの統合 以前は、Meercode自身のWebサイトでBitriseパーソナルアクセストークンを使用してMeercodeを統合できました。この方法は機能しなくなりました。 Meercodeを使用してビルドを監視するには、Meercodeアドオンが必要です。 アプリのMeercodeを有効にする を持...", 
"body" : "Meercodeを使用してBitriseビルドを監視するには： アプリのチームの管理者は、アプリのMeercodeアドオンを有効にする必要があります。 アドオンを有効にしたら、アプリの他のチームメンバーが自分のアカウントでアドオンを承認する必要があります。 Meercodeとパーソナルアクセストークンの統合 以前は、Meercode自身のWebサイトでBitriseパーソナルアクセストークンを使用してMeercodeを統合できました。この方法は機能しなくなりました。 Meercodeを使用してビルドを監視するには、Meercodeアドオンが必要です。 アプリのMeercodeを有効にする を持っているユーザーのみが 管理者 アプリのチームの役割は、アプリのアドオンを有効にすることができます。ユーザーの役割についてもっと読む： アプリチームでのユーザーの役割" }, 
{ "title" : "管理者としてアドオンを有効にする ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/meercode.html#管理者としてアドオンを有効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ Meercode \/ MeercodeとBitriseの統合 \/ 管理者としてアドオンを有効にする ", 
"snippet" : "特定のアプリのアドオンを有効にするには： Bitriseアカウントにログインします。 ダッシュボードで、必要なアプリを見つけます。 クリック アプリの設定 。 左側で、 アドオン メニューオプションから。 下 Meercode 、 クリック アドオンを有効にする ボタン。 ポップアップウィンドウで、アドオンに必要なアクセス権を確認できます。クリック アドオンを有効にする これらの権利を付与します。...", 
"body" : "特定のアプリのアドオンを有効にするには： Bitriseアカウントにログインします。 ダッシュボードで、必要なアプリを見つけます。 クリック アプリの設定 。 左側で、 アドオン メニューオプションから。 下 Meercode 、 クリック アドオンを有効にする ボタン。 ポップアップウィンドウで、アドオンに必要なアクセス権を確認できます。クリック アドオンを有効にする これらの権利を付与します。 " }, 
{ "title" : "アドオンをユーザーとして承認する ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/meercode.html#アドオンをユーザーとして承認する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ Meercode \/ MeercodeとBitriseの統合 \/ アドオンをユーザーとして承認する ", 
"snippet" : "管理者がMeercodeアドオンを有効にした後、アプリのチームの各ユーザーは自分のアカウントでアドオンを承認する必要があります。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 アドオン メニューオプションから。 の隣に Meercode 、 クリック アドオンを開く ボタン。 次のページで、アドオンに必要なアクセス権を確認できます。クリック アドオンを承認する これらの権利を付与します。...", 
"body" : "管理者がMeercodeアドオンを有効にした後、アプリのチームの各ユーザーは自分のアカウントでアドオンを承認する必要があります。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 アドオン メニューオプションから。 の隣に Meercode 、 クリック アドオンを開く ボタン。 次のページで、アドオンに必要なアクセス権を確認できます。クリック アドオンを承認する これらの権利を付与します。 " }, 
{ "title" : "Meercodeの承認を取り消す ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/meercode.html#meercodeの承認を取り消す", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ Meercode \/ MeercodeとBitriseの統合 \/ Meercodeの承認を取り消す ", 
"snippet" : "アプリのチームのすべてのユーザーは、アプリのMeercodeアドオンへの独自のトークンを取り消すことができます。 に移動します 安全 個人アカウントのタブ。 スクロールして 承認されたアドオン 。 クリック 取り消す Meercodeへのアクセストークンを取り消す。 トークンを取り消すと、アドオンを再認証しない限り、アドオンにアクセスできなくなります。...", 
"body" : "アプリのチームのすべてのユーザーは、アプリのMeercodeアドオンへの独自のトークンを取り消すことができます。 に移動します 安全 個人アカウントのタブ。 スクロールして 承認されたアドオン 。 クリック 取り消す Meercodeへのアクセストークンを取り消す。 トークンを取り消すと、アドオンを再認証しない限り、アドオンにアクセスできなくなります。 " }, 
{ "title" : "Meercodeを無効にする ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/meercode.html#meercodeを無効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ Meercode \/ MeercodeとBitriseの統合 \/ Meercodeを無効にする ", 
"snippet" : "ワークスペース管理者のみが、アプリのメンバーのMeercodeアドオンを無効にできます。方法は次のとおりです。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 アドオン メニューオプションから。 クリック アドオンを無効にする Meercodeの横にあり、ポップアップウィンドウで確認します。 完了すると、管理者によって再度有効にされない限り、誰もアドオンにアクセスできなくなります。...", 
"body" : "ワークスペース管理者のみが、アプリのメンバーのMeercodeアドオンを無効にできます。方法は次のとおりです。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 アドオン メニューオプションから。 クリック アドオンを無効にする Meercodeの横にあり、ポップアップウィンドウで確認します。 完了すると、管理者によって再度有効にされない限り、誰もアドオンにアクセスできなくなります。 " }, 
{ "title" : "Meercodeを使用したビルドデータとインサイトへのアクセス ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/meercode.html#meercodeを使用したビルドデータとインサイトへのアクセス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ Meercode \/ Meercodeを使用したビルドデータとインサイトへのアクセス ", 
"snippet" : "ビルドを監視するには： Meercodeアカウントにログインします。 開ける [ダッシュボード]タブ 左側のメニューから、実行中のビルドと完了したビルドの概要を確認できます。 ページの上部に、ビルドがまだ進行中であることが表示されます。現在の期間と推定完了時間を監視できます。 その下に、完成したビルドがカードとして表示されます。すべてのカードで、過去10回の実行のビルドの完了ステータスとその他の情報を確認できます。 NS 共有 右上隅のボタンを使用すると、ダッシュボードを表示するためのパブリックリンクを作成できます。これらの秘密のリンクは、チームメンバーと安全に共有できます。 Meercode...", 
"body" : "ビルドを監視するには： Meercodeアカウントにログインします。 開ける [ダッシュボード]タブ 左側のメニューから、実行中のビルドと完了したビルドの概要を確認できます。 ページの上部に、ビルドがまだ進行中であることが表示されます。現在の期間と推定完了時間を監視できます。 その下に、完成したビルドがカードとして表示されます。すべてのカードで、過去10回の実行のビルドの完了ステータスとその他の情報を確認できます。 NS 共有 右上隅のボタンを使用すると、ダッシュボードを表示するためのパブリックリンクを作成できます。これらの秘密のリンクは、チームメンバーと安全に共有できます。 Meercodeのビルドインサイトにアクセスするには： を開きます インサイト タブをクリックして、過去のビルドデータから要約されたレポートにアクセスします。 ページ上部のフィルターを使用して、特定の日付範囲、プロバイダー、または組織の結果を制限します。 " }, 
{ "title" : "ビルドの詳細を確認する ", 
"url" : "ビルドとパイプライン/ビルドデータとトラブルシューティング/ビルドの詳細を確認する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルドとパイプライン \/ ビルドデータとトラブルシューティング \/ ビルドの詳細を確認する ", 
"snippet" : "ビルドの[詳細とアドオン]タブにアクセスすると、特定のビルドに関する追加の詳細を見つけることができます。 ビルドにアクセスすると、特定のビルドに関する追加の詳細を見つけることができます 詳細とアドオン タブ。 そうするために： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 を選択 詳細とアドオン タブ。 このタブにアクセスすると、ビルドに関する次の情報を見つけることができます。 でトリガー ：ビルドがトリガーされた正確な時刻、およびトリガーのソース（Webhookや人など） で開始 ：ビルドが開始された正確な時刻。これは通常、...", 
"body" : "ビルドの[詳細とアドオン]タブにアクセスすると、特定のビルドに関する追加の詳細を見つけることができます。 ビルドにアクセスすると、特定のビルドに関する追加の詳細を見つけることができます 詳細とアドオン タブ。 そうするために： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 を選択 詳細とアドオン タブ。 このタブにアクセスすると、ビルドに関する次の情報を見つけることができます。 でトリガー ：ビルドがトリガーされた正確な時刻、およびトリガーのソース（Webhookや人など） で開始 ：ビルドが開始された正確な時刻。これは通常、トリガーから数秒後です。 で終了 ：ビルドが終了した正確な時刻。 プルリクエストの説明 ：ビルドがプルリクエストによって開始された場合、ここに詳細が表示されます。それ以外の場合、このフィールドは非表示になります。 パラメーター ：コミットメッセージ、ブランチ名、コミットハッシュなど、複製されたgitブランチに関する情報。 タグ ：サブスクリプションプラン、ビルドがスケジュールされているかどうか、スタックとマシンタイプはすべてここにあります。 アドオン ビルドの詳細の横にあるこのタブでは、利用可能なすべてのアドオンを表示してアクセスできます。ここからアドオンにアクセスすることは、アプリからアドオンを開く場合と同じです。 アドオン タブ。 " }, 
{ "title" : "コード署名 ", 
"url" : "コード署名.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 ", 
"snippet" : "Bitriseのビルド中に、プラットフォームに関係なくアプリにデジタル署名できます。 Bitriseには、AndroidとiOSの両方のコード署名手順専用の手順があります。 コード署名は、署名後にコードが変更されていないことを保証する手段として、アプリにデジタル署名するプロセスです。展開のセキュリティを提供し、作成者を識別します。 モバイルアプリをGooglePlayやAppStoreなどのオンラインストアにデプロイするには、コード署名が非常に重要です。 Bitriseでは、できるだけ簡単で便利なものにするように努めました。 Appleサービス接続 APIキーを使用してAppleサービスに接続...", 
"body" : "Bitriseのビルド中に、プラットフォームに関係なくアプリにデジタル署名できます。 Bitriseには、AndroidとiOSの両方のコード署名手順専用の手順があります。 コード署名は、署名後にコードが変更されていないことを保証する手段として、アプリにデジタル署名するプロセスです。展開のセキュリティを提供し、作成者を識別します。 モバイルアプリをGooglePlayやAppStoreなどのオンラインストアにデプロイするには、コード署名が非常に重要です。 Bitriseでは、できるだけ簡単で便利なものにするように努めました。 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する ステップ入力でAppleサービスに接続する Apple認証が必要な手順 iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理 " }, 
{ "title" : "iOSコード署名 ", 
"url" : "コード署名.html#iosコード署名-78767", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 ", 
"snippet" : "ネイティブまたはクロスプラットフォームのすべてのiOSアプリには、コード署名が必要です。少なくとも、2つのファイルが必要です。 プロビジョニングプロファイル。 .p12証明書。...", 
"body" : "ネイティブまたはクロスプラットフォームのすべてのiOSアプリには、コード署名が必要です。少なくとも、2つのファイルが必要です。 プロビジョニングプロファイル。 .p12証明書。 " }, 
{ "title" : "自動および手動のコード署名資産管理 ", 
"url" : "コード署名.html#自動および手動のコード署名資産管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ 自動および手動のコード署名資産管理 ", 
"snippet" : "Bitriseはサポートします 自動および手動のコード署名資産管理 ： 自動コード署名資産管理をサポートするステップは、プロビジョニングプロファイルを自動的にダウンロードし、すでに設定されているAPIキーまたはAppleID接続を介して一般的な問題を修正します。 手動のコード署名資産管理の場合、コード署名証明書とプロビジョニングプロファイルを手動でBitriseにアップロードし、 証明書およびプロファイルインストーラー ビルドステップと一緒にステップします。...", 
"body" : "Bitriseはサポートします 自動および手動のコード署名資産管理 ： 自動コード署名資産管理をサポートするステップは、プロビジョニングプロファイルを自動的にダウンロードし、すでに設定されているAPIキーまたはAppleID接続を介して一般的な問題を修正します。 手動のコード署名資産管理の場合、コード署名証明書とプロビジョニングプロファイルを手動でBitriseにアップロードし、 証明書およびプロファイルインストーラー ビルドステップと一緒にステップします。 " }, 
{ "title" : "Androidコード署名 ", 
"url" : "コード署名.html#androidコード署名-78767", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ Androidコード署名 ", 
"snippet" : "Androidコード署名は、専用のステップ、Android Studio、またはGradle構成で処理できます。 Androidアプリに署名するには、GooglePlayデベロッパーアカウントとGooglePlayAPIアクセスを必要とするキーストアファイルが必要です。...", 
"body" : "Androidコード署名は、専用のステップ、Android Studio、またはGradle構成で処理できます。 Androidアプリに署名するには、GooglePlayデベロッパーアカウントとGooglePlayAPIアクセスを必要とするキーストアファイルが必要です。 " }, 
{ "title" : "Androidコード署名 ", 
"url" : "コード署名/androidコード署名.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ Androidコード署名 ", 
"snippet" : "Androidアプリを配布する前に Google Playストア 、APKまたはAABファイルはデジタル署名されている必要があります。専用のBitriseStepを使用するか、Gradle構成でコード署名を実行できます。 アプリを配布する前に Google Playストア 、APKファイルはデジタル署名されている必要があります。 プロジェクトのコード署名構成は、Android Studioで指定するか、Gradle構成で手動で指定できます。また、使用することができます Androidサイン Bitriseワークフローエディターにステップインして、APKに自動的に署名させます。 Androidア...", 
"body" : "Androidアプリを配布する前に Google Playストア 、APKまたはAABファイルはデジタル署名されている必要があります。専用のBitriseStepを使用するか、Gradle構成でコード署名を実行できます。 アプリを配布する前に Google Playストア 、APKファイルはデジタル署名されている必要があります。 プロジェクトのコード署名構成は、Android Studioで指定するか、Gradle構成で手動で指定できます。また、使用することができます Androidサイン Bitriseワークフローエディターにステップインして、APKに自動的に署名させます。 Androidアプリ入門 Androidの展開 " }, 
{ "title" : "Androidサインステップを使用したAndroidコード署名 ", 
"url" : "コード署名/androidコード署名/androidサインステップを使用したandroidコード署名.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ Androidコード署名 \/ Androidサインステップを使用したAndroidコード署名 ", 
"snippet" : "を使用して署名されたAPKを作成できます Androidサイン Bitriseワークフローにステップインします。このステップは、ワークフローエディターの[コード署名]タブにキーストアファイルを既にアップロードしている場合に実行するように構成されています。 を使用して署名されたAPKを作成できます Androidサイン ステップ あなたのBitriseで ワークフロー 。このステップは、キーストアファイルをすでにアップロードしている場合に実行するように構成されています。 コード署名 ワークフローエディタのタブ。 The Androidサイン プロジェクトで署名が構成されている場合は、手順は不要で...", 
"body" : "を使用して署名されたAPKを作成できます Androidサイン Bitriseワークフローにステップインします。このステップは、ワークフローエディターの[コード署名]タブにキーストアファイルを既にアップロードしている場合に実行するように構成されています。 を使用して署名されたAPKを作成できます Androidサイン ステップ あなたのBitriseで ワークフロー 。このステップは、キーストアファイルをすでにアップロードしている場合に実行するように構成されています。 コード署名 ワークフローエディタのタブ。 The Androidサイン プロジェクトで署名が構成されている場合は、手順は不要です。 build.gradle ファイル。もしそうなら、実行 Androidビルド ステップ（または Gradleランナー ステップ）出力（APKまたはAAB）に自動的に署名します。それでも、を使用することをお勧めします Androidサイン 簡単で安全な方法でプロジェクトに署名するステップ。 jarsignとapksigner APKはどちらかで署名できます jarsigner また apksigner 。 APKの場合、apksignerを使用してプロジェクトに署名する場合は、Androidの署名ステップで最初に有効化を設定する必要があります apksigner trueに入力し、APK署名スキーム入力を自動のままにします。こちらです apksigner APKの最小およびターゲットSDKバージョンをチェックし、必要なスキームを選択します。サポートされている最小バージョンが低い場合はV1スキームでプロジェクトに署名し、新しいシステムでは他のスキームでも署名します。 AABファイルはjarsignerでのみ署名できることに注意してください。ステップは使用します jarsigner で終わるファイルを検出した場合 .aab でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に移動 コード署名 >> Androidコード署名 。 キーストアファイルをにドラッグアンドドロップします ファイルをアップロードする のフィールド Androidキーストアファイル セクション。 キーストアファイルをアップロードすると、キーストアURLが自動的に生成されます。 Bitriseは環境変数を割り当てます（ BITRISEIO_ANDROID_KEYSTORE_URL ）値としてファイルのダウンロードURL（期間限定の読み取り専用ダウンロードURL）に。 Android Sign Stepが自動的にダウンロードするため、手動でダウンロードする必要はありません。 表示された3つの入力フィールドに資格情報を入力します。 キーストアのパスワード キーストアエイリアス 秘密鍵のパスワード クリック メタデータを保存する 。 キーストアファイルをANDROIDKEYSTORE FILEセクションに正常にアップロードすると、Bitriseは入力に基づいて次の環境変数を自動的にエクスポートします。 $BITRISEIO_ANDROID_KEYSTORE_ALIAS $BITRISEIO_ANDROID_KEYSTORE_PASSWORD $BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD $BITRISEIO_ANDROID_KEYSTORE_URL 追加します Androidサイン APKまたはAABファイルをビルドするステップの後にワークフローにステップします。 Bitriseは上記の環境変数を使用し、それらをのそれぞれのフィールドへの入力として設定します。 Androidサイン ステップ。ステップが実行されると、署名されたAPKまたはAABのいずれかが生成されます。署名されたAPKまたはAABは、デプロイ手順で使用されます。たとえば、 GooglePlayデプロイ ステップまたは Bitrise.ioにデプロイします ステップ。後者はAPK \/ AABをにデプロイします アプリとアーティファクト タブ。使用することもできます 船 APK \/ AABファイルを作成したら、アプリをデプロイします。 キーストアファイルのダウンロード キーストア ファイルは、ANDROID KEYSTORE FILE セクションからプロジェクト ディレクトリにダウンロードできます。 ファイルダウンローダ ステップ： - file-downloader:\n inputs:\n - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n - destination: \"$HOME\/keystores\/my_keystore.jks\" #native android# ステップでキーストア ファイルが必要な場合は、必ずそのステップを ファイルダウンローダ ステップ。 このステップの後、 my_keystore.jks で利用可能になります $HOME\/keystores\/my_keystore.jks 。 " }, 
{ "title" : "AndroidStudioを使用したAndroidコード署名 ", 
"url" : "コード署名/androidコード署名/androidstudioを使用したandroidコード署名.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ Androidコード署名 \/ AndroidStudioを使用したAndroidコード署名 ", 
"snippet" : "プロジェクトのコード署名構成は、で指定できます。 Android Studio Bitriseビルドを実行する前。キーストアファイル、キーエイリアス、およびキーパスワードが必要になります。 プロジェクトのコード署名構成は、で指定できます。 Android Studio 。キーストアファイル、キーエイリアス、およびキーパスワードが必要になります。手順を開始する前に、これらを準備してください。 AndroidStudioを開きます。 に移動 プロジェクトナビゲーター 。 プロジェクトを選択して開きます モジュール設定 。 から モジュール 、モジュールを選択します。 に 署名 タブで、署名情報を入...", 
"body" : "プロジェクトのコード署名構成は、で指定できます。 Android Studio Bitriseビルドを実行する前。キーストアファイル、キーエイリアス、およびキーパスワードが必要になります。 プロジェクトのコード署名構成は、で指定できます。 Android Studio 。キーストアファイル、キーエイリアス、およびキーパスワードが必要になります。手順を開始する前に、これらを準備してください。 AndroidStudioを開きます。 に移動 プロジェクトナビゲーター 。 プロジェクトを選択して開きます モジュール設定 。 から モジュール 、モジュールを選択します。 に 署名 タブで、署名情報を入力します。この例では、次の値を使用しました。 名前： release キーエイリアス： MyAndroidKey キーパスワード： *** ファイルの保存： \/path\/to\/my\/keystore.jks パスワードの保存： *** 署名情報を入力すると、 signingConfigs ブロックはモジュールのに作成されます build.gradle ファイル。 Bitriseでは、アプリをビルドする必要があります。 Androidビルド または Gradleランナー ステップ。 " }, 
{ "title" : "GradleでのAndroidコード署名 ", 
"url" : "コード署名/androidコード署名/gradleでのandroidコード署名.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ Androidコード署名 \/ GradleでのAndroidコード署名 ", 
"snippet" : "Gradle構成でコード署名構成を手動で指定して、Bitriseでのビルドプロセス中にアプリが署名されるようにすることができます。 Gradle構成でコード署名構成を手動で指定して、ビルドプロセス中にアプリが署名されるようにすることができます。 モジュールレベルを開く build.gradle ファイル。 追加します signingConfigs コードをコードブロックし、プロジェクトに固有の次のエントリを定義します。 storeFiled storePassword keyAlias keyPassword 署名構成をビルドタイプに添付します。 Bitriseでアプリを作成します。 詳細につ...", 
"body" : "Gradle構成でコード署名構成を手動で指定して、Bitriseでのビルドプロセス中にアプリが署名されるようにすることができます。 Gradle構成でコード署名構成を手動で指定して、ビルドプロセス中にアプリが署名されるようにすることができます。 モジュールレベルを開く build.gradle ファイル。 追加します signingConfigs コードをコードブロックし、プロジェクトに固有の次のエントリを定義します。 storeFiled storePassword keyAlias keyPassword 署名構成をビルドタイプに添付します。 Bitriseでアプリを作成します。 詳細については、方法を確認してください アプリに署名するようにGradleを構成する 。 build.gradleファイルの構成に署名する この例では、キーストアパスはローカルとオンで同じパスを持つ必要があります bitrise.io ビルドがキーストアファイルを使用できることを確認します。 android {\n \/\/ Make sure signingConfigs is defined before buildTypes.\n signingConfigs { \n \t release { \n \t keyAlias 'MyAndroidKey' \n keyPassword '***' \n storeFile file(\"\/path\/to\/my\/keystore.jks\") \n storePassword '***' \n } \n } \n \n\n buildTypes {\n release {\n \/\/ Use signing config for build type\n signingConfig signingConfigs.release\n \/\/ ...\n }\n }\n \/\/ ... build.gradleファイルでの環境変数の使用 ローカルとオンで同じキーストアパスを持つことを回避できます bitrise.io キーストアパスで構成値と環境変数を使用する（ storeFile ）およびキーストアのパスワード。 あなたは使用することができます System.getenv(\"ENV_KEY\") 内の環境変数にアクセスするためのファイル build.gradle ファイル。で使用する環境変数を必ず定義してください build.gradle 上のファイル bitrise.io 同様に。 キーストアパスが $HOME\/keystores\/my_keystore.jks 、次にあなたの build.gradle ファイルは次のようになります。 android { \n signingConfigs { \n \t release { \n \t keyAlias 'MyAndroidKey' \n keyPassword '***' \n storeFile file(System.getenv(\"HOME\") + \"\/keystores\/my_keystore.jks\")\n storePassword '***' \n } \n } ... その後、キーストアファイルをダウンロードできます ファイルダウンローダーステップの使用 、を使用して $HOME\/keystores\/my_keystore.jks 宛先パスとして。 環境変数を次のように使用する場合 keyPassword と storePassword に コード署名 タブ、あなたの build.gradle 次のようになります。 android {\n signingConfigs {\n release {\n keyAlias System.getenv(\"BITRISEIO_ANDROID_KEYSTORE_ALIAS\")\n keyPassword System.getenv(\"BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD\")\n storeFile file(System.getenv(\"HOME\") + \"\/keystores\/my_keystore.jks\")\n storePassword System.getenv(\"BITRISEIO_ANDROID_KEYSTORE_PASSWORD\")\n }\n }\n \n buildTypes {\n release {\n \/\/ Use signing config for build type\n signingConfig signingConfigs.release\n \/\/ ...\n }\n }\n ... キーストアをにアップロードすると、これらの環境変数を取得します。 一般的なファイルストレージ のフィールド コード署名 ワークフローエディタのタブ。 " }, 
{ "title" : "キーストアファイルのダウンロード ", 
"url" : "コード署名/androidコード署名/キーストアファイルのダウンロード.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ Androidコード署名 \/ キーストアファイルのダウンロード ", 
"snippet" : "でAndroidアプリのキーストアファイルの場所を定義できます build.gradle ファイル。キーストアファイル自体が場所にない場合は、ファイルダウンロード手順の1つを使用して、Bitriseからキーストアファイルをダウンロードし、定義された場所に配置できます。 Androidコード署名にはキーストアファイルが必要です。でAndroidアプリのキーストアファイルの場所を定義できます build.gradle ファイル。キーストアファイル自体が場所にない場合は、ファイルダウンロード手順の1つを使用して、Bitriseからキーストアファイルをダウンロードし、定義された場所に配置できます。 B...", 
"body" : "でAndroidアプリのキーストアファイルの場所を定義できます build.gradle ファイル。キーストアファイル自体が場所にない場合は、ファイルダウンロード手順の1つを使用して、Bitriseからキーストアファイルをダウンロードし、定義された場所に配置できます。 Androidコード署名にはキーストアファイルが必要です。でAndroidアプリのキーストアファイルの場所を定義できます build.gradle ファイル。キーストアファイル自体が場所にない場合は、ファイルダウンロード手順の1つを使用して、Bitriseからキーストアファイルをダウンロードし、定義された場所に配置できます。 Bitriseには、ファイルをダウンロードする2つのステップがあります。 コード署名 タブ。ワークフローでどちらを使用するかは、キーストアファイルをどこにアップロードしたかによって異なります。 コード署名 タブ： ファイルダウンローダー 手順：キーストアファイルをにアップロードした場合 Androidキーストアファイル キーストアファイルの推奨される場所であるセクション。これは、使用する必要のあるステップです。ファイルがアップロードされると、Bitriseは環境変数を割り当てます（ BITRISEIO_ANDROID_KEYSTORE_URL ）ファイルのダウンロードURL（期間限定の読み取り専用ダウンロードURL）を値として指定します。 汎用ファイルストレージ 手順：キーストアファイルをにアップロードした場合 一般的なファイルストレージ のセクション コード署名 タブ、これはあなたが使用すべきステップです。 Bitriseは環境変数を割り当てます（ $GENERIC_FILE_STORAGE ）ファイルのダウンロードURL（期間限定の読み取り専用ダウンロードURL）を値として指定します。で環境変数を使用する場合 build.gradle ファイル、あなたは使用することができます 脚本 環境変数の値を、で定義された宛先パスで上書きする手順 $GENERIC_FILE_STORAGE 環境変数。必ず使用してください envman 単純なエクスポートだけではありません。 いずれかを追加します ファイルダウンローダー または 汎用ファイルストレージ ワークフローに進みます。ステップは、前に追加する必要があります Gradleランナー ステップ。 あなたが使用する場合 ファイルダウンローダー ステップ、次の2つの入力フィールドに入力します。 ソースURLをダウンロード ：ファイルをにアップロードするときに取得する生成されたキーストアURLを設定します Androidキーストアファイル のセクション コード署名 タブ）。 宛先パスをダウンロードする ：キーストアファイルの場所を相対パスとして設定します。このパスは、ですでに定義されているキーストアパスと同じである必要があります build.gradle ファイル（たとえば、 $HOME\/keystores\/project_release.keystore ）。 追加します Gradleランナー ファイルのダウンロードステップの直後にステップします。 そうは言っても、キーストアファイルをで指定したのと同じ場所にダウンロードする手順を正常に追加した場合 build.gradle ファイル、あなたは必要ありません Androidサイン ワークフローにステップインします。私たちの Gradleランナー ステップはあなたのプロジェクトに署名して組み立てます。 " }, 
{ "title" : "iOSコード署名 ", 
"url" : "コード署名/iosコード署名.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 ", 
"snippet" : "iOSアプリを新しいデバイスにインストールしたり、アプリをApp Storeに配布したりするには、コード署名ファイルを提供する必要があります。 iOSプロジェクトのコード署名には、Appleが発行した証明書に署名し、プロジェクトに一致するプロファイルファイルをプロビジョニングする必要があります。 iOSアプリを新しいデバイスにインストールする、または アプリをAppStoreに配布する 、コード署名ファイルを提供する必要があります。 iOSプロジェクトのコード署名には以下が必要です。 証明書への署名 .p12形式で。 プロビジョニングプロファイル プロジェクトに一致するファイル（チームID、バ...", 
"body" : "iOSアプリを新しいデバイスにインストールしたり、アプリをApp Storeに配布したりするには、コード署名ファイルを提供する必要があります。 iOSプロジェクトのコード署名には、Appleが発行した証明書に署名し、プロジェクトに一致するプロファイルファイルをプロビジョニングする必要があります。 iOSアプリを新しいデバイスにインストールする、または アプリをAppStoreに配布する 、コード署名ファイルを提供する必要があります。 iOSプロジェクトのコード署名には以下が必要です。 証明書への署名 .p12形式で。 プロビジョニングプロファイル プロジェクトに一致するファイル（チームID、バンドルIDなど）。 自動および手動のコード署名資産管理に利用可能な手順の概要 Bitriseステップ iOS用のXcodeアーカイブエクスポート、iOSおよびtvOS用のエクスポートXcodeアーカイブ、iOS用のテスト用のXcodeビルド iOSコード署名を管理する はい（Apple IDを使用） はい（Apple IDを使用） はい（Appleへの接続は必要ありません） Apple接続が必要ですか？ はい（Apple IDを使用） はい（Apple IDを使用） App StoreConnectAPIキーまたはAppleIDをBitriseに接続することはできません。 コード署名ファイルを独自の方法で保存または処理します。 複数のAppleDeveloperアカウントからのコード署名ファイルを使用したい。 はい（Apple IDまたはAPIキー） iOSアプリ入門 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する iOSの展開 外部テスト用のiOSアプリのデプロイ iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理 " }, 
{ "title" : "codesigndocを使用したコード署名ファイルの収集とエクスポート ", 
"url" : "コード署名/iosコード署名/codesigndocを使用したコード署名ファイルの収集とエクスポート.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用したコード署名ファイルの収集とエクスポート ", 
"snippet" : "オープンソースのcodesigndocツールは、Mac上でクリーンなXcodeアーカイブを実行し、生成されたアーカイブファイルを分析します。 Xcodeがアーカイブプロセス中に使用したコード署名設定を収集し、必要なコード署名ファイルのリストを印刷します。 codesigndocを使用して、これらのファイルを検索、エクスポート、およびアップロードすることもできます。 オープンソース codesigndoc ツールは、Mac上でクリーンなXcode \/ Xamarin Studioアーカイブを実行し、生成されたアーカイブファイルを分析します。 XcodeまたはXamarinStudioがアーカイブ...", 
"body" : "オープンソースのcodesigndocツールは、Mac上でクリーンなXcodeアーカイブを実行し、生成されたアーカイブファイルを分析します。 Xcodeがアーカイブプロセス中に使用したコード署名設定を収集し、必要なコード署名ファイルのリストを印刷します。 codesigndocを使用して、これらのファイルを検索、エクスポート、およびアップロードすることもできます。 オープンソース codesigndoc ツールは、Mac上でクリーンなXcode \/ Xamarin Studioアーカイブを実行し、生成されたアーカイブファイルを分析します。 XcodeまたはXamarinStudioがアーカイブプロセス中に使用したコード署名設定を収集し、必要なコード署名ファイルのリストを出力します。これらのファイルを使用して、これらのファイルを検索、エクスポート、およびアップロードすることもできます。 codesigndoc 。 プロジェクトにUITestターゲットが含まれている場合、codesigndocはそれらもスキャンできます。それは実行されます xcodebuild build-for-testing 作成するアクション test-Runner.app 、および必要なコード署名ファイルをエクスポートします。 " }, 
{ "title" : "codesigndocを使用してファイルを収集およびアップロードする ", 
"url" : "コード署名/iosコード署名/codesigndocを使用したコード署名ファイルの収集とエクスポート.html#codesigndocを使用してファイルを収集およびアップロードする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用したコード署名ファイルの収集とエクスポート \/ codesigndocを使用してファイルを収集およびアップロードする ", 
"snippet" : "あなたが使用することができます codesigndoc にとって： Xcodeプロジェクト。 アプリはネイティブiOSアプリである必要はありません。Flutterなどのサードパーティフレームワークで構築されたアプリでツールを使用できます。 .xcodeproj また .xcworkspace ファイル。 あなたはインストールすることができます codesigndocの最新バージョン シンプルなワンライナーを使用するか、使用する特定のバージョンを手動でダウンロードしてインストールできます。 以下の例では、ワンライナーを使用します。 を開きます Terminal 。 プロジェクトのフォルダーに移動...", 
"body" : "あなたが使用することができます codesigndoc にとって： Xcodeプロジェクト。 アプリはネイティブiOSアプリである必要はありません。Flutterなどのサードパーティフレームワークで構築されたアプリでツールを使用できます。 .xcodeproj また .xcworkspace ファイル。 あなたはインストールすることができます codesigndocの最新バージョン シンプルなワンライナーを使用するか、使用する特定のバージョンを手動でダウンロードしてインストールできます。 以下の例では、ワンライナーを使用します。 を開きます Terminal 。 プロジェクトのフォルダーに移動します。 プロジェクトの種類に応じて、適切なワンライナーコマンドを入力します。 のために Xcode 事業： bash -l -c \"$(curl -sfL https:\/\/raw.githubusercontent.com\/bitrise-io\/codesigndoc\/master\/_scripts\/install_wrap-xcode.sh)\" ツールは自動的にプロジェクトをスキャンし、 .xcodeproj また .xcworkspace ファイルして残りを行います。 スキャナーがファイルを見つけられない場合は、 Finder.app プロジェクトのをドラッグアンドドロップします .xcodeproj また .xcworkspace ターミナルのコマンドラインにファイルします。 コード署名ファイルが収集されると、 codesigndoc ファイルをBitriseにアップロードするかどうかを尋ねられます。 Do you want to upload the provisioning profiles and certificates to Bitrise? [yes\/no] : でファイルをアップロードしたい場合 codesigndoc 、 タイプ yes を押して 入力 。 Bitriseアクセストークンを提供します。 Please copy your personal access token to Bitrise.\n(To acquire a Personal Access Token for your user, sign in with that user on bitrise.io,\ngo to your Account Settings page, and select the Security tab on the left side.) : パーソナルアクセストークン収集されたファイルのターゲットとしてBitriseプロジェクトを選択します。 Fetching your application list from Bitrise...\nSelect the app which you want to upload the provisioning profiles\nPlease select from the list:\n 以上で完了です。 自動コード署名資産管理 自動コード署名資産管理の場合、コード署名と構築の手順の1つを使用することをお勧めします。 iOS用のXcodeアーカイブとエクスポート 。 iOSおよびtvOSXcodeアーカイブ用にエクスポート 。 iOS用のテスト用のXcodeビルド 。 インストールして実行することもできます codesigndoc 手動で。詳細については、 ツールのReadme ！ " }, 
{ "title" : "UITestターゲットのスキャン ", 
"url" : "コード署名/iosコード署名/codesigndocを使用したコード署名ファイルの収集とエクスポート.html#uitestターゲットのスキャン", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用したコード署名ファイルの収集とエクスポート \/ UITestターゲットのスキャン ", 
"snippet" : "XcodeプロジェクトにUITestターゲットがある場合は、codesigndocを使用して、必要なコード署名ファイルをエクスポートし、 .xctestrun ファイル。 Bitriseを使用して実際のデバイスでUIテストを実行する場合は、これを行う必要があります。 iOSデバイスのテスト ステップ。 あなたが持っているスキームを持っていることを確認してください 有効なUITestターゲット それが有効になっています。 を開きます Terminal 。 ワンライナーを使用してスキャナーを起動し、必要なコード署名ファイルをエクスポートします。 bash -l -c \"$(curl -sfL ht...", 
"body" : "XcodeプロジェクトにUITestターゲットがある場合は、codesigndocを使用して、必要なコード署名ファイルをエクスポートし、 .xctestrun ファイル。 Bitriseを使用して実際のデバイスでUIテストを実行する場合は、これを行う必要があります。 iOSデバイスのテスト ステップ。 あなたが持っているスキームを持っていることを確認してください 有効なUITestターゲット それが有効になっています。 を開きます Terminal 。 ワンライナーを使用してスキャナーを起動し、必要なコード署名ファイルをエクスポートします。 bash -l -c \"$(curl -sfL https:\/\/raw.githubusercontent.com\/bitrise-tools\/codesigndoc\/master\/_scripts\/install_wrap-xcode-uitests.sh)\" このコマンドは、 xcodebuild build-for-testing UITestランナーの.appファイルを作成し、必要なコード署名ファイルをエクスポートするアクション。 codesigndocを使用してファイルをBitriseにアップロードします。 " }, 
{ "title" : "UITestスキャナーのトラブルシューティング ", 
"url" : "コード署名/iosコード署名/codesigndocを使用したコード署名ファイルの収集とエクスポート.html#uitestスキャナーのトラブルシューティング", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用したコード署名ファイルの収集とエクスポート \/ UITestスキャナーのトラブルシューティング ", 
"snippet" : "UITestスキャナーが目的のスキームを見つけられない場合は、次の手順に従ってください。 スキームがUITestの実行に有効であることを確認してください。 実行が有効になっているUITestターゲットが含まれている必要があります。 プロジェクト設定を更新します。 を選択 一般的なiOSデバイス Xcodeでのスキームのターゲット。 プロジェクトをクリーンアップします。 ⌘ Cmd + ↑ Shift + K 。 テスト用のビルドを実行します。 ⌘ Cmd + ↑ Shift + U 。 走る codesigndoc また。...", 
"body" : "UITestスキャナーが目的のスキームを見つけられない場合は、次の手順に従ってください。 スキームがUITestの実行に有効であることを確認してください。 実行が有効になっているUITestターゲットが含まれている必要があります。 プロジェクト設定を更新します。 を選択 一般的なiOSデバイス Xcodeでのスキームのターゲット。 プロジェクトをクリーンアップします。 ⌘ Cmd + ↑ Shift + K 。 テスト用のビルドを実行します。 ⌘ Cmd + ↑ Shift + U 。 走る codesigndoc また。 " }, 
{ "title" : "codesigndocを手動でインストールして使用する ", 
"url" : "コード署名/iosコード署名/codesigndocを使用したコード署名ファイルの収集とエクスポート.html#codesigndocを手動でインストールして使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用したコード署名ファイルの収集とエクスポート \/ codesigndocを手動でインストールして使用する ", 
"snippet" : "手動インストールでは、使用するcodesigndocのバージョンを指定できます。上記で使用したワンライナーとは異なり、手動インストールでは自動的に実行されません。 scan 使用するフォルダ内のコマンド：ツールをインストールするだけです。 で利用可能なバージョンを確認してください codesigndocのリリースページ 道具。 を実行して、必要なリリースをダウンロードします curl 指図： 注：VERSIONNUMBERを、必要なcodesigndocバージョンの実際の番号に置き換えてください。 curl -sfL https:\/\/github.com\/bitrise-io\/codesign...", 
"body" : "手動インストールでは、使用するcodesigndocのバージョンを指定できます。上記で使用したワンライナーとは異なり、手動インストールでは自動的に実行されません。 scan 使用するフォルダ内のコマンド：ツールをインストールするだけです。 で利用可能なバージョンを確認してください codesigndocのリリースページ 道具。 を実行して、必要なリリースをダウンロードします curl 指図： 注：VERSIONNUMBERを、必要なcodesigndocバージョンの実際の番号に置き換えてください。 curl -sfL https:\/\/github.com\/bitrise-io\/codesigndoc\/releases\/download\/VERSIONNUMBER\/codesigndoc-Darwin-x86_64 > .\/codesigndoc ダウンロードしたバイナリを実行可能にします。 chmod +x .\/codesigndoc いつでもスキャンコマンドを実行できます。 ## Xcode scanner\n.\/codesigndoc scan xcode\n\n## Xcode project scanner for UI test targets\n.\/codesigndoc scan xcodeuitests\n " }, 
{ "title" : "codesigndocを使用するためのベストプラクティス ", 
"url" : "コード署名/iosコード署名/codesigndocを使用したコード署名ファイルの収集とエクスポート.html#codesigndocを使用するためのベストプラクティス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用したコード署名ファイルの収集とエクスポート \/ codesigndocを使用するためのベストプラクティス ", 
"snippet" : "実行すると最も正確な結果が得られます codesigndoc クリーンアップ後に利用可能なリポジトリ\/コードの同じ状態で git clone 、ビルドサーバーがコードをチェックアウトした後のコードの状態になります（たとえば、Macにファイルがある可能性があります） .gitignore 、したがって、Macには存在しますが、リポジトリには存在しません。 git clone 新しいMacの場合）。 したがって、最良の結果を得るには、次のことをお勧めします。 きれいにする git clone Mac上のリポジトリの（新しいディレクトリへの）。 走る codesigndoc このディレクトリ内（通常...", 
"body" : "実行すると最も正確な結果が得られます codesigndoc クリーンアップ後に利用可能なリポジトリ\/コードの同じ状態で git clone 、ビルドサーバーがコードをチェックアウトした後のコードの状態になります（たとえば、Macにファイルがある可能性があります） .gitignore 、したがって、Macには存在しますが、リポジトリには存在しません。 git clone 新しいMacの場合）。 したがって、最良の結果を得るには、次のことをお勧めします。 きれいにする git clone Mac上のリポジトリの（新しいディレクトリへの）。 走る codesigndoc このディレクトリ内（通常プロジェクトで作業するディレクトリ内ではありません）。 また、最初にローカルマシンでIPAを生成して、実行することをお勧めします codesigndoc その後 。その理由は、XcodeがIPAエクスポート中にバックグラウンドでプロファイルをダウンロードまたは更新する可能性があるためです。あなたが実行する場合 codesigndoc XcodeからIPAをエクスポートした後、 codesigndoc すべてのファイルを収集できるようになります。 " }, 
{ "title" : "iOSコード署名ファイルの管理-自動プロビジョニング ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの管理-自動プロビジョニング.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの管理-自動プロビジョニング ", 
"snippet" : "自動コード署名とは、AppleDeveloperPortalアカウントで利用可能なプロビジョニングプロファイルを自動的に管理することを意味します。 Appleアカウントに何らかの形式の認証を設定すると、Bitriseはビルドプロセス中にアプリのプロビジョニングプロファイルをダウンロードしてインストールできます。 Bitrise では、iOS のコード署名をできるだけ簡単にすることを目指しています。そのため、多くのプロセスを自動化するために最善を尽くしました。私たちのいくつかの 手順 自動コード署名管理の組み込みオプションがあり、構成がより合理化されます。 このコンテキストでの自動コード署名とは...", 
"body" : "自動コード署名とは、AppleDeveloperPortalアカウントで利用可能なプロビジョニングプロファイルを自動的に管理することを意味します。 Appleアカウントに何らかの形式の認証を設定すると、Bitriseはビルドプロセス中にアプリのプロビジョニングプロファイルをダウンロードしてインストールできます。 Bitrise では、iOS のコード署名をできるだけ簡単にすることを目指しています。そのため、多くのプロセスを自動化するために最善を尽くしました。私たちのいくつかの 手順 自動コード署名管理の組み込みオプションがあり、構成がより合理化されます。 このコンテキストでの自動コード署名とは、Apple Developer Portal アカウントで利用可能なプロビジョニング プロファイルを自動的に管理することを意味します。 Apple アカウントに何らかの形式の認証を設定した場合、Bitrise はプロビジョニング プロファイルをダウンロードしてインストールできます。 アプリ ビルドプロセス中。 iOSの自動プロビジョニングを設定するには、次のことを行う必要があります。 コード署名証明書を Bitrise にアップロードします。 Apple Developer Portal アカウントを Bitrise に接続するには、 Apple ID または App Store Connect API . コード署名アセットの自動管理をサポートするステップの 1 つを使用します。 " }, 
{ "title" : "iOSコード署名証明書をBitriseにアップロードする ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの管理-自動プロビジョニング.html#iosコード署名証明書をbitriseにアップロードする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの管理-自動プロビジョニング \/ iOSコード署名証明書をBitriseにアップロードする ", 
"snippet" : "すべてのiOSコード署名方法では、iOSコード署名証明書をBitriseにエクスポートしてアップロードする必要があります。 コード署名ファイルの生成 必要なコード署名ファイルの準備ができていない場合は、新しいファイルを生成できます。 iOSコード署名ファイルの生成証明書をBitriseにアップロードするには、最初にファイルを.p12ファイル形式でエクスポートする必要があります。これは手動で行うか、Bitriseのオープンソースを使用して行うことができます。 codesigndoc 道具。ファイルを正常にエクスポートしたら、それらをBitriseにアップロードする必要があります。 3つのオプショ...", 
"body" : "すべてのiOSコード署名方法では、iOSコード署名証明書をBitriseにエクスポートしてアップロードする必要があります。 コード署名ファイルの生成 必要なコード署名ファイルの準備ができていない場合は、新しいファイルを生成できます。 iOSコード署名ファイルの生成証明書をBitriseにアップロードするには、最初にファイルを.p12ファイル形式でエクスポートする必要があります。これは手動で行うか、Bitriseのオープンソースを使用して行うことができます。 codesigndoc 道具。ファイルを正常にエクスポートしたら、それらをBitriseにアップロードする必要があります。 3つのオプションがあります。 API呼び出しを介して 。 codesigndocを使用する 。 ワークフローエディタで手動でアップロードします。このガイドでは、このオプションに焦点を当てています。 ディストリビューションと開発署名証明書をアップロードします プロジェクトの開発署名証明書と配布署名証明書の両方をアップロードすることを強くお勧めします。アップロードされた開発署名証明書がない場合は、ビルドを開始するたびに、自動プロビジョニング オプションを使用するステップによってオンザフライで生成されます。これにより、最終的に証明書の最大数に達し、新しいビルドを開始できなくなる可能性があります。 証明書をエクスポートしてワークフローエディターのBitriseにアップロードするには： .p12証明書がエクスポートされ、準備ができていることを確認してください。次の2つのオプションのいずれかを使用して、ファイルをエクスポートできます。 iOSコード署名証明書を手動でエクスポートする. codesigndocを使用したコード署名ファイルの収集とエクスポート. でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ。 で.p12証明書をドラッグアンドドロップまたはクリックします 署名用の秘密鍵（.p12）を追加します 分野。 " }, 
{ "title" : "自動プロビジョニングのためのAppleサービス認証 ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの管理-自動プロビジョニング.html#自動プロビジョニングのためのappleサービス認証", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの管理-自動プロビジョニング \/ 自動プロビジョニングのためのAppleサービス認証 ", 
"snippet" : "組み込みの自動化されたiOSコード署名オプションを提供するBitriseStepsを利用するには、セットアップする必要があります Appleサービス認証 。これらのステップには、2つのオプションがあります。 iOSコード署名用のAppleサービス認証オプション 認証方法 使い方 いつ使用するか APIキー認証 （おすすめされた） APIキーを使用してAppStoreConnectアカウントをBitriseに接続します。 Apple Developer Enterprise Programのアカウントを使用している場合を除き、このオプションを使用することをお勧めします。 API キーを作成するオ...", 
"body" : "組み込みの自動化されたiOSコード署名オプションを提供するBitriseStepsを利用するには、セットアップする必要があります Appleサービス認証 。これらのステップには、2つのオプションがあります。 iOSコード署名用のAppleサービス認証オプション 認証方法 使い方 いつ使用するか APIキー認証 （おすすめされた） APIキーを使用してAppStoreConnectアカウントをBitriseに接続します。 Apple Developer Enterprise Programのアカウントを使用している場合を除き、このオプションを使用することをお勧めします。 API キーを作成するオプションが表示されず、リクエスト アクセスがグレー表示されている場合は、アカウント所有者に連絡して、API 認証を使用するための Apple との使用許諾契約に同意する必要があります。 AppleID認証 AppleIDをBitriseに接続します。 Appleアカウントで2要素認証が有効になっている場合は、このプロセス中にアプリ固有のパスワードを入力する必要があります。認証は30日で期限切れになり、接続を更新する必要があります。 このソリューションは、次の場合にのみ使用してください。 何らかの理由でAPIキーにアクセスできません。 Apple DeveloperEnterpriseProgramのアカウントを使用しています。 使用を検討することもできます 手動プロビジョニング 。 " }, 
{ "title" : "自動プロビジョニングの手順の構成 ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの管理-自動プロビジョニング.html#自動プロビジョニングの手順の構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの管理-自動プロビジョニング \/ 自動プロビジョニングの手順の構成 ", 
"snippet" : "Bitrise で自動プロビジョニングを処理するには 2 つの方法があります。 コード署名ファイルの管理とアプリのビルドの両方が可能な公式の Xcode ステップを使用します。 を使用して iOS コード署名の管理 ステップ。 表1「 では、2 つの方法のユース ケースについて説明します。必要なステップを構成できるようにするには、次のいずれかを確認してください。 Xcodeステップの使用iOSコード署名の管理ステップの使用証明書とプロファイルのインストーラーの手順は使用しないでください 自動プロビジョニングを使用する場合は、を使用する必要はありません。 証明書とプロファイルのインストーラー ス...", 
"body" : "Bitrise で自動プロビジョニングを処理するには 2 つの方法があります。 コード署名ファイルの管理とアプリのビルドの両方が可能な公式の Xcode ステップを使用します。 を使用して iOS コード署名の管理 ステップ。 表1「 では、2 つの方法のユース ケースについて説明します。必要なステップを構成できるようにするには、次のいずれかを確認してください。 Xcodeステップの使用iOSコード署名の管理ステップの使用証明書とプロファイルのインストーラーの手順は使用しないでください 自動プロビジョニングを使用する場合は、を使用する必要はありません。 証明書とプロファイルのインストーラー ステップ。 自動プロビジョニングオプションの手順 手順 それらがどのように機能するか いつ使用するか Xcodeの手順： iOS用のXcodeアーカイブとエクスポート iOSおよびtvOSXcodeアーカイブをエクスポートする iOS用のテスト用のXcodeビルド これらの手順では、ほぼゼロの構成でXcodeプロジェクトにコード署名を自動的に設定します。 ほとんどのシナリオでこれらの手順を使用することをお勧めします。 iOSコード署名を管理する ステップ このステップでは、ビルドを実行する前に、Xcodeプロジェクトでコード署名を設定します。 この専用のステップは、次の場合に使用できます。 スクリプトまたはファストレーンからアプリを構築しています。 クロスプラットフォームプロジェクトがあります。たとえば、React Native、Flutter、Ionic、Cordovaなどです。 あなたはmacOSアプリを構築しています。 " }, 
{ "title" : "Xcodeステップの使用 ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの管理-自動プロビジョニング.html#xcodeステップの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの管理-自動プロビジョニング \/ 自動プロビジョニングの手順の構成 \/ Xcodeステップの使用 ", 
"snippet" : "コード署名アセットの自動管理が組み込まれているXcodeステップのいずれかを使用できます。 Apple サービスへの接続を設定します。 から選択できます API キー認証 また Apple ID認証 .通常は API キー認証をお勧めします。 必要に応じて、次の手順のいずれかをワークフローに追加します。 iOS用のXcodeアーカイブとエクスポート ：Xcodeアプリをビルドし、選択したタイプのIPAをエクスポートします。 iOSおよびtvOSXcodeアーカイブをエクスポートする ：既存のアーカイブからIPAをエクスポートします。 iOS用のテスト用のXcodeビルド ：Xcodeアプリを ...", 
"body" : "コード署名アセットの自動管理が組み込まれているXcodeステップのいずれかを使用できます。 Apple サービスへの接続を設定します。 から選択できます API キー認証 また Apple ID認証 .通常は API キー認証をお勧めします。 必要に応じて、次の手順のいずれかをワークフローに追加します。 iOS用のXcodeアーカイブとエクスポート ：Xcodeアプリをビルドし、選択したタイプのIPAをエクスポートします。 iOSおよびtvOSXcodeアーカイブをエクスポートする ：既存のアーカイブからIPAをエクスポートします。 iOS用のテスト用のXcodeビルド ：Xcodeアプリを build-for-testing アクション。 をセットする 自動コード署名方法 設定した Apple サービス認証タイプに入力します。 たとえば、API キー認証を選択した場合は、 API キー オプション。 コード署名方法を設定する YAML の例 この例では、 Xcode アーカイブおよび iOS 用エクスポート ステップは API キー認証を使用するように設定されています。 - xcode-archive@4: \n inputs: \n - automatic_code_signing: api-key ほとんどの場合、Apple 接続を正しく設定すれば、他のすべての入力のデフォルト値で十分です。 " }, 
{ "title" : "iOSコード署名の管理ステップの使用 ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの管理-自動プロビジョニング.html#iosコード署名の管理ステップの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの管理-自動プロビジョニング \/ 自動プロビジョニングの手順の構成 \/ iOSコード署名の管理ステップの使用 ", 
"snippet" : "Xcodeステップのいずれかを使用してiOSアプリを構築していない場合、またはクロスプラットフォームアプリを使用している場合は、コード署名アセットを自動的に管理するための専用のステップを使用してください。 追加します iOSコード署名を管理する 依存関係インストーラーの後のステップワークフローのステップ（次のような） CocoaPodsインストールを実行します また カルタゴ 。 をセットする 自動コード署名 使用するAppleサービス接続への入力。 あなたはから選ぶことができます APIキー認証 また AppleID認証 。 Apple ID認証を使用する場合は、チームIDも次のように入力す...", 
"body" : "Xcodeステップのいずれかを使用してiOSアプリを構築していない場合、またはクロスプラットフォームアプリを使用している場合は、コード署名アセットを自動的に管理するための専用のステップを使用してください。 追加します iOSコード署名を管理する 依存関係インストーラーの後のステップワークフローのステップ（次のような） CocoaPodsインストールを実行します また カルタゴ 。 をセットする 自動コード署名 使用するAppleサービス接続への入力。 あなたはから選ぶことができます APIキー認証 また AppleID認証 。 Apple ID認証を使用する場合は、チームIDも次のように入力する必要があります。 開発者ポータルチームID 入力。 この手順の後で、Xcodeプロジェクトを変更しないでください。 たとえば、バンドルIDは変更しないでください。 アプリをビルドしてアーカイブするステップを追加します。 追い越し車線 ステップ。 " }, 
{ "title" : "iOSコード署名ファイルの管理-手動プロビジョニング ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの管理-手動プロビジョニング.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの管理-手動プロビジョニング ", 
"snippet" : "コード署名ファイルを手動で管理するには、.p12署名証明書とアプリのプロビジョニングプロファイルをBitriseにアップロードする必要があります。これを行うには複数の方法があります。 コード署名ファイルを手動で管理するには、.p12署名証明書と アプリの Bitriseへのプロファイルのプロビジョニング。 手動プロビジョニングを設定するには、少なくとも開発者証明書と開発タイプのプロビジョニングプロファイルを常にアップロードする必要があります。これは、Xcodeステップでアプリを適切にテストおよびビルドできるようにするために必要です。 コード署名ファイルの生成 必要なコード署名ファイルの準備がで...", 
"body" : "コード署名ファイルを手動で管理するには、.p12署名証明書とアプリのプロビジョニングプロファイルをBitriseにアップロードする必要があります。これを行うには複数の方法があります。 コード署名ファイルを手動で管理するには、.p12署名証明書と アプリの Bitriseへのプロファイルのプロビジョニング。 手動プロビジョニングを設定するには、少なくとも開発者証明書と開発タイプのプロビジョニングプロファイルを常にアップロードする必要があります。これは、Xcodeステップでアプリを適切にテストおよびビルドできるようにするために必要です。 コード署名ファイルの生成 必要なコード署名ファイルの準備ができていない場合は、新しいファイルを生成できます。 iOSコード署名ファイルの生成コード署名ファイルをBitriseにアップロードするには、最初にファイルを.p12ファイル形式でエクスポートする必要があります。これは手動で行うか、Bitriseのオープンソースを使用して行うことができます。 codesigndoc 道具。ファイルを正常にエクスポートしたら、それらをBitriseにアップロードする必要があります。 3つのオプションがあります。 API呼び出しを介して 。 codesigndocを使用する 。 ワークフローエディタで手動でアップロードします。このガイドでは、このオプションに焦点を当てています。 コード署名ファイルをBitriseに手動でアップロードするには： .p12証明書とプロビジョニングプロファイルがエクスポートされ、準備ができていることを確認してください。次の2つのオプションのいずれかを使用して、ファイルをエクスポートできます。 codesigndocを使用したコード署名ファイルの収集とエクスポートcodesigndocを使用せずにiOSコード署名ファイルをエクスポートするでアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ。 そうでない場合は、それらをに追加します プロビジョニングプロファイルを追加します そしてその 署名用の秘密鍵（.p12）を追加します それぞれフィールド。 macOSアプリの場合、プロビジョニングプロファイルファイル拡張子は次のとおりです。 .provisionprofile ; iOSアプリの場合、ファイル拡張子は .mobileprovision 。 あなたが持っていることを確認してください 証明書とプロファイルのインストーラー ステップ あなたのアプリの ワークフロー 。あなたはそれをチェックすることができます ワークフロー のタブ ワークフローエディター 。 これらの手順は次のようにする必要があることに注意してください 前 アプリをアーカイブおよびエクスポートする手順（たとえば、 iOS用のXcodeアーカイブとエクスポート ）ワークフロー内。 " }, 
{ "title" : "Xcodeプロジェクト用に署名されたIPAを作成する ", 
"url" : "コード署名/iosコード署名/xcodeプロジェクト用に署名されたipaを作成する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ Xcodeプロジェクト用に署名されたIPAを作成する ", 
"snippet" : "Apple接続が正しく設定されていて、コード署名ファイルをビルドで使用できるようにすると、Bitriseを使用してXcodeプロジェクトの署名付きIPAファイルを簡単に作成できます。 Bitrise での iOS コード署名の概要 コード署名資産管理に利用できるステップの包括的な概要については、次のWebサイトをご覧ください。 iOSコード署名ページ 。 Bitriseを使用すると、Xcodeプロジェクト用の署名付きIPAファイルを簡単に作成できます。あなたがする必要があるのはあなたのコード署名ファイルが正しく管理されていることを確認し、そして私たちの関連する入力を設定することです iOS用の...", 
"body" : "Apple接続が正しく設定されていて、コード署名ファイルをビルドで使用できるようにすると、Bitriseを使用してXcodeプロジェクトの署名付きIPAファイルを簡単に作成できます。 Bitrise での iOS コード署名の概要 コード署名資産管理に利用できるステップの包括的な概要については、次のWebサイトをご覧ください。 iOSコード署名ページ 。 Bitriseを使用すると、Xcodeプロジェクト用の署名付きIPAファイルを簡単に作成できます。あなたがする必要があるのはあなたのコード署名ファイルが正しく管理されていることを確認し、そして私たちの関連する入力を設定することです iOS用のXcodeアーカイブとエクスポート ステップ。 設定しました Appleサービス接続 Bitriseで。 あなたの コード署名ファイルは正しく管理されています 。 あなたは私たちの関連する入力を設定します iOS用のXcodeアーカイブとエクスポート ステップ 。 ディストリビューションと開発署名証明書をアップロードします プロジェクトの開発署名証明書と配布署名証明書の両方をアップロードすることを強くお勧めします。アップロードされた開発署名証明書がない場合は、ビルドを開始するたびに、自動プロビジョニング オプションを使用するステップによってオンザフライで生成されます。これにより、最終的に証明書の最大数に達し、新しいビルドを開始できなくなる可能性があります。 すべての設定が完了したら、IPAエクスポートの設定に進みます。 ワークフロー 。 必要なことを確認してください コード署名ファイルが収集され、アップロードされました 。 あなたが持っていることを確認してください iOS用のXcodeアーカイブとエクスポート ワークフローにステップインします。 をセットする 配布方法 ステップの入力。 自動プロビジョニングを使用する場合は、の値と一致していることを確認してください 配布タイプ 関連する入力 iOS自動プロビジョニング ステップ。オプションは次のとおりです。 auto-detect -このオプションは非推奨であり、削除されることに注意してください。使用はお勧めしません。 app-store ：アプリをApp Storeにデプロイする場合は、これを選択します。配布証明書とAppStoreプロビジョニングプロファイルが必要です。 ad-hoc ：アプリをアドホックテスターにデプロイする場合は、これを選択します。配布証明書とアドホックプロビジョニングプロファイルが必要です。 enterprise ：Apple Enterpriseアカウントをお持ちで、それを使用してアプリを配布する場合は、これを選択してください。 development ：内部テストにはこれを選択してください。開発者証明書と開発プロビジョニングプロファイルが必要です。 をセットする 自動コード署名 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を行わない場合。 api-key APIキー認証を使用する場合 。 apple-id AppleID認証を使用する場合 。 ワークフローを保存して、新しいビルドを開始します。 それで全部です。 Xcodeは、プロジェクトのバンドルIDとチームIDの設定、および設定したエクスポート方法に基づいて、適切な署名ファイルを自動的に選択します。 " }, 
{ "title" : "別のチームのコード署名ファイルを使用してIPAファイルに署名する ", 
"url" : "コード署名/iosコード署名/xcodeプロジェクト用に署名されたipaを作成する.html#別のチームのコード署名ファイルを使用してipaファイルに署名する-78777", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ Xcodeプロジェクト用に署名されたIPAを作成する \/ 別のチームのコード署名ファイルを使用してIPAファイルに署名する ", 
"snippet" : "別のチームのコード署名ファイルを使用してIPAファイルに署名する場合（たとえば、社内ビルドに会社のコード署名を使用しているが、App Store配布にクライアントのコード署名ファイルを使用している場合）、設定するだけです。 NS このエクスポートに使用する開発者ポータルチーム オプションも（に加えて 配布方法 ）。 会社のコード署名ファイルを内部ビルドに使用しているが、クライアントのコード署名ファイルがAppStoreの配布に使用されている場合。 自動コード署名にAppleIDを使用し、Apple IDが複数のチームに属している場合は、開発者ポータルチームを使用してこのエクスポート入力に使用し...", 
"body" : "別のチームのコード署名ファイルを使用してIPAファイルに署名する場合（たとえば、社内ビルドに会社のコード署名を使用しているが、App Store配布にクライアントのコード署名ファイルを使用している場合）、設定するだけです。 NS このエクスポートに使用する開発者ポータルチーム オプションも（に加えて 配布方法 ）。 会社のコード署名ファイルを内部ビルドに使用しているが、クライアントのコード署名ファイルがAppStoreの配布に使用されている場合。 自動コード署名にAppleIDを使用し、Apple IDが複数のチームに属している場合は、開発者ポータルチームを使用してこのエクスポート入力に使用し、自動コード署名資産管理に使用するチームを指定します。 そうするには： 新しい開発チームの正しいコード署名ファイルがBitriseにアップロードされていることを確認してください。 このエクスポートオプションにも使用するように開発者ポータルチームを設定します（ 配布方法 ）。 をセットする 配布方法 。 " }, 
{ "title" : "複数のコード署名IDを使用してIPAに署名する ", 
"url" : "コード署名/iosコード署名/複数のコード署名idを使用してipaに署名する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ 複数のコード署名IDを使用してIPAに署名する ", 
"snippet" : "単一のBitriseビルド内で、異なるコード署名IDを持つ複数のIPAファイルを作成できます。必要なコード署名ファイルが利用可能であることを確認し、iOSおよびtvOSXcodeアーカイブのエクスポートステップを使用する必要があります。 iOSコード署名アセット管理の概要 コード署名資産管理に利用できるステップの包括的な概要については、次のWebサイトをご覧ください。 iOSコード署名ページ 。 単一のBitriseビルド内で、異なるコード署名IDを持つ複数のIPAファイルを作成できます。 iOSアプリの開発中に、内部テストやApp Storeへのデプロイなど、さまざまな目的のために複数の種類...", 
"body" : "単一のBitriseビルド内で、異なるコード署名IDを持つ複数のIPAファイルを作成できます。必要なコード署名ファイルが利用可能であることを確認し、iOSおよびtvOSXcodeアーカイブのエクスポートステップを使用する必要があります。 iOSコード署名アセット管理の概要 コード署名資産管理に利用できるステップの包括的な概要については、次のWebサイトをご覧ください。 iOSコード署名ページ 。 単一のBitriseビルド内で、異なるコード署名IDを持つ複数のIPAファイルを作成できます。 iOSアプリの開発中に、内部テストやApp Storeへのデプロイなど、さまざまな目的のために複数の種類のディストリビューションが必要になります。幸いなことに、これには2つの別々のワークフローを設定する必要はありません。 bitrise.io 。 この例では、2つの署名付きIPAファイルを作成するワークフローを設定します。 development と1つ app-store エクスポート方法。 すべての 必要なコード署名ファイル ビルドに使用できます。証明書をにアップロードする必要があることに注意してください コード署名 タブが iOS用のXcodeアーカイブとエクスポート ステップは、に基づいてプロビジョニングプロファイルをダウンロードします 配布方法 。 あなたが持っていることを確認してください iOS用のXcodeアーカイブとエクスポート ワークフローにステップインします。 入力変数のリストで、に移動します エクスポート方法を選択してください 選択します 発達 ドロップダウンメニューから。 をセットする 自動コード署名方式 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を行わない場合。 api-key APIキー認証を使用する場合 。 apple-id AppleID認証を使用する場合 。 追加します iOSおよびtvOSXcodeアーカイブをエクスポートします ワークフローに進みます。 をセットする 自動コード署名方式 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を行わない場合。 api-key APIキー認証を使用する場合。 apple-id AppleID認証を使用する場合。 入力変数のリストで、に移動します エクスポート方法を選択してください 選択します アプリストア ドロップダウンメニューから。 そして、あなたは完了です！複数追加してください iOSおよびtvOSXcodeアーカイブをエクスポートします 必要に応じて、複数の異なる署名付き.ipaファイルを作成するワークフローの手順。 " }, 
{ "title" : "IonicおよびCordovaプロジェクトのiOSコード署名 ", 
"url" : "コード署名/iosコード署名/ionicおよびcordovaプロジェクトのiosコード署名.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ IonicおよびCordovaプロジェクトのiOSコード署名 ", 
"snippet" : "Bitriseは、IonicアプリとCordovaアプリのiOSコード署名の手動プロビジョニングと自動プロビジョニングの両方をサポートしています。 当然、Bitriseはどちらかで構築されたiOSアプリケーションをサポートします イオン また コルドバ 。ただし、コード署名プロセスは、ネイティブXcodeプロジェクトとは少し異なります。 Bitriseは、IonicアプリとCordovaアプリの手動プロビジョニングと自動プロビジョニングの両方をサポートしています。また、プロセスは多少異なります。...", 
"body" : "Bitriseは、IonicアプリとCordovaアプリのiOSコード署名の手動プロビジョニングと自動プロビジョニングの両方をサポートしています。 当然、Bitriseはどちらかで構築されたiOSアプリケーションをサポートします イオン また コルドバ 。ただし、コード署名プロセスは、ネイティブXcodeプロジェクトとは少し異なります。 Bitriseは、IonicアプリとCordovaアプリの手動プロビジョニングと自動プロビジョニングの両方をサポートしています。また、プロセスは多少異なります。 " }, 
{ "title" : "手動プロビジョニングによるIonic \/ Cordovaコード署名 ", 
"url" : "コード署名/iosコード署名/ionicおよびcordovaプロジェクトのiosコード署名.html#手動プロビジョニングによるionic---cordovaコード署名-78779", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ IonicおよびCordovaプロジェクトのiOSコード署名 \/ 手動プロビジョニングによるIonic \/ Cordovaコード署名 ", 
"snippet" : "を呼び出して、IonicまたはCordovaプロジェクトからローカルにネイティブXcodeプロジェクトを生成します cordova platform add ios また ionic cordova platform add ios 。 私たちを使用してください codesigndoc するツール コード署名ファイルを収集する 。 ファイルをにアップロードする bitrise.io 。 これは、WebサイトのUIまたは codesigndoc ツール自体。 あなたが持っていることを確認してください 証明書とプロファイルのインストーラー ワークフローにステップインします。 追加します Cordo...", 
"body" : "を呼び出して、IonicまたはCordovaプロジェクトからローカルにネイティブXcodeプロジェクトを生成します cordova platform add ios また ionic cordova platform add ios 。 私たちを使用してください codesigndoc するツール コード署名ファイルを収集する 。 ファイルをにアップロードする bitrise.io 。 これは、WebサイトのUIまたは codesigndoc ツール自体。 あなたが持っていることを確認してください 証明書とプロファイルのインストーラー ワークフローにステップインします。 追加します Cordovaビルド構成を生成する ワークフローに進みます。それは後に来なければなりません 証明書とプロファイルのインストーラー ステップ。 ステップに必要な入力を入力します。両方が コード署名ID そしてその プロビジョニングプロファイル そのようにマークされていなくても、iOSアプリに必要な入力です。 ビルド構成 ：どちらかに設定できます debug また release 。 コードサインアイデンティティ ：開発者またはディストリビューションIDを入力します。 プロビジョニングプロファイル ：適切なプロビジョニングプロファイルを入力します。 包装タイプ ：これは、Xcodeによって生成されるビルドのタイプを制御します。必要なコード署名のタイプを設定します。 追加します Cordova archive または Ionic archive ワークフローへのステップ。 必要な入力を入力します。 NS プラットホーム 入力は次のように設定する必要があります。 device 。 NS ビルドコマンド構成 入力は一致する必要があります ビルド構成 の入力 Cordovaビルド構成を生成する ステップ。 このステップは、 Cordovaビルド構成を生成する ワークフローにステップインします。 ビルドを実行してください！ " }, 
{ "title" : "自動プロビジョニングによるIonic \/ Cordovaコード署名 ", 
"url" : "コード署名/iosコード署名/ionicおよびcordovaプロジェクトのiosコード署名.html#自動プロビジョニングによるionic---cordovaコード署名-78779", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ IonicおよびCordovaプロジェクトのiOSコード署名 \/ 自動プロビジョニングによるIonic \/ Cordovaコード署名 ", 
"snippet" : ".p12署名証明書がにアップロードされていることを確認してください bitrise.io 。 使用する場合 codesigndoc ファイルを収集するには、次のコマンドを呼び出すことで、証明書のみをエクスポートするようにツールに指示できることに注意してください。 codesigndoc scan --certs-only xcode codesigndoc ファイルをWebサイトにアップロードすることも、手動でアップロードすることもできます。 追加します コルドバ準備 または イオン準備 ワークフローに進みます。これらのステップは、 platform rm と platform add コマン...", 
"body" : ".p12署名証明書がにアップロードされていることを確認してください bitrise.io 。 使用する場合 codesigndoc ファイルを収集するには、次のコマンドを呼び出すことで、証明書のみをエクスポートするようにツールに指示できることに注意してください。 codesigndoc scan --certs-only xcode codesigndoc ファイルをWebサイトにアップロードすることも、手動でアップロードすることもできます。 追加します コルドバ準備 または イオン準備 ワークフローに進みます。これらのステップは、 platform rm と platform add コマンド。 追加します iOS自動プロビジョニング ワークフローに進みます。最新バージョンであることを確認してください！ ステップはエクスポートします： プロジェクトの開発チーム。 インストールされたコードサインIDの名前。 インストールされたプロビジョニングプロファイル。 1つのコード署名ステップのみ あなたが両方を持っている場合 証明書とプロファイルのインストーラー そしてその iOS自動プロビジョニング ワークフローのステップで、ビルドで予期しない問題が発生する可能性があります。 を選択 Appleサービスの接続方法 （に基づく Bitriseで設定したAppleサービス ） そしてその 配布方法 。 追加します Cordovaビルド構成を生成する ワークフローに進みます。 によってエクスポートされたコード署名設定を使用するようにステップを構成します。 iOS自動予見 ステップ： 開発配布例 ： - generate-cordova-build-configuration:\n inputs:\n - development_team: $BITRISE_DEVELOPER_TEAM \n - package_type: development \n - code_sign_identity: iPhone Developer\n - configuration: debug\n 生産流通例 ： - generate-cordova-build-configuration:\n inputs:\n - development_team: $BITRISE_DEVELOPER_TEAM \n - package_type: app-store \n - code_sign_identity: iPhone Developer\n - configuration: release\n 追加します コルドバアーカイブ または イオンアーカイブ ワークフローに進みます。 必要な入力を入力します。 NS プラットホーム 入力は次のように設定する必要があります。 device 。 NS ビルドコマンド構成 入力は一致する必要があります ビルド構成 の入力 Cordovaビルド構成を生成する ステップ。 をセットする 準備ステップとしてプラットフォームを削除する必要がありますか？ に false 。これは非常に重要です。これにより、ステップで生成されたネイティブプロジェクトのプラットフォームが削除および再追加されないようになります。 コルドバ準備 または イオン準備 ステップ。 ビルドを実行してください！ " }, 
{ "title" : "コード署名ファイルの保護 ", 
"url" : "コード署名/iosコード署名/コード署名ファイルの保護.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ コード署名ファイルの保護 ", 
"snippet" : "コード署名ファイルを次のように設定できます 保護されています モード：これは、それらをあなたからダウンロードできないことを意味します bitrise.io アカウント。ビルドはこれらの保護されたファイルを使用できますが、誰もそれらを公開することはできず、それらを上書きする方法はありません。代わりに、ファイルを削除して新しいファイルをアップロードすることしかできません。 コード署名ファイルを次のように設定できます 保護されています モード：これは、それらをあなたからダウンロードできないことを意味します bitrise.io アカウント。ビルドはこれらの保護されたファイルを使用できますが、誰もそれ...", 
"body" : "コード署名ファイルを次のように設定できます 保護されています モード：これは、それらをあなたからダウンロードできないことを意味します bitrise.io アカウント。ビルドはこれらの保護されたファイルを使用できますが、誰もそれらを公開することはできず、それらを上書きする方法はありません。代わりに、ファイルを削除して新しいファイルをアップロードすることしかできません。 コード署名ファイルを次のように設定できます 保護されています モード：これは、それらをあなたからダウンロードできないことを意味します bitrise.io アカウント。ビルドはこれらの保護されたファイルを使用できますが、誰もそれらを公開することはできず、それらを上書きする方法はありません。代わりに、ファイルを削除して新しいファイルをアップロードすることしかできません。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブ。 保護するファイルを見つけて、ドロップダウンメニューを開きます。 を選択 保護する オプション。 ポップアップウィンドウは、確認するとこの変更を元に戻せないことを警告します。変更を個別に保存する必要はありません。 完了すると、ファイルのドロップダウンメニューの唯一のオプションは次のようになります。 消去 。 " }, 
{ "title" : "iOSコード署名ファイルの生成 ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの生成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの生成 ", 
"snippet" : "XcodeまたはAppleDeveloperPortalのいずれかでiOSコード署名ファイルを生成できます。 アプリに署名するには、証明書とプロビジョニングプロファイルの2種類のファイルが必要です。 証明書（開発または配布）は、指名された開発者がこのコードを作成したこと、開発者プログラムのメンバーであること、およびそのための証明書をAppleが発行したことを保証するものです。 証明書を取得するには、キーチェーンアクセスを使用して証明書署名要求を生成し、それをAppleに送信する必要があります。まだ持っていない場合は、これにより公開鍵と秘密鍵のペアが作成されます。その後、Appleは情報を確認し...", 
"body" : "XcodeまたはAppleDeveloperPortalのいずれかでiOSコード署名ファイルを生成できます。 アプリに署名するには、証明書とプロビジョニングプロファイルの2種類のファイルが必要です。 証明書（開発または配布）は、指名された開発者がこのコードを作成したこと、開発者プログラムのメンバーであること、およびそのための証明書をAppleが発行したことを保証するものです。 証明書を取得するには、キーチェーンアクセスを使用して証明書署名要求を生成し、それをAppleに送信する必要があります。まだ持っていない場合は、これにより公開鍵と秘密鍵のペアが作成されます。その後、Appleは情報を確認し、証明書を作成します。 プロビジョニングは、デバイスで起動してアプリサービスを使用するためのアプリを準備および構成するプロセスです。開発プロビジョニングプロファイルは、アプリの実行に適格なデバイス識別子（UUID）を保持します。配布プロビジョニングプロファイルには、アプリをAppStoreに配布できるようにするAppStoreプロファイルを含めることができます。アドホックプロファイルは、テスターに配布するのに適しています。 " }, 
{ "title" : "Xcodeを使用したコード署名証明書の生成 ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの生成.html#xcodeを使用したコード署名証明書の生成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの生成 \/ Xcodeを使用したコード署名証明書の生成 ", 
"snippet" : "まず、Xcodeのアカウント設定にAppleIDを追加する必要があります。すでにこれが完了している場合は、にスキップできます AppleIDの選択 。 Xcodeを起動します。 選択する Xcode>設定 ナビゲーションバーから。 ウィンドウの上部で選択します アカウント 。 クリックしてください + 左下隅にあるを選択します AppleIDを追加… ダイアログが表示されます。 Apple IDとパスワードを追加し、[ ログイン 。アカウントをお持ちでない場合は、以下を選択してAppleIDを作成できます。 AppleIDを作成する 。 右側のサイドバーからAppleIDとチームを選択し、をク...", 
"body" : "まず、Xcodeのアカウント設定にAppleIDを追加する必要があります。すでにこれが完了している場合は、にスキップできます AppleIDの選択 。 Xcodeを起動します。 選択する Xcode>設定 ナビゲーションバーから。 ウィンドウの上部で選択します アカウント 。 クリックしてください + 左下隅にあるを選択します AppleIDを追加… ダイアログが表示されます。 Apple IDとパスワードを追加し、[ ログイン 。アカウントをお持ちでない場合は、以下を選択してAppleIDを作成できます。 AppleIDを作成する 。 右側のサイドバーからAppleIDとチームを選択し、をクリックします 詳細を見る… 。 コード署名IDとプロビジョニングプロファイルが表示されるダイアログが表示されます。 署名IDの下に iOS開発 と iOSディストリビューション プロファイル。それらを作成していない場合は、 作成 それらの横にあるボタン。それを選択するだけで、Xcodeがコード署名IDを発行してダウンロードします。 クリックするタイミング リセット コード署名IDの横 すでにコード署名IDを発行している場合は、 リセット それらの横にあるボタン。 Xcodeが生成してダウンロードする新しい証明書を発行できますが、これにより以前の証明書が無効になることに注意してください。これらのファイルを紛失した場合、または何をしているのかがわかっている場合にのみ行ってください。 " }, 
{ "title" : "コード署名証明書を手動で生成する ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの生成.html#コード署名証明書を手動で生成する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの生成 \/ コード署名証明書を手動で生成する ", 
"snippet" : "あなたの キーチェーンアクセス macOS上のアプリ。 選択する キーチェーンアクセス >> 証明書アシスタント >> 認証局に証明書を要求する… 記入してください ユーザーのメールアドレス そしてその 一般名 選択します ディスクに保存 。 クリック 継続する 生成されたものを保存します certSigningRequest ローカルにファイルします。 に移動 https:\/\/developer.apple.com アカウントにログインします。 選択する 証明書、ID、プロファイル 左側のサイドバーから。 に移動 証明書 をクリックします + 右上隅のボタン。 選択する iOSアプリ開発 を...", 
"body" : "あなたの キーチェーンアクセス macOS上のアプリ。 選択する キーチェーンアクセス >> 証明書アシスタント >> 認証局に証明書を要求する… 記入してください ユーザーのメールアドレス そしてその 一般名 選択します ディスクに保存 。 クリック 継続する 生成されたものを保存します certSigningRequest ローカルにファイルします。 に移動 https:\/\/developer.apple.com アカウントにログインします。 選択する 証明書、ID、プロファイル 左側のサイドバーから。 に移動 証明書 をクリックします + 右上隅のボタン。 選択する iOSアプリ開発 をクリックします 継続する 。 次のページに、を作成するための手順が表示されます certSigningRequest ファイル。クリック 継続する 。 作成したものをアップロードする certSigningRequest フォームに移動してクリックします 継続する 。それはあなたのためにあなたのコード署名証明書を生成します。 証明書をダウンロードし、ダブルクリックしてインストールします。インストールすると、に追加されます キーチェーンアクセス アプリ。 " }, 
{ "title" : "Xcodeを使用したプロビジョニングプロファイルの生成 ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの生成.html#xcodeを使用したプロビジョニングプロファイルの生成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの生成 \/ Xcodeを使用したプロビジョニングプロファイルの生成 ", 
"snippet" : "Xcodeは、プロジェクトの一意のバンドルIDと一致するプロジェクトのアプリIDを自動的に生成します。アプリIDは、1つ以上のアプリを識別するために使用されます。これは、1つの一意のバンドル識別子にのみ一致する明示的なアプリID、または複数の識別子に一致する可能性のあるワイルドカードアプリIDにすることができます。 Xcodeは、プロジェクトのチームプロビジョニングプロファイルも自動的に作成するため、デバイスへの展開を自動的に開始できます。 問題が発生した場合は、デバイスが適格であることを確認する必要があります。たとえば、デバイスが展開ターゲットと一致しない場合は、エラーが発生します。また、ア...", 
"body" : "Xcodeは、プロジェクトの一意のバンドルIDと一致するプロジェクトのアプリIDを自動的に生成します。アプリIDは、1つ以上のアプリを識別するために使用されます。これは、1つの一意のバンドル識別子にのみ一致する明示的なアプリID、または複数の識別子に一致する可能性のあるワイルドカードアプリIDにすることができます。 Xcodeは、プロジェクトのチームプロビジョニングプロファイルも自動的に作成するため、デバイスへの展開を自動的に開始できます。 問題が発生した場合は、デバイスが適格であることを確認する必要があります。たとえば、デバイスが展開ターゲットと一致しない場合は、エラーが発生します。また、アプリが正しいチームに接続されていることを確認してください。 Xcodeを使用してプロビジョニングプロファイルを生成するには： Xcodeのプロジェクトナビゲータからプロジェクトファイルを選択します。 に移動します 署名 セクションと下 チーム 正しいチームを選択してください。 Xcodeでプロジェクトをビルドします。 Xcodeからプロビジョニングプロファイルをダウンロードするには： Xcodeを起動します。 選択する Xcode>設定 ナビゲーションバーから。 ウィンドウの上部で選択します アカウント 。 Apple IDとチームを選択してから、 マニュアルプロファイルのダウンロード 。 に移動 ~\/Library\/MobileDevice\/Provisioning Profiles\/ そしてあなたのプロフィールはそこにあるはずです。 " }, 
{ "title" : "プロビジョニングプロファイルを手動で生成する ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの生成.html#プロビジョニングプロファイルを手動で生成する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの生成 \/ プロビジョニングプロファイルを手動で生成する ", 
"snippet" : "プロビジョニングプロファイルを手動で生成するには、有効なApple Developerアカウントが必要であり、プロジェクトのアプリIDを設定する必要があります。...", 
"body" : "プロビジョニングプロファイルを手動で生成するには、有効なApple Developerアカウントが必要であり、プロジェクトのアプリIDを設定する必要があります。 " }, 
{ "title" : "アプリIDの設定 ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの生成.html#アプリidの設定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの生成 \/ プロビジョニングプロファイルを手動で生成する \/ アプリIDの設定 ", 
"snippet" : "プロジェクトのアプリIDをまだ作成していない場合は、次のURLにアクセスしてください。 https:\/\/developer.apple.com とログインします。 選択する 証明書、識別子、プロファイル 左側のサイドバーから。 案内する 識別子>アプリID 。 の中に アプリIDの説明 アプリIDにわかりやすい名前を追加します。 選択する 明示的なアプリID バンドル識別子をフィールドに追加します。 追加のものを選択します アプリサービス あなたが必要とすること。 クリック 継続する 。...", 
"body" : "プロジェクトのアプリIDをまだ作成していない場合は、次のURLにアクセスしてください。 https:\/\/developer.apple.com とログインします。 選択する 証明書、識別子、プロファイル 左側のサイドバーから。 案内する 識別子>アプリID 。 の中に アプリIDの説明 アプリIDにわかりやすい名前を追加します。 選択する 明示的なアプリID バンドル識別子をフィールドに追加します。 追加のものを選択します アプリサービス あなたが必要とすること。 クリック 継続する 。 " }, 
{ "title" : "プロビジョニングプロファイルの生成 ", 
"url" : "コード署名/iosコード署名/iosコード署名ファイルの生成.html#プロビジョニングプロファイルの生成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名ファイルの生成 \/ プロビジョニングプロファイルを手動で生成する \/ プロビジョニングプロファイルの生成 ", 
"snippet" : "に移動 https:\/\/developer.apple.com とログインします。 選択する 証明書、識別子、プロファイル 左側のサイドバーから。 案内する プロビジョニングプロファイル>すべて 。 を選択 + 右上隅から。 開発の場合は、下の正しいプロジェクトタイプを選択してください Development 、または配布の場合は、下の正しいものを選択してください Distribution [続行]をクリックします。 使用するアプリIDを選択します。 プロビジョニングプロファイルに含める証明書を選択します。これらの証明書は、このプロファイルを使用して構築できます。クリック 継続する 。 このプ...", 
"body" : "に移動 https:\/\/developer.apple.com とログインします。 選択する 証明書、識別子、プロファイル 左側のサイドバーから。 案内する プロビジョニングプロファイル>すべて 。 を選択 + 右上隅から。 開発の場合は、下の正しいプロジェクトタイプを選択してください Development 、または配布の場合は、下の正しいものを選択してください Distribution [続行]をクリックします。 使用するアプリIDを選択します。 プロビジョニングプロファイルに含める証明書を選択します。これらの証明書は、このプロファイルを使用して構築できます。クリック 継続する 。 このプロファイルで使用するすべてのデバイスを選択し、[続行]をクリックします。 プロビジョニングプロファイルに名前を付けて、 継続する 。 プロファイルが生成されます。デバイスにダウンロードし、ダブルクリックしてMacにインストールできます。 " }, 
{ "title" : "codesigndocを使用せずにiOSコード署名ファイルをエクスポートする ", 
"url" : "コード署名/iosコード署名/codesigndocを使用せずにiosコード署名ファイルをエクスポートする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用せずにiOSコード署名ファイルをエクスポートする ", 
"snippet" : "Bitriseのcodesigndocツールを使用したくない場合は、iOSコード署名証明書とプロビジョニングプロファイルを手動でエクスポートするか、Xcodeを使用してエクスポートできます。 codesigndocツールを使用したくない場合は、iOSコード署名証明書とプロビジョニングプロファイルを手動でエクスポートするか、Xcodeを使用してエクスポートできます。...", 
"body" : "Bitriseのcodesigndocツールを使用したくない場合は、iOSコード署名証明書とプロビジョニングプロファイルを手動でエクスポートするか、Xcodeを使用してエクスポートできます。 codesigndocツールを使用したくない場合は、iOSコード署名証明書とプロビジョニングプロファイルを手動でエクスポートするか、Xcodeを使用してエクスポートできます。 " }, 
{ "title" : "Xcodeを使用したiOSコード署名証明書のエクスポート ", 
"url" : "コード署名/iosコード署名/codesigndocを使用せずにiosコード署名ファイルをエクスポートする.html#xcodeを使用したiosコード署名証明書のエクスポート", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用せずにiOSコード署名ファイルをエクスポートする \/ Xcodeを使用したiOSコード署名証明書のエクスポート ", 
"snippet" : "Xcodeを起動します。 選択する Xcode > Preferences ナビゲーションバーから。 ウィンドウの上部で選択します Accounts 。 右側のサイドバーからAppleIDとチームを選択し、をクリックします View Details... 。 コード署名IDとプロビジョニングプロファイルが表示されるダイアログが表示されます。 証明書を選択し、 Export ポップアップメニューから。 [名前を付けて保存]ダイアログにファイル名を入力します。パスワードと確認を設定して安全に保管できますが、必須ではありません。 Xcodeは、要求された証明書を.p12形式でエクスポートします。...", 
"body" : "Xcodeを起動します。 選択する Xcode > Preferences ナビゲーションバーから。 ウィンドウの上部で選択します Accounts 。 右側のサイドバーからAppleIDとチームを選択し、をクリックします View Details... 。 コード署名IDとプロビジョニングプロファイルが表示されるダイアログが表示されます。 証明書を選択し、 Export ポップアップメニューから。 [名前を付けて保存]ダイアログにファイル名を入力します。パスワードと確認を設定して安全に保管できますが、必須ではありません。 Xcodeは、要求された証明書を.p12形式でエクスポートします。 " }, 
{ "title" : "iOSコード署名証明書を手動でエクスポートする ", 
"url" : "コード署名/iosコード署名/codesigndocを使用せずにiosコード署名ファイルをエクスポートする.html#iosコード署名証明書を手動でエクスポートする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用せずにiOSコード署名ファイルをエクスポートする \/ iOSコード署名証明書を手動でエクスポートする ", 
"snippet" : "キーチェーンアクセスを開始します。 左上のサイドバーで選択します login 左下で選択します My Certificates 。 これにより、インストールされているすべての証明書と関連する秘密鍵が一覧表示されます。 エクスポートしたいものを選択して選択します Export ポップアップメニューから。 [名前を付けて保存]ダイアログにファイル名を入力します。パスワードと確認を設定して安全に保管できますが、必須ではありません。 キーチェーンアクセスは、要求された証明書を.p12形式でエクスポートします。...", 
"body" : "キーチェーンアクセスを開始します。 左上のサイドバーで選択します login 左下で選択します My Certificates 。 これにより、インストールされているすべての証明書と関連する秘密鍵が一覧表示されます。 エクスポートしたいものを選択して選択します Export ポップアップメニューから。 [名前を付けて保存]ダイアログにファイル名を入力します。パスワードと確認を設定して安全に保管できますが、必須ではありません。 キーチェーンアクセスは、要求された証明書を.p12形式でエクスポートします。 " }, 
{ "title" : "Xcodeを使用したiOSプロビジョニングプロファイルのエクスポート ", 
"url" : "コード署名/iosコード署名/codesigndocを使用せずにiosコード署名ファイルをエクスポートする.html#xcodeを使用したiosプロビジョニングプロファイルのエクスポート", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用せずにiOSコード署名ファイルをエクスポートする \/ Xcodeを使用したiOSプロビジョニングプロファイルのエクスポート ", 
"snippet" : "Xcodeを起動します。 選択する Xcode > Preferences ナビゲーションバーから。 ウィンドウの上部で選択します Accounts 。 右側のサイドバーからAppleIDとチームを選択し、をクリックします View Details... 。 コード署名IDとプロビジョニングプロファイルが表示されるダイアログが表示されます。 プロビジョニングプロファイルで、探しているプロファイルを見つけます。 システムにインストールされていない場合は、をクリックします。 Download その横にあるボタン。 選ぶ Show in finder ポップアップメニューから、インストールされている...", 
"body" : "Xcodeを起動します。 選択する Xcode > Preferences ナビゲーションバーから。 ウィンドウの上部で選択します Accounts 。 右側のサイドバーからAppleIDとチームを選択し、をクリックします View Details... 。 コード署名IDとプロビジョニングプロファイルが表示されるダイアログが表示されます。 プロビジョニングプロファイルで、探しているプロファイルを見つけます。 システムにインストールされていない場合は、をクリックします。 Download その横にあるボタン。 選ぶ Show in finder ポップアップメニューから、インストールされているプロビジョニングプロファイルが表示されます。 " }, 
{ "title" : "iOSプロビジョニングプロファイルを手動でエクスポートする ", 
"url" : "コード署名/iosコード署名/codesigndocを使用せずにiosコード署名ファイルをエクスポートする.html#iosプロビジョニングプロファイルを手動でエクスポートする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ codesigndocを使用せずにiOSコード署名ファイルをエクスポートする \/ iOSプロビジョニングプロファイルを手動でエクスポートする ", 
"snippet" : "に移動 https:\/\/developer.apple.com とログインします。 左側のサイドバーから[証明書、識別子、プロファイル]を選択します。 [プロビジョニングプロファイル]> [すべて]に移動します。 リストから探しているプロビジョニングプロファイルを見つけるか、検索を使用してフィルタリングします。 選択したプロビジョニングプロファイルをクリックすると、詳細が展開されます。 ステータスが無効な場合は、 Edit ボタンを押して、もう一度保存します。 クリックしてください Download ボタンをクリックしてダウンロードし、ダブルクリックしてmacOSにインストールします。...", 
"body" : "に移動 https:\/\/developer.apple.com とログインします。 左側のサイドバーから[証明書、識別子、プロファイル]を選択します。 [プロビジョニングプロファイル]> [すべて]に移動します。 リストから探しているプロビジョニングプロファイルを見つけるか、検索を使用してフィルタリングします。 選択したプロビジョニングプロファイルをクリックすると、詳細が展開されます。 ステータスが無効な場合は、 Edit ボタンを押して、もう一度保存します。 クリックしてください Download ボタンをクリックしてダウンロードし、ダブルクリックしてmacOSにインストールします。 " }, 
{ "title" : "iOSコード署名のトラブルシューティング ", 
"url" : "コード署名/iosコード署名/iosコード署名のトラブルシューティング.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名のトラブルシューティング ", 
"snippet" : "iOSコード署名は複雑になる可能性があり、いくつかの潜在的な問題があります。最も一般的な問題とその潜在的な解決策のいくつかを収集しました。 iOSコード署名は複雑になる可能性があり、いくつかの潜在的な問題があります。最も一般的な問題とその潜在的な解決策のいくつかを収集しました。コード署名が機能することを確認するために何ができるかを調べてみましょう！...", 
"body" : "iOSコード署名は複雑になる可能性があり、いくつかの潜在的な問題があります。最も一般的な問題とその潜在的な解決策のいくつかを収集しました。 iOSコード署名は複雑になる可能性があり、いくつかの潜在的な問題があります。最も一般的な問題とその潜在的な解決策のいくつかを収集しました。コード署名が機能することを確認するために何ができるかを調べてみましょう！ " }, 
{ "title" : "コード署名とクリーンな仮想マシン ", 
"url" : "コード署名/iosコード署名/iosコード署名のトラブルシューティング.html#コード署名とクリーンな仮想マシン", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名のトラブルシューティング \/ コード署名とクリーンな仮想マシン ", 
"snippet" : "すべてのBitriseビルドは、以前のビルドのファイルや構成が残っていないクリーンな仮想マシンを使用します。ほとんどの場合、ローカルマシンで必要なすべてのコード署名ファイル（証明書とプロビジョニングプロファイル）を利用できますが、これは仮想マシンには当てはまりません。プロジェクトに関連するコード署名ファイルは含まれていません。そのため、次のことを確認する必要があります。 適切なコード署名資産管理オプションを選択して、プロビジョニングプロファイルをBitriseにアップロードします。ここから、ステップは実行時にファイルを仮想マシンにダウンロードします。 必要な署名証明書を[コード署名]タブにアッ...", 
"body" : "すべてのBitriseビルドは、以前のビルドのファイルや構成が残っていないクリーンな仮想マシンを使用します。ほとんどの場合、ローカルマシンで必要なすべてのコード署名ファイル（証明書とプロビジョニングプロファイル）を利用できますが、これは仮想マシンには当てはまりません。プロジェクトに関連するコード署名ファイルは含まれていません。そのため、次のことを確認する必要があります。 適切なコード署名資産管理オプションを選択して、プロビジョニングプロファイルをBitriseにアップロードします。ここから、ステップは実行時にファイルを仮想マシンにダウンロードします。 必要な署名証明書を[コード署名]タブにアップロードします。 BitriseアカウントをAppleDeveloperポータルに接続しました。 （証明書とプロファイルインストーラの手順を使用する場合、この手順は必要ありません。）AppleDeveloperポータルへ。 エラーがコード署名に関連していると思われる場合は、ほぼ確実に、これら3つのうちの1つに問題があります。 BitriseでiOSアプリを作成する場合は、最初に自分のマシンでアプリの.ipaファイルをローカルに生成することを強くお勧めします。それが失敗した場合、ビルドは確かにBitriseでも失敗します。 冗長ログ 問題が発生した場合は、コード署名アセット管理またはビルドステップで詳細ログ入力を有効にして、問題の性質に関する詳細情報を取得してください。 " }, 
{ "title" : "App Store ConnectAPIステップを使用したiOS自動プロビジョニングが失敗する ", 
"url" : "コード署名/iosコード署名/iosコード署名のトラブルシューティング.html#app-store-connectapiステップを使用したios自動プロビジョニングが失敗する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名のトラブルシューティング \/ App Store ConnectAPIステップを使用したiOS自動プロビジョニングが失敗する ", 
"snippet" : "NS App Store ConnectAPIを使用したiOS自動プロビジョニング ステップは、プロビジョニングプロファイルを管理します。AppleDeveloperポータルからプロファイルをダウンロードしてインストールします。このステップが失敗した場合にできることは次のとおりです。 このステップを使用する前に、.ipaファイルをローカルで生成し（Bitriseで使用するのと同じエクスポート方法で）、プロファイルがAppleDeveloperポータルにアップロードされていることを確認します。 BitriseアカウントがAppleDeveloperポータルに接続されていること、およびAppleD...", 
"body" : "NS App Store ConnectAPIを使用したiOS自動プロビジョニング ステップは、プロビジョニングプロファイルを管理します。AppleDeveloperポータルからプロファイルをダウンロードしてインストールします。このステップが失敗した場合にできることは次のとおりです。 このステップを使用する前に、.ipaファイルをローカルで生成し（Bitriseで使用するのと同じエクスポート方法で）、プロファイルがAppleDeveloperポータルにアップロードされていることを確認します。 BitriseアカウントがAppleDeveloperポータルに接続されていること、およびAppleDeveloperチームで少なくとも管理者の役割を持っていることを確認してください。 " }, 
{ "title" : "プロビジョニングプロファイルのファイル数制限 ", 
"url" : "コード署名/iosコード署名/iosコード署名のトラブルシューティング.html#プロビジョニングプロファイルのファイル数制限", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名のトラブルシューティング \/ プロビジョニングプロファイルのファイル数制限 ", 
"snippet" : "にアップロードできるプロビジョニングプロファイルと.p12証明書の最大数 コード署名 Bitriseのタブは30です。すでにこの制限に達していて、さらに多くを使用したい場合は、さらに多くのプロビジョニングプロファイルを使用する方法に関するいくつかのヒントを次に示します。 次のような自動プロビジョニングのあるステップを使用する iOS用のXcodeアーカイブとエクスポート 、 iOSおよびtvOSXcodeアーカイブをエクスポートする 、 iOS用のテスト用のXcodeビルド 、 また iOSコード署名を管理する 。これらの手順では、コード署名ID（拡張子が.p12の証明書）のみをBitrise...", 
"body" : "にアップロードできるプロビジョニングプロファイルと.p12証明書の最大数 コード署名 Bitriseのタブは30です。すでにこの制限に達していて、さらに多くを使用したい場合は、さらに多くのプロビジョニングプロファイルを使用する方法に関するいくつかのヒントを次に示します。 次のような自動プロビジョニングのあるステップを使用する iOS用のXcodeアーカイブとエクスポート 、 iOSおよびtvOSXcodeアーカイブをエクスポートする 、 iOS用のテスト用のXcodeビルド 、 また iOSコード署名を管理する 。これらの手順では、コード署名ID（拡張子が.p12の証明書）のみをBitriseにアップロードする必要があります。次の場合は、ビルド中にAppleDeveloperポータルからオンザフライでプロビジョニングプロファイルをダウンロードできます。 AppleDeveloperアカウントをBitriseに接続しました 。 必要な証明書\/プロファイルを含む.zipファイルを作成できます。この場合、Bitriseに証明書\/プロファイルをアップロードする必要はありません。ビルド中に、.zipファイルをダウンロードして、証明書\/プロファイル関連の入力を更新できます。 証明書とプロファイルのインストーラー パスをビルドマシンの証明書\/プロファイルに一致させる手順。注意してください 証明書とプロファイルのインストーラー ステップは、証明書とプロファイルのローカルパスとURLをサポートします。 プロファイルと証明書を自分でホストし、特定の証明書\/プロファイルを指すURLのみをワークフローに追加できます。 また、証明書とプロファイルの両方の入力に複数のURLを指定できることにも注意してください。必ずパイプで分けてください（ | ） キャラクター。 " }, 
{ "title" : "デバイスにアプリをインストールできませんでした ", 
"url" : "コード署名/iosコード署名/iosコード署名のトラブルシューティング.html#デバイスにアプリをインストールできませんでした", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ コード署名 \/ iOSコード署名 \/ iOSコード署名のトラブルシューティング \/ デバイスにアプリをインストールできませんでした ", 
"snippet" : "特定のデバイスにiOSアプリをインストールするには、次のいずれかを行う必要があります。 を使用してIPAファイルをエクスポートします development エクスポートに使用されるプロビジョニングプロファイルにデバイスのUDIDが登録されているエクスポート方法。 を使用してIPAファイルをエクスポートします ad-hoc メソッドをエクスポートし、によって生成されたパブリックインストールページを介してアプリをインストールします Bitrise.ioにデプロイします ステップ。 特定のデバイスにアプリをインストールできない場合： デバイスのUDIDがアプリのプロビジョニングプロファイルに含まれ...", 
"body" : "特定のデバイスにiOSアプリをインストールするには、次のいずれかを行う必要があります。 を使用してIPAファイルをエクスポートします development エクスポートに使用されるプロビジョニングプロファイルにデバイスのUDIDが登録されているエクスポート方法。 を使用してIPAファイルをエクスポートします ad-hoc メソッドをエクスポートし、によって生成されたパブリックインストールページを介してアプリをインストールします Bitrise.ioにデプロイします ステップ。 特定のデバイスにアプリをインストールできない場合： デバイスのUDIDがアプリのプロビジョニングプロファイルに含まれていることを確認します。 手動プロビジョニングを使用する場合は、Bitriseにアップロードしたプロビジョニングプロファイルを確認してください。 ログをチェックして、 iOS用のXcodeアーカイブとエクスポート ステップは、デバイスのUDIDを含むプロビジョニングプロファイルを使用しました。 " }, 
{ "title" : "テスト ", 
"url" : "テスト.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト ", 
"snippet" : "Bitriseには、テストの実行に役立つ専用のステップがいくつかあります。ステップライブラリに必要なものが見つからない場合は、カスタムスクリプトステップを使用できます。 アプリのテストは、明らかに継続的インテグレーションプロセスの主要な部分です。 Bitriseには、テストの実行に役立つ専用のステップがいくつかあります。ステップライブラリに必要なものが見つからない場合は、カスタムスクリプトステップを使用できます。 iOS、Android、クロスプラットフォームアプリのテスト手順を確認してください。XcodeテストからFlutterテスト、Android Lintまで、使用するフレームワークやツ...", 
"body" : "Bitriseには、テストの実行に役立つ専用のステップがいくつかあります。ステップライブラリに必要なものが見つからない場合は、カスタムスクリプトステップを使用できます。 アプリのテストは、明らかに継続的インテグレーションプロセスの主要な部分です。 Bitriseには、テストの実行に役立つ専用のステップがいくつかあります。ステップライブラリに必要なものが見つからない場合は、カスタムスクリプトステップを使用できます。 iOS、Android、クロスプラットフォームアプリのテスト手順を確認してください。XcodeテストからFlutterテスト、Android Lintまで、使用するフレームワークやツールに関係なく、Bitriseでアプリを確認してテストできます。 " }, 
{ "title" : "テストレポート ", 
"url" : "テスト.html#テストレポート-78784", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストレポート ", 
"snippet" : "私たちを使用してください テストレポート 1つの便利な場所でテストを表示するページ。サポートされているステップまたは独自のカスタムスクリプトステップで使用できます。...", 
"body" : "私たちを使用してください テストレポート 1つの便利な場所でテストを表示するページ。サポートされているステップまたは独自のカスタムスクリプトステップで使用できます。 " }, 
{ "title" : "デバイステスト ", 
"url" : "テスト.html#デバイステスト", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ デバイステスト ", 
"snippet" : "簡単で便利なテストのために、テストデバイスをBitriseに登録できます。または、 iOSのデバイステスト と 仮想デバイスのテスト Google Firebaseを利用して、実際のデバイスと仮想デバイスでテストを実行する手順。...", 
"body" : "簡単で便利なテストのために、テストデバイスをBitriseに登録できます。または、 iOSのデバイステスト と 仮想デバイスのテスト Google Firebaseを利用して、実際のデバイスと仮想デバイスでテストを実行する手順。 " }, 
{ "title" : "その他のテストガイド ", 
"url" : "テスト.html#その他のテストガイド", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ その他のテストガイド ", 
"snippet" : "Bitriseでテストを実行する方法の詳細については、他のテストガイドを確認してください。 Xcodeテストの実行 Androidユニットテスト Visual Studio AppCenterでのテストの実行 Bitriseでのデトックステストの実行...", 
"body" : "Bitriseでテストを実行する方法の詳細については、他のテストガイドを確認してください。 Xcodeテストの実行 Androidユニットテスト Visual Studio AppCenterでのテストの実行 Bitriseでのデトックステストの実行 " }, 
{ "title" : "テストレポート ", 
"url" : "テスト/テストレポート.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストレポート ", 
"snippet" : "BitriseではUIテストと単体テストの両方を実行できます。これらは、[ビルドの詳細]ページの[アドオン]セクションからアクセスできるテストレポートで表示できます。 テストレポートを使用すると、すべてのテスト結果を便利な方法で表示できます。 テスト手順を使用すると、すべてのテスト結果が同じディレクトリにデプロイされます。そこから、テストレポートは、読みやすく分析しやすい方法でそれらを処理および表示できます。...", 
"body" : "BitriseではUIテストと単体テストの両方を実行できます。これらは、[ビルドの詳細]ページの[アドオン]セクションからアクセスできるテストレポートで表示できます。 テストレポートを使用すると、すべてのテスト結果を便利な方法で表示できます。 テスト手順を使用すると、すべてのテスト結果が同じディレクトリにデプロイされます。そこから、テストレポートは、読みやすく分析しやすい方法でそれらを処理および表示できます。 " }, 
{ "title" : "テストレポートの概要 ", 
"url" : "テスト/テストレポート.html#テストレポートの概要", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストレポート \/ テストレポートの概要 ", 
"snippet" : "BitriseでUIテストと単体テストの両方を実行できます。テストレポートを使用すると、同じページでさまざまなテストタイプの結果を表示できます。 テストレポートを使用できるようにするには、テスト結果が正しいディレクトリと正しい形式になっていることを確認する必要があります。そのディレクトリから、 Bitrise.ioにデプロイします ステップは結果をアドオンにエクスポートします。 テスト結果が正しい場所に適切な形式で表示されるようにするには、次の3つの方法があります。 結果を自動的にエクスポートする専用のテスト手順を使用します。これらのステップを使用すると、テストステップとテストステップの両方を...", 
"body" : "BitriseでUIテストと単体テストの両方を実行できます。テストレポートを使用すると、同じページでさまざまなテストタイプの結果を表示できます。 テストレポートを使用できるようにするには、テスト結果が正しいディレクトリと正しい形式になっていることを確認する必要があります。そのディレクトリから、 Bitrise.ioにデプロイします ステップは結果をアドオンにエクスポートします。 テスト結果が正しい場所に適切な形式で表示されるようにするには、次の3つの方法があります。 結果を自動的にエクスポートする専用のテスト手順を使用します。これらのステップを使用すると、テストステップとテストステップの両方を実行するだけで済みます。 Bitrise.ioにデプロイします ワークフローに進み、ビルドを実行します。 を使用して テスト結果をテストレポートアドオンにエクスポートする ステップ。 カスタムを使用する 脚本 ステップ。 テストステップからの結果のエクスポート 2番目と3番目の方法はどちらも、任意のステップからテスト結果をエクスポートできます。詳細については、 任意のステップからのテストレポートへのエクスポート ガイド。 テストレポートは、次の2つの形式のいずれかのテスト結果を読み取って表示できます。 デフォルトでは、5つのテストステップでテストレポートを使用できます。これらの手順では、リポジトリで定義されたテストを実行してから、出力を環境変数に保存します。 The Bitrise.ioにデプロイします ステップが残りを実行します。結果を読み取り、テストレポートに送信できます。手順は次のとおりです。 iOS用Xcodeテスト 。 Androidユニットテスト 。 iOSデバイスのテスト 。 Android用の仮想デバイステスト 。 フラッターテスト 。 これらの手順を使用すると、テスト結果の形式や場所を気にする必要がありません。確認する必要があるのは、 Bitrise.ioにデプロイします ワークフローの最後に進みます。 テストガイド Bitriseでこれらのステップを使用する方法の詳細については、テストガイドを確認してください。 AndroidユニットテストAndroidのデバイステストiOSのデバイステストXcodeテストの実行Flutterアプリの使用を開始する" }, 
{ "title" : "テストレポートの構成 ", 
"url" : "テスト/テストレポート.html#テストレポートの構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストレポート \/ テストレポートの構成 ", 
"snippet" : "テストレポートには、複雑な構成は必要ありません。必要なのは、リポジトリにテストを行い、ワークフローに2つのステップを含めることだけです。 Bitrise.ioバージョンにデプロイします Deploy to Bitrise.ioステップは、バージョン1.4.1以降である必要があります。古いバージョンのステップはテストレポートをサポートしていません。最高のエクスペリエンスを得るには、バージョン1.5.0以降を使用することをお勧めします。 アプリのリポジトリにテストを追加します。 適切なテスト手順をワークフローに追加します。たとえば、iOSプロジェクトがある場合は、 iOS用Xcodeテスト Xco...", 
"body" : "テストレポートには、複雑な構成は必要ありません。必要なのは、リポジトリにテストを行い、ワークフローに2つのステップを含めることだけです。 Bitrise.ioバージョンにデプロイします Deploy to Bitrise.ioステップは、バージョン1.4.1以降である必要があります。古いバージョンのステップはテストレポートをサポートしていません。最高のエクスペリエンスを得るには、バージョン1.5.0以降を使用することをお勧めします。 アプリのリポジトリにテストを追加します。 適切なテスト手順をワークフローに追加します。たとえば、iOSプロジェクトがある場合は、 iOS用Xcodeテスト Xcodeテストを実行する手順。 あなたが持っていることを確認してください Bitrise.ioにデプロイします ワークフローにステップインします。 ビルドを実行します。 以上です！ビルドが完了すると、テストレポートを表示できるようになります。 " }, 
{ "title" : "テスト結果の確認 ", 
"url" : "テスト/テストレポート.html#テスト結果の確認-78785", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストレポート \/ テスト結果の確認 ", 
"snippet" : "テストレポートには、実行したすべてのテストに関する最も重要な情報が表示されます。 テストの概要 タブ。実行したすべてのテスト、それらの期間、およびそれらの結果が表示されます。個々のテストのタブをクリックして、詳細を確認することもできます。 特定のテストの結果にアクセスするには： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 に移動します 詳細とアドオン タブ。 選択する テストレポート 。 に テストの概要 タブで、確認したいテストを見つけます。または、トップバーで、チェックアウトするテストセットのタブをクリックします。結果に...", 
"body" : "テストレポートには、実行したすべてのテストに関する最も重要な情報が表示されます。 テストの概要 タブ。実行したすべてのテスト、それらの期間、およびそれらの結果が表示されます。個々のテストのタブをクリックして、詳細を確認することもできます。 特定のテストの結果にアクセスするには： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 に移動します 詳細とアドオン タブ。 選択する テストレポート 。 に テストの概要 タブで、確認したいテストを見つけます。または、トップバーで、チェックアウトするテストセットのタブをクリックします。結果に基づいてテストをフィルタリングするには、右上のメニューを開きます。 全て デフォルトでは。 クリック テストケース 詳細を確認します。 UIテストはデバイスごとにグループ化され、単体テストはテストケースごとにグループ化されます。 見つけるだろう： 実行したテストの総数、および成功したテストと失敗したテストの比率。 個々のテスト（単体テストとUIテストの両方）の期間。 UIテストの場合、デバイスの向きとロケール。 テストの種類に応じて、次のことを確認できます。 個々のテストケース パフォーマンスデータ ビデオ スクリーンショット アーティファクトをテストする ログ 上記のように、これはテストの種類によっても異なります。単体テストの場合、もちろんスクリーンショットやビデオは表示されません。 " }, 
{ "title" : "ファイルのダウンロード ", 
"url" : "テスト/テストレポート.html#ファイルのダウンロード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストレポート \/ ファイルのダウンロード ", 
"snippet" : "すべてのファイルは、スクリーンショット、ビデオ、またはAPKファイルとIPAファイルを含むテストレポートからダウンロードできます。 テストセットを開きます。 左側のメニューで、ファイルを含むタブをクリックします。 例えば、 アーティファクトのテスト 。 クリック ダウンロード ファイル名の横。 タブで利用可能なすべてのファイルをダウンロードする場合は、をクリックします すべてのファイルをダウンロード 。...", 
"body" : "すべてのファイルは、スクリーンショット、ビデオ、またはAPKファイルとIPAファイルを含むテストレポートからダウンロードできます。 テストセットを開きます。 左側のメニューで、ファイルを含むタブをクリックします。 例えば、 アーティファクトのテスト 。 クリック ダウンロード ファイル名の横。 タブで利用可能なすべてのファイルをダウンロードする場合は、をクリックします すべてのファイルをダウンロード 。 " }, 
{ "title" : "任意のステップからのテストレポートへのエクスポート ", 
"url" : "テスト/任意のステップからのテストレポートへのエクスポート.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ 任意のステップからのテストレポートへのエクスポート ", 
"snippet" : "テスト結果をテストレポートアドオンステップにエクスポートを使用して、任意のステップからテストレポートをエクスポートできます。または、ファイルをエクスポートするように独自のスクリプトステップを構成することもできます。 テストレポート 便利な方法ですべてのテスト結果を表示できます。デフォルトでは、5つ ステップ テストレポートアドオンをサポートします。 iOS用Xcodeテスト Androidユニットテスト iOSデバイスのテスト Android用の仮想デバイステスト フラッターテスト 他のステップで生成されたテスト結果をにエクスポートするには Bitrise.ioにデプロイします ステップ、2つ...", 
"body" : "テスト結果をテストレポートアドオンステップにエクスポートを使用して、任意のステップからテストレポートをエクスポートできます。または、ファイルをエクスポートするように独自のスクリプトステップを構成することもできます。 テストレポート 便利な方法ですべてのテスト結果を表示できます。デフォルトでは、5つ ステップ テストレポートアドオンをサポートします。 iOS用Xcodeテスト Androidユニットテスト iOSデバイスのテスト Android用の仮想デバイステスト フラッターテスト 他のステップで生成されたテスト結果をにエクスポートするには Bitrise.ioにデプロイします ステップ、2つのオプションがあります： を使用することを強くお勧めします テスト結果をテストレポートアドオンにエクスポートする ステップ ：このステップでは、入力に基づいてテスト結果を検索します。 独自のカスタムを構成できます 脚本 必要なファイルを作成およびエクスポートするステップ。 " }, 
{ "title" : "テスト結果をテストレポートアドオンにエクスポートするステップを使用する ", 
"url" : "テスト/任意のステップからのテストレポートへのエクスポート.html#テスト結果をテストレポートアドオンにエクスポートするステップを使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ 任意のステップからのテストレポートへのエクスポート \/ テスト結果をテストレポートアドオンにエクスポートするステップを使用する ", 
"snippet" : "結果を自動的にエクスポートしないステップを使用している場合でも、テスト結果をテストレポートアドオンステップにエクスポートして、テスト結果がテストレポートアドオンに表示されるようにすることができます。 正しい構成で、ステップはアプリのリポジトリでテスト結果を見つけ、それらをエクスポートディレクトリに配置します。 スクリーンショットとその他の画像 ステップは、どちらかでテスト結果のみをエクスポートできます .xcresult また JUnit XML フォーマット。テスト結果が .xcresult ファイル、テストの一部として生成されたスクリーンショットが含まれ、テストレポートアドオンにエクスポー...", 
"body" : "結果を自動的にエクスポートしないステップを使用している場合でも、テスト結果をテストレポートアドオンステップにエクスポートして、テスト結果がテストレポートアドオンに表示されるようにすることができます。 正しい構成で、ステップはアプリのリポジトリでテスト結果を見つけ、それらをエクスポートディレクトリに配置します。 スクリーンショットとその他の画像 ステップは、どちらかでテスト結果のみをエクスポートできます .xcresult また JUnit XML フォーマット。テスト結果が .xcresult ファイル、テストの一部として生成されたスクリーンショットが含まれ、テストレポートアドオンにエクスポートされます。 JUnit XML形式を使用する場合は、スクリーンショットとその他の画像を別々にエクスポートする必要があります。 スクリーンショットやその他の画像をテストレポートにエクスポートする。 上のアプリのページに移動します bitrise.io 。 に移動 ワークフロー ワークフローエディタを開きます。 から ワークフロー メニューで、テストの実行に使用するワークフローを選択します。 追加します テスト結果をテストレポートアドオンにエクスポートする テストステップの後のステップ。 の中に テストの名前 入力、テストの名前を設定します。テスト結果は、テストレポートアドオンでこの名前になります。 の中に カスタムテスト結果が存在するパス 入力、テスト結果を見つけることができるパスを設定します。 ここでフォルダを設定することをお勧めしますが、特定のファイルパスを設定することもできます。デフォルト値は、アプリのソースディレクトリです。パターンの例： アプリのルートディレクトリがappの場合： app\/build\/test-results\/testDemoDebugUnitTest\/ テスト結果がアプリフォルダー内にあるが、アプリがルートディレクトリではない場合：.\/ app \/ build \/ test-results \/ testDemoDebugUnitTest \/ の中に テスト結果の検索パターン 入力し、テスト結果ファイルに一致するパターンを設定します。 この検索パターンは、で設定されたパスのすべてのファイルとフォルダを検索するために使用されます カスタムテスト結果が存在するパス 入力。 一致するものが複数ある場合、ステップは最初の一致をエクスポートし、警告をログに記録します。前の入力で特定のファイルパスを設定した場合は、ここで*を設定するだけです。 パターンの例： ベースパス内のすべてのファイルの照合： * ベースパスの特定のディレクトリ内のすべてのファイルを照合します。 *\/build\/test-results\/testDemoDebugUnitTest\/* の中に ステップのテスト結果ディレクトリ 入力し、パスが正しいことを確認してください。 この入力の値は変更しないでください。これは、 Bitrise.ioにデプロイします ステップは、それらをエクスポートするためのテスト結果を探します。に設定する必要があります $BITRISE_TEST_RESULT_DIR 環境変数 あなたが持っていることを確認してください Bitrise.ioにデプロイします ワークフローにステップインします。 " }, 
{ "title" : "カスタムスクリプトを使用してテスト結果をエクスポートする ", 
"url" : "テスト/任意のステップからのテストレポートへのエクスポート.html#カスタムスクリプトを使用してテスト結果をエクスポートする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ 任意のステップからのテストレポートへのエクスポート \/ カスタムスクリプトを使用してテスト結果をエクスポートする ", 
"snippet" : "で独自のスクリプトを使用できます 脚本 テスト結果をエクスポートする手順。次のことを確認する必要があります。 テスト結果はJUnitXML形式です。 結果を$ BITRISE_TEST_RESULT_DIRに配置します。これは、正しいパスを指す環境変数です。 あなたは test-info.json 各テスト結果のサブディレクトリにあるファイル。 NS test-info.json ファイル NS test-info.json ファイルには、テスト名が定義されている必要があります。各テスト結果には独自のテスト結果が必要です test-info.json ファイル。 test-nameの値は、[テ...", 
"body" : "で独自のスクリプトを使用できます 脚本 テスト結果をエクスポートする手順。次のことを確認する必要があります。 テスト結果はJUnitXML形式です。 結果を$ BITRISE_TEST_RESULT_DIRに配置します。これは、正しいパスを指す環境変数です。 あなたは test-info.json 各テスト結果のサブディレクトリにあるファイル。 NS test-info.json ファイル NS test-info.json ファイルには、テスト名が定義されている必要があります。各テスト結果には独自のテスト結果が必要です test-info.json ファイル。 test-nameの値は、[テストレポート]ページに実行されたテストの名前として表示されます。 \/\/ Test Name ... { \"test-name\":\"My first test\" } テスト結果をエクスポートするためのスクリプトの例を次に示します。 #!\/bin\/env bash\nset -ex\n\n# Creating a sub-directory for the test run within the BITRISE_TEST_RESULT_DIR:\n\ntest_run_dir=\"$BITRISE_TEST_RESULT_DIR\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# Exporting the JUnit XML test report:\n\ncp \"MY\/TEST\/REPORT\/XML\/FILE\/PATH.xml\" \"$test_run_dir\/UnitTest.xml\"\n\n# Creating the test-info.json file with the name of the test run defined:\n\necho '{\"test-name\":\"MY TEST RUN NAME\"}' >> \"$test_run_dir\/test-info.json\"\n すべてがうまくいけば、あなたはであなたのテスト結果を見ることができるはずです テストレポート ページ。 " }, 
{ "title" : "スクリーンショットやその他の画像をテストレポートにエクスポートする ", 
"url" : "テスト/任意のステップからのテストレポートへのエクスポート.html#スクリーンショットやその他の画像をテストレポートにエクスポートする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ 任意のステップからのテストレポートへのエクスポート \/ スクリーンショットやその他の画像をテストレポートにエクスポートする ", 
"snippet" : "The テスト結果をテストレポートアドオンにエクスポートする ステップは、テスト結果ファイルをにエクスポートすることしかできません Bitrise.ioにデプロイします 結果の2つの形式をサポートするステップ： The .xcresult iOSアプリ用のファイル。 A JUnitXMLファイル どのアプリでも。 テストで .xcresult ファイル、テスト実行中に生成されたスクリーンショットは、テスト結果の一部です。そのため、それらはテストレポートアドオンにエクスポートされます。 その他の場合、スクリーンショットやその他の画像は自動的にエクスポートされません。ただし、それらがTestRep...", 
"body" : "The テスト結果をテストレポートアドオンにエクスポートする ステップは、テスト結果ファイルをにエクスポートすることしかできません Bitrise.ioにデプロイします 結果の2つの形式をサポートするステップ： The .xcresult iOSアプリ用のファイル。 A JUnitXMLファイル どのアプリでも。 テストで .xcresult ファイル、テスト実行中に生成されたスクリーンショットは、テスト結果の一部です。そのため、それらはテストレポートアドオンにエクスポートされます。 その他の場合、スクリーンショットやその他の画像は自動的にエクスポートされません。ただし、それらがTestReportsアドオンにも含まれることを確認できます。あなたがする必要があるのは、画像をに配置するスクリプトを作成することです $BITRISE_TEST_RESULT_DIR フォルダ。 You need to use a custom script to export both the result and the screenshots. The script to export both must be in the same Script Step, and you must have a test-info.json file with the necessary information about the test runs: カスタムスクリプトを使用してテスト結果をエクスポートする. To export screenshots with the results, the script must place the images in the $BITRISE_TEST_RESULT_DIR folder. Folder structure The image files themselves must be in the $BITRISE_TEST_RESULT_DIR folder. They can't be nested in another folder within $BITRISE_TEST_RESULT_DIR . 画像をエクスポートするスクリプト #!\/bin\/env bash\nset -ex\n\n# Creating a sub-directory for the test run within the BITRISE_TEST_RESULT_DIR:\n\ntest_run_dir=\"$BITRISE_TEST_RESULT_DIR\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# copying the image:\n\ncp \"MY\/TEST\/SCREENSHOTS\/screenshot.png\" \"$test_run_dir\/screenshot.png\" 画像とテスト実行の関連付け そのテスト実行のディレクトリにイメージを配置することにより、イメージを特定のテスト実行に関連付けることができます。その場合、画像は特定のテスト実行のすべてのテストスーツの下に表示されます。 " }, 
{ "title" : "Xcodeテストの実行 ", 
"url" : "テスト/xcodeテストの実行.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Xcodeテストの実行 ", 
"snippet" : "Xcodeテストを実行してその結果を表示するには、iOS用のXcodeテストとBitrise.ioへのデプロイの2つのステップが必要です。 BitriseでXcodeテストを実行するには、プロジェクトでテストターゲットを定義する必要があります。 Xcodeテストを実行してその結果を表示するには、次の2つの手順が必要です。 iOS用Xcodeテスト 。 にデプロイする Bitrise.io 。 コード署名ファイル Xcodeテストを実行し、その結果をBitriseにデプロイするために、コード署名ファイルは必要ありません。だから、まだそれらについて心配しないでください！ NS iOS用Xcodeテ...", 
"body" : "Xcodeテストを実行してその結果を表示するには、iOS用のXcodeテストとBitrise.ioへのデプロイの2つのステップが必要です。 BitriseでXcodeテストを実行するには、プロジェクトでテストターゲットを定義する必要があります。 Xcodeテストを実行してその結果を表示するには、次の2つの手順が必要です。 iOS用Xcodeテスト 。 にデプロイする Bitrise.io 。 コード署名ファイル Xcodeテストを実行し、その結果をBitriseにデプロイするために、コード署名ファイルは必要ありません。だから、まだそれらについて心配しないでください！ NS iOS用Xcodeテスト stepは、事前定義されたXcodeテストを実行します。テストが正しく記述されている場合に機能するデフォルト構成があります。 Xcodeにも同じ構成オプションがあります。 Xcode Test for iOS ステップの使用時のパッケージ依存関係エラー Xcode Test for iOS Step を使用しているときにパッケージの依存関係エラーが発生した場合は、こちらを確認してください。 ナレッジベースの記事 可能な解決策のために。 コードカバレッジファイルを生成し、テスト結果を圧縮されたzipファイルとしてエクスポートすることもできます。 テストレポート Xcodeテスト結果はテストレポートにエクスポートされます。 テストレポート あなたのためにそれを機能させる方法を見つけるためのガイド。 " }, 
{ "title" : "BitriseでのXcodeテストの構成 ", 
"url" : "テスト/xcodeテストの実行.html#bitriseでのxcodeテストの構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Xcodeテストの実行 \/ BitriseでのXcodeテストの構成 ", 
"snippet" : "のデフォルトの入力値 iOS用Xcodeテスト テストが正しく記述されていれば、ステップは機能する可能性があります。ただし、ステップが必要なことを実行できるように、すべての入力に必要な値があることを確認することをお勧めします。 生成された結果のエクスポート NS iOS用Xcodeテスト ステップは.xcresultバンドルを生成し、それをEnvVarで設定された場所にエクスポートします $BITRISE_XCRESULT_PATH 。 xcovなどの一部のツールは、デフォルトの場所ではなく、デフォルトの場所で結果バンドルを検索することに注意してください。 $BITRISE_XCRESULT_...", 
"body" : "のデフォルトの入力値 iOS用Xcodeテスト テストが正しく記述されていれば、ステップは機能する可能性があります。ただし、ステップが必要なことを実行できるように、すべての入力に必要な値があることを確認することをお勧めします。 生成された結果のエクスポート NS iOS用Xcodeテスト ステップは.xcresultバンドルを生成し、それをEnvVarで設定された場所にエクスポートします $BITRISE_XCRESULT_PATH 。 xcovなどの一部のツールは、デフォルトの場所ではなく、デフォルトの場所で結果バンドルを検索することに注意してください。 $BITRISE_XCRESULT_PATH 。このため、これらのツールを使用するとビルドが失敗します。 EnvVarによって設定された場所でバンドルを検索するように構成する必要があります。 xcovのセットアップ例を次に示します。 xcov.report(\n scheme: 'ExampleScheme',\n workspace: 'example.xcworkspace',\n xccov_file_direct_path: ENV['BITRISE_XCRESULT_PATH'],\n include_targets: 'Example.app,ExampleShared.framework,ExampleWidget.appex'\n) 次の必要な入力を確認してください iOS用Xcodeテスト ビルドを実行する前の手順。これらの入力は、ステップが実行するテストの種類を決定します。 図式 : 使用する Xcode スキームは、Xcode で Shared としてマークする必要があります! 端末 ：Xcodeのデバイス選択ドロップダウンメニューに表示される値に設定します。 OSバージョン ：Xcodeのデバイス選択ドロップダウンメニューに表示される値に設定します。 プラットホーム ：Xcodeのデバイス選択ドロップダウンメニューに表示される値に設定します。 ヘッドレスモード Xcode 9以降、テストはデフォルトでヘッドレスモードで実行されます。これは、シミュレーターがバックグラウンドでのみ実行されることを意味します。変更するには、ステップのデバッグ入力グループに移動して、 ヘッドレスモードでテストを実行しますか？ 入力の値を no 。ただし、このオプションを使用すると、テストに時間がかかります。 xcprettyの使用 xcpretty 出力ツールは並列テストをサポートしていません。プロジェクトで並列テストが有効になっている場合は、ステップの xcodebuild ログのフォーマット 入力グループと設定 ログフォーマッタ 入力の値 xcodebuild また xcbeautify . " }, 
{ "title" : "失敗したテストの再実行（Xcode 13では使用できません） ", 
"url" : "テスト/xcodeテストの実行.html#失敗したテストの再実行-xcode-13では使用できません-", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Xcodeテストの実行 \/ 失敗したテストの再実行（Xcode 13では使用できません） ", 
"snippet" : "NS 失敗時にテストを再試行する必要がありますか？ （Xcode 13以降では使用できません） に入力 デバッグ のセクション iOS用Xcodeテスト ステップを使用すると、失敗したテストだけでなく、すべてのテストを自動的に再実行できます。この入力をに設定した場合 yes 、ステップが実行されます xcodebuild テストが失敗した場合はもう一度。 Xcode13以降から 失敗時にテストを再試行する必要がありますか？ （Xcode 13以降では使用できません） この機能はご利用いただけなくなりました。使用することをお勧めします テスト繰り返しモード（Xcode 13以降で使用可能） で入...", 
"body" : "NS 失敗時にテストを再試行する必要がありますか？ （Xcode 13以降では使用できません） に入力 デバッグ のセクション iOS用Xcodeテスト ステップを使用すると、失敗したテストだけでなく、すべてのテストを自動的に再実行できます。この入力をに設定した場合 yes 、ステップが実行されます xcodebuild テストが失敗した場合はもう一度。 Xcode13以降から 失敗時にテストを再試行する必要がありますか？ （Xcode 13以降では使用できません） この機能はご利用いただけなくなりました。使用することをお勧めします テスト繰り返しモード（Xcode 13以降で使用可能） で入力 retry_on_failure オプションが選択されました。これにより、すべてのテストを実行する代わりに、失敗したテストのみを再実行できます。このテスト繰り返し機能は、 iOS用Xcodeテスト バージョン3.0.0以降からのステップ。 " }, 
{ "title" : "テストの繰り返し ", 
"url" : "テスト/xcodeテストの実行.html#テストの繰り返し", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Xcodeテストの実行 \/ テストの繰り返し ", 
"snippet" : "Xcodeのテスト繰り返しモード で利用可能です iOSステップのXcodeテスト BitriseでXcode13以降を実行しているスタック。テストの繰り返しを使用すると、失敗時の再試行、失敗するまで、最大繰り返しまでなど、さまざまな方法で任意のタイプのテストを複数回実行できます。 NS iOS用Xcodeテスト ステップの テスト繰り返しモード（Xcode 13以降で使用可能） inputには、次のオプションがあります。 none ：テストは繰り返されません。 until_failure ：テストが失敗するまで、または最大の繰り返しになるまで、テストを繰り返します。デフォルトのテスト実行回数...", 
"body" : "Xcodeのテスト繰り返しモード で利用可能です iOSステップのXcodeテスト BitriseでXcode13以降を実行しているスタック。テストの繰り返しを使用すると、失敗時の再試行、失敗するまで、最大繰り返しまでなど、さまざまな方法で任意のタイプのテストを複数回実行できます。 NS iOS用Xcodeテスト ステップの テスト繰り返しモード（Xcode 13以降で使用可能） inputには、次のオプションがあります。 none ：テストは繰り返されません。 until_failure ：テストが失敗するまで、または最大の繰り返しになるまで、テストを繰り返します。デフォルトのテスト実行回数は3回です。 retry_on_failure ：失敗したテストは、成功するまで、または指定した繰り返し回数になるまで実行されます。テストのデフォルトの繰り返し回数は3回です。 up_until_maximum_repetitions ：テストの結果に関係なく、最大のテスト繰り返しに達するまで、すべてのテストを再実行します。 これらのオプションはからのみ利用可能であることに注意してください iOS用Xcodeテスト バージョン3.0.0以降。 とともに 最大テスト繰り返し（Xcode 13以降で利用可能） 入力では、テストの最大繰り返し回数を指定できます。次の場合は、1よりも大きい数を追加する必要があることに注意してください。 テスト繰り返しモード（Xcode 13以降で使用可能） 入力が以外に設定されている none 。 有効にする 各繰り返しの再起動テスト（Xcode 13以降で利用可能） 繰り返しごとにまったく新しいプロセスでテストを起動するための入力。 " }, 
{ "title" : ".ipa ファイルのインストール ", 
"url" : "テスト/-ipa-ファイルのインストール.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ .ipa ファイルのインストール ", 
"snippet" : ".ipa ファイルは、パブリック インストール ページまたはビルドの Artifacts タブからインストールできます。 .ipa ファイルは、パブリック インストール ページまたは アーティファクト ビルドのタブ。 パブリック インストール ページと .ipa ファイルへのアクセスの両方 アーティファクト タブを使用すると、プロビジョニングおよび登録済みのテスト デバイスに .ipa ファイルをインストールできます。許可されているデバイス タイプは、iPhone と iPad です。 テストデバイスへの.ipaファイルのインストールは、デバイスの互換性チェックの開始、テストデバイスへの構成プ...", 
"body" : ".ipa ファイルは、パブリック インストール ページまたはビルドの Artifacts タブからインストールできます。 .ipa ファイルは、パブリック インストール ページまたは アーティファクト ビルドのタブ。 パブリック インストール ページと .ipa ファイルへのアクセスの両方 アーティファクト タブを使用すると、プロビジョニングおよび登録済みのテスト デバイスに .ipa ファイルをインストールできます。許可されているデバイス タイプは、iPhone と iPad です。 テストデバイスへの.ipaファイルのインストールは、デバイスの互換性チェックの開始、テストデバイスへの構成プロファイルのインストール、デバイスへのアプリのインストールの3つのフェーズで構成されます。 このチュートリアルでは、次のことを説明しています。 Bitriseアカウントなしで登録済みのテストデバイスにアプリをインストールする方法（Bitriseにサブスクライブしていないが、アプリの現在のバージョンを確認したい人向け）。 Bitriseにまだ登録されていないテストデバイスにアプリをインストールする方法（Bitriseユーザー向け）。 Artifacts タブからの .ipa ファイルのインストール からの .ipa ファイルのインストール アーティファクト タブは Bitrise ユーザーのみ可能です。 " }, 
{ "title" : "インストールの準備 ", 
"url" : "テスト/-ipa-ファイルのインストール.html#インストールの準備", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ .ipa ファイルのインストール \/ インストールの準備 ", 
"snippet" : "アプリをテストデバイスにインストールする前に、アプリの開発者はアプリをビルドして他のユーザーと共有するためのいくつかの手順を完了する必要があります。 アプリがインストールされるデバイスは、開発者のAppleアカウントにテストデバイスとして登録されます。 デバイスは、アプリのプロビジョニングプロファイルに含まれている必要があります。 デバイスは、アプリの最小OS要件を満たしています。 テストデバイスがAppleDeveloperポータルに登録されていない場合、開発者は手動でデバイスリストに追加し、アプリを再構築して、.ipaファイルにテストデバイスが含まれるようにする必要があることに注意してくだ...", 
"body" : "アプリをテストデバイスにインストールする前に、アプリの開発者はアプリをビルドして他のユーザーと共有するためのいくつかの手順を完了する必要があります。 アプリがインストールされるデバイスは、開発者のAppleアカウントにテストデバイスとして登録されます。 デバイスは、アプリのプロビジョニングプロファイルに含まれている必要があります。 デバイスは、アプリの最小OS要件を満たしています。 テストデバイスがAppleDeveloperポータルに登録されていない場合、開発者は手動でデバイスリストに追加し、アプリを再構築して、.ipaファイルにテストデバイスが含まれるようにする必要があることに注意してください。にインストールされています。また、あなたをお勧めします Bitriseにテストデバイスを登録します 同様に。 パブリックインストールページではどのブラウザを使用する必要がありますか？ テストデバイスにアプリをインストールする場合は、アプリのパブリックインストールページが非シークレットモードのネイティブSafariセッションで開かれていることを確認する必要があります。 " }, 
{ "title" : "Bitrise のパブリック インストール ページから iPadOS を搭載した iPad に .ipa ファイルをインストールする ", 
"url" : "テスト/-ipa-ファイルのインストール.html#bitrise-のパブリック-インストール-ページから-ipados-を搭載した-ipad-に--ipa-ファイルをインストールする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ .ipa ファイルのインストール \/ インストールの準備 \/ Bitrise のパブリック インストール ページから iPadOS を搭載した iPad に .ipa ファイルをインストールする ", 
"snippet" : "iPadOSを実行しているiPadを使用している場合は、モバイルモードでBitriseパブリックインストールページを開いていることを確認してください。 .ipa ファイルのパブリック インストール ページを開くと、Bitrise はデバイスが組み込みのプロビジョニング プロファイルに保存されているかどうかを確認します。このチェックは、デスクトップ バージョンではなくモバイル モードでパブリック インストール ページにアクセスした場合にのみ完了します。一時的にモバイルモードに切り替えることをお勧めします。 Safariアドレスバーの左隅にあるᴀAアイコンをタップしてから、をタップすると、一時的に...", 
"body" : "iPadOSを実行しているiPadを使用している場合は、モバイルモードでBitriseパブリックインストールページを開いていることを確認してください。 .ipa ファイルのパブリック インストール ページを開くと、Bitrise はデバイスが組み込みのプロビジョニング プロファイルに保存されているかどうかを確認します。このチェックは、デスクトップ バージョンではなくモバイル モードでパブリック インストール ページにアクセスした場合にのみ完了します。一時的にモバイルモードに切り替えることをお勧めします。 Safariアドレスバーの左隅にあるᴀAアイコンをタップしてから、をタップすると、一時的にモバイルモードに簡単に切り替えることができます。 モバイルウェブサイトを表示 オプション。 " }, 
{ "title" : "パブリック インストール ページからテスト デバイスに .ipa ファイルをインストールする ", 
"url" : "テスト/-ipa-ファイルのインストール.html#パブリック-インストール-ページからテスト-デバイスに--ipa-ファイルをインストールする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ .ipa ファイルのインストール \/ パブリック インストール ページからテスト デバイスに .ipa ファイルをインストールする ", 
"snippet" : "パブリック インストール ページは、アプリの最新バージョンをチーム メンバーや、アプリをチェックしたい他の利害関係者と共有するのに便利な方法です。このページには、ファイル名、サイズ、バージョン コード、最小 SDK バージョン、ビルド番号など、ビルドの重要な詳細がすべて含まれています。アプリをビルドする前にメールアドレスまたは Bitrise チームの役割を追加した人は誰でも、公開インストールページへのリンクが記載されたメールを Bitrise から受け取ります。パブリック インストール ページの直接リンクは、誰とでも共有できます。そこから、自分のテスト デバイスにアプリをすばやくインストール...", 
"body" : "パブリック インストール ページは、アプリの最新バージョンをチーム メンバーや、アプリをチェックしたい他の利害関係者と共有するのに便利な方法です。このページには、ファイル名、サイズ、バージョン コード、最小 SDK バージョン、ビルド番号など、ビルドの重要な詳細がすべて含まれています。アプリをビルドする前にメールアドレスまたは Bitrise チームの役割を追加した人は誰でも、公開インストールページへのリンクが記載されたメールを Bitrise から受け取ります。パブリック インストール ページの直接リンクは、誰とでも共有できます。そこから、自分のテスト デバイスにアプリをすばやくインストールできます。 このフロー全体で、他のアプリ内ブラウザータイプの代わりに、シークレットモードではないネイティブのSafariセッションを使用します。 Bitriseから受け取った通知メールのリンクをたどると、パブリックインストールページがネイティブのSafariセッションで自動的に開きます。 アプリをダウンロードしますか？ アプリをダウンロードして手動で別の場所にアップロードしたい場合は、のダウンロードボタンをご覧ください。 アーティファクト ビルドのページ。アプリをダウンロードしても、テストデバイスにインストールできるわけではないことに注意してください。 " }, 
{ "title" : "Bitriseアカウントなしでテストデバイスにアプリをインストールする ", 
"url" : "テスト/-ipa-ファイルのインストール.html#bitriseアカウントなしでテストデバイスにアプリをインストールする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ .ipa ファイルのインストール \/ パブリック インストール ページからテスト デバイスに .ipa ファイルをインストールする \/ Bitriseアカウントなしでテストデバイスにアプリをインストールする ", 
"snippet" : "Bitriseから受け取ったリンクを長押しします。ネイティブSafariでリンクを開くには、をタップします リンクを開く 。ネイティブSafariセッションでパブリックインストールページが表示されます。メールからリンクをコピーする場合は、必ずネイティブのSafariセッションに貼り付けてください。 のリンクをタップします このデバイスとこのアプリのデバイスの互換性を確認するには、ここをクリックしてください 黄色のメッセージボックス。このメッセージが表示されない場合は、別のブラウザを使用している可能性が高いため、Safariに切り替えてください。 タップ 許可する ポップアップで、デバイスに構成...", 
"body" : "Bitriseから受け取ったリンクを長押しします。ネイティブSafariでリンクを開くには、をタップします リンクを開く 。ネイティブSafariセッションでパブリックインストールページが表示されます。メールからリンクをコピーする場合は、必ずネイティブのSafariセッションに貼り付けてください。 のリンクをタップします このデバイスとこのアプリのデバイスの互換性を確認するには、ここをクリックしてください 黄色のメッセージボックス。このメッセージが表示されない場合は、別のブラウザを使用している可能性が高いため、Safariに切り替えてください。 タップ 許可する ポップアップで、デバイスに構成プロファイルをインストールします。この構成プロファイルにより、Bitriseは互換性チェックのためにデバイスのUDIDを利用できるようになります。 ポップアップは、構成プロファイルがダウンロードされたことを確認し、にインストールできます。 設定 アプリ。タップ 選ぶ 。 をタップします 家 ボタンをクリックしてホーム画面に移動します。 開ける 設定 。ダウンロードしたプロファイルは、上部にあります。 設定 。タップ プロフィールをダウンロード プロファイルをインストールするための左側のメニュー項目。 タップ インストール 。 デバイスのパスコードを パスコードを入力してください 現れる。 タップ インストール また。 プロファイルがインストールされるまで待ちます。 プロファイルがインストールされると、パブリックインストールページに移動します。ご覧のとおり、 インストール ボタンが利用可能になりました。タップして！ タップ わかった 次のポップアップで。 最終確認として、をタップします インストール を押して 家 ボタン。これで、アプリをテストデバイスにインストールします。 アプリがテストデバイスのホーム画面にインストールされるまで待ちます。 テストデバイスに正常にインストールされたアプリを確認してください。 " }, 
{ "title" : "Bitriseに登録されていないテストデバイスにアプリをインストールする ", 
"url" : "テスト/-ipa-ファイルのインストール.html#bitriseに登録されていないテストデバイスにアプリをインストールする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ .ipa ファイルのインストール \/ パブリック インストール ページからテスト デバイスに .ipa ファイルをインストールする \/ Bitriseアカウントなしでテストデバイスにアプリをインストールする \/ Bitriseに登録されていないテストデバイスにアプリをインストールする ", 
"snippet" : "以下のメッセージを表示するテストデバイスからパブリックインストールページにアクセスしている場合は、上記のフローとはわずか数ステップ異なるBitriseにデバイスを登録する必要があります。 すでにBitriseアカウントをお持ちの場合にのみ、テストデバイスをBitriseに追加できることに注意してください。 タップ ここをクリック デバイス登録プロセスを開始します。 タップ 許可する 構成プロファイルをダウンロードします。 構成プロファイルがダウンロードされたら、をタップします 選ぶ 。 をタップします 家 あなたのに行くためのボタン 設定 テストデバイスのホーム画面にあるアプリ。 開ける 設定...", 
"body" : "以下のメッセージを表示するテストデバイスからパブリックインストールページにアクセスしている場合は、上記のフローとはわずか数ステップ異なるBitriseにデバイスを登録する必要があります。 すでにBitriseアカウントをお持ちの場合にのみ、テストデバイスをBitriseに追加できることに注意してください。 タップ ここをクリック デバイス登録プロセスを開始します。 タップ 許可する 構成プロファイルをダウンロードします。 構成プロファイルがダウンロードされたら、をタップします 選ぶ 。 をタップします 家 あなたのに行くためのボタン 設定 テストデバイスのホーム画面にあるアプリ。 開ける 設定 。ダウンロードしたプロファイルは、上部にあります。 設定 。タップ プロフィールをダウンロード プロファイルをインストールするための左側のメニュー項目。 タップ インストール 。 デバイスのパスコードを パスコードを入力してください 現れる。 タップ インストール 再び プロファイルのインストール 現れる。 プロファイルのインストールが完了するまで待ちます。自動的ににリダイレクトされます テストデバイスを登録します ページ。 デバイスの名前とUDIDが自動的に入力されます。ここで変更できるのはデバイス名のみです。タップ デバイスの登録 。 パブリックインストールページにアクセスします。 インストール ボタンが利用可能になりました。タップして！ タップ わかった プロンプトで。 テストデバイスにアプリをインストールするには、をタップします インストール 。次に、を押します 家 アプリの分割払いをフォローするボタン。 すべてがうまくいけば、インストールされているアプリはテストデバイスのホームページにあります。 " }, 
{ "title" : "[アーティファクト] タブからテスト デバイスに .ipa ファイルをインストールする ", 
"url" : "テスト/-ipa-ファイルのインストール.html#-アーティファクト--タブからテスト-デバイスに--ipa-ファイルをインストールする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ .ipa ファイルのインストール \/ [アーティファクト] タブからテスト デバイスに .ipa ファイルをインストールする ", 
"snippet" : "から .ipa ファイルをインストールできます。 アーティファクト アプリのビルドのタブ。これは、パブリック インストール ページに比べてより安全な方法を提供しますが、Bitrise アカウントにログインする必要があるため、外部テスターにとって実行可能性が低くなります. から .ipa ファイルをインストールするには アーティファクト タブ： Bitrise でアプリを開きます。 インストールする .ipa ファイルを含むビルドを選択します。 に行く アーティファクト タブ。 クリック ダウンロード .ipa ファイルの横にあります。 クリック インストール 、 下 iOS デバイスにアプリを...", 
"body" : "から .ipa ファイルをインストールできます。 アーティファクト アプリのビルドのタブ。これは、パブリック インストール ページに比べてより安全な方法を提供しますが、Bitrise アカウントにログインする必要があるため、外部テスターにとって実行可能性が低くなります. から .ipa ファイルをインストールするには アーティファクト タブ： Bitrise でアプリを開きます。 インストールする .ipa ファイルを含むビルドを選択します。 に行く アーティファクト タブ。 クリック ダウンロード .ipa ファイルの横にあります。 クリック インストール 、 下 iOS デバイスにアプリをインストールする セクション。 " }, 
{ "title" : "テストデバイスの登録 ", 
"url" : "テスト/テストデバイスの登録.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストデバイスの登録 ", 
"snippet" : "iOSデバイスでSafariを開き、プロファイルから[デバイスのテスト]ページにアクセスすることで、テストデバイスを簡単に登録できます。他のブラウザでは、[デバイスを手動で登録]ボタンを使用して手動で登録できます。 テストデバイスを登録するための複数のオプションがあります bitrise.io : iOS デバイスで Safari を開き、 試験装置 あなたのタブ プロファイル設定 ページ。 からデバイスを手動で登録します。 試験装置 あなたのタブ プロファイル設定 ページ。 デバイスを Bitrise に登録したら、必ず Apple 開発者ポータル 同じように。または、次のように設定できます...", 
"body" : "iOSデバイスでSafariを開き、プロファイルから[デバイスのテスト]ページにアクセスすることで、テストデバイスを簡単に登録できます。他のブラウザでは、[デバイスを手動で登録]ボタンを使用して手動で登録できます。 テストデバイスを登録するための複数のオプションがあります bitrise.io : iOS デバイスで Safari を開き、 試験装置 あなたのタブ プロファイル設定 ページ。 からデバイスを手動で登録します。 試験装置 あなたのタブ プロファイル設定 ページ。 デバイスを Bitrise に登録したら、必ず Apple 開発者ポータル 同じように。または、次のように設定できます。 Xcode アーカイブ & iOS 用エクスポート ステップス Apple Developer Portal でテスト デバイスを登録する への入力 true 下 自動コード署名 カテゴリを選択して、アプリの使用可能なすべてのテスト デバイスを登録します。 Apple Developer Portal のデバイス制限 Apple Developer Portal に登録できるデバイスには制限があります。 アプリの使用可能なテスト デバイスのリストを確認する を使用する前に Xcode アーカイブ & iOS 用エクスポート ステップス Apple Developer Portal でテスト デバイスを登録する 入力してデバイスを登録してください！ " }, 
{ "title" : "Safariを使用してiOSデバイスを登録する ", 
"url" : "テスト/テストデバイスの登録.html#safariを使用してiosデバイスを登録する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストデバイスの登録 \/ Safariを使用してiOSデバイスを登録する ", 
"snippet" : "iOSテストデバイスを登録する最も快適な方法 bitrise.io 開くことです bitrise.io Safariで。このようにして、デバイスの設定を開き、一時的なプロファイルを作成して、一意のデバイス識別子（UDID）を取得できます。このようにして、それを探して手動でコピー\/貼り付けする必要はありません。 キャッシュをクリアする 公開インストールページからアプリをインストールする場合は、キャッシュをクリアする必要があります。に表示されるリンクをクリックします。 古いデバイスから設定を同期した場合は、キャッシュをクリアして新しいデバイスを登録する必要があります ライン。リンクはにリダイレクト...", 
"body" : "iOSテストデバイスを登録する最も快適な方法 bitrise.io 開くことです bitrise.io Safariで。このようにして、デバイスの設定を開き、一時的なプロファイルを作成して、一意のデバイス識別子（UDID）を取得できます。このようにして、それを探して手動でコピー\/貼り付けする必要はありません。 キャッシュをクリアする 公開インストールページからアプリをインストールする場合は、キャッシュをクリアする必要があります。に表示されるリンクをクリックします。 古いデバイスから設定を同期した場合は、キャッシュをクリアして新しいデバイスを登録する必要があります ライン。リンクはにリダイレクトされます プロファイル設定 以下の手順を実行できるページ。 アプリのインストールについて詳しくは、Googleの公開インストールページをご覧ください。 iOSアプリをBitrise.ioにデプロイする ガイド。 でSafariを開く 非シークレットモード iOSデバイスでログインします bitrise.io 。 あなたのに行く プロフィール 。 タップ アカウント設定 。 タップ テストデバイス 左に。 タップ このデバイスを登録する 。 ポップアップウィンドウで、をタップします 許可する となることによって bitrise.io 構成プロファイルを表示できます。 タップ インストール いつ プロファイルのインストール ダイアログが表示されます。 デバイスのパスコードを入力します。 タップ インストール に プロファイルのインストール また。これで、UDIDとiOSデバイス名をで確認できます。 デバイスを登録する ダイアログ。 タップ デバイスの登録 。 このテストデバイスをに登録します Appleデベロッパポータル 正しいプロビジョニングプロファイルをデバイスに追加するか、 自動プロビジョニング プロファイル生成を有効にする手順。 に戻ったら Test devices 、登録済みのデバイスを確認できます。 をクリックすると、登録済みのデバイスをいつでも削除できます。 削除する ボタン。 " }, 
{ "title" : "テストデバイスを手動で登録する ", 
"url" : "テスト/テストデバイスの登録.html#テストデバイスを手動で登録する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストデバイスの登録 \/ テストデバイスを手動で登録する ", 
"snippet" : "上のプロフィールに移動します bitrise.io 。 クリック テストデバイス 左に。 クリック 手動で登録する 。 の中に デバイスを登録する ダイアログ、記入してください 題名 フィールドと 識別子 デバイスのUDIDを含むフィールド。 打つ デバイスの登録 。 あなたはできる UDIDを取得する デバイスをコンピュータに接続し、iTunesを開いた場合。下 概要 、シリアル番号が表示されます。それをクリックすると、デバイスのが表示されます UDID に貼り付けることができます 識別子 私たちのフィールド テストデバイス 。 このテストデバイスをに登録します Appleデベロッパポータル...", 
"body" : "上のプロフィールに移動します bitrise.io 。 クリック テストデバイス 左に。 クリック 手動で登録する 。 の中に デバイスを登録する ダイアログ、記入してください 題名 フィールドと 識別子 デバイスのUDIDを含むフィールド。 打つ デバイスの登録 。 あなたはできる UDIDを取得する デバイスをコンピュータに接続し、iTunesを開いた場合。下 概要 、シリアル番号が表示されます。それをクリックすると、デバイスのが表示されます UDID に貼り付けることができます 識別子 私たちのフィールド テストデバイス 。 このテストデバイスをに登録します Appleデベロッパポータル 正しいプロビジョニングプロファイルをデバイスに追加するか、 自動プロビジョニングステップ プロファイルの生成を有効にします。 これで、登録済みのテスト デバイスが下に表示されます。 登録試験機 セクション。 オレンジをクリックすると、いつでもこの登録済みデバイスを削除できます バツ アイコン。 " }, 
{ "title" : "アプリで利用可能なテストデバイスを確認する ", 
"url" : "テスト/テストデバイスの登録.html#アプリで利用可能なテストデバイスを確認する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ テストデバイスの登録 \/ アプリで利用可能なテストデバイスを確認する ", 
"snippet" : "あらゆるビットライズに対応 アプリ で、登録済みのテスト デバイスを確認できます。 アプリの設定 ページ。これにより、ロールに関係なく、アプリにアクセスできるユーザーに関連付けられているすべての登録済みテスト デバイスの集計リストが表示されます。これらのデバイスのいずれかを使用して、アプリのテストを実行できます。 登録済みデバイスのリストを次のようにダウンロードすることもできます。 .json ファイル。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 テス...", 
"body" : "あらゆるビットライズに対応 アプリ で、登録済みのテスト デバイスを確認できます。 アプリの設定 ページ。これにより、ロールに関係なく、アプリにアクセスできるユーザーに関連付けられているすべての登録済みテスト デバイスの集計リストが表示されます。これらのデバイスのいずれかを使用して、アプリのテストを実行できます。 登録済みデバイスのリストを次のようにダウンロードすることもできます。 .json ファイル。 管理者アクセスのみ の役割を持つユーザーのみ 管理者 アプリのチームでアクセスできます 設定 アプリのページ。 Bitriseでアプリを開きます。 に移動します 設定 タブ。 左側で、 テストデバイス 。 オプションで、リスト全体を次のようにダウンロードできます。 .json ファイル：をクリックします jsonとしてダウンロード ボタン。 " }, 
{ "title" : "iOSのデバイステスト ", 
"url" : "テスト/iosのデバイステスト.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ iOSのデバイステスト ", 
"snippet" : "BitriseのiOSデバイステストソリューションを使用すると、独自のデバイスをセットアップして登録しなくても、物理デバイスでiOSテストを実行できます。 BitriseのiOSデバイステストソリューションを使用すると、独自のデバイスをセットアップして登録することなく、物理デバイスでiOSテストを実行できます。専用の手順を使用して、アプリをテストするデバイスタイプを設定するだけです。 。全体的なビルド時間の制限を除いて、ステップの使用に制限はありません。 当社のデバイステストソリューションは、 Firebaseテストラボ ：Googleデータセンターで実行されている実際の本番デバイスを使用して...", 
"body" : "BitriseのiOSデバイステストソリューションを使用すると、独自のデバイスをセットアップして登録しなくても、物理デバイスでiOSテストを実行できます。 BitriseのiOSデバイステストソリューションを使用すると、独自のデバイスをセットアップして登録することなく、物理デバイスでiOSテストを実行できます。専用の手順を使用して、アプリをテストするデバイスタイプを設定するだけです。 。全体的なビルド時間の制限を除いて、ステップの使用に制限はありません。 当社のデバイステストソリューションは、 Firebaseテストラボ ：Googleデータセンターで実行されている実際の本番デバイスを使用してアプリをテストします。デバイスは更新されたAPIでフラッシュされ、カスタマイズ可能なロケール設定があります。結果のログ、ビデオ、スクリーンショットはBitriseで見つけることができます。 iOSアプリの場合、Firebase TestLabが実行されます XCTest テスト。利用可能なデバイスのリストを見つける ここ 。 制限事項 全体的なビルド時間によって制限される場合があります。また、1つのビルドに含めることができるのは1つだけであることに注意してください iOSデバイスのテスト ステップ、1つのタイプのテストを実行します。これは、BitriseがビルドスラグをFirebase TestLabに送信するためです。同じビルドスラッグを送信すると、 Build already exists エラー。 " }, 
{ "title" : "iOSアプリのデバイステストの実行 ", 
"url" : "テスト/iosのデバイステスト.html#iosアプリのデバイステストの実行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ iOSのデバイステスト \/ iOSアプリのデバイステストの実行 ", 
"snippet" : "Firebase Test Labソリューションでデバイステストを実行するには、ワークフローに2つのステップを追加する必要があります。 iOS用のテスト用のXcodeビルド。 iOSデバイスのテスト。 ベータステータス 現在、両方のステップがベータ段階にあることに注意してください。それらはすでに安定していてうまく機能しますが、私たちはそれらの改善に取り組んでいます！ NS iOS用のテスト用のXcodeビルド ステップは、 xcodebuild コマンドの build-for-testing アクション：iOSアプリで定義されたテストをビルドします Xcodeスキーム 。このステップでは、テス...", 
"body" : "Firebase Test Labソリューションでデバイステストを実行するには、ワークフローに2つのステップを追加する必要があります。 iOS用のテスト用のXcodeビルド。 iOSデバイスのテスト。 ベータステータス 現在、両方のステップがベータ段階にあることに注意してください。それらはすでに安定していてうまく機能しますが、私たちはそれらの改善に取り組んでいます！ NS iOS用のテスト用のXcodeビルド ステップは、 xcodebuild コマンドの build-for-testing アクション：iOSアプリで定義されたテストをビルドします Xcodeスキーム 。このステップでは、テストディレクトリを含む.zipファイルをエクスポートします（デフォルトでは、 Debug-iphoneos ） そしてその xctestrun ファイル。 この手順を使用するには、テストアプリのコード署名ファイルが必要です。codesigndocを使用して必要なファイルをエクスポートすることをお勧めします。 NS iOSデバイスのテスト Stepは、この.zipファイルへのパス（環境変数としてエクスポート）を入力として取得し、テストを実行してテスト結果をBitriseにエクスポートします。 自動と手動のコード署名資産管理 The iOS用のテスト用のXcodeビルド Stepは、プロビジョニングプロファイルを手動で管理しなくても、コード署名アセットを管理できます。これには、ステップで関連する入力を選択し（以下を参照）、適切な証明書をにアップロードするだけで済みます。 コード署名 タブ。これは、自動コード署名資産管理方法です。 手動のコード署名資産管理を選択する場合は、 証明書とプロファイルインストーラーを追加する 前にステップ iOS用のテスト用のXcodeビルド ステップ。前者はコード署名アセット管理を担当し、後者はプロジェクトを構築します。確認してください 自動コード署名方式 の入力 iOS用のテスト用のXcodeビルド ステップはに設定されています off 。 以下の手順では、Bitriseで自動コード署名資産管理を設定する手順について詳しく説明します。 iOS用のテスト用のXcodeビルド ステップ。 追加します iOS用のテスト用のXcodeビルド ワークフローに進みます。 それは後に来るはずであることに注意してください 証明書とプロファイルのインストーラー ステップ。 の中に スキーム名 入力し、使用するXcodeスキームを設定します。デフォルトでは、入力の値は $BITRISE_SCHEME アプリの作成時に保存される環境変数。 デフォルトでは、スキームはどの構成（たとえば、デバッグまたはリリース）が使用されるかを定義します。の中に 構成名 入力の場合、構成タイプを手動で定義できます。 の宛先オプションを設定します xcodebuild の中に デバイスの宛先 ステップの入力。デフォルト値は generic\/platform=ios 。利用可能な値については、 man xcodebuild ローカルマシンで、 Destinations 印刷物のセクション。 をセットする 自動コード署名方式 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を行わない場合。 api-key 使用する場合 APIキー認証 。 apple-id 使用する場合 AppleID認証 。 追加します iOSデバイスのテスト ワークフローへのステップ。ステップは、 iOS用のテスト用のXcodeビルド ステップ。 の中に テストデバイス 入力フィールドで、アプリをテストするデバイスを指定します。使用可能なデバイスのリストを検索します。 ここ 。 あなたが持っていることを確認してください Bitrise.ioにデプロイします バージョン1.4.1以降でワークフローにステップインします。古いバージョンのステップでは、結果を確認することはできません。 テストレポート ページ！ ビルドを開始します 。 すべてがうまくいけば、あなたはであなたの結果を見ることができるはずです ビルド ページ。 " }, 
{ "title" : "テスト結果の確認 ", 
"url" : "テスト/iosのデバイステスト.html#テスト結果の確認-78790", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ iOSのデバイステスト \/ テスト結果の確認 ", 
"snippet" : "テストレポートには、実行したすべてのテストに関する最も重要な情報が表示されます。 テストの概要 タブ。実行したすべてのテスト、それらの期間、およびそれらの結果が表示されます。個々のテストのタブをクリックして、詳細を確認することもできます。 特定のテストの結果にアクセスするには： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 に移動します 詳細とアドオン タブ。 選択する テストレポート 。 に テストの概要 タブで、確認したいテストを見つけます。または、トップバーで、チェックアウトするテストセットのタブをクリックします。結果に...", 
"body" : "テストレポートには、実行したすべてのテストに関する最も重要な情報が表示されます。 テストの概要 タブ。実行したすべてのテスト、それらの期間、およびそれらの結果が表示されます。個々のテストのタブをクリックして、詳細を確認することもできます。 特定のテストの結果にアクセスするには： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 に移動します 詳細とアドオン タブ。 選択する テストレポート 。 に テストの概要 タブで、確認したいテストを見つけます。または、トップバーで、チェックアウトするテストセットのタブをクリックします。結果に基づいてテストをフィルタリングするには、右上のメニューを開きます。 全て デフォルトでは。 クリック テストケース 詳細を確認します。 UIテストはデバイスごとにグループ化され、単体テストはテストケースごとにグループ化されます。 見つけるだろう： 実行したテストの総数、および成功したテストと失敗したテストの比率。 個々のテスト（単体テストとUIテストの両方）の期間。 UIテストの場合、デバイスの向きとロケール。 テストの種類に応じて、次のことを確認できます。 個々のテストケース パフォーマンスデータ ビデオ スクリーンショット アーティファクトをテストする ログ 上記のように、これはテストの種類によっても異なります。単体テストの場合、もちろんスクリーンショットやビデオは表示されません。 " }, 
{ "title" : "Androidユニットテスト ", 
"url" : "テスト/androidユニットテスト.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidユニットテスト ", 
"snippet" : "Androidユニットテストステップを使用してユニットテストを実行し、テストレポートアドオンで結果を表示できます。...", 
"body" : "Androidユニットテストステップを使用してユニットテストを実行し、テストレポートアドオンで結果を表示できます。 " }, 
{ "title" : "ユニットテストの実行 ", 
"url" : "テスト/androidユニットテスト.html#ユニットテストの実行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidユニットテスト \/ ユニットテストの実行 ", 
"snippet" : "単体テストは、個々のコードブロックを検証したり、バグをキャッチしたり、クラッシュをできるだけ早く防止したりする場合に役立ちます。 このチュートリアルでは、アプリに対して単体テストを実行する方法と、プライマリワークフローを使用してテストレポートを生成する方法について説明します。 幸い、Androidのプライマリワークフローには、ビルドで単体テストを実行するAndroidユニットテストステップがすでに含まれています。 カスタムステップ\/スクリプトの使用 カスタムステップまたはスクリプトを使用する場合、Deploy to Bitrise.io Stepは、デフォルトでファイル\/ビルドアーティファクト...", 
"body" : "単体テストは、個々のコードブロックを検証したり、バグをキャッチしたり、クラッシュをできるだけ早く防止したりする場合に役立ちます。 このチュートリアルでは、アプリに対して単体テストを実行する方法と、プライマリワークフローを使用してテストレポートを生成する方法について説明します。 幸い、Androidのプライマリワークフローには、ビルドで単体テストを実行するAndroidユニットテストステップがすでに含まれています。 カスタムステップ\/スクリプトの使用 カスタムステップまたはスクリプトを使用する場合、Deploy to Bitrise.io Stepは、デフォルトでファイル\/ビルドアーティファクトを$ BITRISE_DEPLOY_DIRディレクトリからデプロイするため、生成されたアプリをそこに移動するようにしてください。 または、ファイル\/ビルドアーティファクトの場所を指すように、ステップのデプロイディレクトリまたはファイルパス入力を設定します。 指定されたパスがディレクトリの場合、そのディレクトリ内のすべてのファイルが展開されることに注意してください。指定されたディレクトリにサブディレクトリがある場合、それらはアップロードされません！ Compressオプションを使用すると、ディレクトリのコンテンツを再帰的にアップロードできます。これにより、すべてのサブディレクトリを含むディレクトリ全体が圧縮されます。最後に、ファイルパスを指定すると、指定したファイルのみがデプロイされます。 ビルドが失敗した場合はログを確認してください ビルドが失敗した場合は、ビルドのページで[ログのダウンロード]をクリックします。ステップログの最後の行で、エラーメッセージを表示し、それに応じてエラーを修正できます。完了したら、変更をリポジトリにコミットすると、新しいビルドが自動的に開始されます。 " }, 
{ "title" : "テスト結果の生成と確認 ", 
"url" : "テスト/androidユニットテスト.html#テスト結果の生成と確認", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidユニットテスト \/ テスト結果の生成と確認 ", 
"snippet" : "Androidユニットテストの結果は、 テストレポート ページ。 NS Androidユニットテスト ステップは、単体テストレポートを生成し、$ BITRISE_TEST_DEPLOY_DIRフォルダーにエクスポートします。そうして Bitrise.ioにデプロイします ステップは、これらのレポートを$ BITRISE_TEST_DEPLOY_DIRフォルダーからそれぞれのビルドにエクスポートします。 テストレポート テスト結果を表示できるページ。 テストレポートをサポートするステップバージョン NS Bitrise.ioにデプロイします ステップはバージョン1.4.1以降である必要があります...", 
"body" : "Androidユニットテストの結果は、 テストレポート ページ。 NS Androidユニットテスト ステップは、単体テストレポートを生成し、$ BITRISE_TEST_DEPLOY_DIRフォルダーにエクスポートします。そうして Bitrise.ioにデプロイします ステップは、これらのレポートを$ BITRISE_TEST_DEPLOY_DIRフォルダーからそれぞれのビルドにエクスポートします。 テストレポート テスト結果を表示できるページ。 テストレポートをサポートするステップバージョン NS Bitrise.ioにデプロイします ステップはバージョン1.4.1以降である必要があります。 Androidユニットテスト 古いバージョンのステップはテストレポートをサポートしていないため、ステップはバージョン0.10.0以降である必要があります。 " }, 
{ "title" : "テスト結果の確認 ", 
"url" : "テスト/androidユニットテスト.html#テスト結果の確認-78791", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidユニットテスト \/ テスト結果の生成と確認 \/ テスト結果の確認 ", 
"snippet" : "テストレポートには、実行したすべてのテストに関する最も重要な情報が表示されます。 テストの概要 タブ。実行したすべてのテスト、それらの期間、およびそれらの結果が表示されます。個々のテストのタブをクリックして、詳細を確認することもできます。 特定のテストの結果にアクセスするには： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 に移動します 詳細とアドオン タブ。 選択する テストレポート 。 に テストの概要 タブで、確認したいテストを見つけます。または、トップバーで、チェックアウトするテストセットのタブをクリックします。結果に...", 
"body" : "テストレポートには、実行したすべてのテストに関する最も重要な情報が表示されます。 テストの概要 タブ。実行したすべてのテスト、それらの期間、およびそれらの結果が表示されます。個々のテストのタブをクリックして、詳細を確認することもできます。 特定のテストの結果にアクセスするには： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 に移動します 詳細とアドオン タブ。 選択する テストレポート 。 に テストの概要 タブで、確認したいテストを見つけます。または、トップバーで、チェックアウトするテストセットのタブをクリックします。結果に基づいてテストをフィルタリングするには、右上のメニューを開きます。 全て デフォルトでは。 クリック テストケース 詳細を確認します。 UIテストはデバイスごとにグループ化され、単体テストはテストケースごとにグループ化されます。 見つけるだろう： 実行したテストの総数、および成功したテストと失敗したテストの比率。 個々のテスト（単体テストとUIテストの両方）の期間。 UIテストの場合、デバイスの向きとロケール。 テストの種類に応じて、次のことを確認できます。 個々のテストケース パフォーマンスデータ ビデオ スクリーンショット アーティファクトをテストする ログ 上記のように、これはテストの種類によっても異なります。単体テストの場合、もちろんスクリーンショットやビデオは表示されません。 " }, 
{ "title" : "Androidのデバイステスト ", 
"url" : "テスト/androidのデバイステスト.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidのデバイステスト ", 
"snippet" : "BitriseのAndroid仮想デバイステストソリューションを使用すると、独自のデバイスをセットアップして登録しなくても、エミュレーターでUIテストを実行できます。 BitriseのAndroid仮想デバイステストソリューションを使用すると、独自のデバイスをセットアップして登録しなくても、エミュレーターでUIテストを実行できます。 制限事項 全体的なビルド時間によって制限される場合があります。また、1つのビルドに含めることができるのは1つだけであることに注意してください [ベータ版]仮想デバイスのテスト 1種類のテストを実行するステップ（ instrumentation 、 robo また ...", 
"body" : "BitriseのAndroid仮想デバイステストソリューションを使用すると、独自のデバイスをセットアップして登録しなくても、エミュレーターでUIテストを実行できます。 BitriseのAndroid仮想デバイステストソリューションを使用すると、独自のデバイスをセットアップして登録しなくても、エミュレーターでUIテストを実行できます。 制限事項 全体的なビルド時間によって制限される場合があります。また、1つのビルドに含めることができるのは1つだけであることに注意してください [ベータ版]仮想デバイスのテスト 1種類のテストを実行するステップ（ instrumentation 、 robo また gameloop ）。 当社のデバイステストソリューションは、 Firebaseテストラボ 。結果のログ、ビデオ、スクリーンショットはBitriseで見つけることができます。   " }, 
{ "title" : "テストの実行 ", 
"url" : "テスト/androidのデバイステスト.html#テストの実行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidのデバイステスト \/ テストの実行 ", 
"snippet" : "Bitriseでは、3つの異なるテストタイプから選択できます。 robo（Bitriseのデフォルトのテストタイプ）。 計装。 ゲームループ。 これらのテストタイプの違いについて知りたい場合は、以下をご覧ください。 Firebaseのドキュメント。 ロボテストとインストルメンテーションテストのワークフローの構成にはわずかな違いがあるので、別々に見てみましょう。...", 
"body" : "Bitriseでは、3つの異なるテストタイプから選択できます。 robo（Bitriseのデフォルトのテストタイプ）。 計装。 ゲームループ。 これらのテストタイプの違いについて知りたい場合は、以下をご覧ください。 Firebaseのドキュメント。 ロボテストとインストルメンテーションテストのワークフローの構成にはわずかな違いがあるので、別々に見てみましょう。 " }, 
{ "title" : "ロボテストの実行 ", 
"url" : "テスト/androidのデバイステスト.html#ロボテストの実行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidのデバイステスト \/ テストの実行 \/ ロボテストの実行 ", 
"snippet" : "使用するワークフローをワークフローエディターで開きます。 追加します Androidビルド 後のステップ Androidユニットテスト APKをエクスポートする手順。 追加します Debug へのタスク 変異体 ステップ入力フィールド。これにより、ビルドのAPKパスを含むenv変数が準備されます。次のステップでこのenv変数が必要になります。 追加 [ベータ版] Android向け仮想デバイステスト Androidビルドステップの次のステップ。 をセットする APK path 入力フィールド。 確認してください robo 選択されています テストタイプ 。 にテストデバイスのタイプを追加します...", 
"body" : "使用するワークフローをワークフローエディターで開きます。 追加します Androidビルド 後のステップ Androidユニットテスト APKをエクスポートする手順。 追加します Debug へのタスク 変異体 ステップ入力フィールド。これにより、ビルドのAPKパスを含むenv変数が準備されます。次のステップでこのenv変数が必要になります。 追加 [ベータ版] Android向け仮想デバイステスト Androidビルドステップの次のステップ。 をセットする APK path 入力フィールド。 確認してください robo 選択されています テストタイプ 。 にテストデバイスのタイプを追加します テストデバイス 入力フィールド。デフォルトとは異なるデバイスを選択する場合、入力の形式は次のようになります。 deviceID 、 version 、 language 、 orientation で区切られます , 。利用可能なデバイスのリストを見つける ここ 。 ビルドを開始し、 テスト結果を確認する 。 " }, 
{ "title" : "roboテストを成功させるためのRoboディレクティブを使用したユーザー入力の設定 ", 
"url" : "テスト/androidのデバイステスト.html#roboテストを成功させるためのroboディレクティブを使用したユーザー入力の設定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidのデバイステスト \/ テストの実行 \/ ロボテストの実行 \/ roboテストを成功させるためのRoboディレクティブを使用したユーザー入力の設定 ", 
"snippet" : "roboテストを成功させるためにアプリで特定のユーザー操作が必要な場合は、Robo Directives入力フィールドを使用して、これらの必要な入力を設定できます。たとえば、アプリの特定のUI要素は、ログインに必要なユーザー入力（ユーザー名とメールアドレス）が入力されている場合にのみ、ロボテストにアクセスできます。 ワークフローの[ベータ版] Android向け仮想デバイステストステップをクリックします。 [ロボテスト]セクションをクリックします。 Roboディレクティブ入力フィールドを見つけて、必要なユーザー入力ディレクティブを設定します。 キーと値のペアのコンマ区切りリストを提供します。こ...", 
"body" : "roboテストを成功させるためにアプリで特定のユーザー操作が必要な場合は、Robo Directives入力フィールドを使用して、これらの必要な入力を設定できます。たとえば、アプリの特定のUI要素は、ログインに必要なユーザー入力（ユーザー名とメールアドレス）が入力されている場合にのみ、ロボテストにアクセスできます。 ワークフローの[ベータ版] Android向け仮想デバイステストステップをクリックします。 [ロボテスト]セクションをクリックします。 Roboディレクティブ入力フィールドを見つけて、必要なユーザー入力ディレクティブを設定します。 キーと値のペアのコンマ区切りリストを提供します。ここで、キーはターゲットUI要素のAndroidリソース名であり、値はテキスト文字列です。 EditTextフィールドはサポートされていますが、WebViewUIエレメントのテキストフィールドはサポートされていません。たとえば、カスタムログインに次のパラメータを使用できます。 username_resource,username,ENTER_TEXT\npassword_resource,password,ENTER_TEXT\nloginbtn_resource,,SINGLE_CLICK 行ごとに1つのディレクティブ、パラメーターは、文字で区切られます。例：ResourceName、InputText、ActionType。 指定した入力に基づいて、ロボテストを正常に実行し（特定のユーザー入力でのみアクセスできるページでも）、[テストレポート]ページでテスト結果を確認できます。テスト結果は、次のようになります。 スクリーンショット。 録画したビデオ。 ログ。 ファイル。 これは、成功したroboテストのスクリーンショットです。ここでは、最初に電子メールフィールドとパスワードフィールドにRoboディレクティブから事前定義されたディレクティブを入力することにより、roboテストがマイアプリケーションに到達しました。 " }, 
{ "title" : "計装テストの実行 ", 
"url" : "テスト/androidのデバイステスト.html#計装テストの実行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidのデバイステスト \/ 計装テストの実行 ", 
"snippet" : "使用するワークフローをワークフローエディターで開きます。 追加します UIテスト用のAndroidビルド ワークフローに進みます。 APKとテストAPKをエクスポートするには、次の入力フィールドを設定する必要があります。 UIテスト用のAndroidビルド ステップ。ステップ出力は次のようになります BITRISE_APK_PATH （フィルタリング後に生成されたAPKのパスです）および BITRISE_TEST_APK_PATH （これは、フィルタリング後に生成されたテストAPKのパスです）。 プロジェクトの場所：Androidプロジェクトのルートディレクトリ。 モジュール：ビルドするモジュ...", 
"body" : "使用するワークフローをワークフローエディターで開きます。 追加します UIテスト用のAndroidビルド ワークフローに進みます。 APKとテストAPKをエクスポートするには、次の入力フィールドを設定する必要があります。 UIテスト用のAndroidビルド ステップ。ステップ出力は次のようになります BITRISE_APK_PATH （フィルタリング後に生成されたAPKのパスです）および BITRISE_TEST_APK_PATH （これは、フィルタリング後に生成されたテストAPKのパスです）。 プロジェクトの場所：Androidプロジェクトのルートディレクトリ。 モジュール：ビルドするモジュールを設定します。 バリアント：ビルドするバリアントを設定します（通常はデバッグ）。 ステップ出力は次のようになります BITRISE_APK_PATH （フィルタリング後に生成されたAPKのパスです）および BITRISE_TEST_APK_PATH （これは、フィルタリング後に生成されたテストAPKのパスです）。 追加します [ベータ版]仮想デバイスのテストステップ 直後 UIテスト用のAndroidビルド ステップ。 テストタイプをインストルメンテーションに設定します。私たちの UIテスト用のAndroidビルド ステップはAPKとテストAPKをエクスポートし、それらのパスは自動的にに設定されます APKパス と APKパスをテストする の入力フィールド [ベータ版]仮想デバイスのテスト ステップ。 [テストデバイス]入力フィールドにテストデバイスのタイプを追加します。デフォルトとは異なるデバイスを選択する場合、入力の形式は次のようになります。 device ID 、 version 、 language 、 orientation で区切られています , 。 ビルドを開始し、テスト結果を確認します。 " }, 
{ "title" : "テスト結果の確認 ", 
"url" : "テスト/androidのデバイステスト.html#テスト結果の確認-78792", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Androidのデバイステスト \/ テスト結果の確認 ", 
"snippet" : "テストレポートには、実行したすべてのテストに関する最も重要な情報が表示されます。 テストの概要 タブ。実行したすべてのテスト、それらの期間、およびそれらの結果が表示されます。個々のテストのタブをクリックして、詳細を確認することもできます。 特定のテストの結果にアクセスするには： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 に移動します 詳細とアドオン タブ。 選択する テストレポート 。 に テストの概要 タブで、確認したいテストを見つけます。または、トップバーで、チェックアウトするテストセットのタブをクリックします。結果に...", 
"body" : "テストレポートには、実行したすべてのテストに関する最も重要な情報が表示されます。 テストの概要 タブ。実行したすべてのテスト、それらの期間、およびそれらの結果が表示されます。個々のテストのタブをクリックして、詳細を確認することもできます。 特定のテストの結果にアクセスするには： Bitriseにログインし、ダッシュボードでアプリを見つけて選択します。 チェックアウトするビルドを選択します。 に移動します 詳細とアドオン タブ。 選択する テストレポート 。 に テストの概要 タブで、確認したいテストを見つけます。または、トップバーで、チェックアウトするテストセットのタブをクリックします。結果に基づいてテストをフィルタリングするには、右上のメニューを開きます。 全て デフォルトでは。 クリック テストケース 詳細を確認します。 UIテストはデバイスごとにグループ化され、単体テストはテストケースごとにグループ化されます。 見つけるだろう： 実行したテストの総数、および成功したテストと失敗したテストの比率。 個々のテスト（単体テストとUIテストの両方）の期間。 UIテストの場合、デバイスの向きとロケール。 テストの種類に応じて、次のことを確認できます。 個々のテストケース パフォーマンスデータ ビデオ スクリーンショット アーティファクトをテストする ログ 上記のように、これはテストの種類によっても異なります。単体テストの場合、もちろんスクリーンショットやビデオは表示されません。 " }, 
{ "title" : "Visual Studio AppCenterでのテストの実行 ", 
"url" : "テスト/visual-studio-appcenterでのテストの実行.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Visual Studio AppCenterでのテストの実行 ", 
"snippet" : "App Centerのアップロードとスケジュールのテスト手順を使用して、アプリのVisual StudioAppCenterでテストをアップロードしてスケジュールします。 アプリのVisualStudio AppCenterでテストをアップロードしてスケジュールします。次のテストフレームワークが利用可能です。 Appium。 エスプレッソ。 ひょうたん。 XCUITest。 ワークフローエディタで、 追加 NS AppCenterのアップロードとテストのスケジュール ワークフローに進みます。 ステップには複数の必要な入力があります。これらの入力の値は、Visual Studio AppCent...", 
"body" : "App Centerのアップロードとスケジュールのテスト手順を使用して、アプリのVisual StudioAppCenterでテストをアップロードしてスケジュールします。 アプリのVisualStudio AppCenterでテストをアップロードしてスケジュールします。次のテストフレームワークが利用可能です。 Appium。 エスプレッソ。 ひょうたん。 XCUITest。 ワークフローエディタで、 追加 NS AppCenterのアップロードとテストのスケジュール ワークフローに進みます。 ステップには複数の必要な入力があります。これらの入力の値は、Visual Studio AppCenterでテストを設定することで確認できます。 AppCenterにログインします。 アップロード用のテストを準備します 。 を作成します アプリセンター 事業。 案内する テスト実行 タブをクリックして開始します 新しいテスト実行 ： アプリをテストするデバイスを選択します。 テスト実行を構成します。一連のテスト、システム言語、およびテストフレームワークを選択します。 に 送信 タブには、ステップに必要なすべての入力があります。 テストのアップロードとスケジュール セクション。 クリック Done 。 Bitriseで、ワークフローエディターを開き、ステップの必要な入力を入力します。次のことを行う必要があります。 APIトークンを取得します。 ターゲットアプリを設定します。 テストフレームワークを設定します-利用可能なオプションを確認できます。 デバイス選択スラッグを追加します。 テストシリーズの名前を追加します。 システムロケールを設定します（たとえば、 en_US ）テスト実行用。 .ipaまたは.apkのいずれかのアプリケーションファイルへのパスを設定します。 テストディレクトリへのパスを設定します。選択したテストフレームワークに適切なディレクトリを使用します。 " }, 
{ "title" : "Bitriseでのデトックステストの実行 ", 
"url" : "テスト/bitriseでのデトックステストの実行.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Bitriseでのデトックステストの実行 ", 
"snippet" : "Detoxは、ReactNativeで構築されたモバイルアプリ用のグレーボックスエンドツーエンドテストおよび自動化ライブラリです。 BitriseにReactNativeアプリがある場合は、Detoxテストを実行できます。 Detoxは、ReactNativeで構築されたモバイルアプリ用のグレーボックスエンドツーエンドテストおよび自動化ライブラリです。 iOSアプリとAndroidアプリの両方をサポートしています。 BitriseにReactNativeアプリがある場合は、デトックステストを実行できます。...", 
"body" : "Detoxは、ReactNativeで構築されたモバイルアプリ用のグレーボックスエンドツーエンドテストおよび自動化ライブラリです。 BitriseにReactNativeアプリがある場合は、Detoxテストを実行できます。 Detoxは、ReactNativeで構築されたモバイルアプリ用のグレーボックスエンドツーエンドテストおよび自動化ライブラリです。 iOSアプリとAndroidアプリの両方をサポートしています。 BitriseにReactNativeアプリがある場合は、デトックステストを実行できます。 " }, 
{ "title" : "始める前に ", 
"url" : "テスト/bitriseでのデトックステストの実行.html#始める前に-78794", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Bitriseでのデトックステストの実行 \/ 始める前に ", 
"snippet" : "デトックスを実行するには、次のものが必要です。 macOSを搭載したMac（El Capitan 10.11以降のバージョン）。 Xcodeコマンドラインツールを備えたXcode8.3以降のバージョン。 動作するReactNativeアプリ。 プロジェクトにDetoxをインストールしてセットアップします 。 Homebrew、Node.js、applesimutils、およびDetoxコマンドラインツールをインストールする必要があります。プロジェクトにデトックスを追加してから、デトックステストをローカルで作成して実行します。 Androidアプリをお持ちの場合は、 このガイド 初期設定プロセス...", 
"body" : "デトックスを実行するには、次のものが必要です。 macOSを搭載したMac（El Capitan 10.11以降のバージョン）。 Xcodeコマンドラインツールを備えたXcode8.3以降のバージョン。 動作するReactNativeアプリ。 プロジェクトにDetoxをインストールしてセットアップします 。 Homebrew、Node.js、applesimutils、およびDetoxコマンドラインツールをインストールする必要があります。プロジェクトにデトックスを追加してから、デトックステストをローカルで作成して実行します。 Androidアプリをお持ちの場合は、 このガイド 初期設定プロセスの後。 完了したら、BitriseでDetoxで構成されたプロジェクトをテストできます。 " }, 
{ "title" : "デトックステストの実行 ", 
"url" : "テスト/bitriseでのデトックステストの実行.html#デトックステストの実行", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Bitriseでのデトックステストの実行 \/ デトックステストの実行 ", 
"snippet" : "内部にリリースデバイス構成を作成します package.json 下 detox セクション。 例： \"detox\": { \"configurations\": { \"ios.sim.debug\": { \"binaryPath\": \"ios\/build\/Build\/Products\/Debug-iphonesimulator\/SampleProjectReactNative.app\", \"build\": \"xcodebuild -project ios\/SampleProjectReactNative.xcodeproj -scheme SampleProjectReactNative -con...", 
"body" : "内部にリリースデバイス構成を作成します package.json 下 detox セクション。 例： \"detox\": {\n \"configurations\": {\n \"ios.sim.debug\": {\n \"binaryPath\": \"ios\/build\/Build\/Products\/Debug-iphonesimulator\/SampleProjectReactNative.app\",\n \"build\": \"xcodebuild -project ios\/SampleProjectReactNative.xcodeproj -scheme SampleProjectReactNative -configuration Debug -sdk iphonesimulator -derivedDataPath ios\/build -UseNewBuildSystem=NO\",\n \"type\": \"ios.simulator\",\n \"name\": \"iPhone 8\"\n },\n \"ios.sim.release\": {\n \"binaryPath\": \"ios\/build\/Build\/Products\/Release-iphonesimulator\/SampleProjectReactNative.app\",\n \"build\": \"xcodebuild -project ios\/SampleProjectReactNative.xcodeproj -scheme SampleProjectReactNative -configuration Release -sdk iphonesimulator -derivedDataPath ios\/build -UseNewBuildSystem=NO\",\n \"type\": \"ios.simulator\",\n \"name\": \"iPhone 8\"\n }\n }, オン bitrise.io 、プロジェクトに移動して、 ワークフローエディタ。 使用するワークフローに切り替えます。 追加する npmコマンドを実行します ワークフローに進みます。 デトックスインストールコマンドをに追加します 実行する引数を指定したnpmコマンド 入力： install -g detox-cli テストランナーをインストールします。 例えば、 サンプルアプリ 用途 mocha 、と一緒にインストール yarn ステップ。ヤーンの依存関係をインストールするには、 実行するyarnコマンド 入力の値を install 。 追加する 脚本 必要なユーティリティをインストールしてから、デトックスを実行します。 #!\/bin\/bash\n \n# applesimutils is a collection of utils for Apple simulators\nbrew tap wix\/brew\nbrew install applesimutils\n \n# we are building and testing a release device configuration\ndetox build --configuration ios.sim.release\ndetox test --configuration ios.sim.release --cleanup もちろん、モジュール性のために、これらの各コマンドを別々のスクリプトステップに配置することもできます。 ビルドを実行します。 ビルドが失敗した場合は、例を確認してください bitrise.yml ファイル： ---\nworkflows:\n primary:\n steps:\n - activate-ssh-key: {}\n - git-clone:\n inputs:\n - clone_depth: ''\n title: Git Clone Repo\n - yarn@0.0.8:\n inputs:\n - command: install\n - npm@1.0.1:\n inputs:\n - command: install -g detox-cli\n title: Install Detox CLI\n - script@1.1.5:\n inputs:\n - content: |-\n #!\/bin\/bash\n brew tap wix\/brew\n brew install applesimutils\n \n detox build --configuration ios.sim.release\n detox test --configuration ios.sim.release --cleanup\n title: Detox - Build and Test Release App\n - deploy-to-bitrise-io@1.3.18: {}\nTroubleshootin " }, 
{ "title" : "デトックステストのトラブルシューティング ", 
"url" : "テスト/bitriseでのデトックステストの実行.html#デトックステストのトラブルシューティング", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Bitriseでのデトックステストの実行 \/ デトックステストのトラブルシューティング ", 
"snippet" : "BitriseでのDetoxの使用で問題が発生した場合は、テストを実行する前にDetoxパッケージ全体を再構築することをお勧めします。 これを行うには、Bitriseビルドで次のコマンドを実行します。 npm rebuild detox それでもデトックステストが失敗またはハングする場合は、サポートにお問い合わせください。...", 
"body" : "BitriseでのDetoxの使用で問題が発生した場合は、テストを実行する前にDetoxパッケージ全体を再構築することをお勧めします。 これを行うには、Bitriseビルドで次のコマンドを実行します。 npm rebuild detox それでもデトックステストが失敗またはハングする場合は、サポートにお問い合わせください。 " }, 
{ "title" : "Codecovでコードカバレッジを測定する ", 
"url" : "テスト/codecovでコードカバレッジを測定する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Codecovでコードカバレッジを測定する ", 
"snippet" : "Codecov は、CI \/ CDパイプラインの主要なコードカバレッジソリューションであり、カバレッジメトリックをワークフローに直接提供します。 Bitriseと直接統合して、コード品質に関する貴重な洞察を提供し、ユーザーがより健康的なコードをより少ないリスクで出荷できるようにします。 Codecovは、開発プロセスをスピードアップし、高品質のアプリケーションを提供するために、テストカバレッジをより利用可能で実用的なものにする多くの機能を提供します。 これらの機能の一部は次のとおりです。 カバレッジの変更がソースコードにオーバーレイされるため、必要なテスト領域をさらに簡単に特定できます。 多言...", 
"body" : "Codecov は、CI \/ CDパイプラインの主要なコードカバレッジソリューションであり、カバレッジメトリックをワークフローに直接提供します。 Bitriseと直接統合して、コード品質に関する貴重な洞察を提供し、ユーザーがより健康的なコードをより少ないリスクで出荷できるようにします。 Codecovは、開発プロセスをスピードアップし、高品質のアプリケーションを提供するために、テストカバレッジをより利用可能で実用的なものにする多くの機能を提供します。 これらの機能の一部は次のとおりです。 カバレッジの変更がソースコードにオーバーレイされるため、必要なテスト領域をさらに簡単に特定できます。 多言語 箱から出してすぐにCodecovを使用できるようにサポートします。 テストを迅速かつ効果的に追加および更新できるように、ワークフローに直接カバレッジ情報を要約します。 ステータスチェック パフォーマンスの低いプルリクエストがマージされるのをブロックします。 シームレスなカバレッジ レポートのマージ ジョブ間で複数のレポートをアップロードするワークフローの場合。 を使用したグループ化に基づくカスタムカバレッジ情報 Codecovフラグ 。   " }, 
{ "title" : "CodecovとBitriseの統合 ", 
"url" : "テスト/codecovでコードカバレッジを測定する.html#codecovとbitriseの統合", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Codecovでコードカバレッジを測定する \/ CodecovとBitriseの統合 ", 
"snippet" : "Codecovの使用を開始するには、お好みのカバレッジツール（XcodeやGradleなど）を使用してカバレッジレポートを生成する必要があります。 でアカウントを作成します https:\/\/codecov.io 。 リポジトリに移動します 設定 Codecovのタブをクリックし、リポジトリアップロードトークンをコピーします。 追加します Codecov Bitriseのワークフローに進みます。カバレッジをテストおよび収集するステップの後に、必ずステップを追加してください。 Codecovアップロードトークンをシークレット変数として追加し、 CODECOV_TOKEN 、およびを設定します プル...", 
"body" : "Codecovの使用を開始するには、お好みのカバレッジツール（XcodeやGradleなど）を使用してカバレッジレポートを生成する必要があります。 でアカウントを作成します https:\/\/codecov.io 。 リポジトリに移動します 設定 Codecovのタブをクリックし、リポジトリアップロードトークンをコピーします。 追加します Codecov Bitriseのワークフローに進みます。カバレッジをテストおよび収集するステップの後に、必ずステップを追加してください。 Codecovアップロードトークンをシークレット変数として追加し、 CODECOV_TOKEN 、およびを設定します プルリクエストの公開 オプション true 。クリック 新しく追加する 。 クリック 保存する 新しいビルドを開始して、カバレッジメトリックを取得します。 追加オプション Codecovステップは、Codecovbashアップローダーをラップアラウンドします。引数のドキュメントに記載されているステップでオプションを追加できます。 " }, 
{ "title" : "Codecovでのカバレッジレポートの表示 ", 
"url" : "テスト/codecovでコードカバレッジを測定する.html#codecovでのカバレッジレポートの表示", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Codecovでコードカバレッジを測定する \/ Codecovでのカバレッジレポートの表示 ", 
"snippet" : "Codecovのカバレッジを表示するには、次の操作を実行できます。 BitriseのCodecovステップで提供されたURLを表示します。 に移動 https:\/\/codecov.io 該当するプルリクエストまたはコミットに直接移動します。 コードホストのステータスチェックまたはプルリクエストコメントで利用できるCodecovが提供するリンクをクリックします。...", 
"body" : "Codecovのカバレッジを表示するには、次の操作を実行できます。 BitriseのCodecovステップで提供されたURLを表示します。 に移動 https:\/\/codecov.io 該当するプルリクエストまたはコミットに直接移動します。 コードホストのステータスチェックまたはプルリクエストコメントで利用できるCodecovが提供するリンクをクリックします。 " }, 
{ "title" : "次は何ですか？ ", 
"url" : "テスト/codecovでコードカバレッジを測定する.html#次は何ですか-", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ テスト \/ Codecovでコードカバレッジを測定する \/ 次は何ですか？ ", 
"snippet" : "コードカバレッジレポートができたので、次の提案で次のレベルに進めることができます。 設定 ノンブロッキングステータスチェック 開発者にコードカバレッジについて考える習慣を身に付けるため。 ステータスチェックをに設定して、コードカバレッジに向けた作業を開始します 全体的なカバレッジを増やす プルリクエストごとに。 さまざまなタイプのテストまたはシステムのさまざまな部分のカバレッジレポートを次のように分離します。 フラグ 重要なことを測定します。 すでにフラグを使用していて、Bitrise CIを実行するたびにテストスイート全体を実行したくないですか？試してみる 繰越フラグ 変化するものだけを測定...", 
"body" : "コードカバレッジレポートができたので、次の提案で次のレベルに進めることができます。 設定 ノンブロッキングステータスチェック 開発者にコードカバレッジについて考える習慣を身に付けるため。 ステータスチェックをに設定して、コードカバレッジに向けた作業を開始します 全体的なカバレッジを増やす プルリクエストごとに。 さまざまなタイプのテストまたはシステムのさまざまな部分のカバレッジレポートを次のように分離します。 フラグ 重要なことを測定します。 すでにフラグを使用していて、Bitrise CIを実行するたびにテストスイート全体を実行したくないですか？試してみる 繰越フラグ 変化するものだけを測定します。 " }, 
{ "title" : "展開 ", 
"url" : "展開.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 ", 
"snippet" : "Bitriseを使用して、アプリをシミュレーター、テストデバイス、またはアプリストアにデプロイします。専用の展開ソリューションであるStepsまたはShipを使用できます。 デプロイは、Bitriseで多くのことを意味します。アプリをテストデバイスまたはbitrise.ioにデプロイできます。公開インストールページは、誰でもアプリをテストできるように自由に配布できます。たとえば、アプリをシミュレーターにデプロイして、UIテストを実行できます。もちろん、AppStoreやGooglePlayストアなどのオンラインストアにアプリをデプロイすることもできます。 また、アプリの公開で多くの頭痛の種を減...", 
"body" : "Bitriseを使用して、アプリをシミュレーター、テストデバイス、またはアプリストアにデプロイします。専用の展開ソリューションであるStepsまたはShipを使用できます。 デプロイは、Bitriseで多くのことを意味します。アプリをテストデバイスまたはbitrise.ioにデプロイできます。公開インストールページは、誰でもアプリをテストできるように自由に配布できます。たとえば、アプリをシミュレーターにデプロイして、UIテストを実行できます。もちろん、AppStoreやGooglePlayストアなどのオンラインストアにアプリをデプロイすることもできます。 また、アプリの公開で多くの頭痛の種を減らすことを目的としたデプロイソリューションであるShipをチェックすることをお勧めします。 " }, 
{ "title" : "Androidの展開 ", 
"url" : "展開/androidの展開.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 ", 
"snippet" : "Androidアプリをテスト用にbitrise.ioにデプロイするか、リリース用にGooglePlayストアにデプロイします。 Androidアプリをテスト用にbitrise.ioにデプロイするか、リリース用にGooglePlayストアにデプロイします。 Google Play API、キーストアファイル、APKフレーバーについて学びます。 アプリを公開する際の頭痛の種を大幅に減らすことを目的としたデプロイソリューションであるShipをチェックすることをお勧めします。 船での展開。 Androidアプリ入門 Androidコード署名...", 
"body" : "Androidアプリをテスト用にbitrise.ioにデプロイするか、リリース用にGooglePlayストアにデプロイします。 Androidアプリをテスト用にbitrise.ioにデプロイするか、リリース用にGooglePlayストアにデプロイします。 Google Play API、キーストアファイル、APKフレーバーについて学びます。 アプリを公開する際の頭痛の種を大幅に減らすことを目的としたデプロイソリューションであるShipをチェックすることをお勧めします。 船での展開。 Androidアプリ入門 Androidコード署名 " }, 
{ "title" : "BitriseとGooglePlayへのAndroidアプリのデプロイ ", 
"url" : "展開/androidの展開/bitriseとgoogleplayへのandroidアプリのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ BitriseとGooglePlayへのAndroidアプリのデプロイ ", 
"snippet" : "専用の手順を使用し、Google Play Consoleでプロジェクトを正しく構成することで、AndroidアプリをBitriseまたはGooglePlayにデプロイできます。 このガイドでは、Androidプロジェクトをに追加する方法について説明します bitrise.io プロジェクトから構築されたAPKまたはAABをにデプロイします Google Playストア 。 ビルド中にBitriseがGooglePlay Deployで認証できるように、GooglePlayコンソールで作成された新しいサービスアカウントが必要です。新しいサービスアカウントは、適切な権限を持つユーザーとしてGoo...", 
"body" : "専用の手順を使用し、Google Play Consoleでプロジェクトを正しく構成することで、AndroidアプリをBitriseまたはGooglePlayにデプロイできます。 このガイドでは、Androidプロジェクトをに追加する方法について説明します bitrise.io プロジェクトから構築されたAPKまたはAABをにデプロイします Google Playストア 。 ビルド中にBitriseがGooglePlay Deployで認証できるように、GooglePlayコンソールで作成された新しいサービスアカウントが必要です。新しいサービスアカウントは、適切な権限を持つユーザーとしてGoogle PlayConsoleに招待する必要があります。 プロジェクトを初めて設定するには： 登録する GooglePlay開発者アカウント 。すでにGooglePlayデベロッパーアカウントをお持ちで、アプリをGoogle Playストアにデプロイしている場合は、にスキップしてください Google PlayAPIアクセスの設定。 通過する 初めてGooglePlayの展開を設定する。 " }, 
{ "title" : "Google PlayAPIアクセスの設定 ", 
"url" : "展開/androidの展開/bitriseとgoogleplayへのandroidアプリのデプロイ.html#google-playapiアクセスの設定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ BitriseとGooglePlayへのAndroidアプリのデプロイ \/ Google PlayAPIアクセスの設定 ", 
"snippet" : "新しいAPIプロジェクトを作成するか、既存のAPIプロジェクトをリンクして、プロジェクトへのGoogle PlayAPIアクセスを許可します。このチュートリアルでは、新しいチュートリアルを作成しています。 Google Play Consoleに移動し、[ 設定 。クリック API アクセス 左側のメニューバーにあります。に リンクされたGoogleCloudプロジェクト ページ、選択 新しいプロジェクトを作成する オプション。 に APIアクセス ページ、下にスクロール サービスアカウント をクリックします 新しいサービスアカウントを作成します 。指示に従って、Google CloudPla...", 
"body" : "新しいAPIプロジェクトを作成するか、既存のAPIプロジェクトをリンクして、プロジェクトへのGoogle PlayAPIアクセスを許可します。このチュートリアルでは、新しいチュートリアルを作成しています。 Google Play Consoleに移動し、[ 設定 。クリック API アクセス 左側のメニューバーにあります。に リンクされたGoogleCloudプロジェクト ページ、選択 新しいプロジェクトを作成する オプション。 に APIアクセス ページ、下にスクロール サービスアカウント をクリックします 新しいサービスアカウントを作成します 。指示に従って、Google CloudPlatformにアクセスします。 Google Cloud Platformで、[ +サービスアカウントの作成 上部のメニューバーにあります。 3ステップ サービスアカウントを作成する ページが表示されます。ここで、 サービスアカウント名 初め。 NS サービスアカウントID に基づいて自動的に生成されます サービスアカウント名 入力しました。 で このサービスアカウントにプロジェクトへのアクセスを許可する ステップ、選択 Browser の中に 役割 落ちる。プロセスの2番目と3番目のステップはGoogleCloud Platformでオプションとしてマークされていますが、これらはBitriseがサービスアカウントアクセスを使用できるようにするために不可欠です。 記入してください サービスアカウントのユーザーロール と サービスアカウント管理者の役割 のフィールド ユーザーにこのサービスアカウントへのアクセスを許可する ステップ。打つ 終わり 。 あなたはに戻って着陸します APIアクセスページ 新しいサービスアカウントのキーを作成できるGooglePlayConsoleのBitriseは、キーを使用してサービスアカウントとして認証します。クリック 省略記号 新しいサービスアカウントの横にあり、 キーを管理する オプションから。 あなたはに向けられています キー のページ サービスアカウント 。クリック キーを追加 ドロップダウンして選択します 新しいキーを作成する オプション。 選択する JSON あなたのように キータイプ 。クリック 作成 。ここでキーを作成すると、ローカルマシンに自動的にダウンロードされ、にアップロードできます。 コード署名 Bitriseのタブ。 Google Cloud Platformウィンドウは不要になったため、閉じることができます。 あなたはに戻って着陸しています APIアクセス 新しいサービスアカウントを確認できるGooglePlayConsoleのページ サービスアカウント 。クリック アクセス許可 プロジェクトをGoogleコンソールにリンクします。 Google Cloud Platform（GCP）サービスアカウントはユーザーとしてGoogle Play Consoleに招待されるため、GCPはPlayConsoleのアプリにアクセスできます。 Bitriseは、このサービスアカウントを使用して、GooglePlayConsoleで変更を加えます。 の中に ユーザーを招待する ウィンドウ、 電子メールアドレス フィールドは事前に入力されています。下 権限 、デフォルトのものはすでに選択されています。あなたはこれらと一緒に行くことができます。クリック ユーザーを招待する ページの下部にあります。 をチェックしてください GooglePlayデベロッパーAPI プロセスに関する詳細情報が必要な場合は、ガイドを参照してください。 これで、Google PlayConsoleプロジェクトの準備が完了しました。リリースの管理を許可されたサービスクレデンシャルアカウントが作成されました。 " }, 
{ "title" : "初めてGooglePlayの展開を設定する ", 
"url" : "展開/androidの展開/bitriseとgoogleplayへのandroidアプリのデプロイ.html#初めてgoogleplayの展開を設定する-78798", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ BitriseとGooglePlayへのAndroidアプリのデプロイ \/ 初めてGooglePlayの展開を設定する ", 
"snippet" : "Google Playにデプロイすると、アプリがGoogleのオンラインストアに公開されます。初めてそれを行うとき、これは単にに展開するよりも少し多くの作業を必要とします bitrise.io 。必要な構成が整ったら、それは非常に簡単になります。 Google Playのデプロイを初めて構成するときは、Google PlayデベロッパーアカウントをAPIプロジェクトにリンクし、APIアクセスを設定して、サービスアカウントのJSONキーをBitriseにアップロードする必要があります。 最初のAABまたはAPKを手動でGooglePlayにアップロードします GooglePlayコンソールを使用...", 
"body" : "Google Playにデプロイすると、アプリがGoogleのオンラインストアに公開されます。初めてそれを行うとき、これは単にに展開するよりも少し多くの作業を必要とします bitrise.io 。必要な構成が整ったら、それは非常に簡単になります。 Google Playのデプロイを初めて構成するときは、Google PlayデベロッパーアカウントをAPIプロジェクトにリンクし、APIアクセスを設定して、サービスアカウントのJSONキーをBitriseにアップロードする必要があります。 最初のAABまたはAPKを手動でGooglePlayにアップロードします GooglePlayコンソールを使用する 。 リンク GooglePlayデベロッパーコンソールをAPIプロジェクトに変換します。 サービスアカウントを使用してAPIアクセスクライアントを設定する ：Google Developer Consoleでサービスアカウントを作成するときは、選択する必要があることに注意してください json なので キータイプ 。 あなたのサービスアカウントに必要な権利を付与します GooglePlayコンソール 。に移動 設定 、 それから ユーザーと権限 、 それから 新しいユーザーを招待する 。 Google Play Publisher APIの動作方法により、サービスアカウントに少なくとも次の権限を付与する必要があります。 アクセスレベル：アプリ情報を表示します。 リリース管理：本番リリースを管理し、テストトラックリリースを管理します。 店舗のプレゼンス：店舗のリスト、価格設定、配布を編集します。 オプションの手順として、ストアリストに翻訳を追加できます。 アプリを翻訳してローカライズする 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブに移動し、サービス アカウントの JSON キーを 汎用ファイル ストレージ . " }, 
{ "title" : "Androidアプリをbitrise.ioにデプロイする ", 
"url" : "展開/androidの展開/bitriseとgoogleplayへのandroidアプリのデプロイ.html#androidアプリをbitrise-ioにデプロイする-78798", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ BitriseとGooglePlayへのAndroidアプリのデプロイ \/ Androidアプリをbitrise.ioにデプロイする ", 
"snippet" : "このセクションでは、Androidアプリをにデプロイする方法について説明します。 bitrise.io 。 へのデプロイ bitrise.io ビルド中に生成されたビルド アーティファクトは、ビルドが完了するとダウンロードできるようになります。これを使用して、たとえば独自のテスト デバイスでアプリをテストできます。 アプリをにデプロイするには bitrise.io ： ワークフローに Androidビルド アプリを構築する手順。 オプションで、アプリを作成できます。 Gradleランナー ステップ。これにはもう少し構成が必要ですが、より広範なカスタマイズが可能です。 追加します Bitrise...", 
"body" : "このセクションでは、Androidアプリをにデプロイする方法について説明します。 bitrise.io 。 へのデプロイ bitrise.io ビルド中に生成されたビルド アーティファクトは、ビルドが完了するとダウンロードできるようになります。これを使用して、たとえば独自のテスト デバイスでアプリをテストできます。 アプリをにデプロイするには bitrise.io ： ワークフローに Androidビルド アプリを構築する手順。 オプションで、アプリを作成できます。 Gradleランナー ステップ。これにはもう少し構成が必要ですが、より広範なカスタマイズが可能です。 追加します Bitrise.ioにデプロイします ワークフローに進みます。 他のユーザーへの通知 あなたは使用することができます 通知：ユーザーの役割 そしてその 通知：メール デプロイに関する通知を設定するためのステップの入力。 オプションで、 アプリの公開ページを有効にしますか? ステップの入力 真実 だからステップ パブリック インストール ページを有効にします あなたのアプリのために。 ビルドを実行します。 の Bitrise.io にデプロイする ステップはアプリをデプロイします。ビルドの URL を使用して、生成されたバイナリをチーム メンバーと共有できます。 Android アプリを Bitrise にデプロイするための bitrise.yml この例では、 debug Android アプリのバリアントとして、bitrise.io にデプロイします。 format_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\napp:\n envs:\n - opts: \n is_expand: false \n BITRISE_SOURCE_DIR: \/app\nworkflows:\n docs-example-workflow:\n steps:\n - android-build@1:\n inputs:\n - variant: debug\n - deploy-to-bitrise-io@2: {} " }, 
{ "title" : "GooglePlayへのデプロイ ", 
"url" : "展開/androidの展開/bitriseとgoogleplayへのandroidアプリのデプロイ.html#googleplayへのデプロイ-78798", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ BitriseとGooglePlayへのAndroidアプリのデプロイ \/ GooglePlayへのデプロイ ", 
"snippet" : "Google Playにデプロイするには、署名済みのAPKまたはAABファイルと GooglePlayデプロイ ステップ。 アプリを初めてデプロイする場合は、 GooglePlayの設定が正しく設定されていることを確認してください 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブをクリックしてコピーします 環境変数 アップロードしたサービス アカウントの JSON キー ファイルの URL を格納するキー。 をコピーします 環境変数 アップロードしたファイルのURLを保存するキー。 例えば： BITRISEIO_SER...", 
"body" : "Google Playにデプロイするには、署名済みのAPKまたはAABファイルと GooglePlayデプロイ ステップ。 アプリを初めてデプロイする場合は、 GooglePlayの設定が正しく設定されていることを確認してください 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブをクリックしてコピーします 環境変数 アップロードしたサービス アカウントの JSON キー ファイルの URL を格納するキー。 をコピーします 環境変数 アップロードしたファイルのURLを保存するキー。 例えば： BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL 。 ワークフローを開き、を追加します GooglePlayデプロイ それにステップします。 の中に サービスアカウントのJSONキーファイルパス 入力し、サービスアカウントのJSONキーをアップロードしたときに生成された環境変数を 一般的なファイルストレージ 。生成されたEnvVarに加えて、ステップの入力フィールドにファイルパスを追加することもできます。ファイルパスはローカルまたはリモートにすることもできます。 リモートJSONキーファイルの場合、たとえば、任意のダウンロード場所を値として指定できます。 https:\/\/URL\/TO\/key.json 。 ローカルJSONキーファイルの場合、ファイルパスのURLを値として指定できます。たとえば、 file:\/\/PATH\/TO\/key.json 。 の中に パッケージ名 入力し、アプリのパッケージ名を追加します。 の中に 追跡 入力して、APKをデプロイするトラックを追加します（たとえば、alpha \/ beta \/ rollout \/ productionまたは設定したカスタムトラック）。 それで全部です！ビルドを開始またはスケジュールして、URLを外部テスターと共有するか、選択したアプリストアでアプリを配布してください。 " }, 
{ "title" : "HuaweiAppGalleryへのアプリのデプロイ ", 
"url" : "展開/androidの展開/huaweiappgalleryへのアプリのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ HuaweiAppGalleryへのアプリのデプロイ ", 
"snippet" : "Androidアプリは、Deploy to HuaweiAppGalleryと呼ばれる検証済みのBitriseStepを介してHuaweiAppGalleryにデプロイできます。ステップは、Bitriseで構築したAPKファイルをデプロイするために使用できます。 Androidアプリを次の場所にデプロイできます Huawei AppGallery と呼ばれる検証済みのビットライズステップを介して Huawei AppGalleryにデプロイする 。ステップは、Bitriseで構築したAPKファイルをデプロイするために使用できます。 ステップには以下が必要です。 アプリのアプリID。 APIクラ...", 
"body" : "Androidアプリは、Deploy to HuaweiAppGalleryと呼ばれる検証済みのBitriseStepを介してHuaweiAppGalleryにデプロイできます。ステップは、Bitriseで構築したAPKファイルをデプロイするために使用できます。 Androidアプリを次の場所にデプロイできます Huawei AppGallery と呼ばれる検証済みのビットライズステップを介して Huawei AppGalleryにデプロイする 。ステップは、Bitriseで構築したAPKファイルをデプロイするために使用できます。 ステップには以下が必要です。 アプリのアプリID。 APIクライアントのクライアントID。 APIクライアント用に生成されたキー。 アプリをHuaweiAppGalleryに正常にデプロイするには、次のワークフローが必要です。 APKまたはAABファイルを作成して署名します。 が含まれています Huawei AppGalleryにデプロイする アプリをデプロイする手順。 を使用してデプロイを構成するには Huawei AppGalleryへのデプロイステップ ： AppGallery ConnectのWebサイトインターフェイスを使用して、アプリの最初のAPKをHuaweiAppGalleryに手動でアップロードします。 AppGalleryConnectでチームレベルのAPIクライアントを作成します 。 Bitriseでワークフローエディターを開きます。 アプリのデプロイに使用するワークフローに移動します。 追加します Huawei AppGalleryにデプロイする APKをビルドして署名する手順を実行します。 を開きます 構成 入力グループ。 必要な入力を入力します。 ファイルパス ：自動的にエクスポートするステップを使用した場合 BITRISE_APK_PATH APKをビルドした後の環境変数。これは変更しないでください。 NS Androidビルド たとえば、ステップはそのようなステップです。 ファイル名 ：APKファイルの一意の名前。この名前は、AppGalleryConnectにアップロードするときに使用されます。 アプリID ：識別されたものは、 アプリ情報 AppGalleryConnectのセクション。 クライアントID ：AppGalleryConnectで生成されたAPIクライアントID。 鍵 ：AppGallery接続のAPIクライアントで生成されたキー。 次のbitrise.ymlファイルを見て、を使用する構成例を確認してください。 HuaweiAppGalleryにデプロイする アプリをデプロイする手順。 workflows:\n deploy:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@4: {}\n - cache-pull@2: {}\n - install-missing-android-tools@2:\n inputs:\n - gradlew_path: \"$PROJECT_LOCATION\/gradlew\"\n - gradle-runner@1.9:\n inputs:\n - gradle_file: \"$GRADLE_BUILD_FILE_PATH\"\n - gradle_task: assembleRelease\n - gradlew_path: \"$GRADLEW_PATH\"\n - sign-apk@1.7: {}\n - deploy-to-bitrise-io@1: {}\n - cache-push@2: {}\n - appgallery-deploy@0:\n inputs:\n - huawei_client_id: 'XXX'\n - huawei_client_secret: \"$CLIENT_SECRET\"\n - huawei_app_id: 'YYY' ビルドを実行してください！すべてがうまくいけば、HuaweiAppGalleryにアプリが表示されます。 " }, 
{ "title" : "単一のワークフローで複数のフレーバー APK を生成してデプロイする ", 
"url" : "展開/androidの展開/単一のワークフローで複数のフレーバー-apk-を生成してデプロイする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ 単一のワークフローで複数のフレーバー APK を生成してデプロイする ", 
"snippet" : "Gradle Runnerステップを使用して、1つのワークフローで複数のフレーバー（マルチフレーバー）APK \/ AABを生成、コード署名、およびデプロイできます。 複数のフレーバー (マルチフレーバー) の APK\/AAB を 1 つに生成、コード署名、デプロイできます。 ワークフロー 私たちの グラドルランナー ステップ .フレーバーとは、アプリのコア コードを機能で強化することを意味し、その結果、同じものの異なるバージョンが作成されます。 アプリ （最も一般的な例を挙げると、無料\/有料、デモ\/フル）。公式の Android Studio ガイドをご覧ください。 ビルド タイプ、フレーバー...", 
"body" : "Gradle Runnerステップを使用して、1つのワークフローで複数のフレーバー（マルチフレーバー）APK \/ AABを生成、コード署名、およびデプロイできます。 複数のフレーバー (マルチフレーバー) の APK\/AAB を 1 つに生成、コード署名、デプロイできます。 ワークフロー 私たちの グラドルランナー ステップ .フレーバーとは、アプリのコア コードを機能で強化することを意味し、その結果、同じものの異なるバージョンが作成されます。 アプリ （最も一般的な例を挙げると、無料\/有料、デモ\/フル）。公式の Android Studio ガイドをご覧ください。 ビルド タイプ、フレーバー、ビルド バリアント 詳細については！このチュートリアルでは、いくつかの設定を行う必要があります。 人造人間のサイン と Google Play デプロイ 手順 - 目を離さないでください。 " }, 
{ "title" : "マルチフレーバーAPKの生成 ", 
"url" : "展開/androidの展開/単一のワークフローで複数のフレーバー-apk-を生成してデプロイする.html#マルチフレーバーapkの生成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ 単一のワークフローで複数のフレーバー APK を生成してデプロイする \/ マルチフレーバーAPKの生成 ", 
"snippet" : "いくつかの異なるフレーバーのAPKファイルを生成するには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 入れる Gradleランナー Androidのテスト手順を実行します。 Androidビルド ステップで作成できるバリアントは1つだけなので、このステップがワークフローの一部である場合は、次のステップに置き換えることをお勧めします。 Gradleランナー ステップ。 クリック 構成 ステップのセクション。 特定 組み立てる ビルドバリアントのタスク名をに追加してタスクをGradle...", 
"body" : "いくつかの異なるフレーバーのAPKファイルを生成するには： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 入れる Gradleランナー Androidのテスト手順を実行します。 Androidビルド ステップで作成できるバリアントは1つだけなので、このステップがワークフローの一部である場合は、次のステップに置き換えることをお勧めします。 Gradleランナー ステップ。 クリック 構成 ステップのセクション。 特定 組み立てる ビルドバリアントのタスク名をに追加してタスクをGradleします 実行するGradleタスク ステップ入力フィールド-1つのワークフローでビルドするビルドバリアントの数と同じ数のタスク名。各タスク名は、リストに記載されているものとまったく同じビルドバリアント名である必要があります。 ビルドバリアント Android Studioのウィンドウ！カンマを使わずに、スペースだけで区切るようにしてください。このイメージでは、デプロイワークフローのステップの順序と 実行するGradleタスク 2つのビルドバリアントを使用したステップ入力： assembleDemo と assembleFull （APKの場合）または bundleDemo と bundleFull （AABの場合） Gradleランナー を生成します $BITRISE_APK_PATH_LIST \/ $BITRISE_AAB_PATH_LIST 上記で定義されたすべてのビルドバリアント用にビルドされたAPK \/ AABを含む環境変数出力。この出力環境変数は後で必要になります。 " }, 
{ "title" : "マルチフレーバーAPKの署名とデプロイ ", 
"url" : "展開/androidの展開/単一のワークフローで複数のフレーバー-apk-を生成してデプロイする.html#マルチフレーバーapkの署名とデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ 単一のワークフローで複数のフレーバー APK を生成してデプロイする \/ マルチフレーバーAPKの署名とデプロイ ", 
"snippet" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 1つ追加 人造人間のサイン ステップ 後に グラドルランナー 見つからない場合はステップ ワークフロー . をセットする アプリのファイル パス への入力 $BITRISE_APK_PATH_LIST また $BITRISE_AAB_PATH_LIST どちらに応じて アプリ 以前に作成したフォーマット グラドルランナー ステップ。 これにより、すべてのAPKまたはAABが、アップロードしたキーストアファイルで署名されたコードを確実に取得し...", 
"body" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 1つ追加 人造人間のサイン ステップ 後に グラドルランナー 見つからない場合はステップ ワークフロー . をセットする アプリのファイル パス への入力 $BITRISE_APK_PATH_LIST また $BITRISE_AAB_PATH_LIST どちらに応じて アプリ 以前に作成したフォーマット グラドルランナー ステップ。 これにより、すべてのAPKまたはAABが、アップロードしたキーストアファイルで署名されたコードを確実に取得します。 コード署名 タブ。ステップはいずれかをエクスポートします $BITRISE_SIGNED_APK_PATH_LIST または $BITRISE_SIGNED_AAB_PATH_LIST 各ビルドバリアントの署名付きアプリファイルのパスを含む環境変数の出力。 に次の入力フィールドを設定していることを確認してください Androidサイン ステップ： キーストアのURL キーストアのパスワード キーストアエイリアス 追加します GooglePlayデプロイ 後のステップ Androidサイン ステップ。 をセットする $BITRISE_SIGNED_APK_PATH または $BITRISE_SIGNED_AAB_PATH の環境変数 APKまたはアプリバンドルのファイルパス 入力フィールドをステップして、 GooglePlayデプロイ ステップは、すべてのビルドバリアントをアプリストアにリリースできます。 " }, 
{ "title" : "Androidアプリバンドルの生成と展開 ", 
"url" : "展開/androidの展開/androidアプリバンドルの生成と展開.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ Androidアプリバンドルの生成と展開 ", 
"snippet" : "Bitriseを使用してAndroidAppBundleを作成することは、APKを生成することとほとんど同じです。コードからAndroidAppBundle（.aab）ファイルをコンパイルするには、いくつかのステップ入力を微調整してから、バンドルに署名してGooglePlayストアにデプロイする必要があります。 Bitriseを使用してAndroidAppBundleを作成することは、APKを生成することとほとんど同じです。あなたがしなければならないのは、いくつかを微調整することです ステップ コードからAndroidAppBundle（.aab）ファイルをコンパイルするための入力を入力し、バ...", 
"body" : "Bitriseを使用してAndroidAppBundleを作成することは、APKを生成することとほとんど同じです。コードからAndroidAppBundle（.aab）ファイルをコンパイルするには、いくつかのステップ入力を微調整してから、バンドルに署名してGooglePlayストアにデプロイする必要があります。 Bitriseを使用してAndroidAppBundleを作成することは、APKを生成することとほとんど同じです。あなたがしなければならないのは、いくつかを微調整することです ステップ コードからAndroidAppBundle（.aab）ファイルをコンパイルするための入力を入力し、バンドルに署名してGooglePlayストアにデプロイします。 バンドル作成をサポートするステップバージョン 次のステップは、指定されたバージョン以降である必要があります。古いバージョンのステップは、バンドルの作成をサポートしていません。 Androidビルド 0.10.0以降 Gradleランナー 1.9.0以降 Androidサイン 1.3.0以降 GooglePlayにデプロイする 1.6.0以降 " }, 
{ "title" : "Androidアプリバンドルファイルの生成 ", 
"url" : "展開/androidの展開/androidアプリバンドルの生成と展開.html#androidアプリバンドルファイルの生成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ Androidアプリバンドルの生成と展開 \/ Androidアプリバンドルファイルの生成 ", 
"snippet" : "次のいずれかを使用して Android App Bundle を作成できます。 グラドルランナー ステップ または Android ビルド ステップ。...", 
"body" : "次のいずれかを使用して Android App Bundle を作成できます。 グラドルランナー ステップ または Android ビルド ステップ。 " }, 
{ "title" : "Gradleランナーステップの使用 ", 
"url" : "展開/androidの展開/androidアプリバンドルの生成と展開.html#gradleランナーステップの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ Androidアプリバンドルの生成と展開 \/ Androidアプリバンドルファイルの生成 \/ Gradleランナーステップの使用 ", 
"snippet" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 挿入します グラドルランナー 次のステップ Android 単体テスト と Android リント あなたのステップ ワークフロー (ビルドステップがまだ存在しない場合)。 クリック 構成 のセクション Gradleランナー 。 の中に 実行するGradleタスク 入力フィールド、セット、たとえば、 bundleRelease また bundleDebug プロジェクトのバンドルを作成します。 このようにして、ステップはAPKの代わりにAn...", 
"body" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 挿入します グラドルランナー 次のステップ Android 単体テスト と Android リント あなたのステップ ワークフロー (ビルドステップがまだ存在しない場合)。 クリック 構成 のセクション Gradleランナー 。 の中に 実行するGradleタスク 入力フィールド、セット、たとえば、 bundleRelease また bundleDebug プロジェクトのバンドルを作成します。 このようにして、ステップはAPKの代わりにAndroidアプリバンドルを生成します。 1 つのワークフローで Android App Bundle と APK を生成する場合は、 実行する Gradle タスク 入力フィールド: " }, 
{ "title" : "Androidビルドステップの使用 ", 
"url" : "展開/androidの展開/androidアプリバンドルの生成と展開.html#androidビルドステップの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ Androidアプリバンドルの生成と展開 \/ Androidアプリバンドルファイルの生成 \/ Androidビルドステップの使用 ", 
"snippet" : "あなたは私たちのAndroidアプリのためのAndroidアプリバンドルを生成することができます Androidビルド ステップも： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します Androidビルド 後のステップ Androidユニットテスト と Android Lint ワークフローのステップ（ビルドステップがまだ存在しない場合）。 Androidプロジェクトのルートディレクトリを プロジェクトの場所 入力フィールド。 に移動 ビルドタイプ 選択します aab ビルドタ...", 
"body" : "あなたは私たちのAndroidアプリのためのAndroidアプリバンドルを生成することができます Androidビルド ステップも： でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します Androidビルド 後のステップ Androidユニットテスト と Android Lint ワークフローのステップ（ビルドステップがまだ存在しない場合）。 Androidプロジェクトのルートディレクトリを プロジェクトの場所 入力フィールド。 に移動 ビルドタイプ 選択します aab ビルドタイプとして。 1 つのワークフローで APK と Android App Bundle を生成する場合は、2 つ追加します。 Android ビルド 1 つを構成して Android App Bundle をビルドし、もう 1 つを構成して APK をビルドします。 " }, 
{ "title" : "Android App Bundleを署名する ", 
"url" : "展開/androidの展開/androidアプリバンドルの生成と展開.html#android-app-bundleを署名する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ Androidアプリバンドルの生成と展開 \/ Android App Bundleを署名する ", 
"snippet" : "Android App Bundleファイルに署名することは、APKに署名することと同じです。 開始する前に、キーストアファイルがワークフローエディターの[Code Signing]タブにアップロードされていることを確認してください。 追加 人造人間のサイン ステップ あなたのビルドステップの後 ワークフロー . 次のことを確認してください キーストアのパスワード 、 キーエイリアス そしてその キーパスワード 入力フィールドに入力します。 入力フィールドに入力します キーストアファイルをアップロードし、必要な資格情報を入力した場合は、 Androidサイン ステップの キーストアのURL 、...", 
"body" : "Android App Bundleファイルに署名することは、APKに署名することと同じです。 開始する前に、キーストアファイルがワークフローエディターの[Code Signing]タブにアップロードされていることを確認してください。 追加 人造人間のサイン ステップ あなたのビルドステップの後 ワークフロー . 次のことを確認してください キーストアのパスワード 、 キーエイリアス そしてその キーパスワード 入力フィールドに入力します。 入力フィールドに入力します キーストアファイルをアップロードし、必要な資格情報を入力した場合は、 Androidサイン ステップの キーストアのURL 、 キーストアのパスワード 、 キーストアエイリアス 、 そしてその 秘密鍵のパスワード 入力は自動的に入力されます！ 確認してください APKファイルパス inputフィールドには、使用していたビルドステップの出力と同じ出力envvarが表示されます。 そして、あなたはやるべきです！ Androidコード署名について詳しく知りたい場合は、ガイドをご覧ください。 " }, 
{ "title" : "AndroidアプリバンドルをGooglePlayにデプロイする ", 
"url" : "展開/androidの展開/androidアプリバンドルの生成と展開.html#androidアプリバンドルをgoogleplayにデプロイする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ Androidアプリバンドルの生成と展開 \/ AndroidアプリバンドルをGooglePlayにデプロイする ", 
"snippet" : "AABファイルのデプロイは、APKをGooglePlayにデプロイすることと大きな違いはありません。 アプリストアの配布前にバンドルを確認したい場合は、 Bitrise.ioにデプロイします 後のステップ Gradle Runner \/ Androidビルド ステップ。バンドルをにアップロードします アーティファクト ビルドのページのタブ。...", 
"body" : "AABファイルのデプロイは、APKをGooglePlayにデプロイすることと大きな違いはありません。 アプリストアの配布前にバンドルを確認したい場合は、 Bitrise.ioにデプロイします 後のステップ Gradle Runner \/ Androidビルド ステップ。バンドルをにアップロードします アーティファクト ビルドのページのタブ。 " }, 
{ "title" : "初めてGooglePlayの展開を設定する ", 
"url" : "展開/androidの展開/androidアプリバンドルの生成と展開.html#初めてgoogleplayの展開を設定する-78801", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ Androidアプリバンドルの生成と展開 \/ AndroidアプリバンドルをGooglePlayにデプロイする \/ 初めてGooglePlayの展開を設定する ", 
"snippet" : "Google Playにデプロイすると、アプリがGoogleのオンラインストアに公開されます。初めてそれを行うとき、これは単にに展開するよりも少し多くの作業を必要とします bitrise.io 。必要な構成が整ったら、それは非常に簡単になります。 Google Playのデプロイを初めて構成するときは、Google PlayデベロッパーアカウントをAPIプロジェクトにリンクし、APIアクセスを設定して、サービスアカウントのJSONキーをBitriseにアップロードする必要があります。 最初のAABまたはAPKを手動でGooglePlayにアップロードします GooglePlayコンソールを使用...", 
"body" : "Google Playにデプロイすると、アプリがGoogleのオンラインストアに公開されます。初めてそれを行うとき、これは単にに展開するよりも少し多くの作業を必要とします bitrise.io 。必要な構成が整ったら、それは非常に簡単になります。 Google Playのデプロイを初めて構成するときは、Google PlayデベロッパーアカウントをAPIプロジェクトにリンクし、APIアクセスを設定して、サービスアカウントのJSONキーをBitriseにアップロードする必要があります。 最初のAABまたはAPKを手動でGooglePlayにアップロードします GooglePlayコンソールを使用する 。 リンク GooglePlayデベロッパーコンソールをAPIプロジェクトに変換します。 サービスアカウントを使用してAPIアクセスクライアントを設定する ：Google Developer Consoleでサービスアカウントを作成するときは、選択する必要があることに注意してください json なので キータイプ 。 あなたのサービスアカウントに必要な権利を付与します GooglePlayコンソール 。に移動 設定 、 それから ユーザーと権限 、 それから 新しいユーザーを招待する 。 Google Play Publisher APIの動作方法により、サービスアカウントに少なくとも次の権限を付与する必要があります。 アクセスレベル：アプリ情報を表示します。 リリース管理：本番リリースを管理し、テストトラックリリースを管理します。 店舗のプレゼンス：店舗のリスト、価格設定、配布を編集します。 オプションの手順として、ストアリストに翻訳を追加できます。 アプリを翻訳してローカライズする 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブに移動し、サービス アカウントの JSON キーを 汎用ファイル ストレージ . " }, 
{ "title" : "GooglePlayへのデプロイ ", 
"url" : "展開/androidの展開/androidアプリバンドルの生成と展開.html#googleplayへのデプロイ-78801", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ Androidアプリバンドルの生成と展開 \/ AndroidアプリバンドルをGooglePlayにデプロイする \/ GooglePlayへのデプロイ ", 
"snippet" : "Google Playにデプロイするには、署名済みのAPKまたはAABファイルと GooglePlayデプロイ ステップ。 アプリを初めてデプロイする場合は、 GooglePlayの設定が正しく設定されていることを確認してください 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブをクリックしてコピーします 環境変数 アップロードしたサービス アカウントの JSON キー ファイルの URL を格納するキー。 をコピーします 環境変数 アップロードしたファイルのURLを保存するキー。 例えば： BITRISEIO_SER...", 
"body" : "Google Playにデプロイするには、署名済みのAPKまたはAABファイルと GooglePlayデプロイ ステップ。 アプリを初めてデプロイする場合は、 GooglePlayの設定が正しく設定されていることを確認してください 。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 に行く コード署名とファイル タブをクリックしてコピーします 環境変数 アップロードしたサービス アカウントの JSON キー ファイルの URL を格納するキー。 をコピーします 環境変数 アップロードしたファイルのURLを保存するキー。 例えば： BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL 。 ワークフローを開き、を追加します GooglePlayデプロイ それにステップします。 の中に サービスアカウントのJSONキーファイルパス 入力し、サービスアカウントのJSONキーをアップロードしたときに生成された環境変数を 一般的なファイルストレージ 。生成されたEnvVarに加えて、ステップの入力フィールドにファイルパスを追加することもできます。ファイルパスはローカルまたはリモートにすることもできます。 リモートJSONキーファイルの場合、たとえば、任意のダウンロード場所を値として指定できます。 https:\/\/URL\/TO\/key.json 。 ローカルJSONキーファイルの場合、ファイルパスのURLを値として指定できます。たとえば、 file:\/\/PATH\/TO\/key.json 。 の中に パッケージ名 入力し、アプリのパッケージ名を追加します。 の中に 追跡 入力して、APKをデプロイするトラックを追加します（たとえば、alpha \/ beta \/ rollout \/ productionまたは設定したカスタムトラック）。 それで全部です！ビルドを開始またはスケジュールして、URLを外部テスターと共有するか、選択したアプリストアでアプリを配布してください。 " }, 
{ "title" : "AABからユニバーサルAPKをエクスポートする ", 
"url" : "展開/androidの展開/aabからユニバーサルapkをエクスポートする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Androidの展開 \/ AABからユニバーサルAPKをエクスポートする ", 
"snippet" : "BitriseのユニバーサルAPKのエクスポートステップを使用すると、アプリバンドルからユニバーサルAPKをエクスポートし、キーストア（またはデバッグキーストア）で署名し、アプリをGooglePlayストアにリリースする前にテストデバイスにAPKをデプロイできます。 生成されたアーティファクトがAppBundleである場合でも、テストデバイスでAndroidアプリをテストできます（ .aab ）。とともに ユニバーサルAPKをエクスポート ステップ アプリをGooglePlayストアにリリースする前に、App BundleからユニバーサルAPKをエクスポートし、キーストア（またはデバッグキース...", 
"body" : "BitriseのユニバーサルAPKのエクスポートステップを使用すると、アプリバンドルからユニバーサルAPKをエクスポートし、キーストア（またはデバッグキーストア）で署名し、アプリをGooglePlayストアにリリースする前にテストデバイスにAPKをデプロイできます。 生成されたアーティファクトがAppBundleである場合でも、テストデバイスでAndroidアプリをテストできます（ .aab ）。とともに ユニバーサルAPKをエクスポート ステップ アプリをGooglePlayストアにリリースする前に、App BundleからユニバーサルAPKをエクスポートし、キーストア（またはデバッグキーストア）で署名し、APKをテストデバイスにデプロイできます。 このステップの構成は非常に簡単です。 を挿入します ユニバーサルAPKをエクスポート 後のステップ Androidビルド あなたのステップイン ワークフロー 。 NS Androidアプリバンドルパス 入力フィールドには、前のビルドステップの出力が自動的に入力されます。 NS キーストアのURL にアップロードされたキーストアファイルに基づいて自動的に入力されます コード署名 タブ。 すでにキーストアファイルをにアップロードしている場合 コード署名 タブ、 キーストアエイリアス 、 キーストアのパスワード 、 と 秘密鍵のパスワード 入力にはすでに入力されています 秘密の環境変数 。 特定のバージョンが必要な場合は、デフォルトのBundletoolバージョンをオーバーライドできますが、必ず 正しいバージョン 。 ワークフローを実行します。 The ユニバーサルAPKをエクスポート ステップはAPKをにエクスポートします $BITRISE_APK_PATH 次のステップで取得できる環境変数、または次の場合はShipアドオン Bitrise.ioにデプロイします ステップはワークフローに含まれています。 " }, 
{ "title" : "iOSの展開 ", 
"url" : "展開/iosの展開.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ iOSの展開 ", 
"snippet" : "Bitriseを使用してiOSアプリを任意のプラットフォームにデプロイするには、コード署名ファイルが必要であり、Xcodeプロジェクトをアーカイブし、署名されたIPAファイルをエクスポートする必要があります。 あなたがあなたの アプリ 単体テストと UI テストを実行したら、デプロイします。 iOSアプリを任意のプラットフォームにデプロイするには、次のものが必要です。 コード署名ファイル。 Xcodeプロジェクトをアーカイブし、署名されたIPAファイルをエクスポートします。 当社のガイドでは、これら 2 つの基本要件の詳細を詳しく説明し、当社の 手順 あなたが望む正確な方法でアプリを展開するた...", 
"body" : "Bitriseを使用してiOSアプリを任意のプラットフォームにデプロイするには、コード署名ファイルが必要であり、Xcodeプロジェクトをアーカイブし、署名されたIPAファイルをエクスポートする必要があります。 あなたがあなたの アプリ 単体テストと UI テストを実行したら、デプロイします。 iOSアプリを任意のプラットフォームにデプロイするには、次のものが必要です。 コード署名ファイル。 Xcodeプロジェクトをアーカイブし、署名されたIPAファイルをエクスポートします。 当社のガイドでは、これら 2 つの基本要件の詳細を詳しく説明し、当社の 手順 あなたが望む正確な方法でアプリを展開するために！ また、アプリの公開で多くの頭痛の種を減らすことを目的としたデプロイソリューションであるShipをチェックすることをお勧めします。 船での展開iOSアプリ入門 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する iOSコード署名 iOSコード署名ファイルの管理 " }, 
{ "title" : "iOSアプリをBitrise.ioにデプロイする ", 
"url" : "展開/iosの展開/iosアプリをbitrise-ioにデプロイする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ iOSの展開 \/ iOSアプリをBitrise.ioにデプロイする ", 
"snippet" : "アプリをBitriseにデプロイして、IPAファイルをダウンロードし、アプリの開発タイププロビジョニングプロファイルで指定されたデバイスにインストールできるようにします。このようにして、内部テスターはアプリを簡単にテストできます。 を展開する アプリ Bitriseにアクセスして、IPAファイルをダウンロードし、アプリの開発タイププロビジョニングプロファイルで指定されたデバイスにインストールできるようにします。このようにして、内部テスターはアプリを簡単にテストできます。 キャッシュをクリアする 公開インストールページからアプリをインストールする場合は、キャッシュをクリアする必要があります。に表...", 
"body" : "アプリをBitriseにデプロイして、IPAファイルをダウンロードし、アプリの開発タイププロビジョニングプロファイルで指定されたデバイスにインストールできるようにします。このようにして、内部テスターはアプリを簡単にテストできます。 を展開する アプリ Bitriseにアクセスして、IPAファイルをダウンロードし、アプリの開発タイププロビジョニングプロファイルで指定されたデバイスにインストールできるようにします。このようにして、内部テスターはアプリを簡単にテストできます。 キャッシュをクリアする 公開インストールページからアプリをインストールする場合は、キャッシュをクリアする必要があります。に表示されるリンクをクリックします。 古いデバイスから設定を同期した場合は、キャッシュをクリアして新しいデバイスを登録する必要があります ライン。リンクはにリダイレクトされます プロファイル設定 ガイドに記載されている手順に従うことができるページ。 開発者証明書と開発プロファイル iOSアプリをデプロイするには、開発者タイプの証明書と開発タイプのプロビジョニングプロファイルが常に必要です。 App Storeにデプロイする場合でも、これらは必須です。これらは、IPAファイルをエクスポートするプロセスで提供されたコードから.xcodearchiveファイルを作成するために使用されます。 自分のマシンで少なくとも1回はIPAファイルを生成します。 必要なすべてのコード署名ファイルをアップロードする Bitriseに。 内部テスターにアプリをテストしてもらいたい場合は、 テストデバイスを登録する 。 確認してください iOS用のXcodeアーカイブとエクスポート ステップ あなたの中にあります ワークフロー 。 をセットする 自動コード署名 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を行わない場合。 api-key 使用する場合 APIキー認証 。 apple-id 使用する場合 AppleID認証 。 をセットする 配布方法 ステップの入力 development 。 他のエクスポート方法を使用することもできますが、Bitriseにのみデプロイし、内部テスターの指定されたデバイスにアプリをインストールする場合は、 development 十分なものです。 確認してください Bitrise.ioにデプロイします ステップはワークフローにあります。 デフォルトでは、 アプリの公開ページを有効にしますか？ 入力はに設定されます true 。このように、ビルドが実行されると、公開インストールページが長くランダムなURLで利用可能になり、Bitriseに登録されていない他のユーザーと共有できます。このURLは電子メールでユーザーに送信されます。 NS 通知：ユーザーの役割 そしてその 通知：メール 入力によって、電子メールを受信するユーザーが決まります。 ビルドを開始します。 ビルドが完了したら、アプリのに移動します ビルド ページをクリックして、最新のビルドをクリックします。 クリック アーティファクト タブでIPAファイルを検索します。 パブリックインストールのURLもここにあります。 IPAファイルの横にある目のアイコンをクリックして詳細を表示し、パブリックインストールページの切り替えを見つけます。 Bitrise以外のユーザーにリンクを送信できるように、オンになっていることを確認してください。 パブリックインストールページからアプリをインストールするには、iOSデバイスのネイティブSafariブラウザーを使用する必要があります。サードパーティのアプリから閲覧している場合は、インストールリンクをクリックできません。 以上です！これで、アプリのプロビジョニングプロファイルに含まれるすべてのデバイスにファイルをインストールできます。注意：インストールリンクには、iOSデバイスのSafariブラウザからアクセスする必要があります。 " }, 
{ "title" : "外部テスト用のiOSアプリのデプロイ ", 
"url" : "展開/iosの展開/外部テスト用のiosアプリのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ iOSの展開 \/ 外部テスト用のiOSアプリのデプロイ ", 
"snippet" : "アプリをAppStoreにデプロイする前に、開発環境外のデバイスでアプリをテストできる外部テスターにアプリをリリースすることをお勧めします。 Testflightを使用したくない場合は、app-storeexportメソッドを使用してIPAファイルをエクスポートすることでこれを行うことができます。 デプロイする前に アプリ 開発環境外のデバイスでテストできる外部テスターにリリースすることをお勧めします。 Testflight を使用したくない場合は、IPA ファイルを ad-hoc エクスポート方法。 Testflightの使用 Testflightを使用して外部テスターを招待する場合は、 a...", 
"body" : "アプリをAppStoreにデプロイする前に、開発環境外のデバイスでアプリをテストできる外部テスターにアプリをリリースすることをお勧めします。 Testflightを使用したくない場合は、app-storeexportメソッドを使用してIPAファイルをエクスポートすることでこれを行うことができます。 デプロイする前に アプリ 開発環境外のデバイスでテストできる外部テスターにリリースすることをお勧めします。 Testflight を使用したくない場合は、IPA ファイルを ad-hoc エクスポート方法。 Testflightの使用 Testflightを使用して外部テスターを招待する場合は、 ad-hoc エクスポート方法。あなたはIPAが必要です app-store エクスポート方法。 自分のマシンで少なくとも1回はIPAファイルを生成します。 必要なすべてのコード署名ファイルをアップロードする Bitriseに。 のために ad-hoc エクスポート方法には、配布タイプの証明書とアドホックタイプのプロビジョニングプロファイルが必要です。手動プロビジョニングを使用する場合にのみ、プロビジョニングプロファイルをアップロードします。 iOSコード署名ファイルの管理-手動プロビジョニング。 確認してください iOS用のXcodeアーカイブとエクスポート ステップ あなたの中にあります ワークフロー 。 をセットする 配布方法 ステップの入力 ad-hoc 。 をセットする 自動コード署名方式 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を行わない場合。 api-key APIキー認証を使用する場合 。 apple-id AppleID認証を使用する場合 。 あなたが持っていることを確認してください Bitrise.ioにデプロイします ワークフローにステップインします。 ビルドを開始します。 ビルドが完了したら、アプリのに移動します ビルド ページをクリックして、最新のビルドをクリックします。 クリック アーティファクト タブをクリックして、配布できるIPAファイルを見つけます。 iOSアプリ入門 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する iOSコード署名 iOSの展開 iOSアプリをAppStoreConnectにデプロイする iOSコード署名ファイルの管理 " }, 
{ "title" : "iOSアプリをAppStoreConnectにデプロイする ", 
"url" : "展開/iosの展開/iosアプリをappstoreconnectにデプロイする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ iOSの展開 \/ iOSアプリをAppStoreConnectにデプロイする ", 
"snippet" : "BitriseアプリをAppStoreConnectにデプロイして、Testflightでテスターを招待するか、AppStoreでアプリをリリースできます。 あなたは展開することができます アプリ App Storeへの接続先： Testflightにテスターを招待します。 AppStoreでアプリをリリースします。 Bitriseでは、バイナリをApp Store Connectにアップロードするか、レビューのために送信することができます。 iOSアプリ入門 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する ステッ...", 
"body" : "BitriseアプリをAppStoreConnectにデプロイして、Testflightでテスターを招待するか、AppStoreでアプリをリリースできます。 あなたは展開することができます アプリ App Storeへの接続先： Testflightにテスターを招待します。 AppStoreでアプリをリリースします。 Bitriseでは、バイナリをApp Store Connectにアップロードするか、レビューのために送信することができます。 iOSアプリ入門 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する ステップ入力でAppleサービスに接続する Apple認証が必要な手順 コード署名 iOSコード署名 iOSの展開 外部テスト用のiOSアプリのデプロイ iOSコード署名ファイルの管理 " }, 
{ "title" : "iTunesにデプロイする接続手順 ", 
"url" : "展開/iosの展開/iosアプリをappstoreconnectにデプロイする.html#itunesにデプロイする接続手順", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ iOSの展開 \/ iOSアプリをAppStoreConnectにデプロイする \/ iTunesにデプロイする接続手順 ", 
"snippet" : "アプリをiTunesConnectにデプロイするには、次の2つの手順があります。 iTunesConnectにデプロイする iTunesConnectにデプロイ-アプリケーションローダー iTunesConnectにデプロイ-アプリケーションローダー シンプルです。.ipaまたは.pkgバイナリファイルをiTunesConnectにプッシュするだけです。このステップでは、たとえば、AppStoreでレビューするためにアプリを送信することはできません。 とともに iTunesConnectにデプロイする ステップ、次のことができます。 レビューのためにアプリをAppStoreに送信します。 3つ...", 
"body" : "アプリをiTunesConnectにデプロイするには、次の2つの手順があります。 iTunesConnectにデプロイする iTunesConnectにデプロイ-アプリケーションローダー iTunesConnectにデプロイ-アプリケーションローダー シンプルです。.ipaまたは.pkgバイナリファイルをiTunesConnectにプッシュするだけです。このステップでは、たとえば、AppStoreでレビューするためにアプリを送信することはできません。 とともに iTunesConnectにデプロイする ステップ、次のことができます。 レビューのためにアプリをAppStoreに送信します。 3つの異なるプラットフォーム（iOS、OS X、AppleTVOS）のアプリをアップロードできます。 スクリーンショットとアプリのメタデータをバイナリと一緒にアップロードするかどうかをBitriseに伝えます。 " }, 
{ "title" : "アプリをiTunesConnectにデプロイする ", 
"url" : "展開/iosの展開/iosアプリをappstoreconnectにデプロイする.html#アプリをitunesconnectにデプロイする-78806", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ iOSの展開 \/ iOSアプリをAppStoreConnectにデプロイする \/ アプリをiTunesConnectにデプロイする ", 
"snippet" : "アプリをiTunesConnectにプッシュするたびに、固有のビルドとバージョン番号が必要であることに注意してください。 いずれかまたは両方をインクリメント 展開する前に。 あなたが働いていることを確認してください AppleDeveloperアカウントへの接続 。 自分のマシンで少なくとも1回はIPAファイルを生成します。 必要なすべてのコード署名ファイルをアップロードする Bitriseに。 アプリをiTunesConnectにデプロイするには、配布タイプの証明書とAppStoreタイプのプロビジョニングプロファイルが必要です。 確認してください iOS用のXcodeアーカイブとエクスポー...", 
"body" : "アプリをiTunesConnectにプッシュするたびに、固有のビルドとバージョン番号が必要であることに注意してください。 いずれかまたは両方をインクリメント 展開する前に。 あなたが働いていることを確認してください AppleDeveloperアカウントへの接続 。 自分のマシンで少なくとも1回はIPAファイルを生成します。 必要なすべてのコード署名ファイルをアップロードする Bitriseに。 アプリをiTunesConnectにデプロイするには、配布タイプの証明書とAppStoreタイプのプロビジョニングプロファイルが必要です。 確認してください iOS用のXcodeアーカイブとエクスポート ステップはワークフローにあります。 をセットする 自動コード署名 コード署名に使用するAppleサービス接続への入力。使用可能なオプションは次のとおりです。 off 自動コード署名を使用しない場合、またはAppleサービス認証にステップ入力のみを使用する場合。 api-key 使用する場合 APIキー認証 。 apple-id 使用する場合 AppleID認証 。 をセットする エクスポート方法を選択してください ステップの入力 app-store 。 このステップでは、エクスポートされた.ipaファイルのパスが$ BITRISE_IPA_PATH環境変数に保存されます。 追加します Deploy to iTunes Connect ワークフローに進みます。 必要な入力を入力します。 アプリのAppleIDまたはバンドルIDのいずれかが必須の入力です。 2つのうちの1つを提供する必要があります。 あなたが設定した場合 レビューのために送信 に true 、ステップは、送信がiTunes Connectで処理されるのを待ってから、指定されたバージョンのアプリをレビューのために送信します。 のデフォルト値 アプリバージョンの更新をスキップ 入力は No 。別の方法でアプリのバージョン番号をインクリメントした場合にのみ変更してください。 複数のチームにリンクされているiTunesConnectアカウントを使用する場合は、チームIDまたはチーム名のいずれかを入力してください。 ビルドを開始します。 すべてがうまくいけば、アプリはiTunes Connectに送信され、TestflightまたはAppStoreから配布できます。 " }, 
{ "title" : "シミュレーター用のiOSアプリのデプロイ ", 
"url" : "展開/iosの展開/シミュレーター用のiosアプリのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ iOSの展開 \/ シミュレーター用のiOSアプリのデプロイ ", 
"snippet" : "たとえば、iOS アプリケーションをビルドしてシミュレーターにデプロイし、ブラウザーで表示することができます。 Bitriseでは、 専用ステップ シミュレーター用にビルドするには: シミュレーター用の Xcode ビルド ステップ を実行します xcodebuild iOS シミュレーターの宛先を指定してコマンドを実行し、.app ファイルを生成します。 .app ファイルは、どのシミュレーターでも実行できます。 Bitrise では、アップロードするステップがあります。 アプリ Appetize.io へ: Appetize.io デプロイ ステップ。このステップでは、ブラウザーで実行でき...", 
"body" : "たとえば、iOS アプリケーションをビルドしてシミュレーターにデプロイし、ブラウザーで表示することができます。 Bitriseでは、 専用ステップ シミュレーター用にビルドするには: シミュレーター用の Xcode ビルド ステップ を実行します xcodebuild iOS シミュレーターの宛先を指定してコマンドを実行し、.app ファイルを生成します。 .app ファイルは、どのシミュレーターでも実行できます。 Bitrise では、アップロードするステップがあります。 アプリ Appetize.io へ: Appetize.io デプロイ ステップ。このステップでは、ブラウザーで実行できるようにアプリをデプロイできます。 シミュレーター用のアプリをビルドするために、コード署名ファイルは必要ありません！ " }, 
{ "title" : "シミュレーター用のiOSアプリの構築 ", 
"url" : "展開/iosの展開/シミュレーター用のiosアプリのデプロイ.html#シミュレーター用のiosアプリの構築", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ iOSの展開 \/ シミュレーター用のiOSアプリのデプロイ \/ シミュレーター用のiOSアプリの構築 ", 
"snippet" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します シミュレーター用のXcodeビルド ワークフローに進みます。 ステップは、次のような依存関係をインストールするステップの後にある必要があります。 Cocoapodsインストールを実行します 。 ステップに必要な入力を入力します。 プロジェクト（またはワークスペース）パス ：プロジェクトへのパス .xcodeproj また .xworkspace ファイル。デフォルトでは、アプリをBitriseに追加すると、これは環境変数に保存さ...", 
"body" : "でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加します シミュレーター用のXcodeビルド ワークフローに進みます。 ステップは、次のような依存関係をインストールするステップの後にある必要があります。 Cocoapodsインストールを実行します 。 ステップに必要な入力を入力します。 プロジェクト（またはワークスペース）パス ：プロジェクトへのパス .xcodeproj また .xworkspace ファイル。デフォルトでは、アプリをBitriseに追加すると、これは環境変数に保存されます。 スキーム名 ：プロジェクトのXcodeスキーム。デフォルトでは、アプリをBitriseに追加すると、これは環境変数に保存されます。 デバイスモデル ：アプリを実行するデバイスの種類。 Xcodeのデバイス選択メニューに表示されるとおりに正確に設定します。 OSバージョン ：アプリを実行するデバイスオペレーティングシステムのバージョン。デフォルト値は latest 。 プラットホーム : アプリを実行するプラットフォーム。デフォルト値は iOS .の値が デバイスモデル 入力と プラットホーム 入力は互換性があります: たとえば、設定した場合 デバイスモデル に Apple TV 1080p 、 設定 プラットホーム に tvOS . このステップでは、次の出力が生成されます。 BITRISE_APP_DIR_PATH ：生成された.appファイルへのパス。 BITRISE_APP_DIR_PATH_LIST ：生成された.appファイルへのパスとすべての依存するターゲットアプリへのパス。パスはで区切られます | キャラクター。 BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH ：生のビルド結果のログファイルへのパス。 " }, 
{ "title" : "Appetize.ioへのアプリのデプロイ ", 
"url" : "展開/iosの展開/シミュレーター用のiosアプリのデプロイ.html#appetize-ioへのアプリのデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ iOSの展開 \/ シミュレーター用のiOSアプリのデプロイ \/ Appetize.ioへのアプリのデプロイ ", 
"snippet" : "私たちで構築された.appファイル シミュレーター用のXcodeビルド ステップは、ほぼすべてのシミュレーターで機能します。ただし、ブラウザでアプリを実行できるシミュレータに簡単かつ迅速に統合したい場合は、 Appetize.ioデプロイ ステップ。アプリをAppetize.ioにアップロードし、ブラウザーでアプリを使用するためのパブリックURLを提供します。 Appetize.ioAPIトークンをリクエストします。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加して構成します シ...", 
"body" : "私たちで構築された.appファイル シミュレーター用のXcodeビルド ステップは、ほぼすべてのシミュレーターで機能します。ただし、ブラウザでアプリを実行できるシミュレータに簡単かつ迅速に統合したい場合は、 Appetize.ioデプロイ ステップ。アプリをAppetize.ioにアップロードし、ブラウザーでアプリを使用するためのパブリックURLを提供します。 Appetize.ioAPIトークンをリクエストします。 でアプリを開きます ビットライズ 。 クリック ワークフロー メインページのボタン。 からワークフローを選択します ワークフロー ドロップダウンメニュー。 追加して構成します シミュレーター用のXcodeビルド ワークフローに進みます。 追加します Appetize.ioデプロイ ワークフローに進みます。 Appetize.ioAPIトークンをに追加します Appetize.ioトークン 入力。 .appファイルへのパスを アプリケーションパス 入力。最も簡単な解決策は、 BITRISE_APP_DIR_PATH_LIST の出力である環境変数 シミュレーター用のXcodeビルド ステップ。オプションで、より効率的なデバッグのために詳細ログを有効にすることもできます。 NS Appetize.io deploy ステップは1つの出力を生成します： APPETIZE_APP_URL 環境変数。アプリにアクセスできる公開URLです。見せびらかして楽しんでください！ " }, 
{ "title" : "リリース管理 [ベータ版] ", 
"url" : "展開/リリース管理--ベータ版-.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] ", 
"snippet" : "リリース管理アドオン Bitrise の Release Management は、コア CI\/CD 製品に加えて、新しいタイプの Bitrise サービスを提供するアドオンです。アドオンの詳細については、こちらをご覧ください Bitrise アドオン. リリース管理は、あなたの アプリ のリリース ワークフロー。これにより、透明性が提供され、すべてのチーム メンバーが今後のリリースの進行状況を理解できるようになり、作業をより効率的に調整するのに役立ちます。 Release Management は、リリース ブランチの作成や TestFlight へのリリース候補のアップロードなど、リリース...", 
"body" : "リリース管理アドオン Bitrise の Release Management は、コア CI\/CD 製品に加えて、新しいタイプの Bitrise サービスを提供するアドオンです。アドオンの詳細については、こちらをご覧ください Bitrise アドオン. リリース管理は、あなたの アプリ のリリース ワークフロー。これにより、透明性が提供され、すべてのチーム メンバーが今後のリリースの進行状況を理解できるようになり、作業をより効率的に調整するのに役立ちます。 Release Management は、リリース ブランチの作成や TestFlight へのリリース候補のアップロードなど、リリース固有のすべてのタスクのワンストップ ソリューションとしても機能します。 " }, 
{ "title" : "リリース管理の要件 ", 
"url" : "展開/リリース管理--ベータ版-/リリース管理の要件.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリース管理の要件 ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "ネイティブ iOS サポートのみ ", 
"url" : "展開/リリース管理--ベータ版-/リリース管理の要件.html#ネイティブ-ios-サポートのみ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリース管理の要件 \/ ネイティブ iOS サポートのみ ", 
"snippet" : "Release Management は、Bitrise のネイティブ iOS プロジェクトのみをサポートします。 Flutter と React Native はまだサポートされていません。 Bitrise プロジェクトのプロジェクト タイプが iOS に設定されていることを確認してください。...", 
"body" : "Release Management は、Bitrise のネイティブ iOS プロジェクトのみをサポートします。 Flutter と React Native はまだサポートされていません。 Bitrise プロジェクトのプロジェクト タイプが iOS に設定されていることを確認してください。 " }, 
{ "title" : "Apple サービス接続 ", 
"url" : "展開/リリース管理--ベータ版-/リリース管理の要件.html#apple-サービス接続", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリース管理の要件 \/ Apple サービス接続 ", 
"snippet" : "Release Management には、iOS プロジェクト用の接続された API キー Apple サービス接続が必要です。アクティブな API キー サービス接続があり、それが iOS プロジェクトに割り当てられていることを確認してください。詳細については、こちらをご覧ください API キーを使用して Apple サービスに接続する ....", 
"body" : "Release Management には、iOS プロジェクト用の接続された API キー Apple サービス接続が必要です。アクティブな API キー サービス接続があり、それが iOS プロジェクトに割り当てられていることを確認してください。詳細については、こちらをご覧ください API キーを使用して Apple サービスに接続する . " }, 
{ "title" : "App Store Connect に登録された iOS アプリ ", 
"url" : "展開/リリース管理--ベータ版-/リリース管理の要件.html#app-store-connect-に登録された-ios-アプリ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリース管理の要件 \/ App Store Connect に登録された iOS アプリ ", 
"snippet" : "Release Management を使用して iOS アプリを App Store 接続にリリースできます。新しいリリースを作成するときにアプリを指定する必要があります。 App Store Connect アプリの詳細 . ホワイト ラベル アプリのサポート 新しいリリースごとに別の App Store Connect アプリに接続できるため、必要に応じて 1 つの Bitrise プロジェクトから複数の App Store アプリをリリースできます。...", 
"body" : "Release Management を使用して iOS アプリを App Store 接続にリリースできます。新しいリリースを作成するときにアプリを指定する必要があります。 App Store Connect アプリの詳細 . ホワイト ラベル アプリのサポート 新しいリリースごとに別の App Store Connect アプリに接続できるため、必要に応じて 1 つの Bitrise プロジェクトから複数の App Store アプリをリリースできます。 " }, 
{ "title" : "iOS アプリから .ipa または .xcarchive ファイルを生成できる Bitrise ワークフロー ", 
"url" : "展開/リリース管理--ベータ版-/リリース管理の要件.html#ios-アプリから--ipa-または--xcarchive-ファイルを生成できる-bitrise-ワークフロー", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリース管理の要件 \/ iOS アプリから .ipa または .xcarchive ファイルを生成できる Bitrise ワークフロー ", 
"snippet" : "リリース管理には、 .ipa または .xcarchive ファイル。両方のファイルが利用可能な場合、Release Management は .ipa リリース候補段階のファイル。 これを行う最も簡単な方法は、 Xcode アーカイブ & iOS 用エクスポート ステップと Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ワークフローに進みます。詳細については、こちらをご覧ください リリース候補ステージのリリース候補の選択 ....", 
"body" : "リリース管理には、 .ipa または .xcarchive ファイル。両方のファイルが利用可能な場合、Release Management は .ipa リリース候補段階のファイル。 これを行う最も簡単な方法は、 Xcode アーカイブ & iOS 用エクスポート ステップと Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト ワークフローに進みます。詳細については、こちらをご覧ください リリース候補ステージのリリース候補の選択 . " }, 
{ "title" : "リリース管理の開始 ", 
"url" : "展開/リリース管理--ベータ版-/リリース管理の開始.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリース管理の開始 ", 
"snippet" : "リリース管理ツールを使用して、機能の準備状況の監視や App Store レビューへのアプリの送信など、リリース固有のタスクを自動化できます。リリース管理を開始するには、最初にアプリのリリース ページにアクセスする必要があります。 アプリのリリース ページにアクセスするには、次の 2 つの方法があります。 から リリース管理 「」を使用したページ \" ボタン。 アプリのページから リリース ボタン。...", 
"body" : "リリース管理ツールを使用して、機能の準備状況の監視や App Store レビューへのアプリの送信など、リリース固有のタスクを自動化できます。リリース管理を開始するには、最初にアプリのリリース ページにアクセスする必要があります。 アプリのリリース ページにアクセスするには、次の 2 つの方法があります。 から リリース管理 「」を使用したページ \" ボタン。 アプリのページから リリース ボタン。 " }, 
{ "title" : "リリース管理ページからアプリのリリース ページにアクセスする ", 
"url" : "展開/リリース管理--ベータ版-/リリース管理の開始.html#リリース管理ページからアプリのリリース-ページにアクセスする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリース管理の開始 \/ リリース管理ページからアプリのリリース ページにアクセスする ", 
"snippet" : "アプリのページからアプリのリリース ページにアクセスするには: にログイン bitrise.io . クリックしてください リリース 上部のナビゲーション バーのボタン。 これにより、 リリース管理 ページ。ここから、プロジェクトの リリース 「 \" ボタン。...", 
"body" : "アプリのページからアプリのリリース ページにアクセスするには: にログイン bitrise.io . クリックしてください リリース 上部のナビゲーション バーのボタン。 これにより、 リリース管理 ページ。ここから、プロジェクトの リリース 「 \" ボタン。 " }, 
{ "title" : "アプリのページからアプリのリリース ページにアクセスする ", 
"url" : "展開/リリース管理--ベータ版-/リリース管理の開始.html#アプリのページからアプリのリリース-ページにアクセスする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリース管理の開始 \/ アプリのページからアプリのリリース ページにアクセスする ", 
"snippet" : "次の方法でリリース管理ページにアクセスできます。 あなたの ダッシュボード 必要な iOS アプリを選択します。 クリックしてください リリース ボタン。...", 
"body" : "次の方法でリリース管理ページにアクセスできます。 あなたの ダッシュボード 必要な iOS アプリを選択します。 クリックしてください リリース ボタン。 " }, 
{ "title" : "アプリのリリースページ ", 
"url" : "展開/リリース管理--ベータ版-/リリース管理の開始.html#アプリのリリースページ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリース管理の開始 \/ アプリのリリースページ ", 
"snippet" : "アプリのリリース ページには、アプリの今後のリリースと以前のリリースが一覧表示されます。次のリリースはページの上部に表示され、他の予定されている今後のリリースは下にリストされます。 今後の iOS リリース .完成したリリースは、 以前の iOS リリース セクション。を使用して新しいリリースを追加できます。 新しいリリースボタンを追加 、詳細は 新しいリリースの追加....", 
"body" : "アプリのリリース ページには、アプリの今後のリリースと以前のリリースが一覧表示されます。次のリリースはページの上部に表示され、他の予定されている今後のリリースは下にリストされます。 今後の iOS リリース .完成したリリースは、 以前の iOS リリース セクション。を使用して新しいリリースを追加できます。 新しいリリースボタンを追加 、詳細は 新しいリリースの追加. " }, 
{ "title" : "新しいリリースの追加 ", 
"url" : "展開/リリース管理--ベータ版-/新しいリリースの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ 新しいリリースの追加 ", 
"snippet" : "から新しいリリースを追加できます。 リリース アプリのページ: アプリの リリース ページ . クリックしてください 新しいリリースを追加 ボタン。 これにより、 iOS 向けの新しいリリースを追加 ページ。 の下でセットアップ方法を選択します 設定方法 分野。 選択する 空のリリースから始める 新しいリリースが以前のリリースから構成を継承しないようにする場合。 選択する 選択したリリースからコピー をクリックし、選択したアプリ、チェックリスト、自動化、および設定を新しいリリースに継承させる場合は、ドロップダウン メニューから他のリリースのいずれかを選択します。 選択した場合 空のリリースから...", 
"body" : "から新しいリリースを追加できます。 リリース アプリのページ: アプリの リリース ページ . クリックしてください 新しいリリースを追加 ボタン。 これにより、 iOS 向けの新しいリリースを追加 ページ。 の下でセットアップ方法を選択します 設定方法 分野。 選択する 空のリリースから始める 新しいリリースが以前のリリースから構成を継承しないようにする場合。 選択する 選択したリリースからコピー をクリックし、選択したアプリ、チェックリスト、自動化、および設定を新しいリリースに継承させる場合は、ドロップダウン メニューから他のリリースのいずれかを選択します。 選択した場合 空のリリースから始める で、リリースに追加するアプリを選択します App Store接続 分野。 APIキーによるAppleサービスへの接続が必要です App Store 接続フィールドの下に API キーが表示されない場合は、API キーを使用して Apple サービスに接続していることを確認してください。詳細については、こちらをご覧ください 私たちのガイド . の中に リリース情報 フィールドの下にリリース バージョンを指定します。 リリース バージョン 入力し、必要に応じてリリースの説明を下に追加します 説明 入力。 リリースの説明は内部専用です リリースの説明は内部専用であり、App Store レビューの送信 (メタデータ) には含まれません。リリースの説明は、リリースの作成後に [リリース構成] ウィンドウでいつでも変更できます。 クリック リリースを追加 . それでおしまい！新しいリリースの準備が整いました。リリース構成ページが表示されます。 " }, 
{ "title" : "リリースの構成 ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 ", 
"snippet" : "リリースを追加すると、自動的にリリース構成ページに移動します。 からもこのページにアクセスできます。 リリース 「 リリースの横にある \" ボタン。 左側のナビゲーション バーのメニュー オプションを使用して、リリースの構成とリリース ステージを切り替えることができます。これらの各オプションを使用すると、さまざまな方法でリリースを管理できます。 構成 : リリースの説明を編集し、リリース ステージをスケジュールし、リリースを削除します。 リリース候補版 : リリース元のブランチと、リリースを生成できるワークフローを指定します。 .xcarchive ファイル (たとえば、Xcode Archi...", 
"body" : "リリースを追加すると、自動的にリリース構成ページに移動します。 からもこのページにアクセスできます。 リリース 「 リリースの横にある \" ボタン。 左側のナビゲーション バーのメニュー オプションを使用して、リリースの構成とリリース ステージを切り替えることができます。これらの各オプションを使用すると、さまざまな方法でリリースを管理できます。 構成 : リリースの説明を編集し、リリース ステージをスケジュールし、リリースを削除します。 リリース候補版 : リリース元のブランチと、リリースを生成できるワークフローを指定します。 .xcarchive ファイル (たとえば、Xcode Archive & Export for iOS ステップを使用)。 TestFlight アップロード : 選択したリリース候補を TestFlight (App Store Connect) にアップロードします。 承認 : App Store レビューを続行するために承認が必要な関係者やチーム メンバーごとにタスクを作成します。 App Store レビュー : アプリを App Store レビューに送信します。 リリース : 自動リリースのステータスを監視するか、アプリのリリースを管理します。 ステージを完了すると、左側のメニューの横に緑色のチェックマークが表示されます。すべての段階が完了すると、アプリがリリースされます。 " }, 
{ "title" : "リリースの説明の編集 ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html#リリースの説明の編集", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 \/ リリースの説明の編集 ", 
"snippet" : "既存のリリースの説明を編集するには: リリースの説明は内部専用です リリースの説明は内部専用であり、App Store レビューの送信 (メタデータ) には含まれません。リリースの説明は、リリースの作成後に [リリース構成] ウィンドウでいつでも変更できます。 リリースのリリース構成ページを開く . 選択する 構成 左側のナビゲーション バーにあります。 クリックしてください 情報の編集 開くボタン リリースの詳細を編集 窓。 説明を更新したら、 セーブ ....", 
"body" : "既存のリリースの説明を編集するには: リリースの説明は内部専用です リリースの説明は内部専用であり、App Store レビューの送信 (メタデータ) には含まれません。リリースの説明は、リリースの作成後に [リリース構成] ウィンドウでいつでも変更できます。 リリースのリリース構成ページを開く . 選択する 構成 左側のナビゲーション バーにあります。 クリックしてください 情報の編集 開くボタン リリースの詳細を編集 窓。 説明を更新したら、 セーブ . " }, 
{ "title" : "リリースのスケジュール段階 ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html#リリースのスケジュール段階", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 \/ リリースのスケジュール段階 ", 
"snippet" : "リリースのメイン ステージのタイムラインを設定して、各ステージの終了予定時刻をチームに透過的に伝えることができます。 そうするために： リリースのリリース構成ページを開く . 選択する 構成 左側のナビゲーション バーにあります。 クリック ステージのスケジュール . の中に タイムラインを編集 ウィンドウで、関連する各段階の目標日を入力します。 クリック セーブ ....", 
"body" : "リリースのメイン ステージのタイムラインを設定して、各ステージの終了予定時刻をチームに透過的に伝えることができます。 そうするために： リリースのリリース構成ページを開く . 選択する 構成 左側のナビゲーション バーにあります。 クリック ステージのスケジュール . の中に タイムラインを編集 ウィンドウで、関連する各段階の目標日を入力します。 クリック セーブ . " }, 
{ "title" : "リリースの削除 ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html#リリースの削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 \/ リリースの削除 ", 
"snippet" : "リリースの削除は永続的です! リリースを削除すると元に戻すことができず、リリース管理のリリースのすべてのデータが失われます。 TestFlight と App Store Connect のデータは失われず、App Store で進行中のプロセスは影響を受けません。 App Store の審査はキャンセルされません。アプリは設定どおりに自動的にリリースされます。 リリースを削除する場合は、次の手順に従います。 リリースのリリース構成ページを開く . 選択する 構成 左側のナビゲーション バーにあります。 下にスクロールして 危険区域 セクションをクリックし、 リリースを削除 . クリック 消去...", 
"body" : "リリースの削除は永続的です! リリースを削除すると元に戻すことができず、リリース管理のリリースのすべてのデータが失われます。 TestFlight と App Store Connect のデータは失われず、App Store で進行中のプロセスは影響を受けません。 App Store の審査はキャンセルされません。アプリは設定どおりに自動的にリリースされます。 リリースを削除する場合は、次の手順に従います。 リリースのリリース構成ページを開く . 選択する 構成 左側のナビゲーション バーにあります。 下にスクロールして 危険区域 セクションをクリックし、 リリースを削除 . クリック 消去 確認のためにもう一度。 " }, 
{ "title" : "リリース管理イベントの Slack 通知を有効にする ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html#リリース管理イベントの-slack-通知を有効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 \/ リリース管理イベントの Slack 通知を有効にする ", 
"snippet" : "Release Management イベントの Slack 通知を有効にできます。そうするために： リリースを開きます。 選択する 通知設定 左側のナビゲーション バーにあります。 クリック 編集 . Slack Webhook URL フィールドに Slack Webhook URL をコピーして貼り付けます。 Slack Webhook URL Slack Webhook の設定方法の詳細については、こちらをご覧ください。 Slack の公式ガイド . クリック 保存 . そして、あなたは完了です！これからは、次のイベントに関する Slack 通知を受け取ります。 通知イベント ステージ...", 
"body" : "Release Management イベントの Slack 通知を有効にできます。そうするために： リリースを開きます。 選択する 通知設定 左側のナビゲーション バーにあります。 クリック 編集 . Slack Webhook URL フィールドに Slack Webhook URL をコピーして貼り付けます。 Slack Webhook URL Slack Webhook の設定方法の詳細については、こちらをご覧ください。 Slack の公式ガイド . クリック 保存 . そして、あなたは完了です！これからは、次のイベントに関する Slack 通知を受け取ります。 通知イベント ステージ イベント リリース候補版 リリース候補が変更されました TestFlight アップロード アップロードと処理が完了しました 承認 リリース承認済み App Store レビュー レビューのために送信されたリリース レビュー提出のステータスが変更されました リリース 発売開始 発売終了 " }, 
{ "title" : "リリース候補ステージのリリース候補の選択 ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html#リリース候補ステージのリリース候補の選択", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 \/ リリース候補ステージのリリース候補の選択 ", 
"snippet" : "リリース候補ステージでは、リリース ブランチを指定し、生成できるワークフローを選択できます。 .ipa または .xcarchive ファイル。 (たとえば、 Xcode アーカイブ & iOS 用エクスポート ステップ）。 指定したワークフローで選択したリリース ブランチでビルドを完了するたびに、新しいリリース候補を自動的にアップロードするように選択することもできます。 リリース候補を選択するには: リリースのリリース構成ページを開く . 選択する リリース候補版 左側のナビゲーション バーにあります。 下 構成 セクションで、 変化する ボタン。 これにより、 リリース候補の構成 窓。 を...", 
"body" : "リリース候補ステージでは、リリース ブランチを指定し、生成できるワークフローを選択できます。 .ipa または .xcarchive ファイル。 (たとえば、 Xcode アーカイブ & iOS 用エクスポート ステップ）。 指定したワークフローで選択したリリース ブランチでビルドを完了するたびに、新しいリリース候補を自動的にアップロードするように選択することもできます。 リリース候補を選択するには: リリースのリリース構成ページを開く . 選択する リリース候補版 左側のナビゲーション バーにあります。 下 構成 セクションで、 変化する ボタン。 これにより、 リリース候補の構成 窓。 を選択 リリースブランチ そして ワークフロー それぞれのドロップダウン メニューを使用します。 ワークフローの選択 選択したワークフローが、 .ipa または .xcarchive ファイルであり、アーティファクトをデプロイできることを確認します。これを確実にする最も簡単な方法は、次のステップをワークフローに追加することです。 Xcode アーカイブ & iOS 用エクスポート を生成する手順 .ipa また .xcarchive ファイル。 Bitrise.io へのデプロイ - アプリ、ログ、アーティファクト アーティファクトをデプロイする手順。 成功したすべてのビルドを TestFlight にアップロードする場合は、次のラジオ ボタンをクリックします。 成功したすべてのビルドを自動的にアップロードする . クリック 終わり . 選択したビルドを手動でアップロードしてリリース候補として使用することを選択した場合は、下にスクロールしてアップロードできます。 利用可能なビルド セクションとトグル RCとしてロック ビルドの横にあります。選択したビルドが追加されます アクティブ ビルド セクション。 トグルを使用してビルドをリリース候補としてロックしない場合、最新のビルドが アクティブ ビルド セクション。 で追加のタスクを作成できます。 チェックリスト オプション。 リリース候補を選択し、すべてのタスクにチェックを入れたら、 リリース候補版 左側のナビゲーション バーでも同様にチェック マークが付けられます。 " }, 
{ "title" : "TestFlight アップロード ステージの TestFlight へのリリース候補のアップロード ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html#testflight-アップロード-ステージの-testflight-へのリリース候補のアップロード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 \/ TestFlight アップロード ステージの TestFlight へのリリース候補のアップロード ", 
"snippet" : "成功したすべてのビルドを自動的にアップロードする リリース候補段階で成功したすべてのビルドを自動的にアップロードするオプションを選択すると、この段階は自動的に完了します。 リリース候補ステージで選択したビルドを手動でアップロードするオプションを選択した場合は、引き続きアップロードできます。 選択されたリリース候補 TestFlight (App Store Connect) へ: リリースのリリース構成ページを開く . 選択する TestFlight アップロード 左側のナビゲーション バーにあります。 クリック TestFlight にアップロード ボタン。 アップロードが完了するまで待ちま...", 
"body" : "成功したすべてのビルドを自動的にアップロードする リリース候補段階で成功したすべてのビルドを自動的にアップロードするオプションを選択すると、この段階は自動的に完了します。 リリース候補ステージで選択したビルドを手動でアップロードするオプションを選択した場合は、引き続きアップロードできます。 選択されたリリース候補 TestFlight (App Store Connect) へ: リリースのリリース構成ページを開く . 選択する TestFlight アップロード 左側のナビゲーション バーにあります。 クリック TestFlight にアップロード ボタン。 アップロードが完了するまで待ちます。 で追加のタスクを作成できます。 チェックリスト オプション。 リリース候補を TestFlight にアップロードし、すべてのタスクにチェックを入れたら、 TestFlight アップロード 左側のナビゲーション バーでもチェックされます。 " }, 
{ "title" : "承認段階のタスクの作成 ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html#承認段階のタスクの作成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 \/ 承認段階のタスクの作成 ", 
"snippet" : "App Store Connect へのリリースを続行するために承認が必要な関係者やチーム メンバーごとにタスクを作成できます。 そうするために： リリースのリリース構成ページを開く . 選択する 承認 左側のナビゲーション バーにあります。 クリック 新しいタスクを追加 ボタン。 必要なフィールドに入力して、 セーブ . タスクはいくつでも作成できます。 「リリース候補が承認され、リリース可能」タスクがデフォルトで作成されます。 承認ステージでタスクを完了した後、タスクの横にあるチェックボックスを使用してチェックを入れることができます。すべてのタスクにチェックが入ったら、 承認 左側のナビゲ...", 
"body" : "App Store Connect へのリリースを続行するために承認が必要な関係者やチーム メンバーごとにタスクを作成できます。 そうするために： リリースのリリース構成ページを開く . 選択する 承認 左側のナビゲーション バーにあります。 クリック 新しいタスクを追加 ボタン。 必要なフィールドに入力して、 セーブ . タスクはいくつでも作成できます。 「リリース候補が承認され、リリース可能」タスクがデフォルトで作成されます。 承認ステージでタスクを完了した後、タスクの横にあるチェックボックスを使用してチェックを入れることができます。すべてのタスクにチェックが入ったら、 承認 左側のナビゲーション バーでも同様にチェックされます。 " }, 
{ "title" : "App Store レビュー ステージの App Store レビューにアプリを送信する ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html#app-store-レビュー-ステージの-app-store-レビューにアプリを送信する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 \/ App Store レビュー ステージの App Store レビューにアプリを送信する ", 
"snippet" : "役割要件 アプリを App Store レビューに送信するには、アプリのチームで管理者または開発者の役割を持っている必要があります。 リリース候補を TestFlight にアップロードし、ビルド処理が完了したら、Apple がリリースをレビューする App Store レビューに送信できます。 リリースを開きます。 選択する App Store レビュー 左側のナビゲーション バーにあります。 下にスクロールしてクリックします 編集の設定 承認プロセス後に Apple がバージョンをリリースする方法を指定します。 リリースを段階的に行うかどうかを選択します 自動更新の段階的リリース . 段階...", 
"body" : "役割要件 アプリを App Store レビューに送信するには、アプリのチームで管理者または開発者の役割を持っている必要があります。 リリース候補を TestFlight にアップロードし、ビルド処理が完了したら、Apple がリリースをレビューする App Store レビューに送信できます。 リリースを開きます。 選択する App Store レビュー 左側のナビゲーション バーにあります。 下にスクロールしてクリックします 編集の設定 承認プロセス後に Apple がバージョンをリリースする方法を指定します。 リリースを段階的に行うかどうかを選択します 自動更新の段階的リリース . 段階的リリースを選択した場合、最初は一部のユーザーのみがリリースのコンテンツにアクセスできます。 7 日間かけて徐々に、すべてのユーザーがアクセスできるようになります。 クリック 変更内容を保存 . の横にあるチェックボックスをオンにします App Store Connect でこのバージョンのメタデータを修正しました . クリック アプリレビューに提出 . App Store レビューのキャンセル をクリックすると、App Store のレビューが完了する前にキャンセルできます。 App Store レビューをキャンセル ボタン。 選択した場合 このバージョンを自動的にリリースする の場合、Apple によるアプリの審査プロセスが終了次第、アプリはリリースされます。アプリは、下で指定した日付以降にのみリリースされます 現地の日付と時刻 選択した場合 アプリのレビュー後にこのバージョンを自動的にリリースします。 . でリリース状況を監視できます。 リリース ページ。 に進むことができます リリース ステージに向けてアプリをリリースする 手動リリース用。 " }, 
{ "title" : "リリース ステージに向けてアプリをリリースする ", 
"url" : "展開/リリース管理--ベータ版-/リリースの構成.html#リリース-ステージに向けてアプリをリリースする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ リリース管理 [ベータ版] \/ リリースの構成 \/ リリース ステージに向けてアプリをリリースする ", 
"snippet" : "役割要件 アプリをリリースするには、アプリのチームで管理者または開発者の役割を持っている必要があります。 選択した場合 このバージョンを手動でリリースする App Store の審査段階では、次の方法でアプリをリリースできます。 リリースのリリース構成ページを開く . 選択する リリース 左側のナビゲーション バーにあります。 クリック アプリをリリース ボタン。 以上です！あなたのアプリはまもなくリリースされます！ 自動リリースの日付の変更 で日付を変更できます。 リリース 選択した場合のページ アプリのレビュー後にこのバージョンを自動的にリリースします。 App Store の審査段階にあ...", 
"body" : "役割要件 アプリをリリースするには、アプリのチームで管理者または開発者の役割を持っている必要があります。 選択した場合 このバージョンを手動でリリースする App Store の審査段階では、次の方法でアプリをリリースできます。 リリースのリリース構成ページを開く . 選択する リリース 左側のナビゲーション バーにあります。 クリック アプリをリリース ボタン。 以上です！あなたのアプリはまもなくリリースされます！ 自動リリースの日付の変更 で日付を変更できます。 リリース 選択した場合のページ アプリのレビュー後にこのバージョンを自動的にリリースします。 App Store の審査段階にあります。 " }, 
{ "title" : "BitriseOTAアプリの展開 ", 
"url" : "展開/bitriseotaアプリの展開.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ BitriseOTAアプリの展開 ", 
"snippet" : "Bitriseには、アプリやその他のビルドアーティファクトを配布するために使用できる統合アプリデプロイメントシステムがあります。 Bitriseアカウントを持っていない場合でも、アプリのチームメンバーや関係者のためにアプリを無線で配布できます。 Bitriseには、アプリやその他のビルドアーティファクトを配布するために使用できる統合アプリ展開システムがあります。 Bitriseアカウントを持っていない場合でも、アプリのチームメンバーや関係者のためにアプリを無線で配布できます。また、これを使用して、アプリや、アプリで利用できるその他のビルドアーティファクトファイルをアーカイブすることもできます。...", 
"body" : "Bitriseには、アプリやその他のビルドアーティファクトを配布するために使用できる統合アプリデプロイメントシステムがあります。 Bitriseアカウントを持っていない場合でも、アプリのチームメンバーや関係者のためにアプリを無線で配布できます。 Bitriseには、アプリやその他のビルドアーティファクトを配布するために使用できる統合アプリ展開システムがあります。 Bitriseアカウントを持っていない場合でも、アプリのチームメンバーや関係者のためにアプリを無線で配布できます。また、これを使用して、アプリや、アプリで利用できるその他のビルドアーティファクトファイルをアーカイブすることもできます。 ビルド 表示およびダウンロード用のページ。 これは、プラットフォームごとのさまざまなビルド手順の簡単な要約です。 プラットホーム ビルドステップ ステップをビットライズにデプロイ iOS iOS用のXcodeアーカイブとエクスポート Bitrise.ioにデプロイ-アプリ、ログ、アーティファクト アンドロイド Gradleランナー また Androidビルド Bitrise.ioにデプロイ-アプリ、ログ、アーティファクト リアクトネイティブ Androidビルド および\/または iOS用のXcodeアーカイブとエクスポート Bitrise.ioにデプロイ-アプリ、ログ、アーティファクト イオン イオンアーカイブ Bitrise.ioにデプロイ-アプリ、ログ、アーティファクト コルドバ コルドバアーカイブ Bitrise.ioにデプロイ-アプリ、ログ、アーティファクト マックOS Mac用のXcodeアーカイブ および\/または macOSXcodeアーカイブをエクスポートする Bitrise.ioにデプロイ-アプリ、ログ、アーティファクト " }, 
{ "title" : "DeploytoBitrise.ioステップを使用したデプロイ ", 
"url" : "展開/bitriseotaアプリの展開.html#deploytobitrise-ioステップを使用したデプロイ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ BitriseOTAアプリの展開 \/ DeploytoBitrise.ioステップを使用したデプロイ ", 
"snippet" : "The Bitrise.ioにデプロイ-アプリ、ログ、アーティファクト ステップはいくつかの異なる機能を実行できます。 これにより、アプリの公開インストールページを作成して配布し、アプリの新しいビルドについてユーザーに通知できます。 アプリのバイナリやその他のビルドアーティファクトをにアップロードします アーティファクト ビルドのページのタブ。 テスト結果とログをに送信できます テストレポート アドオン。 それはあなたが使用することを可能にします 船 アプリをデプロイします。 このガイドでは、ステップを使用してアプリバイナリ（IPA \/ APK \/ AABファイル）をデプロイし、パブリックイン...", 
"body" : "The Bitrise.ioにデプロイ-アプリ、ログ、アーティファクト ステップはいくつかの異なる機能を実行できます。 これにより、アプリの公開インストールページを作成して配布し、アプリの新しいビルドについてユーザーに通知できます。 アプリのバイナリやその他のビルドアーティファクトをにアップロードします アーティファクト ビルドのページのタブ。 テスト結果とログをに送信できます テストレポート アドオン。 それはあなたが使用することを可能にします 船 アプリをデプロイします。 このガイドでは、ステップを使用してアプリバイナリ（IPA \/ APK \/ AABファイル）をデプロイし、パブリックインストールページへのリンクを配布する方法について説明します。 " }, 
{ "title" : "デプロイディレクトリ ", 
"url" : "展開/bitriseotaアプリの展開.html#デプロイディレクトリ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ BitriseOTAアプリの展開 \/ DeploytoBitrise.ioステップを使用したデプロイ \/ デプロイディレクトリ ", 
"snippet" : "The ディレクトリまたはファイルパスをデプロイします inputは、ステップがデプロイするファイルをチェックするパスを定義します。入力値がファイルパスの場合、そのファイルがデプロイされます。入力値がディレクトリの場合、ディレクトリ内のすべてのファイルが展開されます。 デフォルト値は BITRISE_DEPLOY_DIR 環境変数 （環境変数）。ほとんどの場合、これを変更したり、心配したりする必要はありません。公式のBitriseステップを使用してアプリをビルドすると、必要なすべてのファイルがこのディレクトリにエクスポートされます。場合によっては、ファイルが展開のために正しい場所に配置されるか...", 
"body" : "The ディレクトリまたはファイルパスをデプロイします inputは、ステップがデプロイするファイルをチェックするパスを定義します。入力値がファイルパスの場合、そのファイルがデプロイされます。入力値がディレクトリの場合、ディレクトリ内のすべてのファイルが展開されます。 デフォルト値は BITRISE_DEPLOY_DIR 環境変数 （環境変数）。ほとんどの場合、これを変更したり、心配したりする必要はありません。公式のBitriseステップを使用してアプリをビルドすると、必要なすべてのファイルがこのディレクトリにエクスポートされます。場合によっては、ファイルが展開のために正しい場所に配置されるかどうかを確認する価値があります。 を使用する場合 脚本 アプリをビルドするためのステップ。ベストプラクティスは、ファイルをにエクスポートするようにステップを構成することです。 BITRISE_DEPLOY_DIR 環境変数 Bitriseによって維持されていないステップを使用する場合は、ステップが生成するファイルをどこにエクスポートするかを確認してください。そうでない場合 BITRISE_DEPLOY_DIR 、その場所を指すように入力を設定します。 すべてのファイルを.zipに圧縮する デプロイディレクトリにあるすべてのファイルを単一の.zipファイルに圧縮する場合は、 アーティファクトを1つのファイルに圧縮しますか？ への入力 true 。 " }, 
{ "title" : "公開インストールページ ", 
"url" : "展開/bitriseotaアプリの展開.html#公開インストールページ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ BitriseOTAアプリの展開 \/ DeploytoBitrise.ioステップを使用したデプロイ \/ 公開インストールページ ", 
"snippet" : "The アプリの公開ページを有効にしますか？ inputは、公開されているWebページにアクセスしてアプリをインストールできるかどうかを決定します。ページへのリンクを持っている人は誰でも、自分のデバイスにアプリをインストールできます。 テストデバイスの登録 Androidアプリの場合、Androidアプリにはデバイスごとのインストール制限がないため、テストデバイスを登録してアプリをインストールする必要はありません。ただし、有効にする必要があります 未知のソース GooglePlayストアの外部からAPK\/AABをインストールできるようにするAndroidのオプション。 iOSアプリの場合、 テ...", 
"body" : "The アプリの公開ページを有効にしますか？ inputは、公開されているWebページにアクセスしてアプリをインストールできるかどうかを決定します。ページへのリンクを持っている人は誰でも、自分のデバイスにアプリをインストールできます。 テストデバイスの登録 Androidアプリの場合、Androidアプリにはデバイスごとのインストール制限がないため、テストデバイスを登録してアプリをインストールする必要はありません。ただし、有効にする必要があります 未知のソース GooglePlayストアの外部からAPK\/AABをインストールできるようにするAndroidのオプション。 iOSアプリの場合、 テストデバイスを登録してプロビジョニングする必要があります そうしないと、パブリックインストールページからアプリをインストールできません。 このページには、ファイル名、サイズ、バージョンコード、最小SDKバージョン、ビルド番号など、ビルドの重要な詳細がすべて含まれています。パブリックインストールページが有効になっている場合、 通知：メール と 通知：ユーザーの役割 入力はページへのリンクを受け取ります。 デフォルトでは、入力値はに設定されています true 。このオプションを無効にすると、アプリのBitriseチームのメンバーのみがデバイスにアプリをインストールできるようになります。彼らはインストール可能なバイナリを見つけることができます アーティファクト ビルドページのタブ。 " }, 
{ "title" : "ユーザーへの通知 ", 
"url" : "展開/bitriseotaアプリの展開.html#ユーザーへの通知", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ BitriseOTAアプリの展開 \/ DeploytoBitrise.ioステップを使用したデプロイ \/ ユーザーへの通知 ", 
"snippet" : "The Bitrise.ioステップにデプロイします 指定されたユーザーに電子メール通知を送信できます。通知には、ビルドURLとパブリックインストールページのリンクを含めることができます。ステップは、次の2つの方法でユーザーに通知できます。 The 通知：ユーザーグループ inputを使用すると、アプリのBitriseチームのユーザーに通知できます。の場合 アプリの公開ページを有効にしますか？ 入力はに設定されます true 、通知には公開インストールページへのリンクが含まれています。に設定されている場合 false 、指定されたユーザーグループは代わりにビルドURLを受け取ります。 デフォル...", 
"body" : "The Bitrise.ioステップにデプロイします 指定されたユーザーに電子メール通知を送信できます。通知には、ビルドURLとパブリックインストールページのリンクを含めることができます。ステップは、次の2つの方法でユーザーに通知できます。 The 通知：ユーザーグループ inputを使用すると、アプリのBitriseチームのユーザーに通知できます。の場合 アプリの公開ページを有効にしますか？ 入力はに設定されます true 、通知には公開インストールページへのリンクが含まれています。に設定されている場合 false 、指定されたユーザーグループは代わりにビルドURLを受け取ります。 デフォルト値は みんな ：これは、アプリのBitriseチームの全員が通知を受け取ることを意味します。他の役割を選択できます。その場合、その特定の役割を持つユーザーのみが通知を受け取ります。 The 通知：メール inputを使用すると、電子メールで誰にでも通知できます。これには、Bitriseアカウントを持っていない人も含まれます。このようにして、公開インストールページを誰にでも送信し、アプリのインストールを招待することができます。 パブリックインストールページが必要です の場合 アプリの公開ページを有効にしますか？ 入力はに設定されます false 、 通知：メール 入力は無視されます！ シークレットを使用する 入力は取るだけです 秘密 値として：シークレットを作成し、シークレットの値に電子メールアドレスを指定する必要があります。 " }, 
{ "title" : "船での展開 ", 
"url" : "展開/船での展開.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 ", 
"snippet" : "Shipは、ユーザーの多くの頭痛の種を救うことを目的とした展開ソリューションです。 Shipを使用すると、アプリの配布、バージョン履歴、およびすべての重要なメタデータを完全に制御でき、それらすべてを1か所で管理できます。 ベータ版 この機能はまだベータ版であることに注意してください。 Shipは、ユーザーの多くの頭痛の種を軽減することを目的とした展開ソリューションです。 Shipを使用すると、アプリの配布、バージョン履歴、およびすべての重要なメタデータを完全に制御でき、それらすべてを1か所で管理できます。 Shipを使用した展開には、自動再署名とアーティファクトの生成が含まれ、以前のバージョン...", 
"body" : "Shipは、ユーザーの多くの頭痛の種を救うことを目的とした展開ソリューションです。 Shipを使用すると、アプリの配布、バージョン履歴、およびすべての重要なメタデータを完全に制御でき、それらすべてを1か所で管理できます。 ベータ版 この機能はまだベータ版であることに注意してください。 Shipは、ユーザーの多くの頭痛の種を軽減することを目的とした展開ソリューションです。 Shipを使用すると、アプリの配布、バージョン履歴、およびすべての重要なメタデータを完全に制御でき、それらすべてを1か所で管理できます。 Shipを使用した展開には、自動再署名とアーティファクトの生成が含まれ、以前のバージョンもすべて保存されます。アプリのメタデータ、すべてのマーケティングコピー、スクリーンショットもその場で編集でき、開発者以外の人も管理できます。 船の言語 現在のところ、Shipは英語ロケールのみをサポートしています。他の言語の提出はサポートされていません。 Shipではさまざまなことができます。 アプリのすべてのビルドバージョンを表示します。 説明、スクリーンショット、アプリのサイズやサポートされているデバイスタイプなどの最も重要なパラメーターなど、特定のビルドバージョンのすべての詳細を表示および編集します。 公開インストールページへのリンクを使用して、アプリをテスターに直接送信します。 公開を設定したら、特定のビルドバージョンをApp StoreConnectやGooglePlayConsoleにデプロイします。 上のプラットフォームを切り替える バージョン履歴 クロスプラットフォームプロジェクトの場合はページ。 " }, 
{ "title" : "Shipの使用を開始する ", 
"url" : "展開/船での展開/shipの使用を開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipの使用を開始する ", 
"snippet" : "Shipの使用を開始するには、アプリを作成し、生成されたバイナリをShipにエクスポートする必要があります。バイナリを構築するワークフローを公開し、その中にBitrise.ioへのデプロイステップが含まれていることを確認する必要があります。 Shipの使用を開始するには、アプリをビルドし、生成されたバイナリをShipにエクスポートする必要があります。 BitriseからShipを開くには2つのオプションがあります。 に アドオン アプリのタブ：このオプションを使用すると、Shipのホームページに移動します。 から ビルド ページ：このオプションを使用すると、ビルドの出荷ページに移動します。 最...", 
"body" : "Shipの使用を開始するには、アプリを作成し、生成されたバイナリをShipにエクスポートする必要があります。バイナリを構築するワークフローを公開し、その中にBitrise.ioへのデプロイステップが含まれていることを確認する必要があります。 Shipの使用を開始するには、アプリをビルドし、生成されたバイナリをShipにエクスポートする必要があります。 BitriseからShipを開くには2つのオプションがあります。 に アドオン アプリのタブ：このオプションを使用すると、Shipのホームページに移動します。 から ビルド ページ：このオプションを使用すると、ビルドの出荷ページに移動します。 最初にログインしたときに、公開できる単一のビルドバージョンがない場合があります。しかし、心配しないでください。すぐに修正できます。 Shipと互換性のあるステップバージョン 注意してください Bitrise.ioにデプロイします ステップはバージョン1.9.0以降である必要があります iOS用のXcodeアーカイブとエクスポート iOSアプリのステップはバージョン2.6.0以降である必要があります-古いバージョンのステップはShipをサポートしていません。 Shipでアプリをデプロイできるようにするには： ワークフローの1つで、アプリをビルドするステップが必要です。デフォルトでは、 iOS用のXcodeアーカイブとエクスポート 、 Gradleランナー と Androidビルド 自動的にサポートされます。 同じワークフローには、正しいバージョンの Bitrise.ioにデプロイします アプリを構築するステップの次のステップ。 NS Bitrise.ioにデプロイします ステップは、関連するファイルをエクスポートする必要があります：Androidアプリ用のAPKファイルと .xcarchive iOSアプリ用のファイル。いずれかを使用する場合 iOS用のXcodeアーカイブとエクスポート 、 Gradleランナー と Androidビルド 手順、デフォルトの構成で何も変更する必要はありません Bitrise.ioにデプロイします 関連するファイルをエクスポートする手順。 異なるビルドステップでShipを使用する デフォルトでは、 iOS用のXcodeアーカイブとエクスポート 、 Gradleランナー 、 と Androidビルド Shipで自動的にサポートされます。 他のステップでアプリを構築したい場合は、そうすることができます-それはただ必要です 少し余分な構成 。 アプリのビルドに成功すると、Shipの使用を開始できるようになります。 " }, 
{ "title" : "Shipで公開するためのアプリの構成 ", 
"url" : "展開/船での展開/shipで公開するためのアプリの構成.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipで公開するためのアプリの構成 ", 
"snippet" : "Shipでアプリを公開するには、設定が適切に構成された、Shipに公開されるワークフローを使用してバイナリを構築する必要があります。 Shipでアプリを公開するには、次のことを行う必要があります。 少なくとも1つのワークフローが公開されているアプリを作成します。 ワークフローのアーティファクトを出荷するために公開する。 Bitriseに必要なものがあることを確認してください コード署名ファイル 。 で公開を構成する 設定 ページ。 iOSアプリとAndroidアプリには、独自の設定セットがあります。 設定 ページ;クロスプラットフォームアプリの場合、iOSとAndroidの両方の設定を構成する...", 
"body" : "Shipでアプリを公開するには、設定が適切に構成された、Shipに公開されるワークフローを使用してバイナリを構築する必要があります。 Shipでアプリを公開するには、次のことを行う必要があります。 少なくとも1つのワークフローが公開されているアプリを作成します。 ワークフローのアーティファクトを出荷するために公開する。 Bitriseに必要なものがあることを確認してください コード署名ファイル 。 で公開を構成する 設定 ページ。 iOSアプリとAndroidアプリには、独自の設定セットがあります。 設定 ページ;クロスプラットフォームアプリの場合、iOSとAndroidの両方の設定を構成する必要があります。 " }, 
{ "title" : "ワークフローのアーティファクトを出荷するために公開する ", 
"url" : "展開/船での展開/shipで公開するためのアプリの構成.html#ワークフローのアーティファクトを出荷するために公開する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipで公開するためのアプリの構成 \/ ワークフローのアーティファクトを出荷するために公開する ", 
"snippet" : "ワークフローのアーティファクトを公開するということは、ワークフローの製品がShipで利用可能になることを意味します。たとえば、ワークフローがAPKを生成する場合、Shipを使用してそれを公開できます。デフォルトでは、正しいバージョンのワークフローが含まれている場合、すべてのワークフローが公開されます。 Bitrise.ioにデプロイします ステップ。それに満足している場合は、フィールドをそのままにしておきます。 ただし、ここにワークフローを追加すると、そのワークフローのみが公開されます。 ワークフローのアーティファクトをShipに公開するには： アプリの出荷ページに移動します。 クリック 設定...", 
"body" : "ワークフローのアーティファクトを公開するということは、ワークフローの製品がShipで利用可能になることを意味します。たとえば、ワークフローがAPKを生成する場合、Shipを使用してそれを公開できます。デフォルトでは、正しいバージョンのワークフローが含まれている場合、すべてのワークフローが公開されます。 Bitrise.ioにデプロイします ステップ。それに満足している場合は、フィールドをそのままにしておきます。 ただし、ここにワークフローを追加すると、そのワークフローのみが公開されます。 ワークフローのアーティファクトをShipに公開するには： アプリの出荷ページに移動します。 クリック 設定 右上隅にあります。 に移動します 全般的 タブ。 の中に 選択したワークフローからアーティファクトを公開して出荷する テキストボックスに、必要なすべてのワークフローを追加します。 アプリがクロスプラットフォームの場合、iOS用とAndroid用の2つのテキストボックスがあることに注意してください。異なるワークフロー名はコンマで区切ります（たとえば、 build, deploy, release_build_android ）。 ページの一番下までスクロールして、 保存する 。 " }, 
{ "title" : "コード署名ファイル ", 
"url" : "展開/船での展開/shipで公開するためのアプリの構成.html#コード署名ファイル", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipで公開するためのアプリの構成 \/ コード署名ファイル ", 
"snippet" : "アプリをオンラインストアに公開したり、テストデバイスにインストールしたりするには、コード署名ファイルが必要です。 に 設定 ページでは、さまざまなコード署名ファイルから選択できます。これらのファイル（iOSプロビジョニングプロファイルと証明書、Androidキーストアファイル、サービスアカウントJSONファイル）をBitriseアプリの[コード署名]タブにアップロードできます。 iOSコード署名。 Androidコード署名。...", 
"body" : "アプリをオンラインストアに公開したり、テストデバイスにインストールしたりするには、コード署名ファイルが必要です。 に 設定 ページでは、さまざまなコード署名ファイルから選択できます。これらのファイル（iOSプロビジョニングプロファイルと証明書、Androidキーストアファイル、サービスアカウントJSONファイル）をBitriseアプリの[コード署名]タブにアップロードできます。 iOSコード署名。 Androidコード署名。 " }, 
{ "title" : "Shipを使用してテストデバイスにアプリをインストールする ", 
"url" : "展開/船での展開/shipを使用してテストデバイスにアプリをインストールする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipを使用してテストデバイスにアプリをインストールする ", 
"snippet" : "パブリックインストールページオプションを使用するか、デバイス自体からShipにログインしてそこにインストールすることにより、Shipからアプリをインストールできます。 Shipを使用してデバイスにアプリをインストールするには、次の2つのオプションがあります。 パブリックインストールページのリンク、またはスキャンしたときにパブリックインストールページに移動するQRコードをすべてのテスターやその他の利害関係者に送信します。 デバイスからShipにログインし、そこから直接インストールします。...", 
"body" : "パブリックインストールページオプションを使用するか、デバイス自体からShipにログインしてそこにインストールすることにより、Shipからアプリをインストールできます。 Shipを使用してデバイスにアプリをインストールするには、次の2つのオプションがあります。 パブリックインストールページのリンク、またはスキャンしたときにパブリックインストールページに移動するQRコードをすべてのテスターやその他の利害関係者に送信します。 デバイスからShipにログインし、そこから直接インストールします。 " }, 
{ "title" : "Shipのパブリックインストールページへのアクセス ", 
"url" : "展開/船での展開/shipを使用してテストデバイスにアプリをインストールする.html#shipのパブリックインストールページへのアクセス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipを使用してテストデバイスにアプリをインストールする \/ Shipのパブリックインストールページへのアクセス ", 
"snippet" : "公開インストールページのリンクまたはQRコードを関係者に送信するには： アーティファクトタイプ パブリックインストールページは、すべてのタイプのアーティファクトで使用できるわけではありません。 iOSの場合、アプリがデバッグ、開発、またはアドホックタイプのプロビジョニングプロファイルで署名されている場合にのみ使用できます。 Androidの場合、ワークフローが分割されていないAPKを構築する場合、または分割されたユニバーサルAPKを構築する場合にのみ使用できます。 AABの場合、公開インストールページのリンクはありません。 あなたが持っていることを確認してください Bitrise.ioにデプロ...", 
"body" : "公開インストールページのリンクまたはQRコードを関係者に送信するには： アーティファクトタイプ パブリックインストールページは、すべてのタイプのアーティファクトで使用できるわけではありません。 iOSの場合、アプリがデバッグ、開発、またはアドホックタイプのプロビジョニングプロファイルで署名されている場合にのみ使用できます。 Androidの場合、ワークフローが分割されていないAPKを構築する場合、または分割されたユニバーサルAPKを構築する場合にのみ使用できます。 AABの場合、公開インストールページのリンクはありません。 あなたが持っていることを確認してください Bitrise.ioにデプロイします インストール可能なファイルを作成するワークフローにステップインします。 確認してください アプリの公開ページを有効にしますか？ ステップの入力はに設定されます true 。 ワークフローを公開する Bitriseでビルドを実行します。 ワークフローを公開する Bitriseでビルドを実行します。 を開きます 詳細 アプリが選択したビルドバージョンのページ。 右側に、[パブリックインストールページ]リンクまたはQRコードがあります。 必要なものをコピーして、関係者に送信します（たとえば、電子メールで）。 " }, 
{ "title" : "船から直接インストール ", 
"url" : "展開/船での展開/shipを使用してテストデバイスにアプリをインストールする.html#船から直接インストール", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipを使用してテストデバイスにアプリをインストールする \/ 船から直接インストール ", 
"snippet" : "船から直接登録済みのデバイスにアプリをインストールするには： Bitriseでアプリを作成します。 サポートされているデバイスからShipにログインします。 クリックしてください デバイス 特定のデバイスが登録されているかどうかを確認するためのタブ。読んだ デバイスの登録方法に関するガイド Bitriseで。 アプリの名前の下で、を見つけてクリックします インストール ボタン。...", 
"body" : "船から直接登録済みのデバイスにアプリをインストールするには： Bitriseでアプリを作成します。 サポートされているデバイスからShipにログインします。 クリックしてください デバイス 特定のデバイスが登録されているかどうかを確認するためのタブ。読んだ デバイスの登録方法に関するガイド Bitriseで。 アプリの名前の下で、を見つけてクリックします インストール ボタン。 " }, 
{ "title" : "Shipを使用してストアにアプリを公開する ", 
"url" : "展開/船での展開/shipを使用してストアにアプリを公開する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipを使用してストアにアプリを公開する ", 
"snippet" : "Shipは、AppleのAppStoreおよびGooglePlayへの公開をサポートしています。これらのストアのいずれかに正常に公開するには、Bitriseでアプリを構築し、Shipがコード署名ファイルにアクセスできることを確認し、Shipでアプリを正常に構成する必要があります。 Shipは、AppleのAppStoreおよびGooglePlayへの公開をサポートしています。これらのストアのいずれかに正常に公開するには、Bitriseでアプリを構築し、Shipがコード署名ファイルにアクセスできることを確認し、Shipでアプリを正常に構成する必要があります。...", 
"body" : "Shipは、AppleのAppStoreおよびGooglePlayへの公開をサポートしています。これらのストアのいずれかに正常に公開するには、Bitriseでアプリを構築し、Shipがコード署名ファイルにアクセスできることを確認し、Shipでアプリを正常に構成する必要があります。 Shipは、AppleのAppStoreおよびGooglePlayへの公開をサポートしています。これらのストアのいずれかに正常に公開するには、Bitriseでアプリを構築し、Shipがコード署名ファイルにアクセスできることを確認し、Shipでアプリを正常に構成する必要があります。 " }, 
{ "title" : "船でiOSアプリをAppStoreに公開する ", 
"url" : "展開/船での展開/shipを使用してストアにアプリを公開する.html#船でiosアプリをappstoreに公開する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipを使用してストアにアプリを公開する \/ 船でiOSアプリをAppStoreに公開する ", 
"snippet" : "Shipを使用してiOSアプリをAppStore Connect（旧称iTunes Connect）に公開できるようにするには、次のことを行う必要があります。 アプリをビルドします。 使用するプロビジョニングプロファイルとコード署名IDを選択します。 アプリ固有のパスワードを設定します。 Appleデベロッパアカウントの電子メールを設定します。 アプリのSKUを設定します。これは、内部追跡のためにアプリに付与する一意のIDです。顧客には表示されません。 異なるビルドステップでShipを使用する デフォルトでは、 iOS用のXcodeアーカイブとエクスポート 、 Gradleランナー 、 と A...", 
"body" : "Shipを使用してiOSアプリをAppStore Connect（旧称iTunes Connect）に公開できるようにするには、次のことを行う必要があります。 アプリをビルドします。 使用するプロビジョニングプロファイルとコード署名IDを選択します。 アプリ固有のパスワードを設定します。 Appleデベロッパアカウントの電子メールを設定します。 アプリのSKUを設定します。これは、内部追跡のためにアプリに付与する一意のIDです。顧客には表示されません。 異なるビルドステップでShipを使用する デフォルトでは、 iOS用のXcodeアーカイブとエクスポート 、 Gradleランナー 、 と Androidビルド Shipで自動的にサポートされます。 他のステップでアプリを構築したい場合は、そうすることができます-それはただ必要です 少し余分な構成 。 を構成したことを確認してください iOS用のXcodeアーカイブとエクスポート 正しくステップ： 配布方法 入力はに設定する必要があります アプリストア そしてそれはで構築されるべきです リリース 構成。 あなたが持っていることを確認してください Bitrise.ioにデプロイします ワークフローにステップインします。 アプリの[発送]ページを開き、[ 設定 右上隅にあります。 に移動します 全般的 タブ。 に移動します iOS設定 セクション。 公開 公開するIPAファイルを作成し、Bitriseでワークフローを実行するワークフロー。 の中に iOS設定 セクションで、使用するコード署名ファイルを選択します。 .ipaファイルの作成に使用したエクスポート方法に適したファイルを選択してください。たとえば、.ipaがを使用してエクスポートされた場合 app-store 方法として、App Storeプロビジョニングプロファイルと配布証明書（コード署名ID）を選択します。 を入力 AppleデベロッパアカウントのEメール そしてその アプリ固有のパスワード AppStoreに公開できるようにします。 を入力 アプリのSKU 。 に戻る 詳細 ページをクリックしてクリックします 公開 。 " }, 
{ "title" : "船でGooglePlayにAndroidアプリを公開する ", 
"url" : "展開/船での展開/shipを使用してストアにアプリを公開する.html#船でgoogleplayにandroidアプリを公開する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipを使用してストアにアプリを公開する \/ 船でGooglePlayにAndroidアプリを公開する ", 
"snippet" : "ShipのGooglePlay ConsoleへのAndroidアプリの公開を設定するには、次のことを行う必要があります。 AndroidキーストアファイルとサービスアカウントJSONファイルを選択します。 アプリのリリースに使用するトラックを設定します。 アプリの公開を構成した後は、これらのオプションの一部を変更する場合にのみ、毎回これらのオプションを設定する必要はありません。 異なるビルドステップでShipを使用する デフォルトでは、 iOS用のXcodeアーカイブとエクスポート 、 Gradleランナー 、 と Androidビルド Shipで自動的にサポートされます。 他のステップでア...", 
"body" : "ShipのGooglePlay ConsoleへのAndroidアプリの公開を設定するには、次のことを行う必要があります。 AndroidキーストアファイルとサービスアカウントJSONファイルを選択します。 アプリのリリースに使用するトラックを設定します。 アプリの公開を構成した後は、これらのオプションの一部を変更する場合にのみ、毎回これらのオプションを設定する必要はありません。 異なるビルドステップでShipを使用する デフォルトでは、 iOS用のXcodeアーカイブとエクスポート 、 Gradleランナー 、 と Androidビルド Shipで自動的にサポートされます。 他のステップでアプリを構築したい場合は、そうすることができます-それはただ必要です 少し余分な構成 。 アプリの[発送]ページを開き、[ 設定 右上隅にあります。 に移動します Androidの設定 セクション。 公開 公開するAPKを作成するワークフロー。 公開されたワークフローに次のいずれかが含まれていることを確認してください Androidビルド または Gradleランナー ステップ、そして Bitrise.ioにデプロイします ステップ。 公開されたワークフローを使用してアプリのリリースバージョンを作成します。 使用するステップに応じて、2つのオプションがあります。 確認してください Androidビルド ステップの 変異体 入力フィールドには次のものが含まれます release （例えば release また demoRelease ）。 確認してください Gradleランナー ステップの 実行するGradleタスク 入力フィールドには次のものが含まれます Release （例えば、 assembleRelease また assembleDemoRelease ）。 を入力 追跡 GooglePlayConsoleへの公開に使用します。 Androidアプリに複数のモジュールが含まれている場合は、下に正確なモジュールを入力してください モジュール 。 適切なキーストアファイルとサービスアカウントのJSONファイルを選択します。 に戻る バージョン履歴 ページを開き、公開するバージョンを選択します。アプリに複数のフレーバーがある場合は、適切なフレーバーをフィルタリングして、公開用に選択できます。 記入してください 詳細 ページをクリックしてクリックします 公開。 " }, 
{ "title" : "ステータスとログの公開 ", 
"url" : "展開/船での展開/shipを使用してストアにアプリを公開する.html#ステータスとログの公開", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ Shipを使用してストアにアプリを公開する \/ ステータスとログの公開 ", 
"snippet" : "クリックしたら 公開 Shipでは、構成された設定に従ってプロセスが開始されます。アクティブな公開プロセスのステータスは、 詳細 アプリのページ。 公開プロセスのログを表示するには、にアクセスしてください。 アクティビティ タブ。そこから、をクリックしてログをダウンロードできます ビルドログのダウンロード 公開に失敗した後のエラーのトラブルシューティング。...", 
"body" : "クリックしたら 公開 Shipでは、構成された設定に従ってプロセスが開始されます。アクティブな公開プロセスのステータスは、 詳細 アプリのページ。 公開プロセスのログを表示するには、にアクセスしてください。 アクティビティ タブ。そこから、をクリックしてログをダウンロードできます ビルドログのダウンロード 公開に失敗した後のエラーのトラブルシューティング。 " }, 
{ "title" : "クロスプラットフォームフレームワークで構築されたアプリにShipを使用する ", 
"url" : "展開/船での展開/クロスプラットフォームフレームワークで構築されたアプリにshipを使用する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ クロスプラットフォームフレームワークで構築されたアプリにShipを使用する ", 
"snippet" : "Bitrise でビルドする任意のバイナリに Ship を使用できます。Bitrise.io への展開ステップで見つけられるように、最終的に BITRISE_DEPLOY_DIR ディレクトリにあることを確認する必要があります。 デフォルトでは、Ship は Android ビルド、Gradle ランナー そしてその Xcode アーカイブ & iOS 用エクスポート 手順 .これらのステップの出力は、 Bitrise.io にデプロイする 出荷へのステップ。 ただし、 アプリ React Native や Flutter などのクロスプラットフォーム フレームワークで構築されている場合、これ...", 
"body" : "Bitrise でビルドする任意のバイナリに Ship を使用できます。Bitrise.io への展開ステップで見つけられるように、最終的に BITRISE_DEPLOY_DIR ディレクトリにあることを確認する必要があります。 デフォルトでは、Ship は Android ビルド、Gradle ランナー そしてその Xcode アーカイブ & iOS 用エクスポート 手順 .これらのステップの出力は、 Bitrise.io にデプロイする 出荷へのステップ。 ただし、 アプリ React Native や Flutter などのクロスプラットフォーム フレームワークで構築されている場合、これらのステップを ワークフロー .ただし、心配する必要はありません。デフォルトでサポートされていないステップを使用してアプリをビルドし、Ship でデプロイすることもできます。必要なのは、適切なファイルが適切な場所にあることを確認することだけです。 " }, 
{ "title" : "クロスプラットフォームフレームワークで構築されたiOSアプリの公開 ", 
"url" : "展開/船での展開/クロスプラットフォームフレームワークで構築されたアプリにshipを使用する.html#クロスプラットフォームフレームワークで構築されたiosアプリの公開", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ クロスプラットフォームフレームワークで構築されたアプリにShipを使用する \/ クロスプラットフォームフレームワークで構築されたiOSアプリの公開 ", 
"snippet" : "Shipを使用して、FlutterやReact Nativeなどで構築されたAndroidアプリを公開できます。ただし、 iOS用のXcodeアーカイブとエクスポート ステップ。 NS Bitrise.ioにデプロイします ステップは探します .xcarchive.zip iOSアプリの場合、Shipにエクスポートするファイル。使用したくない場合 iOS用のXcodeアーカイブとエクスポート ステップ、あなたはただそれを確認する必要があります： 公開されたワークフローには、をエクスポートするステップがあります .xcarchive.zip アプリのファイル。つまり、使用するステップでは、Xco...", 
"body" : "Shipを使用して、FlutterやReact Nativeなどで構築されたAndroidアプリを公開できます。ただし、 iOS用のXcodeアーカイブとエクスポート ステップ。 NS Bitrise.ioにデプロイします ステップは探します .xcarchive.zip iOSアプリの場合、Shipにエクスポートするファイル。使用したくない場合 iOS用のXcodeアーカイブとエクスポート ステップ、あなたはただそれを確認する必要があります： 公開されたワークフローには、をエクスポートするステップがあります .xcarchive.zip アプリのファイル。つまり、使用するステップでは、Xcodeアーカイブを作成し、それをzipファイルにパッケージ化する必要があります。 このステップでは、 .xcarchive.zip ファイルに BITRISE_DEPLOY_DIR ディレクトリ。 " }, 
{ "title" : "クロスプラットフォームフレームワークで構築されたAndroidアプリの公開 ", 
"url" : "展開/船での展開/クロスプラットフォームフレームワークで構築されたアプリにshipを使用する.html#クロスプラットフォームフレームワークで構築されたandroidアプリの公開", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ クロスプラットフォームフレームワークで構築されたアプリにShipを使用する \/ クロスプラットフォームフレームワークで構築されたAndroidアプリの公開 ", 
"snippet" : "Shipを使用して、FlutterやReact Nativeなどで構築されたAndroidアプリを公開できます。ただし、 Androidビルド また Gradleランナー ステップ。 NS Bitrise.ioにデプロイします ステップは、APKまたはAABファイルを検索します BITRISE_DEPLOY_DIR ディレクトリ。 使用したくない場合 Androidビルド または Gradleランナー 手順、次のことを確認する必要があります。 公開されたワークフローには、アプリのAPKファイルまたはAABファイルをエクスポートするステップがあります。 このステップでは、APKまたはAABファイ...", 
"body" : "Shipを使用して、FlutterやReact Nativeなどで構築されたAndroidアプリを公開できます。ただし、 Androidビルド また Gradleランナー ステップ。 NS Bitrise.ioにデプロイします ステップは、APKまたはAABファイルを検索します BITRISE_DEPLOY_DIR ディレクトリ。 使用したくない場合 Androidビルド または Gradleランナー 手順、次のことを確認する必要があります。 公開されたワークフローには、アプリのAPKファイルまたはAABファイルをエクスポートするステップがあります。 このステップでは、APKまたはAABファイルをにエクスポートします BITRISE_DEPLOY_DIR ディレクトリ。 " }, 
{ "title" : "船内のアプリの詳細 ", 
"url" : "展開/船での展開/船内のアプリの詳細.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ 船内のアプリの詳細 ", 
"snippet" : "Shipのアプリの詳細ページで、アプリに関する最も重要な情報を更新して、アプリを公開するオンラインストアですべての情報を利用できるようにすることができます。 アプリの目的 詳細 ページは、アプリに関する最も重要な情報を更新するためのものです。たとえば、選択したオンラインストアにすべての関連情報が表示されるようにすることができます。 詳細は次のとおりです。 アプリの説明。 サポートされているさまざまなデバイスによって配置された、アプリのスクリーンショットと機能グラフィック。 バージョン番号、サイズ、バージョンコード、SDKバージョンなどのメタデータ。正確なパラメーターは、アプリのタイプによって異...", 
"body" : "Shipのアプリの詳細ページで、アプリに関する最も重要な情報を更新して、アプリを公開するオンラインストアですべての情報を利用できるようにすることができます。 アプリの目的 詳細 ページは、アプリに関する最も重要な情報を更新するためのものです。たとえば、選択したオンラインストアにすべての関連情報が表示されるようにすることができます。 詳細は次のとおりです。 アプリの説明。 サポートされているさまざまなデバイスによって配置された、アプリのスクリーンショットと機能グラフィック。 バージョン番号、サイズ、バージョンコード、SDKバージョンなどのメタデータ。正確なパラメーターは、アプリのタイプによって異なります。これは、によって自動的にShipにエクスポートされます。 Bitrise.ioにデプロイします ステップ。 " }, 
{ "title" : "スクリーンショットまたは機能グラフィックの追加 ", 
"url" : "展開/船での展開/船内のアプリの詳細.html#スクリーンショットまたは機能グラフィックの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ 船内のアプリの詳細 \/ スクリーンショットまたは機能グラフィックの追加 ", 
"snippet" : "公開するアプリのスクリーンショットを追加できます。アプリの1つのビルドバージョンにスクリーンショットまたはグラフィックを追加すると、それ以降のすべてのバージョンに自動的に追加されます。別のスクリーンショットを表示したい場合は、それを変更できます。それ以外の場合は、そのままにしておくことができます。 スクリーンショットまたは機能グラフィックをアプリの詳細ページに追加するには： を開きます 詳細 アプリの選択したビルドバージョンの出荷のページ。 に移動 スクリーンショット また フィーチャーグラフィック 、アップロードする内容によって異なります。 ファイルをドラッグアンドドロップするか、クリックし...", 
"body" : "公開するアプリのスクリーンショットを追加できます。アプリの1つのビルドバージョンにスクリーンショットまたはグラフィックを追加すると、それ以降のすべてのバージョンに自動的に追加されます。別のスクリーンショットを表示したい場合は、それを変更できます。それ以外の場合は、そのままにしておくことができます。 スクリーンショットまたは機能グラフィックをアプリの詳細ページに追加するには： を開きます 詳細 アプリの選択したビルドバージョンの出荷のページ。 に移動 スクリーンショット また フィーチャーグラフィック 、アップロードする内容によって異なります。 ファイルをドラッグアンドドロップするか、クリックします ブラウズファイル アップロードしたいものを選択します。 完了したら、をクリックします 保存する 右上隅にあります。 " }, 
{ "title" : "アプリの説明を更新する ", 
"url" : "展開/船での展開/船内のアプリの詳細.html#アプリの説明を更新する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ 船内のアプリの詳細 \/ アプリの説明を更新する ", 
"snippet" : "アプリの説明やその他すべてのテキストの詳細を同じ方法で更新できます。使用できるテキストフィールドの種類は、アプリの種類によって異なります。 を開きます 詳細 アプリの選択したビルドバージョンの出荷のページ。 編集するフィールドに移動し、コンテンツフィールドをクリックします。 コンテンツを編集します。 クリック 保存する [詳細]タブの右上にあります。...", 
"body" : "アプリの説明やその他すべてのテキストの詳細を同じ方法で更新できます。使用できるテキストフィールドの種類は、アプリの種類によって異なります。 を開きます 詳細 アプリの選択したビルドバージョンの出荷のページ。 編集するフィールドに移動し、コンテンツフィールドをクリックします。 コンテンツを編集します。 クリック 保存する [詳細]タブの右上にあります。 " }, 
{ "title" : "出荷通知 ", 
"url" : "展開/船での展開/出荷通知.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ 出荷通知 ", 
"snippet" : "Shipは、新しいビルドバージョンが利用可能になる、公開が成功する、公開が失敗するという3つの異なるイベントに関する電子メールを送信できます。 Shipは、次の3つの異なるイベントに関する電子メールを送信できます。 アプリの新しいビルドバージョンがShipで利用可能です。 Shipはアプリを正常に公開しました。 船はアプリの公開に失敗しました。 これらの通知は、任意の数の異なる電子メールアドレスに送信できます。新しい電子メールアドレスが通知リストに追加されると、Shipは確認電子メールをそのアドレスに送信します。確認後、通知は機能するはずです。...", 
"body" : "Shipは、新しいビルドバージョンが利用可能になる、公開が成功する、公開が失敗するという3つの異なるイベントに関する電子メールを送信できます。 Shipは、次の3つの異なるイベントに関する電子メールを送信できます。 アプリの新しいビルドバージョンがShipで利用可能です。 Shipはアプリを正常に公開しました。 船はアプリの公開に失敗しました。 これらの通知は、任意の数の異なる電子メールアドレスに送信できます。新しい電子メールアドレスが通知リストに追加されると、Shipは確認電子メールをそのアドレスに送信します。確認後、通知は機能するはずです。 " }, 
{ "title" : "Shipに新しいメールアドレスを追加する ", 
"url" : "展開/船での展開/出荷通知.html#shipに新しいメールアドレスを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ 出荷通知 \/ Shipに新しいメールアドレスを追加する ", 
"snippet" : "アプリの通知リストに新しいメールアドレスを追加するには： アプリのShipページを開きます。 クリック 設定。 に移動します 通知 タブ。 下の入力フィールド 電子メール通知 、メールアドレスを入力します。 クリック 追加 。 住所は以下のリストに表示されます。 保留中 そのステータスとして。メールがアドレスに送信されます：受信者はクリックする必要があります 通知を確認する 通知の受信を開始するには、電子メールで。...", 
"body" : "アプリの通知リストに新しいメールアドレスを追加するには： アプリのShipページを開きます。 クリック 設定。 に移動します 通知 タブ。 下の入力フィールド 電子メール通知 、メールアドレスを入力します。 クリック 追加 。 住所は以下のリストに表示されます。 保留中 そのステータスとして。メールがアドレスに送信されます：受信者はクリックする必要があります 通知を確認する 通知の受信を開始するには、電子メールで。 " }, 
{ "title" : "Shipでの通知の構成 ", 
"url" : "展開/船での展開/出荷通知.html#shipでの通知の構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ 船での展開 \/ 出荷通知 \/ Shipでの通知の構成 ", 
"snippet" : "さまざまな人に通知する船のイベントを選択できます。たとえば、問題が発生したときに煩わされたくない場合にのみ、公開イベントの失敗に関する通知を送信することができます。そしてもちろん、さまざまな電子メールアドレスにさまざまな通知を送信できます。 アプリのShipページを開きます。 クリック 設定。 に移動します 通知 タブ。 さまざまなイベントタイプの下でトグルを使用します。 打つ 保存する すべての通知が設定されたら。...", 
"body" : "さまざまな人に通知する船のイベントを選択できます。たとえば、問題が発生したときに煩わされたくない場合にのみ、公開イベントの失敗に関する通知を送信することができます。そしてもちろん、さまざまな電子メールアドレスにさまざまな通知を送信できます。 アプリのShipページを開きます。 クリック 設定。 に移動します 通知 タブ。 さまざまなイベントタイプの下でトグルを使用します。 打つ 保存する すべての通知が設定されたら。 " }, 
{ "title" : "Appliveryへのアプリのデプロイ ", 
"url" : "展開/appliveryへのアプリのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Appliveryへのアプリのデプロイ ", 
"snippet" : "Appliveryは、iOSおよびAndroid向けのモバイルアプリ配信プラットフォームであり、使いやすいエクスペリエンスに重点を置いて、テスターと従業員の両方にアプリ配信を簡素化する強力なモバイルアプリ管理および配信システムを提供します。 Applivery は、iOSおよびAndroid向けのモバイルアプリ配信プラットフォームであり、使いやすいエクスペリエンスに重点を置いて、テスターと従業員の両方にアプリ配信を簡素化する強力なモバイルアプリ管理および配信システムを提供します。 Appliveryには、開発中のアプリと本番環境に対応したアプリをより適切に管理するための多くの機能があり、開発を...", 
"body" : "Appliveryは、iOSおよびAndroid向けのモバイルアプリ配信プラットフォームであり、使いやすいエクスペリエンスに重点を置いて、テスターと従業員の両方にアプリ配信を簡素化する強力なモバイルアプリ管理および配信システムを提供します。 Applivery は、iOSおよびAndroid向けのモバイルアプリ配信プラットフォームであり、使いやすいエクスペリエンスに重点を置いて、テスターと従業員の両方にアプリ配信を簡素化する強力なモバイルアプリ管理および配信システムを提供します。 Appliveryには、開発中のアプリと本番環境に対応したアプリをより適切に管理するための多くの機能があり、開発をスピードアップし、より良いフィードバックを取得し、より良いアプリケーションを提供するのに役立ちます。 機能の一部は次のとおりです。 技術者以外のユーザー向けのシームレスなユーザーエクスペリエンスを備えた、シングルまたはマルチアプリでカスタマイズされたAppStore。 SSO、未登録ユーザー、パスワードで保護されたアプリ、リストにないアプリなど、複数のセキュリティ構成を備えたマルチトラックで完全にカスタマイズされたアプリ配布。 自動および強制的なアプリ内更新。 フィードバックとバグレポート。 Bitriseと組み合わせると、テストと構築から配信とフィードバックまで、開発ライフサイクル全体をカバーできます。 " }, 
{ "title" : "アプリをAppliveryにデプロイする ", 
"url" : "展開/appliveryへのアプリのデプロイ.html#アプリをappliveryにデプロイする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Appliveryへのアプリのデプロイ \/ アプリをAppliveryにデプロイする ", 
"snippet" : "追加します Applivery iOS Deploy または Applivery Android Deploy ワークフローに進みます。アプリをビルドするステップの後に必ずステップを追加してください。 Appliveryアプリトークンを取得して、BitriseアプリをAppliveryアプリにリンクします。 アプリトークンを取得する方法の詳細を読む 。 Bitriseでアプリを開き、 ワークフロー タブをクリックしてワークフローエディタを開きます。 に移動します 秘密 タブ。 クリック 新しく追加する とタイプ APPLIVERY_APP_TOKEN キー入力フィールドに入力します。 Appl...", 
"body" : "追加します Applivery iOS Deploy または Applivery Android Deploy ワークフローに進みます。アプリをビルドするステップの後に必ずステップを追加してください。 Appliveryアプリトークンを取得して、BitriseアプリをAppliveryアプリにリンクします。 アプリトークンを取得する方法の詳細を読む 。 Bitriseでアプリを開き、 ワークフロー タブをクリックしてワークフローエディタを開きます。 に移動します 秘密 タブ。 クリック 新しく追加する とタイプ APPLIVERY_APP_TOKEN キー入力フィールドに入力します。 Applivery App Tokenを値入力フィールドに貼り付けて、[ 保存する 。 " }, 
{ "title" : "Appliveryステップの構成 ", 
"url" : "展開/appliveryへのアプリのデプロイ.html#appliveryステップの構成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Appliveryへのアプリのデプロイ \/ Appliveryステップの構成 ", 
"snippet" : "より良く、より深く統合するためにカスタマイズできる多くのオプションのパラメーターがあります。 入力変数 タイプ 説明 ファイルパス ファイル アプリのバイナリファイル。デフォルトでは、$ BITRISE_IPA_PATHまたは$ BITRISE_APK_PATHを取得します。 アプリトークン 弦 Appliveryアプリトークン。デフォルトでは、$ APPLIVERY_APP_TOKENシークレット変数を取得します。 変更ログ 弦 デプロイに添付された追加のビルド\/リリースノートまたは変更ログ。 共同編集者に通知しますか？ ブール値 プロジェクトの共同編集者にメールで自動的に通知します。 従業...", 
"body" : "より良く、より深く統合するためにカスタマイズできる多くのオプションのパラメーターがあります。 入力変数 タイプ 説明 ファイルパス ファイル アプリのバイナリファイル。デフォルトでは、$ BITRISE_IPA_PATHまたは$ BITRISE_APK_PATHを取得します。 アプリトークン 弦 Appliveryアプリトークン。デフォルトでは、$ APPLIVERY_APP_TOKENシークレット変数を取得します。 変更ログ 弦 デプロイに添付された追加のビルド\/リリースノートまたは変更ログ。 共同編集者に通知しますか？ ブール値 プロジェクトの共同編集者にメールで自動的に通知します。 従業員に通知しますか？ ブール値 プロジェクトの従業員にメールで自動的に通知します。 通知メッセージ 弦 電子メール通知と一緒に送信される通知メッセージ。 タグ 弦 ビルドまたはマルチトラックアプリ配布を簡単に識別するためのタグのコンマ区切りリスト バージョン名 弦 ビルドをより適切に識別するための人間が読めるバージョン名。 証明書をアップロードする ブール値 Bitrise からコード署名ファイルをダウンロードします コード署名とファイル タブを開き、Applivery にアップロードします。 " }, 
{ "title" : "Appliveryによる配布 ", 
"url" : "展開/appliveryへのアプリのデプロイ.html#appliveryによる配布", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Appliveryへのアプリのデプロイ \/ Appliveryによる配布 ", 
"snippet" : "Appliveryは、カスタマイズされたApp Store（パブリックまたはプライベート）から配布ページ（パブリック、プライベート、非公開、またはパスワードで保護された共有可能なインストールリンク）へのアプリ配布のための複数の異なる方法を提供します。また、GitHubブランチ、タグ、カスタマイズされたラベルなど、Bitriseワークフローから収集された情報に基づいてマルチトラックアプリの配信を可能にします。...", 
"body" : "Appliveryは、カスタマイズされたApp Store（パブリックまたはプライベート）から配布ページ（パブリック、プライベート、非公開、またはパスワードで保護された共有可能なインストールリンク）へのアプリ配布のための複数の異なる方法を提供します。また、GitHubブランチ、タグ、カスタマイズされたラベルなど、Bitriseワークフローから収集された情報に基づいてマルチトラックアプリの配信を可能にします。 " }, 
{ "title" : "BitriseからDeployGateへのアプリのデプロイ ", 
"url" : "展開/bitriseからdeploygateへのアプリのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ BitriseからDeployGateへのアプリのデプロイ ", 
"snippet" : "DeployGateは、iOSおよびAndroid向けのモバイルアプリ配信プラットフォームであり、開発中のiOS \/ Androidアプリを、開発チーム、メンバー、従業員、組織内のQAテストチーム、または社外のテスターに配信します。 DeployGate は、iOSおよびAndroid向けのモバイルアプリ配布プラットフォームであり、開発中のiOS \/ Androidアプリを、開発チーム、メンバー、従業員、組織内のQAテストチーム、または社外のテスターに配信します。 DeployGateには、QAテストやベータテスターのフィードバックによるアプリの改善など、アプリ開発サイクルを加速するための多く...", 
"body" : "DeployGateは、iOSおよびAndroid向けのモバイルアプリ配信プラットフォームであり、開発中のiOS \/ Androidアプリを、開発チーム、メンバー、従業員、組織内のQAテストチーム、または社外のテスターに配信します。 DeployGate は、iOSおよびAndroid向けのモバイルアプリ配布プラットフォームであり、開発中のiOS \/ Androidアプリを、開発チーム、メンバー、従業員、組織内のQAテストチーム、または社外のテスターに配信します。 DeployGateには、QAテストやベータテスターのフィードバックによるアプリの改善など、アプリ開発サイクルを加速するための多くの機能があります。 DeployGateは以下を提供します： テスターのアカウントを必要とせずに、自動バージョン管理を備えたリアルタイムのアプリ配布 きめ細かいアクセス制御による柔軟なユーザーアカウント管理 Gitのようなマルチトラック配信により、同じアプリの個別のバージョン\/ユーザー\/デバイス管理が可能になります DeployGateとBitriseを使用すると、チームのために完全に自動化された社内ドッグフーディング環境をすばやく構築できます。詳細については、次のWebサイトをご覧ください。 DeployGateの機能 。 アップロードするには アプリ DeployGate に、 DeployGate Upload ステップ あなたのビットライズに ワークフロー . このステップは、アップロードされるアプリのバイナリをビルドするステップの後に追加する必要があります。以下のようにいくつかの必須パラメータを設定する必要があります。 入力変数 説明 API Key アカウント設定からアップロードユーザーのDeployGateAPIキーを設定します。 アプリを組織アカウントとしてアップロードする場合は、組織のAPIキーを使用してください。アップロードアカウントは、アクティビティのタイムラインに表示されます。 Owner Name DeployGateでのアプリ所有者のアカウント名。 ユーザー名または組織名を使用できます。 App file path アップロードするアプリのバイナリファイル（IPA \/ APK）。 デフォルト設定には、Androidの場合は$ BITRISE_APK_PATHを使用し、iOSの場合は$ BITRISE_IPA_PATHを使用します 以下のように、高度な機能を使用するためのオプションの変数を設定することもできます。 入力変数 説明 Short Message DeployGateに表示されるアップデートの概要。 コミットメッセージ、プルリクエストのタイトル、またはビルドを手動でトリガーしたときに指定したメッセージを使用する場合は、$ BITRISE_GIT_MESSAGEを使用できます。 Distribution Key 同じアプリ内の異なるバージョンのアプリバイナリに対して、複数のパブリックインストールリンク（配布ページと呼びます）を作成できます。 配布ページのハッシュを指定することにより、その配布ページは同時に更新されます。 https:\/\/deploygate.com\/distributions\/xxxxのような分散ページのURLの「xxxx」部分 Distribution Name 更新された配布ページの名前を指定します。何も存在しない場合は、新しい配布ページが作成されます。考えられる使用法には、Gitブランチ名ごとに配布ページを作成することが含まれます。 （たとえば、$ BITRISE_GIT_BRANCH） Release Note 配布ページの新しいリリースのメッセージ。このメッセージは、配布ページのテスターに通知されます Disable Notify(iOS Only) iOSプラットフォームにはDeployGateクライアントアプリはありません。デフォルトでは、リリースの更新には電子メール通知を使用します。電子メール通知が必要ない場合は、このオプションをtrueに設定してください これらのオプションはに基づいています DeployGate API 。詳細については、次のリファレンスをお読みください。 DeployGate.com 。 あなたはDeployGateを使うことができます 配布ページ （共有可能なリンク）アプリの特定のバージョンのアプリインストール用のランディングページを生成する機能。 アプリをDeployGateにアップロードすると、システムは自動的に連番を割り当てます（これを呼んでいます）。 **Revision Number** ）アップロードされたビルドごと。配布ページでは、テスターのグループごとに配布するアプリの特定のリビジョンを選択できます。この機能は、QA、ドッグフーディング、テストマーケティングなど、さまざまな目的でアプリを複数のテスターグループに配布する場合に便利です。 DeployGate Upload Step で Bitrise からアプリをアップロードする際にも配布ページを生成することができます。上記のオプション変数を参照してください。 " }, 
{ "title" : "アプリをAppaloosaにデプロイする ", 
"url" : "展開/アプリをappaloosaにデプロイする.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ アプリをAppaloosaにデプロイする ", 
"snippet" : "Appaloosaは、モバイルアプリを非公開で配布し、フィードバックを収集し、展開の効率を分析するのに役立ちます。専用のステップを使用して、Bitriseを使用してAppaloosaにデプロイします。 あなたはしたいですか ベータテスト と 配備 あなたのアプリを1人または数千人のユーザーに？ アパルーサ モバイルアプリを非公開で配布し、フィードバックを収集し、展開の効率を分析するのに役立ちます。 見てみな！ Appaloosaは、シンプルで安全なエンタープライズAppStoreです。モバイルチームとデジタルチームがアプリを非公開で構築、テスト、デプロイするのに役立ちます。 Android、i...", 
"body" : "Appaloosaは、モバイルアプリを非公開で配布し、フィードバックを収集し、展開の効率を分析するのに役立ちます。専用のステップを使用して、Bitriseを使用してAppaloosaにデプロイします。 あなたはしたいですか ベータテスト と 配備 あなたのアプリを1人または数千人のユーザーに？ アパルーサ モバイルアプリを非公開で配布し、フィードバックを収集し、展開の効率を分析するのに役立ちます。 見てみな！ Appaloosaは、シンプルで安全なエンタープライズAppStoreです。モバイルチームとデジタルチームがアプリを非公開で構築、テスト、デプロイするのに役立ちます。 Android、iOS、WindowsPhoneのアプリをすべて同じ場所で管理できます。 Appaloosaは、ユーザーのエンゲージメントを高めるためのネイティブアプリストアも提供します。アプリが更新されるたびにプッシュ通知を受け取り、モバイルアプリの最新バージョンをテストして使用できるようになります。 Appaloosaは、ダウンロードと使用状況の統計、およびユーザーからのフィードバックと評価を使用して、展開の効率に関する優れた洞察も提供します。 LDAP、OAuth、SAML、Active Directoryの統合、およびRESTfulAPIを備えた企業向けの準備が整っています。 連絡する 詳細については。さらに、モバイルアプリは、ユーザーのグループをターゲットにすることも、すべての共同編集者に配布することもできます。 Appaloosaにアプリをデプロイするには、 アパルーサ アプリのワークフローに進みます。 Appaloosaのアカウントをまだお持ちでない場合は、外出先で作成されます。 として 登録ユーザー あなたは単にあなたが必要です ストアID と APIキー 。 として 未登録ユーザー 、 NS 電子メールアドレス 十分です。 オプションで、 説明 、 スクリーンショット URL（最大5）、および登録されている場合は グループID 。 BitriseとAppaloosaを使用すると、モバイルアプリの開発に集中でき、残りはGoogleが処理します。 " }, 
{ "title" : "Bitriseを使用したTestFairyへのデプロイ ", 
"url" : "展開/bitriseを使用したtestfairyへのデプロイ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 展開 \/ Bitriseを使用したTestFairyへのデプロイ ", 
"snippet" : "TestFairyは、アプリに関する多くの洞察を提供するデプロイメントサービスです。専用のステップを使用して、Bitriseを使用してTestFairyにデプロイできます。 アプリケーションに関する多くの洞察も提供するデプロイメントサービスを探している場合は、 TestFairy チェックアウトするのに最適なサービスです。 群衆の中でアプリをテストするとき、正確に何がテストされ、何がクライアント側で正確に失敗したのかがわかりません。 TestFairyは、CPU、メモリ、GPS、ネットワーク、ログ、クラッシュレポートなどの詳細な内部メトリックを含む、モバイルデバイスで発生したすべてのビデオを提...", 
"body" : "TestFairyは、アプリに関する多くの洞察を提供するデプロイメントサービスです。専用のステップを使用して、Bitriseを使用してTestFairyにデプロイできます。 アプリケーションに関する多くの洞察も提供するデプロイメントサービスを探している場合は、 TestFairy チェックアウトするのに最適なサービスです。 群衆の中でアプリをテストするとき、正確に何がテストされ、何がクライアント側で正確に失敗したのかがわかりません。 TestFairyは、CPU、メモリ、GPS、ネットワーク、ログ、クラッシュレポートなどの詳細な内部メトリックを含む、モバイルデバイスで発生したすべてのビデオを提供することにより、この問題を解決します。 iOSでこれらの洞察を得るには、次のことを行う必要があります。 iOSSDKをアプリに統合する 。 デプロイするには アプリ TestFairy プラットフォームでは、単に追加する必要があります テストフェアリー ステップ あなたのアプリの ワークフロー （の上 bitrise.io ）。 追加する必要がある唯一の必要なパラメーターは、TestFairyのAPIキーです。それを取得するには、に移動する必要があります アカウント設定 TestFairyで、APIキーメニューの下にあるキーを見つけます。 電子メール通知と自動更新 メール通知を有効または無効にして、通知するテスター グループを設定することもできます。ステップで自動更新を有効にすることで、ユーザーが常に最新のビルドにアップグレードできるようにするオプションがあり、ビデオの録画を開始してその長さを設定することもできます。 他に何もする必要はありません。すばらしいアプリで作業するだけで、コードを更新するたびにアプリがTestFairyに自動的にデプロイされるようになります。 " }, 
{ "title" : "インサイトを構築する ", 
"url" : "インサイトを構築する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する ", 
"snippet" : "Build Insightsは、Bitriseビルドのパフォーマンスの詳細を示すメトリックを追跡できる監視ツールです。 Build Insights は、Bitrise ビルドのパフォーマンスを詳細に示すメトリクスを追跡できる監視ツールです。指標を追跡する アプリ -、 ワークフロー -、 と ステップ -level し、データを使用してビルドを最適化します。インサイト ツールでは、次の 3 つの主要な領域をターゲットにしています。 安定： ビルドに最も大きな影響を与えるエラーはどれですか？ 速度： ビルドの速度を向上させるために、どの領域に焦点を当てるべきですか？ 使用法： ビルドで最も時間...", 
"body" : "Build Insightsは、Bitriseビルドのパフォーマンスの詳細を示すメトリックを追跡できる監視ツールです。 Build Insights は、Bitrise ビルドのパフォーマンスを詳細に示すメトリクスを追跡できる監視ツールです。指標を追跡する アプリ -、 ワークフロー -、 と ステップ -level し、データを使用してビルドを最適化します。インサイト ツールでは、次の 3 つの主要な領域をターゲットにしています。 安定： ビルドに最も大きな影響を与えるエラーはどれですか？ 速度： ビルドの速度を向上させるために、どの領域に焦点を当てるべきですか？ 使用法： ビルドで最も時間がかかるステップとワークフローはどれですか？ " }, 
{ "title" : "BuildInsightsの仕組み ", 
"url" : "インサイトを構築する.html#buildinsightsの仕組み", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ BuildInsightsの仕組み ", 
"snippet" : "毎日 ワークスペース 独自の Build Insights インスタンスがあります。 Insights は、そのワークスペースに属するすべてのアプリの指標を追跡します。アプリごとに、次の 3 種類の主要な指標を表示できます。 ビルドの統計：アプリのページで、ワークフローとステップの詳細データなど、アプリのビルドの集計指標を確認できます。 テスト統計：個々のテスト実行に関するデータを含む、アプリのすべてのテストケースの詳細なメトリックを確認します。 消費されたクレジット: 各アプリ、ビルド、またはワークフローに消費されたクレジットの量。 You can create personalized d...", 
"body" : "毎日 ワークスペース 独自の Build Insights インスタンスがあります。 Insights は、そのワークスペースに属するすべてのアプリの指標を追跡します。アプリごとに、次の 3 種類の主要な指標を表示できます。 ビルドの統計：アプリのページで、ワークフローとステップの詳細データなど、アプリのビルドの集計指標を確認できます。 テスト統計：個々のテスト実行に関するデータを含む、アプリのすべてのテストケースの詳細なメトリックを確認します。 消費されたクレジット: 各アプリ、ビルド、またはワークフローに消費されたクレジットの量。 You can create personalized dashboards to categorize charts and view them in one place. Insights は、ボトルネックの追跡にも役立ちます。どのワークフローとテストが最も時間がかかり、クレジットのコストが最も高いかを示します。 " }, 
{ "title" : "インサイトの使用を開始する ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する ", 
"snippet" : "Insights の [概要] ページには、アプリの CI\/CD の正常性を確認するための集計メトリックとアプリ レベルのメトリックの両方が表示されます。グラフ間で同じ時点の値を比較し、すぐに注意を払う必要があるマイナスの傾向があるかどうかをすばやく評価します。 Insights は、すべてのアプリのパフォーマンスを常に追跡します。 ワークスペース .すべての集約されたビルドデータを取得できます アプリ 、各アプリの詳細な指標にもアクセスできます。 Insights では、ボトルネックを表示することもできます。最も時間のかかる、または最も多くのクレジットを消費するワークフローとテストが表示され...", 
"body" : "Insights の [概要] ページには、アプリの CI\/CD の正常性を確認するための集計メトリックとアプリ レベルのメトリックの両方が表示されます。グラフ間で同じ時点の値を比較し、すぐに注意を払う必要があるマイナスの傾向があるかどうかをすばやく評価します。 Insights は、すべてのアプリのパフォーマンスを常に追跡します。 ワークスペース .すべての集約されたビルドデータを取得できます アプリ 、各アプリの詳細な指標にもアクセスできます。 Insights では、ボトルネックを表示することもできます。最も時間のかかる、または最も多くのクレジットを消費するワークフローとテストが表示されます。 ワークスペースのインサイト ページにアクセスするには: Bitriseアカウントにログインします。 右上隅にあるアカウントセレクタのドロップダウンメニューを開き、ワークスペースを選択します。 ヘッダーで、 インサイト .これにより、 概要 選択したワークスペースのページ。 " }, 
{ "title" : "概要ページ ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#概要ページ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ 概要ページ ", 
"snippet" : "上で 概要 、選択したワークスペースの集約されたビルド データを表示できます。集計されたビルド データとアプリ レベルのビルド データの両方をグラフの形式で表示できます。 選択した時間枠 . ワークスペースはいつでも切り替えることができます。右上隅にあるアカウントセレクタのドロップダウンメニューを開き、ワークスペースを選択します。...", 
"body" : "上で 概要 、選択したワークスペースの集約されたビルド データを表示できます。集計されたビルド データとアプリ レベルのビルド データの両方をグラフの形式で表示できます。 選択した時間枠 . ワークスペースはいつでも切り替えることができます。右上隅にあるアカウントセレクタのドロップダウンメニューを開き、ワークスペースを選択します。 " }, 
{ "title" : "ビルド メトリクスへのアクセス ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#ビルド-メトリクスへのアクセス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ ビルド メトリクスへのアクセス ", 
"snippet" : "ワークスペースまたは特定のアプリの詳細なビルド メトリックにアクセスするには、次の 2 つの方法があります。 ビルド をクリックするか、 概要 ワークスペースのページ。 2 番目の方法を使用します。 を開きます 概要 ワークスペースのページ。 必要なメトリックを見つけます。例えば、 ビルド失敗率 . クリック 詳細を見る . ワークスペースに複数のアプリがある場合、[詳細] ページには、デフォルトでワークスペースのすべてのアプリの集計された指標が表示されます。 一番左のドロップダウン メニューから、必要なアプリを選択します。 必要に応じて、フィルターを使用して特定のデータを表示することで、より...", 
"body" : "ワークスペースまたは特定のアプリの詳細なビルド メトリックにアクセスするには、次の 2 つの方法があります。 ビルド をクリックするか、 概要 ワークスペースのページ。 2 番目の方法を使用します。 を開きます 概要 ワークスペースのページ。 必要なメトリックを見つけます。例えば、 ビルド失敗率 . クリック 詳細を見る . ワークスペースに複数のアプリがある場合、[詳細] ページには、デフォルトでワークスペースのすべてのアプリの集計された指標が表示されます。 一番左のドロップダウン メニューから、必要なアプリを選択します。 必要に応じて、フィルターを使用して特定のデータを表示することで、より深く掘り下げることができます。以下をフィルタリングできます。 ワークフロー: アプリの特定のワークフローで実行されたビルドのメトリック。 ブランチ: 特定のブランチのビルドのメトリック。 マシン タイプ: 特定のマシン タイプで実行されたビルドの指標。 スタック: 特定のスタックで実行されたビルドのメトリック。 下にスクロールして、実行したステップを含む個々のビルドとそのデータを確認します。 利用可能なビルド メトリクスについては、こちらをご覧ください Insightsで利用可能なメトリック. " }, 
{ "title" : "アプリのテスト指標へのアクセス ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#アプリのテスト指標へのアクセス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ アプリのテスト指標へのアクセス ", 
"snippet" : "Insights を使用すると、個々のテスト モジュールのレベルまで、テスト メトリックを追跡できます。これを行うには、結果を Bitrise.io にデプロイする ステップ。次の手順では、追加の構成を必要とせずにこれを自動的に行います。 iOS の Xcode テスト Android 単体テスト iOS デバイスのテスト Android の仮想デバイス テスト フラッターテスト これらのステップのいずれかを使用してテストを実行すると、Insights でメトリックを確認できます。 インサイトを開きます。 左側で、選択 テスト . 一番左のドロップダウン メニューから、必要なアプリを選択します...", 
"body" : "Insights を使用すると、個々のテスト モジュールのレベルまで、テスト メトリックを追跡できます。これを行うには、結果を Bitrise.io にデプロイする ステップ。次の手順では、追加の構成を必要とせずにこれを自動的に行います。 iOS の Xcode テスト Android 単体テスト iOS デバイスのテスト Android の仮想デバイス テスト フラッターテスト これらのステップのいずれかを使用してテストを実行すると、Insights でメトリックを確認できます。 インサイトを開きます。 左側で、選択 テスト . 一番左のドロップダウン メニューから、必要なアプリを選択します。 必要に応じて、フィルターを使用して特定のテスト データを表示することで、より深く掘り下げることができます。以下をフィルタリングできます。 テスト スイート テストケース モジュール 支店 下にスクロールして、個々のテスト ケースを表示します。 利用可能なテスト指標については、こちらをご覧ください Insightsで利用可能なメトリック. " }, 
{ "title" : "ボトルネック ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#ボトルネック", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ ボトルネック ", 
"snippet" : "の ボトルネック このセクションは、どこで最も時間やクレジットを節約できるかを理解するのに役立ちます。どのワークフローとテストが最も時間がかかり、最も多くのクレジットが必要かを示します。 ボトルネックページにアクセスするには、単に ボトルネック 左に。ボトルネックは、すべての指標で使用する 3 つの基本的なカテゴリに分類されます。 ビルド 、 テスト 、 と クレジット .各カテゴリには 3 つの指標があります。 失敗したワークフロー\/失敗したテスト: これらは、ビルドに費やされた時間またはクレジットに最も大きな影響を与える、失敗したワークフローまたはテスト ケースです。 ビルド時間\/実行時間...", 
"body" : "の ボトルネック このセクションは、どこで最も時間やクレジットを節約できるかを理解するのに役立ちます。どのワークフローとテストが最も時間がかかり、最も多くのクレジットが必要かを示します。 ボトルネックページにアクセスするには、単に ボトルネック 左に。ボトルネックは、すべての指標で使用する 3 つの基本的なカテゴリに分類されます。 ビルド 、 テスト 、 と クレジット .各カテゴリには 3 つの指標があります。 失敗したワークフロー\/失敗したテスト: これらは、ビルドに費やされた時間またはクレジットに最も大きな影響を与える、失敗したワークフローまたはテスト ケースです。 ビルド時間\/実行時間: ビルド時間が増加するワークフロー、または実行時間が増加するテスト ケース。 使用状況\/フレークネス: 最も大量のリソース (時間またはクレジット) を消費したワークフロー、または最も不安定な実行を伴うテスト ケース。 " }, 
{ "title" : "特定の時間枠からのデータの表示 ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#特定の時間枠からのデータの表示", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ 特定の時間枠からのデータの表示 ", 
"snippet" : "デフォルトでは、すべての Insights ページに、過去 12 週間の指標が週単位で表示されます。ページの右上にあるそれぞれのドロップダウン メニューを開き、必要なオプションを選択して、基準と時間枠を変更します。...", 
"body" : "デフォルトでは、すべての Insights ページに、過去 12 週間の指標が週単位で表示されます。ページの右上にあるそれぞれのドロップダウン メニューを開き、必要なオプションを選択して、基準と時間枠を変更します。 " }, 
{ "title" : "ダッシュボード ページ ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#ダッシュボード-ページ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ ダッシュボード ページ ", 
"snippet" : "インサイト ダッシュボード ページを使用して、 ワークスペース 1 か所で表示できるようにします。 Builds、Tests、および Credits タブのグラフを 1 つのダッシュボードに組み合わせることができ、必要な数のダッシュボードを持つことができます。...", 
"body" : "インサイト ダッシュボード ページを使用して、 ワークスペース 1 か所で表示できるようにします。 Builds、Tests、および Credits タブのグラフを 1 つのダッシュボードに組み合わせることができ、必要な数のダッシュボードを持つことができます。 " }, 
{ "title" : "新しいダッシュボードの作成 ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#新しいダッシュボードの作成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ ダッシュボード ページ \/ 新しいダッシュボードの作成 ", 
"snippet" : "[ダッシュボード] ページから、または ダッシュボードに追加 ボタン （ ) をクリックし、 ダッシュボードを作成 ボタン。このガイドでは、前者の方法に焦点を当てます。 インサイトを開きます。 左側で、選択 ダッシュボード . クリック ダッシュボードを作成 を開くには ダッシュボードを作成 窓。 の下にダッシュボードの名前を追加します ダッシュボード名 し、必要に応じて下に説明を追加します。 説明 分野。 粒度と時間範囲のデフォルト ビューを選択します。これらのオプションは後で変更することもできます。 クリック 作成 ....", 
"body" : "[ダッシュボード] ページから、または ダッシュボードに追加 ボタン （ ) をクリックし、 ダッシュボードを作成 ボタン。このガイドでは、前者の方法に焦点を当てます。 インサイトを開きます。 左側で、選択 ダッシュボード . クリック ダッシュボードを作成 を開くには ダッシュボードを作成 窓。 の下にダッシュボードの名前を追加します ダッシュボード名 し、必要に応じて下に説明を追加します。 説明 分野。 粒度と時間範囲のデフォルト ビューを選択します。これらのオプションは後で変更することもできます。 クリック 作成 . " }, 
{ "title" : "ダッシュボードへのアクセス ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#ダッシュボードへのアクセス", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ ダッシュボード ページ \/ ダッシュボードへのアクセス ", 
"snippet" : "ダッシュボードにアクセスするには: インサイトを開きます。 左側で、選択 ダッシュボード . ダッシュボードの名前または矢印アイコン (\" \") をクリックして、特定のダッシュボードを開きます。 ここから、以前にダッシュボードに追加したグラフを表示できます。詳細については、こちらをご覧ください ダッシュボードへのグラフの追加....", 
"body" : "ダッシュボードにアクセスするには: インサイトを開きます。 左側で、選択 ダッシュボード . ダッシュボードの名前または矢印アイコン (\" \") をクリックして、特定のダッシュボードを開きます。 ここから、以前にダッシュボードに追加したグラフを表示できます。詳細については、こちらをご覧ください ダッシュボードへのグラフの追加. " }, 
{ "title" : "ダッシュボードへのグラフの追加 ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#ダッシュボードへのグラフの追加", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ ダッシュボード ページ \/ ダッシュボードへのグラフの追加 ", 
"snippet" : "から任意のグラフを追加できます。 ビルド 、 テスト 、 と クレジット ダッシュボードへのタブ: インサイトを開きます。 を選択 ビルド 、 テスト 、 また クレジット 左のタブ。 ダッシュボードに追加する指標を検索します。 クリックしてください ダッシュボードに追加 ( ) ボタンを押します。 の下に名前を挿入します。 チャート名 分野。 ドロップダウン メニューを使用して、このグラフを配置するダッシュボードを選択します。 クリック 追加 . それでおしまい！これからは、 ダッシュボード ページ。 ダッシュボードからのグラフの削除 編集モードを使用して、ダッシュボードからグラフを削除でき...", 
"body" : "から任意のグラフを追加できます。 ビルド 、 テスト 、 と クレジット ダッシュボードへのタブ: インサイトを開きます。 を選択 ビルド 、 テスト 、 また クレジット 左のタブ。 ダッシュボードに追加する指標を検索します。 クリックしてください ダッシュボードに追加 ( ) ボタンを押します。 の下に名前を挿入します。 チャート名 分野。 ドロップダウン メニューを使用して、このグラフを配置するダッシュボードを選択します。 クリック 追加 . それでおしまい！これからは、 ダッシュボード ページ。 ダッシュボードからのグラフの削除 編集モードを使用して、ダッシュボードからグラフを削除できます。詳細については、こちらをご覧ください ダッシュボードの編集. " }, 
{ "title" : "ダッシュボードの編集 ", 
"url" : "インサイトを構築する/インサイトの使用を開始する.html#ダッシュボードの編集", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ インサイトの使用を開始する \/ ダッシュボード ページ \/ ダッシュボードの編集 ", 
"snippet" : "ダッシュボードを作成したら、必要に応じて編集できます。特に、デフォルトの時間範囲を編集したり、不要になったチャートを削除したりできます。そのためには、 編集モード : インサイトを開きます。 左側で、選択 ダッシュボード . ダッシュボードにアクセスする 編集したい。 クリックしてください \" 」 アイコンをクリックしてから、 編集モード . 編集モードでは、ダッシュボードの一般設定を変更するには、 設定 ボタン。以前に追加したグラフの名前を変更したり、横にあるアイコンを使用してそれらを削除したりすることもできます。 クリック 保存 ダッシュボードの編集が終わったら。...", 
"body" : "ダッシュボードを作成したら、必要に応じて編集できます。特に、デフォルトの時間範囲を編集したり、不要になったチャートを削除したりできます。そのためには、 編集モード : インサイトを開きます。 左側で、選択 ダッシュボード . ダッシュボードにアクセスする 編集したい。 クリックしてください \" 」 アイコンをクリックしてから、 編集モード . 編集モードでは、ダッシュボードの一般設定を変更するには、 設定 ボタン。以前に追加したグラフの名前を変更したり、横にあるアイコンを使用してそれらを削除したりすることもできます。 クリック 保存 ダッシュボードの編集が終わったら。 " }, 
{ "title" : "Insightsで利用可能なメトリック ", 
"url" : "インサイトを構築する/insightsで利用可能なメトリック.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ Insightsで利用可能なメトリック ", 
"snippet" : "Insightsには、ビルドの成功率、ビルドの数、成功したビルドの時間の中央値など、多数の利用可能なメトリックがあります。 Insights では、次の 3 つのカテゴリの指標を追跡できます。 指標を構築します。 指標をテストします。 消費したクレジット。...", 
"body" : "Insightsには、ビルドの成功率、ビルドの数、成功したビルドの時間の中央値など、多数の利用可能なメトリックがあります。 Insights では、次の 3 つのカテゴリの指標を追跡できます。 指標を構築します。 指標をテストします。 消費したクレジット。 " }, 
{ "title" : "基本的なビルドメトリック ", 
"url" : "インサイトを構築する/insightsで利用可能なメトリック.html#基本的なビルドメトリック", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ Insightsで利用可能なメトリック \/ 基本的なビルドメトリック ", 
"snippet" : "次の指標は、アプリ、ワークフロー、ステップレベルでも利用できます。 トップビルド時間： 成功したビルドのビルド時間の95パーセンタイル。言い換えれば、成功したビルドの最も遅い5％です。ステップの場合、それはステップの成功した実行の最も遅い5％を示します。 典型的なビルド時間： ビルドが成功した時間の中央値。ステップの場合、ステップを正常に実行するのにかかった時間の中央値。 成功率： ビルドが成功した割合、または特定のワークフローまたはステップが正常に実行された割合。たとえば、 脚本 ステップは、特定のワークフローで10回のうち6回正常に終了し、成功率は60％です。成功率は、完了した実行を使用し...", 
"body" : "次の指標は、アプリ、ワークフロー、ステップレベルでも利用できます。 トップビルド時間： 成功したビルドのビルド時間の95パーセンタイル。言い換えれば、成功したビルドの最も遅い5％です。ステップの場合、それはステップの成功した実行の最も遅い5％を示します。 典型的なビルド時間： ビルドが成功した時間の中央値。ステップの場合、ステップを正常に実行するのにかかった時間の中央値。 成功率： ビルドが成功した割合、または特定のワークフローまたはステップが正常に実行された割合。たとえば、 脚本 ステップは、特定のワークフローで10回のうち6回正常に終了し、成功率は60％です。成功率は、完了した実行を使用して計算されることに注意してください。ビルドの中止またはステップのスキップは、このメトリックにはカウントされません。 ビルド数： 開始されたビルドの総数。 ビルドの使用法： 同時実行ベースのアカウントの場合、特定のステップの構築または実行に費やされた合計時間です。クレジットベースのアカウントの場合、これは、特定のステップの構築中または実行中に使用されたクレジットの量です。 " }, 
{ "title" : "テスト指標 ", 
"url" : "インサイトを構築する/insightsで利用可能なメトリック.html#テスト指標", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ Insightsで利用可能なメトリック \/ テスト指標 ", 
"snippet" : "選択してテスト指標にアクセス テスト 左に。基本的なビルド メトリックと同様に、フィルターをテストの実行に適用できます。個々のテスト スイート、テスト ケース、またはモジュール、およびアプリのリポジトリのブランチをフィルター処理できます。 トップデュレーション: 成功したビルドのビルド時間の 95 パーセンタイル。つまり、成功したビルドの最も遅い 5% です。ステップの場合、成功したステップの実行の最も遅い 5% を示します。 通常の期間: テスト実行の中央時間。 故障率: テスト実行の失敗率。 総所要時間: 同時実行ベースのアカウントの場合、特定のステップの構築または実行に費やされた合計時間...", 
"body" : "選択してテスト指標にアクセス テスト 左に。基本的なビルド メトリックと同様に、フィルターをテストの実行に適用できます。個々のテスト スイート、テスト ケース、またはモジュール、およびアプリのリポジトリのブランチをフィルター処理できます。 トップデュレーション: 成功したビルドのビルド時間の 95 パーセンタイル。つまり、成功したビルドの最も遅い 5% です。ステップの場合、成功したステップの実行の最も遅い 5% を示します。 通常の期間: テスト実行の中央時間。 故障率: テスト実行の失敗率。 総所要時間: 同時実行ベースのアカウントの場合、特定のステップの構築または実行に費やされた合計時間です。クレジット ベースのアカウントの場合、ビルド中または特定のステップの実行中に使用されるクレジットの量です。 テストラン : テスト実行の合計数。 不安定な実行 : コードに変更がないにもかかわらず、一貫性のない結果が生成されたテスト実行の数。 " }, 
{ "title" : "消費したクレジット ", 
"url" : "インサイトを構築する/insightsで利用可能なメトリック.html#消費したクレジット", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ インサイトを構築する \/ Insightsで利用可能なメトリック \/ 消費したクレジット ", 
"snippet" : "Insights は、各アプリに費やされたクレジットの量を追跡し、必要に応じて特定のアプリの各ワークフローを追跡します。支出を確認するには、Insights を開き、左側で クレジット . 支出チャートには、選択したアプリまたはワークフローの週ごとの支出または累積支出のいずれかが表示されます。...", 
"body" : "Insights は、各アプリに費やされたクレジットの量を追跡し、必要に応じて特定のアプリの各ワークフローを追跡します。支出を確認するには、Insights を開き、左側で クレジット . 支出チャートには、選択したアプリまたはワークフローの週ごとの支出または累積支出のいずれかが表示されます。 " }, 
{ "title" : "Bitrise CLI ", 
"url" : "bitrise-cli.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI ", 
"snippet" : "Bitrise CLIは、Bitriseのオープンソースランナーです。 CLIは、ビルドを実行するために使用されます bitrise.io 。自分のコンピューターにインストールして実行し、ビルドをローカルで実行できます。 Bitrise CLIは、Bitriseのオープンソースランナーです。 CLIは、ビルドを実行するために使用されます bitrise.io 自分のコンピューターにインストールして実行し、ビルドをローカルで実行できます。 CLIをローカルで使用するために、Bitriseアカウントは必要ありません。 CLIをインストールするだけです。 ドキュメントのこのセクションでは、CLIをイ...", 
"body" : "Bitrise CLIは、Bitriseのオープンソースランナーです。 CLIは、ビルドを実行するために使用されます bitrise.io 。自分のコンピューターにインストールして実行し、ビルドをローカルで実行できます。 Bitrise CLIは、Bitriseのオープンソースランナーです。 CLIは、ビルドを実行するために使用されます bitrise.io 自分のコンピューターにインストールして実行し、ビルドをローカルで実行できます。 CLIをローカルで使用するために、Bitriseアカウントは必要ありません。 CLIをインストールするだけです。 ドキュメントのこのセクションでは、CLIをインストールして更新する方法、ビルドを実行してシークレットをローカルで管理する方法、オフラインのワークフローエディターを設定して使用する方法を学習します。 " }, 
{ "title" : "BitriseCLIのインストールと更新 ", 
"url" : "bitrise-cli/bitrisecliのインストールと更新.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ BitriseCLIのインストールと更新 ", 
"snippet" : "BitriseCLIのインストールは非常に簡単です。これは、macOSおよびLinux用の単一のバイナリとして配布されており、いくつかの方法で取得できます。あなたがする必要があるのはそれをダウンロードして実行可能にすることだけです。...", 
"body" : "BitriseCLIのインストールは非常に簡単です。これは、macOSおよびLinux用の単一のバイナリとして配布されており、いくつかの方法で取得できます。あなたがする必要があるのはそれをダウンロードして実行可能にすることだけです。 " }, 
{ "title" : "curlを使用したBitriseCLIのインストール ", 
"url" : "bitrise-cli/bitrisecliのインストールと更新.html#curlを使用したbitrisecliのインストール", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ BitriseCLIのインストールと更新 \/ curlを使用したBitriseCLIのインストール ", 
"snippet" : "bashシェルで次のコマンドを実行します。 curl -fL https:\/\/github.com\/bitrise-io\/bitrise\/releases\/latest\/download\/bitrise-$(uname -s)-$(uname -m) > \/usr\/local\/bin\/bitrise BitriseCLIの最新リリースはその上で確認できます リリース ページ。 ダウンロードしたバイナリを実行可能にします。 chmod +x \/usr\/local\/bin\/bitrise 走る bitrise setup 。 これにより、Bitriseの実行に必要なすべてのものがインストールされて...", 
"body" : "bashシェルで次のコマンドを実行します。 curl -fL https:\/\/github.com\/bitrise-io\/bitrise\/releases\/latest\/download\/bitrise-$(uname -s)-$(uname -m) > \/usr\/local\/bin\/bitrise BitriseCLIの最新リリースはその上で確認できます リリース ページ。 ダウンロードしたバイナリを実行可能にします。 chmod +x \/usr\/local\/bin\/bitrise 走る bitrise setup 。 これにより、Bitriseの実行に必要なすべてのものがインストールされて利用可能かどうかが確認されます。これをスキップすると、CLIは最初に呼び出したときにとにかくセットアップを実行します bitrise run 。 " }, 
{ "title" : "HomebrewでBitriseCLIをインストールする ", 
"url" : "bitrise-cli/bitrisecliのインストールと更新.html#homebrewでbitrisecliをインストールする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ BitriseCLIのインストールと更新 \/ HomebrewでBitriseCLIをインストールする ", 
"snippet" : "MacにHomebrewパッケージマネージャーがインストールされている場合は、それを使用してBitriseCLIをインストールできます。 を開きます Terminal Macでアプリを実行して実行します。 brew update && brew install bitrise 走る bitrise setup 。 これにより、Bitriseの実行に必要なすべてのものがインストールされて利用可能かどうかが確認されます。これをスキップすると、CLIは最初に呼び出したときにとにかくセットアップを実行します bitrise run 。...", 
"body" : "MacにHomebrewパッケージマネージャーがインストールされている場合は、それを使用してBitriseCLIをインストールできます。 を開きます Terminal Macでアプリを実行して実行します。 brew update && brew install bitrise\n 走る bitrise setup 。 これにより、Bitriseの実行に必要なすべてのものがインストールされて利用可能かどうかが確認されます。これをスキップすると、CLIは最初に呼び出したときにとにかくセットアップを実行します bitrise run 。 " }, 
{ "title" : "BitriseCLIの更新 ", 
"url" : "bitrise-cli/bitrisecliのインストールと更新.html#bitrisecliの更新", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ BitriseCLIのインストールと更新 \/ BitriseCLIの更新 ", 
"snippet" : "Bitrise CLIの更新は簡単で、Homebrewと一緒にインストールしたか、GitHubリリースからインストールしたかは関係ありません。 単に実行する bitrise update - それでおしまい！ CLIは、更新を1日1回チェックし、新しいバージョンがあるとすぐに通知します。...", 
"body" : "Bitrise CLIの更新は簡単で、Homebrewと一緒にインストールしたか、GitHubリリースからインストールしたかは関係ありません。 単に実行する bitrise update - それでおしまい！ CLIは、更新を1日1回チェックし、新しいバージョンがあるとすぐに通知します。 " }, 
{ "title" : "CLIからの新しいアプリの追加 ", 
"url" : "bitrise-cli/cliからの新しいアプリの追加.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ CLIからの新しいアプリの追加 ", 
"snippet" : "コマンドラインインターフェイスからBitriseアプリを登録して、ビルドを開始できます。事前にbitrise.ymlファイルを作成して使用するか、プロジェクトスキャナーでプロジェクトをスキャンして生成することができます。 新しいBitriseを簡単に登録できます アプリ 任意のコマンドラインインターフェイスから：プロセスはガイドされており、簡単に実行できます。そしてそれは速いです：例えば、あなたが持っているなら bitrise.yml あなたがアプリに使用したいファイル、あなたは待つ必要はありません プロジェクトスキャナー アプリの種類を検出し、 bitrise.yml ファイル。既存のファイ...", 
"body" : "コマンドラインインターフェイスからBitriseアプリを登録して、ビルドを開始できます。事前にbitrise.ymlファイルを作成して使用するか、プロジェクトスキャナーでプロジェクトをスキャンして生成することができます。 新しいBitriseを簡単に登録できます アプリ 任意のコマンドラインインターフェイスから：プロセスはガイドされており、簡単に実行できます。そしてそれは速いです：例えば、あなたが持っているなら bitrise.yml あなたがアプリに使用したいファイル、あなたは待つ必要はありません プロジェクトスキャナー アプリの種類を検出し、 bitrise.yml ファイル。既存のファイルをプラグインするだけで、準備完了です。 APIを使用したアプリの追加 BitriseAPIを使用して新しいアプリを追加することもできます。 アプリの追加と管理CLIを使用してBitriseに新しいアプリを追加する前に、いくつかの順序が整っていることを確認してください。 接続されたGitプロバイダーを持つBitriseアカウントが必要です。 プロジェクトには、マシンにローカルGitリポジトリがあり、Gitプロバイダーにリモートリポジトリが必要です。 SSHキーを使用してリポジトリにアクセスする場合は、 リモートリポジトリのURLはSSHURLである必要があります ！例えば、 git@github.com:example-user\/example.git 。 を作成することもできます bitrise.yml 事前に、作成プロセス中にアプリに追加できるようになります。これはオプションです。私たちのウェブサイトと同じように、プロセス中にプロジェクトスキャナーに生成させることができます。 この手順では、BitriseがSSHキーを使用してアクセスするアプリを追加する方法について説明します。これには、アプリのリモートリポジトリに次のようなSSHURLが含まれている必要があります。 git@github.com:example-user\/example.git 。 もちろん、HTTPS URLを使用してリモートリポジトリにアクセスすることもできます。その場合、アプリにSSHキーを設定することはありません。パブリックアプリ（オープンソースプロジェクト）にはHTTPSURLのみを使用することをお勧めします。 に移動します CLIから新しいアプリを作成する ページ。 あなたはあなたからこのページに到達することができます ダッシュボード ： クリック 新しいアプリを追加する 右側のボタンをクリックして、 CLIから新しいアプリを追加する 。 アプリを所有するアカウントとアプリのプライバシーを設定します。 そこにあるcurlコマンドをコピーします。 コマンドラインインターフェイスを開きます。 ディレクトリをプロジェクトの場所に変更します。 curlコマンドを貼り付けて、 入力 。 リポジトリのURLを選択します。 SSH オプション。 このプロンプトは、ローカルリポジトリのリモートにSSHURLがある場合にのみ表示されます。リモートリポジトリにHTTPSURLがある場合、このプロンプトは表示されません。 Remote URL: git@github.com:example-user\/example.git\n\n? Select repository URL::\n https:\/\/github.com\/example-user\/example.git\n > ssh:\/\/git@github.com:example-user\/example.git\n SSHキーを登録します。 Specify how Bitrise will be able to access the source code: \n > Automatic\n Add own SSH 自動登録を選択するか、独自の登録を追加することを選択できます。 自動を選択した場合、Bitriseは自動的にキーペアを生成します。追加のプライベートリポジトリまたはサブモジュールを使用する必要がある場合は、プロンプトが表示されたら[必要]オプションを選択し、指示に従います。そうでない場合は、[いいえ、SSHキーの自動追加]オプションを選択します。これにより、公開キーがリポジトリに自動的に追加されます。 独自のパスを追加する場合は、SSHキーファイルへのパスを指定する必要があります。手動で入力するか、ファイルをドラッグアンドドロップしてパスを入力します。 何を決める bitrise.yml アップロードしたいファイル。 ? What bitrise.yml do you want to upload? \n > Run the scanner to generate a new bitrise.yml\n Use the bitrise.yml found in the current directory or specify manually プロジェクトファイルに基づいてスキャナーに生成させるか、ファイルを提供することができます。リポジトリにすでに bitrise.yml ファイルの場合、そのパスが自動的に入力されます。 使用するブランチを選択します。 デフォルトのオプションは、現在アクティブなブランチです。 The current branch is: master (tracking: origin master),\n \n? Do you want to run the scanner for this branch?\n > Yes\n No\n 選択した場合 No 、使用するブランチをチェックアウトするように求められたら、もう一度Enterキーを押して、スキャナーを起動できるようにします。 スキャナーが完了すると、アプリのタイプを検出するか、手動構成に切り替わります。手動構成とは、アプリの種類（iOS、Android、React Native、Flutterなど）を選択し、関連する構成ファイルへのパスを指定する必要があることを意味します。たとえば、 config.xml Ionicアプリの場合。このガイドでは、自動検出について説明します。 使用するスタックを選択します。 スキャナーがプロジェクトタイプを検出すると、スタックが自動的に推奨されますが、必要に応じてCLIで変更できます。上記のように手動構成を実行した場合は、スタックも選択する必要があります。 Webhookとコード署名ファイルを設定してプロセスを終了します。 Webhook登録をスキップすることもできますが、Bitriseでビルドを自動的にトリガーする必要があります。詳細については： Webhookコード署名ファイルをアップロードできます。アプリの種類に応じて、iOSコード署名ファイル（ツールはcodesigndocを実行します）やAndroidキーストアファイルをアップロードするかどうかを尋ねられます。これらのファイルは、Webサイトでいつでもアップロードできます。詳細については： コード署名以上です！これで完了です。新しいアプリのURLが印刷され、アプリをで表示することもできます。 ダッシュボード 。 " }, 
{ "title" : "Bitriseプロジェクトをローカルで初期化する ", 
"url" : "bitrise-cli/bitriseプロジェクトをローカルで初期化する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ Bitriseプロジェクトをローカルで初期化する ", 
"snippet" : "bitrise initプラグインを使用して、Bitriseオンラインに追加せずに、自分のコンピューターで新しいBitriseアプリを初期化できます。 新しく追加すると アプリ Bitrise に対して、プロジェクトのタイプを検出し、基本的な bitrise.yml あなたのためにファイルし、 ワークフロー プロジェクトの種類に適したもの。 Bitrise CLI を使用すると、自分のコンピューターでこれを機能させることができます。 BitriseCLIをインストールします お使いのコンピュータで。 それを確認してください $GOPATH\/bin に追加されます $PATH お使いのコンピュー...", 
"body" : "bitrise initプラグインを使用して、Bitriseオンラインに追加せずに、自分のコンピューターで新しいBitriseアプリを初期化できます。 新しく追加すると アプリ Bitrise に対して、プロジェクトのタイプを検出し、基本的な bitrise.yml あなたのためにファイルし、 ワークフロー プロジェクトの種類に適したもの。 Bitrise CLI を使用すると、自分のコンピューターでこれを機能させることができます。 BitriseCLIをインストールします お使いのコンピュータで。 それを確認してください $GOPATH\/bin に追加されます $PATH お使いのコンピュータで。 デフォルトでは、Goワークスペースは次の場所にあります。 $HOME\/go\/bin 。 Go のインストール コンピューターに Go がインストールされていない場合は、 bitrise init 自動的にインストールされます。 を開始します bitrise init プラグイン： bitrise init プラグインが使用可能なすべてのスキャナーを実行している間、プロジェクトタイプを判別します。 検出されたプロジェクトタイプに応じて、スキャナーはいくつかの入力を要求します。指示に従ってください。 たとえば、iOSプロジェクトでは、エクスポート方法を指定するようにユーザーに求めます。 Select: ipa export method\nPlease select from the list:\n[1] : app-store\n[2] : ad-hoc\n[3] : enterprise\n[4] : development\n(type in the option's number, then hit Enter) : スキャナーの出力に基づいて、プラグインはBitrise構成を生成します。 bitrise.yml ファイル。自動生成されたワークフローでは、必要なすべての入力に有効な値があります。 プラグインはまた、 bitrise.secrets.yml ファイル。あなたはあなたを保存することができます 秘密 このファイルで。 " }, 
{ "title" : "オフラインワークフローエディターのインストールとアップグレード ", 
"url" : "bitrise-cli/オフラインワークフローエディターのインストールとアップグレード.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ オフラインワークフローエディターのインストールとアップグレード ", 
"snippet" : "Bitriseワークフローエディターは、ログインせずにMac\/PCでオフラインで実行できるように設計されています bitrise.io 。ワークフローエディタはオープンソースであり、そのリポジトリを見つけることができます ここ 。ワークフローエディターに関するディスカッションに参加することもできます ここ 。...", 
"body" : "Bitriseワークフローエディターは、ログインせずにMac\/PCでオフラインで実行できるように設計されています bitrise.io 。ワークフローエディタはオープンソースであり、そのリポジトリを見つけることができます ここ 。ワークフローエディターに関するディスカッションに参加することもできます ここ 。 " }, 
{ "title" : "オフラインワークフローエディターをコンピューターにインストールする ", 
"url" : "bitrise-cli/オフラインワークフローエディターのインストールとアップグレード.html#オフラインワークフローエディターをコンピューターにインストールする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ オフラインワークフローエディターのインストールとアップグレード \/ オフラインワークフローエディターをコンピューターにインストールする ", 
"snippet" : "BitriseCLIをインストールします 。 あなたが持っていることを確認してください 行け ローカルコンピュータにインストールされています。 走る bitrise setup Bitriseプラグインの一部としてオフラインワークフローエディタをインストールします。 ランニング bitrise setup また、Bitrise Coreツール、OS Xツール、Bitriseプラグイン、およびツールキットがローカルマシンにインストールされているかどうかも確認します。そうでない場合、コマンドはそれらを自動的にインストールします。...", 
"body" : "BitriseCLIをインストールします 。 あなたが持っていることを確認してください 行け ローカルコンピュータにインストールされています。 走る bitrise setup Bitriseプラグインの一部としてオフラインワークフローエディタをインストールします。 ランニング bitrise setup また、Bitrise Coreツール、OS Xツール、Bitriseプラグイン、およびツールキットがローカルマシンにインストールされているかどうかも確認します。そうでない場合、コマンドはそれらを自動的にインストールします。 " }, 
{ "title" : "オフラインワークフローエディタの起動 ", 
"url" : "bitrise-cli/オフラインワークフローエディターのインストールとアップグレード.html#オフラインワークフローエディタの起動", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ オフラインワークフローエディターのインストールとアップグレード \/ オフラインワークフローエディタの起動 ", 
"snippet" : "cd あなたが持っているディレクトリに bitrise.yml 。 走る bitrise :workflow-editor オフラインセッションを開始するコマンド。 全体的なルックアンドフィールは次のとおりです。...", 
"body" : "cd あなたが持っているディレクトリに bitrise.yml 。 走る bitrise :workflow-editor オフラインセッションを開始するコマンド。 全体的なルックアンドフィールは次のとおりです。 " }, 
{ "title" : "ワークフローエディターバージョンのアップグレード ", 
"url" : "bitrise-cli/オフラインワークフローエディターのインストールとアップグレード.html#ワークフローエディターバージョンのアップグレード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ オフラインワークフローエディターのインストールとアップグレード \/ ワークフローエディターバージョンのアップグレード ", 
"snippet" : "を実行して、ワークフローエディタの最新バージョンにアップグレードできます。 bitrise plugin update workflow-editor 指図。...", 
"body" : "を実行して、ワークフローエディタの最新バージョンにアップグレードできます。 bitrise plugin update workflow-editor 指図。 " }, 
{ "title" : "CLIを使用して最初のローカルビルドを実行する ", 
"url" : "bitrise-cli/cliを使用して最初のローカルビルドを実行する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ CLIを使用して最初のローカルビルドを実行する ", 
"snippet" : "BitriseCLIとbitrise.ymlファイルを使用してローカルでBitriseビルドを実行します。これを行うには、正しいYAML構成を取得したら、bitriserunコマンドを使用します。 Bitriseビルドをローカルで実行するには、次のことだけが必要です。 BitriseCLIをインストールします 。 ビルド構成：つまり、 bitrise.yml ファイル。 使用する場合 bitrise.io 、アプリをダウンロードできます bitrise.yml そこから：開く ワークフローエディター の アプリ の上 bitrise.io 、 下 bitrise.yml セクション。 作成した...", 
"body" : "BitriseCLIとbitrise.ymlファイルを使用してローカルでBitriseビルドを実行します。これを行うには、正しいYAML構成を取得したら、bitriserunコマンドを使用します。 Bitriseビルドをローカルで実行するには、次のことだけが必要です。 BitriseCLIをインストールします 。 ビルド構成：つまり、 bitrise.yml ファイル。 使用する場合 bitrise.io 、アプリをダウンロードできます bitrise.yml そこから：開く ワークフローエディター の アプリ の上 bitrise.io 、 下 bitrise.yml セクション。 作成したい場合 bitrise.yml 自分で作成するだけです bitrise.yml プロジェクトのルートにあるファイル。これをの基本コンテンツとして使用できます bitrise.yml ： \nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\napp:\n envs:\n - MY_NAME: My Name\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n - content: echo \"Hello ${MY_NAME}!\" これは、 環境変数 あなたの名前と呼ばれるワークフローで test 。このビルドを実行するには： ターミナルまたはその他のCLIアプリを開きます。 保存したディレクトリに移動します bitrise.yml ファイル。 走る bitrise run ファイルで定義したワークフローの名前を使用します。 bitrise run test それだけです。最初のビルドはBitriseCLIで実行されています。 " }, 
{ "title" : "シークレットをローカルで管理する ", 
"url" : "bitrise-cli/シークレットをローカルで管理する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Bitrise CLI \/ シークレットをローカルで管理する ", 
"snippet" : "Bitrise CLIを使用してローカルでビルドを実行すると、シークレットは .bitrise.secrets.yml ファイル。これは、 bitrise.yml は、どこで実行しますか bitrise run 指図。 Bitrise CLIを使用してローカルでビルドを実行すると、 秘密 から読み取られます .bitrise.secrets.yml ファイル。これは、 bitrise.yml は、どこで実行しますか bitrise run 指図。 シークレットを別の場所に保存する場合は、シークレットファイルの場所を --inventory の旗 bitrise run 指図。例えば： 。 bi...", 
"body" : "Bitrise CLIを使用してローカルでビルドを実行すると、シークレットは .bitrise.secrets.yml ファイル。これは、 bitrise.yml は、どこで実行しますか bitrise run 指図。 Bitrise CLIを使用してローカルでビルドを実行すると、 秘密 から読み取られます .bitrise.secrets.yml ファイル。これは、 bitrise.yml は、どこで実行しますか bitrise run 指図。 シークレットを別の場所に保存する場合は、シークレットファイルの場所を --inventory の旗 bitrise run 指図。例えば： 。 bitrise run my-workflow --inventory \/path\/to\/secrets.yml 必ず gitignore あなたの秘密のファイル ベストプラクティスとして、常に次のことを確認する必要があります。 .bitrise.secrets.yml あなたに追加されます .gitignore 、リポジトリにコミットされないように！最高はあなたが gitignore で始まるすべて .bitrise 、これは次の行を追加することで実行できます。 .bitrise* あなたに .gitignore ファイル。 シークレットYAMLファイルにはルートが含まれている必要があります envs: アイテム、次にシークレット環境変数のリスト。 envs:\n- SECRET_ENV_ONE: first Secret value\n- SECRET_ENV_TWO: second Secret value で定義された秘密 .bitrise.secrets.yml ファイルは、他の環境変数と同じように使用できます。 format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n - content: |\n #!\/bin\/bash\n echo \"SECRET_ENV_ONE: ${SECRET_ENV_ONE}\"\n echo \"SECRET_ENV_TWO: ${SECRET_ENV_TWO}\" あなたはただすることができます bitrise run test ディレクトリ内、およびスクリプト ステップ シークレットファイルで指定された値を出力します。 SECRET_ENV_ONE: first secret value\nSECRET_ENV_TWO: second secret value シークレットは、実行時に処理される最初の環境変数であるため、 bitrise run コマンド、あなたはあなたのどこでも秘密を使うことができます bitrise.yml 。 " }, 
{ "title" : "API ", 
"url" : "api.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API ", 
"snippet" : "Bitrise APIを使用すると、好みのツールやプロセスとの深いカスタム統合を構築して、さらに効率的な開発パイプラインを作成できます。 Bitrise APIを使用すると、好みのツールやプロセスとの深いカスタム統合を構築して、さらに効率的な開発パイプラインを作成できます。 APIは、BitriseWebサイトおよびCLIから利用できる機能とデータの制御とアクセスを提供します。 APIを使用することで、プロセスに合わせてBitriseの機能を完全にカスタマイズすることができます。 APIは進行中です APIは進行中です。将来、新しいエンドポイントを追加し、既存のエンドポイントを更新する可能性が...", 
"body" : "Bitrise APIを使用すると、好みのツールやプロセスとの深いカスタム統合を構築して、さらに効率的な開発パイプラインを作成できます。 Bitrise APIを使用すると、好みのツールやプロセスとの深いカスタム統合を構築して、さらに効率的な開発パイプラインを作成できます。 APIは、BitriseWebサイトおよびCLIから利用できる機能とデータの制御とアクセスを提供します。 APIを使用することで、プロセスに合わせてBitriseの機能を完全にカスタマイズすることができます。 APIは進行中です APIは進行中です。将来、新しいエンドポイントを追加し、既存のエンドポイントを更新する可能性があります。 APIの進行状況を追跡できます。 ディスカッションに参加する ！それに従って、新しいエンドポイントと変更について通知を受け取ります。そこで発表します。 お気軽に投稿してください！新しいAPI機能または新しいエンドポイントをリクエストする場合は、 あなたはそうすることができます！ BitriseAPIのホストは次のとおりです。 https:\/\/api.bitrise.io\/ ルートエンドポイントを除くすべてのエンドポイントがバージョン管理されます。バージョンは、ホストの直後のURLに含める必要があります。たとえば、 https:\/\/api.bitrise.io\/v0.1\/me は、自分のユーザーアカウントのエンドポイントです。 現在、バージョンは1つだけです。 v0.1 。 長期的な互換性の約束はありません v0.1 、必要がない限り何も壊さないように最善を尽くしますが。満足したら v0.1 次のように「フリーズ」します v1.0 、長期的なサポートを提供します。 " }, 
{ "title" : "BitriseAPIを使用した認証 ", 
"url" : "api/bitriseapiを使用した認証.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ BitriseAPIを使用した認証 ", 
"snippet" : "Bitrise APIで認証するには、個人用アクセストークンを作成する必要があります。トークンはすべてのエンドポイントに必要です。 現在のAPIは、ユーザー生成の1種類の認証のみをサポートしています。 パーソナルアクセストークン 。ワークスペースには、独自のアクセストークンがありません。 「ルート」URLを除くすべてのAPIエンドポイントには認証が必要です（ https:\/\/api.bitrise.io ）。 パーソナルアクセストークンを作成する 。 安全な方法で保存してください。 追加します Authorization API呼び出しへのアクセストークンを含むヘッダー。 curl -H 'A...", 
"body" : "Bitrise APIで認証するには、個人用アクセストークンを作成する必要があります。トークンはすべてのエンドポイントに必要です。 現在のAPIは、ユーザー生成の1種類の認証のみをサポートしています。 パーソナルアクセストークン 。ワークスペースには、独自のアクセストークンがありません。 「ルート」URLを除くすべてのAPIエンドポイントには認証が必要です（ https:\/\/api.bitrise.io ）。 パーソナルアクセストークンを作成する 。 安全な方法で保存してください。 追加します Authorization API呼び出しへのアクセストークンを含むヘッダー。 curl -H 'Authorization: THE-ACCESS-TOKEN' https:\/\/api.bitrise.io\/v0.1\/me パーソナルアクセストークン 他のユーザーをワークスペースに追加する ワークスペースの所有者を変更する " }, 
{ "title" : "API呼び出しのページ付け ", 
"url" : "api/api呼び出しのページ付け.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ API呼び出しのページ付け ", 
"snippet" : "Bitrise APIを使用すると、ページ付けを使用して、特定のエンドポイントの応答内のアイテムのリストを反復処理できます。ページ付けのプロパティを構成できます。 アイテムのリストを返すエンドポイントを呼び出すと、単一の応答でリスト全体を取得できない場合があります。すべてのアイテムを取得するには、ページを反復処理する必要があります。 このようなエンドポイントの応答には、 paging オブジェクト、と total_item_count と page_item_limit プロパティ。利用可能な「次の」ページがある場合は、 next 「アンカー」アイテム。たとえば、応答には、次のページの最初のア...", 
"body" : "Bitrise APIを使用すると、ページ付けを使用して、特定のエンドポイントの応答内のアイテムのリストを反復処理できます。ページ付けのプロパティを構成できます。 アイテムのリストを返すエンドポイントを呼び出すと、単一の応答でリスト全体を取得できない場合があります。すべてのアイテムを取得するには、ページを反復処理する必要があります。 このようなエンドポイントの応答には、 paging オブジェクト、と total_item_count と page_item_limit プロパティ。利用可能な「次の」ページがある場合は、 next 「アンカー」アイテム。たとえば、応答には、次のページの最初のアプリのアプリスラッグが表示されます。 {\n \"data\": [ ... ],\n \"paging\": {\n \"total_item_count\": 3,\n \"page_item_limit\": 2,\n \"next\": \"518e869d56f2adfd\"\n }\n}\n NS next のプロパティ paging 物体 NS next のプロパティ paging オブジェクトは、使用可能なページが少なくとも1つある場合にのみ含まれます。ない場合 next 内部のプロパティ paging つまり、取得するページがこれ以上ないということです。 で応答ページの数を制限します limit パラメータ： https:\/\/api.bitrise.io\/v0.1\/me\/apps?limit=10 この呼び出しは、 page_item_limit プロパティを10に設定します。パラメータのデフォルト（および最大）値は50です。 応答項目を繰り返します。 ページ付けパラメーターなしでエンドポイントを呼び出します。 応答プロセスから paging 物体。 の場合 paging オブジェクトには、 next アイテム、追加でまったく同じエンドポイントを呼び出す next= パラメータをクエリし、応答で取得した値をの値として渡します next パラメータ。 登録済みのすべてのアプリを繰り返し処理します 電話 https:\/\/api.bitrise.io\/v0.1\/me\/apps 。 アイテムを処理します（ data 財産）。 確認してください paging （ルート）プロパティ。 ある場合 next 内部のプロパティ paging 、エンドポイントを再度呼び出します。 next クエリパラメータ 例： https:\/\/api.bitrise.io\/v0.1\/me\/apps?next=NEXTVALUE 、 どこ NEXTVALUE の値です next 以前の応答で取得したプロパティ。 までこれを繰り返します paging オブジェクトには含まれていません next プロパティ。これは、受け取ったページが最後のページであることを意味します。 " }, 
{ "title" : "アプリの追加と管理 ", 
"url" : "api/アプリの追加と管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリの追加と管理 ", 
"snippet" : "API を使用して Bitrise に新しいアプリを追加できます。 アプリ 、SSH キーを生成し、アプリの初期構成をセットアップします。 API を使用して Bitrise に新しいアプリを追加できます。 アプリ 、SSH キーを生成し、アプリの初期構成をセットアップします。 さらに、たとえば、単一のユーザーまたは特定のユーザーに属するすべてのアプリを一覧表示できます。 ワークスペース ....", 
"body" : "API を使用して Bitrise に新しいアプリを追加できます。 アプリ 、SSH キーを生成し、アプリの初期構成をセットアップします。 API を使用して Bitrise に新しいアプリを追加できます。 アプリ 、SSH キーを生成し、アプリの初期構成をセットアップします。 さらに、たとえば、単一のユーザーまたは特定のユーザーに属するすべてのアプリを一覧表示できます。 ワークスペース . " }, 
{ "title" : "APIを使用して新しいアプリを追加する ", 
"url" : "api/アプリの追加と管理.html#apiを使用して新しいアプリを追加する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリの追加と管理 \/ APIを使用して新しいアプリを追加する ", 
"snippet" : "BitriseAPIを使用して新しいアプリを追加する際に使用されるエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ register 新しいアプリを追加します。 該当なし POST \/ apps \/ {app-slug} \/ register-ssh-key SSHキーを特定のアプリに追加します。 所有者または管理者 POST \/ apps \/ {app-slug} \/ finish アプリケーション追加プロセスの最後にアプリケーションを保存します。 該当なし POST \/apps\/{app-slug}\/bitrise.yml アプリケーションの新し...", 
"body" : "BitriseAPIを使用して新しいアプリを追加する際に使用されるエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ register 新しいアプリを追加します。 該当なし POST \/ apps \/ {app-slug} \/ register-ssh-key SSHキーを特定のアプリに追加します。 所有者または管理者 POST \/ apps \/ {app-slug} \/ finish アプリケーション追加プロセスの最後にアプリケーションを保存します。 該当なし POST \/apps\/{app-slug}\/bitrise.yml アプリケーションの新しいbitrise.ymlをアップロードします。 所有者または管理者 HTTPS GitURLを使用するアプリ 手順と例は、SSH gitURLを使用してプライベートアプリを追加することを目的としています。 HTTPS git URLを使用してアプリを追加する場合は、SSHキーの追加をスキップできます。 を呼び出してアプリを登録します register エンドポイントとすべての必要なパラメータの設定。 git プロバイダー、リポジトリ URL、プロバイダーに表示されるリポジトリのスラッグ、およびリポジトリの所有者のスラッグを設定する必要があります。アプリを所有するワークスペースのスラッグも追加する必要があります。従来の命名規則により、 organization_slug パラメータ。 curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n \"provider\": \"github\",\n \"is_public\": false,\n \"organization_slug\": \"$ORG_SLUG\"\n \"repo_url\": \"git@github.com:api_demo\/example-repository.git\",\n \"type\": \"git\",\n \"git_repo_slug\": \"example-repository\",\n \"git_owner\": \"api_demo\"\n }' アプリの名前を変更する デフォルトでは、アプリを登録すると、git リポジトリの名前が継承されます。 別の名前でアプリを追加したい場合は、 \"title\" 次の構文を使用して、パラメータを POST リクエストに追加します。 curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n ...\n ...\n \"title\": \"string\"\n }'\n PATCH リクエストを送信し、 apps 終点。詳細については、次を参照してください。 既存のアプリの管理 . 完了したら、 register-ssh-key ビルドの実行時にBitriseがリポジトリのクローンを作成できるように、作成したSSHキーを設定するエンドポイント。 秘密 SSH キーと公開 SSH キーの両方を提供する必要があります。秘密鍵を手動でコピーする場合は、すべての改行をエスケープする必要があることに注意してください。 \\n . 公開鍵をgitプロバイダーに自動的に登録するかどうかを設定することもできます。 is_register_key_into_provider_service パラメータをtrueまたはfalseに設定します。 curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/register-ssh-key' -d \\\n'{\n \"auth_ssh_private_key\": \"your-private-ssh-key\",\n \"auth_ssh_public_key\": \"your-public-ssh-key\",\n \"is_register_key_into_provider_service\": false\n }' を呼び出してアプリの登録プロセスを完了します finish 終点。 このエンドポイントを使用すると、アプリを構成できます。プロジェクトの種類、ビルドを実行するスタック (アプリによって異なる場合があります)、および初期構成設定を設定します。 また、環境変数を設定したり、アプリケーションの所有者となるワークスペースをすぐに指定したりすることもできます。注意してください mode パラメータは、の値に設定する必要があります manual 。 curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/finish' -d \\\n'{\n \"project_type\": \"ios\",\n \"stack_id\": \"osx-xcode-13.2.x\",\n \"config\": \"default-ios-config\",\n \"mode\": \"manual\",\n \"envs\": {\n \"env1\": \"val1\",\n \"env2\": \"val2\"\n },\n \"organization_slug\": \"e1ec3dea540bcf21\"\n }'\n " }, 
{ "title" : "既存のアプリの管理 ", 
"url" : "api/アプリの追加と管理.html#既存のアプリの管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリの追加と管理 \/ 既存のアプリの管理 ", 
"snippet" : "BitriseAPIを使用した既存のアプリの管理に関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 GET \/ apps アプリのリストを取得します。 どれでも GET \/ apps \/ {app-slug} 特定のアプリを入手してください。 どれでも GET \/apps\/{app-slug}\/bitrise.yml 特定のアプリのbitrise.ymlを取得します。 所有者または管理者 GET \/ apps \/ {app-slug} \/ branchs アプリのリポジトリのブランチを一覧表示します。 どれでも GET \/ organizations \/ {org-sl...", 
"body" : "BitriseAPIを使用した既存のアプリの管理に関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 GET \/ apps アプリのリストを取得します。 どれでも GET \/ apps \/ {app-slug} 特定のアプリを入手してください。 どれでも GET \/apps\/{app-slug}\/bitrise.yml 特定のアプリのbitrise.ymlを取得します。 所有者または管理者 GET \/ apps \/ {app-slug} \/ branchs アプリのリポジトリのブランチを一覧表示します。 どれでも GET \/ organizations \/ {org-slug} \/ apps ワークスペースのアプリのリストを取得します。 どれでも GET \/ users \/ {user-slug} \/ apps ユーザー向けのアプリのリストを取得します。 どれでも パッチ \/apps\/{app-slug} 既存のアプリのパラメーターを更新する 所有者または管理者 1つ以上のアプリに関するGETリクエストへの応答には、アプリスラッグ、そのプロジェクトタイプ、gitプロバイダー、リポジトリの所有者、およびURLが含まれます。 {\n \"data\": [\n {\n \"slug\": \"eeeeefffff00000\",\n \"title\": \"sample-app\",\n \"project_type\": \"android\",\n \"provider\": \"github\",\n \"repo_owner\": \"example-user\",\n \"repo_url\": \"git@github.com:example-user\/sample-app.git\",\n \"repo_slug\": \"android-gradle-kotlin-dsl\",\n \"is_disabled\": false,\n \"status\": -1,\n \"is_public\": false,\n \"owner\": {\n \"account_type\": \"organization\",\n \"name\": \"Test Org\",\n \"slug\": \"fffffeeeee00000\"\n },\n \"avatar_url\": null\n },\n {\n 既存のものをダウンロードすることもできます bitrise.yml すべてのアプリのファイル: 応答には完全な YAML 構成が含まれます。 既存のアプリのタイトルまたはデフォルトの git ブランチを変更しますか?の PATCH メソッドを呼び出すことで、既存のアプリのパラメーターを更新できます。 apps 終点。 必要な役割 Bitrise API を使用して既存のアプリのパラメーターを更新するには、アプリのチームで管理者または所有者の役割を持っている必要があります。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . 必須パラメーターは次のとおりです。 アプリスラッグ オプションのパラメータは次のとおりです。 apple_credential_user_id: 新しい Apple 資格情報のユーザー ID (推奨: UI を使用してこれを設定します) apple_credential_user_slug: 新しい Apple クレデンシャル ユーザー スラッグ (推奨: UI を使用してこれを設定します) default_branch: アプリケーションの新しいデフォルト ブランチ。 is_public: アプリケーションを公開する必要がある場合の新しい値。 repository_url: アプリケーションの新しいリポジトリ URL。 services_credential_user_id: 新しいサービス資格情報のユーザー ID (推奨: UI を使用してこれを設定します)。 title: アプリケーションの新しいタイトル。 既存のアプリの名前とデフォルト ブランチの変更 リクエスト： curl -X 'PATCH' 'https:\/\/api.bitrise.io\/v0.1\/apps\/THE-APP-SLUG' -H 'accept: application\/json' -H 'Authorization: ACCESS-TOKEN' -H 'Content-Type: application\/json' -d '{\"default_branch\": \"main\", \"title\": \"Example_app_title_3\"}' " }, 
{ "title" : "ワークスペース グループのアプリ アクセス ロールの管理 ", 
"url" : "api/アプリの追加と管理.html#ワークスペース-グループのアプリ-アクセス-ロールの管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリの追加と管理 \/ ワークスペース グループのアプリ アクセス ロールの管理 ", 
"snippet" : "付与できます ワークスペース グループ Bitrise のアプリケーション チームへのアクセス。これは、グループのすべてのメンバーがアプリで作業できることを意味します グループに割り当てられた役割 . を使用して、アプリのチームで特定のロールが付与されているすべてのグループを一覧表示します。 GET \/apps\/{app-slug}\/roles\/{role-name} 終点。の 役割名 パラメータは、次の 3 つの可能な値を取ります。 admin manager : これは デベロッパー bitrise.io での役割。 member : これは テスター\/QA bitrise.io で。 こ...", 
"body" : "付与できます ワークスペース グループ Bitrise のアプリケーション チームへのアクセス。これは、グループのすべてのメンバーがアプリで作業できることを意味します グループに割り当てられた役割 . を使用して、アプリのチームで特定のロールが付与されているすべてのグループを一覧表示します。 GET \/apps\/{app-slug}\/roles\/{role-name} 終点。の 役割名 パラメータは、次の 3 つの可能な値を取ります。 admin manager : これは デベロッパー bitrise.io での役割。 member : これは テスター\/QA bitrise.io で。 この例では、特定のアプリに管理者ロールが付与されているワークスペース グループのリストをクエリしています。 curl -X 'GET' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/roles\/admin' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' を使用して、既存のワークスペース グループへのアクセスを許可します。 PUT \/apps\/{app-slug}\/roles\/{role-name} 終点。このエンドポイントには groups 指定されたロールでアクセスが許可されているすべてのグループのスラッグを含むオブジェクト。 すべてのグループを指定 このエンドポイントは、アプリのチームで指定された役割を持っていた以前のすべてのグループを置き換えます。たとえば、エンドポイントを呼び出してグループ Alpha と Beta にアプリのチームの管理者ロールを付与すると、後で Alpha と Beta のみがアプリへの管理者アクセス権を持つことになります。別のグループ (デルタと呼びましょう) が以前にチームで管理者の役割を持っていた場合、そのグループは削除されます。 グループ スラッグの取得 ワークスペースのグループ スラッグを取得するには、 GET \/organizations\/{org-slug}\/groups 終点。 次の例では、複数のグループに管理者アクセスを許可します。 curl -X 'PUT' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/roles\/admin' \\\n -H 'accept: application\/json' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"groups\": [\n \"GROUP-SLUG-1\", \"GROUP-SLUG-2\"\n ]\n}' " }, 
{ "title" : "API を使用したアプリの削除 ", 
"url" : "api/アプリの追加と管理.html#api-を使用したアプリの削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリの追加と管理 \/ API を使用したアプリの削除 ", 
"snippet" : "削除は最終的なものです アプリの削除を元に戻すことはできないことに注意してください。削除すると、アプリを復元する方法はありません。 Bitrise API を使用してアプリを削除できます。唯一の必須パラメーターは、削除するアプリのアプリ スラッグです。 curl -X DELETE -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/THE-APP-SLUG'...", 
"body" : "削除は最終的なものです アプリの削除を元に戻すことはできないことに注意してください。削除すると、アプリを復元する方法はありません。 Bitrise API を使用してアプリを削除できます。唯一の必須パラメーターは、削除するアプリのアプリ スラッグです。 curl -X DELETE -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/THE-APP-SLUG' " }, 
{ "title" : "新しいbitrise.ymlファイルをアップロードする ", 
"url" : "api/アプリの追加と管理.html#新しいbitrise-ymlファイルをアップロードする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリの追加と管理 \/ 新しいbitrise.ymlファイルをアップロードする ", 
"snippet" : "必要な役割 新しいアプリをアップロードするには、アプリのチームで管理者または所有者の役割が必要です bitrise.yml ファイル。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 の bitrise.yml ファイルには、ビルドの構成が含まれています。完全な YAML 構成を投稿することにより、API を介して現在のものを変更できます。以下の例では、次のようになります。 の作成 bitrise.yml フォーマット バージョン 11 を使用。 Bitrise ステップ ライブラリをデフォルトのステップ ソースとして設定し...", 
"body" : "必要な役割 新しいアプリをアップロードするには、アプリのチームで管理者または所有者の役割が必要です bitrise.yml ファイル。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 の bitrise.yml ファイルには、ビルドの構成が含まれています。完全な YAML 構成を投稿することにより、API を介して現在のものを変更できます。以下の例では、次のようになります。 の作成 bitrise.yml フォーマット バージョン 11 を使用。 Bitrise ステップ ライブラリをデフォルトのステップ ソースとして設定します。 スタックを Xcode 14 に設定します。 の設定 BITRISE_PROJECT_PATH を指す環境変数 build.gradle ファイル。 を追加する 脚本 ステップ。 コードがアプリのリポジトリのいずれかのブランチにプッシュされた場合に、プライマリ ワークフローをトリガーするトリガー マップを作成します。 curl --fail -X POST -H \"Authorization: $ACCESS_TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/$APP_SLUG\/bitrise.yml\" -d \\\n'{\n \"app_config_datastore_yaml\": {\n \"format_version\": 11,\n \"default_step_lib_source\": \"https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\",\n \"meta\": {\n \"bitrise.io\": {\n \"stack\": \"osx-xcode-14.0.x\"\n }\n },\n \"app\": {\n \"envs\": [\n {\n \"BITRISE_PROJECT_PATH\": \"build.gradle\",\n \"opts\": {\n \"is_expand\": false\n }\n }\n ]\n },\n \"workflows\": {\n \"primary\": {\n \"steps\": [\n {\n \"script@1\": {}\n }\n ]\n }\n },\n \"trigger_map\": [\n {\n \"push_branch\": \"*\",\n \"workflow\": \"primary\"\n }\n ]\n }\n}' このエンドポイントを呼び出すことで、アプリの現在のエンドポイントを置き換えます bitrise.yml ファイル。もちろん、このアップロードを変更することもできます bitrise.yml APIまたはWebサイト自体のいずれかを介して。 " }, 
{ "title" : "アプリの bitrise.yml ファイルの場所を変更する ", 
"url" : "api/アプリの追加と管理.html#アプリの-bitrise-yml-ファイルの場所を変更する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリの追加と管理 \/ アプリの bitrise.yml ファイルの場所を変更する ", 
"snippet" : "アプリの bitrise.yml 構成ファイルは、次の 2 つの場所に保存できます。 bitrise.io で。これは、すべてのアプリのデフォルト設定です。 アプリのリポジトリ内。 このようにして、構成ファイルのバージョン管理とメンテナンスを完全に制御できます。 bitrise.io のグラフィカルなワークフロー エディターを引き続き使用して構成を変更できますが、変更をリポジトリにコミットする必要があります。 API を使用して、ファイルの場所を取得および変更できます。 管理者アクセスが必要です の場所に関連する両方のエンドポイント bitrise.yml ファイルには、アプリへの管理者レベル...", 
"body" : "アプリの bitrise.yml 構成ファイルは、次の 2 つの場所に保存できます。 bitrise.io で。これは、すべてのアプリのデフォルト設定です。 アプリのリポジトリ内。 このようにして、構成ファイルのバージョン管理とメンテナンスを完全に制御できます。 bitrise.io のグラフィカルなワークフロー エディターを引き続き使用して構成を変更できますが、変更をリポジトリにコミットする必要があります。 API を使用して、ファイルの場所を取得および変更できます。 管理者アクセスが必要です の場所に関連する両方のエンドポイント bitrise.yml ファイルには、アプリへの管理者レベルのアクセスが必要です。 とともに GET\/apps\/{app-slug}\/bitrise.yml\/config エンドポイントで、ファイルの場所を取得できます。ここでの場所は、エンドポイントを呼び出すと、ファイルが bitrise.io に保存されているかリポジトリに保存されているかがわかることを意味します。エンドポイントはパラメーターを使用せず、応答で次の 2 つの値のいずれかを返します。 \"location\": \"bitrise.io\" \"location\": \"repository\" curl -X 'GET' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/bitrise.yml\/config' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' とともに PUT\/apps\/{app-slug}\/bitrise.yml\/config つまり、設定ファイルを bitrise.io で探すか、リポジトリで探すかを Bitrise に指示できます。このエンドポイントは、JSON オブジェクトの 2 つの値のいずれかを取ります。 \"location\": \"bitrise.io\" bitrise.io に設定ファイルを保存します。 \"location\": \"repository\" 構成ファイルをリポジトリに保存します。 構成ファイルをリポジトリにコミットします 場所が変わりますのでご注意ください repository Bitriseに検索するように指示するだけです bitrise.yml アプリのリポジトリにあるファイル。ファイルがリポジトリに存在しない場合、エンドポイントはエラーを返しませんが、Bitrise が構成ファイルを見つけられないため、ビルドを実行することはできません。 curl -X 'PUT' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/bitrise.yml\/config' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"location\": \"bitrise.io\"\n}' " }, 
{ "title" : "アプリ通知の管理 ", 
"url" : "api/アプリの追加と管理.html#アプリ通知の管理", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリの追加と管理 \/ アプリ通知の管理 ", 
"snippet" : "あなたは変えられる メール通知設定 いつでも API 呼び出しを介してアプリの PATCH\/apps\/{app-slug}\/update-email-notifications 終点。エンドポイントは次の 2 つのパラメーターを取ります。 on_failure : 失敗したビルドの電子メール通知設定。 on_success : ビルド成功時のメール通知設定。 両方のパラメーターは、次の 3 つの可能な値を取ります。 always : 常に通知を送信します。失敗したビルドのデフォルト値。 never : 通知を送信しません。 change : 次の場合にのみ通知を送信します。 ビルドステータス ...", 
"body" : "あなたは変えられる メール通知設定 いつでも API 呼び出しを介してアプリの PATCH\/apps\/{app-slug}\/update-email-notifications 終点。エンドポイントは次の 2 つのパラメーターを取ります。 on_failure : 失敗したビルドの電子メール通知設定。 on_success : ビルド成功時のメール通知設定。 両方のパラメーターは、次の 3 つの可能な値を取ります。 always : 常に通知を送信します。失敗したビルドのデフォルト値。 never : 通知を送信しません。 change : 次の場合にのみ通知を送信します。 ビルドステータス 同じブランチの以前のビルドと比較した変更。成功したビルドのデフォルト値。 たとえば、前回のビルドが成功した場合にのみ失敗したビルドの通知を受け取りたい場合は、次の値を設定する必要があります。 on_failure パラメータへ change (例の APP-SLUG をアプリのスラッグに置き換え、ACCESS-TOKEN を 個人アクセストークン ): curl -X 'PATCH' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/update-email-notifications' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"on_failure\": \"change\",\n}' " }, 
{ "title" : "ビルドのトリガーと中止 ", 
"url" : "api/ビルドのトリガーと中止.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドのトリガーと中止 ", 
"snippet" : "You can use the Bitrise API to trigger and abort builds of your apps. Define parameters for the build: for example, branch, tag or git commit to use. Custom Environment Variables can be defined as well. APIを使用したビルドのトリガーと中止に関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ {app-slug} \/ builds \/ {bui...", 
"body" : " You can use the Bitrise API to trigger and abort builds of your apps. Define parameters for the build: for example, branch, tag or git commit to use. Custom Environment Variables can be defined as well. APIを使用したビルドのトリガーと中止に関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ {app-slug} \/ builds \/ {build-slug} \/ abort 新しいビルドをトリガーします。 所有者、管理者、または開発者 POST \/ apps \/ {app-slug} \/ builds \/ {build-slug} \/ abort 特定のビルドを中止します。 所有者、管理者、または開発者 Bitrise APIを使用して、ビルドをトリガーおよび中止できます。ビルドのパラメーターを定義します。たとえば、使用するブランチ、タグ、またはgitcommitです。カスタム環境変数も定義できます。 " }, 
{ "title" : "APIを使用して新しいビルドをトリガーする ", 
"url" : "api/ビルドのトリガーと中止.html#apiを使用して新しいビルドをトリガーする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドのトリガーと中止 \/ APIを使用して新しいビルドをトリガーする ", 
"snippet" : "Bitrise APIを使用して新しいビルドをトリガーするには、 \/apps\/{APP-SLUG}\/builds 終点。 JSONオブジェクトでアプリスラッグと少なくとも1つのビルドパラメーターを指定する必要があります。 gitタグまたはgitcommitハッシュ ブランチ ワークフローID 必要な役割 APIを使用して新しいビルドをトリガーするには、アプリのチームに開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 JSONオブジェクトには、 hook_info オブジェクトと ...", 
"body" : "Bitrise APIを使用して新しいビルドをトリガーするには、 \/apps\/{APP-SLUG}\/builds 終点。 JSONオブジェクトでアプリスラッグと少なくとも1つのビルドパラメーターを指定する必要があります。 gitタグまたはgitcommitハッシュ ブランチ ワークフローID 必要な役割 APIを使用して新しいビルドをトリガーするには、アプリのチームに開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 JSONオブジェクトには、 hook_info オブジェクトと type キーと bitrise キーの値として。 これは、以下を指定する最小限のサンプルJSON本文です。 main の値として branch パラメータ： {\n \"hook_info\": {\n \"type\": \"bitrise\",\n },\n \"build_params\": {\n \"branch\": \"main\"\n }\n} そして、これがビルドをトリガーするためのcurlリクエスト構文です main ブランチ： curl --fail -H \"Authorization: $THE_ACCESS_TOKEN\" \"https:\/\/app.bitrise.io\/app\/$APP_SLUG\/build\/start.json\" -d \\\n'{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\":{\n \"branch\":\"main\"\n }\n}'\n インタラクティブなcURL呼び出しコンフィギュレーター をクリックすると、インタラクティブなcURL呼び出しコンフィギュレータを見つけることができます。 Start\/Schedule a build アプリのボタン bitrise.io ページと切り替え Advanced ポップアップのモード。ポップアップの下部に、 curl ポップアップで指定したパラメータに基づいて呼び出します。 前の例では、このJSONペイロードを文字列として渡しました。正確には、文字列にシリアル化されたJSONオブジェクトとして渡しました。 オブジェクトとして渡すこともできます（たとえば、JavaScriptから呼び出す場合）。これを行うには、ルートを含めます payload 要素、または代わりに、JSONオブジェクトをの値として設定します payload POSTパラメータ。 これは、を使用したjQueryの例です。 payload パラメータ： $.post(\"https:\/\/api.bitrise.io\/app\/APP-SLUG\/builds\/\", {\n \"payload\":{\n \"hook_info\":{\n \"type\":\"bitrise\",\n },\n \"build_params\":{\n \"branch\":\"master\"\n }\n }\n}) ビルドをトリガーするときに、いくつかの異なるビルドパラメーターを指定できます。パラメータはで設定する必要があります build_params 物体。 " }, 
{ "title" : "ビルドするブランチ、コミット、またはタグを設定する ", 
"url" : "api/ビルドのトリガーと中止.html#ビルドするブランチ-コミット-またはタグを設定する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドのトリガーと中止 \/ APIを使用して新しいビルドをトリガーする \/ ビルドするブランチ、コミット、またはタグを設定する ", 
"snippet" : "通話でGit固有のパラメーターを設定できます。 NS branch パラメータは、構築するソースブランチを指定します。これは、git commitのブランチ、またはプルリクエストビルドの場合はプルリクエストのソースブランチのいずれかです。 curl --fail -H \"Authorization: $THE_ACCESS_TOKEN\" \"https:\/\/app.bitrise.io\/app\/$APP_SLUG\/build\/start.json\" -d \\ '{ \"hook_info\": { \"type\": \"bitrise\" }, \"build_params\": { \"branch\": \"m...", 
"body" : "通話でGit固有のパラメーターを設定できます。 NS branch パラメータは、構築するソースブランチを指定します。これは、git commitのブランチ、またはプルリクエストビルドの場合はプルリクエストのソースブランチのいずれかです。 curl --fail -H \"Authorization: $THE_ACCESS_TOKEN\" \"https:\/\/app.bitrise.io\/app\/$APP_SLUG\/build\/start.json\" -d \\\n'{\n\t\"hook_info\": {\n\t\t\"type\": \"bitrise\"\n\t},\n\t\"build_params\": {\n\t\t\"branch\": \"main\"\n\t}\n }' 特定のgitcommitまたはgitタグを作成することもできます。コミットハッシュまたはタグのいずれかを設定する必要があります。 build_params 物体。ビルドのコミットメッセージを設定することもできます commit_message パラメータ。 curl --fail -H \"Authorization: $THE_ACCESS_TOKEN\" \"https:\/\/app.bitrise.io\/app\/$APP_SLUG\/build\/start.json\" -d \\\n'{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"commit_hash\": \"0000ffffeeeee\",\n \"commit_message\": \"testing\"\n }\n}'\n パラメータの優先度 NS Git Clone ステップには、次のパラメーター優先順位があります。 commit_hash 鬼ごっこ ブランチ 複数のパラメーターを指定した場合、優先度の低いパラメーターは無視されます。 無視されたパラメータは引き続きログに記録されます。それらはステップで利用可能になり、ビルドに表示されます 詳細とアドオン ページが Git Clone ステップは、チェックアウトに最も具体的なパラメーターを使用します。 " }, 
{ "title" : "プルリクエストビルドのパラメータの設定 ", 
"url" : "api/ビルドのトリガーと中止.html#プルリクエストビルドのパラメータの設定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドのトリガーと中止 \/ APIを使用して新しいビルドをトリガーする \/ プルリクエストビルドのパラメータの設定 ", 
"snippet" : "プルリクエストビルドの場合は、 branch_dest プルリクエストの宛先またはターゲットブランチを設定するパラメータ。 PRはこのブランチにマージされますが、その前に、Bitriseはマージ後のコードの外観に基づいてアプリをビルドします。これは、たとえば、PRビルドがWebhookによって自動的にトリガーされたときに発生します。 NS branch_repo_owner と branch_dest_repo_owner パラメータは、リポジトリの所有者を識別し、プルリクエストに関係するブランチを明確に識別するために使用されます。 フォークからのプルリクエストビルド 指定しない場合 bran...", 
"body" : "プルリクエストビルドの場合は、 branch_dest プルリクエストの宛先またはターゲットブランチを設定するパラメータ。 PRはこのブランチにマージされますが、その前に、Bitriseはマージ後のコードの外観に基づいてアプリをビルドします。これは、たとえば、PRビルドがWebhookによって自動的にトリガーされたときに発生します。 NS branch_repo_owner と branch_dest_repo_owner パラメータは、リポジトリの所有者を識別し、プルリクエストに関係するブランチを明確に識別するために使用されます。 フォークからのプルリクエストビルド 指定しない場合 branch_repo_owner と branch_dest_repo_owner パラメータの場合、APIはプルリクエストのビルドがフォークからのものであると想定します。そのため、手動による承認が出るまで保留になる可能性があります。 プルリクエストビルドの承認。 PR自体を識別するには、 pull_request_id パラメータ：整数を取ります。たとえば、GitHubのPRの番号。 curl --fail -H \"Authorization: $THE_ACCESS_TOKEN\" \"https:\/\/app.bitrise.io\/app\/$APP_SLUG\/build\/start.json\" -d \\\n'{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"commit_hash\": \"fffff000000eeeeee\"\n }\n}' gitプロバイダーがサポートしている場合は、 pull_request_merge_branch PRのブランチの事前マージされた状態を構築するためのパラメータ。別の選択肢は pull_request_head_branch パラメータ：これは、PRのソースを指す必要がある特別なgitrefです。 リポジトリのフォークから開いたPRからビルドをトリガーする場合は、 pull_request_repository_url パラメータ。値はフォークのURLである必要があります。 " }, 
{ "title" : "Gitステータスレポートをスキップする ", 
"url" : "api/ビルドのトリガーと中止.html#gitステータスレポートをスキップする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドのトリガーと中止 \/ APIを使用して新しいビルドをトリガーする \/ Gitステータスレポートをスキップする ", 
"snippet" : "あなたが持っている場合 webhook 設定すると、Bitriseはビルドに関するステータスレポートをgitプロバイダーに送信します。ただし、これはAPIを介して無効にすることができます。 skip_git_status_report パラメータ。に設定されている場合 true 、ビルドステータスレポートは送信されません。 curl --fail -H \"Authorization: $THE_ACCESS_TOKEN\" \"https:\/\/app.bitrise.io\/app\/$APP_SLUG\/build\/start.json\" -d \\ '{ \"hook_info\":{ \"type\":\"b...", 
"body" : "あなたが持っている場合 webhook 設定すると、Bitriseはビルドに関するステータスレポートをgitプロバイダーに送信します。ただし、これはAPIを介して無効にすることができます。 skip_git_status_report パラメータ。に設定されている場合 true 、ビルドステータスレポートは送信されません。 curl --fail -H \"Authorization: $THE_ACCESS_TOKEN\" \"https:\/\/app.bitrise.io\/app\/$APP_SLUG\/build\/start.json\" -d \\\n'{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"skip_git_status_report\": \"true\"\n }\n}'\n " }, 
{ "title" : "環境変数の指定 ", 
"url" : "api/ビルドのトリガーと中止.html#環境変数の指定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドのトリガーと中止 \/ APIを使用して新しいビルドをトリガーする \/ 環境変数の指定 ", 
"snippet" : "追加で定義できます 環境変数 （Env Vars）ビルド用。これらの追加の変数は、 Secrets と App Env Vars 、つまり、ビルド構成で定義されたEnv Var（App Env Varなど）のみを上書きすることはできません。 秘密 。 を使用して追加の環境変数を定義します 環境 パラメータ。このパラメータは、 オブジェクトの配列 、および配列のすべての項目には、少なくとも mapped_to 財産。これには次のものが含まれている必要があります。 EnvVarのキー。 Env変数の値。 EnvVar名の置き換え デフォルトでは、値内のEnv Var名は、トリガーされたビルドでター...", 
"body" : "追加で定義できます 環境変数 （Env Vars）ビルド用。これらの追加の変数は、 Secrets と App Env Vars 、つまり、ビルド構成で定義されたEnv Var（App Env Varなど）のみを上書きすることはできません。 秘密 。 を使用して追加の環境変数を定義します 環境 パラメータ。このパラメータは、 オブジェクトの配列 、および配列のすべての項目には、少なくとも mapped_to 財産。これには次のものが含まれている必要があります。 EnvVarのキー。 Env変数の値。 EnvVar名の置き換え デフォルトでは、値内のEnv Var名は、トリガーされたビルドでターゲット環境からの実際の値に置き換えられます。この動作は、を設定することで無効にできます is_expand フラグを立てる false 。 \"environments\":[\n {\"mapped_to\":\"API_TEST_ENV\",\"value\":\"This is the test value\",\"is_expand\":true},\n {\"mapped_to\":\"HELP_ENV\",\"value\":\"$HOME variable contains user's home directory path\",\"is_expand\":false},\n] " }, 
{ "title" : "ビルドのワークフローの設定 ", 
"url" : "api/ビルドのトリガーと中止.html#ビルドのワークフローの設定", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドのトリガーと中止 \/ APIを使用して新しいビルドをトリガーする \/ ビルドのワークフローの設定 ", 
"snippet" : "デフォルトでは、トリガーされたビルドのワークフローは、 build_params とあなたのアプリの トリガーマップ 。これは、Webhookがトリガーマップに基づいてビルドのワークフローを自動的に選択する方法と同じです。 APIを使用すると、この選択を上書きして、使用するワークフローを正確に指定できます。 追加する workflow_id あなたへのパラメータ build_params その特定のビルドに使用するワークフローを指定します。これは、を指定する呼び出しの例です。 deploy ワークフロー： #curl --fail -X POST -H \"Authorization: $THE...", 
"body" : "デフォルトでは、トリガーされたビルドのワークフローは、 build_params とあなたのアプリの トリガーマップ 。これは、Webhookがトリガーマップに基づいてビルドのワークフローを自動的に選択する方法と同じです。 APIを使用すると、この選択を上書きして、使用するワークフローを正確に指定できます。 追加する workflow_id あなたへのパラメータ build_params その特定のビルドに使用するワークフローを指定します。これは、を指定する呼び出しの例です。 deploy ワークフロー： #curl --fail -X POST -H \"Authorization: $THE_ACCESS_TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/$APP_SLUG\/builds\/start.json\" -d \\\ncurl --fail -X POST -H \"Authorization: $THE_ACCESS_TOKEN\" \"https:\/\/app.bitrise.io\/app\/$APP_SLUG\/build\/start.json\" -d \\\n'{\n \"hook_info\": {\n \"type\": \"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"main\",\n \"workflow_id\": \"primary\"\n }\n}' " }, 
{ "title" : "ビルドを中止する ", 
"url" : "api/ビルドのトリガーと中止.html#ビルドを中止する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドのトリガーと中止 \/ ビルドを中止する ", 
"snippet" : "実行中のビルドを中止し、中止の理由を設定したり、ビルドに関する電子メール通知を送信するかどうかを指定したりできます。 必要な役割 APIを使用して着信または発信のWebhookを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 単にビルドを中止するには、 \/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort 終点。次の 3 つのパラメーターが必要です。 アプリのスラッグ。 ビルドスラッグ。 ビルド中止パラメーター本体。中止に特定のパラメ...", 
"body" : "実行中のビルドを中止し、中止の理由を設定したり、ビルドに関する電子メール通知を送信するかどうかを指定したりできます。 必要な役割 APIを使用して着信または発信のWebhookを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 単にビルドを中止するには、 \/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort 終点。次の 3 つのパラメーターが必要です。 アプリのスラッグ。 ビルドスラッグ。 ビルド中止パラメーター本体。中止に特定のパラメータを設定したくない場合は、これを空のままにすることができます。 -d \"{}\" . curl -X POST -H \"Authorization: ACCESS-TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort\" -d \"{}\" を使用して、ビルドを中止する理由を設定できます。 abort_reason パラメータ。このパラメーターは文字列を取り、アプリのビルドページに表示されます。 curl -X POST -H \"Authorization: ACCESS-TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort\" -d '{\"abort_reason\": \"aborted for a reason\"}'\n 通常、中止されたビルドは失敗したビルドとしてカウントされます。使用 abort_with_success ビルドを中止するが、それでも成功したものとしてカウントするパラメーター。 gitプロバイダーに送信されたステータスレポートには、ビルドが成功したことが示されます。 bitrise.io 次のように表示されます Cancelled 。 curl -X POST -H \"Authorization: ACCESS-TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort\" -d '{\"abort_with_success\": true}' アプリの設定によっては、ビルドが中止されたときにBitriseがチームメンバーにメール通知を送信する場合があります。通知が必要ない場合は、 skip_notifications パラメータを true 。 curl -X POST -H \"Authorization: ACCESS-TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort\" -d '{\"skip_notifications\": true}' " }, 
{ "title" : "アプリのビルドの管理 ", 
"url" : "api/アプリのビルドの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリのビルドの管理 ", 
"snippet" : "Bitrise APIを使用して、アプリのビルドを一覧表示したり、特定のビルドに関するすべての情報を取得したり、ビルドログを表示したり、200日以上経過したアーカイブビルドを表示したりできます。 BitriseAPIを使用してリストすることができます アプリの ビルド、特定のビルドに関するすべての情報の取得、ビルドログの表示、および200日より古いアーカイブビルドの表示。 アプリのビルドの管理に使用されるエンドポイント エンドポイント 関数 アプリのチームで必要な役割 GET \/ apps \/ {app-slug} \/ archived-builds 指定したアプリのアーカイブビルドを一覧表示...", 
"body" : "Bitrise APIを使用して、アプリのビルドを一覧表示したり、特定のビルドに関するすべての情報を取得したり、ビルドログを表示したり、200日以上経過したアーカイブビルドを表示したりできます。 BitriseAPIを使用してリストすることができます アプリの ビルド、特定のビルドに関するすべての情報の取得、ビルドログの表示、および200日より古いアーカイブビルドの表示。 アプリのビルドの管理に使用されるエンドポイント エンドポイント 関数 アプリのチームで必要な役割 GET \/ apps \/ {app-slug} \/ archived-builds 指定したアプリのアーカイブビルドを一覧表示します。 テスター\/QA GET \/ apps \/ {app-slug} \/ build-workflows 指定されたアプリに対していつでもトリガーされたワークフローを一覧表示します。 テスター\/QA GET \/ apps \/ {app-slug} \/ builds 指定したアプリのすべてのビルドを一覧表示します。 テスター\/QA GET \/ apps \/ {app-slug} \/ builds \/ {build-slug} 特定のアプリの指定されたビルドを取得します。 テスター\/QA GET \/apps\/{app-slug}\/builds\/{build-slug}\/bitrise.yml 取得する bitrise.yml 指定されたアプリのビルドの1つのファイル。 デベロッパー GET \/ apps \/ {app-slug} \/ builds \/ {build-slug} \/ log アプリの指定されたビルドのビルドログを取得します。 デベロッパー GET \/ builds 認証されたアカウントでアクセスできるすべてのBitriseビルドを一覧表示します。 該当なし " }, 
{ "title" : "アプリのビルドデータの表示 ", 
"url" : "api/アプリのビルドの管理.html#アプリのビルドデータの表示", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリのビルドの管理 \/ アプリのビルドデータの表示 ", 
"snippet" : "APIを使用して、関連するすべてのビルド情報にアクセスできます。 あなたはアプリのすべてのビルドを取得することができます GET \/apps\/{app-slug}\/builds 終点。ビルドに使用されたワークフローなどの追加のパラメーターを設定して、フィルターとして機能させることができます。次の形式でパラメータを設定します。 GET \/apps\/{app-slug}\/builds?parameter_name=parameter_value&other_parameter_name=other_parameter_value パラメータの完全なリストは、 APIリファレンス ドキュメンテーショ...", 
"body" : "APIを使用して、関連するすべてのビルド情報にアクセスできます。 あなたはアプリのすべてのビルドを取得することができます GET \/apps\/{app-slug}\/builds 終点。ビルドに使用されたワークフローなどの追加のパラメーターを設定して、フィルターとして機能させることができます。次の形式でパラメータを設定します。 GET \/apps\/{app-slug}\/builds?parameter_name=parameter_value&other_parameter_name=other_parameter_value パラメータの完全なリストは、 APIリファレンス ドキュメンテーション。 200日間のビルド保持 に ビルド アプリのページには、過去200日間のビルドのみが表示されます。あなたがいる場合も同じ制限が適用されます 特定のビルドを検索する ページ上。この制限は、API呼び出しにも適用されます。 GET\/apps\/{app-slug}\/builds エンドポイントおよび関連するエンドポイントは、過去200日間のビルドのみを返すことができます。 ただし、正確なビルドURLがわかっている場合は、200日より古いビルドを表示できます。古いビルドを表示する必要があるが、正確なビルドURLがわからない場合は、サポートチームにお問い合わせください。 正確なビルドURLがわかっている場合は、ビルドにアクセスできます。 あなたは使用することができます GET\/apps\/{app-slug}\/archived-builds APIエンドポイント： アプリのアーカイブされたビルドの一覧表示。 ビルドしたビルドのリスト development プライマリワークフローで分岐 リクエスト： curl -X GET 'https:\/\/api.bitrise.io\/v0.1\/apps\/$APP-SLUG\/builds?branch=development&workflow=primary' -H 'accept: application\/json' -H 'Authorization: $ACCESS_TOKEN' 応答（この例では、応答は単一のビルドのみを示しています）： {\n \"data\": [\n {\n \"triggered_at\": \"2022-07-18T13:12:35Z\",\n \"started_on_worker_at\": null,\n \"environment_prepare_finished_at\": null,\n \"finished_at\": \"2022-07-18T13:12:47Z\",\n \"slug\": \"294e02x8-554c-44f8-84a5-59867a66df83\",\n \"status\": 3,\n \"status_text\": \"aborted\",\n \"abort_reason\": \"User X requested to abort this build.\",\n \"is_on_hold\": false,\n \"is_processed\": true,\n \"is_status_sent\": false,\n \"branch\": \"development\",\n \"build_number\": 8,\n \"commit_hash\": null,\n \"commit_message\": null,\n \"tag\": null,\n \"triggered_workflow\": \"primary\",\n \"triggered_by\": null,\n \"machine_type_id\": \"g2.4core\",\n \"stack_identifier\": \"osx-xcode-13.3.x\",\n \"original_build_params\": {\n \"branch\": \"development\"\n },\n \"pipeline_workflow_id\": null,\n \"pull_request_id\": 0,\n \"pull_request_target_branch\": null,\n \"pull_request_view_url\": null,\n \"commit_view_url\": null,\n \"credit_cost\": null\n }\n ],\n \"paging\": {\n \"total_item_count\": 1,\n \"page_item_limit\": 50\n }\n} 特定のビルドで同じデータを取得するには、 GET \/apps\/{app-slug}\/builds\/{build-slug} 。また、を表示することができます bitrise.yml 追加することによるビルドのファイル \/bitrise.yml URLの最後まで。 ステータス整数を使用して失敗したビルドを一覧表示する ステータス整数を使用して、ビルドステータスに基づいてビルドをフィルタリングできます。ステータス整数は次のとおりです。 0-終了していません（これらは、開始中、実行中、または保留中のビルドです） 1-成功 2-失敗しました 3-失敗で中止 4-成功して中止 リクエスト： curl -X GET 'https:\/\/api.bitrise.io\/v0.1\/apps\/$APP-SLUG\/builds?branch=development&status=2' -H 'accept: application\/json' -H 'Authorization: $ACCESS_TOKEN' 応答（この例では、2つのビルドが失敗しました）： {\n \"data\": [\n {\n \"triggered_at\": \"2022-08-01T09:20:11Z\",\n \"started_on_worker_at\": \"2022-08-01T09:20:15Z\",\n \"environment_prepare_finished_at\": \"2022-08-01T09:20:15Z\",\n \"finished_at\": \"2022-08-01T09:21:32Z\",\n \"slug\": \"104d4527-f6a0-4362-b595-77349ccc1264\",\n \"status\": 2,\n \"status_text\": \"error\",\n \"abort_reason\": null,\n \"is_on_hold\": false,\n \"is_processed\": true,\n \"is_status_sent\": false,\n \"branch\": \"main\",\n \"build_number\": 26,\n \"commit_hash\": null,\n \"commit_message\": null,\n \"tag\": null,\n \"triggered_workflow\": \"Appetize.io\",\n \"triggered_by\": \"manual-danicsorba\",\n \"machine_type_id\": \"g2.4core\",\n \"stack_identifier\": \"osx-xcode-13.2.x\",\n \"original_build_params\": {\n \"branch\": \"main\",\n \"workflow_id\": \"Appetize.io\"\n },\n \"pipeline_workflow_id\": null,\n \"pull_request_id\": 0,\n \"pull_request_target_branch\": null,\n \"pull_request_view_url\": null,\n \"commit_view_url\": null,\n \"credit_cost\": 4\n },\n {\n \"triggered_at\": \"2022-04-27T10:25:47Z\",\n \"started_on_worker_at\": \"2022-04-27T10:26:24Z\",\n \"environment_prepare_finished_at\": \"2022-04-27T10:26:24Z\",\n \"finished_at\": \"2022-04-27T10:27:16Z\",\n \"slug\": \"b8599c39-201d-4cc9-8ef5-f28b75b7d910\",\n \"status\": 2,\n \"status_text\": \"error\",\n \"abort_reason\": null,\n \"is_on_hold\": false,\n \"is_processed\": true,\n \"is_status_sent\": false,\n \"branch\": \"main\",\n \"build_number\": 25,\n \"commit_hash\": null,\n \"commit_message\": null,\n \"tag\": null,\n \"triggered_workflow\": \"Appetize.io\",\n \"triggered_by\": \"manual-danicsorba\",\n \"machine_type_id\": \"g2.4core\",\n \"stack_identifier\": \"osx-xcode-13.2.x\",\n \"original_build_params\": {\n \"branch\": \"main\",\n \"workflow_id\": \"Appetize.io\"\n },\n \"pipeline_workflow_id\": null,\n \"pull_request_id\": 0,\n \"pull_request_target_branch\": null,\n \"pull_request_view_url\": null,\n \"commit_view_url\": null,\n \"credit_cost\": 2\n }\n ],\n \"paging\": {\n \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} これらのエンドポイントのいずれかをで試すことができます APIリファレンス ドキュメンテーション。 " }, 
{ "title" : "アプリのアーカイブされたビルドの一覧表示 ", 
"url" : "api/アプリのビルドの管理.html#アプリのアーカイブされたビルドの一覧表示", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ アプリのビルドの管理 \/ アプリのアーカイブされたビルドの一覧表示 ", 
"snippet" : "デフォルトでは、200日以内のビルドのみを表示できます。これは、ほとんどのAPIエンドポイントにも当てはまります。ただし、を呼び出すことで、古いアーカイブビルドを表示することもできます。 GET \/apps\/{app-slug}\/archived-builds 終点。 エンドポイントには、2つの必須パラメーターがあります。 後 前 両方のパラメーターはUnixタイムスタンプを使用して表される日付であり、両方とも必須です。つまり、アーカイブされたビルドを表示する正確な期間を指定する必要があります。 2021-01-01から2022-01-01までのすべてのアーカイブビルドの一覧表示 curl -...", 
"body" : "デフォルトでは、200日以内のビルドのみを表示できます。これは、ほとんどのAPIエンドポイントにも当てはまります。ただし、を呼び出すことで、古いアーカイブビルドを表示することもできます。 GET \/apps\/{app-slug}\/archived-builds 終点。 エンドポイントには、2つの必須パラメーターがあります。 後 前 両方のパラメーターはUnixタイムスタンプを使用して表される日付であり、両方とも必須です。つまり、アーカイブされたビルドを表示する正確な期間を指定する必要があります。 2021-01-01から2022-01-01までのすべてのアーカイブビルドの一覧表示 curl -X 'GET' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/0eca592d27b60347\/archived-builds?after=1609459200&before=1640995200' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: XTdHTcLYVQdodgiRKQU7hlCpd64s43yB04XPxiwJw4tI0Zo4uAA2-MmV7Sl_sju6lbdHlljmlRphv0R_07InKQ' " }, 
{ "title" : "着信および発信Webhook ", 
"url" : "api/着信および発信webhook.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 着信および発信Webhook ", 
"snippet" : "着信と発信の両方のWebhookは、BitriseAPIを使用して設定できます。これらは、自動ビルドトリガーおよびビルドイベントのその他のサービスへのレポートにとって重要です。 着信と発信の両方のWebhookは、BitriseAPIを使用して設定できます。それらは自動ビルドにとって重要です トリガー ビルドイベントのその他のサービスへのレポート。 着信および発信Webhookに関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ {app-slug} \/ register-webhook 特定のアプリケーションの着信Webhookを登録します。...", 
"body" : "着信と発信の両方のWebhookは、BitriseAPIを使用して設定できます。これらは、自動ビルドトリガーおよびビルドイベントのその他のサービスへのレポートにとって重要です。 着信と発信の両方のWebhookは、BitriseAPIを使用して設定できます。それらは自動ビルドにとって重要です トリガー ビルドイベントのその他のサービスへのレポート。 着信および発信Webhookに関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ {app-slug} \/ register-webhook 特定のアプリケーションの着信Webhookを登録します。 所有者または管理者 GET \/ apps \/ {app-slug} \/ outgoing-webhooks アプリの発信Webhookを一覧表示します。 所有者または管理者 POST \/ apps \/ {app-slug} \/ outgoing-webhooks アプリの発信Webhookを作成します。 所有者または管理者 PUT \/ apps \/ {app-slug} \/ outgoing-webhooks \/ {app-webhook-slug} アプリの発信Webhookを更新します。 所有者または管理者 DELETE \/ apps \/ {app-slug} \/ outgoing-webhooks \/ {app-webhook-slug} アプリの発信Webhookを削除します。 所有者または管理者 " }, 
{ "title" : "着信WebhookをAPIに登録する ", 
"url" : "api/着信および発信webhook.html#着信webhookをapiに登録する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 着信および発信Webhook \/ 着信WebhookをAPIに登録する ", 
"snippet" : "着信Webhookを使用すると、ユーザーはBitriseでアプリの自動トリガーを設定できます。たとえば、GitHubに登録されているBitrise Webhookは、コードがGitHubリポジトリにプッシュされたときにビルドを自動的にトリガーできます。 必要な役割 APIを使用して着信または発信のWebhookを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 Webhookを設定するには、次のことを行う必要があります BitriseアカウントをGitプロバイ...", 
"body" : "着信Webhookを使用すると、ユーザーはBitriseでアプリの自動トリガーを設定できます。たとえば、GitHubに登録されているBitrise Webhookは、コードがGitHubリポジトリにプッシュされたときにビルドを自動的にトリガーできます。 必要な役割 APIを使用して着信または発信のWebhookを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 Webhookを設定するには、次のことを行う必要があります BitriseアカウントをGitプロバイダーアカウントに接続します ：これにより、BitriseはWebhookを自動的に登録できます。 を呼び出してWebhookを登録します register-webhook 既存のアプリスラッグを持つエンドポイント： curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/register-webhook' これにより、アプリのGitプロバイダーにWebhookが登録されます。その後、設定することができます 自動トリガー ウェブサイトまたはアプリのトリガーマップを介して bitrise.yml ファイル。 " }, 
{ "title" : "APIを使用した発信Webhookの作成 ", 
"url" : "api/着信および発信webhook.html#apiを使用した発信webhookの作成", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 着信および発信Webhook \/ APIを使用した発信Webhookの作成 ", 
"snippet" : "発信Webhookは、他のサービスとの統合を可能にします。具体的には、他のサービスに通知するために使用されます。現在、ビルドイベント通知のみがサポートされています。サポートされているビルドイベントには、ビルドのトリガーとビルドの終了の2つがあります。 ステータスレポートの作成 ビルドステータスについてGitプロバイダーに通知する場合、発信Webhookは必要ありません。 アプリケーションの発信Webhookを設定するには、アプリ自体と少なくとも2つの作成パラメーターを指定する必要があります。 Webhook URL：これはBitriseと統合したいサービスから取得できます。 Webhookをト...", 
"body" : "発信Webhookは、他のサービスとの統合を可能にします。具体的には、他のサービスに通知するために使用されます。現在、ビルドイベント通知のみがサポートされています。サポートされているビルドイベントには、ビルドのトリガーとビルドの終了の2つがあります。 ステータスレポートの作成 ビルドステータスについてGitプロバイダーに通知する場合、発信Webhookは必要ありません。 アプリケーションの発信Webhookを設定するには、アプリ自体と少なくとも2つの作成パラメーターを指定する必要があります。 Webhook URL：これはBitriseと統合したいサービスから取得できます。 Webhookをトリガーするイベント。現在、これには2つの可能な値があります。 all と build 。 必要な役割 APIを使用して着信または発信のWebhookを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 リクエストでキーと値のペアを指定して、カスタムヘッダーを設定することもできます。 URLが「example.webhook.com」の新しい発信Webhook リクエスト： curl -X POST \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/outgoing-webhooks\" -H \"accept: application\/json\" -H \"Authorization: ACCESS-TOKEN\" -H \"Content-Type: application\/json\" -d \"{ \\\"events\\\": [ \\\"build\\\" ], \\\"url\\\": \\\"example.webhook.com\\\", \\\"headers\\\": { \\\"KEY\\\": \\\"value\\\" }}\"\n 応答： {\n \"slug\": \"01D72ARNH4KR7KMW3DG3NBKXRK\",\n \"url\": \"example.webhook.com\",\n \"events\": [\n \"build\"\n ],\n \"headers\": {\n \"KEY\": \"value\"\n },\n \"registered_by_addon\":false,\n \"created_at\": \"2019-03-28T14:20:22.436825Z\",\n \"updated_at\": \"2019-03-28T14:20:22.436825Z\"\n} " }, 
{ "title" : "APIを使用した発信Webhookの変更と削除 ", 
"url" : "api/着信および発信webhook.html#apiを使用した発信webhookの変更と削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 着信および発信Webhook \/ APIを使用した発信Webhookの変更と削除 ", 
"snippet" : "既存のWebhookを変更するには、リクエストですべての必須パラメーターを指定する必要があります。つまり、URLのみを変更したい場合でも、リクエストには有効な値が含まれている必要があります。 events パラメータ。 必要な役割 APIを使用して着信または発信のWebhookを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 発信Webhookの変更 リクエスト： curl -X PUT \"https:\/\/api.bitrise.io\/v0.1\/apps\/A...", 
"body" : "既存のWebhookを変更するには、リクエストですべての必須パラメーターを指定する必要があります。つまり、URLのみを変更したい場合でも、リクエストには有効な値が含まれている必要があります。 events パラメータ。 必要な役割 APIを使用して着信または発信のWebhookを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 発信Webhookの変更 リクエスト： curl -X PUT \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/outgoing-webhooks\/WEBHOOK-SLUG\" -H \"accept: application\/json\" -H \"Authorization: ACCESS-TOKEN\" -H \"Content-Type: application\/json\" -d\" { \\\"events\\\": [ \\\"all\\\" ], \\\"headers\\\": { \\\"Modified\\\": \\\"1212\\\" }, \\\"url\\\": \\\"example2.webhook.com\\\"}\" 応答： {\n \"data\": {\n \"slug\": \"WEBHOOK-SLUG\",\n \"url\": \"example2.webhook.com\",\n \"events\": [\n \"all\"\n ],\n \"headers\": {\n \"Modified\": \"1212\"\n },\n \"registered_by_addon\": false,\n \"created_at\": \"2019-03-28T14:20:22.436825Z\",\n \"updated_at\": \"2019-03-28T14:20:22.436825Z\"\n }\n} 発信Webhookを削除するには、リクエストにアプリスラッグとWebhookスラッグを指定するだけです。 curl -X DELETE \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/outgoing-webhooks\/WEBHOOK-SLUG\" -H \"accept: application\/json\" -H \"Authorization: ACCESS-TOKEN\" " }, 
{ "title" : "iOSコード署名ファイルの管理 ", 
"url" : "api/iosコード署名ファイルの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ iOSコード署名ファイルの管理 ", 
"snippet" : "You can upload, update, list, and delete iOS code signing files with the Bitrise API: we have separate endpoints for certificates and provisioning profiles. このガイドでは、BitriseAPIを使用してiOSコード署名ファイルを管理する方法について説明します。 UIで同じことを行う方法について詳しく知りたい場合は、チェックアウトしてください。 iOSコード署名APIを使用して、iOSコード署名ファイルをアップロード、更新、一覧表示、および...", 
"body" : " You can upload, update, list, and delete iOS code signing files with the Bitrise API: we have separate endpoints for certificates and provisioning profiles. このガイドでは、BitriseAPIを使用してiOSコード署名ファイルを管理する方法について説明します。 UIで同じことを行う方法について詳しく知りたい場合は、チェックアウトしてください。 iOSコード署名APIを使用して、iOSコード署名ファイルをアップロード、更新、一覧表示、および削除できます。このガイドでは、これらのコード署名エンドポイントをどのように、どのような順序で使用するかを示します。 iOSプロビジョニングプロファイルに関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ {app-slug} \/ Provisioning-profiles プロビジョニングファイルを作成する 所有者または管理者 POST \/ apps \/ {app-slug} \/ Provisioning-profiles \/ {provisioning-profile-slug} \/ uploaded アップロードプロセスを確認します 所有者または管理者 PATCH \/ apps \/ {app-slug} \/ Provisioning-profiles \/ {provisioning-profile-slug} アップロードされたプロビジョニングファイルを更新します 所有者または管理者 GET \/ apps \/ {app-slug} \/ Provisioning-profiles アップロードされたプロビジョニングファイルのリストを取得します 所有者または管理者 GET \/ apps \/ {app-slug} \/ Provisioning-profiles \/ {provisioning-profile-slug} 特定のプロビジョニングファイルのデータを取得する 所有者または管理者 DELETE \/ apps \/ {app-slug} \/ Provisioning-profiles \/ {provisioning-profile-slug} アップロードされたプロビジョニングファイルを削除します 所有者または管理者 iOSコード署名証明書に関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ {app-slug} \/ build-certificates ビルド証明書を作成する 所有者または管理者 POST \/ apps \/ {app-slug} \/ build-certificates \/ {build-certificate-slug} \/ uploaded アップロードプロセスを確認します 所有者または管理者 PATCH \/ apps \/ {app-slug} \/ build-certificates \/ {build-certificate-slug} アップロードされたビルド証明書を更新します 所有者または管理者 GET \/ apps \/ {app-slug} \/ build-certificates アップロードされたビルド証明書のリストを取得します 所有者または管理者 GET \/ apps \/ {app-slug} \/ build-certificates \/ {build-certificate-slug} 特定のビルド証明書のデータを取得する 所有者または管理者 DELETE \/ apps \/ {app-slug} \/ build-certificates \/ {build-certificate-slug} アップロードしたビルド証明書を削除する 所有者または管理者 iOSアプリ入門 Appleサービス接続 APIキーを使用してAppleサービスに接続する AppleIDを使用してAppleサービスに接続する ステップ入力でAppleサービスに接続する Apple認証が必要な手順 コード署名 iOSコード署名 iOSの展開 外部テスト用のiOSアプリのデプロイ iOSアプリをAppStoreConnectにデプロイする " }, 
{ "title" : "iOSコード署名ファイルの作成とアップロード ", 
"url" : "api/iosコード署名ファイルの管理.html#iosコード署名ファイルの作成とアップロード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ iOSコード署名ファイルの管理 \/ iOSコード署名ファイルの作成とアップロード ", 
"snippet" : "必要な役割 Bitrise APIを使用してiOSコード署名ファイルを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 選択したBitriseアプリに新しいiOSコード署名ファイルを追加できます。次のことを行う必要があります。 のPOSTメソッドを呼び出します provisioning-profiles また build-certificates エンドポイント upload_file_name と upload_file_size パラメーター。 NS up...", 
"body" : "必要な役割 Bitrise APIを使用してiOSコード署名ファイルを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 選択したBitriseアプリに新しいiOSコード署名ファイルを追加できます。次のことを行う必要があります。 のPOSTメソッドを呼び出します provisioning-profiles また build-certificates エンドポイント upload_file_name と upload_file_size パラメーター。 NS upload_file_name パラメータは、既存のプロビジョニングプロファイルへのパスを指定する必要があります。この呼び出しにより、事前に署名された一時的なアップロードURLが作成されます。 を使用してファイルをAWSにアップロードします upload_url 応答からのパラメータ。 のPOST呼び出しでファイルのアップロードを確認します uploaded 終点。 これにより、 processed ファイルのフラグを true 。このフラグは後で変更することはできません。 新しいプロビジョニングプロファイルの作成とアップロード ファイルの作成： curl -X POST -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles' -d '{\"upload_file_name\":\"sample.provisionprofile\",\"upload_file_size\":2047}' 応答： {\n \"data\":{\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01C6FA6P6HRQT5PQ8RMMVVXE6W\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"upload_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180216T124240Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e\"\n }\n} ファイル名、そのサイズ、スラッグ、および事前に署名されたアップロードURLが取得されます（変更可能ないくつかの属性とともに）。この事前署名されたアップロードURLは、iOSコード署名ファイルを宛先にアップロードするために使用する一時的なリンクです。 の値を使用してファイルをAWSにアップロードする upload_url パラメータ： curl -T sample.provisionprofile 'https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180216T124240Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e' アップロードの確認： curl -X POST -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles\/PROVISIONING-PROFILE-SLUG\/uploaded' " }, 
{ "title" : "アップロードされたiOSコード署名ファイルの更新 ", 
"url" : "api/iosコード署名ファイルの管理.html#アップロードされたiosコード署名ファイルの更新", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ iOSコード署名ファイルの管理 \/ アップロードされたiOSコード署名ファイルの更新 ", 
"snippet" : "アップロードされたiOSコード署名ファイルにマイナーアップデートを実行するには、 PATCH 方法。ファイルをにアップロードした場合 ビットライズ 、で変更を視覚的に確認できます コード署名 タブ。 必要な役割 Bitrise APIを使用してiOSコード署名ファイルを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 たとえば、 プロビジョニングプロファイル 保護された、あなたは設定することができます is_protected プロビジョニングプロファイルのフ...", 
"body" : "アップロードされたiOSコード署名ファイルにマイナーアップデートを実行するには、 PATCH 方法。ファイルをにアップロードした場合 ビットライズ 、で変更を視覚的に確認できます コード署名 タブ。 必要な役割 Bitrise APIを使用してiOSコード署名ファイルを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 たとえば、 プロビジョニングプロファイル 保護された、あなたは設定することができます is_protected プロビジョニングプロファイルのフラグ true 。 curl -X PATCH -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles\/PROVISIONING-PROFILE-SLUG -d '{\"is_protected\":true}'\n のために 証明書を作成する 上記と同じ属性を設定できますが、パスワードを変更することもできます。 curl -X PATCH -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/build-certificates\/BUILD-CERTIFICATE-SLUG -d '{\"certificate_password\":\"s0m3-v3ry-s3cr3t-str1ng\"}'\n 属性を設定するときは注意してください あなたは設定することができます is_protected 、 is_exposed と processed アップロードしたファイルの属性： 一度 is_protected フラグはに設定されます true, もう変更することはできません。 の値が is_protected 本当なら、 is_expose フラグを別の値に設定することはできません。 一度 processed フラグがtrueに設定されると、その値は変更できなくなります。 " }, 
{ "title" : "特定のiOSコード署名ファイルのデータを取得する ", 
"url" : "api/iosコード署名ファイルの管理.html#特定のiosコード署名ファイルのデータを取得する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ iOSコード署名ファイルの管理 \/ 特定のiOSコード署名ファイルのデータを取得する ", 
"snippet" : "必要な役割 Bitrise APIを使用してiOSコード署名ファイルを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 のGETメソッドを使用して特定のiOSコード署名ファイルのデータを取得します provisioning-profiles と build-certificates エンドポイント。返されるデータには、特に、ファイルの名前、サイズ、ダウンロードURL、および現在のステータスが含まれます。 必要なパラメーターは次のとおりです。 アプリスラッグ フ...", 
"body" : "必要な役割 Bitrise APIを使用してiOSコード署名ファイルを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 のGETメソッドを使用して特定のiOSコード署名ファイルのデータを取得します provisioning-profiles と build-certificates エンドポイント。返されるデータには、特に、ファイルの名前、サイズ、ダウンロードURL、および現在のステータスが含まれます。 必要なパラメーターは次のとおりです。 アプリスラッグ ファイルスラッグ プロビジョニングプロファイルのデータの取得 リクエスト： curl -X GET -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles\/PROVISIONING-PROFILE-SLUG' 応答： {\n \"data\": {\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01C6FA6P6HRQT5PQ8RMMVVXE6W\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"download_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/prov_profile_documents\/uploads\/80144\/original\/sample.provisionprofile?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180322%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180322T091652Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=6dd7bb3db72aafb2d434da7b1a8f80a82a3a7a0276e84620137ed64de5025ab2\"\n }\n} の可用性 download_url 注意してください download_url プロビジョニングプロファイルが is_protected 属性がfalseです。 " }, 
{ "title" : "アプリのiOSコード署名ファイルの一覧表示 ", 
"url" : "api/iosコード署名ファイルの管理.html#アプリのiosコード署名ファイルの一覧表示", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ iOSコード署名ファイルの管理 \/ アプリのiOSコード署名ファイルの一覧表示 ", 
"snippet" : "必要な役割 Bitrise APIを使用してiOSコード署名ファイルを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 アプリに属するiOSコード署名ファイルの数を知りたいですか？を使用してそれらのリストを取得します GET の方法 provisioning-profiles と build-certificates エンドポイント。 必要なパラメーターは次のとおりです。 アプリスラッグ オプションのパラメータは次のとおりです。 次へ：応答の最初のファイルのス...", 
"body" : "必要な役割 Bitrise APIを使用してiOSコード署名ファイルを管理するには、アプリのチームで管理者または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 アプリに属するiOSコード署名ファイルの数を知りたいですか？を使用してそれらのリストを取得します GET の方法 provisioning-profiles と build-certificates エンドポイント。 必要なパラメーターは次のとおりです。 アプリスラッグ オプションのパラメータは次のとおりです。 次へ：応答の最初のファイルのスラッグ（文字列として） 制限：ページあたりの要素の最大数（整数）。デフォルトは50です。 アプリのすべてのプロビジョニングプロファイルを取得する リクエスト： curl -X GET -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles' 応答： {\n \"data\": [\n {\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01C6FA6P6HRQT5PQ8RMMVVXE6W\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false\n },\n {\n \"upload_file_name\":\"sample2.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01C6FA6P6HRQT5PQ8RMMVVXE5T\",\n \"processed\":true,\n \"is_expose\":true,\n \"is_protected\":true\n }\n ],\n \"paging\": {\n \"page_item_limit\": 50,\n \"total_item_count\": 2\n }\n}\n " }, 
{ "title" : "Android キーストア ファイルの管理 ", 
"url" : "api/android-キーストア-ファイルの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ Android キーストア ファイルの管理 ", 
"snippet" : "このガイドでは、Bitrise API を使用して Android キーストア ファイルを管理する方法について説明します。 UI で同じことを行う方法について詳しく知りたい場合は、こちらをご覧ください。 Android コード署名 . Android キーストア ファイルに関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 GET\/apps\/{app-slug}\/android-keystore-files Android キーストア ファイルのリストを取得する 所有者または管理者 POST\/apps\/{app-slug}\/android-keystore-files A...", 
"body" : "このガイドでは、Bitrise API を使用して Android キーストア ファイルを管理する方法について説明します。 UI で同じことを行う方法について詳しく知りたい場合は、こちらをご覧ください。 Android コード署名 . Android キーストア ファイルに関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 GET\/apps\/{app-slug}\/android-keystore-files Android キーストア ファイルのリストを取得する 所有者または管理者 POST\/apps\/{app-slug}\/android-keystore-files Android キーストア ファイルを作成する 所有者または管理者 DELETE\/apps\/{app-slug}\/android-keystore-files\/{android-keystore-file-slug} Android キーストア ファイルを削除する 所有者または管理者 " }, 
{ "title" : "アプリの Android キーストア ファイルの一覧表示 ", 
"url" : "api/android-キーストア-ファイルの管理.html#アプリの-android-キーストア-ファイルの一覧表示", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ Android キーストア ファイルの管理 \/ アプリの Android キーストア ファイルの一覧表示 ", 
"snippet" : "必要な役割 Bitrise API を使用して Android キーストア ファイルを管理するには、アプリのチームで管理者または所有者の役割を持っている必要があります。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . の GET メソッドを使用して、アプリの Android キーストア ファイルのリストを取得します。 android-keystore-files 終点。返されるデータには、特に、ファイルの名前、サイズ、および現在のステータスが含まれます。 必須パラメーターは次のとおりです。 アプリスラッグ オプションの...", 
"body" : "必要な役割 Bitrise API を使用して Android キーストア ファイルを管理するには、アプリのチームで管理者または所有者の役割を持っている必要があります。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . の GET メソッドを使用して、アプリの Android キーストア ファイルのリストを取得します。 android-keystore-files 終点。返されるデータには、特に、ファイルの名前、サイズ、および現在のステータスが含まれます。 必須パラメーターは次のとおりです。 アプリスラッグ オプションのパラメーターは次のとおりです。 next: 応答の最初のファイルのスラッグ (文字列として) limit: ページあたりの要素の最大数 (整数として)。デフォルトは 50 です。 アプリのすべての Android キーストア ファイルを取得する リクエスト： curl -X GET -H  'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/android-keystore-files' 応答： {\n \"data\": [\n {\n \"upload_file_name\": \"simplesample.jks\",\n \"upload_file_size\": 2062,\n \"slug\": \"01GDFZW5DZED3DQD4VK835FKTP\",\n \"processed\": true,\n \"is_expose\": true,\n \"is_protected\": false,\n \"user_env_key\": \"ANDROID_KEYSTORE\",\n \"exposed_meta_datastore\": {\n \"PASSWORD\": \"\",\n \"ALIAS\": \"\",\n \"PRIVATE_KEY_PASSWORD\": \"\"\n }\n }\n ],\n \"paging\": {\n \"total_item_count\": 1,\n \"page_item_limit\": 50\n } " }, 
{ "title" : "Android キーストア ファイルの作成とアップロード ", 
"url" : "api/android-キーストア-ファイルの管理.html#android-キーストア-ファイルの作成とアップロード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ Android キーストア ファイルの管理 \/ Android キーストア ファイルの作成とアップロード ", 
"snippet" : "必要な役割 Bitrise API を使用して Android キーストア ファイルを管理するには、アプリのチームで管理者または所有者の役割を持っている必要があります。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . API を使用してアプリに Android キーストア ファイルを追加するには、次のことを行う必要があります。 の POST メソッドを呼び出す android-keystore-files エンドポイント upload_file_name と upload_file_size パラメーター。 を使用して...", 
"body" : "必要な役割 Bitrise API を使用して Android キーストア ファイルを管理するには、アプリのチームで管理者または所有者の役割を持っている必要があります。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . API を使用してアプリに Android キーストア ファイルを追加するには、次のことを行う必要があります。 の POST メソッドを呼び出す android-keystore-files エンドポイント upload_file_name と upload_file_size パラメーター。 を使用して AWS にファイルをアップロードします。 upload_url parameter 応答から。 の POST 呼び出しでファイルのアップロードを確認します。 uploaded 終点。 これにより、ファイルの処理済みフラグが true .このフラグは後で変更できません。 新しい Android キーストア ファイルの作成とアップロード ファイルの作成: curl -X POST -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/android-keystore-files' -d '{\"upload_file_name\":\"simplesample.jks\",\"upload_file_size\":2062}' 応答： {\n \"data\": {\n \"upload_file_name\": \"simplesample.jks\",\n \"upload_file_size\": 2062,\n \"slug\": \"01GDFYTF2DXZZSWGMCF0ZTVSB9\",\n \"processed\": false,\n \"is_expose\": true,\n \"is_protected\": false,\n \"upload_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/129261\/original\/simplesample.jks?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20220921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220921T120206Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=ce3c66fa144ba6ca9478cff3b72c49e024779f64ba961ddfc84060f65ea92562\",\n \"user_env_key\": \"ANDROID_KEYSTORE\",\n \"exposed_meta_datastore\": {\n \"PASSWORD\": \"\",\n \"ALIAS\": \"\",\n \"PRIVATE_KEY_PASSWORD\": \"\"\n }\n }\n} ファイル名、そのサイズ、スラッグ、署名済みのアップロード URL が取得されます (変更可能ないくつかの属性と共に)。この署名済みのアップロード URL は、Android キーストア ファイルを目的の場所にアップロードするために使用する一時的なリンクです。 の値を使用して AWS にファイルをアップロードする upload_url パラメータ: curl -T simplesample.jks 'https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180216T124240Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e' アップロードの確認: curl -X POST -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/android-keystore-files\/ANDROID-KEYSTORE-FILE-SLUG\/uploaded' " }, 
{ "title" : "汎用ファイルストレージ内のファイルの管理 ", 
"url" : "api/汎用ファイルストレージ内のファイルの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 汎用ファイルストレージ内のファイルの管理 ", 
"snippet" : "Bitriseの汎用ファイルストレージにプロジェクトファイルをアップロード、削除、更新、および一覧表示できます。 APIまたはワークフローエディターのいずれかを介してファイルにアクセスできます。 内のプロジェクトファイルをアップロード、削除、更新、および一覧表示できます。 GENERIC FILE STORAGE Bitriseのセクション。 汎用ファイルストレージに関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ {app-slug} \/ generic-project-files 汎用プロジェクトファイルを作成する 所有者または管理者 P...", 
"body" : "Bitriseの汎用ファイルストレージにプロジェクトファイルをアップロード、削除、更新、および一覧表示できます。 APIまたはワークフローエディターのいずれかを介してファイルにアクセスできます。 内のプロジェクトファイルをアップロード、削除、更新、および一覧表示できます。 GENERIC FILE STORAGE Bitriseのセクション。 汎用ファイルストレージに関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 POST \/ apps \/ {app-slug} \/ generic-project-files 汎用プロジェクトファイルを作成する 所有者または管理者 POST \/ apps \/ {app-slug} \/ generic-project-files \/ {generic-project-file-slug} \/ uploaded アップロードプロセスを確認します 所有者または管理者 PATCH \/ apps \/ {app-slug} \/ generic-project-files \/ {generic-project-file-slug} アップロードされたプロジェクトファイルを更新します 所有者または管理者 GET \/ apps \/ {app-slug} \/ generic-project-files アップロードされたプロジェクトファイルのリストを取得します 所有者または管理者 GET \/ apps \/ {app-slug} \/ generic-project-files \/ {generic-project-file-slug} 特定のプロジェクトファイルのデータを取得する 所有者または管理者 DELETE \/ apps \/ {app-slug} \/ generic-project-files \/ {generic-project-file-slug} アップロードしたプロジェクトファイルを削除する 所有者または管理者 " }, 
{ "title" : "ファイルの作成と汎用ファイルストレージへのアップロード ", 
"url" : "api/汎用ファイルストレージ内のファイルの管理.html#ファイルの作成と汎用ファイルストレージへのアップロード", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 汎用ファイルストレージ内のファイルの管理 \/ ファイルの作成と汎用ファイルストレージへのアップロード ", 
"snippet" : "必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 アプリケーションに新しいファイルを追加して、に保存することができます GENERIC FILE STORAGE のセクション Code Signing タブ。関連するAPIエンドポイントを呼び出すと、ファイルをにアップロードするために使用する新しい一時的な署名済みアップロードURLが作成されます。 GENERIC FILE S...", 
"body" : "必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 アプリケーションに新しいファイルを追加して、に保存することができます GENERIC FILE STORAGE のセクション Code Signing タブ。関連するAPIエンドポイントを呼び出すと、ファイルをにアップロードするために使用する新しい一時的な署名済みアップロードURLが作成されます。 GENERIC FILE STORAGE 。 （この事前署名されたURLには期限があり、10分後に期限切れになることに注意してください。） 次のことを行う必要があります。 のPOSTメソッドを呼び出します generic-project-files 終点。 この呼び出しにより、事前に署名された一時的なアップロードURLが作成されます。必要なパラメーターは次のとおりです。 ナメクジ ：Bitriseアプリのアプリスラッグ。 Bitriseでアプリを開き、メインページのURLからコピーするか、 GET \/apps エンドポイントとリスト内のアプリの検索。 upload_file_name ：ファイル拡張子を含むファイルの名前。例えば、 MyFile.txt 。ファイルは、コマンドが実行されるのと同じフォルダーにある必要があります。 upload_file_size ：ファイルのサイズ（バイト単位）。 macOSでは、を実行してファイルサイズを取得できます stat -f%z <filename> 指図。 user_env_key ：ユーザーのenvキーに任意の名前を追加できます。 事前に署名されたアップロードURLを使用してファイルをAWSにアップロードします。 ファイルのアップロードを確認します。 これにより、 processed フラグを立てる true これは、ファイルがBitriseで利用できるようになったことを意味します。このフラグは後で変更することはできません。 ファイルの作成とアップロード 一時的な事前署名されたアップロードURLの作成： curl -X POST \"https:\/\/api.bitrise.io\/v0.1\/apps\/583806e34b4ff0ff\/generic-project-files\" -H \"accept: application\/json\" -H \"Authorization: 0FgS4dsnxG9sYWp3xh9aLkbUz7BC01ZYJRj3RuhDWssadW7NuqbMhobvIWzk76dxrj6md4AXK16pfwj-i6A-uA\" -H \"Content-Type: application\/json\" -d \"{ \\\"upload_file_name\\\": \\\"Test-File\\\", \\\"upload_file_size\\\": 4865, \\\"user_env_key\\\": \\\"Test-File\\\"}\" 応答： {\n \"data\": {\n \"upload_file_name\": \"Test-File\",\n \"upload_file_size\": 4865,\n \"slug\": \"01D7F228E7N8Q8WQJKJM8FV3XM\",\n \"processed\": false,\n \"is_expose\": true,\n \"is_protected\": false,\n \"upload_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/Test-File?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190402%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20190402T125827Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\",\n \"user_env_key\": \"Test-File\",\n \"exposed_meta_datastore\": null\n }\n} ファイルをAWSにアップロードする： curl -T Test-File.md \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/Test-File?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190402%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20190402T125827Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\" ファイルのアップロードの確認： curl -X POST -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/generic-project-files\/GENERIC-PROJECT-FILES-SLUG\/uploaded' 応答： {\n \"data\": {\n \"upload_file_name\": \"Test-File\",\n \"upload_file_size\": 4865,\n \"slug\": \"01D7F228E7N8Q8WQJKJM8FV3XM\",\n \"processed\": true,\n \"is_expose\": true,\n \"is_protected\": false,\n \"user_env_key\": \"Test-File\",\n \"exposed_meta_datastore\": null\n }\n} " }, 
{ "title" : "アップロードしたファイルを更新する ", 
"url" : "api/汎用ファイルストレージ内のファイルの管理.html#アップロードしたファイルを更新する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 汎用ファイルストレージ内のファイルの管理 \/ アップロードしたファイルを更新する ", 
"snippet" : "必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 を使用して、アップロードされたファイルにマイナーアップデートを実行できます。 PATCH の方法 generic-project-files 終点。ファイルをにアップロードした場合 ビットライズ 、の変化を視覚的に確認できます 汎用ファイルストレージ 。 必要なパラメーターは次のとおりです。 アプリスラッグ 一般的なプロジェク...", 
"body" : "必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 を使用して、アップロードされたファイルにマイナーアップデートを実行できます。 PATCH の方法 generic-project-files 終点。ファイルをにアップロードした場合 ビットライズ 、の変化を視覚的に確認できます 汎用ファイルストレージ 。 必要なパラメーターは次のとおりです。 アプリスラッグ 一般的なプロジェクトファイルスラッグ 変更する一般的なプロジェクトファイルの属性 たとえば、アップロードされたファイルを保護するために、 is_protected ファイルのフラグを true 。 curl -X PATCH -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/generic-project-file\/GENERIC-PROJECT-FILE-SLUG -d '{\"is_protected\":true}' 属性を設定するときは注意してください あなたは設定することができます is_protected 、 is_exposed と processed アップロードしたファイルの属性： 一度 is_protected フラグはに設定されます true, もう変更することはできません。 の値が is_protected 本当なら、 is_expose フラグを別の値に設定することはできません。 一度 processed フラグがtrueに設定されると、その値は変更できなくなります。 " }, 
{ "title" : "特定のファイルのデータを取得する ", 
"url" : "api/汎用ファイルストレージ内のファイルの管理.html#特定のファイルのデータを取得する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 汎用ファイルストレージ内のファイルの管理 \/ 特定のファイルのデータを取得する ", 
"snippet" : "必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 のGETメソッドを使用して、汎用ファイルストレージから特定のファイルのデータを取得します。 generic-project-files 終点。返されるデータには、特に、ファイルの名前、サイズ、ダウンロードURL、および現在のステータスが含まれます。 必要なパラメーターは次のとおりです。 アプリスラッグ 一般的なプロジェクトファ...", 
"body" : "必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 のGETメソッドを使用して、汎用ファイルストレージから特定のファイルのデータを取得します。 generic-project-files 終点。返されるデータには、特に、ファイルの名前、サイズ、ダウンロードURL、および現在のステータスが含まれます。 必要なパラメーターは次のとおりです。 アプリスラッグ 一般的なプロジェクトファイルスラッグ ファイルの取得 リクエスト： curl -X GET -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/generic-project-files\/GENERIC-PROJECT-FILE-SLUG' 応答： {\n \"data\": {\n \"upload_file_name\": \"Test-File\",\n \"upload_file_size\": 4865,\n \"slug\": \"01D7F228E7N8Q8WQJKJM8FV3XM\",\n \"processed\": true,\n \"is_expose\": true,\n \"is_protected\": false,\n \"download_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/Test-File?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190402%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20190402T132712Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=241be52184b63867262360743931c546c166a99719787ce417e3be11bc12bbed\",\n \"user_env_key\": \"Test-File\",\n \"exposed_meta_datastore\": null\n }\n}\n の可用性 download_url 注意してください download_url プロビジョニングプロファイルが is_protected 属性がfalseです。 " }, 
{ "title" : "アプリのアップロードされたファイルを一覧表示する ", 
"url" : "api/汎用ファイルストレージ内のファイルの管理.html#アプリのアップロードされたファイルを一覧表示する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 汎用ファイルストレージ内のファイルの管理 \/ アプリのアップロードされたファイルを一覧表示する ", 
"snippet" : "必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 を使用して汎用ファイルストレージにアップロードされたアプリのファイルのリストを取得します GET 方法。注意してください ファイルの最大数は50です 。 必要なパラメーターは次のとおりです。 アプリスラッグ オプションのパラメータは次のとおりです。 次へ：応答の最初のファイルのスラッグ（文字列として） 制限：ページあたりの要素...", 
"body" : "必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 を使用して汎用ファイルストレージにアップロードされたアプリのファイルのリストを取得します GET 方法。注意してください ファイルの最大数は50です 。 必要なパラメーターは次のとおりです。 アプリスラッグ オプションのパラメータは次のとおりです。 次へ：応答の最初のファイルのスラッグ（文字列として） 制限：ページあたりの要素の最大数（整数として） アプリの一覧表示 リクエスト： curl -X GET -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/generic-project-files'\n 応答： {\n \"data\": [\n {\n \"upload_file_name\": \"realmtasks.jks\",\n \"upload_file_size\": 2068,\n \"slug\": \"a37f6a0ff582f4ea\",\n \"processed\": true,\n \"is_expose\": true,\n \"is_protected\": false,\n \"user_env_key\": \"ANDROID_KEYSTORE\",\n \"exposed_meta_datastore\": null\n },\n {\n \"upload_file_name\": \"Test-File\",\n \"upload_file_size\": 4865,\n \"slug\": \"01D7F228E7N8Q8WQJKJM8FV3XM\",\n \"processed\": true,\n \"is_expose\": true,\n \"is_protected\": false,\n \"user_env_key\": \"Test-File\",\n \"exposed_meta_datastore\": null\n }\n ],\n \"paging\": {\n \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} ご覧のとおり、応答例には、アプリに固有のファイルのリストが表示されます。にアップロードされたファイル ANDROID KEYSTORE SECTION とに GENERIC FILE STORAGE 両方が表示されます。これは、Androidキーストアファイルが特定の汎用プロジェクトファイルであるが、汎用プロジェクトファイルとは別のUIフィールドで表されるためです。 " }, 
{ "title" : "汎用ファイルストレージからのファイルの削除 ", 
"url" : "api/汎用ファイルストレージ内のファイルの管理.html#汎用ファイルストレージからのファイルの削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ 汎用ファイルストレージ内のファイルの管理 \/ 汎用ファイルストレージからのファイルの削除 ", 
"snippet" : "アップロードしたファイルは、を使用して汎用ファイルストレージから削除できます。 DELETE 方法。 必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 必要なパラメーターは次のとおりです。 アプリスラッグ 一般的なプロジェクトファイルスラッグ curl -X DELETE “https:\/\/api.bitrise.io\/v0.1\/apps\/{app-slug}\/generic...", 
"body" : "アップロードしたファイルは、を使用して汎用ファイルストレージから削除できます。 DELETE 方法。 必要な役割 Bitrise APIを使用して汎用ファイルストレージ内のファイルを管理するには、アプリのチームで管理者または所有者の役割の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 必要なパラメーターは次のとおりです。 アプリスラッグ 一般的なプロジェクトファイルスラッグ curl -X DELETE “https:\/\/api.bitrise.io\/v0.1\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug}” -H “Authorization:{Authorization-token}” " }, 
{ "title" : "ビルドアーティファクトの管理 ", 
"url" : "api/ビルドアーティファクトの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドアーティファクトの管理 ", 
"snippet" : "Bitrise APIを使用して、ビルドアーティファクトを一覧表示、取得、更新、および削除できます。 追加した場合 Deploy to bitrise.io ステップ あなたに ワークフロー 、ビルドが実行されると、ビルドのビルドアーティファクトにアクセスできます アーティファクト bitrise.ioのタブ。 BitriseAPIを使用して生成されたアーティファクトを管理することもできます。 200日間のビルド保持 に ビルド アプリのページには、過去200日間のビルドのみが表示されます。あなたがいる場合も同じ制限が適用されます 特定のビルドを検索する ページ上。この制限は、API呼び出しに...", 
"body" : "Bitrise APIを使用して、ビルドアーティファクトを一覧表示、取得、更新、および削除できます。 追加した場合 Deploy to bitrise.io ステップ あなたに ワークフロー 、ビルドが実行されると、ビルドのビルドアーティファクトにアクセスできます アーティファクト bitrise.ioのタブ。 BitriseAPIを使用して生成されたアーティファクトを管理することもできます。 200日間のビルド保持 に ビルド アプリのページには、過去200日間のビルドのみが表示されます。あなたがいる場合も同じ制限が適用されます 特定のビルドを検索する ページ上。この制限は、API呼び出しにも適用されます。 GET\/apps\/{app-slug}\/builds エンドポイントおよび関連するエンドポイントは、過去200日間のビルドのみを返すことができます。 ただし、正確なビルドURLがわかっている場合は、200日より古いビルドを表示できます。古いビルドを表示する必要があるが、正確なビルドURLがわからない場合は、サポートチームにお問い合わせください。 正確なビルドURLがわかっている場合は、ビルドにアクセスできます。 あなたは使用することができます GET\/apps\/{app-slug}\/archived-builds APIエンドポイント： アプリのアーカイブされたビルドの一覧表示。 APIを使用したビルドアーティファクトの管理に関連するエンドポイント 終点 関数 アプリのチームで必要な役割 GET \/ apps \/ {app-slug} \/ builds \/ {build-slug} \/ artifacts ビルドアーティファクトの一覧表示 どれでも GET \/ apps \/ {app-slug} \/ builds \/ {build-slug} \/ artifacts \/ {artifact-slug} 特定のビルドアーティファクトのデータを取得する どれでも パッチ\/アプリ\/ {アプリ-スラッグ} \/ builds \/ {ビルド-スラッグ} \/アーティファクト\/ {アーティファクト-スラッグ} ビルドアーティファクトの更新 所有者、管理者、または開発者 DELETE \/ apps \/ {app-slug} \/ builds \/ {build-slug} \/ artifacts \/ {artifact-slug} ビルドアーティファクトの削除 所有者、管理者、または開発者 ワークフロー デフォルトのワークフロー ビルド中にVPNに接続する " }, 
{ "title" : "ビルドアーティファクトの一覧表示 ", 
"url" : "api/ビルドアーティファクトの管理.html#ビルドアーティファクトの一覧表示", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドアーティファクトの管理 \/ ビルドアーティファクトの一覧表示 ", 
"snippet" : "必要な役割 APIを使用してビルドアーティファクトを一覧表示するには、アプリのチームにテスター\/ QA、開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 ビルドアーティファクトエンドポイントを使用できるようにするには、最初にアプリのビルドに属するすべてのアーティファクトを一覧表示する必要があります。応答には、後で必要になるスラッグとともにすべてのアーティファクトが一覧表示されます。 必要なパラメーターは次のとおりです。 アプリスラッグ ナメクジを作る ビルドアーティファクトスラグ...", 
"body" : "必要な役割 APIを使用してビルドアーティファクトを一覧表示するには、アプリのチームにテスター\/ QA、開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 ビルドアーティファクトエンドポイントを使用できるようにするには、最初にアプリのビルドに属するすべてのアーティファクトを一覧表示する必要があります。応答には、後で必要になるスラッグとともにすべてのアーティファクトが一覧表示されます。 必要なパラメーターは次のとおりです。 アプリスラッグ ナメクジを作る ビルドアーティファクトスラグが必須パラメーターである他のビルドアーティファクトエンドポイントで、応答出力から生成されたビルドアーティファクトスラグを使用できます。 アプリのアーティファクトを一覧表示する リクエスト： curl -X GET \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\" -H \"accept: application\/json\" -H \"Authorization: THE-ACCESS-TOKEN\" 応答： {\n \"data\": [\n {\n \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"file_size_bytes\": 1574799\n },\n {\n \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"is_public_page_enabled\": true,\n \"slug\": \"54ae701761c4f956\",\n \"file_size_bytes\": 1574793\n }\n ],\n \"paging\": {\n \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} " }, 
{ "title" : "特定のビルドアーティファクトのデータを取得する ", 
"url" : "api/ビルドアーティファクトの管理.html#特定のビルドアーティファクトのデータを取得する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドアーティファクトの管理 \/ 特定のビルドアーティファクトのデータを取得する ", 
"snippet" : "必要な役割 APIを使用して特定のビルドのアーティファクトデータを取得するには、アプリのチームにテスター\/ QA、開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 アーティファクトエンドポイントを使用して、特定のビルドのアーティファクトの詳細データを取得できます。応答には、ファイル名、アーティファクトタイプ、ダウンロードURL、およびファイルサイズが表示されます。 必要なパラメーターは次のとおりです。 アプリスラッグ ナメクジを作る アーティファクトスラッグ 特定のアーティファク...", 
"body" : "必要な役割 APIを使用して特定のビルドのアーティファクトデータを取得するには、アプリのチームにテスター\/ QA、開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 アーティファクトエンドポイントを使用して、特定のビルドのアーティファクトの詳細データを取得できます。応答には、ファイル名、アーティファクトタイプ、ダウンロードURL、およびファイルサイズが表示されます。 必要なパラメーターは次のとおりです。 アプリスラッグ ナメクジを作る アーティファクトスラッグ 特定のアーティファクトのデータを取得する リクエスト： curl -X GET \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/92e0b6ecae87b832\" -H \"accept: application\/json\" -H \"Authorization: THE-ACCESS-TOKEN\" 応答： {\n \"data\": {\n \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626902\/another_app-debug.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190426%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190426T131627Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=9f1af26787f34b5cf0cbc18b2372313607b1e3c0203a9ce7e42da884a6ddf70f\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"public_install_page_url\": \"https:\/\/www.bitrise.io\/artifact\/7626902\/p\/8e5b2c62abe28fecef09b271de767920\",\n \"file_size_bytes\": 1574799\n }\n} デフォルトでは、 is_public_page_enabled 入力はに設定されます true 。このように public_install_page_url が利用可能になり、このURLを介してアーティファクトに関するいくつかの基本情報を表示できます。応答出力からダウンロードURLを使用してアーティファクトをダウンロードすることもできます。 " }, 
{ "title" : "アーティファクトのパブリックインストールページを無効にする ", 
"url" : "api/ビルドアーティファクトの管理.html#アーティファクトのパブリックインストールページを無効にする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドアーティファクトの管理 \/ アーティファクトのパブリックインストールページを無効にする ", 
"snippet" : "必要な役割 APIを使用してアーティファクトの公開インストールページを無効にするには、アプリのチームに開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 あなたは更新することができます is_public_page_enabled APKおよびIPAファイルのパラメータ。このパラメータの値はに設定されていることに注意してください true デフォルトでは、このエンドポイントでのみ無効にできます。 必要なパラメーターは次のとおりです。 アプリスラッグ ナメクジを作る アーティファクト...", 
"body" : "必要な役割 APIを使用してアーティファクトの公開インストールページを無効にするには、アプリのチームに開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 あなたは更新することができます is_public_page_enabled APKおよびIPAファイルのパラメータ。このパラメータの値はに設定されていることに注意してください true デフォルトでは、このエンドポイントでのみ無効にできます。 必要なパラメーターは次のとおりです。 アプリスラッグ ナメクジを作る アーティファクトスラッグ APKファイルの公開インストールページを無効にする リクエスト： curl -X PATCH \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -H \"accept: application\/json\" -H \"Authorization: THE-ACCESS-TOKEN\" -H \"Content-Type: application\/json\" -d \"{ \\\"is_public_page_enabled\\\": false}\"\n 応答： {\n \"data\": {\n \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626904\/app-debug.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190503%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190503T082800Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=7251fcbc0574ffac60b3f1d4a8c398658e49f0b86fb3cfec1500bde125738abc\",\n \"is_public_page_enabled\": false,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n} ビルドをチェックする場合 APPS & ARTIFACTS タブ、あなたはそれを見るでしょう Public install page トグルは無効です。 " }, 
{ "title" : "ビルドアーティファクトの削除 ", 
"url" : "api/ビルドアーティファクトの管理.html#ビルドアーティファクトの削除", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ ビルドアーティファクトの管理 \/ ビルドアーティファクトの削除 ", 
"snippet" : "必要な役割 APIを使用してビルドアーティファクトを削除するには、アプリのチームに開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 アプリ固有のビルドアーティファクトを削除できます。 必要なパラメーターは次のとおりです。 アプリスラッグ ナメクジを作る アーティファクトスラッグ APKファイルの削除 リクエスト： curl -X DELETE \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745...", 
"body" : "必要な役割 APIを使用してビルドアーティファクトを削除するには、アプリのチームに開発者、管理者、または所有者の役割が必要です。 ユーザーの役割と役割のチートシートの完全なリストについては、次を確認してください。 アプリチームでのユーザーの役割。 アプリ固有のビルドアーティファクトを削除できます。 必要なパラメーターは次のとおりです。 アプリスラッグ ナメクジを作る アーティファクトスラッグ APKファイルの削除 リクエスト： curl -X DELETE \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -H \"accept: application\/json\" -H \"Authorization: THE-ACCESS-TOKEN\" 応答： {\n \"data\": {\n \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": null,\n \"is_public_page_enabled\": true,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n}\n " }, 
{ "title" : "API を使用したシークレットの管理 ", 
"url" : "api/api-を使用したシークレットの管理.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ API を使用したシークレットの管理 ", 
"snippet" : "このガイドでは、Bitrise API を使用してシークレットを管理する方法について説明します。 UI で同じことを行う方法について詳しく知りたい場合は、こちらをご覧ください。 シークレット . シークレットに関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 GET\/apps\/{app-slug}\/secrets 指定されたアプリの Secret のリストを取得します。 所有者または管理者 GET\/apps\/{app-slug}\/secrets\/{secret-name}\/value (保護されていない) Secret の値を取得します。 所有者または管理者 PUT\/a...", 
"body" : "このガイドでは、Bitrise API を使用してシークレットを管理する方法について説明します。 UI で同じことを行う方法について詳しく知りたい場合は、こちらをご覧ください。 シークレット . シークレットに関連するエンドポイント エンドポイント 関数 アプリのチームで必要な役割 GET\/apps\/{app-slug}\/secrets 指定されたアプリの Secret のリストを取得します。 所有者または管理者 GET\/apps\/{app-slug}\/secrets\/{secret-name}\/value (保護されていない) Secret の値を取得します。 所有者または管理者 PUT\/apps\/{app-slug}\/secrets\/{secret-name} シークレットを作成または更新します。 所有者または管理者 DELETE\/apps\/{app-slug}\/secrets\/{secret-name} シークレットを削除します。 所有者または管理者 " }, 
{ "title" : "アプリのシークレットを表示する ", 
"url" : "api/api-を使用したシークレットの管理.html#アプリのシークレットを表示する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ API を使用したシークレットの管理 \/ アプリのシークレットを表示する ", 
"snippet" : "必要な役割 Bitrise API を使用してシークレットを表示するには、アプリのチームで管理者または所有者の役割を持っている必要があります。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . あなたは見ることができます シークレット API の助けを借りてアプリの。 アプリのすべてのシークレットのリストを取得するには、 GET\/apps\/{app-slug}\/secrets 終点。 特定のシークレットを表示できます is_protected 値はに設定されています false . 「test」というアプリのシークレット...", 
"body" : "必要な役割 Bitrise API を使用してシークレットを表示するには、アプリのチームで管理者または所有者の役割を持っている必要があります。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . あなたは見ることができます シークレット API の助けを借りてアプリの。 アプリのすべてのシークレットのリストを取得するには、 GET\/apps\/{app-slug}\/secrets 終点。 特定のシークレットを表示できます is_protected 値はに設定されています false . 「test」というアプリのシークレットを表示する リクエスト： curl -X GET -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/secrets\/test\/value' レスポンスは、Secret の値を示します。 is_protected 値はに設定されています false : {\n \"value\": \"123ld\"\n} " }, 
{ "title" : "Secret の作成または更新 ", 
"url" : "api/api-を使用したシークレットの管理.html#secret-の作成または更新", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ API を使用したシークレットの管理 \/ Secret の作成または更新 ", 
"snippet" : "必要な役割 Bitrise API を使用してシークレットを作成\/更新するには、アプリのチームで管理者または所有者の役割を持っている必要があります。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . の PUT メソッドを使用してシークレットを作成または更新できます。 secrets 終点。 もし ひみつ と一緒に存在しません secret-name 指定すると、新しい Secret が作成されます。シークレットが既に存在する場合は、指定した新しい値で更新されます。 必須パラメータは次のとおりです。 アプリスラッグ 秘密...", 
"body" : "必要な役割 Bitrise API を使用してシークレットを作成\/更新するには、アプリのチームで管理者または所有者の役割を持っている必要があります。 ユーザーの役割と役割のチートシートの完全なリストについては、以下を確認してください。 アプリ チームのユーザー ロール . の PUT メソッドを使用してシークレットを作成または更新できます。 secrets 終点。 もし ひみつ と一緒に存在しません secret-name 指定すると、新しい Secret が作成されます。シークレットが既に存在する場合は、指定した新しい値で更新されます。 必須パラメータは次のとおりです。 アプリスラッグ 秘密の名前 オプションのパラメーターは次のとおりです。 expand_in_step_inputs: Steps に渡す前に Bitrise CLI に Secret を展開させたい場合は true に設定します。 is_exposed_for_pull_requests: シークレットをプル リクエスト用に公開する場合は、true に設定します。 is_protected: Secret の値を保護する場合は true に設定します。 (GET メソッドを使用して Secret の値を表示することはできません。) value: シークレットに格納されている値。 「test」という名前の新しい Secret を作成する リクエスト： curl -X PUT -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/THE-APP-SLUG\/secrets\/test' -d '{\"expand_in_step_inputs\": true, \"is_exposed_for_pull_requests\": true, \"is_protected\": false, \"value\": \"123ld2\"}' " }, 
{ "title" : "APIリファレンス ", 
"url" : "api/apiリファレンス.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ API \/ APIリファレンス ", 
"snippet" : "すべてのBitriseAPIエンドポイントの完全なリストと説明。 https:\/\/api-docs.bitrise.io\/docs\/swagger.json...", 
"body" : "すべてのBitriseAPIエンドポイントの完全なリストと説明。 https:\/\/api-docs.bitrise.io\/docs\/swagger.json " }, 
{ "title" : " Troubleshooting and FAQ ", 
"url" : "-en--troubleshooting-and-faq.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ ", 
"snippet" : "In this section, we offer you some ideas for how to debug your Bitrise builds. The guides deal with specific issues: take a look at them to check out if any of them solves your problem. If your builds keep failing and you cannot find the answer, here’s some “best practices” to keep in mind: It’s alw...", 
"body" : " In this section, we offer you some ideas for how to debug your Bitrise builds. The guides deal with specific issues: take a look at them to check out if any of them solves your problem. If your builds keep failing and you cannot find the answer, here’s some “best practices” to keep in mind: It’s always worth checking our forums . Our users are active and our support staff are monitoring the threads constantly: you can search for similar issues as yours or open a new thread. The build logs often give you reasonably informative error messages. These are worth looking up, especially if they are produced by widely-used tools, such as Xcode. Enabling the Bitrise Support User before contacting support helps us: we can take a look at your Workflow directly, and even test some solutions right away. Without that, we can only see the build log you send us. If you think a certain issue, with its solution(s), should be included in the guides in this section, let us know either by contacting support or opening a thread on our forums! " }, 
{ "title" : " Builds aren't getting triggered ", 
"url" : "-en--troubleshooting-and-faq/-en--builds-aren-t-getting-triggered.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Builds aren't getting triggered ", 
"snippet" : "There are two reasons why your builds might not be starting: A problem with the trigger mapping A problem with the webhook Let's look at the trigger mapping first. Please note that one git event can only start one build and that the order of your trigger map matters. Learn more about it in トリガーマップを使...", 
"body" : " There are two reasons why your builds might not be starting: A problem with the trigger mapping A problem with the webhook Let's look at the trigger mapping first. Please note that one git event can only start one build and that the order of your trigger map matters. Learn more about it in トリガーマップを使用してビルドをトリガーする. If you confirmed that there are no problems with the trigger mapping, it's safe to suspect that there is a problem with the webhook. Go to your Git repository settings, and look for the webhook options. Make sure you have a webhook registered that starts with hooks.bitrise.io. If it’s there, make sure the scope of the webhook fits your use case. For example, double-check if you have both pull request and push events selected if that’s what you want. If everything is in order, but your builds are still not getting triggered, you have to look for the responses Bitrise sends to your Git provider: On GitHub and Gitlab: click Edit , scroll down towards the bottom of the page, and select the Responses label at Recent Deliveries . The Body field should contain the reason why your build isn’t triggered. This is a single line of text, not the entire payload. On Bitbucket, you have to click View Requests on the webhook and Enable history if you haven’t yet, to see this information. " }, 
{ "title" : " Additional information ", 
"url" : "-en--troubleshooting-and-faq/-en--builds-aren-t-getting-triggered.html#-en--additional-information", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Builds aren't getting triggered \/ Additional information ", 
"snippet" : "Adding incoming webhooks Triggering builds automatically...", 
"body" : " Adding incoming webhooks Triggering builds automatically " }, 
{ "title" : " Handling errors on Linux when fetching APT packages ", 
"url" : "-en--troubleshooting-and-faq/-en--handling-errors-on-linux-when-fetching-apt-packages.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Handling errors on Linux when fetching APT packages ", 
"snippet" : "Developers working on Linux stacks may encounter a series of errors when working with development tools such as apt packages that can be resolved with a workaround script. The root cause of the issue is not always clear but the script has managed to resolve issues such as: Cannot initiate the connec...", 
"body" : " Developers working on Linux stacks may encounter a series of errors when working with development tools such as apt packages that can be resolved with a workaround script. The root cause of the issue is not always clear but the script has managed to resolve issues such as: Cannot initiate the connection to archive.ubuntu.com:80\n(2001:67c:1562::15). - connect (101: Network is unreachable) Cannot initiate the\nconnection to archive.ubuntu.com:80 (2001:67c:1562::18).\n - connect (101: Network is unreachable) Cannot initiate the connection to archive.ubuntu.com:80 (2620:2d:4000:1::16).\n - connect (101: Network is unreachable) Cannot initiate the connection to archive.ubuntu.com:80 (2620:2d:4000:1::19). \n - connect (101: Network is unreachable) Could not connect to archive.ubuntu.com:80 (185.125.190.36),\n connection timed out Could not connect to archive.ubuntu.com:80 (91.189.91.39),\n connection timed out Could not connect to archive.ubuntu.com:80 (91.189.91.38),\n connection timed out Could not connect to archive.ubuntu.com:80 (185.125.190.39),\n connection timed out [IP: 185.125.190.39 80] In the collected samples, the error above was being observed from running: apt update\napt-get install xxx Additionally, an error seen like the one below could also be seen on Linux stacks: E: Failed to fetch https:\/\/packagecloud.io\/github\/git-lfs\/ubuntu\/dists\/focal\/InRelease 402 Payment Required [IP: 13.56.57.255 443]\nE: The repository ' https:\/\/packagecloud.io\/github\/git-lfs\/ubuntu focal InRelease' is not signed. These errors vary from indicating connection issue all the way to a payment issue on the third party's end. The following script resolves both of these issues when added before the failing script: sudo rm -fv \/etc\/apt\/sources.list.d\/github_git-lfs.list\nsudo rm -fv \/etc\/apt\/sources.list.d\/github_git-lfs.list.save This command removes the files, offering a \"clean slate\" for the build and its Steps to be able to fetch the apt packages on the next time the build is run with this script. " }, 
{ "title" : " Can't install iOS .ipa ", 
"url" : "-en--troubleshooting-and-faq/-en--can-t-install-ios--ipa.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Can't install iOS .ipa ", 
"snippet" : "If you can't install your .ipa file from the public install page , check: If the device's UDID is included in the provisioning profiles the app was signed with. You can do this manually on your machines and on the Developer Portal, or if you're using the AutoProvision solution, you can register the ...", 
"body" : " If you can't install your .ipa file from the public install page , check: If the device's UDID is included in the provisioning profiles the app was signed with. You can do this manually on your machines and on the Developer Portal, or if you're using the AutoProvision solution, you can register the test devices to Bitrise and have it sync the devices to your profiles automatically. If you have pasted the link into a non-incognito Safari browser session. If you just open the link, the device will open a Safari View Controller session, which will not expose the device UDID for the website and it can't recognize the device. You can recognize a Safari View Controller session by the \"Done\" option in the top left. If you've done both of this, please reach out to our support with the related builds URL and the device UDID(s) so they can check it out! " }, 
{ "title" : " Error: Missing cmdline-tools ", 
"url" : "-en--troubleshooting-and-faq/-en--error--missing-cmdline-tools.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Error: Missing cmdline-tools ", 
"snippet" : "When building an Android app, you run into an error that looks similar to this: Cannot run program \"\/usr\/local\/share\/android-sdk\/cmdline-tools\/latest\/bin\/sdkmanager\": error=2, No such file or directory Based on the error it may seem like that cmdline-tools is missing from the Bitrise stacks. You can...", 
"body" : " When building an Android app, you run into an error that looks similar to this: Cannot run program \"\/usr\/local\/share\/android-sdk\/cmdline-tools\/latest\/bin\/sdkmanager\": error=2, No such file or directory Based on the error it may seem like that cmdline-tools is missing from the Bitrise stacks. You can confirm that cmdline-tools are installed on our stacks running a script like sdkmanager --list . If it exists, the command fails due to the path it is trying to use. The command is trying to access this path: \/usr\/local\/share\/android-sdk\/cmdline-tools\/latest\/bin\/sdkmanager . The path in our stacks for sdk manager is the following: \/usr\/local\/share\/android-sdk\/cmdline-tools\/cmdline-tools\/bin\/sdkmanager . Based on this information, you can create a symlink with the following script: mkdir \/usr\/local\/share\/android-sdk\/cmdline-tools\/latest\/\nmkdir \/usr\/local\/share\/android-sdk\/cmdline-tools\/latest\/bin\/\nln -s \/usr\/local\/share\/android-sdk\/cmdline-tools\/cmdline-tools\/bin\/sdkmanager\n\/usr\/local\/share\/android-sdk\/cmdline-tools\/latest\/bin\/sdkmanager\n\/usr\/local\/share\/android-sdk\/cmdline-tools\/latest\/bin\/sdkmanager --licenses Your symlink should now allow for the program to run on the correct path. " }, 
{ "title" : " iOS UI tests are failing intermittently ", 
"url" : "-en--troubleshooting-and-faq/-en--ios-ui-tests-are-failing-intermittently.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ iOS UI tests are failing intermittently ", 
"snippet" : "Issue: The same tests sometimes fail and sometimes succeed, without any changes either in the code or the Workflow configuration. Possible solutions: When tests are flaky like this it's usually because of one of two things: Your tests are reliant on an external network resource that should be mocked...", 
"body" : " Issue: The same tests sometimes fail and sometimes succeed, without any changes either in the code or the Workflow configuration. Possible solutions: When tests are flaky like this it's usually because of one of two things: Your tests are reliant on an external network resource that should be mocked. The simulator hasn't had a chance to warm up or recover from the previous test. In this case adding a delay before the test can help. Pre-starting the simulator can also help reliability greatly: you can add a Script Step before the tests run, such as this example: npm install -g ios-sim\n\nios-sim start --devicetypeid \"com.apple.CoreSimulator.SimDeviceType.iPhone-8, 14.4\"\n\nsleep 60 " }, 
{ "title" : " Modifying the Java Virtual Machine heap size ", 
"url" : "-en--troubleshooting-and-faq/-en--modifying-the-java-virtual-machine-heap-size.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Modifying the Java Virtual Machine heap size ", 
"snippet" : "You can modify the Java Virtual Machine maximum heap size ( -Xmx ) and the minimum heap size ( -Xms ) using Env Vars. This can be especially useful if your build will fails with the following error: java.lang.OutofMemoryError . To do so: Open the Workflow Editor . Go to the Env Vars tab. Set the max...", 
"body" : " You can modify the Java Virtual Machine maximum heap size ( -Xmx ) and the minimum heap size ( -Xms ) using Env Vars. This can be especially useful if your build will fails with the following error: java.lang.OutofMemoryError . To do so: Open the Workflow Editor . Go to the Env Vars tab. Set the maximum and minimum heap size to a desired value in the GRADLE_OPTS and JAVA_OPTS Env Vars. For example, you could set GRADLE_OPTS to : '-Dorg.gradle.jvmargs=\"-Xmx2048m -Xms256m\"' and JAVA_OPTS to: \"-Xmx2048m -Xms256m\" . JAVA_OPTS You can try using __JAVA_OPTIONS instead of JAVA_OPTS if JAVA_OPTS is not working for you. Using this logic, you can modify the amount of memory allocated to the Java Virtual Machine. For more information about Gradle Build environments, check out this page . " }, 
{ "title" : " The Deploy to App Store Connect with Deliver Step fails with \"[Transporter Error Output] ", 
"url" : "-en--troubleshooting-and-faq/-en--the-deploy-to-app-store-connect-with-deliver-step-fails-with---transporter-error-output-.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ The Deploy to App Store Connect with Deliver Step fails with \"[Transporter Error Output] ", 
"snippet" : "The Deploy to App Store Connect with Deliver Step can fail with the following error message: [Transporter Error Output]: Please sign in with an app-specific password. You can create one at appleid.apple.com. (-22910) The Deploy to App Store Connect with Deliver Step requires that the Apple ID, Passw...", 
"body" : " The Deploy to App Store Connect with Deliver Step can fail with the following error message: [Transporter Error Output]: Please sign in with an app-specific password. You can create one at appleid.apple.com. (-22910) The Deploy to App Store Connect with Deliver Step requires that the Apple ID, Password, and Application Specific Password be provided as Step inputs. In this case, the Application Specific Password was not provided. Generate an Application Specific Password and provide as input to the Step: Apple information on application specific keywords Apple services connection " }, 
{ "title" : " Xcode scheme not found ", 
"url" : "-en--troubleshooting-and-faq/-en--xcode-scheme-not-found.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Xcode scheme not found ", 
"snippet" : "One potential issue during building and signing an iOS app is that Yóyou can’t see your Xcode project’s scheme during setup, or you get something like the following error during build: The project named \"Foo\" does not contain a scheme named \"Bar\" We recommend you check your Xcode project settings. C...", 
"body" : " One potential issue during building and signing an iOS app is that Yóyou can’t see your Xcode project’s scheme during setup, or you get something like the following error during build: The project named \"Foo\" does not contain a scheme named \"Bar\" We recommend you check your Xcode project settings. Check if the desired scheme is shared - Bitrise only works with shared schemes. When you share your scheme, the Xcode project changes. Don’t forget to commit and to push your changes! If the related validation is still running on Bitrise, abort it and try to run it again. Don’t forget to commit and push the changes if you just enabled the Shared option! This change should be reflected in your git repository, under you project\/workspace: *.xcodeproj OR *.xcworkspace\/xcshareddata\/xcschemes\/SchemeName.xcscheme . If you still can’t see the desired Scheme, look into your .gitignore file and check if you are ignoring the config files of your Xcode project. " }, 
{ "title" : " Missing required module in the Xcode Test for iOS step ", 
"url" : "-en--troubleshooting-and-faq/-en--missing-required-module-in-the-xcode-test-for-ios-step.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Missing required module in the Xcode Test for iOS step ", 
"snippet" : "While running tests with the Xcode Test for iOS Step, you got the following error: missing required module 'SDWebImage' You have to provide the missing value to run test with Xcode Test for iOS Step. This Step can only take care of any project dependencies, for example, Swift Package Manager, if the...", 
"body" : " While running tests with the Xcode Test for iOS Step, you got the following error: missing required module 'SDWebImage' You have to provide the missing value to run test with Xcode Test for iOS Step. This Step can only take care of any project dependencies, for example, Swift Package Manager, if the input is populated. In the Debug section of the Xcode Test for iOS Step, add the -resolvePackageDependencies value to the Additional options for `xcodebuild build test` call input field. " }, 
{ "title" : " Troubleshooting intermittent connection\/timeout issues when downloading Android dependencies ", 
"url" : "-en--troubleshooting-and-faq/-en--troubleshooting-intermittent-connection-timeout-issues-when-downloading-android-dependencies.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Troubleshooting intermittent connection\/timeout issues when downloading Android dependencies ", 
"snippet" : "Intermittent timeout or connection errors can occur for several reasons when Gradle attempts to download Android dependencies. These errors could happen after upgrading to a more powerful machine or because of the unstable hosting of some third-party dependencies. Let's look at the most common solut...", 
"body" : " Intermittent timeout or connection errors can occur for several reasons when Gradle attempts to download Android dependencies. These errors could happen after upgrading to a more powerful machine or because of the unstable hosting of some third-party dependencies. Let's look at the most common solutions! " }, 
{ "title" : " Limiting the maximum number of processor threads Gradle can use ", 
"url" : "-en--troubleshooting-and-faq/-en--troubleshooting-intermittent-connection-timeout-issues-when-downloading-android-dependencies.html#-en--limiting-the-maximum-number-of-processor-threads-gradle-can-use", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Troubleshooting intermittent connection\/timeout issues when downloading Android dependencies \/ Limiting the maximum number of processor threads Gradle can use ", 
"snippet" : "Connection issues might increase after upgrading to a more powerful machine. This is because Gradle might use additional processor threads to download more dependencies simultaneously, which can result in rate-limiting errors. One workaround is to limit the number of threads Gradle can use by specif...", 
"body" : " Connection issues might increase after upgrading to a more powerful machine. This is because Gradle might use additional processor threads to download more dependencies simultaneously, which can result in rate-limiting errors. One workaround is to limit the number of threads Gradle can use by specifying the maximum number of workers. If you are calling a Gradle task from a Script Step, add the following argument: --max-workers=4 Alternatively, you can add the following to your gradle.properties file: org.gradle.workers.max=(max # of worker processes) " }, 
{ "title" : " Retrying failed connections using Maven ", 
"url" : "-en--troubleshooting-and-faq/-en--troubleshooting-intermittent-connection-timeout-issues-when-downloading-android-dependencies.html#-en--retrying-failed-connections-using-maven", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Troubleshooting intermittent connection\/timeout issues when downloading Android dependencies \/ Retrying failed connections using Maven ", 
"snippet" : "Some dependencies from third parties may be using unstable hosting. Retrying a failed download can sometimes resolve the issue and keep the build from failing. You can add an additional configuration setting to your gradle.properties file using Maven to retry failed connections: maven.wagon.http.ret...", 
"body" : " Some dependencies from third parties may be using unstable hosting. Retrying a failed download can sometimes resolve the issue and keep the build from failing. You can add an additional configuration setting to your gradle.properties file using Maven to retry failed connections: maven.wagon.http.retryHandler.count = 5 For more information, check out Retrying Maven connections . " }, 
{ "title" : " Committing dependencies to source control ", 
"url" : "-en--troubleshooting-and-faq/-en--troubleshooting-intermittent-connection-timeout-issues-when-downloading-android-dependencies.html#-en--committing-dependencies-to-source-control", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Troubleshooting intermittent connection\/timeout issues when downloading Android dependencies \/ Committing dependencies to source control ", 
"snippet" : "We highly recommend committing dependencies to your repository . Not only does this help with stability, but it dramatically decreases build times as well....", 
"body" : " We highly recommend committing dependencies to your repository . Not only does this help with stability, but it dramatically decreases build times as well. " }, 
{ "title" : " Changing the Ruby version on the virtual machine ", 
"url" : "-en--troubleshooting-and-faq/-en--changing-the-ruby-version-on-the-virtual-machine.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Troubleshooting and FAQ \/ Changing the Ruby version on the virtual machine ", 
"snippet" : "Issue: All Bitrise stacks have Ruby pre-installed, with several different available versions. However, your app's Gemfile might specify a Ruby version that isn't installed on any Bitrise stack and thus certain Steps, such as Run Cocoapods install , might fail. Possible solutions: You can either chan...", 
"body" : " Issue: All Bitrise stacks have Ruby pre-installed, with several different available versions. However, your app's Gemfile might specify a Ruby version that isn't installed on any Bitrise stack and thus certain Steps, such as Run Cocoapods install , might fail. Possible solutions: You can either change your Gemfile and specify an installed Ruby version, or install the correct Ruby version on the virtual machine itself. To install the version: 1. Add a Script Step to your Workflow. 2. Go to the Script content input. 3. In the input field, add the following: # Install the minor version you want - in this example we're installing 3.1.2:\nrbenv install 3.1.2\n# Set it as your default version of Ruby:\nrbenv global 3.1.2\nrbenv local 3.1.2\n " }, 
{ "title" : " Tips, tricks, tutorials ", 
"url" : "-en--tips,-tricks,-tutorials.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Tips, tricks, tutorials ", 
"snippet" : "Welcome to the Tutorials section! Here we are offering more detailed, in-depth guides, often specific to certain platforms or tools. We are always happy to receive user submissions to this section: the Community Created Tutorials is a collection of in-depth Bitrise-related guides that are hosted on ...", 
"body" : " Welcome to the Tutorials section! Here we are offering more detailed, in-depth guides, often specific to certain platforms or tools. We are always happy to receive user submissions to this section: the Community Created Tutorials is a collection of in-depth Bitrise-related guides that are hosted on other websites. You can also submit a guide to be included in full in our documentation: if you have a proposal, contact us ! Check out the specific sections within our tutorials: Fastlane - How to configure and use fastlane on Bitrise. Xamarin - We support Xamarin apps out of the box. Docker - You can use your own docker image! " }, 
{ "title" : " Configuring fastlane match for Bitrise ", 
"url" : "-en--tips,-tricks,-tutorials/-en--configuring-fastlane-match-for-bitrise.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Tips, tricks, tutorials \/ Configuring fastlane match for Bitrise ", 
"snippet" : "If you want to use fastlane match in your bitrise.io build, you only have to do three things: Make sure that a single SSH key can be used to git clone both your main repository (the one you register on bitrise.io ) and the match repository. Add an Environment Variable MATCH_PASSWORD to specify the p...", 
"body" : " If you want to use fastlane match in your bitrise.io build, you only have to do three things: Make sure that a single SSH key can be used to git clone both your main repository (the one you register on bitrise.io ) and the match repository. Add an Environment Variable MATCH_PASSWORD to specify the passphrase you used for match . On bitrise.io , you should add this as a Secret Environment Variable in the Workflow Editor. Make sure to disable the Replace variables in input? option of the environment variable to avoid causing issues when the value includes the $ (dollar) sign, which is used for environment variable expansion. Make sure to use match ’s readonly mode, or else match will try to connect to the Apple Developer Portal, which requires further authorization (providing additional username and password for Apple Dev Portal login)! If you use match in your Fastfile or fastlane config: match(app_identifier: \"my.domain\", type: \"appstore\", readonly: true) . If you use it as a command line tool: match development --readonly . That’s all, you can now enjoy the utility of match , automated with bitrise.io . " }, 
{ "title" : " Installing a specific fastlane version ", 
"url" : "-en--tips,-tricks,-tutorials/-en--installing-a-specific-fastlane-version.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Tips, tricks, tutorials \/ Installing a specific fastlane version ", 
"snippet" : "If you need to use a specific version of fastlane, you can find the version of fastlane that is pre-installed on the stack by checking the system report for the stack you are using. If you need to use a different version, there are two ways to do this depending on if your project uses a Gemfile or n...", 
"body" : " If you need to use a specific version of fastlane, you can find the version of fastlane that is pre-installed on the stack by checking the system report for the stack you are using. If you need to use a different version, there are two ways to do this depending on if your project uses a Gemfile or not. If your project uses a Gemfile Define the required version number in your Gemfile. For example: gem \"fastlane\", \"2.166.0\" The Fastlane Step will install this version before running any lanes. If your project doesn't use a Gemfile Replace the pre-installed version by adding a Script Step to your Workflow with the following commands: \n #!\/usr\/bin\/env bashset -ex\n\ngem uninstall fastlane --all --executables\ngem install fastlane --version 2.166.0 --no-document \n Make sure that your Fastlane Step has the Should update fastlane gem before run? option set to false. " }, 
{ "title" : " Benefits of committing your dependencies into your repository ", 
"url" : "-en--tips,-tricks,-tutorials/-en--benefits-of-committing-your-dependencies-into-your-repository.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Tips, tricks, tutorials \/ Benefits of committing your dependencies into your repository ", 
"snippet" : "We recommend including your dependencies inside your repository whenever possible, as it improves reliability and speed and gives you complete control over dependency changes. Let's look at the benefits!...", 
"body" : " We recommend including your dependencies inside your repository whenever possible, as it improves reliability and speed and gives you complete control over dependency changes. Let's look at the benefits! " }, 
{ "title" : " Reliability ", 
"url" : "-en--tips,-tricks,-tutorials/-en--benefits-of-committing-your-dependencies-into-your-repository.html#-en--reliability", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Tips, tricks, tutorials \/ Benefits of committing your dependencies into your repository \/ Reliability ", 
"snippet" : "Network issues are less likely to cause problems: builds won’t fail just because a dependency manager’s server is down. Similarly, using different versions of the dependency manager tool in different environments can cause problems: version updates can introduce changes that break compatibility with...", 
"body" : " Network issues are less likely to cause problems: builds won’t fail just because a dependency manager’s server is down. Similarly, using different versions of the dependency manager tool in different environments can cause problems: version updates can introduce changes that break compatibility with previous versions. With your dependencies stored in the repository, you are not forced to use the exact same version of the tool across your team and on the CI service. Packages\/dependencies can disappear from the dependency manager. This can break the project at the worst time and is avoidable by not relying on the dependency manager. " }, 
{ "title" : " Speed ", 
"url" : "-en--tips,-tricks,-tutorials/-en--benefits-of-committing-your-dependencies-into-your-repository.html#-en--speed", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Tips, tricks, tutorials \/ Benefits of committing your dependencies into your repository \/ Speed ", 
"snippet" : "Your builds will be faster if there are no dependencies to download. For example, if you use CocoaPods and commit your Pods directory and the .xcworkspace generated by CocoaPods, you can remove the Run CocoaPods install Step from your Bitrise configuration....", 
"body" : " Your builds will be faster if there are no dependencies to download. For example, if you use CocoaPods and commit your Pods directory and the .xcworkspace generated by CocoaPods, you can remove the Run CocoaPods install Step from your Bitrise configuration. " }, 
{ "title" : " Control ", 
"url" : "-en--tips,-tricks,-tutorials/-en--benefits-of-committing-your-dependencies-into-your-repository.html#-en--control", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Tips, tricks, tutorials \/ Benefits of committing your dependencies into your repository \/ Control ", 
"snippet" : "With the dependencies stored in the repository, you see every dependency update in your repository, and you can review the changes in git. You have complete control over whether to upgrade to a newer version of any dependency. There are no more issues with private submodules or private pods. Using p...", 
"body" : " With the dependencies stored in the repository, you see every dependency update in your repository, and you can review the changes in git. You have complete control over whether to upgrade to a newer version of any dependency. There are no more issues with private submodules or private pods. Using private submodules can be tricky because granting access requires a workaround to grant access with SSH keys. If you have every dependency in your repository, a single read-only deployment SSH key will be enough. " }, 
{ "title" : " Screen recording of Android UI tests with Script Steps ", 
"url" : "-en--tips,-tricks,-tutorials/-en--screen-recording-of-android-ui-tests-with-script-steps.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Tips, tricks, tutorials \/ Screen recording of Android UI tests with Script Steps ", 
"snippet" : "You can run UI tests that are specific to your Android app and have the whole process screen recorded using one Bitrise Workflow. Here is an example Workflow containing the Steps we will use in this guide: Add the AVD Manager Step at the beginning of your Workflow to create and run an Android Virtua...", 
"body" : " You can run UI tests that are specific to your Android app and have the whole process screen recorded using one Bitrise Workflow. Here is an example Workflow containing the Steps we will use in this guide: Add the AVD Manager Step at the beginning of your Workflow to create and run an Android Virtual Device. Add the Wait for Android Emulator Step after the AVD Manager Step. This Step makes sure that the Android emulator has finished booting before the screen recording would start. Add a Script Step after the Wait for Android Emulator Step. (We’re renaming this Script Step as Start screen recording Step.) Insert the following commands to the Script content input field: $ANDROID_HOME\/platform-tools\/adb shell \"screenrecord \/sdcard\/video.mp4 --verbose\" &> $BITRISE_DEPLOY_DIR\/logs.txt & disown \n$ANDROID_HOME\/platform-tools\/adb shell \"screencap -p \/sdcard\/screen.png\" &> $BITRISE_DEPLOY_DIR\/logs.txt & disown The Start screen recording Step: Starts screen recording before UI testing. Captures a screenshot of the emulator screen BEFORE the UI test would start. Add another Script Step after the Start screen recording Step. (We will call it Run UI test Step.) Add your script (for example, Maven, npm or Appium tests) in the Script content input field to call and run your UI test. Insert the third Script Step ( Stop Screen recording & get file from emulator ) after the Run UI tests Step. Add the following script to the Script content input field. $ANDROID_HOME\/platform-tools\/adb shell \"killall -INT screenrecord\"\nsleep 10\n$ANDROID_HOME\/platform-tools\/adb pull \/sdcard\/video.mp4 $BITRISE_DEPLOY_DIR\/video.mp4\nadb pull \/sdcard\/screen.png $BITRISE_DEPLOY_DIR\/\n \n$ANDROID_HOME\/platform-tools\/adb shell \"screencap -p \/sdcard\/screen2.png\" &> $BITRISE_DEPLOY_DIR\/logs.txt & disown\n \nadb pull \/sdcard\/screen2.png $BITRISE_DEPLOY_DIR\/ Stop Screen recording & get file from emulator Step does the following: Stops the screen recording. Gets the screen recording. Gets those Emulator screenshots that had been taken before UI tests started. Gets the final screenshot of the Emulator screen. Places these files in the BITRISE_DEPLOY_DIR path. Add the Deploy to Bitrise.io - Apps, Logs, Artifacts Step to your workflow to export all files stored in the BITRISE_DEPLOY_DIR directory to Artifacts . You can check these files at the Artifacts tab of your Build’s page. (Note that if you did not place the files in this directory, they will not be deployed to the Artifacts tab of your Build’s page.) If your build fails due to No such process (error message below) or an Enemphasisr failed (err=-38) error in your build log, most likely the screen resolution of the screen recording and the device does not match. \/opt\/android-sdk-linux\/platform-tools\/adb shell 'killall -INT screenrecord' killall: screenrecord: No such process Here is what to check: Check if you have the right resolution set in the Resolution field of the AVD Manager Step. If you’re NOT using the AVD Manager Step to start the emulator (and use Script Step instead), then you can fix the screen size in the Script content field of the Start screen recording Step by specifying the width and height of the screen: --size <WIDTHxHEIGHT> . " }, 
{ "title" : " Screen recording your UI tests with Appium ", 
"url" : "-en--tips,-tricks,-tutorials/-en--screen-recording-your-ui-tests-with-appium.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ Tips, tricks, tutorials \/ Screen recording your UI tests with Appium ", 
"snippet" : "Appium is a popular testing framework to catch defects in native, hybrid, and web apps. You can easily integrate your Appium UI tests into your own Bitrise workflow using our Script Step. This way you can have the whole testing screen recorded and can visually verify if your app is doing what it’s s...", 
"body" : " Appium is a popular testing framework to catch defects in native, hybrid, and web apps. You can easily integrate your Appium UI tests into your own Bitrise workflow using our Script Step. This way you can have the whole testing screen recorded and can visually verify if your app is doing what it’s supposed to do. In this guide we’ll show how to kickstart Appium and run your UI test specified in the test.js file, then retrieve the test results and view them on bitrise.io . ADB workaround for Javascript Javascript does not support the in-built screen recording and screen capturing commands so we’re using ADB shell commands as a workaround. For all the other languages, check out Appium’s Start Recording Screen guide. We will use our Script and Deploy to Bitrise.io Steps. Here is why: The Script Step executes what you insert in its input field. The Deploy to Bitrise.io Step delivers your test result to the Artifacts tab of your Build’s page. Let’s put this all together! Insert the Script Step as the first Step in your Workflow. Insert the following command to the Script content input field. appium &> $BITRISE_DEPLOY_DIR\/logs.txt & disown npm test You will find the above mentioned logs.txt file in the Bitrise deploy directory ( BITRISE_DEPLOY_DIR ). This logs.txt file contains the outputs of the Appium server. With the help of the Deploy to Bitrise.io Step, you will be able to download this file from the Artifacts tab. Since screen recoding is not supported through Javascript, we advise you to add the screen recording \/ screen capturing and the file retrieving shell commands to your own test.js file. Once you have pulled the test results (which in this case can be videos and screenshots) from the emulator, make sure you move them to the Bitrise deploy directory ( BITRISE_DEPLOY_DIR ). Insert the Deploy to Bitrise.io Step to your workflow so that it can export your test results to the Artifacts tab on your Build’s page. Start a build! If all went well, you should be able to view the generated test results on the Artifacts tab of your Build’s page. " }, 
{ "title" : "参考文献 ", 
"url" : "参考文献.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 ", 
"snippet" : "リファレンスは、グラフィカルUIだけでなく、YAMLモードでも、基本的なBitrise構成と高度なBitrise構成の両方を理解して作成するのに役立ちます。 このセクションは、Bitrise構成のリファレンスです。目標は、グラフィカルUIだけでなく、YAMLモードでも基本構成と高度な構成の両方を理解して作成できるようにすることです。...", 
"body" : "リファレンスは、グラフィカルUIだけでなく、YAMLモードでも、基本的なBitrise構成と高度なBitrise構成の両方を理解して作成するのに役立ちます。 このセクションは、Bitrise構成のリファレンスです。目標は、グラフィカルUIだけでなく、YAMLモードでも基本構成と高度な構成の両方を理解して作成できるようにすることです。 " }, 
{ "title" : "bitrise.ymlの基本 ", 
"url" : "参考文献/bitrise-ymlの基本.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ bitrise.ymlの基本 ", 
"snippet" : "The bitrise.yml ファイルはBitrise構成の中心です。 Bitrise CLIは、ローカルまたは当社のWebサイトでBitriseビルドを実行できるようにするためにこのファイルを必要とします。 The bitrise.yml ファイルはBitrise構成の中心です。 The Bitrise CLI ローカルまたは当社のWebサイトでBitriseビルドを実行できるようにするには、このファイルが必要です。 ベアミニマル bitrise.yml と同じくらい簡単です： format_version: 11 上記の構成は有効ですが、実行するものは何も含まれていません run 。 あ...", 
"body" : "The bitrise.yml ファイルはBitrise構成の中心です。 Bitrise CLIは、ローカルまたは当社のWebサイトでBitriseビルドを実行できるようにするためにこのファイルを必要とします。 The bitrise.yml ファイルはBitrise構成の中心です。 The Bitrise CLI ローカルまたは当社のWebサイトでBitriseビルドを実行できるようにするには、このファイルが必要です。 ベアミニマル bitrise.yml と同じくらい簡単です： format_version: 11 上記の構成は有効ですが、実行するものは何も含まれていません run 。 あなたができる最小限の構成 bitrise run ： format_version: 5\nworkflows:\n test: 上記の構成は、次のコマンドで実行できます。 bitrise run test 。 Bitrise CLIはエラーを表示しませんが、実行するように宣言されたものはまだありません。 シングルを実行する例を続けましょう 脚本 ステップ あなたがそれを実行するとき bitrise run test 。 format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\napp:\n envs:\n - MY_NAME: My Name\nworkflows:\n test:\n steps:\n - script@1.1.5:\n inputs:\n - content: echo \"Hello ${MY_NAME}!\" このサンプル構成の簡単な説明： format_version ：BitriseCLI形式の最小バージョンを宣言します。 BitriseCLIでサポートされている最高のフォーマットバージョンを入手してください bitrise version --full 。 フォーマットバージョン番号 フォーマットバージョン番号は、どのBitriseCLIバージョンが構成を実行できるかを決定します。たとえば、 format_version に 11 つまり、フォーマットバージョンをサポートしていないBitriseCLIバージョン 11 以上の場合、構成を実行できません。これは、古いBitriseCLIバージョンでは使用できない機能を使用する場合に重要です。 default_step_lib_source ：ステップに他のソースが定義されていない場合に使用するソースを指定します。 project_type ：ソースプロジェクトのタイプを定義します（たとえば、 android 、 ios 、 flutter ）。 app - envs ：を指定します 環境変数 （Env Var）これは、すべてのビルド、ワークフロー、およびステップで使用できます。 workflows ：は、で実行できる個別のビルド構成のコレクションです。 bitrise run WORKFLOWID 。 この例では、唯一のワークフローは test 、で実行できます bitrise run test 。と呼ばれる2番目のワークフローがある場合 main 、両方を実行できます bitrise run test と bitrise run main 。 steps ：リスト ステップ これは、ワークフローの実行時に実行する必要があります。 この例では、 test ワークフローには1つだけが含まれます script ステップ。複数のステップが宣言されている場合、それらは1つずつ実行されます。 script@1.1.5 ：実行するステップ（参照）。この参照にはStepLibSource宣言がありません。つまり、 default_step_lib_source StepLibソースとして使用されます。 inputs ：ステップ入力を指定します。 複数の入力 ステップには多くの入力を含めることができます。設定または上書きするbitrise.ymlの入力のみを指定します。 content ：設定したい入力。 この例では、スクリプトステップの内容を指定しました。 echo \"Hello ${MY_NAME}!\" ： これは 価値 に指定しました content 入力。 bitrise.ymlのサイズ制限 でワークフローを編集する場合 bitrise.io （どちらかで ワークフローエディター または bitrise.yml タブ）とあなたの bitrise.yml サイズ制限を超えると、変更を保存しようとするとUIに次の警告が表示されます。 Error saving! Error saving app config: Validation failed: App config validation 784: unexpected token at 'Argument list too long - bin\/bitrise これは、合計サイズが bitrise.yml そしてその bitrise.secrets.yml ファイルは400KBを超えることはできません。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 秘密 bitrise.yml設定のカスタマイズ ワークフローリファレンス " }, 
{ "title" : "bitrise.yml設定のカスタマイズ ", 
"url" : "参考文献/bitrise-yml設定のカスタマイズ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ bitrise.yml設定のカスタマイズ ", 
"snippet" : "編集できるすべてのツール bitrise.yml カスタムプロパティを追加できます。このようにして、環境変数に特別なプロパティやメモを追加したり、ワークフローの新しい構成を試してみたりすることができます。 bitrise.yml 。追加する必要があるのは、 meta フィールドと、適切な場所にキーと値を持つ名前空間ラベル。 編集できるすべてのツール bitrise.yml カスタムプロパティを追加できます。このようにして、特別なプロパティやメモを追加できます 環境変数 、またはあなたの新しい構成を試してみてください ワークフロー の bitrise.yml 。追加する必要があるのは、 meta...", 
"body" : "編集できるすべてのツール bitrise.yml カスタムプロパティを追加できます。このようにして、環境変数に特別なプロパティやメモを追加したり、ワークフローの新しい構成を試してみたりすることができます。 bitrise.yml 。追加する必要があるのは、 meta フィールドと、適切な場所にキーと値を持つ名前空間ラベル。 編集できるすべてのツール bitrise.yml カスタムプロパティを追加できます。このようにして、特別なプロパティやメモを追加できます 環境変数 、またはあなたの新しい構成を試してみてください ワークフロー の bitrise.yml 。追加する必要があるのは、 meta フィールドと、適切な場所にキーと値を持つ名前空間ラベル。 次の形式を使用して、構成にカスタム値を追加します。 KEY: \"VALUE\",\nopts: {\n title: \"My env var\"\n description: \"Description of my env var.\"\n summary: \"Summary of env var.\"\n ...\n meta: {\n custom_namespace_id_1: {\n key1: \"value1\",\n key2: \"value2\",\n ...\n }\n custom_namespace_id_2: {\n ...\n }\n} 独自のバージョンのワークフローエディターを使用する あなたは私たちをフォークすることができます ワークフローエディター 独自のバージョンを使用してください。その後、あなたは使用することができます meta ：たとえば、環境変数（Env Var）の1つを監視し、それが最後に変更されたのはいつで、誰によって変更されたかを知りたいとします。 app:\n envs:\n - ASXaS: \"`ZX`ZX\"\n opts:\n is_expand: false\n meta:\n audit: # used by the Audited Workflow Editor imaginary tool: that works like the WFE but it also saves the modifier and modification date, and displays it\n last_modified_at: 2018.09.12.\n last_modifier: Jane Doe 環境変数に背景色を追加する あなたが使用することができます meta 独自のツールで環境変数に背景色を追加するには： meta: {\n my_fancy_new_workflow_editor: {\n env_var_background_color: \"red\"\n }\n } あなたが見ることができます meta で実行中 bitrise.io 同じように。たとえば、ワークフローにデフォルトのスタックとは異なるスタックを選択した場合です。 UIのワークフローエディタをクリックして、ワークフローの別のスタックタイプを選択するだけです。 Stacks & Machines タブ。このようにして、ワークフローが新しいスタックでどのように実行されるかをテストできます。 あなたが戻って行く場合 bitrise.yml タブ、 bitrise.io meta に追加されます deploy ワークフロー： workflows:\n deploy:\n steps:\n - activate-ssh-key@4.0.3:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@4.0.11: {}\n - script@1.1.5:\n title: Do anything with Script step\n - deploy-to-bitrise-io@1.3.15: {}\n meta:\n bitrise.io:\n stack: osx-xcode-12.1.x\n このメタはでのみ解釈されるので bitrise.io ローカルまたはBitriseCLIではなく、次のように分類されます。 bitrise.io 名前空間（スタックがキーであり、 osx-xcode-12.1.x は値です）。ワークフローエディタは常に保存された変数を検証し、構文エラーがある場合はエラーをスローしますが、 meta さらに、そのコンテンツはワークフローエディターの検証プロセスによって完全に無視されます。 マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 ワークフローリファレンス " }, 
{ "title" : "ワークフローリファレンス ", 
"url" : "参考文献/ワークフローリファレンス.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ ワークフローリファレンス ", 
"snippet" : "すべてのbitrise.ymlプロパティ 利用可能なプロパティの完全なリストは、 bitrise.ymlフォーマットの仕様\/リファレンス CLIのドキュメント。 ワークフローは、単一のステップ、環境変数、およびその他の構成のコレクションです。 bitrise run 。 ワークフローの唯一の要件はIDです。例として、この構成では、IDを使用して1つのワークフローを宣言しました test 。 format_version: 1.3.1 workflows: test: 複数のワークフローを定義し、特定のワークフローを実行できます。 bitrise run WORKFLOWID 。 2つのワークフ...", 
"body" : "すべてのbitrise.ymlプロパティ 利用可能なプロパティの完全なリストは、 bitrise.ymlフォーマットの仕様\/リファレンス CLIのドキュメント。 ワークフローは、単一のステップ、環境変数、およびその他の構成のコレクションです。 bitrise run 。 ワークフローの唯一の要件はIDです。例として、この構成では、IDを使用して1つのワークフローを宣言しました test 。 format_version: 1.3.1\nworkflows:\n test:\n 複数のワークフローを定義し、特定のワークフローを実行できます。 bitrise run WORKFLOWID 。 2つのワークフローの定義： format_version: 1.3.1\nworkflows:\n first:\n second: 利用可能なすべてのワークフローを bitrise.yml ファイル： bitrise run または、代わりに： bitrise workflows ワークフローにステップを追加するには、次のようにするだけです。 steps: 次に、ステップを追加します。 format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script:\n title: First step\n - script:\n title: Second step ワークフロー固有のパラメーターと環境変数を定義できます。ワークフローの環境変数は、ワークフローの実行時に使用され、ワークフローのすべてのステップで使用できます。 format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n envs:\n - ENV_VAR_ONE: first value\n - ENV_VAR_TWO: second value ワークフローをチェーンして、特定のワークフローの前後に複数のワークフローを実行できます。 format_version: 1.3.1\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n send-notifications:\n steps:\n # send notifications\n\n setup:\n steps:\n # setup Steps to run\n\n test:\n before_run:\n - setup\n envs:\n - IS_TEST: \"true\"\n steps:\n # test Steps to run\n\n ci:\n before_run:\n - test\n after_run:\n - send-notifications\n\n deploy:\n before_run:\n - test\n steps:\n # steps to deploy\n after_run:\n - send-notifications\n 上記の例に基づいて、次のコマンドを実行すると、次のようになります。 bitrise run send-notifications ：のステップのみ send-notifications ワークフローが実行されます。 bitrise run setup ：のステップのみ setup ワークフローが実行されます。 bitrise run test ：最初のステップ setup ワークフローが実行され、次にで宣言されたステップ test ワークフロー。 bitrise run ci ：ワークフローのステップを次の順序で実行します。 setup test ci （NS ci ワークフローにはステップがありませんが、それは問題ではありません。これは、ここではステップが実行されず、ビルドがチェーン内の次のワークフローで続行されることを意味します）。 send-notifications bitrise run deploy ：ワークフローのステップを次の順序で実行します。 setup test deploy send-notifications これは、何を定義できることを意味します setup と test であなたのプロジェクトで行う必要があります setup と test ワークフローは1回だけで、他のワークフローで再利用できます。ワークフロー間でステップを複製する必要はありません。 Bitrise CLIは、ユーティリティワークフローと呼ばれる小さな表記をサポートしています。たとえば、IDがアンダースコア文字で始まるワークフローです。 _setup 。ユーティリティワークフローは、で直接実行することはできません bitrise run コマンド：それらはで参照できます before_run と after_run プロパティ。 実行すると、ワークフローリストの最後にユーティリティワークフローが表示されます。 bitrise run また bitrise workflows ： The following workflows are available:\n * ci\n * deploy\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\nThe following utility workflows are defined:\n * _send-notifications\n * _setup\n * _test\n マシンタイプを構築する 手順とワークフロー ステップ ステップ入力 Androidアプリのワークフローレシピ iOSアプリのワークフローレシピ クロスプラットフォームアプリのワークフローレシピ アプリのbitrise.ymlファイルの管理 秘密 bitrise.ymlの基本 bitrise.yml設定のカスタマイズ " }, 
{ "title" : "手順リファレンス ", 
"url" : "参考文献/手順リファレンス.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス ", 
"snippet" : "ステップは、ビルドタスクをカプセル化します。つまり、そのタスクを実行するためのコード、タスクに定義できる入力とパラメーター、およびタスクが生成する出力です。 ステップは、ビルドタスクをカプセル化します。つまり、そのタスクを実行するためのコード、タスクに定義できる入力とパラメーター、およびタスクが生成する出力です。 たとえば、 Git Clone ステップは、 git clone ブランチやクローンへのコミットなど、指定された入力を使用した、指定されたリポジトリの。 技術的な観点から、ステップは、ステップのコードとステップのインターフェース定義を含む、semverバージョンのリポジトリです。 ス...", 
"body" : "ステップは、ビルドタスクをカプセル化します。つまり、そのタスクを実行するためのコード、タスクに定義できる入力とパラメーター、およびタスクが生成する出力です。 ステップは、ビルドタスクをカプセル化します。つまり、そのタスクを実行するためのコード、タスクに定義できる入力とパラメーター、およびタスクが生成する出力です。 たとえば、 Git Clone ステップは、 git clone ブランチやクローンへのコミットなど、指定された入力を使用した、指定されたリポジトリの。 技術的な観点から、ステップは、ステップのコードとステップのインターフェース定義を含む、semverバージョンのリポジトリです。 ステップインターフェイスの定義は、 step.yml すべてのステップのファイル。含まれるもの： ステップの依存関係。 ステップの入力と出力。 ステップのタイトルと説明。 課題トラッカーやサポートURLなどのプロパティ、または特定のフィルタープロパティ。 ステップを含めるには ワークフロー 、でそれらを参照する必要があります bitrise.yml アプリのファイル。そのためには、ステップの正しい参照形式が必要になります。構成ファイルでは、ステップのインターフェース定義で定義された入力の入力値を指定することもできます。 " }, 
{ "title" : "ステップリファレンス\/ IDフォーマット ", 
"url" : "参考文献/手順リファレンス/ステップリファレンス--idフォーマット.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ ステップリファレンス\/ IDフォーマット ", 
"snippet" : "bitrise.ymlファイルでステップを参照するには、少なくともステップIDを含める必要があります。オプションで、StepLibソースとStepバージョンを指定することもできます。 A ステップ 参照には、次の3つのコンポーネントを含めることができます。 StepLibソース：公式などのStepリポジトリのライブラリ ビットライズステップライブラリ 。 ステップID：すべてのステップには、その一部としてIDが必要です。 step.yml 意味。 ステップバージョン：含めるステップの数値バージョン。 次の構文を使用して、ステップを参照します。 <step_lib_source>::<step-...", 
"body" : "bitrise.ymlファイルでステップを参照するには、少なくともステップIDを含める必要があります。オプションで、StepLibソースとStepバージョンを指定することもできます。 A ステップ 参照には、次の3つのコンポーネントを含めることができます。 StepLibソース：公式などのStepリポジトリのライブラリ ビットライズステップライブラリ 。 ステップID：すべてのステップには、その一部としてIDが必要です。 step.yml 意味。 ステップバージョン：含めるステップの数値バージョン。 次の構文を使用して、ステップを参照します。 <step_lib_source>::<step-id>@<version>: これらの3つのコンポーネントから、ステップIDのみが必要です。例えば： - script: これは次のように書くことができます： https:\/\/github.com\/bitrise-io\/bitrise-steplib.git::script@1.1.3: バージョンが定義されていない場合は、ステップの最新バージョンが使用されます。 StepLibソースが定義されていない場合、 default_step_lib_source 使用されます。 ステップの特定のバージョン（1.1.3など）を使用することをお勧めします。 " }, 
{ "title" : "特別なステップのソース ", 
"url" : "参考文献/手順リファレンス/ステップリファレンス--idフォーマット.html#特別なステップのソース", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ ステップリファレンス\/ IDフォーマット \/ 特別なステップのソース ", 
"snippet" : "2つの特別なステップソースがあります。 git:: と path:: これらのソースのいずれかを使用すると、ステップはステップライブラリではなく、指定したIDデータによって識別されます。...", 
"body" : "2つの特別なステップソースがあります。 git:: と path:: これらのソースのいずれかを使用すると、ステップはステップライブラリではなく、指定したIDデータによって識別されます。 " }, 
{ "title" : "git ::ソース ", 
"url" : "参考文献/手順リファレンス/ステップリファレンス--idフォーマット.html#git---ソース", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ ステップリファレンス\/ IDフォーマット \/ 特別なステップのソース \/ git ::ソース ", 
"snippet" : "NS git:: sourceは、gitホスティングプロバイダーのステップのリポジトリです。 NS script ステップのGitHubソースは次のとおりです。 https:\/\/github.com\/bitrise-io\/steps-script 。参照するには script gitリファレンスを直接ステップスルーすると、 git:: ソース、ステップのgit clone URL、およびリポジトリ内のブランチまたはタグ。 参照するには 1.1.3 スクリプトステップのリポジトリのバージョンタグ： - git::https:\/\/github.com\/bitrise-io\/steps-script...", 
"body" : "NS git:: sourceは、gitホスティングプロバイダーのステップのリポジトリです。 NS script ステップのGitHubソースは次のとおりです。 https:\/\/github.com\/bitrise-io\/steps-script 。参照するには script gitリファレンスを直接ステップスルーすると、 git:: ソース、ステップのgit clone URL、およびリポジトリ内のブランチまたはタグ。 参照するには 1.1.3 スクリプトステップのリポジトリのバージョンタグ： - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: 一般に、ステップライブラリを介してステップバージョンを使用できる場合は常に、を使用する代わりにそれを行う必要があります。 git:: ソースの種類。ローカルステップキャッシング、ネットワークキャッシング、代替ダウンロードURLなどの機能は、StepLibで共有されるステップでのみサポートされます。 ただし、このタイプの参照では、StepLibを介して取得できない特定のことが可能になります。たとえば、 git:: ソースタイプは、ステップのまだ公開されていない状態または進行中の状態に使用できます。独自のステップを開発する場合は、これを使用できます git:: ステップをStepLibに公開する前に、ステップをテストするためのソースタイプ。 参照する soon-to-be-released ステップを開発しているリポジトリのブランチ： - git::https:\/\/github.com\/bitrise-io\/steps-script.git@soon-to-be-released: " }, 
{ "title" : "パス::ソース ", 
"url" : "参考文献/手順リファレンス/ステップリファレンス--idフォーマット.html#パス--ソース", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ ステップリファレンス\/ IDフォーマット \/ 特別なステップのソース \/ パス::ソース ", 
"snippet" : "NS path:: sourceは、ステップのリポジトリへのローカルパスを指定し、バージョン情報を必要としません。絶対ローカルパスと相対ローカルパスの両方がサポートされています。相対パスは、 bitrise.yml ファイル。 - path::\/path\/to\/my\/step: - path::.\/relative\/path: これはステップ開発に役立ちます。アプリのソースコードにビルドステップを含めたい場合にも使用できます。...", 
"body" : "NS path:: sourceは、ステップのリポジトリへのローカルパスを指定し、バージョン情報を必要としません。絶対ローカルパスと相対ローカルパスの両方がサポートされています。相対パスは、 bitrise.yml ファイル。 - path::\/path\/to\/my\/step:\n\n- path::.\/relative\/path: これはステップ開発に役立ちます。アプリのソースコードにビルドステップを含めたい場合にも使用できます。 " }, 
{ "title" : "bitrise.ymlファイルのステップデータ ", 
"url" : "参考文献/手順リファレンス/bitrise-ymlファイルのステップデータ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ bitrise.ymlファイルのステップデータ ", 
"snippet" : "で指定したステップデータと情報 bitrise.yml fileは、ステップのデフォルト定義と比較して、変更するステップのパラメーターです。 The ステップ で指定するデータと情報 bitrise.yml fileは、ステップのデフォルト定義と比較して、変更するステップのパラメーターです。 ステップの生のインターフェース定義を確認するには、ステップライブラリで確認できます。ステップインターフェイスの定義は、StepLibの ステップディレクトリ 。 入力またはその他のStepプロパティを指定しない場合 bitrise.yml 構成、ステップ（参照\/ ID）のみ、ステップは、インターフェイス定...", 
"body" : "で指定したステップデータと情報 bitrise.yml fileは、ステップのデフォルト定義と比較して、変更するステップのパラメーターです。 The ステップ で指定するデータと情報 bitrise.yml fileは、ステップのデフォルト定義と比較して、変更するステップのパラメーターです。 ステップの生のインターフェース定義を確認するには、ステップライブラリで確認できます。ステップインターフェイスの定義は、StepLibの ステップディレクトリ 。 入力またはその他のStepプロパティを指定しない場合 bitrise.yml 構成、ステップ（参照\/ ID）のみ、ステップは、インターフェイス定義でステップの開発者によって定義されたデフォルト値で実行されます。 単一の例を見てみましょう 脚本 ステップ、実行時に実行されます bitrise run test ： format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n ステップの入力を inputs: リストプロパティ。入力は、 鍵 と 価値 ： インデント YAML形式のインデントは非常に重要です！ 2スペースのインデントを使用する必要があり、タブを使用してインデントすることはできません。 format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n inputs:\n - content: \"echo 'Hello World!'\" ステップに必要な入力がない場合は、入力を指定する必要はありません。必要な数の入力に値を指定できます。 ステップ入力値は常に ストリング \/テキスト値とそれらは環境変数としてステップに渡されます。標準のYAMLマルチライン形式を使用して、値をマルチラインにすることもできます。 format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n - content: |\n #!\/bin\/bash\n set -ex\n var_to_print='Hello World!'\n echo \"${var_to_print}\" 上記のように複数行の値を使用する場合は、キーと比較して、値を2つのスペースでインデントする必要があります。 前のステップが失敗した場合でも、を設定することにより、ステップを強制的に実行します。 is_always_run プロパティに true ： format_version: 1.3.1\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n is_always_run: true\n inputs:\n - content: \"puts 'Hello Ruby!'\"\n - runner_bin: ruby\n 使用 title ステップに説明的なタイトルを追加するプロパティ： format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n title: Print Hello Ruby\n is_always_run: true\n inputs:\n - content: \"puts 'Hello Ruby!'\"\n - runner_bin: ruby " }, 
{ "title" : "ステッププロパティ ", 
"url" : "参考文献/手順リファレンス/ステッププロパティ.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ ステッププロパティ ", 
"snippet" : "ステッププロパティは、プロジェクトタイプ、ソースコード、必要な依存関係など、ステップの重要なデータを提供します。ステップの入力と出力もステッププロパティとして定義されます。 ステップ プロパティは、プロジェクトタイプ、ソースコード、必要な依存関係など、ステップの重要なデータを提供します。ステップの入力と出力もステッププロパティとして定義されます。プロパティを見てみましょう！ title 、 summary と description ：コメント、ツール、GUI用のメタデータ。 永続的なコメントとしてのメタプロパティ これらのメタプロパティは、永続的なコメントに使用できます。 YMLが正規化され...", 
"body" : "ステッププロパティは、プロジェクトタイプ、ソースコード、必要な依存関係など、ステップの重要なデータを提供します。ステップの入力と出力もステッププロパティとして定義されます。 ステップ プロパティは、プロジェクトタイプ、ソースコード、必要な依存関係など、ステップの重要なデータを提供します。ステップの入力と出力もステッププロパティとして定義されます。プロパティを見てみましょう！ title 、 summary と description ：コメント、ツール、GUI用のメタデータ。 永続的なコメントとしてのメタプロパティ これらのメタプロパティは、永続的なコメントに使用できます。 YMLが正規化されたり、JSONに変換されたり、その他の方法で生成または変換されたりすると、標準のYMLコメントは保持されません。これらのメタプロパティはです。 website ：ステップ\/サービスの公式ウェブサイト。 source_code_url ：ステップのソースコードを表示できるURL。 support_url ：ステップのサポート\/課題追跡システムへのURL。 published_at ： 共有時に自動生成 -ステップのバージョンのStepLib公開日 source ： 共有時に自動生成 gitクローン情報。 asset_urls ： 共有時に自動生成 アイコン画像などのステップアセット（StepLib固有）。 host_os_tags ：サポートされているオペレーティングシステム。 現在未使用で、将来の使用のために予約されています。 project_type_tags ：ステップがプロジェクトタイプ固有の場合、プロジェクトタイプタグ。例： ios また android 。完全にオプションであり、ステップリストでの検索とフィルタリングにのみ使用されます。 type_tags ：ステップに関連するジェネリック型タグ。例： utility 、 test また notification 。に似ている project_type_tags 、このプロパティは完全にオプションであり、ステップリストでの検索とフィルタリングにのみ使用されます。 deps ：ステップに必要な依存関係を指定します。依存関係を宣言するには、パッケージマネージャーを指定してから、インストールする依存関係を指定します。 inputs ：ステップの入力（環境）。 outputs ：ステップの出力（環境）。 " }, 
{ "title" : "ステップ入力リファレンス ", 
"url" : "参考文献/手順リファレンス/ステップ入力リファレンス.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ ステップ入力リファレンス ", 
"snippet" : "ステップ入力は、BitriseCLIに特定のステップの実行方法を指示する環境項目です。ステップの入力は、 step.yml を設定することにより、すべてのステップのファイル inputs 財産.. ステップ 入力は、 Bitrise CLI 特定のステップを実行する方法。ステップの入力は、 step.yml を設定することにより、すべてのステップのファイル inputs 財産.. ステップ入力の構文は、すべての環境プロパティと同じです。これは、2つの主要な部分で構成されています。 KEY: value ペアと opts 分野。 inputs: - my_key_for_the_env: \"de...", 
"body" : "ステップ入力は、BitriseCLIに特定のステップの実行方法を指示する環境項目です。ステップの入力は、 step.yml を設定することにより、すべてのステップのファイル inputs 財産.. ステップ 入力は、 Bitrise CLI 特定のステップを実行する方法。ステップの入力は、 step.yml を設定することにより、すべてのステップのファイル inputs 財産.. ステップ入力の構文は、すべての環境プロパティと同じです。これは、2つの主要な部分で構成されています。 KEY: value ペアと opts 分野。 inputs:\n- my_key_for_the_env: \"default value\" \n opts: \n title: An example env var item \n is_dont_change_value: false \n category: example my_key_for_the_env ：入力のキー（必須）。 default value ：入力のデフォルト値。常にデフォルト値を指定する必要はありません。 opts ：オプションのプロパティ。 " }, 
{ "title" : "ステップ入力プロパティ ", 
"url" : "参考文献/手順リファレンス/ステップ入力リファレンス.html#ステップ入力プロパティ", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ ステップ入力リファレンス \/ ステップ入力プロパティ ", 
"snippet" : "ステップ入力で使用可能なプロパティ： title 、 summary と description ：コメント、ツール、GUI用のメタデータ。 永続的なコメントとしてのメタプロパティ これらのメタプロパティは、永続的なコメントに使用できます。 YMLが正規化されたり、JSONに変換されたり、その他の方法で生成または変換されたりすると、標準のYMLコメントは保持されません。これらのメタプロパティはです。 is_expand ：に設定できます true また false 。デフォルト値は true そのため、Bitrise CLIは、ステップに渡す前に環境変数（Env Vars）を展開します。つまり...", 
"body" : "ステップ入力で使用可能なプロパティ： title 、 summary と description ：コメント、ツール、GUI用のメタデータ。 永続的なコメントとしてのメタプロパティ これらのメタプロパティは、永続的なコメントに使用できます。 YMLが正規化されたり、JSONに変換されたり、その他の方法で生成または変換されたりすると、標準のYMLコメントは保持されません。これらのメタプロパティはです。 is_expand ：に設定できます true また false 。デフォルト値は true そのため、Bitrise CLIは、ステップに渡す前に環境変数（Env Vars）を展開します。つまり、ステップ入力の値がEnv Varの場合、BitriseCLIは変数の値をステップに渡します。に設定されている場合 false 、CLIはEnvVarのキーを文字列として渡します。 skip_if_empty ：に設定できます true また false 。に設定されている場合 true 、値が空の場合、入力は使用されません。 category ：入力を分類するために使用されます。同じ入力 category 便宜上、WebサイトのUIの1つのメニューにグループ化されて表示されます。 value_options ：使用可能な値のリスト。 is_required ：に設定できます true また false 。に設定されている場合 true 、このステップでは、入力に空でない値を設定する必要があります。 is_dont_change_value ：に設定できます true また false 。に設定されている場合 true 、入力の値を変更したり、UIで非表示にしたりしないでください。主にデバッグ入力と「 繋がり 」入力（このステップを別のステップに接続するために、他のステップの出力に設定されます）。 is_template ：に設定できます true また false 。に設定されている場合 true , 入力の値はGoテンプレートとして評価されます。 is_sensitive ：入力を機密としてマークすることは、その値としてシークレット環境変数のみを受け入れることを意味します。パスワード、APIキー、トークンなどの機密情報に最も頻繁に使用されますが、入力はすべて機密としてマークできます。 " }, 
{ "title" : "ステップ入力にテンプレート式を使用する ", 
"url" : "参考文献/手順リファレンス/ステップ入力リファレンス.html#ステップ入力にテンプレート式を使用する", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ ステップ入力リファレンス \/ ステップ入力にテンプレート式を使用する ", 
"snippet" : "特定の状況でのみ特定の値を使用するためにステップが必要な場合は、テンプレート式をステップ入力として使用します。テンプレート式は、ステップが入力を使用する前に評価されます。彼らはで書かれています Goのテンプレート言語 。 をセットする is_template のプロパティ step.yml テンプレート式を使用するプロジェクトのファイル。 を開きます step.yml プロジェクトのファイル。 テンプレート式を使用するステップを見つけます。 追加します opts フィールドに content ステップの。 追加します is_template プロパティに opts その値をに設定します tru...", 
"body" : "特定の状況でのみ特定の値を使用するためにステップが必要な場合は、テンプレート式をステップ入力として使用します。テンプレート式は、ステップが入力を使用する前に評価されます。彼らはで書かれています Goのテンプレート言語 。 をセットする is_template のプロパティ step.yml テンプレート式を使用するプロジェクトのファイル。 を開きます step.yml プロジェクトのファイル。 テンプレート式を使用するステップを見つけます。 追加します opts フィールドに content ステップの。 追加します is_template プロパティに opts その値をに設定します true 。 テンプレート式をステップに追加します content 。 BitriseCLIがCIモードになっているかどうかの確認 - script:\n title: Template example\n inputs:\n - content: |-\n {{if .IsCI}}\n echo \"CI mode\"\n {{else}}\n echo \"not CI mode\"\n {{end}}\n opts:\n is_template: true " }, 
{ "title" : "ステップ出力リファレンス ", 
"url" : "参考文献/手順リファレンス/ステップ出力リファレンス.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 手順リファレンス \/ ステップ出力リファレンス ", 
"snippet" : "ステップ出力は、特定のステップを実行した結果である環境項目です。ステップのデフォルト出力をチェックアウトできます。 Workflow Editor の上 bitrise.io またはで step.yml ステップのファイル。 ステップ 出力は、特定のステップを実行した結果である環境項目です。たとえば、 Bitrise.ioにデプロイします ステップは、デフォルトで2つの出力環境を生成します。 $BITRISE_PUBLIC_INSTALL_PAGE_URL BITRISE_PUBLIC_INSTALL_PAGE_URL_MAP ステップのデフォルト出力をチェックアウトできます。 ワークフローエ...", 
"body" : "ステップ出力は、特定のステップを実行した結果である環境項目です。ステップのデフォルト出力をチェックアウトできます。 Workflow Editor の上 bitrise.io またはで step.yml ステップのファイル。 ステップ 出力は、特定のステップを実行した結果である環境項目です。たとえば、 Bitrise.ioにデプロイします ステップは、デフォルトで2つの出力環境を生成します。 $BITRISE_PUBLIC_INSTALL_PAGE_URL BITRISE_PUBLIC_INSTALL_PAGE_URL_MAP ステップのデフォルト出力をチェックアウトできます。 ワークフローエディター の上 bitrise.io またはで step.yml ステップのファイル。 ステップ出力は、で定義できます。 step.yml を設定することにより、プロジェクトのファイル outputs 属性。これらは、すべての環境プロパティと同じ構文を持っています。これは、2つの主要な部分で構成されています。 KEY: value ペアと opts 分野。キーと値が必要です、 opts フィールドはオプションです。 - MY_KEY_FOR_THE_ENV: my value for the env\n opts:\n title: An example env var item\n is_dont_change_value: false\n category: example MY_KEY_FOR_THE_ENV ：環境アイテムのキー（必須）。 my value for the env ：アイテムの値（必須）。 opts ：オプションの属性。 ステップのデフォルト出力は、ユーザーが変更することはできません。 bitrise.yml プロジェクトのファイル：それらはでのみ変更できます step.yml ファイル。ただし、カスタムで出力をエクスポートすることはできます 環境変数 。これは、たとえば、同じステップが2回ある場合に役立ちます。 ワークフロー そして、両方のステップで生成された出力を使用したい場合： workflows:\n primary:\n steps:\n - gradle-runner:\n outputs:\n - BITRISE_APK_PATH: ALIAS_APK_PATH\n この例では、 BITRISE_APK_PATH 環境変数は、 ALIAS_APK_PATH 鍵。 " }, 
{ "title" : "利用可能な環境変数 ", 
"url" : "参考文献/利用可能な環境変数.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ 利用可能な環境変数 ", 
"snippet" : "環境変数（Env Vars）は、キーと値、およびオプションの属性で構成されます。これらは、アプリ、ワークフロー、またはステップのレベルで定義できます。 環境変数 （Env Vars）はキーと値で構成されます。オプションの属性を含めることもできます。それらはのレベルで定義することができます アプリ 、 ワークフロー また 手順 。 独自のEnvVarを設定できますが、BitriseCLIまたはBitriseCLIのいずれかによって自動的に公開されるEnvVarの選択があります。 bitrise.io 。 Bitrise CLI によって公開される環境変数 自分のコンピューターでビルドを実行してい...", 
"body" : "環境変数（Env Vars）は、キーと値、およびオプションの属性で構成されます。これらは、アプリ、ワークフロー、またはステップのレベルで定義できます。 環境変数 （Env Vars）はキーと値で構成されます。オプションの属性を含めることもできます。それらはのレベルで定義することができます アプリ 、 ワークフロー また 手順 。 独自のEnvVarを設定できますが、BitriseCLIまたはBitriseCLIのいずれかによって自動的に公開されるEnvVarの選択があります。 bitrise.io 。 Bitrise CLI によって公開される環境変数 自分のコンピューターでビルドを実行している場合でも、どこでも利用できます。 によって公開された環境変数 bitrise.io で実行されているビルドで使用できます bitrise.io 仮想マシン。 bitrise.io によって公開されたパイプライン環境変数 で実行されている Pipeline ビルドでのみ使用できます。 bitrise.io 仮想マシン。 環境変数として公開されたステップ出力 ステップは、ステップ出力を環境変数として公開することもできます。たとえば、バイナリを構築するステップは、そのバイナリを環境変数として他のステップに公開できます。基本的にどの Bitrise ステップでもこの方法で出力を公開できるため、すべてをリストすることはしませんが、git クローン作成プロセスに関連するすべての環境変数を見つけることができます。 表4「. BitriseCLIによって公開された環境変数 環境変数キー 説明 $BITRISE_TRIGGERED_WORKFLOW_ID だったワークフローのID 引き金になった 。このEnvVarは、ワークフローが手動でトリガーされたか自動でトリガーされたかに関係なく公開されます。 $BITRISE_TRIGGERED_WORKFLOW_TITLE トリガーされたワークフローのタイトル。この環境変数は、ワークフローが手動でトリガーされたか自動でトリガーされたかに関係なく公開されます。 $BITRISE_BUILD_STATUS ビルドの現在のステータス。使用可能なオプションは次のとおりです。 0：成功しました。 1：失敗しました。 成功した現在のステータスは、ビルドの前のステップのいずれも失敗しなかったことを意味します。 $BITRISE_SOURCE_DIR 基本作業ディレクトリへのパス。デフォルトでは、別の値を指定しない限り、これはBitriseが実行されるディレクトリです。これはビルド中に上書きされる可能性があり、ビルドの後続のステップの作業ディレクトリが変更されます。 $BITRISE_DEPLOY_DIR デプロイメント用のアーティファクトとファイルを格納するディレクトリへのパス。これは、デフォルトでBitrise CLIによって作成される一時ディレクトリであり、BitriseCLIを開始する前に上書きできます。 NS Bitrise.ioにデプロイします ステップは、ビルドアーティファクト（アプリのIPAやAPKなど）、テスト結果、およびこのディレクトリ内の他のファイルを探します。 $CI BitriseCLIが継続的インテグレーションモードで実行されているかどうかを示します。可能な値は次のとおりです。 true false $PR Bitrise CLIがPR（プルリクエスト）モードで実行されているかどうかを示します。プルリクエストモードで実行するということは、Bitriseがプルリクエストがすでにマージされているかのような状態でコードをビルドすることを意味します。可能な値は次のとおりです。 true false bitrise.ioによって公開された環境変数 環境変数キー 説明 $BITRISE_BUILD_NUMBER ビルドのビルド番号 bitrise.io 。 $BITRISE_APP_TITLE 上のアプリのタイトル bitrise.io 。あなたはいつでもそれを変更することができます 設定 アプリのタブ。 $BITRISE_APP_URL 上のURLまたはアプリ bitrise.io 。これはgitリポジトリのURLと同じではありません！アプリのURLの形式は次のとおりです。 app.bitrise.io\/APP-SLUG\/ 例：https：\/\/app.bitrise.io\/app\/31e481ce08e0xfd9。 $BITRISE_APP_SLUG 上のアプリを一意に識別するスラッグ bitrise.io 。これもアプリのURLの一部です。 $BITRISE_BUILD_URL ビルドのURL bitrise.io 。 $BITRISE_BUILD_SLUG ビルドを一意に識別するスラッグ bitrise.io 。これもビルドURLの一部です。 たとえば、次のビルドURLを見てみましょう：https：\/\/app.bitrise.io\/build\/d75abbebxfc9ca4e。ビルドスラッグは d65abbebxfc9ca4e この例では。 $BITRISE_BUILD_TRIGGER_TIMESTAMP ビルドがトリガーされた日時。 $GIT_REPOSITORY_URL アプリをホストするGitリポジトリのURL。これはで変更できます 設定 アプリのタブ。 SSH形式またはHTTPS形式のいずれかです。 $BITRISE_GIT_BRANCH Bitriseによって構築されたgitブランチ。例えば、 main 。 $BITRISEIO_GIT_BRANCH_DEST プルリクエストによってトリガーされたビルドでのみ使用されます：ビルドをトリガーしたプルリクエストの宛先\/ターゲットブランチ。 たとえば、プルリクエストはブランチのコンテンツをブランチにマージしたいと考えています main 。この場合、このEnvVarの値は次のようになります。 main 。 $BITRISE_GIT_TAG ビルドがGitタグによってトリガーされた場合、このEnvVarは使用されたタグを保存します。 $BITRISE_GIT_COMMIT 該当する場合、ビルドをトリガーしたGitコミットのコミットハッシュ。 $BITRISE_GIT_MESSAGE コミットメッセージ、プルリクエストのタイトル、またはビルドを手動でトリガーした場合に指定したメッセージ。 $BITRISEIO_GIT_REPOSITORY_OWNER アプリのGitリポジトリの所有者。 $BITRISEIO_GIT_REPOSITORY_SLUG アプリのGitリポジトリのスラッグ。 $BITRISE_PULL_REQUEST ビルドをトリガーしたプルリクエストのID。 $BITRISEIO_PULL_REQUEST_REPOSITORY_URL ビルドをトリガーしたプルリクエストが送信されたリポジトリのURL。 $BITRISEIO_PULL_REQUEST_MERGE_BRANCH 事前マージブランチ-Gitホスティングプロバイダーが特別なマージブランチでプルリクエストの事前マージ状態をサポートおよび提供する場合。 $BITRISEIO_PULL_REQUEST_HEAD_BRANCH Gitホスティングプロバイダーシステムがこれをサポートおよび提供している場合は、プルリクエストヘッドブランチ。この特別なgitrefは、プルリクエストのソースを指している必要があります。 $BITRISE_PROVISION_URL にアップロードされたAppleプロビジョニングプロファイルのURL bitrise.io 。アプリにアップロードされたプロビジョニングプロファイルが複数ある場合は、パイプ文字（ | ）リスト内のURLを区切ります。 これは、iOSアプリとiOSバージョンのクロスプラットフォームアプリにのみ関係します。 $BITRISE_CERTIFICATE_URL にアップロードされたApple証明書のURL bitrise.io 。アプリに複数の証明書がアップロードされている場合は、パイプ文字（ | ）リスト内のURLを区切ります。 これは、iOSアプリとiOSバージョンのクロスプラットフォームアプリにのみ関係します。 $BITRISE_CERTIFICATE_PASSPHRASE アプリのアップロードされた Apple 証明書に設定したパスフレーズ コード署名とファイル タブ。パスフレーズを持つ証明書が複数ある場合は、パイプ文字 ( | ) は、リスト内のフレーズを区切ります。 これは、iOSアプリとiOSバージョンのクロスプラットフォームアプリにのみ関係します。 $BITRISE_IO ビルドがbitrise.io環境で実行されていることを示します。値はに設定されます true ビルドを開始するときにBitriseによって。 bitrise.io によって公開されたパイプライン環境変数 環境変数キー 説明 $BITRISEIO_PIPELINE_ID 実行中の Pipeline ビルドの ID。この環境変数は、パイプラインが手動でトリガーされたか自動でトリガーされたかに関係なく公開されます。 $BITRISEIO_PIPELINE_TITLE 実行中の Pipeline ビルドの名前。この環境変数は、パイプラインが手動でトリガーされたか自動でトリガーされたかに関係なく公開されます。 BITRISEIO_FINISHED_STAGES ビルドで以前に完了したステージとワークフローのステータス。 Git クローン リポジトリ ステップによって公開される環境変数 環境変数キー 説明 $GIT_CLONE_COMMIT_HASH ビルドが使用するコミットのハッシュ (複製されたコミット)。 $GIT_CLONE_COMMIT_MESSAGE_SUBJECT 複製されたコミットのコミット メッセージの件名。 $GIT_CLONE_COMMIT_MESSAGE_BODY 複製されたコミットのコミット メッセージの本文 (コンテンツ)。 $GIT_CLONE_COMMIT_COUNT 複製されたコミットのコミット数。この環境変数は、 clone_depth ステップ入力。詳細については、 Git クローンの手順の説明 . $GIT_CLONE_COMMIT_AUTHOR_NAME 複製されたコミットの作成者の名前。 $GIT_CLONE_COMMIT_AUTHOR_EMAIL 複製されたコミットの作成者の電子メール。 $GIT_CLONE_COMMIT_COMMITER_NAME 複製されたコミットのコミッターの名前。 $GIT_CLONE_COMMIT_COMMITER_EMAIL 複製されたコミットのコミッターの電子メール。 " }, 
{ "title" : "Bitriseツール ", 
"url" : "参考文献/bitriseツール.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ Bitriseツール ", 
"snippet" : "Bitriseチームによって使用および保守されているオープンソースツールのリスト。 Bitriseチームが管理しているオープンソースツールのリストは次のとおりです。 Bitriseツール 名前 タイプ 説明 リンク Bitrise CLI CLI で使用されるBitriseCLI bitrise.io ビルドを実行します。これを使用して、ビルドをローカルで実行できます。 https:\/\/github.com\/bitrise-io\/bitrise ステップマン CLIツール ステップライブラリの管理に使用されるステップコレクションマネージャ。 https:\/\/github.com\/bitrise...", 
"body" : "Bitriseチームによって使用および保守されているオープンソースツールのリスト。 Bitriseチームが管理しているオープンソースツールのリストは次のとおりです。 Bitriseツール 名前 タイプ 説明 リンク Bitrise CLI CLI で使用されるBitriseCLI bitrise.io ビルドを実行します。これを使用して、ビルドをローカルで実行できます。 https:\/\/github.com\/bitrise-io\/bitrise ステップマン CLIツール ステップライブラリの管理に使用されるステップコレクションマネージャ。 https:\/\/github.com\/bitrise-io\/stepman envman CLIツール BitriseCLIが分離および管理するために使用する環境変数マネージャー 環境変数 ビルド中。 BitriseCLIとは独立して使用することもできます。 https:\/\/github.com\/bitrise-io\/envman 初期化 CLIコアプラグイン このプラグインを使用して、プロジェクトスキャナーがプロジェクトのタイプをローカルで検出し、Bitrise構成を生成できるようにします。 https:\/\/github.com\/bitrise-io\/bitrise-plugins-init.git ステップ CLIコアプラグイン このプラグインを使用して、ステップ情報を一覧表示、取得、またはステップを作成します。 https:\/\/github.com\/bitrise-io\/bitrise-plugins-step ワークフローエディター CLIコアプラグイン このプラグインを使用してビルドを構成します bitrise.yml オフラインワークフローエディターを使用してローカルで構成します。 https:\/\/github.com\/bitrise-io\/bitrise-workflow-editor.git bitrise-plugin-io CLIコアプラグイン このプラグインを使用して、上のアプリを管理します bitrise.io ターミナル\/コマンドラインから直接。 https:\/\/github.com\/bitrise-io\/bitrise-plugins-io codesigndoc iOSコード署名ツール Xcodeプロジェクトからコード署名ファイルを収集してアップロードするために使用されるツール。 https:\/\/github.com\/bitrise-io\/codesigndoc bitrise webhooks Webhookプロセッサ この BitriseWebhookプロセッサ さまざまな着信Webhook（GitHub、Bitbucket、Slackなど）をに変換します bitrise.io のBuildTrigger API形式であり、それを呼び出してビルドを開始します。 https:\/\/github.com\/bitrise-io\/bitrise-webhooks " }, 
{ "title" : "Bitrise アドオン ", 
"url" : "参考文献/bitrise-アドオン.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ Bitrise アドオン ", 
"snippet" : "Bitrise は、当社のサービスに追加機能を提供するいくつかのアドオンを提供しています。 これらのアドオンには、次の 2 つのタイプがあります。 コア CI\/CD 製品に追加機能を提供するアドオン。例えば、 テストレポート . 新しいタイプの Bitrise サービスを提供するアドオン。例えば、 リリース管理 ....", 
"body" : "Bitrise は、当社のサービスに追加機能を提供するいくつかのアドオンを提供しています。 これらのアドオンには、次の 2 つのタイプがあります。 コア CI\/CD 製品に追加機能を提供するアドオン。例えば、 テストレポート . 新しいタイプの Bitrise サービスを提供するアドオン。例えば、 リリース管理 . " }, 
{ "title" : " Glossary ", 
"url" : "参考文献/-en--glossary.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 参考文献 \/ Glossary ", 
"snippet" : "App An app on Bitrise represents a Git repository that stores source code and has been connected to Bitrise to be able to run builds on it. As such, a Bitrise app isn't necessarily an actual application: it's just the code on which you run builds with Bitrise. bitrise.yml The  bitrise.yml  file stor...", 
"body" : " App An app on Bitrise represents a Git repository that stores source code and has been connected to Bitrise to be able to run builds on it. As such, a Bitrise app isn't necessarily an actual application: it's just the code on which you run builds with Bitrise. bitrise.yml The  bitrise.yml  file stores your entire build configuration for an app . It specifies your stack and the build triggers, and defines the Workflows of the app. When you make changes on the graphical UI of our Workflow Editor, you actually modify the  bitrise.yml  file. Pipeline A Bitrise Pipeline is the top level of the Bitrise CI\/CD configuration. Pipelines can be used to organize the entire CI\/CD process and to set up advanced configurations with multiple different tasks running parallel and\/or sequentially. Project scanner The project scanner is a tool that identifies the given project’s type and generates a basic Bitrise configuration. Each supported project type has its own scanner: these scanners are stored as separate packages. Secret A Secret is a specific type of Environment Variable : they hide their information in an encrypted format and their value is not exposed in the build logs nor in the  bitrise.yml  configuration. You can store confidential information, such as passwords or API keys as Secrets. Stack A build stack indicates the full configuration of the virtual machine that Bitrise uses to run your build. Each stack includes an operating system, and a large number of pre-installed software and tools. For example, our Xcode stacks run on macOS operating systems and contain, among many other tools, the Xcode version that is indicated in the name of the stack. Stage A Stage is a collection of Workflows. Stages are the top-level building blocks of Pipelines. A Stage can contain multiple Workflows, which all run in parallel in the same Stage. If all Workflows are successful in a Stage, the Pipeline moves on to the next Stage. If any of the Workflows fail, the Pipeline ends without running the other Stages unless you configure a given Stage to always run. Step ステップは、Bitriseでビルドタスクをカプセル化するスクリプト実行のブロックです。つまり、そのタスクを実行するコード、タスクに定義できる入力とパラメーター、およびタスクが生成する出力です。 step.yml The interface definition of a Bitrise Step. It defines the Step inputs and the generated outputs, as well as any other Step property such as the category and the description of the Step. It also points to the Step's source code. Trigger A trigger or build trigger is a configuration for automatically launching a Bitrise build when a specified event happens. Triggers require a webhook set up at your Git hosting provider. Workflow A Workflow is a collection of Steps, Environment Variables, and other configurations. When Bitrise starts a build, it runs one or more Workflows according to the configuration defined in the bitrise.yml file. Workflow Editor WFE The Bitrise Workflow Editor allows you to edit your Workflows, configure Steps, upload files (including code signing files) and manage your app's triggers and stacks on a graphical user interface. It is available both online and offline . Workspace A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. You can create multiple Workspaces, and you can be invited to Workspaces by other Bitrise users. To be able to add apps and run builds, you either need to be part of a Workspace, or you have to be an outside contributor on an app's team. " }, 
{ "title" : "404-ページが見つかりません ", 
"url" : "404.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ 404-ページが見つかりません ", 
"snippet" : "申し訳ありませんが、お探しのページが見つかりませんでした。ホームページに戻るか、最も人気のあるコンテンツのいくつかをチェックしてください。 入門ビルドのナンバリングとアプリのバージョン管理アプリのbitrise.ymlファイルの管理環境変数...", 
"body" : "申し訳ありませんが、お探しのページが見つかりませんでした。ホームページに戻るか、最も人気のあるコンテンツのいくつかをチェックしてください。 入門ビルドのナンバリングとアプリのバージョン管理アプリのbitrise.ymlファイルの管理環境変数" }, 
{ "title" : "ビルド時間を最適化する ", 
"url" : "ビルド時間を最適化する.html", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルド時間を最適化する ", 
"snippet" : "次のヒントを使用して、ビルド時間を改善できます。...", 
"body" : "次のヒントを使用して、ビルド時間を改善できます。 " }, 
{ "title" : "リポジトリに依存関係を含める ", 
"url" : "ビルド時間を最適化する.html#リポジトリに依存関係を含める", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルド時間を最適化する \/ リポジトリに依存関係を含める ", 
"snippet" : "リポジトリに依存関係（CocoaPodsなど）を含めると、ビルドを高速化できます。一度 git clone リポジトリの作成が完了すると、ビルドを実行するためのすべてが整います。 たとえば、CocoaPodsの場合、以下を含めると、ワークフローからCocoaPodsインストールステップを削除できます。 Pods ディレクトリ と 生成されたCocoaPods .xcworkspace リポジトリ内のファイル。...", 
"body" : "リポジトリに依存関係（CocoaPodsなど）を含めると、ビルドを高速化できます。一度 git clone リポジトリの作成が完了すると、ビルドを実行するためのすべてが整います。 たとえば、CocoaPodsの場合、以下を含めると、ワークフローからCocoaPodsインストールステップを削除できます。 Pods ディレクトリ と 生成されたCocoaPods .xcworkspace リポジトリ内のファイル。 " }, 
{ "title" : "ビルドキャッシュの使用 ", 
"url" : "ビルド時間を最適化する.html#ビルドキャッシュの使用", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルド時間を最適化する \/ ビルドキャッシュの使用 ", 
"snippet" : "NS キャッシュ機能の構築 ビルドをスピードアップするのにも役立ちます。注：ビルドキャッシュの効率は、キャッシュするファイルのサイズと、キャッシュするファイルの数によって異なります。...", 
"body" : "NS キャッシュ機能の構築 ビルドをスピードアップするのにも役立ちます。注：ビルドキャッシュの効率は、キャッシュするファイルのサイズと、キャッシュするファイルの数によって異なります。 " }, 
{ "title" : "Xcodeステップのクリーンビルドオプションをオフにする ", 
"url" : "ビルド時間を最適化する.html#xcodeステップのクリーンビルドオプションをオフにする", 
"breadcrumbs" : "Bitriseドキュメントへようこそ！ \/ ビルド時間を最適化する \/ Xcodeステップのクリーンビルドオプションをオフにする ", 
"snippet" : "BitriseのすべてのXcodeステップには、次のオプションがあります。 クリーンなXcodeビルドを実行しますか…？ 。このオプションを使用すると、実行時にXcodeプロジェクトの完全で完全にクリーンなビルドを実行するか、同じワークフロー内の前のXcodeステップのキャッシュにアクセスするかをステップに指示できます。 このオプションをに設定する no ステップのコンパイル時間を短縮することで、ビルドを高速化できます。ただし、Xcodeステップが1つしかない場合、たとえば、 iOS用のXcodeアーカイブとエクスポート -ワークフローでは、その1つのステップで常にクリーンなXcodeビルドを...", 
"body" : "BitriseのすべてのXcodeステップには、次のオプションがあります。 クリーンなXcodeビルドを実行しますか…？ 。このオプションを使用すると、実行時にXcodeプロジェクトの完全で完全にクリーンなビルドを実行するか、同じワークフロー内の前のXcodeステップのキャッシュにアクセスするかをステップに指示できます。 このオプションをに設定する no ステップのコンパイル時間を短縮することで、ビルドを高速化できます。ただし、Xcodeステップが1つしかない場合、たとえば、 iOS用のXcodeアーカイブとエクスポート -ワークフローでは、その1つのステップで常にクリーンなXcodeビルドを実行する必要があります。 このオプションは、ステップが異なるビルドのビルドキャッシュにアクセスできることを意味するものではないことに注意してください。このオプションは、同じワークフローに複数のXcodeステップがある場合にのみ関係します。 " }
]
$(document).trigger('search.ready');
});