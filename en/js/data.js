var store = {};store['en'] = {};


        $(document).ready(function () {
        
            
            index  = lunr(function () {

            

                this.field('title', {boost: 10});
                this.field('body');
                this.ref('id');
            

        
this.add({id:2, 
title:"Getting started", 
body:" getting started get started bitrise signing email git provider, connecting repository, running first build. bitrise ci\/cd platform service (paas), mostly focused mobile app development. it collection tools services help with development automation software projects. to use it, sign email git hosting provider, connect repository, start building! " });
this.add({id:3, 
title:"Signing up for Bitrise", 
body:" signing bitrise email github gitlab bitbucket signing with git service providers means connect bitrise account provider. with connected account, grant access any repositories account. after signing up, connect bitrise account supported git service providers. for example, signed with github, gitlab bitbucket accounts, too, access any repositories accounts. " });
this.add({id:4, 
title:"Creating your first Workspace", 
body:" creating first workspace after signing up, bitrise automatically create first workspace . a workspace environment allows manage bitrise apps team members working apps. you need workspace able add app start running builds. can: create multiple workspaces . you invited workspaces bitrise users . workspace don't worry: rename any workspaces time! to sign paid subscription own, need workspace. check pricing page information. " });
this.add({id:5, 
title:"Adding a new app", 
body:" adding new app adding new app bitrise means connect git repository bitrise, allowing clone build it. add new app any time clicking + symbol menu bar selecting add new app web ui dropdown menu. as initial configuration process, you: decide app private public . private app data available invited work app. specify repository : github, gitlab bitbucket repository, manual repository url, self-hosted repository. register ssh key : gives bitrise access repository so clone build process. specify branch want build. you change later - anyway, adding new app takes couple minutes so just process scratch. as process, bitrise scan validate repository set app configuration based results scan: detect platform type files. if validation fails, manually. read details process adding a new app guide. you enable getting started guide receive hints adding app: open profile settings , scroll getting started guide section, set toggle on . " });
this.add({id:6, 
title:"Webhooks and triggers", 
body:" webhooks triggers you set webhooks process adding new app, any time later. webhooks allow bitrise communicate with party services: example, webhook github repository allows start build automatically code modified repository. git insights in addition automatic build triggers, webhooks enable use git insights , insights monitoring tool enables users quantify git collaboration metrics pull request cycle time merge frequency. once webhooks set up, configure start builds automatically defining triggers . you set: the event trigger build: example, code push pull request. the branch repository trigger builds: example, main dev . this means can, example, set trigger starts build pull request opened main branch. webhooks required triggers work! read more: adding incoming webhooksadding outgoing webhookstriggering builds automatically" });
this.add({id:7, 
title:"Builds and Workflows", 
body:" builds workflows once added app, first build kicked automatically. to view builds, dashboard - page log bitrise -, select app click builds tab access builds. a build series jobs, executed order defined app’s workflows . the jobs called steps , represent blocks script execution. the steps arranged graphical ui workflow editor huge number things: clone repository, build app, run tests , pass values , send notification messages developers, more. read relevant guides: workflows steps builds workflow recipes we offering workflow recipes: example workflows common use cases bitrise. workflow recipes for android appsworkflow recipes for ios appsworkflow recipes for cross-platform appsgeneric workflow recipes a build's logs viewed build’s page: builds tab select build want. all builds run clean virtual machines discarded build complete. read them: build machines . " });
this.add({id:8, 
title:"Testing and deploying", 
body:" testing deploying testing app deploying app with help steps: steps dedicated functions, based platform type. unit testing, ui real device testing possible bitrise: device testing for androiddevice testing for iosrunning android unit testsrunning unit and ui tests for ios apps once app tested, built ready go, quickly deploy store choice, example, google play app store. you check ship, fast efficient deployment solution: deploying with ship . " });
this.add({id:9, 
title:"Migrating to Bitrise", 
body:" migrating bitrise our migration guides aim help quickly painlessly migrate project current ci\/cd provider bitrise. our migration guides aim help quickly painlessly migrate project current ci\/cd provider bitrise. if need convincing make switch like learn bitrise offers comparison current ci\/cd solution, look further. " });
this.add({id:10, 
title:"Migrating from Jenkins to Bitrise", 
body:" migrating jenkins bitrise switch jenkins bitrise, experience comfort using cloud-based, mobile first ci\/cd platform offers out-of-the box functionalities. if looking switch jenkins bitrise speed mobile ci\/cd flow ease dedicated manpower, look further. this guide introduces important features how quickly settle jenkins world. " });
this.add({id:11, 
title:"Why bother migrating?", 
body:" why bother migrating? jenkins self-hosted ci server manually install maintain functionalities run any build requires dedicated manpower regular maintenance. when switch bitrise, experience comfort using cloud-based, mobile first ci\/cd platform offers out-of-the box development needs platform. this means is: no need download anything. no need any on-premise servers plugins. no need worry infrastructure, tools virtualization. bitrise takes care above. we vast array automatized steps, api , cli , up-to-date stacks add-ons with highly intuitive gui, called workflow editor, available fingertips. check world automated mobile development with bitrise! how bitrise helped companies migrate learn how epam, nextdoor, pulselive, delivery hero, signify, switched jenkins bitrise. the 5 main benefits switching jenkins cloud ci, report. read case study with pagseguro: smart ways optimize ci . " });
this.add({id:12, 
title:"Quick start guide", 
body:" quick start guide this quick start guide helps start first build bitrise with minimum config. sign bitrise don’t account yet. connect repo run automatically configured standard workflow any project. once you’ve looked generated yml, make changes need: you’re opting custom code, pop script step , run first build. or steps step library replicate jenkinsfile’s behaviors. after getting new workflow’s first green build, setup jobs configuring automatic triggers scheduled builds . optimize workflows with steps like bitrise.io cache pull bitrise.io cache push . need help? contact . if interested main jenkins-bitrise differences how bitrise enhance mobile development process, continue with guide below. " });
this.add({id:13, 
title:"Managing builds on Jenkins and on Bitrise", 
body:" managing builds jenkins bitrise a build bitrise process specified app’s workflow . it series steps , defined workflow, executed bitrise cli clean virtual machine locally machine. you check app’s builds bitrise dashboard analyze build logs app’s builds page. " });
this.add({id:14, 
title:"Triggering builds on Jenkins and Bitrise", 
body:" triggering builds jenkins bitrise in section describe how trigger builds bitrise: the build now function jenkins corresponds with starting build manually : click button builds page simply start new build tinker away with advanced configuration options for starting\/scheduling builds . the build periodically function jenkins scheduling builds function bitrise. a big advantage bitrise don’t set cron job, like jenkins, schedule specific time. instead, select day\/s timeline type hour month. no confusion cron expressions any more! for any git related events, code push, pull requests, tags, configure triggers automatically start build bitrise. the build projects function jenkins equivalent chaining workflows bitrise workflows run succession. it’s surprisingly easy chain bitrise. you trigger builds any remote system: use webhooks . we’re integrated with github, gitlab, bitbucket, gogs, slack, visual studio, assembla, deveo. you push build status reports git provider (github\/gitlab\/bitbucket). " });
this.add({id:15, 
title:"Environment Variables and Secrets on Bitrise", 
body:" environment variables secrets bitrise environment variables (a key value pair) defined app, workflow steps level. you lots interesting things with env vars: expose reuse step. copy env var key. overwrite env var. parameterize build adding custom env vars build. set workflow-specific env vars env vars tab run workflows with env vars available particular workflow. secrets type environment variables special ones. they hide sensitive information encrypted format so private input exposed build logs bitrise.yml . secret environment variables, secrets short, set adding key variable tab workflow editor. this built-in feature bitrise ensures following: your secrets shown bitrise.yml . your secrets stored encrypted. you prevent exposing secrets ui making protected. note able workaround log value secrets with pull request, thus advise not expose prs. " });
this.add({id:16, 
title:"Build caching", 
body:" build caching every build bitrise runs clean virtual machine does mean scratch - cache contents important files preserve builds. " });
this.add({id:17, 
title:"Jenkins plugins and Bitrise Steps", 
body:" jenkins plugins bitrise steps a step pre-defined task bitrise just like jenkins steps, however, easily configured intuitive ui pull repository. you configure inputs parameters define task, view\/reuse outputs generates. reusing output means workflow use value inputs. as continuous integration tool itself, jenkins integrates with services help plugins. users manage plugins centralized place, called manage plugins , install globally (on jenkins server), use specific projects. if notifies newer plugin version, admins doublecheck with teams they’re running any builds updating requires server restart. with plugins, reverting older version possible, latest available. in bitrise, however, steps first, add remove step bitrise workflow time wish won’t block project. you revert previous that’s need. what’s more: when editing workflow workflow editor , easily search step based functionality platform looking step library add workflow straightaway - need install prior setting workflow. you create custom step store repository, reference url workflow. a step jolly joker: script do custom script you’d like run workflow? select script step library add custom code script content input. discover steps integrations page right editing workflow. learn with steps: adding steps to a workflowstep versioningenabling or disabling a step conditionallydeveloping your own bitrise step using fastlane jenkins? you easily fastlane lanes work bitrise too. all add bitrise’s fastlane step workflow add lane step. start build run bitrise. for information, check guide integrating fastlane to bitrise . " });
this.add({id:18, 
title:"Jenkins Pipeline - Bitrise Workflow", 
body:" jenkins pipeline - bitrise workflow a jenkins pipeline equivalent bitrise workflow , bitrise workflows easier manage: quickly create new based existing ones, chain multiple single build, delete longer need. a bitrise workflow series steps, test, code sign, build apk\/ ipa deploy. when add app bitrise, primary workflow, created based project scanner’s findings, gets kicked off\/triggered automatically. you workflows certain project. for example: for any pr events, create workflow that, triggered, runs quickly executes basic tests smoke tests. for meatier workflow, runs test, recommend creating workflow run overnight schedule 6\/12\/24 hour interval. the workflow editor main place configuring workflow. jenkins stages equal multiple bitrise workflows chained inside main workflow. on workflow editor helps chain like toy trains other. the workflow editor powerful features built assist with mobile development: code signing : one-stop shop store manage code signing files used workflow. again, need installing tool first like jenkins. you any custom file (in generic file storage section) generic file storage step download. secrets : check app’s secret environment variables add new ones. environment variables : confusion secrets env vars bitrise. they neatly organized separate tabs so know where’s what. add app workflow specific here. you reference secrets with $. triggers : you configure triggers: code push events, pull requests, tags set automatically start builds bitrise. stack : check default stack app, select new dropdown menu specific workflows. " });
this.add({id:19, 
title:"Dashboards in Jenkins and Bitrise", 
body:" dashboards jenkins bitrise this main landing page start first build. if using bitrise more, see list latest, queued builds installed projects with profile workspace\/s member - page. the latest builds tab bitrise dashboard displays recent builds similarly build history feature jenkins. you filter any status: successful, aborted, failed, running build displays statuses anyway. on jenkins, build statuses listed build executor status blue ocean dashboard . when using bitrise user-friendly graphical interface right start, whereas, with jenkins, install plugin first. build statuses shown dashboard , builds page app. build queue jenkins queued builds bitrise. you schedule builds queue with advanced option scheduling builds feature. on right dashboard, see apps apps . " });
this.add({id:20, 
title:"Adding a new app to Bitrise", 
body:" adding new app bitrise what new item means jenkins adding new app flow bitrise, web ui cli . this highly automated flow minimal configuration needed literally minute new build starts. our takes important phases: setting privacy, connecting repository, repository access, choosing branch, configuring app, configuring webhooks . " });
this.add({id:21, 
title:"Webhooks on Bitrise", 
body:" webhooks bitrise bitrise makes extensive use webhooks, enable with simple click connecting app bitrise. it sense add webhook initial setup having search functionality try quickly speed. in short, types webhooks: incoming webhooks, registered with git service provider, used automatically trigger builds bitrise. outgoing webhooks used send reports build events services, slack. they added website api . " });
this.add({id:22, 
title:"Jenkinsfile - Bitrise YAML", 
body:" jenkinsfile - bitrise yaml a jenkins pipeline uses groovy code, bitrise highly structured yaml format. all workflows defined bitrise.yml file yaml format, edit clicking bitrise.yml tab workflow editor. you store bitrise.yml file app bitrise.io repository . don’t worry, secrets (for example, credentials ids) safe with us. you download current bitrise.yml configuration app run locally with bitrise cli . " });
this.add({id:23, 
title:"Jenkinsfile - Bitrise yml file comparison", 
body:" jenkinsfile - bitrise yml file comparison if using jenkinsfile (pipeline project) jenkins considering switch bitrise, easily match stages with bitrise steps. old-school freestyle project, map configuration’s settings matching step function. for example, build section freestyle project with bitrise build step, android build step, map build trigger section jenkins with triggers function bitrise. make sure check step library inspiration. you check demo apps feel bitrise. for information, bitrise demo apps and their bitrise.yml files . migrating android app jenkins bitrise: step-by-step guide check blogpost moataz nabil how migrate android project jenkins bitrise. " });
this.add({id:24, 
title:"Master and agent on Jenkins - Bitrise stack", 
body:" master agent jenkins - bitrise stack a stack type virtual machine use run build. for example, native ios app, best xcode stacks. stacks come with necessary tools pre-installed, regularly updated make sure serve needs. this way don’t bother maintaining master agent instances adding node groovy code build certain platform. when add app bitrise, project selector automatically detects type based platform type, adds default stack it. your first build run stack, virtual machine with required tools pre-installed should wish use simply select default stack dropdown menu stack tab. if click more information link, see preinstalled tools with versions. we support latest xcode version shortly official release. in reports check installed tools versions stack. learn stack update policy . " });
this.add({id:25, 
title:"People management in Jenkins and Bitrise", 
body:" people management jenkins bitrise what people page jenkins places bitrise (depending team workspace set up). you see team members teams tab app. you see workspace members click account settings , select workspace people tab left. the purpose workspaces make easier manage people working different apps bitrise. unlimited number apps, workspace owners assign members work see fit. a team bitrise means users work app: make app’s team, manage teams tab. on groups tab manage workspace members delete, add new member group, assign group apps rename group. on people tab see added workspace and, needed, remove member groups workspace. workspaces consist groups: workspace owners create manage groups. a given group assigned work app: members level access app. " });
this.add({id:26, 
title:"Integrated SSO management on Bitrise", 
body:" integrated sso management bitrise while jenkins install authorization plugin sso management, bitrise comes integral velocity plan . workspace with plans set saml sso single gateway workspace bitrise. no remembering usernames credentials! all owner set bitrise saml sso app provider invite members org. we specific guides different providers guide steps. " });
this.add({id:27, 
title:"Signing up for Bitrise", 
body:" signing bitrise you sign bitrise email address authenticating with github, bitbucket gitlab account. you sign bitrise email address authenticating with github, bitbucket gitlab account. signing using git provider account brings practical benefits, like logging click course won’t authorize adding repositories hosted providers again. signing with email please note want sign bitrise with email address, address contain character + . " });
this.add({id:28, 
title:"Signing up with a Git provider", 
body:" signing with git provider you sign bitrise start free button upper right corner bitrise . it sign page. on sign page, scroll or sign up with section pick git provider. authorize selected git provider. if chose github, press authorize bitrise-io button, redirected bitrise. if chose bitbucket, press grant access button bitbucket, redirected bitrise. if chose gitlab, press authorize button, redirected bitrise. pick username password. when done, click sign . strong password please note provide strong password fulfills requirements: it 8 characters. one upper case character. one lower case character. one number. cannot contain character than 3 times row (aaa). cannot contain email username. after that, ready roll. your first workspace created automatically, redirected getting started page, rename workspace, run demo app , start adding new apps! " });
this.add({id:29, 
title:"Signing up with email", 
body:" signing with email don't use + character please note want sign bitrise with email address, address contain character + . you sign bitrise start free button upper right corner bitrise . it sign page. add email address, username, password. strong password please note provide strong password fulfills requirements: it 8 characters. one upper case character. one lower case character. one number. cannot contain character than 3 times row (aaa). cannot contain email username. check i agree bitrise terms service & privacy policy , click the  sign  button. check inbox confirmation email bitrise follow instructions there. if haven’t received us, click resend confirmation email button. and that's it! after confirming account, first workspace created automatically, redirected getting started page. you rename workspace, run demo apps , start adding new apps! " });
this.add({id:30, 
title:"Signing up with SAML SSO", 
body:" signing with saml sso you sign bitrise join workspace using workspace’s saml sso . on idp side, administrator add user bitrise saml sso app’s workspace. the bitrise workspace owner send invitation groups menu workspace bitrise. go sign page. click saml button. you directed initiate single sign-on page. provide bitrise workspace’s name got bitrise workspace owner click continue with sso so bitrise direct workspace’s connected saml sso provider. provide credentials associated with saml sso account. on almost page email field automatically populated based registered email address saml sso account. you alter provided username wish. click finish sign up . check inbox confirmation email bitrise follow instructions there. if haven’t received us, click resend confirmation email button. if went well, you’re landed bitrise dashboard view workspace’s apps! account settings , see workspace you’ve just joined. " });
this.add({id:31, 
title:"Creating your first Workspace", 
body:" creating first workspace a workspace environment allows manage bitrise apps team members working apps. to able add run builds, need workspace, outside contributor app's team. a workspace environment allows manage bitrise apps team members working apps. you create multiple workspaces, invited workspaces users. to able add apps run builds, need workspace, outside contributor app's team. you need workspace paid subscription plan bitrise. each workspaces different subscription plan determines how credits workspace's apps use. to create first workspace: log bitrise. in workspace field, enter workspace. you change later. click create workspace button. choose teams plan hobby plan. velocity plan if interested velocity plan, contact ! click subscribe button proceed finish creating first workspace. teams plan if chose teams plan, follow instructions set credit tier provide payment details. for information, check pricing page . once owner workspace, start adding apps. " });
this.add({id:32, 
title:"Adding a new app", 
body:" adding new app adding app bitrise means setting access repository so run builds. our project scanner determines platform type generates default workflows build deploy app. adding app bitrise means granting access code's git repository so run builds. during process, project scanner detects platform type app - example, ios generate default workflows with necessary steps build deploy app. the project scanner supporting platform\/framework means project scanner detect type app set basic bitrise configuration based type. you add any app, too, regardless how it's built you'll configure manually. each app owned workspace apps, with exception public require form authentication able access repository. to add new app bitrise: on bitrise ci page, click add new app button. you open dropdown menu button add new app cli . select workspace app. set app private public. this settings can't changed later. private apps accessible workspace members. they need authenticate view app's details. public apps expose configuration file build logs link. connect repository. you can: connect github account organization bitrise github app integration select available repository. we strongly recommend method using github connect git provider account bitrise oauth application select available repository. enter repository url manually. configure authorization allow bitrise access repository. there multiple ways so, depending type app: public apps don't require authorization. private apps accessed github app integration don't need additional authorization. private apps with ssh urls, accessed oauth applications, require configuring ssh key . bitrise automatically create register ssh key pair. private apps with https urls, accessed oauth applications, require https authorization with personal access token . we recommend using token with read access. set default branch app decide want project scanner scan code branch. if repository connected, select available branch dropdown menu. if entered repository url manually, need type valid branch name. repository url you able change project's repository url later. you connect disconnect account git provider services any time. configure app settings. you modify confirm automatically generated settings, create configuration manually. the configuration sets stack , machine type , project root directory, things. the exact parameters configure depends type. select app icon. you skip add icon later. for apps with oauth connections, add webhook . a webhook required automatically trigger builds . apps with github app integration don't need webhook. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:33, 
title:"Getting started with iOS apps", 
body:" getting started with ios apps get started bitrise signing email git provider, connecting repository, running first build ios app. developing ios complex - aim make easy possible you! in guide, we’ll walk how add app to bitrise, run xcode tests, manage code signing files, deploy to  bitrise.io  and app store. integrating fastlane bitrise you run your fastlane lane bitrise with commands use locally. bitrise’s automated steps provide extra functionality lane speed builds. for information, check integrating fastlane bitrise . " });
this.add({id:34, 
title:"Adding an iOS app to Bitrise", 
body:" adding ios app bitrise do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. we look configuration files set app based them. in case ios app, we’re looking xcode project ( .xcodeproj ) xcode workspace ( .xcworkspace ) path. note validation fail shared scheme project. you point bitrise manually xcode it’s shared, automatically detect you. select ipa export method. you modify later - now, select  development . once clicked it, see your: project workspace path. scheme ipa export method. ios stack. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:35, 
title:"Testing your iOS app", 
body:" testing ios app once created app, first build run based automatically created primary workflow. you check app’s workflow editor: click app’s your dashboard then the workflow tab. if test targets defined, the primary workflow ios app includes two steps you need run xcode tests, view results on  bitrise.io : xcode test ios deploy bitrise.io code signing files running xcode tests deploying results bitrise require any code signing files. so don’t worry just yet! the xcode test ios step runs pre-defined xcode tests. it default configuration does need modified: tests written correctly, work. you options xcode, too. checking selected stack stacks & machines tab we recommend checking stack selected app xcode version used build app. for example, simulator test fails with ineligible destinations the scheme message, make sure xcode version stacks & machines tab correct. you read stacks: build stacks . the deploy bitrise.io step deploy following the  logs  and  artifacts  tab build: your xcode test results. your raw xcodebuildoutput log. the  deploy bitrise.io  step exports results the  xcode test ios  step the  test reports  add-on. " });
this.add({id:36, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:37, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:38, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:39, 
title:"Getting started with Android apps", 
body:" getting started with android apps get started bitrise signing email git provider, connecting repository, running first build android app. in guide, we’ll walk how add android app bitrise, default workflows do, finally how test deploy app bitrise.io google play store. do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider" });
this.add({id:40, 
title:"Adding an Android app to Bitrise", 
body:" adding android app bitrise log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. the scanner looking build.gradle gradlew files. if present, project detected android project. the bitrise scanner selects main module project default. if modules choose the module list, select works best project. select variant for building (you can  select all variants  which generate variants in  artifacts ) select variant for testing too. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:41, 
title:"Managing dependencies for Android apps", 
body:" managing dependencies android apps the gradle build allows include external binaries library modules dependencies. bitrise install dependencies app process. adding build dependencies you read adding dependencies android project: https:\/\/developer.android.com\/studio\/build\/dependencies make sure project's build.gradle file lists dependencies. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes android build step. if project scanner generated workflow called deploy first adding app, workflow includes step. it installs dependencies listed build.gradle file any additional configuration. make sure workflow includes install missing android sdk components step. the step before android build step workflow. it install android sdk tool project need. " });
this.add({id:42, 
title:"Testing your Android app", 
body:" testing android app we steps dedicated assisting testing android app ci process. the android lint step runs lint android project source files detects potential syntax errors code error free. the android unit test step runs project's unit tests. you run different modules flavors. running android unit tests the virtual device testing android uses firebase testlab run android tests virtual devices. device testing for android the android unit test step virtual device testing android step export results test reports add-on. to so, simply make sure workflow includes deploy bitrise.io step end workflow. " });
this.add({id:43, 
title:"Signing your Android app", 
body:" signing android app in order publish android app google play, need digitally sign app. bitrise you: you'll just upload keystore file, provide necessary authentication. other code signing options in section, we'll how sign android app with sign step. there ways - check options relevant guides: android code signing generate keystore file generate keystore file . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select code signing menu. drag-and-drop keystore file android keystore file field. fill keystore password , keystore alias , private key password fields click save metadata . open workflow editor . add android sign generate cordova build configuration step workflow. and that's it. the time you'll run build, android sign step sign generated binary. " });
this.add({id:44, 
title:"Deploying an Android app to bitrise.io", 
body:" deploying android app bitrise.io in section, we'll how deploy android app bitrise.io . deploying bitrise.io means build artifacts generated available download finished. you use test app devices, example. to deploy app bitrise.io : workflow editor bitrise.yml make sure workflow contains android build step build app. optionally, build app with gradle runner step. this requires bit configuration allows extensive customization. add deploy bitrise.io step workflow. notifying users you use notify: user roles notify: emails inputs step set notifications deploy. click input names reveal information how configure them. optionally, set enable public page app? input step true so step enables public install page app. run build. open bitrise.yml file app. make sure workflow contains android-build step build app. workflows:\n example-workflow:\n steps:\n - android-build@1:\n optionally, build app with gradle-runner step. this requires bit configuration allows extensive customization. set module and\/or variant input tell step build. in example, we're building debug variant android project. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} add deploy-to-bitrise-io step workflow. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} notifying users you use notify_user_groups notify_email_list inputs step set notifications deploy: the notify_user_groups input allows send notifications based access roles granted users. for example, set input notify with admin developer role. set multiple roles separated comma: - notify_user_groups: admins, testers . the notify_email_list input accepts secrets, secret contain comma-separated lists email addresses. optionally, set enable public page app? input step true so step enables public install page app. run build. the deploy bitrise.io step deploy app. you share generated binary with team members using build’s url. a bitrise.yml deploying android app bitrise in example, we're building debug variant android app, deploy bitrise.io, as. " });
this.add({id:45, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:46, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:47, 
title:"Getting started with React Native apps", 
body:" getting started with react native apps get started bitrise signing email git provider, connecting repository, running first build react native app. expo projects if use expo react native project, dedicated guide: getting started with expo apps . you easily set configure react native project bitrise . a react native repo consist android ios project so configurations normally with apps. when running bitrise, see first android, build gets built. do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider" });
this.add({id:48, 
title:"Adding a React Native app to Bitrise", 
body:" adding react native app bitrise this procedure guide process adding app bitrise, connecting repository, setting repository access, selecting branch validating project. below highlight react native-specific configuration well. log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. if configuration files available selected branch, scanner detect app react native app. if project consists module, module automatically selected module . if project contains than module, pick recommend main one! in variant field, select variant suits project. pick select all variants build variants. pick debug release wish generate apk ipa file. in project (or workspace) field, select xcode project workspace path. in select scheme , pick scheme name. the scanner validation fail shared project. you point bitrise manually xcode it’s shared, automatically detect you. in select ipa export method , select export method .ipa file: ad-hoc, app-store, development enterprise method. don't worry, change later. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . you successfully set react native project bitrise.io ! " });
this.add({id:49, 
title:"Installing dependencies for ExpoIonic\/CordovaReact Native apps", 
body:" installing dependencies expo ionic\/cordova react native apps if bitrise project scanner successfully scanned react native ionic\/cordova project, run npm command run yarn command steps included default workflows . these steps install missing javascript dependencies app . for native android dependencies, use install missing android sdk components step. for native ios dependencies, use, others, brew install step run cocoapods install step. to install javascript dependencies with npm: using yarn instead npm in guide, we're using npm install javascript dependencies. however, use run yarn command step: install missing js dependencies any additional configuration required. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes run npm command step. in the 'npm' command with arguments run input variable, type install . using npm ci command instead npm install if date package-lock.json file project, recommend using ci command the 'npm' command with arguments run input. using npm ci result faster build times compared npm install reliable builds well. " });
this.add({id:50, 
title:"Code signing for React Native apps", 
body:" code signing react native apps a react native app consists projects, android ios - different signing procedures. if click code signing tab project’s workflow editor, code fields displayed page you. follow platform-specific instructions sign android. " });
this.add({id:51, 
title:"Signing your Android project", 
body:" signing android project all android apps digitally signed with certificate installed devices. on bitrise, use dedicated step purpose first you'll need keystore file. generate keystore file generate keystore file . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select code signing menu. drag-and-drop keystore file android keystore file field. fill keystore password , keystore alias , private key password fields click save metadata . open workflow editor . add android sign generate cordova build configuration step workflow. if uploaded keystore file filled metadata, required inputs step require configuration you. prerequisite android sign step make sure add android sign step build ( android build step gradle runner step) workflow. " });
this.add({id:52, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:53, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:54, 
title:"Testing your React Native app", 
body:" testing react native app you use react native’s built testing method, called jest perform unit tests. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add run npm command step workflow. in npm command with arguments run input field, type test . for detailed guides react native testing, check testing react native apps . " });
this.add({id:55, 
title:"Adding React Native test results to Test reports", 
body:" adding react native test results test reports bitrise's test reports add-on allows view analyze test results convenient place. by default, tests won't test reports. however, export results: exporting to test reports from any step . the basic process follows: generate junit.xml file build. for example, use jest-junit prepare report. add export test results test reports add-on step workflow. in path custom test results reside input, add folder junit.xml file test results located. in test result search pattern input, set *.xml . in the  the test  input, set test run. the test results test reports add-on. make sure deploy bitrise.io step workflow. " });
this.add({id:56, 
title:"Deploying a React Native app", 
body:" deploying react native app you deploy react native app to: bitrise.io: this allows download generated binary, share with others public install page. online stores: integrations multiple different online stores. in guides, we'll how publish google play apple's app store. " });
this.add({id:57, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:58, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:59, 
title:"Deploying your Android project to Google Play", 
body:" deploying android project google play you use deploy google play step workflow upload digitally signed aab\/apk google play store. add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure code signing app. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:60, 
title:"Getting started with Flutter apps", 
body:" getting started with flutter apps get started bitrise signing email git provider, connecting repository, running first build flutter app. flutter mobile app sdk allows developers create native apps ios android. bitrise supports flutter apps: dedicated steps help with flutter needs. this guide walks setting up, testing, building deploying simple app bitrise. " });
this.add({id:61, 
title:"Adding a Flutter app to Bitrise", 
body:" adding flutter app bitrise do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. we look configuration files set app based them. in case flutter apps, definitely need pubspec.yaml file project. type branch includes project’s configuration - master, example click next . if ios project flutter project, select .ipa export method. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:62, 
title:"Testing a Flutter app", 
body:" testing flutter app you write run unit-, widget-, integration tests with flutter. for information, check flutter’s official documentation . you use automatically generated primary workflow test flutter app. it include flutter test step runs flutter tests generate code coverage reports. test reports the deploy bitrise.io step exports results flutter test step test reports add-on default: check flutter test results add-on, just need add deploy bitrise.io step end workflow. to run tests flutter app: open app’s workflow editor open primary workflow, any workflows want use run tests. in flutter install step, flutter sdk version input. you specify tags branches flutter sdk’s git repository. the default value stable . this use latest stable branch flutter. to available version tags, check: https:\/\/github.com\/flutter\/flutter\/releases . to see available branches, check: https:\/\/github.com\/flutter\/flutter\/branches . add flutter test step. in additional parameters input, enter any flags wish use to. the step runs flutter test command with specified flags. to check available flags, open line interface machine run flutter test --help . make sure project location input flutter test step correct. the default value environment variable (env var) created flutter project’s location. if want generate code coverage reports, set generate code coverage files? input yes . this runs flutter test command with --coverage flag. to export test results test reports add-on, add deploy bitrise.io step end workflow. run build! once it’s done, test results artifacts tab build’s page app. " });
this.add({id:63, 
title:"Deploying a Flutter app", 
body:" deploying flutter app to build deploy flutter app, workflow contain steps: flutter install flutter build if platforms specified repository, deploy workflow automatically generated adding app bitrise. the content depends platforms: example, contains ios project, contain certificate profile installer step. you build ios android projects time separately, using workflow. set platform input flutter build step any time. by default, configured according platform platforms scanner detected adding app bitrise. here’s example workflow we’ll use configuration, with necessary steps: pipelines parallelization in examples, we're assuming building deploying ios android versions app workflow, performing necessary operations serially. however, parallel with single build trigger using pipelines: build pipelinesconfiguring a bitrise pipeline packages libraries we support building flutter packages libraries. unlike case apps, artifact build so need flutter build step workflow. " });
this.add({id:64, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:65, 
title:"Deploying a Flutter app to App Store Connect", 
body:" deploying flutter app app store connect to deploy ios flutter project app store, you’ll need build app, export ipa file submit store. unlike testing, requires code signing files: an ios distribution certificate (a .p12 file). an app store provisioning profile. for flutter applications, code signing requires setting team id project settings xcode. " });
this.add({id:66, 
title:"Configuring Team ID for Flutter apps", 
body:" configuring team id flutter apps once created ios project locally, need review settings xcode. more specifically, set valid team id: that, build fail bitrise. in xcode, open runner.xcworkspace app’s ios folder. to view app’s settings, select runner project xcode navigator. then, main view sidebar, select runner target. select general tab. in signing section, team menu set team associated with registered apple developer account. commit change repository! don't forget commit changes! if set team id locally, build fail bitrise! " });
this.add({id:67, 
title:"Configuring Flutter deployment to the App Store on Bitrise", 
body:" configuring flutter deployment app store bitrise to deploy app app store, need upload code signing files. you options: upload code signing certificate(s) bitrise use automatic with manage ios code signing step. upload provisioning profile(s) code signing certificate(s) bitrise use manual with certificate profile installer step. in guide, focus second option, manual code signing: make sure certificate profile installer step workflow. upload required code signing files bitrise . open flutter build step ios platform configs input group. make sure additional parameters input value --release . check platform input step: make sure it’s set ios . set ios output artifact type input archive . add export ios tvos xcode archive step workflow. it flutter build step. set distribution method input step app-store . add deploy app store connect step end workflow. provide apple credentials respective input fields. apple id. password or, use two-factor authentication app store connect, application password. don’t worry, password visible logs exposed . start build! if goes well, step submit app app store connect. you can, connect page, distribute external testers testflight, release itself. " });
this.add({id:68, 
title:"Deploying a Flutter app to Google Play", 
body:" deploying flutter app google play to deploy app google play, need export app bundle file sign it. you options: you configure code signing app’s build.gradle file flutter sign app build phase. sign aab apk file bitrise with dedicated step. the scope guide second option: signing aab\/apk file with android sign step. generate keystore file . the keystore file required code signing. open app bitrise workflow > code signing > android code signing . drag drop keystore file, metadata. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:69, 
title:"Additional Flutter content", 
body:" additional flutter content building android apps with flutter modules flutter test step freezes \"waiting flutter command release startup lock...\" reducing build time flutter apps could resolve package dependencies flutter " });
this.add({id:70, 
title:"Getting started with Ionic\/Cordova apps", 
body:" getting started with ionic\/cordova apps get started bitrise signing email git provider, connecting repository, running first build ionic\/cordova app. you use cordova ionic frameworks develop cross-platform apps. bitrise help with automated testing, code signing deployment procedures so ship ios and\/or android app\/s respective marketplace time! if workspace than concurrency, builds run simultaneously. now let guide process! do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider" });
this.add({id:71, 
title:"Adding an Ionic\/Cordova app to Bitrise", 
body:" adding ionic\/cordova app bitrise log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. we look configuration files set app based them. at project build configuration , select platform build app for. you select: ios. android. ios android (where build gets built first). register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:72, 
title:"Installing dependencies for ExpoIonic\/CordovaReact Native apps", 
body:" installing dependencies expo ionic\/cordova react native apps if bitrise project scanner successfully scanned react native ionic\/cordova project, run npm command run yarn command steps included default workflows . these steps install missing javascript dependencies app . for native android dependencies, use install missing android sdk components step. for native ios dependencies, use, others, brew install step run cocoapods install step. to install javascript dependencies with npm: using yarn instead npm in guide, we're using npm install javascript dependencies. however, use run yarn command step: install missing js dependencies any additional configuration required. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes run npm command step. in the 'npm' command with arguments run input variable, type install . using npm ci command instead npm install if date package-lock.json file project, recommend using ci command the 'npm' command with arguments run input. using npm ci result faster build times compared npm install reliable builds well. " });
this.add({id:73, 
title:"Testing Ionic\/Cordova apps", 
body:" testing ionic\/cordova apps you run unit tests ionic\/cordova apps bitrise using karma jasmine test runner jasmine test runner steps. if cordova\/ionic project karma jasmine dependency package.json file, scanner detect you're adding app automatically insert respective testing step workflow. if dependency missing project, manually steps workflow using editor. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. make sure testing step workflow. installing dependencies you install dependencies run tests. you choose karma jasmine test runner jasmine test runner steps. cordova app configuration with karma jasmine test runner in example, bitrise.yml configuration includes workflow called primary . this workflow includes karma jasmine test runner step. primary:\n steps:\n - activate-ssh-key@4.0.3:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone@4.0.11: {}\n script@1.1.5:\n title: do with script step\n npm@0.9.1:\n inputs:\n command: install\n karma-jasmine-runner@0.9.1: deploy-to-bitrise-io@1.3.15: {} " });
this.add({id:74, 
title:"Code signing Ionic\/Cordova apps", 
body:" code signing ionic\/cordova apps if want build app ios android, need upload platform-specific files code signing tab workflow editor. you generate builds platforms requires uploading code signing files platforms. " });
this.add({id:75, 
title:"iOS code signing for Ionic and Cordova projects", 
body:" ios code signing ionic cordova projects bitrise supports manual automatic provisioning ios code signing ionic cordova apps well. naturally, bitrise supports ios applications built with ionic cordova . however, code signing process slightly different compared native xcode project. bitrise supports manual automatic provisioning ionic cordova apps - again, processes somewhat different. " });
this.add({id:76, 
title:"Ionic\/Cordova code signing with manual code signing asset management", 
body:" ionic\/cordova code signing with manual asset management generate native xcode project locally ionic cordova calling cordova platform add ios ionic cordova platform add ios . upload files bitrise.io . make sure certificate profile installer step workflow. add generate cordova build configuration step workflow. it come certificate profile installer step. fill required inputs step. please note code signing identity provisioning profile required inputs ios apps marked such. build configuration : set debug release . code sign identity : enter developer distribution identity. provisioning profile : enter appropriate provisioning profile. packaging type : controls type build generated xcode. set code signing need. add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. this step come generate cordova build configuration step workflow. run build! " });
this.add({id:77, 
title:"Ionic\/Cordova code signing with automatic code signing asset management", 
body:" ionic\/cordova code signing with automatic asset management make sure .p12 signing certificates uploaded bitrise.io . add cordova prepare ionic prepare step workflow. these steps platform rm platform add commands. add manage ios code signing step workflow. if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. the step export: the project’s development team. the installed codesign identity’s name. the installed provisioning profile. one code signing step if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. select apple service connection method (based apple service set bitrise ) distribution method . add generate cordova build configuration step workflow. configure step use code signing settings exported manage ios code signing step: development distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: development code_sign_identity: iphone developer\n configuration: debug\n production distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: app-store code_sign_identity: iphone developer\n configuration: release\n add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. set should remove platforms prepare step? false . this crucial: ensures step remove re-add platform native projects generated cordova prepare ionic prepare step. run build! " });
this.add({id:78, 
title:"Android code signing using the Android Sign Step", 
body:" android code signing using sign step you create signed apk using the  android sign  step bitrise workflow. this step configured run uploaded keystore file the code signing tab workflow editor. you create signed apk using the  android sign   step bitrise workflow . this step configured run uploaded keystore file bitrise. the  android sign  step required signing configured project’s build.gradle file. if so, running the  android build step (or the  gradle runner  step) signs output (apk aab) automatically. nevertheless, recommend use the  android sign  step sign project easy secure way. jarsign apksigner apks signed with jarsigner apksigner . for apks, wish use apksigner sign project, the android sign step first set enables apksigner input true leave the apk signature scheme input automatic. this way apksigner checks apk’s minimum target sdk versions chooses required schemes. it signs project with v1 scheme supported version low schemes newer systems. please note aab files signed with jarsigner. the step uses jarsigner detects file ending with  .aab upload keystore file bitrise . add android sign step workflow builds apk aab file. bitrise uses environment variables sets inputs respective fields the  android sign  step. once step runs, produces signed apk aab. the aab used deploy steps, example,  google play deploy  step the  deploy to bitrise.io  step. the latter deploys apk\/aab artifacts  tab. you also use ship deploy app once built apk\/aab file. downloading keystore file you can download keystore file to project directory using the  file downloader  step: - file-downloader:\n inputs:\n source: $bitriseio_android_keystore_url\n destination: \"$home\/keystores\/my_keystore.jks\" #native android# if step requires keystore file, make sure include after file downloader step. after step,  my_keystore.jks  will available at  $home\/keystores\/my_keystore.jks . " });
this.add({id:79, 
title:"Deploying Ionic\/Cordova apps", 
body:" deploying ionic\/cordova apps to build deploy ionic cordova app bitrise, need digitally sign android ios project (if you're building both) use archive step deploying it. you deploy successfully built app to: online stores, google play store apple's app store. bitrise.io: generated binaries available artifacts tab build's page. you download share with others public install " });
this.add({id:80, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:81, 
title:"Deploying your Android project to Google Play", 
body:" deploying android project google play you use deploy google play step workflow upload digitally signed aab\/apk google play store. add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure code signing app. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:82, 
title:"Deploying your iOS project to the App Store", 
body:" deploying ios project app store add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure ios code signing ios project. add deploy app store connect - application loader (formerly itunes connect) step workflow, xcode archive & export ios step preferably deploy bitrise.io step. provide apple credentials deploy app store connect - application loader (formerly itunes connect) step. the step need your: apple id. password or, use two-factor authentication app store connect, application password. don’t worry, password visible logs exposed. start build. " });
this.add({id:83, 
title:"Getting started with Expo apps", 
body:" getting started with expo apps get started bitrise signing email git provider, connecting repository, running first build expo app. you generate react native projects with react native cli expo . expo toolchain allows quickly react native app running having use native code xcode android studio. in guide discuss how set up, test, code sign deploy react native project built with expo cli . " });
this.add({id:84, 
title:"Adding an Expo app to Bitrise", 
body:" adding expo app bitrise first, let’s see how add react native expo app bitrise.io . do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. if automatic validation fails, set project manually. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . you successfully set react native project bitrise.io ! your first build gets kicked automatically using primary workflow. you check generated reports artifacts tab build’s page. " });
this.add({id:85, 
title:"Installing dependencies for ExpoIonic\/CordovaReact Native apps", 
body:" installing dependencies expo ionic\/cordova react native apps if bitrise project scanner successfully scanned react native ionic\/cordova project, run npm command run yarn command steps included default workflows . these steps install missing javascript dependencies app . for native android dependencies, use install missing android sdk components step. for native ios dependencies, use, others, brew install step run cocoapods install step. to install javascript dependencies with npm: using yarn instead npm in guide, we're using npm install javascript dependencies. however, use run yarn command step: install missing js dependencies any additional configuration required. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes run npm command step. in the 'npm' command with arguments run input variable, type install . using npm ci command instead npm install if date package-lock.json file project, recommend using ci command the 'npm' command with arguments run input. using npm ci result faster build times compared npm install reliable builds well. " });
this.add({id:86, 
title:"Testing your React Native app", 
body:" testing react native app you use react native’s built testing method, called jest perform unit tests. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add run npm command step workflow. in npm command with arguments run input field, type test . for detailed guides react native testing, check testing react native apps . " });
this.add({id:87, 
title:"Adding React Native test results to Test reports", 
body:" adding react native test results test reports bitrise's test reports add-on allows view analyze test results convenient place. by default, tests won't test reports. however, export results: exporting to test reports from any step . the basic process follows: generate junit.xml file build. for example, use jest-junit prepare report. add export test results test reports add-on step workflow. in path custom test results reside input, add folder junit.xml file test results located. in test result search pattern input, set *.xml . in the  the test  input, set test run. the test results test reports add-on. make sure deploy bitrise.io step workflow. " });
this.add({id:88, 
title:"Deploying your Expo app", 
body:" deploying expo app bitrise supports expo application services (eas) expo apps, default deploy bitrise workflow uses run expo application services (eas) build step trigger build eas. in case don’t want use eas, turtle cli bitrise workflows. see workflow recipe details. " });
this.add({id:3, 
title:"Signing up for Bitrise", 
body:" signing bitrise email github gitlab bitbucket signing with git service providers means connect bitrise account provider. with connected account, grant access any repositories account. after signing up, connect bitrise account supported git service providers. for example, signed with github, gitlab bitbucket accounts, too, access any repositories accounts. " });
this.add({id:4, 
title:"Creating your first Workspace", 
body:" creating first workspace after signing up, bitrise automatically create first workspace . a workspace environment allows manage bitrise apps team members working apps. you need workspace able add app start running builds. can: create multiple workspaces . you invited workspaces bitrise users . workspace don't worry: rename any workspaces time! to sign paid subscription own, need workspace. check pricing page information. " });
this.add({id:5, 
title:"Adding a new app", 
body:" adding new app adding new app bitrise means connect git repository bitrise, allowing clone build it. add new app any time clicking + symbol menu bar selecting add new app web ui dropdown menu. as initial configuration process, you: decide app private public . private app data available invited work app. specify repository : github, gitlab bitbucket repository, manual repository url, self-hosted repository. register ssh key : gives bitrise access repository so clone build process. specify branch want build. you change later - anyway, adding new app takes couple minutes so just process scratch. as process, bitrise scan validate repository set app configuration based results scan: detect platform type files. if validation fails, manually. read details process adding a new app guide. you enable getting started guide receive hints adding app: open profile settings , scroll getting started guide section, set toggle on . " });
this.add({id:6, 
title:"Webhooks and triggers", 
body:" webhooks triggers you set webhooks process adding new app, any time later. webhooks allow bitrise communicate with party services: example, webhook github repository allows start build automatically code modified repository. git insights in addition automatic build triggers, webhooks enable use git insights , insights monitoring tool enables users quantify git collaboration metrics pull request cycle time merge frequency. once webhooks set up, configure start builds automatically defining triggers . you set: the event trigger build: example, code push pull request. the branch repository trigger builds: example, main dev . this means can, example, set trigger starts build pull request opened main branch. webhooks required triggers work! read more: adding incoming webhooksadding outgoing webhookstriggering builds automatically" });
this.add({id:7, 
title:"Builds and Workflows", 
body:" builds workflows once added app, first build kicked automatically. to view builds, dashboard - page log bitrise -, select app click builds tab access builds. a build series jobs, executed order defined app’s workflows . the jobs called steps , represent blocks script execution. the steps arranged graphical ui workflow editor huge number things: clone repository, build app, run tests , pass values , send notification messages developers, more. read relevant guides: workflows steps builds workflow recipes we offering workflow recipes: example workflows common use cases bitrise. workflow recipes for android appsworkflow recipes for ios appsworkflow recipes for cross-platform appsgeneric workflow recipes a build's logs viewed build’s page: builds tab select build want. all builds run clean virtual machines discarded build complete. read them: build machines . " });
this.add({id:8, 
title:"Testing and deploying", 
body:" testing deploying testing app deploying app with help steps: steps dedicated functions, based platform type. unit testing, ui real device testing possible bitrise: device testing for androiddevice testing for iosrunning android unit testsrunning unit and ui tests for ios apps once app tested, built ready go, quickly deploy store choice, example, google play app store. you check ship, fast efficient deployment solution: deploying with ship . " });
this.add({id:9, 
title:"Migrating to Bitrise", 
body:" migrating bitrise our migration guides aim help quickly painlessly migrate project current ci\/cd provider bitrise. our migration guides aim help quickly painlessly migrate project current ci\/cd provider bitrise. if need convincing make switch like learn bitrise offers comparison current ci\/cd solution, look further. " });
this.add({id:10, 
title:"Migrating from Jenkins to Bitrise", 
body:" migrating jenkins bitrise switch jenkins bitrise, experience comfort using cloud-based, mobile first ci\/cd platform offers out-of-the box functionalities. if looking switch jenkins bitrise speed mobile ci\/cd flow ease dedicated manpower, look further. this guide introduces important features how quickly settle jenkins world. " });
this.add({id:11, 
title:"Why bother migrating?", 
body:" why bother migrating? jenkins self-hosted ci server manually install maintain functionalities run any build requires dedicated manpower regular maintenance. when switch bitrise, experience comfort using cloud-based, mobile first ci\/cd platform offers out-of-the box development needs platform. this means is: no need download anything. no need any on-premise servers plugins. no need worry infrastructure, tools virtualization. bitrise takes care above. we vast array automatized steps, api , cli , up-to-date stacks add-ons with highly intuitive gui, called workflow editor, available fingertips. check world automated mobile development with bitrise! how bitrise helped companies migrate learn how epam, nextdoor, pulselive, delivery hero, signify, switched jenkins bitrise. the 5 main benefits switching jenkins cloud ci, report. read case study with pagseguro: smart ways optimize ci . " });
this.add({id:12, 
title:"Quick start guide", 
body:" quick start guide this quick start guide helps start first build bitrise with minimum config. sign bitrise don’t account yet. connect repo run automatically configured standard workflow any project. once you’ve looked generated yml, make changes need: you’re opting custom code, pop script step , run first build. or steps step library replicate jenkinsfile’s behaviors. after getting new workflow’s first green build, setup jobs configuring automatic triggers scheduled builds . optimize workflows with steps like bitrise.io cache pull bitrise.io cache push . need help? contact . if interested main jenkins-bitrise differences how bitrise enhance mobile development process, continue with guide below. " });
this.add({id:13, 
title:"Managing builds on Jenkins and on Bitrise", 
body:" managing builds jenkins bitrise a build bitrise process specified app’s workflow . it series steps , defined workflow, executed bitrise cli clean virtual machine locally machine. you check app’s builds bitrise dashboard analyze build logs app’s builds page. " });
this.add({id:14, 
title:"Triggering builds on Jenkins and Bitrise", 
body:" triggering builds jenkins bitrise in section describe how trigger builds bitrise: the build now function jenkins corresponds with starting build manually : click button builds page simply start new build tinker away with advanced configuration options for starting\/scheduling builds . the build periodically function jenkins scheduling builds function bitrise. a big advantage bitrise don’t set cron job, like jenkins, schedule specific time. instead, select day\/s timeline type hour month. no confusion cron expressions any more! for any git related events, code push, pull requests, tags, configure triggers automatically start build bitrise. the build projects function jenkins equivalent chaining workflows bitrise workflows run succession. it’s surprisingly easy chain bitrise. you trigger builds any remote system: use webhooks . we’re integrated with github, gitlab, bitbucket, gogs, slack, visual studio, assembla, deveo. you push build status reports git provider (github\/gitlab\/bitbucket). " });
this.add({id:15, 
title:"Environment Variables and Secrets on Bitrise", 
body:" environment variables secrets bitrise environment variables (a key value pair) defined app, workflow steps level. you lots interesting things with env vars: expose reuse step. copy env var key. overwrite env var. parameterize build adding custom env vars build. set workflow-specific env vars env vars tab run workflows with env vars available particular workflow. secrets type environment variables special ones. they hide sensitive information encrypted format so private input exposed build logs bitrise.yml . secret environment variables, secrets short, set adding key variable tab workflow editor. this built-in feature bitrise ensures following: your secrets shown bitrise.yml . your secrets stored encrypted. you prevent exposing secrets ui making protected. note able workaround log value secrets with pull request, thus advise not expose prs. " });
this.add({id:16, 
title:"Build caching", 
body:" build caching every build bitrise runs clean virtual machine does mean scratch - cache contents important files preserve builds. " });
this.add({id:17, 
title:"Jenkins plugins and Bitrise Steps", 
body:" jenkins plugins bitrise steps a step pre-defined task bitrise just like jenkins steps, however, easily configured intuitive ui pull repository. you configure inputs parameters define task, view\/reuse outputs generates. reusing output means workflow use value inputs. as continuous integration tool itself, jenkins integrates with services help plugins. users manage plugins centralized place, called manage plugins , install globally (on jenkins server), use specific projects. if notifies newer plugin version, admins doublecheck with teams they’re running any builds updating requires server restart. with plugins, reverting older version possible, latest available. in bitrise, however, steps first, add remove step bitrise workflow time wish won’t block project. you revert previous that’s need. what’s more: when editing workflow workflow editor , easily search step based functionality platform looking step library add workflow straightaway - need install prior setting workflow. you create custom step store repository, reference url workflow. a step jolly joker: script do custom script you’d like run workflow? select script step library add custom code script content input. discover steps integrations page right editing workflow. learn with steps: adding steps to a workflowstep versioningenabling or disabling a step conditionallydeveloping your own bitrise step using fastlane jenkins? you easily fastlane lanes work bitrise too. all add bitrise’s fastlane step workflow add lane step. start build run bitrise. for information, check guide integrating fastlane to bitrise . " });
this.add({id:18, 
title:"Jenkins Pipeline - Bitrise Workflow", 
body:" jenkins pipeline - bitrise workflow a jenkins pipeline equivalent bitrise workflow , bitrise workflows easier manage: quickly create new based existing ones, chain multiple single build, delete longer need. a bitrise workflow series steps, test, code sign, build apk\/ ipa deploy. when add app bitrise, primary workflow, created based project scanner’s findings, gets kicked off\/triggered automatically. you workflows certain project. for example: for any pr events, create workflow that, triggered, runs quickly executes basic tests smoke tests. for meatier workflow, runs test, recommend creating workflow run overnight schedule 6\/12\/24 hour interval. the workflow editor main place configuring workflow. jenkins stages equal multiple bitrise workflows chained inside main workflow. on workflow editor helps chain like toy trains other. the workflow editor powerful features built assist with mobile development: code signing : one-stop shop store manage code signing files used workflow. again, need installing tool first like jenkins. you any custom file (in generic file storage section) generic file storage step download. secrets : check app’s secret environment variables add new ones. environment variables : confusion secrets env vars bitrise. they neatly organized separate tabs so know where’s what. add app workflow specific here. you reference secrets with $. triggers : you configure triggers: code push events, pull requests, tags set automatically start builds bitrise. stack : check default stack app, select new dropdown menu specific workflows. " });
this.add({id:19, 
title:"Dashboards in Jenkins and Bitrise", 
body:" dashboards jenkins bitrise this main landing page start first build. if using bitrise more, see list latest, queued builds installed projects with profile workspace\/s member - page. the latest builds tab bitrise dashboard displays recent builds similarly build history feature jenkins. you filter any status: successful, aborted, failed, running build displays statuses anyway. on jenkins, build statuses listed build executor status blue ocean dashboard . when using bitrise user-friendly graphical interface right start, whereas, with jenkins, install plugin first. build statuses shown dashboard , builds page app. build queue jenkins queued builds bitrise. you schedule builds queue with advanced option scheduling builds feature. on right dashboard, see apps apps . " });
this.add({id:20, 
title:"Adding a new app to Bitrise", 
body:" adding new app bitrise what new item means jenkins adding new app flow bitrise, web ui cli . this highly automated flow minimal configuration needed literally minute new build starts. our takes important phases: setting privacy, connecting repository, repository access, choosing branch, configuring app, configuring webhooks . " });
this.add({id:21, 
title:"Webhooks on Bitrise", 
body:" webhooks bitrise bitrise makes extensive use webhooks, enable with simple click connecting app bitrise. it sense add webhook initial setup having search functionality try quickly speed. in short, types webhooks: incoming webhooks, registered with git service provider, used automatically trigger builds bitrise. outgoing webhooks used send reports build events services, slack. they added website api . " });
this.add({id:22, 
title:"Jenkinsfile - Bitrise YAML", 
body:" jenkinsfile - bitrise yaml a jenkins pipeline uses groovy code, bitrise highly structured yaml format. all workflows defined bitrise.yml file yaml format, edit clicking bitrise.yml tab workflow editor. you store bitrise.yml file app bitrise.io repository . don’t worry, secrets (for example, credentials ids) safe with us. you download current bitrise.yml configuration app run locally with bitrise cli . " });
this.add({id:23, 
title:"Jenkinsfile - Bitrise yml file comparison", 
body:" jenkinsfile - bitrise yml file comparison if using jenkinsfile (pipeline project) jenkins considering switch bitrise, easily match stages with bitrise steps. old-school freestyle project, map configuration’s settings matching step function. for example, build section freestyle project with bitrise build step, android build step, map build trigger section jenkins with triggers function bitrise. make sure check step library inspiration. you check demo apps feel bitrise. for information, bitrise demo apps and their bitrise.yml files . migrating android app jenkins bitrise: step-by-step guide check blogpost moataz nabil how migrate android project jenkins bitrise. " });
this.add({id:24, 
title:"Master and agent on Jenkins - Bitrise stack", 
body:" master agent jenkins - bitrise stack a stack type virtual machine use run build. for example, native ios app, best xcode stacks. stacks come with necessary tools pre-installed, regularly updated make sure serve needs. this way don’t bother maintaining master agent instances adding node groovy code build certain platform. when add app bitrise, project selector automatically detects type based platform type, adds default stack it. your first build run stack, virtual machine with required tools pre-installed should wish use simply select default stack dropdown menu stack tab. if click more information link, see preinstalled tools with versions. we support latest xcode version shortly official release. in reports check installed tools versions stack. learn stack update policy . " });
this.add({id:25, 
title:"People management in Jenkins and Bitrise", 
body:" people management jenkins bitrise what people page jenkins places bitrise (depending team workspace set up). you see team members teams tab app. you see workspace members click account settings , select workspace people tab left. the purpose workspaces make easier manage people working different apps bitrise. unlimited number apps, workspace owners assign members work see fit. a team bitrise means users work app: make app’s team, manage teams tab. on groups tab manage workspace members delete, add new member group, assign group apps rename group. on people tab see added workspace and, needed, remove member groups workspace. workspaces consist groups: workspace owners create manage groups. a given group assigned work app: members level access app. " });
this.add({id:26, 
title:"Integrated SSO management on Bitrise", 
body:" integrated sso management bitrise while jenkins install authorization plugin sso management, bitrise comes integral velocity plan . workspace with plans set saml sso single gateway workspace bitrise. no remembering usernames credentials! all owner set bitrise saml sso app provider invite members org. we specific guides different providers guide steps. " });
this.add({id:10, 
title:"Migrating from Jenkins to Bitrise", 
body:" migrating jenkins bitrise switch jenkins bitrise, experience comfort using cloud-based, mobile first ci\/cd platform offers out-of-the box functionalities. if looking switch jenkins bitrise speed mobile ci\/cd flow ease dedicated manpower, look further. this guide introduces important features how quickly settle jenkins world. " });
this.add({id:11, 
title:"Why bother migrating?", 
body:" why bother migrating? jenkins self-hosted ci server manually install maintain functionalities run any build requires dedicated manpower regular maintenance. when switch bitrise, experience comfort using cloud-based, mobile first ci\/cd platform offers out-of-the box development needs platform. this means is: no need download anything. no need any on-premise servers plugins. no need worry infrastructure, tools virtualization. bitrise takes care above. we vast array automatized steps, api , cli , up-to-date stacks add-ons with highly intuitive gui, called workflow editor, available fingertips. check world automated mobile development with bitrise! how bitrise helped companies migrate learn how epam, nextdoor, pulselive, delivery hero, signify, switched jenkins bitrise. the 5 main benefits switching jenkins cloud ci, report. read case study with pagseguro: smart ways optimize ci . " });
this.add({id:12, 
title:"Quick start guide", 
body:" quick start guide this quick start guide helps start first build bitrise with minimum config. sign bitrise don’t account yet. connect repo run automatically configured standard workflow any project. once you’ve looked generated yml, make changes need: you’re opting custom code, pop script step , run first build. or steps step library replicate jenkinsfile’s behaviors. after getting new workflow’s first green build, setup jobs configuring automatic triggers scheduled builds . optimize workflows with steps like bitrise.io cache pull bitrise.io cache push . need help? contact . if interested main jenkins-bitrise differences how bitrise enhance mobile development process, continue with guide below. " });
this.add({id:13, 
title:"Managing builds on Jenkins and on Bitrise", 
body:" managing builds jenkins bitrise a build bitrise process specified app’s workflow . it series steps , defined workflow, executed bitrise cli clean virtual machine locally machine. you check app’s builds bitrise dashboard analyze build logs app’s builds page. " });
this.add({id:14, 
title:"Triggering builds on Jenkins and Bitrise", 
body:" triggering builds jenkins bitrise in section describe how trigger builds bitrise: the build now function jenkins corresponds with starting build manually : click button builds page simply start new build tinker away with advanced configuration options for starting\/scheduling builds . the build periodically function jenkins scheduling builds function bitrise. a big advantage bitrise don’t set cron job, like jenkins, schedule specific time. instead, select day\/s timeline type hour month. no confusion cron expressions any more! for any git related events, code push, pull requests, tags, configure triggers automatically start build bitrise. the build projects function jenkins equivalent chaining workflows bitrise workflows run succession. it’s surprisingly easy chain bitrise. you trigger builds any remote system: use webhooks . we’re integrated with github, gitlab, bitbucket, gogs, slack, visual studio, assembla, deveo. you push build status reports git provider (github\/gitlab\/bitbucket). " });
this.add({id:15, 
title:"Environment Variables and Secrets on Bitrise", 
body:" environment variables secrets bitrise environment variables (a key value pair) defined app, workflow steps level. you lots interesting things with env vars: expose reuse step. copy env var key. overwrite env var. parameterize build adding custom env vars build. set workflow-specific env vars env vars tab run workflows with env vars available particular workflow. secrets type environment variables special ones. they hide sensitive information encrypted format so private input exposed build logs bitrise.yml . secret environment variables, secrets short, set adding key variable tab workflow editor. this built-in feature bitrise ensures following: your secrets shown bitrise.yml . your secrets stored encrypted. you prevent exposing secrets ui making protected. note able workaround log value secrets with pull request, thus advise not expose prs. " });
this.add({id:16, 
title:"Build caching", 
body:" build caching every build bitrise runs clean virtual machine does mean scratch - cache contents important files preserve builds. " });
this.add({id:17, 
title:"Jenkins plugins and Bitrise Steps", 
body:" jenkins plugins bitrise steps a step pre-defined task bitrise just like jenkins steps, however, easily configured intuitive ui pull repository. you configure inputs parameters define task, view\/reuse outputs generates. reusing output means workflow use value inputs. as continuous integration tool itself, jenkins integrates with services help plugins. users manage plugins centralized place, called manage plugins , install globally (on jenkins server), use specific projects. if notifies newer plugin version, admins doublecheck with teams they’re running any builds updating requires server restart. with plugins, reverting older version possible, latest available. in bitrise, however, steps first, add remove step bitrise workflow time wish won’t block project. you revert previous that’s need. what’s more: when editing workflow workflow editor , easily search step based functionality platform looking step library add workflow straightaway - need install prior setting workflow. you create custom step store repository, reference url workflow. a step jolly joker: script do custom script you’d like run workflow? select script step library add custom code script content input. discover steps integrations page right editing workflow. learn with steps: adding steps to a workflowstep versioningenabling or disabling a step conditionallydeveloping your own bitrise step using fastlane jenkins? you easily fastlane lanes work bitrise too. all add bitrise’s fastlane step workflow add lane step. start build run bitrise. for information, check guide integrating fastlane to bitrise . " });
this.add({id:18, 
title:"Jenkins Pipeline - Bitrise Workflow", 
body:" jenkins pipeline - bitrise workflow a jenkins pipeline equivalent bitrise workflow , bitrise workflows easier manage: quickly create new based existing ones, chain multiple single build, delete longer need. a bitrise workflow series steps, test, code sign, build apk\/ ipa deploy. when add app bitrise, primary workflow, created based project scanner’s findings, gets kicked off\/triggered automatically. you workflows certain project. for example: for any pr events, create workflow that, triggered, runs quickly executes basic tests smoke tests. for meatier workflow, runs test, recommend creating workflow run overnight schedule 6\/12\/24 hour interval. the workflow editor main place configuring workflow. jenkins stages equal multiple bitrise workflows chained inside main workflow. on workflow editor helps chain like toy trains other. the workflow editor powerful features built assist with mobile development: code signing : one-stop shop store manage code signing files used workflow. again, need installing tool first like jenkins. you any custom file (in generic file storage section) generic file storage step download. secrets : check app’s secret environment variables add new ones. environment variables : confusion secrets env vars bitrise. they neatly organized separate tabs so know where’s what. add app workflow specific here. you reference secrets with $. triggers : you configure triggers: code push events, pull requests, tags set automatically start builds bitrise. stack : check default stack app, select new dropdown menu specific workflows. " });
this.add({id:19, 
title:"Dashboards in Jenkins and Bitrise", 
body:" dashboards jenkins bitrise this main landing page start first build. if using bitrise more, see list latest, queued builds installed projects with profile workspace\/s member - page. the latest builds tab bitrise dashboard displays recent builds similarly build history feature jenkins. you filter any status: successful, aborted, failed, running build displays statuses anyway. on jenkins, build statuses listed build executor status blue ocean dashboard . when using bitrise user-friendly graphical interface right start, whereas, with jenkins, install plugin first. build statuses shown dashboard , builds page app. build queue jenkins queued builds bitrise. you schedule builds queue with advanced option scheduling builds feature. on right dashboard, see apps apps . " });
this.add({id:20, 
title:"Adding a new app to Bitrise", 
body:" adding new app bitrise what new item means jenkins adding new app flow bitrise, web ui cli . this highly automated flow minimal configuration needed literally minute new build starts. our takes important phases: setting privacy, connecting repository, repository access, choosing branch, configuring app, configuring webhooks . " });
this.add({id:21, 
title:"Webhooks on Bitrise", 
body:" webhooks bitrise bitrise makes extensive use webhooks, enable with simple click connecting app bitrise. it sense add webhook initial setup having search functionality try quickly speed. in short, types webhooks: incoming webhooks, registered with git service provider, used automatically trigger builds bitrise. outgoing webhooks used send reports build events services, slack. they added website api . " });
this.add({id:22, 
title:"Jenkinsfile - Bitrise YAML", 
body:" jenkinsfile - bitrise yaml a jenkins pipeline uses groovy code, bitrise highly structured yaml format. all workflows defined bitrise.yml file yaml format, edit clicking bitrise.yml tab workflow editor. you store bitrise.yml file app bitrise.io repository . don’t worry, secrets (for example, credentials ids) safe with us. you download current bitrise.yml configuration app run locally with bitrise cli . " });
this.add({id:23, 
title:"Jenkinsfile - Bitrise yml file comparison", 
body:" jenkinsfile - bitrise yml file comparison if using jenkinsfile (pipeline project) jenkins considering switch bitrise, easily match stages with bitrise steps. old-school freestyle project, map configuration’s settings matching step function. for example, build section freestyle project with bitrise build step, android build step, map build trigger section jenkins with triggers function bitrise. make sure check step library inspiration. you check demo apps feel bitrise. for information, bitrise demo apps and their bitrise.yml files . migrating android app jenkins bitrise: step-by-step guide check blogpost moataz nabil how migrate android project jenkins bitrise. " });
this.add({id:24, 
title:"Master and agent on Jenkins - Bitrise stack", 
body:" master agent jenkins - bitrise stack a stack type virtual machine use run build. for example, native ios app, best xcode stacks. stacks come with necessary tools pre-installed, regularly updated make sure serve needs. this way don’t bother maintaining master agent instances adding node groovy code build certain platform. when add app bitrise, project selector automatically detects type based platform type, adds default stack it. your first build run stack, virtual machine with required tools pre-installed should wish use simply select default stack dropdown menu stack tab. if click more information link, see preinstalled tools with versions. we support latest xcode version shortly official release. in reports check installed tools versions stack. learn stack update policy . " });
this.add({id:25, 
title:"People management in Jenkins and Bitrise", 
body:" people management jenkins bitrise what people page jenkins places bitrise (depending team workspace set up). you see team members teams tab app. you see workspace members click account settings , select workspace people tab left. the purpose workspaces make easier manage people working different apps bitrise. unlimited number apps, workspace owners assign members work see fit. a team bitrise means users work app: make app’s team, manage teams tab. on groups tab manage workspace members delete, add new member group, assign group apps rename group. on people tab see added workspace and, needed, remove member groups workspace. workspaces consist groups: workspace owners create manage groups. a given group assigned work app: members level access app. " });
this.add({id:26, 
title:"Integrated SSO management on Bitrise", 
body:" integrated sso management bitrise while jenkins install authorization plugin sso management, bitrise comes integral velocity plan . workspace with plans set saml sso single gateway workspace bitrise. no remembering usernames credentials! all owner set bitrise saml sso app provider invite members org. we specific guides different providers guide steps. " });
this.add({id:11, 
title:"Why bother migrating?", 
body:" why bother migrating? jenkins self-hosted ci server manually install maintain functionalities run any build requires dedicated manpower regular maintenance. when switch bitrise, experience comfort using cloud-based, mobile first ci\/cd platform offers out-of-the box development needs platform. this means is: no need download anything. no need any on-premise servers plugins. no need worry infrastructure, tools virtualization. bitrise takes care above. we vast array automatized steps, api , cli , up-to-date stacks add-ons with highly intuitive gui, called workflow editor, available fingertips. check world automated mobile development with bitrise! how bitrise helped companies migrate learn how epam, nextdoor, pulselive, delivery hero, signify, switched jenkins bitrise. the 5 main benefits switching jenkins cloud ci, report. read case study with pagseguro: smart ways optimize ci . " });
this.add({id:12, 
title:"Quick start guide", 
body:" quick start guide this quick start guide helps start first build bitrise with minimum config. sign bitrise don’t account yet. connect repo run automatically configured standard workflow any project. once you’ve looked generated yml, make changes need: you’re opting custom code, pop script step , run first build. or steps step library replicate jenkinsfile’s behaviors. after getting new workflow’s first green build, setup jobs configuring automatic triggers scheduled builds . optimize workflows with steps like bitrise.io cache pull bitrise.io cache push . need help? contact . if interested main jenkins-bitrise differences how bitrise enhance mobile development process, continue with guide below. " });
this.add({id:13, 
title:"Managing builds on Jenkins and on Bitrise", 
body:" managing builds jenkins bitrise a build bitrise process specified app’s workflow . it series steps , defined workflow, executed bitrise cli clean virtual machine locally machine. you check app’s builds bitrise dashboard analyze build logs app’s builds page. " });
this.add({id:14, 
title:"Triggering builds on Jenkins and Bitrise", 
body:" triggering builds jenkins bitrise in section describe how trigger builds bitrise: the build now function jenkins corresponds with starting build manually : click button builds page simply start new build tinker away with advanced configuration options for starting\/scheduling builds . the build periodically function jenkins scheduling builds function bitrise. a big advantage bitrise don’t set cron job, like jenkins, schedule specific time. instead, select day\/s timeline type hour month. no confusion cron expressions any more! for any git related events, code push, pull requests, tags, configure triggers automatically start build bitrise. the build projects function jenkins equivalent chaining workflows bitrise workflows run succession. it’s surprisingly easy chain bitrise. you trigger builds any remote system: use webhooks . we’re integrated with github, gitlab, bitbucket, gogs, slack, visual studio, assembla, deveo. you push build status reports git provider (github\/gitlab\/bitbucket). " });
this.add({id:15, 
title:"Environment Variables and Secrets on Bitrise", 
body:" environment variables secrets bitrise environment variables (a key value pair) defined app, workflow steps level. you lots interesting things with env vars: expose reuse step. copy env var key. overwrite env var. parameterize build adding custom env vars build. set workflow-specific env vars env vars tab run workflows with env vars available particular workflow. secrets type environment variables special ones. they hide sensitive information encrypted format so private input exposed build logs bitrise.yml . secret environment variables, secrets short, set adding key variable tab workflow editor. this built-in feature bitrise ensures following: your secrets shown bitrise.yml . your secrets stored encrypted. you prevent exposing secrets ui making protected. note able workaround log value secrets with pull request, thus advise not expose prs. " });
this.add({id:16, 
title:"Build caching", 
body:" build caching every build bitrise runs clean virtual machine does mean scratch - cache contents important files preserve builds. " });
this.add({id:14, 
title:"Triggering builds on Jenkins and Bitrise", 
body:" triggering builds jenkins bitrise in section describe how trigger builds bitrise: the build now function jenkins corresponds with starting build manually : click button builds page simply start new build tinker away with advanced configuration options for starting\/scheduling builds . the build periodically function jenkins scheduling builds function bitrise. a big advantage bitrise don’t set cron job, like jenkins, schedule specific time. instead, select day\/s timeline type hour month. no confusion cron expressions any more! for any git related events, code push, pull requests, tags, configure triggers automatically start build bitrise. the build projects function jenkins equivalent chaining workflows bitrise workflows run succession. it’s surprisingly easy chain bitrise. you trigger builds any remote system: use webhooks . we’re integrated with github, gitlab, bitbucket, gogs, slack, visual studio, assembla, deveo. you push build status reports git provider (github\/gitlab\/bitbucket). " });
this.add({id:15, 
title:"Environment Variables and Secrets on Bitrise", 
body:" environment variables secrets bitrise environment variables (a key value pair) defined app, workflow steps level. you lots interesting things with env vars: expose reuse step. copy env var key. overwrite env var. parameterize build adding custom env vars build. set workflow-specific env vars env vars tab run workflows with env vars available particular workflow. secrets type environment variables special ones. they hide sensitive information encrypted format so private input exposed build logs bitrise.yml . secret environment variables, secrets short, set adding key variable tab workflow editor. this built-in feature bitrise ensures following: your secrets shown bitrise.yml . your secrets stored encrypted. you prevent exposing secrets ui making protected. note able workaround log value secrets with pull request, thus advise not expose prs. " });
this.add({id:16, 
title:"Build caching", 
body:" build caching every build bitrise runs clean virtual machine does mean scratch - cache contents important files preserve builds. " });
this.add({id:17, 
title:"Jenkins plugins and Bitrise Steps", 
body:" jenkins plugins bitrise steps a step pre-defined task bitrise just like jenkins steps, however, easily configured intuitive ui pull repository. you configure inputs parameters define task, view\/reuse outputs generates. reusing output means workflow use value inputs. as continuous integration tool itself, jenkins integrates with services help plugins. users manage plugins centralized place, called manage plugins , install globally (on jenkins server), use specific projects. if notifies newer plugin version, admins doublecheck with teams they’re running any builds updating requires server restart. with plugins, reverting older version possible, latest available. in bitrise, however, steps first, add remove step bitrise workflow time wish won’t block project. you revert previous that’s need. what’s more: when editing workflow workflow editor , easily search step based functionality platform looking step library add workflow straightaway - need install prior setting workflow. you create custom step store repository, reference url workflow. a step jolly joker: script do custom script you’d like run workflow? select script step library add custom code script content input. discover steps integrations page right editing workflow. learn with steps: adding steps to a workflowstep versioningenabling or disabling a step conditionallydeveloping your own bitrise step using fastlane jenkins? you easily fastlane lanes work bitrise too. all add bitrise’s fastlane step workflow add lane step. start build run bitrise. for information, check guide integrating fastlane to bitrise . " });
this.add({id:18, 
title:"Jenkins Pipeline - Bitrise Workflow", 
body:" jenkins pipeline - bitrise workflow a jenkins pipeline equivalent bitrise workflow , bitrise workflows easier manage: quickly create new based existing ones, chain multiple single build, delete longer need. a bitrise workflow series steps, test, code sign, build apk\/ ipa deploy. when add app bitrise, primary workflow, created based project scanner’s findings, gets kicked off\/triggered automatically. you workflows certain project. for example: for any pr events, create workflow that, triggered, runs quickly executes basic tests smoke tests. for meatier workflow, runs test, recommend creating workflow run overnight schedule 6\/12\/24 hour interval. the workflow editor main place configuring workflow. jenkins stages equal multiple bitrise workflows chained inside main workflow. on workflow editor helps chain like toy trains other. the workflow editor powerful features built assist with mobile development: code signing : one-stop shop store manage code signing files used workflow. again, need installing tool first like jenkins. you any custom file (in generic file storage section) generic file storage step download. secrets : check app’s secret environment variables add new ones. environment variables : confusion secrets env vars bitrise. they neatly organized separate tabs so know where’s what. add app workflow specific here. you reference secrets with $. triggers : you configure triggers: code push events, pull requests, tags set automatically start builds bitrise. stack : check default stack app, select new dropdown menu specific workflows. " });
this.add({id:19, 
title:"Dashboards in Jenkins and Bitrise", 
body:" dashboards jenkins bitrise this main landing page start first build. if using bitrise more, see list latest, queued builds installed projects with profile workspace\/s member - page. the latest builds tab bitrise dashboard displays recent builds similarly build history feature jenkins. you filter any status: successful, aborted, failed, running build displays statuses anyway. on jenkins, build statuses listed build executor status blue ocean dashboard . when using bitrise user-friendly graphical interface right start, whereas, with jenkins, install plugin first. build statuses shown dashboard , builds page app. build queue jenkins queued builds bitrise. you schedule builds queue with advanced option scheduling builds feature. on right dashboard, see apps apps . " });
this.add({id:20, 
title:"Adding a new app to Bitrise", 
body:" adding new app bitrise what new item means jenkins adding new app flow bitrise, web ui cli . this highly automated flow minimal configuration needed literally minute new build starts. our takes important phases: setting privacy, connecting repository, repository access, choosing branch, configuring app, configuring webhooks . " });
this.add({id:21, 
title:"Webhooks on Bitrise", 
body:" webhooks bitrise bitrise makes extensive use webhooks, enable with simple click connecting app bitrise. it sense add webhook initial setup having search functionality try quickly speed. in short, types webhooks: incoming webhooks, registered with git service provider, used automatically trigger builds bitrise. outgoing webhooks used send reports build events services, slack. they added website api . " });
this.add({id:20, 
title:"Adding a new app to Bitrise", 
body:" adding new app bitrise what new item means jenkins adding new app flow bitrise, web ui cli . this highly automated flow minimal configuration needed literally minute new build starts. our takes important phases: setting privacy, connecting repository, repository access, choosing branch, configuring app, configuring webhooks . " });
this.add({id:21, 
title:"Webhooks on Bitrise", 
body:" webhooks bitrise bitrise makes extensive use webhooks, enable with simple click connecting app bitrise. it sense add webhook initial setup having search functionality try quickly speed. in short, types webhooks: incoming webhooks, registered with git service provider, used automatically trigger builds bitrise. outgoing webhooks used send reports build events services, slack. they added website api . " });
this.add({id:22, 
title:"Jenkinsfile - Bitrise YAML", 
body:" jenkinsfile - bitrise yaml a jenkins pipeline uses groovy code, bitrise highly structured yaml format. all workflows defined bitrise.yml file yaml format, edit clicking bitrise.yml tab workflow editor. you store bitrise.yml file app bitrise.io repository . don’t worry, secrets (for example, credentials ids) safe with us. you download current bitrise.yml configuration app run locally with bitrise cli . " });
this.add({id:23, 
title:"Jenkinsfile - Bitrise yml file comparison", 
body:" jenkinsfile - bitrise yml file comparison if using jenkinsfile (pipeline project) jenkins considering switch bitrise, easily match stages with bitrise steps. old-school freestyle project, map configuration’s settings matching step function. for example, build section freestyle project with bitrise build step, android build step, map build trigger section jenkins with triggers function bitrise. make sure check step library inspiration. you check demo apps feel bitrise. for information, bitrise demo apps and their bitrise.yml files . migrating android app jenkins bitrise: step-by-step guide check blogpost moataz nabil how migrate android project jenkins bitrise. " });
this.add({id:24, 
title:"Master and agent on Jenkins - Bitrise stack", 
body:" master agent jenkins - bitrise stack a stack type virtual machine use run build. for example, native ios app, best xcode stacks. stacks come with necessary tools pre-installed, regularly updated make sure serve needs. this way don’t bother maintaining master agent instances adding node groovy code build certain platform. when add app bitrise, project selector automatically detects type based platform type, adds default stack it. your first build run stack, virtual machine with required tools pre-installed should wish use simply select default stack dropdown menu stack tab. if click more information link, see preinstalled tools with versions. we support latest xcode version shortly official release. in reports check installed tools versions stack. learn stack update policy . " });
this.add({id:25, 
title:"People management in Jenkins and Bitrise", 
body:" people management jenkins bitrise what people page jenkins places bitrise (depending team workspace set up). you see team members teams tab app. you see workspace members click account settings , select workspace people tab left. the purpose workspaces make easier manage people working different apps bitrise. unlimited number apps, workspace owners assign members work see fit. a team bitrise means users work app: make app’s team, manage teams tab. on groups tab manage workspace members delete, add new member group, assign group apps rename group. on people tab see added workspace and, needed, remove member groups workspace. workspaces consist groups: workspace owners create manage groups. a given group assigned work app: members level access app. " });
this.add({id:26, 
title:"Integrated SSO management on Bitrise", 
body:" integrated sso management bitrise while jenkins install authorization plugin sso management, bitrise comes integral velocity plan . workspace with plans set saml sso single gateway workspace bitrise. no remembering usernames credentials! all owner set bitrise saml sso app provider invite members org. we specific guides different providers guide steps. " });
this.add({id:27, 
title:"Signing up for Bitrise", 
body:" signing bitrise you sign bitrise email address authenticating with github, bitbucket gitlab account. you sign bitrise email address authenticating with github, bitbucket gitlab account. signing using git provider account brings practical benefits, like logging click course won’t authorize adding repositories hosted providers again. signing with email please note want sign bitrise with email address, address contain character + . " });
this.add({id:28, 
title:"Signing up with a Git provider", 
body:" signing with git provider you sign bitrise start free button upper right corner bitrise . it sign page. on sign page, scroll or sign up with section pick git provider. authorize selected git provider. if chose github, press authorize bitrise-io button, redirected bitrise. if chose bitbucket, press grant access button bitbucket, redirected bitrise. if chose gitlab, press authorize button, redirected bitrise. pick username password. when done, click sign . strong password please note provide strong password fulfills requirements: it 8 characters. one upper case character. one lower case character. one number. cannot contain character than 3 times row (aaa). cannot contain email username. after that, ready roll. your first workspace created automatically, redirected getting started page, rename workspace, run demo app , start adding new apps! " });
this.add({id:29, 
title:"Signing up with email", 
body:" signing with email don't use + character please note want sign bitrise with email address, address contain character + . you sign bitrise start free button upper right corner bitrise . it sign page. add email address, username, password. strong password please note provide strong password fulfills requirements: it 8 characters. one upper case character. one lower case character. one number. cannot contain character than 3 times row (aaa). cannot contain email username. check i agree bitrise terms service & privacy policy , click the  sign  button. check inbox confirmation email bitrise follow instructions there. if haven’t received us, click resend confirmation email button. and that's it! after confirming account, first workspace created automatically, redirected getting started page. you rename workspace, run demo apps , start adding new apps! " });
this.add({id:30, 
title:"Signing up with SAML SSO", 
body:" signing with saml sso you sign bitrise join workspace using workspace’s saml sso . on idp side, administrator add user bitrise saml sso app’s workspace. the bitrise workspace owner send invitation groups menu workspace bitrise. go sign page. click saml button. you directed initiate single sign-on page. provide bitrise workspace’s name got bitrise workspace owner click continue with sso so bitrise direct workspace’s connected saml sso provider. provide credentials associated with saml sso account. on almost page email field automatically populated based registered email address saml sso account. you alter provided username wish. click finish sign up . check inbox confirmation email bitrise follow instructions there. if haven’t received us, click resend confirmation email button. if went well, you’re landed bitrise dashboard view workspace’s apps! account settings , see workspace you’ve just joined. " });
this.add({id:28, 
title:"Signing up with a Git provider", 
body:" signing with git provider you sign bitrise start free button upper right corner bitrise . it sign page. on sign page, scroll or sign up with section pick git provider. authorize selected git provider. if chose github, press authorize bitrise-io button, redirected bitrise. if chose bitbucket, press grant access button bitbucket, redirected bitrise. if chose gitlab, press authorize button, redirected bitrise. pick username password. when done, click sign . strong password please note provide strong password fulfills requirements: it 8 characters. one upper case character. one lower case character. one number. cannot contain character than 3 times row (aaa). cannot contain email username. after that, ready roll. your first workspace created automatically, redirected getting started page, rename workspace, run demo app , start adding new apps! " });
this.add({id:29, 
title:"Signing up with email", 
body:" signing with email don't use + character please note want sign bitrise with email address, address contain character + . you sign bitrise start free button upper right corner bitrise . it sign page. add email address, username, password. strong password please note provide strong password fulfills requirements: it 8 characters. one upper case character. one lower case character. one number. cannot contain character than 3 times row (aaa). cannot contain email username. check i agree bitrise terms service & privacy policy , click the  sign  button. check inbox confirmation email bitrise follow instructions there. if haven’t received us, click resend confirmation email button. and that's it! after confirming account, first workspace created automatically, redirected getting started page. you rename workspace, run demo apps , start adding new apps! " });
this.add({id:30, 
title:"Signing up with SAML SSO", 
body:" signing with saml sso you sign bitrise join workspace using workspace’s saml sso . on idp side, administrator add user bitrise saml sso app’s workspace. the bitrise workspace owner send invitation groups menu workspace bitrise. go sign page. click saml button. you directed initiate single sign-on page. provide bitrise workspace’s name got bitrise workspace owner click continue with sso so bitrise direct workspace’s connected saml sso provider. provide credentials associated with saml sso account. on almost page email field automatically populated based registered email address saml sso account. you alter provided username wish. click finish sign up . check inbox confirmation email bitrise follow instructions there. if haven’t received us, click resend confirmation email button. if went well, you’re landed bitrise dashboard view workspace’s apps! account settings , see workspace you’ve just joined. " });
this.add({id:31, 
title:"Creating your first Workspace", 
body:" creating first workspace a workspace environment allows manage bitrise apps team members working apps. to able add run builds, need workspace, outside contributor app's team. a workspace environment allows manage bitrise apps team members working apps. you create multiple workspaces, invited workspaces users. to able add apps run builds, need workspace, outside contributor app's team. you need workspace paid subscription plan bitrise. each workspaces different subscription plan determines how credits workspace's apps use. to create first workspace: log bitrise. in workspace field, enter workspace. you change later. click create workspace button. choose teams plan hobby plan. velocity plan if interested velocity plan, contact ! click subscribe button proceed finish creating first workspace. teams plan if chose teams plan, follow instructions set credit tier provide payment details. for information, check pricing page . once owner workspace, start adding apps. " });
this.add({id:32, 
title:"Adding a new app", 
body:" adding new app adding app bitrise means setting access repository so run builds. our project scanner determines platform type generates default workflows build deploy app. adding app bitrise means granting access code's git repository so run builds. during process, project scanner detects platform type app - example, ios generate default workflows with necessary steps build deploy app. the project scanner supporting platform\/framework means project scanner detect type app set basic bitrise configuration based type. you add any app, too, regardless how it's built you'll configure manually. each app owned workspace apps, with exception public require form authentication able access repository. to add new app bitrise: on bitrise ci page, click add new app button. you open dropdown menu button add new app cli . select workspace app. set app private public. this settings can't changed later. private apps accessible workspace members. they need authenticate view app's details. public apps expose configuration file build logs link. connect repository. you can: connect github account organization bitrise github app integration select available repository. we strongly recommend method using github connect git provider account bitrise oauth application select available repository. enter repository url manually. configure authorization allow bitrise access repository. there multiple ways so, depending type app: public apps don't require authorization. private apps accessed github app integration don't need additional authorization. private apps with ssh urls, accessed oauth applications, require configuring ssh key . bitrise automatically create register ssh key pair. private apps with https urls, accessed oauth applications, require https authorization with personal access token . we recommend using token with read access. set default branch app decide want project scanner scan code branch. if repository connected, select available branch dropdown menu. if entered repository url manually, need type valid branch name. repository url you able change project's repository url later. you connect disconnect account git provider services any time. configure app settings. you modify confirm automatically generated settings, create configuration manually. the configuration sets stack , machine type , project root directory, things. the exact parameters configure depends type. select app icon. you skip add icon later. for apps with oauth connections, add webhook . a webhook required automatically trigger builds . apps with github app integration don't need webhook. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:33, 
title:"Getting started with iOS apps", 
body:" getting started with ios apps get started bitrise signing email git provider, connecting repository, running first build ios app. developing ios complex - aim make easy possible you! in guide, we’ll walk how add app to bitrise, run xcode tests, manage code signing files, deploy to  bitrise.io  and app store. integrating fastlane bitrise you run your fastlane lane bitrise with commands use locally. bitrise’s automated steps provide extra functionality lane speed builds. for information, check integrating fastlane bitrise . " });
this.add({id:34, 
title:"Adding an iOS app to Bitrise", 
body:" adding ios app bitrise do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. we look configuration files set app based them. in case ios app, we’re looking xcode project ( .xcodeproj ) xcode workspace ( .xcworkspace ) path. note validation fail shared scheme project. you point bitrise manually xcode it’s shared, automatically detect you. select ipa export method. you modify later - now, select  development . once clicked it, see your: project workspace path. scheme ipa export method. ios stack. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:35, 
title:"Testing your iOS app", 
body:" testing ios app once created app, first build run based automatically created primary workflow. you check app’s workflow editor: click app’s your dashboard then the workflow tab. if test targets defined, the primary workflow ios app includes two steps you need run xcode tests, view results on  bitrise.io : xcode test ios deploy bitrise.io code signing files running xcode tests deploying results bitrise require any code signing files. so don’t worry just yet! the xcode test ios step runs pre-defined xcode tests. it default configuration does need modified: tests written correctly, work. you options xcode, too. checking selected stack stacks & machines tab we recommend checking stack selected app xcode version used build app. for example, simulator test fails with ineligible destinations the scheme message, make sure xcode version stacks & machines tab correct. you read stacks: build stacks . the deploy bitrise.io step deploy following the  logs  and  artifacts  tab build: your xcode test results. your raw xcodebuildoutput log. the  deploy bitrise.io  step exports results the  xcode test ios  step the  test reports  add-on. " });
this.add({id:36, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:37, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:38, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:34, 
title:"Adding an iOS app to Bitrise", 
body:" adding ios app bitrise do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. we look configuration files set app based them. in case ios app, we’re looking xcode project ( .xcodeproj ) xcode workspace ( .xcworkspace ) path. note validation fail shared scheme project. you point bitrise manually xcode it’s shared, automatically detect you. select ipa export method. you modify later - now, select  development . once clicked it, see your: project workspace path. scheme ipa export method. ios stack. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:35, 
title:"Testing your iOS app", 
body:" testing ios app once created app, first build run based automatically created primary workflow. you check app’s workflow editor: click app’s your dashboard then the workflow tab. if test targets defined, the primary workflow ios app includes two steps you need run xcode tests, view results on  bitrise.io : xcode test ios deploy bitrise.io code signing files running xcode tests deploying results bitrise require any code signing files. so don’t worry just yet! the xcode test ios step runs pre-defined xcode tests. it default configuration does need modified: tests written correctly, work. you options xcode, too. checking selected stack stacks & machines tab we recommend checking stack selected app xcode version used build app. for example, simulator test fails with ineligible destinations the scheme message, make sure xcode version stacks & machines tab correct. you read stacks: build stacks . the deploy bitrise.io step deploy following the  logs  and  artifacts  tab build: your xcode test results. your raw xcodebuildoutput log. the  deploy bitrise.io  step exports results the  xcode test ios  step the  test reports  add-on. " });
this.add({id:36, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:37, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:37, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:38, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:39, 
title:"Getting started with Android apps", 
body:" getting started with android apps get started bitrise signing email git provider, connecting repository, running first build android app. in guide, we’ll walk how add android app bitrise, default workflows do, finally how test deploy app bitrise.io google play store. do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider" });
this.add({id:40, 
title:"Adding an Android app to Bitrise", 
body:" adding android app bitrise log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. the scanner looking build.gradle gradlew files. if present, project detected android project. the bitrise scanner selects main module project default. if modules choose the module list, select works best project. select variant for building (you can  select all variants  which generate variants in  artifacts ) select variant for testing too. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:41, 
title:"Managing dependencies for Android apps", 
body:" managing dependencies android apps the gradle build allows include external binaries library modules dependencies. bitrise install dependencies app process. adding build dependencies you read adding dependencies android project: https:\/\/developer.android.com\/studio\/build\/dependencies make sure project's build.gradle file lists dependencies. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes android build step. if project scanner generated workflow called deploy first adding app, workflow includes step. it installs dependencies listed build.gradle file any additional configuration. make sure workflow includes install missing android sdk components step. the step before android build step workflow. it install android sdk tool project need. " });
this.add({id:42, 
title:"Testing your Android app", 
body:" testing android app we steps dedicated assisting testing android app ci process. the android lint step runs lint android project source files detects potential syntax errors code error free. the android unit test step runs project's unit tests. you run different modules flavors. running android unit tests the virtual device testing android uses firebase testlab run android tests virtual devices. device testing for android the android unit test step virtual device testing android step export results test reports add-on. to so, simply make sure workflow includes deploy bitrise.io step end workflow. " });
this.add({id:43, 
title:"Signing your Android app", 
body:" signing android app in order publish android app google play, need digitally sign app. bitrise you: you'll just upload keystore file, provide necessary authentication. other code signing options in section, we'll how sign android app with sign step. there ways - check options relevant guides: android code signing generate keystore file generate keystore file . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select code signing menu. drag-and-drop keystore file android keystore file field. fill keystore password , keystore alias , private key password fields click save metadata . open workflow editor . add android sign generate cordova build configuration step workflow. and that's it. the time you'll run build, android sign step sign generated binary. " });
this.add({id:44, 
title:"Deploying an Android app to bitrise.io", 
body:" deploying android app bitrise.io in section, we'll how deploy android app bitrise.io . deploying bitrise.io means build artifacts generated available download finished. you use test app devices, example. to deploy app bitrise.io : workflow editor bitrise.yml make sure workflow contains android build step build app. optionally, build app with gradle runner step. this requires bit configuration allows extensive customization. add deploy bitrise.io step workflow. notifying users you use notify: user roles notify: emails inputs step set notifications deploy. click input names reveal information how configure them. optionally, set enable public page app? input step true so step enables public install page app. run build. open bitrise.yml file app. make sure workflow contains android-build step build app. workflows:\n example-workflow:\n steps:\n - android-build@1:\n optionally, build app with gradle-runner step. this requires bit configuration allows extensive customization. set module and\/or variant input tell step build. in example, we're building debug variant android project. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} add deploy-to-bitrise-io step workflow. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} notifying users you use notify_user_groups notify_email_list inputs step set notifications deploy: the notify_user_groups input allows send notifications based access roles granted users. for example, set input notify with admin developer role. set multiple roles separated comma: - notify_user_groups: admins, testers . the notify_email_list input accepts secrets, secret contain comma-separated lists email addresses. optionally, set enable public page app? input step true so step enables public install page app. run build. the deploy bitrise.io step deploy app. you share generated binary with team members using build’s url. a bitrise.yml deploying android app bitrise in example, we're building debug variant android app, deploy bitrise.io, as. " });
this.add({id:45, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:46, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:40, 
title:"Adding an Android app to Bitrise", 
body:" adding android app bitrise log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. the scanner looking build.gradle gradlew files. if present, project detected android project. the bitrise scanner selects main module project default. if modules choose the module list, select works best project. select variant for building (you can  select all variants  which generate variants in  artifacts ) select variant for testing too. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:41, 
title:"Managing dependencies for Android apps", 
body:" managing dependencies android apps the gradle build allows include external binaries library modules dependencies. bitrise install dependencies app process. adding build dependencies you read adding dependencies android project: https:\/\/developer.android.com\/studio\/build\/dependencies make sure project's build.gradle file lists dependencies. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes android build step. if project scanner generated workflow called deploy first adding app, workflow includes step. it installs dependencies listed build.gradle file any additional configuration. make sure workflow includes install missing android sdk components step. the step before android build step workflow. it install android sdk tool project need. " });
this.add({id:42, 
title:"Testing your Android app", 
body:" testing android app we steps dedicated assisting testing android app ci process. the android lint step runs lint android project source files detects potential syntax errors code error free. the android unit test step runs project's unit tests. you run different modules flavors. running android unit tests the virtual device testing android uses firebase testlab run android tests virtual devices. device testing for android the android unit test step virtual device testing android step export results test reports add-on. to so, simply make sure workflow includes deploy bitrise.io step end workflow. " });
this.add({id:43, 
title:"Signing your Android app", 
body:" signing android app in order publish android app google play, need digitally sign app. bitrise you: you'll just upload keystore file, provide necessary authentication. other code signing options in section, we'll how sign android app with sign step. there ways - check options relevant guides: android code signing generate keystore file generate keystore file . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select code signing menu. drag-and-drop keystore file android keystore file field. fill keystore password , keystore alias , private key password fields click save metadata . open workflow editor . add android sign generate cordova build configuration step workflow. and that's it. the time you'll run build, android sign step sign generated binary. " });
this.add({id:44, 
title:"Deploying an Android app to bitrise.io", 
body:" deploying android app bitrise.io in section, we'll how deploy android app bitrise.io . deploying bitrise.io means build artifacts generated available download finished. you use test app devices, example. to deploy app bitrise.io : workflow editor bitrise.yml make sure workflow contains android build step build app. optionally, build app with gradle runner step. this requires bit configuration allows extensive customization. add deploy bitrise.io step workflow. notifying users you use notify: user roles notify: emails inputs step set notifications deploy. click input names reveal information how configure them. optionally, set enable public page app? input step true so step enables public install page app. run build. open bitrise.yml file app. make sure workflow contains android-build step build app. workflows:\n example-workflow:\n steps:\n - android-build@1:\n optionally, build app with gradle-runner step. this requires bit configuration allows extensive customization. set module and\/or variant input tell step build. in example, we're building debug variant android project. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} add deploy-to-bitrise-io step workflow. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} notifying users you use notify_user_groups notify_email_list inputs step set notifications deploy: the notify_user_groups input allows send notifications based access roles granted users. for example, set input notify with admin developer role. set multiple roles separated comma: - notify_user_groups: admins, testers . the notify_email_list input accepts secrets, secret contain comma-separated lists email addresses. optionally, set enable public page app? input step true so step enables public install page app. run build. the deploy bitrise.io step deploy app. you share generated binary with team members using build’s url. a bitrise.yml deploying android app bitrise in example, we're building debug variant android app, deploy bitrise.io, as. " });
this.add({id:45, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:46, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:47, 
title:"Getting started with React Native apps", 
body:" getting started with react native apps get started bitrise signing email git provider, connecting repository, running first build react native app. expo projects if use expo react native project, dedicated guide: getting started with expo apps . you easily set configure react native project bitrise . a react native repo consist android ios project so configurations normally with apps. when running bitrise, see first android, build gets built. do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider" });
this.add({id:48, 
title:"Adding a React Native app to Bitrise", 
body:" adding react native app bitrise this procedure guide process adding app bitrise, connecting repository, setting repository access, selecting branch validating project. below highlight react native-specific configuration well. log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. if configuration files available selected branch, scanner detect app react native app. if project consists module, module automatically selected module . if project contains than module, pick recommend main one! in variant field, select variant suits project. pick select all variants build variants. pick debug release wish generate apk ipa file. in project (or workspace) field, select xcode project workspace path. in select scheme , pick scheme name. the scanner validation fail shared project. you point bitrise manually xcode it’s shared, automatically detect you. in select ipa export method , select export method .ipa file: ad-hoc, app-store, development enterprise method. don't worry, change later. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . you successfully set react native project bitrise.io ! " });
this.add({id:49, 
title:"Installing dependencies for ExpoIonic\/CordovaReact Native apps", 
body:" installing dependencies expo ionic\/cordova react native apps if bitrise project scanner successfully scanned react native ionic\/cordova project, run npm command run yarn command steps included default workflows . these steps install missing javascript dependencies app . for native android dependencies, use install missing android sdk components step. for native ios dependencies, use, others, brew install step run cocoapods install step. to install javascript dependencies with npm: using yarn instead npm in guide, we're using npm install javascript dependencies. however, use run yarn command step: install missing js dependencies any additional configuration required. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes run npm command step. in the 'npm' command with arguments run input variable, type install . using npm ci command instead npm install if date package-lock.json file project, recommend using ci command the 'npm' command with arguments run input. using npm ci result faster build times compared npm install reliable builds well. " });
this.add({id:50, 
title:"Code signing for React Native apps", 
body:" code signing react native apps a react native app consists projects, android ios - different signing procedures. if click code signing tab project’s workflow editor, code fields displayed page you. follow platform-specific instructions sign android. " });
this.add({id:51, 
title:"Signing your Android project", 
body:" signing android project all android apps digitally signed with certificate installed devices. on bitrise, use dedicated step purpose first you'll need keystore file. generate keystore file generate keystore file . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select code signing menu. drag-and-drop keystore file android keystore file field. fill keystore password , keystore alias , private key password fields click save metadata . open workflow editor . add android sign generate cordova build configuration step workflow. if uploaded keystore file filled metadata, required inputs step require configuration you. prerequisite android sign step make sure add android sign step build ( android build step gradle runner step) workflow. " });
this.add({id:52, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:53, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:54, 
title:"Testing your React Native app", 
body:" testing react native app you use react native’s built testing method, called jest perform unit tests. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add run npm command step workflow. in npm command with arguments run input field, type test . for detailed guides react native testing, check testing react native apps . " });
this.add({id:55, 
title:"Adding React Native test results to Test reports", 
body:" adding react native test results test reports bitrise's test reports add-on allows view analyze test results convenient place. by default, tests won't test reports. however, export results: exporting to test reports from any step . the basic process follows: generate junit.xml file build. for example, use jest-junit prepare report. add export test results test reports add-on step workflow. in path custom test results reside input, add folder junit.xml file test results located. in test result search pattern input, set *.xml . in the  the test  input, set test run. the test results test reports add-on. make sure deploy bitrise.io step workflow. " });
this.add({id:56, 
title:"Deploying a React Native app", 
body:" deploying react native app you deploy react native app to: bitrise.io: this allows download generated binary, share with others public install page. online stores: integrations multiple different online stores. in guides, we'll how publish google play apple's app store. " });
this.add({id:57, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:58, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:59, 
title:"Deploying your Android project to Google Play", 
body:" deploying android project google play you use deploy google play step workflow upload digitally signed aab\/apk google play store. add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure code signing app. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:48, 
title:"Adding a React Native app to Bitrise", 
body:" adding react native app bitrise this procedure guide process adding app bitrise, connecting repository, setting repository access, selecting branch validating project. below highlight react native-specific configuration well. log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. if configuration files available selected branch, scanner detect app react native app. if project consists module, module automatically selected module . if project contains than module, pick recommend main one! in variant field, select variant suits project. pick select all variants build variants. pick debug release wish generate apk ipa file. in project (or workspace) field, select xcode project workspace path. in select scheme , pick scheme name. the scanner validation fail shared project. you point bitrise manually xcode it’s shared, automatically detect you. in select ipa export method , select export method .ipa file: ad-hoc, app-store, development enterprise method. don't worry, change later. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . you successfully set react native project bitrise.io ! " });
this.add({id:49, 
title:"Installing dependencies for ExpoIonic\/CordovaReact Native apps", 
body:" installing dependencies expo ionic\/cordova react native apps if bitrise project scanner successfully scanned react native ionic\/cordova project, run npm command run yarn command steps included default workflows . these steps install missing javascript dependencies app . for native android dependencies, use install missing android sdk components step. for native ios dependencies, use, others, brew install step run cocoapods install step. to install javascript dependencies with npm: using yarn instead npm in guide, we're using npm install javascript dependencies. however, use run yarn command step: install missing js dependencies any additional configuration required. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes run npm command step. in the 'npm' command with arguments run input variable, type install . using npm ci command instead npm install if date package-lock.json file project, recommend using ci command the 'npm' command with arguments run input. using npm ci result faster build times compared npm install reliable builds well. " });
this.add({id:50, 
title:"Code signing for React Native apps", 
body:" code signing react native apps a react native app consists projects, android ios - different signing procedures. if click code signing tab project’s workflow editor, code fields displayed page you. follow platform-specific instructions sign android. " });
this.add({id:51, 
title:"Signing your Android project", 
body:" signing android project all android apps digitally signed with certificate installed devices. on bitrise, use dedicated step purpose first you'll need keystore file. generate keystore file generate keystore file . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select code signing menu. drag-and-drop keystore file android keystore file field. fill keystore password , keystore alias , private key password fields click save metadata . open workflow editor . add android sign generate cordova build configuration step workflow. if uploaded keystore file filled metadata, required inputs step require configuration you. prerequisite android sign step make sure add android sign step build ( android build step gradle runner step) workflow. " });
this.add({id:52, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:53, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:51, 
title:"Signing your Android project", 
body:" signing android project all android apps digitally signed with certificate installed devices. on bitrise, use dedicated step purpose first you'll need keystore file. generate keystore file generate keystore file . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select code signing menu. drag-and-drop keystore file android keystore file field. fill keystore password , keystore alias , private key password fields click save metadata . open workflow editor . add android sign generate cordova build configuration step workflow. if uploaded keystore file filled metadata, required inputs step require configuration you. prerequisite android sign step make sure add android sign step build ( android build step gradle runner step) workflow. " });
this.add({id:52, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:53, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:53, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:54, 
title:"Testing your React Native app", 
body:" testing react native app you use react native’s built testing method, called jest perform unit tests. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add run npm command step workflow. in npm command with arguments run input field, type test . for detailed guides react native testing, check testing react native apps . " });
this.add({id:55, 
title:"Adding React Native test results to Test reports", 
body:" adding react native test results test reports bitrise's test reports add-on allows view analyze test results convenient place. by default, tests won't test reports. however, export results: exporting to test reports from any step . the basic process follows: generate junit.xml file build. for example, use jest-junit prepare report. add export test results test reports add-on step workflow. in path custom test results reside input, add folder junit.xml file test results located. in test result search pattern input, set *.xml . in the  the test  input, set test run. the test results test reports add-on. make sure deploy bitrise.io step workflow. " });
this.add({id:56, 
title:"Deploying a React Native app", 
body:" deploying react native app you deploy react native app to: bitrise.io: this allows download generated binary, share with others public install page. online stores: integrations multiple different online stores. in guides, we'll how publish google play apple's app store. " });
this.add({id:57, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:58, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:59, 
title:"Deploying your Android project to Google Play", 
body:" deploying android project google play you use deploy google play step workflow upload digitally signed aab\/apk google play store. add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure code signing app. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:57, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:58, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:59, 
title:"Deploying your Android project to Google Play", 
body:" deploying android project google play you use deploy google play step workflow upload digitally signed aab\/apk google play store. add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure code signing app. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:60, 
title:"Getting started with Flutter apps", 
body:" getting started with flutter apps get started bitrise signing email git provider, connecting repository, running first build flutter app. flutter mobile app sdk allows developers create native apps ios android. bitrise supports flutter apps: dedicated steps help with flutter needs. this guide walks setting up, testing, building deploying simple app bitrise. " });
this.add({id:61, 
title:"Adding a Flutter app to Bitrise", 
body:" adding flutter app bitrise do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. we look configuration files set app based them. in case flutter apps, definitely need pubspec.yaml file project. type branch includes project’s configuration - master, example click next . if ios project flutter project, select .ipa export method. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:62, 
title:"Testing a Flutter app", 
body:" testing flutter app you write run unit-, widget-, integration tests with flutter. for information, check flutter’s official documentation . you use automatically generated primary workflow test flutter app. it include flutter test step runs flutter tests generate code coverage reports. test reports the deploy bitrise.io step exports results flutter test step test reports add-on default: check flutter test results add-on, just need add deploy bitrise.io step end workflow. to run tests flutter app: open app’s workflow editor open primary workflow, any workflows want use run tests. in flutter install step, flutter sdk version input. you specify tags branches flutter sdk’s git repository. the default value stable . this use latest stable branch flutter. to available version tags, check: https:\/\/github.com\/flutter\/flutter\/releases . to see available branches, check: https:\/\/github.com\/flutter\/flutter\/branches . add flutter test step. in additional parameters input, enter any flags wish use to. the step runs flutter test command with specified flags. to check available flags, open line interface machine run flutter test --help . make sure project location input flutter test step correct. the default value environment variable (env var) created flutter project’s location. if want generate code coverage reports, set generate code coverage files? input yes . this runs flutter test command with --coverage flag. to export test results test reports add-on, add deploy bitrise.io step end workflow. run build! once it’s done, test results artifacts tab build’s page app. " });
this.add({id:63, 
title:"Deploying a Flutter app", 
body:" deploying flutter app to build deploy flutter app, workflow contain steps: flutter install flutter build if platforms specified repository, deploy workflow automatically generated adding app bitrise. the content depends platforms: example, contains ios project, contain certificate profile installer step. you build ios android projects time separately, using workflow. set platform input flutter build step any time. by default, configured according platform platforms scanner detected adding app bitrise. here’s example workflow we’ll use configuration, with necessary steps: pipelines parallelization in examples, we're assuming building deploying ios android versions app workflow, performing necessary operations serially. however, parallel with single build trigger using pipelines: build pipelinesconfiguring a bitrise pipeline packages libraries we support building flutter packages libraries. unlike case apps, artifact build so need flutter build step workflow. " });
this.add({id:64, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:65, 
title:"Deploying a Flutter app to App Store Connect", 
body:" deploying flutter app app store connect to deploy ios flutter project app store, you’ll need build app, export ipa file submit store. unlike testing, requires code signing files: an ios distribution certificate (a .p12 file). an app store provisioning profile. for flutter applications, code signing requires setting team id project settings xcode. " });
this.add({id:66, 
title:"Configuring Team ID for Flutter apps", 
body:" configuring team id flutter apps once created ios project locally, need review settings xcode. more specifically, set valid team id: that, build fail bitrise. in xcode, open runner.xcworkspace app’s ios folder. to view app’s settings, select runner project xcode navigator. then, main view sidebar, select runner target. select general tab. in signing section, team menu set team associated with registered apple developer account. commit change repository! don't forget commit changes! if set team id locally, build fail bitrise! " });
this.add({id:67, 
title:"Configuring Flutter deployment to the App Store on Bitrise", 
body:" configuring flutter deployment app store bitrise to deploy app app store, need upload code signing files. you options: upload code signing certificate(s) bitrise use automatic with manage ios code signing step. upload provisioning profile(s) code signing certificate(s) bitrise use manual with certificate profile installer step. in guide, focus second option, manual code signing: make sure certificate profile installer step workflow. upload required code signing files bitrise . open flutter build step ios platform configs input group. make sure additional parameters input value --release . check platform input step: make sure it’s set ios . set ios output artifact type input archive . add export ios tvos xcode archive step workflow. it flutter build step. set distribution method input step app-store . add deploy app store connect step end workflow. provide apple credentials respective input fields. apple id. password or, use two-factor authentication app store connect, application password. don’t worry, password visible logs exposed . start build! if goes well, step submit app app store connect. you can, connect page, distribute external testers testflight, release itself. " });
this.add({id:68, 
title:"Deploying a Flutter app to Google Play", 
body:" deploying flutter app google play to deploy app google play, need export app bundle file sign it. you options: you configure code signing app’s build.gradle file flutter sign app build phase. sign aab apk file bitrise with dedicated step. the scope guide second option: signing aab\/apk file with android sign step. generate keystore file . the keystore file required code signing. open app bitrise workflow > code signing > android code signing . drag drop keystore file, metadata. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:69, 
title:"Additional Flutter content", 
body:" additional flutter content building android apps with flutter modules flutter test step freezes \"waiting flutter command release startup lock...\" reducing build time flutter apps could resolve package dependencies flutter " });
this.add({id:61, 
title:"Adding a Flutter app to Bitrise", 
body:" adding flutter app bitrise do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. we look configuration files set app based them. in case flutter apps, definitely need pubspec.yaml file project. type branch includes project’s configuration - master, example click next . if ios project flutter project, select .ipa export method. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:62, 
title:"Testing a Flutter app", 
body:" testing flutter app you write run unit-, widget-, integration tests with flutter. for information, check flutter’s official documentation . you use automatically generated primary workflow test flutter app. it include flutter test step runs flutter tests generate code coverage reports. test reports the deploy bitrise.io step exports results flutter test step test reports add-on default: check flutter test results add-on, just need add deploy bitrise.io step end workflow. to run tests flutter app: open app’s workflow editor open primary workflow, any workflows want use run tests. in flutter install step, flutter sdk version input. you specify tags branches flutter sdk’s git repository. the default value stable . this use latest stable branch flutter. to available version tags, check: https:\/\/github.com\/flutter\/flutter\/releases . to see available branches, check: https:\/\/github.com\/flutter\/flutter\/branches . add flutter test step. in additional parameters input, enter any flags wish use to. the step runs flutter test command with specified flags. to check available flags, open line interface machine run flutter test --help . make sure project location input flutter test step correct. the default value environment variable (env var) created flutter project’s location. if want generate code coverage reports, set generate code coverage files? input yes . this runs flutter test command with --coverage flag. to export test results test reports add-on, add deploy bitrise.io step end workflow. run build! once it’s done, test results artifacts tab build’s page app. " });
this.add({id:63, 
title:"Deploying a Flutter app", 
body:" deploying flutter app to build deploy flutter app, workflow contain steps: flutter install flutter build if platforms specified repository, deploy workflow automatically generated adding app bitrise. the content depends platforms: example, contains ios project, contain certificate profile installer step. you build ios android projects time separately, using workflow. set platform input flutter build step any time. by default, configured according platform platforms scanner detected adding app bitrise. here’s example workflow we’ll use configuration, with necessary steps: pipelines parallelization in examples, we're assuming building deploying ios android versions app workflow, performing necessary operations serially. however, parallel with single build trigger using pipelines: build pipelinesconfiguring a bitrise pipeline packages libraries we support building flutter packages libraries. unlike case apps, artifact build so need flutter build step workflow. " });
this.add({id:64, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:65, 
title:"Deploying a Flutter app to App Store Connect", 
body:" deploying flutter app app store connect to deploy ios flutter project app store, you’ll need build app, export ipa file submit store. unlike testing, requires code signing files: an ios distribution certificate (a .p12 file). an app store provisioning profile. for flutter applications, code signing requires setting team id project settings xcode. " });
this.add({id:66, 
title:"Configuring Team ID for Flutter apps", 
body:" configuring team id flutter apps once created ios project locally, need review settings xcode. more specifically, set valid team id: that, build fail bitrise. in xcode, open runner.xcworkspace app’s ios folder. to view app’s settings, select runner project xcode navigator. then, main view sidebar, select runner target. select general tab. in signing section, team menu set team associated with registered apple developer account. commit change repository! don't forget commit changes! if set team id locally, build fail bitrise! " });
this.add({id:67, 
title:"Configuring Flutter deployment to the App Store on Bitrise", 
body:" configuring flutter deployment app store bitrise to deploy app app store, need upload code signing files. you options: upload code signing certificate(s) bitrise use automatic with manage ios code signing step. upload provisioning profile(s) code signing certificate(s) bitrise use manual with certificate profile installer step. in guide, focus second option, manual code signing: make sure certificate profile installer step workflow. upload required code signing files bitrise . open flutter build step ios platform configs input group. make sure additional parameters input value --release . check platform input step: make sure it’s set ios . set ios output artifact type input archive . add export ios tvos xcode archive step workflow. it flutter build step. set distribution method input step app-store . add deploy app store connect step end workflow. provide apple credentials respective input fields. apple id. password or, use two-factor authentication app store connect, application password. don’t worry, password visible logs exposed . start build! if goes well, step submit app app store connect. you can, connect page, distribute external testers testflight, release itself. " });
this.add({id:68, 
title:"Deploying a Flutter app to Google Play", 
body:" deploying flutter app google play to deploy app google play, need export app bundle file sign it. you options: you configure code signing app’s build.gradle file flutter sign app build phase. sign aab apk file bitrise with dedicated step. the scope guide second option: signing aab\/apk file with android sign step. generate keystore file . the keystore file required code signing. open app bitrise workflow > code signing > android code signing . drag drop keystore file, metadata. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:64, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:65, 
title:"Deploying a Flutter app to App Store Connect", 
body:" deploying flutter app app store connect to deploy ios flutter project app store, you’ll need build app, export ipa file submit store. unlike testing, requires code signing files: an ios distribution certificate (a .p12 file). an app store provisioning profile. for flutter applications, code signing requires setting team id project settings xcode. " });
this.add({id:66, 
title:"Configuring Team ID for Flutter apps", 
body:" configuring team id flutter apps once created ios project locally, need review settings xcode. more specifically, set valid team id: that, build fail bitrise. in xcode, open runner.xcworkspace app’s ios folder. to view app’s settings, select runner project xcode navigator. then, main view sidebar, select runner target. select general tab. in signing section, team menu set team associated with registered apple developer account. commit change repository! don't forget commit changes! if set team id locally, build fail bitrise! " });
this.add({id:67, 
title:"Configuring Flutter deployment to the App Store on Bitrise", 
body:" configuring flutter deployment app store bitrise to deploy app app store, need upload code signing files. you options: upload code signing certificate(s) bitrise use automatic with manage ios code signing step. upload provisioning profile(s) code signing certificate(s) bitrise use manual with certificate profile installer step. in guide, focus second option, manual code signing: make sure certificate profile installer step workflow. upload required code signing files bitrise . open flutter build step ios platform configs input group. make sure additional parameters input value --release . check platform input step: make sure it’s set ios . set ios output artifact type input archive . add export ios tvos xcode archive step workflow. it flutter build step. set distribution method input step app-store . add deploy app store connect step end workflow. provide apple credentials respective input fields. apple id. password or, use two-factor authentication app store connect, application password. don’t worry, password visible logs exposed . start build! if goes well, step submit app app store connect. you can, connect page, distribute external testers testflight, release itself. " });
this.add({id:68, 
title:"Deploying a Flutter app to Google Play", 
body:" deploying flutter app google play to deploy app google play, need export app bundle file sign it. you options: you configure code signing app’s build.gradle file flutter sign app build phase. sign aab apk file bitrise with dedicated step. the scope guide second option: signing aab\/apk file with android sign step. generate keystore file . the keystore file required code signing. open app bitrise workflow > code signing > android code signing . drag drop keystore file, metadata. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:69, 
title:"Additional Flutter content", 
body:" additional flutter content building android apps with flutter modules flutter test step freezes \"waiting flutter command release startup lock...\" reducing build time flutter apps could resolve package dependencies flutter " });
this.add({id:70, 
title:"Getting started with Ionic\/Cordova apps", 
body:" getting started with ionic\/cordova apps get started bitrise signing email git provider, connecting repository, running first build ionic\/cordova app. you use cordova ionic frameworks develop cross-platform apps. bitrise help with automated testing, code signing deployment procedures so ship ios and\/or android app\/s respective marketplace time! if workspace than concurrency, builds run simultaneously. now let guide process! do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider" });
this.add({id:71, 
title:"Adding an Ionic\/Cordova app to Bitrise", 
body:" adding ionic\/cordova app bitrise log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. we look configuration files set app based them. at project build configuration , select platform build app for. you select: ios. android. ios android (where build gets built first). register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:72, 
title:"Installing dependencies for ExpoIonic\/CordovaReact Native apps", 
body:" installing dependencies expo ionic\/cordova react native apps if bitrise project scanner successfully scanned react native ionic\/cordova project, run npm command run yarn command steps included default workflows . these steps install missing javascript dependencies app . for native android dependencies, use install missing android sdk components step. for native ios dependencies, use, others, brew install step run cocoapods install step. to install javascript dependencies with npm: using yarn instead npm in guide, we're using npm install javascript dependencies. however, use run yarn command step: install missing js dependencies any additional configuration required. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes run npm command step. in the 'npm' command with arguments run input variable, type install . using npm ci command instead npm install if date package-lock.json file project, recommend using ci command the 'npm' command with arguments run input. using npm ci result faster build times compared npm install reliable builds well. " });
this.add({id:73, 
title:"Testing Ionic\/Cordova apps", 
body:" testing ionic\/cordova apps you run unit tests ionic\/cordova apps bitrise using karma jasmine test runner jasmine test runner steps. if cordova\/ionic project karma jasmine dependency package.json file, scanner detect you're adding app automatically insert respective testing step workflow. if dependency missing project, manually steps workflow using editor. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. make sure testing step workflow. installing dependencies you install dependencies run tests. you choose karma jasmine test runner jasmine test runner steps. cordova app configuration with karma jasmine test runner in example, bitrise.yml configuration includes workflow called primary . this workflow includes karma jasmine test runner step. primary:\n steps:\n - activate-ssh-key@4.0.3:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone@4.0.11: {}\n script@1.1.5:\n title: do with script step\n npm@0.9.1:\n inputs:\n command: install\n karma-jasmine-runner@0.9.1: deploy-to-bitrise-io@1.3.15: {} " });
this.add({id:74, 
title:"Code signing Ionic\/Cordova apps", 
body:" code signing ionic\/cordova apps if want build app ios android, need upload platform-specific files code signing tab workflow editor. you generate builds platforms requires uploading code signing files platforms. " });
this.add({id:75, 
title:"iOS code signing for Ionic and Cordova projects", 
body:" ios code signing ionic cordova projects bitrise supports manual automatic provisioning ios code signing ionic cordova apps well. naturally, bitrise supports ios applications built with ionic cordova . however, code signing process slightly different compared native xcode project. bitrise supports manual automatic provisioning ionic cordova apps - again, processes somewhat different. " });
this.add({id:76, 
title:"Ionic\/Cordova code signing with manual code signing asset management", 
body:" ionic\/cordova code signing with manual asset management generate native xcode project locally ionic cordova calling cordova platform add ios ionic cordova platform add ios . upload files bitrise.io . make sure certificate profile installer step workflow. add generate cordova build configuration step workflow. it come certificate profile installer step. fill required inputs step. please note code signing identity provisioning profile required inputs ios apps marked such. build configuration : set debug release . code sign identity : enter developer distribution identity. provisioning profile : enter appropriate provisioning profile. packaging type : controls type build generated xcode. set code signing need. add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. this step come generate cordova build configuration step workflow. run build! " });
this.add({id:77, 
title:"Ionic\/Cordova code signing with automatic code signing asset management", 
body:" ionic\/cordova code signing with automatic asset management make sure .p12 signing certificates uploaded bitrise.io . add cordova prepare ionic prepare step workflow. these steps platform rm platform add commands. add manage ios code signing step workflow. if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. the step export: the project’s development team. the installed codesign identity’s name. the installed provisioning profile. one code signing step if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. select apple service connection method (based apple service set bitrise ) distribution method . add generate cordova build configuration step workflow. configure step use code signing settings exported manage ios code signing step: development distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: development code_sign_identity: iphone developer\n configuration: debug\n production distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: app-store code_sign_identity: iphone developer\n configuration: release\n add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. set should remove platforms prepare step? false . this crucial: ensures step remove re-add platform native projects generated cordova prepare ionic prepare step. run build! " });
this.add({id:78, 
title:"Android code signing using the Android Sign Step", 
body:" android code signing using sign step you create signed apk using the  android sign  step bitrise workflow. this step configured run uploaded keystore file the code signing tab workflow editor. you create signed apk using the  android sign   step bitrise workflow . this step configured run uploaded keystore file bitrise. the  android sign  step required signing configured project’s build.gradle file. if so, running the  android build step (or the  gradle runner  step) signs output (apk aab) automatically. nevertheless, recommend use the  android sign  step sign project easy secure way. jarsign apksigner apks signed with jarsigner apksigner . for apks, wish use apksigner sign project, the android sign step first set enables apksigner input true leave the apk signature scheme input automatic. this way apksigner checks apk’s minimum target sdk versions chooses required schemes. it signs project with v1 scheme supported version low schemes newer systems. please note aab files signed with jarsigner. the step uses jarsigner detects file ending with  .aab upload keystore file bitrise . add android sign step workflow builds apk aab file. bitrise uses environment variables sets inputs respective fields the  android sign  step. once step runs, produces signed apk aab. the aab used deploy steps, example,  google play deploy  step the  deploy to bitrise.io  step. the latter deploys apk\/aab artifacts  tab. you also use ship deploy app once built apk\/aab file. downloading keystore file you can download keystore file to project directory using the  file downloader  step: - file-downloader:\n inputs:\n source: $bitriseio_android_keystore_url\n destination: \"$home\/keystores\/my_keystore.jks\" #native android# if step requires keystore file, make sure include after file downloader step. after step,  my_keystore.jks  will available at  $home\/keystores\/my_keystore.jks . " });
this.add({id:79, 
title:"Deploying Ionic\/Cordova apps", 
body:" deploying ionic\/cordova apps to build deploy ionic cordova app bitrise, need digitally sign android ios project (if you're building both) use archive step deploying it. you deploy successfully built app to: online stores, google play store apple's app store. bitrise.io: generated binaries available artifacts tab build's page. you download share with others public install " });
this.add({id:80, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:81, 
title:"Deploying your Android project to Google Play", 
body:" deploying android project google play you use deploy google play step workflow upload digitally signed aab\/apk google play store. add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure code signing app. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:82, 
title:"Deploying your iOS project to the App Store", 
body:" deploying ios project app store add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure ios code signing ios project. add deploy app store connect - application loader (formerly itunes connect) step workflow, xcode archive & export ios step preferably deploy bitrise.io step. provide apple credentials deploy app store connect - application loader (formerly itunes connect) step. the step need your: apple id. password or, use two-factor authentication app store connect, application password. don’t worry, password visible logs exposed. start build. " });
this.add({id:71, 
title:"Adding an Ionic\/Cordova app to Bitrise", 
body:" adding ionic\/cordova app bitrise log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. we look configuration files set app based them. at project build configuration , select platform build app for. you select: ios. android. ios android (where build gets built first). register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . " });
this.add({id:72, 
title:"Installing dependencies for ExpoIonic\/CordovaReact Native apps", 
body:" installing dependencies expo ionic\/cordova react native apps if bitrise project scanner successfully scanned react native ionic\/cordova project, run npm command run yarn command steps included default workflows . these steps install missing javascript dependencies app . for native android dependencies, use install missing android sdk components step. for native ios dependencies, use, others, brew install step run cocoapods install step. to install javascript dependencies with npm: using yarn instead npm in guide, we're using npm install javascript dependencies. however, use run yarn command step: install missing js dependencies any additional configuration required. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes run npm command step. in the 'npm' command with arguments run input variable, type install . using npm ci command instead npm install if date package-lock.json file project, recommend using ci command the 'npm' command with arguments run input. using npm ci result faster build times compared npm install reliable builds well. " });
this.add({id:73, 
title:"Testing Ionic\/Cordova apps", 
body:" testing ionic\/cordova apps you run unit tests ionic\/cordova apps bitrise using karma jasmine test runner jasmine test runner steps. if cordova\/ionic project karma jasmine dependency package.json file, scanner detect you're adding app automatically insert respective testing step workflow. if dependency missing project, manually steps workflow using editor. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. make sure testing step workflow. installing dependencies you install dependencies run tests. you choose karma jasmine test runner jasmine test runner steps. cordova app configuration with karma jasmine test runner in example, bitrise.yml configuration includes workflow called primary . this workflow includes karma jasmine test runner step. primary:\n steps:\n - activate-ssh-key@4.0.3:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone@4.0.11: {}\n script@1.1.5:\n title: do with script step\n npm@0.9.1:\n inputs:\n command: install\n karma-jasmine-runner@0.9.1: deploy-to-bitrise-io@1.3.15: {} " });
this.add({id:74, 
title:"Code signing Ionic\/Cordova apps", 
body:" code signing ionic\/cordova apps if want build app ios android, need upload platform-specific files code signing tab workflow editor. you generate builds platforms requires uploading code signing files platforms. " });
this.add({id:75, 
title:"iOS code signing for Ionic and Cordova projects", 
body:" ios code signing ionic cordova projects bitrise supports manual automatic provisioning ios code signing ionic cordova apps well. naturally, bitrise supports ios applications built with ionic cordova . however, code signing process slightly different compared native xcode project. bitrise supports manual automatic provisioning ionic cordova apps - again, processes somewhat different. " });
this.add({id:76, 
title:"Ionic\/Cordova code signing with manual code signing asset management", 
body:" ionic\/cordova code signing with manual asset management generate native xcode project locally ionic cordova calling cordova platform add ios ionic cordova platform add ios . upload files bitrise.io . make sure certificate profile installer step workflow. add generate cordova build configuration step workflow. it come certificate profile installer step. fill required inputs step. please note code signing identity provisioning profile required inputs ios apps marked such. build configuration : set debug release . code sign identity : enter developer distribution identity. provisioning profile : enter appropriate provisioning profile. packaging type : controls type build generated xcode. set code signing need. add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. this step come generate cordova build configuration step workflow. run build! " });
this.add({id:77, 
title:"Ionic\/Cordova code signing with automatic code signing asset management", 
body:" ionic\/cordova code signing with automatic asset management make sure .p12 signing certificates uploaded bitrise.io . add cordova prepare ionic prepare step workflow. these steps platform rm platform add commands. add manage ios code signing step workflow. if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. the step export: the project’s development team. the installed codesign identity’s name. the installed provisioning profile. one code signing step if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. select apple service connection method (based apple service set bitrise ) distribution method . add generate cordova build configuration step workflow. configure step use code signing settings exported manage ios code signing step: development distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: development code_sign_identity: iphone developer\n configuration: debug\n production distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: app-store code_sign_identity: iphone developer\n configuration: release\n add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. set should remove platforms prepare step? false . this crucial: ensures step remove re-add platform native projects generated cordova prepare ionic prepare step. run build! " });
this.add({id:78, 
title:"Android code signing using the Android Sign Step", 
body:" android code signing using sign step you create signed apk using the  android sign  step bitrise workflow. this step configured run uploaded keystore file the code signing tab workflow editor. you create signed apk using the  android sign   step bitrise workflow . this step configured run uploaded keystore file bitrise. the  android sign  step required signing configured project’s build.gradle file. if so, running the  android build step (or the  gradle runner  step) signs output (apk aab) automatically. nevertheless, recommend use the  android sign  step sign project easy secure way. jarsign apksigner apks signed with jarsigner apksigner . for apks, wish use apksigner sign project, the android sign step first set enables apksigner input true leave the apk signature scheme input automatic. this way apksigner checks apk’s minimum target sdk versions chooses required schemes. it signs project with v1 scheme supported version low schemes newer systems. please note aab files signed with jarsigner. the step uses jarsigner detects file ending with  .aab upload keystore file bitrise . add android sign step workflow builds apk aab file. bitrise uses environment variables sets inputs respective fields the  android sign  step. once step runs, produces signed apk aab. the aab used deploy steps, example,  google play deploy  step the  deploy to bitrise.io  step. the latter deploys apk\/aab artifacts  tab. you also use ship deploy app once built apk\/aab file. downloading keystore file you can download keystore file to project directory using the  file downloader  step: - file-downloader:\n inputs:\n source: $bitriseio_android_keystore_url\n destination: \"$home\/keystores\/my_keystore.jks\" #native android# if step requires keystore file, make sure include after file downloader step. after step,  my_keystore.jks  will available at  $home\/keystores\/my_keystore.jks . " });
this.add({id:75, 
title:"iOS code signing for Ionic and Cordova projects", 
body:" ios code signing ionic cordova projects bitrise supports manual automatic provisioning ios code signing ionic cordova apps well. naturally, bitrise supports ios applications built with ionic cordova . however, code signing process slightly different compared native xcode project. bitrise supports manual automatic provisioning ionic cordova apps - again, processes somewhat different. " });
this.add({id:76, 
title:"Ionic\/Cordova code signing with manual code signing asset management", 
body:" ionic\/cordova code signing with manual asset management generate native xcode project locally ionic cordova calling cordova platform add ios ionic cordova platform add ios . upload files bitrise.io . make sure certificate profile installer step workflow. add generate cordova build configuration step workflow. it come certificate profile installer step. fill required inputs step. please note code signing identity provisioning profile required inputs ios apps marked such. build configuration : set debug release . code sign identity : enter developer distribution identity. provisioning profile : enter appropriate provisioning profile. packaging type : controls type build generated xcode. set code signing need. add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. this step come generate cordova build configuration step workflow. run build! " });
this.add({id:77, 
title:"Ionic\/Cordova code signing with automatic code signing asset management", 
body:" ionic\/cordova code signing with automatic asset management make sure .p12 signing certificates uploaded bitrise.io . add cordova prepare ionic prepare step workflow. these steps platform rm platform add commands. add manage ios code signing step workflow. if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. the step export: the project’s development team. the installed codesign identity’s name. the installed provisioning profile. one code signing step if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. select apple service connection method (based apple service set bitrise ) distribution method . add generate cordova build configuration step workflow. configure step use code signing settings exported manage ios code signing step: development distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: development code_sign_identity: iphone developer\n configuration: debug\n production distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: app-store code_sign_identity: iphone developer\n configuration: release\n add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. set should remove platforms prepare step? false . this crucial: ensures step remove re-add platform native projects generated cordova prepare ionic prepare step. run build! " });
this.add({id:76, 
title:"Ionic\/Cordova code signing with manual code signing asset management", 
body:" ionic\/cordova code signing with manual asset management generate native xcode project locally ionic cordova calling cordova platform add ios ionic cordova platform add ios . upload files bitrise.io . make sure certificate profile installer step workflow. add generate cordova build configuration step workflow. it come certificate profile installer step. fill required inputs step. please note code signing identity provisioning profile required inputs ios apps marked such. build configuration : set debug release . code sign identity : enter developer distribution identity. provisioning profile : enter appropriate provisioning profile. packaging type : controls type build generated xcode. set code signing need. add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. this step come generate cordova build configuration step workflow. run build! " });
this.add({id:77, 
title:"Ionic\/Cordova code signing with automatic code signing asset management", 
body:" ionic\/cordova code signing with automatic asset management make sure .p12 signing certificates uploaded bitrise.io . add cordova prepare ionic prepare step workflow. these steps platform rm platform add commands. add manage ios code signing step workflow. if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. the step export: the project’s development team. the installed codesign identity’s name. the installed provisioning profile. one code signing step if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. select apple service connection method (based apple service set bitrise ) distribution method . add generate cordova build configuration step workflow. configure step use code signing settings exported manage ios code signing step: development distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: development code_sign_identity: iphone developer\n configuration: debug\n production distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: app-store code_sign_identity: iphone developer\n configuration: release\n add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. set should remove platforms prepare step? false . this crucial: ensures step remove re-add platform native projects generated cordova prepare ionic prepare step. run build! " });
this.add({id:78, 
title:"Android code signing using the Android Sign Step", 
body:" android code signing using sign step you create signed apk using the  android sign  step bitrise workflow. this step configured run uploaded keystore file the code signing tab workflow editor. you create signed apk using the  android sign   step bitrise workflow . this step configured run uploaded keystore file bitrise. the  android sign  step required signing configured project’s build.gradle file. if so, running the  android build step (or the  gradle runner  step) signs output (apk aab) automatically. nevertheless, recommend use the  android sign  step sign project easy secure way. jarsign apksigner apks signed with jarsigner apksigner . for apks, wish use apksigner sign project, the android sign step first set enables apksigner input true leave the apk signature scheme input automatic. this way apksigner checks apk’s minimum target sdk versions chooses required schemes. it signs project with v1 scheme supported version low schemes newer systems. please note aab files signed with jarsigner. the step uses jarsigner detects file ending with  .aab upload keystore file bitrise . add android sign step workflow builds apk aab file. bitrise uses environment variables sets inputs respective fields the  android sign  step. once step runs, produces signed apk aab. the aab used deploy steps, example,  google play deploy  step the  deploy to bitrise.io  step. the latter deploys apk\/aab artifacts  tab. you also use ship deploy app once built apk\/aab file. downloading keystore file you can download keystore file to project directory using the  file downloader  step: - file-downloader:\n inputs:\n source: $bitriseio_android_keystore_url\n destination: \"$home\/keystores\/my_keystore.jks\" #native android# if step requires keystore file, make sure include after file downloader step. after step,  my_keystore.jks  will available at  $home\/keystores\/my_keystore.jks . " });
this.add({id:79, 
title:"Deploying Ionic\/Cordova apps", 
body:" deploying ionic\/cordova apps to build deploy ionic cordova app bitrise, need digitally sign android ios project (if you're building both) use archive step deploying it. you deploy successfully built app to: online stores, google play store apple's app store. bitrise.io: generated binaries available artifacts tab build's page. you download share with others public install " });
this.add({id:80, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:81, 
title:"Deploying your Android project to Google Play", 
body:" deploying android project google play you use deploy google play step workflow upload digitally signed aab\/apk google play store. add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure code signing app. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:82, 
title:"Deploying your iOS project to the App Store", 
body:" deploying ios project app store add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure ios code signing ios project. add deploy app store connect - application loader (formerly itunes connect) step workflow, xcode archive & export ios step preferably deploy bitrise.io step. provide apple credentials deploy app store connect - application loader (formerly itunes connect) step. the step need your: apple id. password or, use two-factor authentication app store connect, application password. don’t worry, password visible logs exposed. start build. " });
this.add({id:80, 
title:"Deploying a cross-platform app to bitrise.io", 
body:" deploying cross-platform app bitrise.io the deploy bitrise.io step uploads artifacts related build artifacts tab build’s page. you share generated app file (apk android ipa ios) with team members using public install page. the page url others binary device. notify user groups individual users apk built. publishing expo.io the deploy bitrise.io step does use expo commands doesn’t publish expo.io . this step publishes artifacts bitrise specific particular platform. if need publish expo.io , set run expo publish eject? input eject expo step yes . be aware case provide username password expo account publish expo.io. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure deploy bitrise.io step workflow. in notify: user roles , add role so notified granted with role. or notify: emails field with email addresses users want notify. make sure set email addresses secrets ! these details modified notifications click eye icon generated binary artifacts tab. if want step generate public install page you, set enable public page app? input true . " });
this.add({id:81, 
title:"Deploying your Android project to Google Play", 
body:" deploying android project google play you use deploy google play step workflow upload digitally signed aab\/apk google play store. add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure code signing app. configure google play access. you need first google play deployment app. in flutter build step, android platform configs input group make sure additional parameters input value --release . in android output artifact type input field, select apk appbundle depending deployment requirements. in output (.apk, .aab) pattern input, set path deploy google play step able access generated binary. the path relative project source directory, stored bitrise_source_dir environment variable. make sure deploy google play step android sign cordova archive ionic archive step workflow. fill required input fields follows: service account json key file path : this field accept remote url so provide env var contains uploaded service account json key. for example: $bitriseio_service_account_json_key_url . package : the package android app. track : the track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). " });
this.add({id:82, 
title:"Deploying your iOS project to the App Store", 
body:" deploying ios project app store add cordova archive ionic archive step workflow. note you’re building ios android project, apps fails, cordova archive\/ionic archive step fail. fill required inputs. the platform input needs set device . the build command configuration input match build configuration input generate cordova build configuration step. the archive step come generate cordova build configuration step workflow. configure ios code signing ios project. add deploy app store connect - application loader (formerly itunes connect) step workflow, xcode archive & export ios step preferably deploy bitrise.io step. provide apple credentials deploy app store connect - application loader (formerly itunes connect) step. the step need your: apple id. password or, use two-factor authentication app store connect, application password. don’t worry, password visible logs exposed. start build. " });
this.add({id:83, 
title:"Getting started with Expo apps", 
body:" getting started with expo apps get started bitrise signing email git provider, connecting repository, running first build expo app. you generate react native projects with react native cli expo . expo toolchain allows quickly react native app running having use native code xcode android studio. in guide discuss how set up, test, code sign deploy react native project built with expo cli . " });
this.add({id:84, 
title:"Adding an Expo app to Bitrise", 
body:" adding expo app bitrise first, let’s see how add react native expo app bitrise.io . do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. if automatic validation fails, set project manually. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . you successfully set react native project bitrise.io ! your first build gets kicked automatically using primary workflow. you check generated reports artifacts tab build’s page. " });
this.add({id:85, 
title:"Installing dependencies for ExpoIonic\/CordovaReact Native apps", 
body:" installing dependencies expo ionic\/cordova react native apps if bitrise project scanner successfully scanned react native ionic\/cordova project, run npm command run yarn command steps included default workflows . these steps install missing javascript dependencies app . for native android dependencies, use install missing android sdk components step. for native ios dependencies, use, others, brew install step run cocoapods install step. to install javascript dependencies with npm: using yarn instead npm in guide, we're using npm install javascript dependencies. however, use run yarn command step: install missing js dependencies any additional configuration required. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes run npm command step. in the 'npm' command with arguments run input variable, type install . using npm ci command instead npm install if date package-lock.json file project, recommend using ci command the 'npm' command with arguments run input. using npm ci result faster build times compared npm install reliable builds well. " });
this.add({id:86, 
title:"Testing your React Native app", 
body:" testing react native app you use react native’s built testing method, called jest perform unit tests. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add run npm command step workflow. in npm command with arguments run input field, type test . for detailed guides react native testing, check testing react native apps . " });
this.add({id:87, 
title:"Adding React Native test results to Test reports", 
body:" adding react native test results test reports bitrise's test reports add-on allows view analyze test results convenient place. by default, tests won't test reports. however, export results: exporting to test reports from any step . the basic process follows: generate junit.xml file build. for example, use jest-junit prepare report. add export test results test reports add-on step workflow. in path custom test results reside input, add folder junit.xml file test results located. in test result search pattern input, set *.xml . in the  the test  input, set test run. the test results test reports add-on. make sure deploy bitrise.io step workflow. " });
this.add({id:88, 
title:"Deploying your Expo app", 
body:" deploying expo app bitrise supports expo application services (eas) expo apps, default deploy bitrise workflow uses run expo application services (eas) build step trigger build eas. in case don’t want use eas, turtle cli bitrise workflows. see workflow recipe details. " });
this.add({id:84, 
title:"Adding an Expo app to Bitrise", 
body:" adding expo app bitrise first, let’s see how add react native expo app bitrise.io . do bitrise account? make sure signed bitrise.io access bitrise account. there multiple ways registering account: signing up with emailsigning up with a git provider log bitrise dashboard . click add new app button. under project access , select workspace app. set privacy app. you change setting later! if realize you've accidentally added app public need private, you'll delete add again. private apps accessible you, workspace members invited work app. they require authentication access repository public apps  expose their  bitrise.yml build logs everyone. if public app’s url, view log, help with troubleshooting, example. public apps require authentication ssh keys. select options set repository url: with select remote repository option, select repository list repos connected git provider account. choose dropdown menu, click select repository... select repository list. the enter url manually option does require connected git provider account: simply enter url proceed authentication phase. we strongly recommend using ssh url, unless setting public app . repository url you able change project's repository url later. you connect disconnect account git provider services any time. if signed bitrise using git provider account, connected select any repositories it. add ssh key authorize bitrise section. this relevant private apps: public apps can't ssh keys don't require authentication. choose options: auto-add generated ssh key repository : we recommend using option. automatically generate ssh key pair register public repository. requires connected git provider account admin rights copy generated ssh key git provider manually : we generate ssh key pair copy public register manually git provider. it useful if, example, need access multiple repositories with key. add ssh key bitrise : you generate ssh key paste private choosing option. need add public repository manually. to pair: generating your own ssh keypair . configure ssh keys any time if can't set valid, working ssh key connection time, don't worry: proceed with adding app. you afterwards: configuring ssh keys . select default branch repository. this contain configuration project. if successfully configured ssh access previous step you're adding public app, bitrise parse repository allow select branch dropdown menu. if didn't configure repository access, need type branch manually. you change default branch app later . in step, choose yes, auto-detect configuration . bitrise scan repository attempt set stack default workflows based results scan. in cases, recommend choosing option. project type detecting project type serves assist initial configuration app. but don't worry, change setting, including type, any time added wait bitrise validating project. if automatic validation fails, set project manually. register a webhook when prompted so bitrise start build automatically code pushed repository, pull request created. once done, click view app page newly added app's home page. from there, start editing workflows run builds . you successfully set react native project bitrise.io ! your first build gets kicked automatically using primary workflow. you check generated reports artifacts tab build’s page. " });
this.add({id:85, 
title:"Installing dependencies for ExpoIonic\/CordovaReact Native apps", 
body:" installing dependencies expo ionic\/cordova react native apps if bitrise project scanner successfully scanned react native ionic\/cordova project, run npm command run yarn command steps included default workflows . these steps install missing javascript dependencies app . for native android dependencies, use install missing android sdk components step. for native ios dependencies, use, others, brew install step run cocoapods install step. to install javascript dependencies with npm: using yarn instead npm in guide, we're using npm install javascript dependencies. however, use run yarn command step: install missing js dependencies any additional configuration required. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. make sure workflow includes run npm command step. in the 'npm' command with arguments run input variable, type install . using npm ci command instead npm install if date package-lock.json file project, recommend using ci command the 'npm' command with arguments run input. using npm ci result faster build times compared npm install reliable builds well. " });
this.add({id:86, 
title:"Testing your React Native app", 
body:" testing react native app you use react native’s built testing method, called jest perform unit tests. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add run npm command step workflow. in npm command with arguments run input field, type test . for detailed guides react native testing, check testing react native apps . " });
this.add({id:87, 
title:"Adding React Native test results to Test reports", 
body:" adding react native test results test reports bitrise's test reports add-on allows view analyze test results convenient place. by default, tests won't test reports. however, export results: exporting to test reports from any step . the basic process follows: generate junit.xml file build. for example, use jest-junit prepare report. add export test results test reports add-on step workflow. in path custom test results reside input, add folder junit.xml file test results located. in test result search pattern input, set *.xml . in the  the test  input, set test run. the test results test reports add-on. make sure deploy bitrise.io step workflow. " });
this.add({id:88, 
title:"Deploying your Expo app", 
body:" deploying expo app bitrise supports expo application services (eas) expo apps, default deploy bitrise workflow uses run expo application services (eas) build step trigger build eas. in case don’t want use eas, turtle cli bitrise workflows. see workflow recipe details. " });
this.add({id:89, 
title:"Infrastructure", 
body:" infrastructure bitrise platform, all: download use it, run servers - care that. that means worry infrastructure, either: maintenance, tools, virtualization job concern. on bitrise, use virtual machines (vm) run builds: build runs new vm, vm discarded immediately finished. a stack type virtual machine use run build. for example, native ios app, best xcode stacks. stacks come with necessary tools pre-installed, regularly updated make sure serve needs. " });
this.add({id:90, 
title:"Build machines", 
body:" build machines bitrise offers xcode linux stacks. each stack large number pre-installed tools. both linux xcode stacks available different build machine types. each type offers options with varying computing power, depending subscription plan . you configure default machine type app set workflow -specific machine types. you selecting stacks app: setting the stack for your builds . changing machine types using api you change build machine types apps owned single user workspace using api: changing machine types in all apps at the same time . each bitrise build machine ip address range: allowlist addresses able access machines from, example, private cloud: configuring network access with ip allowlists for information build code security, see code security . " });
this.add({id:91, 
title:"Configuring network access with IP allowlists", 
body:" configuring network access with ip allowlists you access bitrise virtual machines private network firewall. to so, allowlist build machine ip addresses network. our datacenters set public static ip addresses, with virtual machines having internal subnets addresses. depending company security policy, need allowlist addresses able access build machine: ip address ranges for the bitrise build machines . similarly, bitrise background workers powering app.bitrise.io ui related control plane, configuration management, signaling services accessible set static ip addresses. allowlisting addresses ensure receive build status updates bitrise access bitrise.yml file: ip address ranges for bitrise backend workers app . " });
this.add({id:92, 
title:"IP address ranges for the Bitrise build machines", 
body:" ip address ranges bitrise build machines for users, host repositories cloud-based service providers, need any network configuration able use bitrise. all permission access repository that, ssh key access token enough. however, company security policy allow unknown unauthorized ip addresses communicate with servers code stored - datacenter private cloud. in case, bitrise won’t work unless relevant added list. you see ip addresses following ranges source bitrise build machines reach services like git download code, test backend services, any run outside required reached ci workflow. allowlist entire subnet if provided public ip address subnet, need allow entire subnet network! for example, 208.52.166.128\/28 means addresses 208.52.166.128 208.52.166.143 (208.52.166.128, 208.52.166.129, 208.52.166.130, so on, way including 208.52.166.143) allowlisted. external internal ip address ranges build machines stack type public ip xcode stacks 74.122.200.0\/ 22 208.52.166.154\/32 208.52.166.128\/ 28 207.254.0.248\/ 29 207.254.0.208\/ 28 207.254.34.148\/32 207.254.33.176\/ 28 linux\/docker stacks 74.122.200.0\/ 22 104.197.15.74\/32 34.123.172.192\/32 34.125.50.224\/32 34.125.82.130\/32 34.134.193.138\/32 34.138.187.10\/32 34.150.152.190\/32 34.162.185.129\/32 34.162.202.37\/32 34.162.229.32\/32 34.162.29.153\/32 34.162.88.79\/32 34.23.207.105\/32 34.85.139.176\/32 34.85.240.93\/32 34.86.56.118\/32 35.202.121.43\/32 35.225.44.167\/32 35.231.56.118\/32 35.237.165.17\/32 35.243.148.182\/32 35.245.56.67\/32 " });
this.add({id:93, 
title:"IP address ranges for Bitrise backend workers", 
body:" ip address ranges bitrise backend workers bitrise backend workers operating firewalls nat gateways. there use cases need reach services. these addresses relevant use self-hosted git services store bitrise.yml file repository. in way bitrise can, example, access bitrise.yml file, send build status updates commits pull requests self-hosted repository. static ip addresses bitrise website background workers ip address ranges 74.122.200.0\/ 22 35.232.76.43 34.68.119.18 34.135.186.58 " });
this.add({id:94, 
title:"Document changelog", 
body:" document changelog april 2024 added 74.122.200.0\/22 range ip ranges build machines backend workers, utilize new range 20th may, 2024. october 2022 significantly increased linux\/docker stacks ip range. " });
this.add({id:95, 
title:"Storage space on build machines", 
body:" storage space build machines bitrise virtual machines different amounts free space available, depending type stack. our virtual machines different amounts free space available, depending type stack. the table summarizes data - mind numbers subject change, versions pre-installed tools resources varying machines. storage space build machines stack name filesystem size (gb) free (gb) linuxandroid \/dev\/loop0 160 112 linuxandroid \/dev\/sda1(bitrise) 194 28 xcode-10.3.x \/dev\/disk1s1 200 96 xcode-11.7.x \/dev\/disk1s5 200 54 xcode-11.6.x \/dev\/disk1s5 200 62 xcode-12.0.x \/dev\/disk1s5 200 70 xcode-12.1.x \/dev\/disk1s5 200 57 xcode-12.2.x \/dev\/disk1s5 200 60 xcode-12.3.x \/dev\/disk1s5 200 35 xcode-12.4.x \/dev\/disk1s5 200 53 xcode-12.5.x \/dev\/disk1s5s1 200 39 xcode-13.0.x \/dev\/disk1s5s1 200 119 xcode-edge \/dev\/disk1s5s1 200 39 " });
this.add({id:96, 
title:"Freeing up storage space on build machines", 
body:" freeing storage space build machines to free additional disk space bitrise build machines, delete unneeded tools resources using script step build. if need additional disk space bitrise build machines, delete tools resources use. you just use script step start build. java.io.ioexception: no space left device if java.io.ioexception: no space left device , error build , try free additional space with method - error indicates there's available build machine. check stack's system report github . the system report includes list pre-installed tools version stack. find tools don't need build. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step beginning workflow. in script content input step, add necessary commands uninstall tools. uninstalling unneeded tools if app doesn't need android sdk tools, remove with following commands script step: sudo rm -rf \/usr\/local\/share\/android-sdk \nsudo \/opt\/android-ndk you delete ios simulators don't use: sudo rm -rf ~\/library\/developer\/coresimulator\/profiles\/runtimes\/ios\\\\ 10.3.simruntime\/ " });
this.add({id:97, 
title:"Customizing build machines", 
body:" customizing build machines you macos base box setup guide automation scripts use building virtual machine boxes os x box bootstrap repository . the repository includes script use preparing base virtual machine images. for linux machines, check bitrise base docker image’s repository . system reports you check current configurations see tools versions preinstalled stacks . these reports generated scripts, linked first lines report. the repositories used virtual machine preparation open source, pull requests welcome. if you’d like tool pre-installed machines, feel free add changes included related stack(s) time stack updated. " });
this.add({id:98, 
title:"Build stacks", 
body:" build stacks the bitrise build stack defines virtual machine version used run builds. main types macos stacks android & docker stacks. the build stack indicates virtual machine version use run build. the main stack types are: macos stacks : these stacks run macos operating includes multiple xcode versions. ideal building ios apps . they android tools installed want use build cross-platform app. the android & docker stack: these stacks run linux operating docker environment. they android tools installed ideal building native apps. free disk space each stack 100 gb free disk space. you check stack's exact available space relevant report page: bitrise stack reports . each build runs virtual machine rolled saved state, “base box” finished. this way builds protected changes others previous builds use stable environment define build workflow, state persists builds. passwordless sudo enabled the user account used builds configured passwordless sudo enabled. this way able install extra things need builds automation. if tool preinstalled stack choice, - see guide. after adding app bitrise select appropriate stack it. you change any time stacks & machines tab workflow editor. after selecting stack want use, you’ll see short description with additional link learn specific (for example, tools preinstalled, versions, selected stack). stack status types type description stable generally available expected supported foreseeable future. updated update stack’s primary tool available. example: xcode 7.3.1 was released, 7.3 stack updated instead 7.3(.0). stack prepare types type description pre-booted if stack available pre-booted, there’s pre-booted machines with configuration, build start right away, waiting environment boot. in case machine on-demand configuration. on-demand if stack available on-demand configuration there’s (available) pre-booted stack, create virtual machine selected build starts. this means preparing environment state related created & booted. for macos boot process usually takes 1 - 1.5 minutes. the prepare time (of course) counted time, won’t affect how long run. " });
this.add({id:99, 
title:"Stack update policy", 
body:" stack update policy bitrise stacks updated week: completely rebuilt others certain cache archives updated. bitrise stacks include important tools mobile development pre-installed ready use. our goal make workflows simple builds fast efficient. these change continuously: old versions become deprecated unsupported new released with features breaking changes. stacks bitrise.io updated regularly. the updates contain following kinds changes: tool upgrade: an installed tool upgraded latest version (for example, git cli 2.9.1 2.9.5). tool addition: a new tool added (for example, latest android emulator image preinstalled version released). tool removal: a tool version removed reaches end-of-life poses security risk, making default (for example, ruby 2.7 removed, 3.0 new default). dependency mirror updates: on xcode stacks, local caches homebrew cocoapods updated with latest snapshot. platform changes: changes major components, like xcode macos stacks, os versions, android sdk. using previous version stack updating stack new version cause problems with builds. to help ease transition, use previous 2-3 days update: using the previous version of a stack . for information tools available different stacks, check relevant guide: preinstalled tools on bitrise stacks . " });
this.add({id:100, 
title:"Xcode stack updates", 
body:" xcode stack updates you select macos stacks based xcode version need. under hood, vm image contains multiple versions installed requested activated runtime workflow starts. as rule thumb, xcode minor versions major version share vm image, exceptions based compatibility issues considerations. versioning when talking versions, use semver terminology, regardless how various tools define versions. stacks lifecycle different states: edge, stable, frozen removed. edge : these stacks previewing upcoming versions changes. they updated in-place regularly, include latest stable release xcode, beta xcode (if available), version pre-installed tools, dependency manager cache updates. regular weekly updates add remove upgrade os. backwards compatibility guaranteed edge stack. run builds preview tool changes (such ruby 3.2 default) access pre-release 15 beta). stable : these stacks updated with xcode patch versions, dependency manager cache updates critical security fixes. note specific stack stable state (for example, 14.3) receive major update new edge released (a hypothetical 14.4 beta) tool versions current become stable. for maximum reliability reproducible builds, recommend pinning exact workflows instead relying defaults ruby version). frozen : these stacks longer updated flagged removal accordance with stack deprecation removal policy . the stack available yourbuilds see final removal date ui. preinstalled tools updated, so it’s responsibility with bugfixes security patches. removed : these stacks longer available use. dependency manager cache updates homebrew cocoapods dependency mirrors updated frequently (usually week) xcode stacks. these mirror updates change preinstalled tool versions, updating package manager caches faster dependency installs. edge stacks receive package upgrades, meaning homebrew packages updated latest versions. " });
this.add({id:101, 
title:"State transitions for Xcode stacks", 
body:" state transitions xcode stacks during lifecycle stack transition states triggered new xcode macos releases. stacks follows: edge stable. stable frozen. frozen removed. " });
this.add({id:102, 
title:"Edge stack updates", 
body:" edge stack updates edge stacks provide way preview test upcoming changes. xcode beta versions become available final releases new stable stacks. change when: the first beta version new major xcode released. the first beta version new minor xcode released. a new version xcode beta released. when xcode minor version released beta, available edge stack. other stacks transition stable beta question ga version. first beta version new major xcode in example: the current latest xcode version 15.3. a new beta version major xcode released: 16.0 1. once new beta version released, update stacks: the new xcode release available bitrise edge stack. in example, 16.0 beta 1 current edge stacks phased out, users automatically migrated new stack. this happens days xcode release. in example, means phasing 15.x stacks. stable stacks affected point. first beta version new minor xcode in example: the current latest xcode version 15.2. a new beta version minor xcode released: 15.3 1. once new beta version released, update stacks: the new xcode release available edge stack. in example, 15.3 beta 1 stable stacks affected point. a new beta version xcode in example: the current latest xcode version 16.0 beta 1. a new beta version released: 16.0 2. once new beta version released, update stacks: xcode 16.0 beta 2 replaces 1 edge stack. stable stacks affected point. " });
this.add({id:103, 
title:"Stable stack updates", 
body:" stable stack updates stable stacks change than edge want avoid unexpected breaking changes stacks. existing stable stacks change when: a new major xcode version released. a new minor xcode version released. a new major xcode version in example: the current latest xcode version 15.3.0. a new major xcode version released: 16.0. when new major version released, update stacks: new stable stack: xcode 16.0 available bitrise new stack. existing stable stacks: new tool versions potentially breaking changes land stacks. oldest stable stacks become frozen. in example, xcode 14.x frozen, available building. tool versions changing stacks: latest state frozen. old frozen stacks removed: example, xcode 13.x removed. the remaining users migrated newer stacks. changes previous stable stacks we update previous stable stacks new xcode version released number reasons: most preinstalled runtimes tools eventually reach end-of-life according support policy, longer receive bugfixes security patches. we need periodically upgrade default version majority users newer version. there breaking changes make enable new features user requests. while breaking changes frustrating, think doing year predictable schedule (tied major xcode release) good compromise. we trying make switch smoother by: offering edge stacks preview changes. while stack tied latest xcode beta, offer stable xcodes, so try tooling changes doing upgrade project. communicating changes advance usual communication channels. for example, blog post . offering temporary rollback option stack update . a new minor xcode version in example: the current latest xcode version 15.2. a new minor xcode version released: 15.3. when new minor version released, update stacks: new stable stack: xcode 15.3 available bitrise stack. xcode 15.3 edge stack updated with final version. " });
this.add({id:104, 
title:"macOS releases", 
body:" macos releases the exact macos version highlighted stack report pages . when new major macos version released, upgrade edge stacks os internal testing period. as general rule, don’t upgrade macos stable stacks avoid unexpected build failures. we wait future xcode release starts requiring new os version (for example, 15.0, 15.1 15.2 compatible with ventura, 15.3 requires sonoma). once happens, stack variant based major version, older remain version. while new major os available stable stack, recommend testing edge stacks. we looking feedback, including edge cases performance regressions. " });
this.add({id:105, 
title:"Events not triggering a state transition", 
body:" events triggering state transition not xcode releases trigger transition. for example, beta minor version edge stable stack transition: new simply replaces old one. patch instead, stacks updated place with version. " });
this.add({id:106, 
title:"Simulator runtimes on Xcode stacks", 
body:" simulator runtimes xcode stacks you list preinstalled tools, including simulator runtimes stacks stack reports pages . you expect following simulator runtimes installed: the matching runtime versions given xcode version: ios, watchos, tvos visionos prompts download first launch. for ios, install additional versions: previous major versions, latest minor version installed. for watchos, install previous major release’s latest minor version. for example, selecting xcode 15.0 stack, expect: ios 17.0: matching runtime xcode. ios 16.4: latest minor release previous major version. ios 15.5: latest minor release second-previous major version. watchos 10.0: matching runtime xcode. watchos 9.4: latest minor release previous major version. tvos 17.0: matching runtime xcode. visionos 1.0: matching runtime xcode " });
this.add({id:107, 
title:"Linux stack updates", 
body:" linux stack updates linux stacks bitrise based ubuntu lts releases . each bitrise stack based ubuntu lts version gets upgraded another. instead, release new stacks sunset older ones time. " });
this.add({id:108, 
title:"Using the previous version of a stack", 
body:" using previous version stack not available dedicated build environments this feature available enterprise plan with dedicated build environment, user controls rollout stack updates plans. we regularly update bitrise stacks based user requests external tooling changes. these updates potentially introduce breaking changes, despite efforts avoid those. for cases, provide temporary option use previous version given stack days release new version. this meant temporary mechanism only. because infrastructure reasons, can't previous release available forever. usually, version removed days successful release. once previous version unavailable, new builds run latest feature enabled. if previous version available given stack time, switch inactive feature can't turned on. any build triggered run current stack. to use previous version stack: workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go stacks & machines tab. find stack want configure: default workflow-specific stacks. under machine type chosen stack, toggle use previous version switch. this modifies bitrise.yml file: adds previous version stack meta block. if store bitrise.yml file repository , need specify exact rollback version meta object. you use toggle workflow editor turn feature modify configuration file stored bitrise: edit bitrise.yml repository. unavailable versions if specified version available, workflow editor display warning. any build triggered previous stack unavailable run current stable version stack. find meta block bitrise.yml file. add stack_rollback_version field with given version string. finding previous version number to previous version string, open older build, switch details & add-ons tab, look stack image version field. meta:\n stack: osx-xcode-15.0.x\n machine_type_id: g2-m1.8core\n stack_rollback_version: 2-16-2 " });
this.add({id:109, 
title:"Changelog", 
body:" changelog march 2024 new : define happens edge stack phased favor newer edge stack. removed : when new xcode edge stack released, longer brings tooling changes stable stacks. changed : new, simpler simulator runtime policy. the number older ios major versions installed, latest minor version installed each. " });
this.add({id:110, 
title:"Stack deprecation and removal policy", 
body:" stack deprecation removal policy on bitrise, android stacks supported years; xcode deprecated gradually new versions released. we don't stacks forever: aim provide with latest tools help build best app can. however, don't expect rework build configuration time stack update comes out: using reliable older stacks long time. some older stacks frozen new major version xcode released. when stack frozen, using it, longer any updates, point, strongly recommend switching newer, active stack. after stacks frozen year, removed major version xcode released. " });
this.add({id:111, 
title:"Maintaining Xcode stacks", 
body:" maintaining xcode stacks we offer wide variety xcode stacks order make sure need immediately switch new version comes out. our policy follows: keep recent major versions xcode. keep recent minor versions major version xcode. we base policy apple's current release cadence: first beta june, general availability september. the life cycle major xcode version stacks 36 months. for 24 months, stack active maintained according update policy. after 24 months, stack frozen 12 months longer receive updates. at point, strongly recommend migrating active stack. after end 36th month, stacks major xcode version removed. maintaining xcode stacks when xcode version 15.2.x released, keep: all latest patch releases recent minor versions xcode 15: 15.2 15.1 xcode 15.0 removed. the latest versions previous xcode major versions: xcode 14.3 xcode 14.2 xcode 13.4 (frozen) xcode 13.3 (frozen) in cases, minimum weeks' notice provided removal stacks. you see upcoming stack deprecations page . we recommend subscribing rss updates important announcements stacks. " });
this.add({id:112, 
title:"Deprecating Linux stacks", 
body:" deprecating linux stacks a linux stack supported years, roughly sync with ubuntu lts (long term support) releases. when previous linux stack reaches end maintenance, deprecate earmark removal. at point longer select apps. but apps using stacks in cases, minimum weeks' notice provided removal stacks. you see upcoming stack deprecations page . we recommend subscribing rss updates important announcements stacks. " });
this.add({id:113, 
title:"Preinstalled tools on Bitrise stacks", 
body:" preinstalled tools bitrise stacks every bitrise stack comes with large number preinstalled tools applications. check list reports repository. every bitrise stack comes with large number preinstalled tools applications make sure build process apps smooth fast possible. every time create update stack publish report well. the reports include list preinstalled tools version stack. we update stacks regularly: macos linux updated regularly provide latest installed tool versions . you available stack’s stack report dedicated page: bitrise stack reports . installing tools build if can't tool need build machine, install itself: installing tools during a build . you concrete examples knowledge base: installing specific fastlane version installing specific npm version " });
this.add({id:114, 
title:"The Android\/Linux\/Docker environment", 
body:" the android\/linux\/docker environment bitrise's android stacks run linux-based virtual machines created docker images. you image files github. for linux-based stacks, use standard docker images, hosted docker hub . you available stacks, called ubuntu android & docker , stack reports . pre-installed tools all stacks large number pre-installed tools available: preinstalled tools on bitrise stacks every build runs new vm, just container. the vm destroyed right build. this allows grant control docker environment. when build starts docker-based stack, volume mount \/var\/run\/docker.sock socket container (similar calling docker run -v \/var\/run\/docker.sock:\/var\/run\/docker.sock ... . you description access granting method ). the docker binary installed inside base docker image docker started migrate single-binary solution dynamically loaded components, simply sharing docker binary sufficient anymore. we install docker images so don’t use image, base image images. this means access docker container, use tools docker, like docker-compose . you can, example, configure run tests automations website projects using docker-compose . you docker info , docker build , docker run , docker login , docker push exactly how machine. shared volumes if want run docker build share volumes, note volumes shared with base docker container (the running in). this how docker handles volume sharing. everything \/bitrise mounted volume, path guaranteed work with --volume mapping. it means use standard paths relative mount volumes, it’ll work expected, default source code directory located inside \/bitrise (by default it’s \/bitrise\/src docker images). what won’t work, however, change source code directory located outside \/bitrise , want mount folder with absolute path outside \/bitrise . " });
this.add({id:115, 
title:"Managing Java versions", 
body:" managing java versions all bitrise virtual machines java 8, 11, 17 pre-installed. the default version switch versions any time. by default, bitrise stack comes with java 11 pre-installed ready use. if switch version, build use 11. in addition 11, java versions pre-installed stacks: java 8 java 17 you switch versions any time. install different java version (for example, 14). potential issues with java versions using new java version, switching versions build cause unexpected issues: java_home isn't set correctly switching java 11 macos-based stacks using android sdk tools with java 11 java.lang.classnotfoundexception " });
this.add({id:116, 
title:"Setting Java version with the Set Java version Step", 
body:" setting java version with set step each bitrise stack different java versions pre-installed: 8, 11 (the default version), 17. you easily switch with set java version step . the step allows set global java version virtual machine runs build. installing new java version this step install any java version. it switch versions pre-installed stacks. if want version available stacks default, check installing a java version on an android stack . add set java version step workflow . we recommend setting first step workflow. find java version set globally build input. set version need. the options are: 8 11 (the default value) 17 yaml example in example, we're setting java version 17 bitrise.yml file. primary:\n steps:\n - set-java-version@1:\n inputs:\n set_java_version: '17' " });
this.add({id:117, 
title:"Installing a Java version on an Android stack", 
body:" installing java version android stack if need java jdk version installed android stacks, follow guide. the example install java\/jdk 1.14 with script step. you adapt version choice. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step workflow. in script content input step, add script: the example installs java 14 feel free replace openjdk-14-jdk java-1.14.0-openjdk-amd64 parts with version choice. #!\/bin\/bash\nset -ex\n \nadd-apt-repository -y ppa:openjdk-r\/ppa\napt-get update -qq\napt-get install openjdk-14-jdk\nupdate-java-alternatives -s \/usr\/lib\/jvm\/java-1.14.0-openjdk-amd64\necho \"done\" start new build. this script step first workflow, does depend else. " });
this.add({id:118, 
title:"Code security", 
body:" code security every bitrise build runs new virtual machine access previous builds. we store source code set how accessed. to guarantee security code, bitrise build runs own, clean virtual machine discard finishes, erasing file uses change make build. this true android & docker stacks , use docker containers run build. the build itself gets virtual machine container started, used environment in short, manage environment, isolation - that’s ensured using machines this way builds protected changes others previous builds, access code use stable environment define build workflow . every build completed isolated environment, unrelated any previous parallelly running builds. " });
this.add({id:119, 
title:"Source code", 
body:" source code we don’t store source code. the code accessed build machines (virtual machines) way define bitrise configuration . if don’t git clone step step accesses git repository configuration, source code won’t touched all. at end build virtual machine destroyed. as such, any change lost unless commit changes push remote repository. " });
this.add({id:120, 
title:"Code signing and other files", 
body:" code signing files the files upload code signing tab workflow editor stored amazon s3 way it’s accessible web servers. the required credentials stored any database, available web servers’ environment. build servers can’t access files directly either. when build starts, server generates read-only, time limited url files, using amazon s3 pre-signed urls . " });
this.add({id:121, 
title:"Passwords", 
body:" passwords passwords stored hashed, encrypted form. we encrypting passwords with bcrypt algorithm , using multiple stretches. " });
this.add({id:122, 
title:"Customizable enterprise build platforms", 
body:" customizable enterprise build platforms bitrise offers types custom build platforms enterprises: dedicated firewall private user's environment. using custom enterprise build platform means running bitrise builds virtual machines (vm) dedicated specifically configured needs. with private cloud, complete control how run. bitrise offers types custom build platforms enterprises: dedicated build platform: set dedicated machines bitrise firewall. these public ip address any bitrise build machine reserved exclusive use. private build platform: solution includes firewall, storage capacity, computing environment. this allows create custom virtualization configuration, site-to-site vpn. with latter, data leave network separately connect vpn with build . the private build platform advanced set-up with plenty configuration options. to learn details, contact ! check important differences dedicated private build platforms: dedicated vs private build platform available service dedicated build platform private build platform selecting resources available virtual machines yes yes dedicated customer success engineer, expert mobile ci\/cd. yes yes initial onboarding assistance first month with weekly calls. yes yes continued ci\/cd best practices mentoring with monthly check-ins bitrise account managers customer success engineers. yes yes weekly infrastructure maintenance includes licenses virtualization, orchestration, data storage. yes yes private network with dedicated firewall ip addresses - yes management dashboard access (vsphere google cloud platform) - yes " });
this.add({id:123, 
title:"Using your own Docker image", 
body:" using docker image you use docker image bitrise, run custom commands workflow. use hub dockerfile. docker hub rate limits from july 15, 2024, rate limiting apply downloads docker hub. if pull image hub authentication bitrise build linux machines, run issues limiting. bitrise mirroring popular public docker images, avoid potential issues with rate limiting, either: authenticate docker image pulling requests hub. for details docker's policy, refer docker hub rate limit . switch docker registry store images. on bitrise, single build runs own, separate virtual machine destroyed end build. android stacks , use docker purpose. our stacks pre-installed images custom image, run commands workflow. there ways configuration bitrise: run docker commands build. to so, use script step . set custom image workflow editor . no docker macos stacks docker isn't installed any macos-based stacks; guides related apply linux-based stacks. we recommend run docker commands with script step not change base environment docker image stack tab unless really to! running docker commands build flexible provides overall higher level control. github sample repository you sample repository github , configured run mac\/linux using bitrise cli . " });
this.add({id:124, 
title:"Running docker commands with a Script Step", 
body:" running docker commands with script step the recommended way using custom docker configuration locally bitrise.io , add script step workflow run docker commands. you use authenticate service hub selected image. we provide examples how run docker commands using script step: " });
this.add({id:125, 
title:"Running docker hello-world", 
body:" running docker hello-world the official hello-world docker image hosted hub. if wish use any images hub, authenticate first. in example, we’re following official getting started guide run hello-world docker image. in example bitrise.yml file, see simple build configuration run image: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n git-clone@3.4.1: {}\n script@1:\n title: docker run hello-world\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n\n login -u $dockerhub_user -p $dockerhub_token\n hello-world " });
this.add({id:126, 
title:"Building and running a Dockerfile", 
body:" building running dockerfile you use dockerfile bitrise repository define docker environment: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n git-clone@3.4.1: {}\n script@1:\n title: docker run\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n\n build -t bitrise-minimal-sample .\n run --rm this workflow will: git clone repository. run docker build -t bitrise-minimal-sample . docker run --rm bitrise-minimal-sample repository’s root. if dockerfile like root repository: from alpine:3.3\n\ncmd cat \/etc\/alpine-release the output look like this: +------------------------------------------------------------------------------+\n| (2) docker run hello-world |\n+------------------------------------------------------------------------------+\n| id: script |\n| version: 1.1.3 collection: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git toolkit: bash time: 2016-11-21t14:28:23z |\n+ build -t bitrise-minimal-sample .\nsending context docker daemon 69.12 kb\n\nstep 1 : from alpine:3.3\n3.3: pulling library\/alpine\n985c5f84712b: fs layer\n985c5f84712b: verifying checksum\n985c5f84712b: download complete\n985c5f84712b: pull complete\ndigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nstatus: downloaded newer image alpine:3.3\n ---> 6c2aa2137d97\nstep 2 cmd cat \/etc\/alpine-release\n running 507cfb961cc7\n 02a0da3ac697\nremoving intermediate container 507cfb961cc7\nsuccessfully built 02a0da3ac697\n+ --rm bitrise-minimal-sample\n3.3.3\n| |\n+---+---------------------------------------------------------------+----------+\n| ✓ | 4.24 sec |\n+---+---------------------------------------------------------------+----------+ " });
this.add({id:127, 
title:"Using docker-compose", 
body:" using docker-compose you run docker image file using docker-compose command. with compose, configure application’s services start with single command. for example, set docker-compose.yml like repository root (where dockerfile is): version: '2'\nservices:\n sample-app:\n build: . now run services with single docker-compose script step: - script@1.1.3:\n title: docker run\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n docker-compose run --rm sample-app docker compose build run image automatically. you don’t specify -t tag services used docker-compose tag image automatically. " });
this.add({id:128, 
title:"Using a custom Docker image from Docker Hub", 
body:" using custom docker image hub you use bitrise with docker image pulled hub, see running docker hello-world example. however, free plan anonymous users, docker hub allows limited number image pulls. if set workflow editor, authentication performed: pull user bitrise public ip address. with users going option, rate limit mean wouldn’t able start builds. the workaround simple: need use script step authenticate with docker hub account, pull image hub. to so: create personal access token docker hub. this used authenticate instead password. on bitrise, create secret environment variables : docker hub username personal access token. in examples, we’ll use dockerhub_user docker hub username dockerhub_token . use docker login command script step authenticate, with secret env vars arguments: - script@1.1.3: \n inputs: content: | docker login -u $dockerhub_user -p $dockerhub_token\n use docker run command script step run chosen docker image. in example, it’s docker’s official hello-world image. you just replace hello-world with any image want use docker hub. - script@1.1.3: \n inputs: content: | docker login -u $dockerhub_user -p $dockerhub_token\n run hello-world " });
this.add({id:129, 
title:"Setting a custom Docker image in the Workflow Editor", 
body:" setting custom docker image workflow editor in workflow editor bitrise.io, option set path custom docker image. if want run build custom docker environment, strongly recommend basing image base images. our images tool pre-installed, standard bitrise directories created, environments (such $bitrise_deploy_dir ) set, pre-cached build virtual machines. however, decide create docker image read guide, start finish. custom android docker image creating maintaining android docker image quite time consuming! if need install couple additional tools, that, example, with script step instead! for information, see install any additional tool guide. you use android docker image really to! using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub" });
this.add({id:130, 
title:"Creating your own image from a Bitrise image", 
body:" creating image bitrise we different docker image types available. you base any these, depending needs. using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub bitrise docker image types image type description github link quay.io link bitrise base image the bare minimum bitrise image with specific tools installed. https:\/\/github.com\/bitrise-docker\/bitrise-base https:\/\/quay.io\/repository\/bitriseio\/bitrise-base android base image bare-minimum base image with android-specific tools environment. https:\/\/github.com\/bitrise-docker\/android https:\/\/quay.io\/repository\/bitriseio\/android android ndk image built android base image with pre-installed ndk environment. https:\/\/github.com\/bitrise-docker\/android-ndk https:\/\/quay.io\/repository\/bitriseio\/android-ndk android ndk lts image lts “pin” android ndk docker image. https:\/\/github.com\/bitrise-docker\/android-ndk-lts https:\/\/quay.io\/repository\/bitriseio\/android-ndk-lts to base image available images, specify dockerfile with from instruction quay.io id image. in example, we’ll use latest version bitrise base image: from quay.io\/bitriseio\/docker-bitrise-base:latest you use quay.io id image want base image. for example, quay.io\/bitriseio\/android , quay.io\/bitriseio\/android-ndk , quay.io\/bitriseio\/android-ndk-lts , quay.io\/bitriseio\/bitrise-base . don’t use alpha images builds for docker image quay.io , alpha tagged version too. the alpha ones frequently rebuilt not precached on bitrise.io , so avoid those. " });
this.add({id:131, 
title:"Using your created Docker image in a build", 
body:" using created docker image build you set docker image workflow editor pulled with docker pull command . to so: using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub go workflow editor. click stack tab. copy paste id app. for example, quay.io\/bitriseio\/bitrise-base . click save upper-right corner. now able use image run builds bitrise.io . " });
this.add({id:132, 
title:"Running your build locally in Docker", 
body:" running build locally docker you run bitrise build docker machines: need docker, cli, image. docker hub rate limit from july 15, 2024, rate limiting apply downloads docker hub. if pull image hub authentication bitrise build linux machines, run issues limiting. bitrise mirroring popular public docker images, avoid potential issues with rate limiting, either: authenticate docker image pulling requests hub. for details docker's policy, refer docker hub rate limit . switch docker registry store images. to able run linux stack builds locally, you’ll need docker : for linux, just follow official install instructions . for mac, use docker easiest way started. in guide, we’ll use bitrise android sample project . large images ahead the official bitrise docker images quite large include wide variety preinstalled tools. you’ll need 20-25 gb free disc space! if you’re familiar with bitrise cli , try first. you don’t master cli, know bitrise run workflow does, tutorial. " });
this.add({id:133, 
title:"Downloading docker images", 
body:" downloading docker images install docker . make sure bitrise.yml repository. you don’t commit it, file exist repository’s root directory. cd repository’s directory mac\/linux. pull image registry: docker pull bitriseio\/android-20.04:latest\n run following command: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android-20.04:latest bitrise workflow` if want just jump container experiment inside, replace --rm quay.io\/bitriseio\/android-20.04:latest bitrise run workflow with -it quay.io\/bitriseio\/android-20.04:latest bash start interactive bash shell inside container. for example: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android-20.04:latest bash\n in general, project android don’t use ndk, preserve precious disk space, quay.io\/bitriseio\/android docker image. you official bitrise images quay page . in example, we’re using quay.io\/bitriseio\/android one. download docker images quay : docker pull bitriseio\/android-20.04:latest`\n be aware quite bit time, image 10 gb. if download fails hangs, restart any time running command again. download bitrise build configuration ( bitrise.yml ) root directory repository. you download project’s bitrise.yml bitrise.yml tab workflow editor bitrise.io . in terminal \/ command line ( cd ) root directory repository. check bitrise.yml location. if try reproduce issue, git clone repository new directory, so directory contain files committed repository! it’s frequent reproducibility issue try run commands normal working directory, likely repository, example, .gitignore . " });
this.add({id:134, 
title:"Running the build", 
body:" running build run build with following command: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android:latest bitrise workflow --rm quay.io\/bitriseio\/android:latest bitrise run workflow with -it quay.io\/bitriseio\/android:latest bash start interactive bash shell inside container. for example: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android:latest bash`. this command share current directory (the repository) shared volume with docker container, make available inside container path \/bitrise\/src . after this, run bitrise run workflow , run workflow inside container. to exit container, just exit . don’t forget replace workflow with actual id workflow bitrise.yml , with like primary ! the --env ci=false flag sets environment variable ci false - make bitrise cli skip certain steps sense run ci environment. for example, git clone step - code, so there’s need git clone inside docker container (that’s shared code directory --volume ). the --rm flag tells docker discard container docker run command finishes. this means run again, thing persist docker run .. commands files stored shared --volume (in repository’s directory). every file generated temp any location discarded \/ won’t kept. if want debug container failed build, feel free remove --rm flag, check docker tutorial how connect existing docker container. please note simply running command use container, create new one! the --privileged flag allows access control host docker container, so use unless trust image use! this required allowing vpns work (to change network configs host), example. the --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" flag exposes docker socket host container - required want run containers container, any docker command build \/ inside container. " });
this.add({id:90, 
title:"Build machines", 
body:" build machines bitrise offers xcode linux stacks. each stack large number pre-installed tools. both linux xcode stacks available different build machine types. each type offers options with varying computing power, depending subscription plan . you configure default machine type app set workflow -specific machine types. you selecting stacks app: setting the stack for your builds . changing machine types using api you change build machine types apps owned single user workspace using api: changing machine types in all apps at the same time . each bitrise build machine ip address range: allowlist addresses able access machines from, example, private cloud: configuring network access with ip allowlists for information build code security, see code security . " });
this.add({id:91, 
title:"Configuring network access with IP allowlists", 
body:" configuring network access with ip allowlists you access bitrise virtual machines private network firewall. to so, allowlist build machine ip addresses network. our datacenters set public static ip addresses, with virtual machines having internal subnets addresses. depending company security policy, need allowlist addresses able access build machine: ip address ranges for the bitrise build machines . similarly, bitrise background workers powering app.bitrise.io ui related control plane, configuration management, signaling services accessible set static ip addresses. allowlisting addresses ensure receive build status updates bitrise access bitrise.yml file: ip address ranges for bitrise backend workers app . " });
this.add({id:92, 
title:"IP address ranges for the Bitrise build machines", 
body:" ip address ranges bitrise build machines for users, host repositories cloud-based service providers, need any network configuration able use bitrise. all permission access repository that, ssh key access token enough. however, company security policy allow unknown unauthorized ip addresses communicate with servers code stored - datacenter private cloud. in case, bitrise won’t work unless relevant added list. you see ip addresses following ranges source bitrise build machines reach services like git download code, test backend services, any run outside required reached ci workflow. allowlist entire subnet if provided public ip address subnet, need allow entire subnet network! for example, 208.52.166.128\/28 means addresses 208.52.166.128 208.52.166.143 (208.52.166.128, 208.52.166.129, 208.52.166.130, so on, way including 208.52.166.143) allowlisted. external internal ip address ranges build machines stack type public ip xcode stacks 74.122.200.0\/ 22 208.52.166.154\/32 208.52.166.128\/ 28 207.254.0.248\/ 29 207.254.0.208\/ 28 207.254.34.148\/32 207.254.33.176\/ 28 linux\/docker stacks 74.122.200.0\/ 22 104.197.15.74\/32 34.123.172.192\/32 34.125.50.224\/32 34.125.82.130\/32 34.134.193.138\/32 34.138.187.10\/32 34.150.152.190\/32 34.162.185.129\/32 34.162.202.37\/32 34.162.229.32\/32 34.162.29.153\/32 34.162.88.79\/32 34.23.207.105\/32 34.85.139.176\/32 34.85.240.93\/32 34.86.56.118\/32 35.202.121.43\/32 35.225.44.167\/32 35.231.56.118\/32 35.237.165.17\/32 35.243.148.182\/32 35.245.56.67\/32 " });
this.add({id:93, 
title:"IP address ranges for Bitrise backend workers", 
body:" ip address ranges bitrise backend workers bitrise backend workers operating firewalls nat gateways. there use cases need reach services. these addresses relevant use self-hosted git services store bitrise.yml file repository. in way bitrise can, example, access bitrise.yml file, send build status updates commits pull requests self-hosted repository. static ip addresses bitrise website background workers ip address ranges 74.122.200.0\/ 22 35.232.76.43 34.68.119.18 34.135.186.58 " });
this.add({id:94, 
title:"Document changelog", 
body:" document changelog april 2024 added 74.122.200.0\/22 range ip ranges build machines backend workers, utilize new range 20th may, 2024. october 2022 significantly increased linux\/docker stacks ip range. " });
this.add({id:95, 
title:"Storage space on build machines", 
body:" storage space build machines bitrise virtual machines different amounts free space available, depending type stack. our virtual machines different amounts free space available, depending type stack. the table summarizes data - mind numbers subject change, versions pre-installed tools resources varying machines. storage space build machines stack name filesystem size (gb) free (gb) linuxandroid \/dev\/loop0 160 112 linuxandroid \/dev\/sda1(bitrise) 194 28 xcode-10.3.x \/dev\/disk1s1 200 96 xcode-11.7.x \/dev\/disk1s5 200 54 xcode-11.6.x \/dev\/disk1s5 200 62 xcode-12.0.x \/dev\/disk1s5 200 70 xcode-12.1.x \/dev\/disk1s5 200 57 xcode-12.2.x \/dev\/disk1s5 200 60 xcode-12.3.x \/dev\/disk1s5 200 35 xcode-12.4.x \/dev\/disk1s5 200 53 xcode-12.5.x \/dev\/disk1s5s1 200 39 xcode-13.0.x \/dev\/disk1s5s1 200 119 xcode-edge \/dev\/disk1s5s1 200 39 " });
this.add({id:96, 
title:"Freeing up storage space on build machines", 
body:" freeing storage space build machines to free additional disk space bitrise build machines, delete unneeded tools resources using script step build. if need additional disk space bitrise build machines, delete tools resources use. you just use script step start build. java.io.ioexception: no space left device if java.io.ioexception: no space left device , error build , try free additional space with method - error indicates there's available build machine. check stack's system report github . the system report includes list pre-installed tools version stack. find tools don't need build. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step beginning workflow. in script content input step, add necessary commands uninstall tools. uninstalling unneeded tools if app doesn't need android sdk tools, remove with following commands script step: sudo rm -rf \/usr\/local\/share\/android-sdk \nsudo \/opt\/android-ndk you delete ios simulators don't use: sudo rm -rf ~\/library\/developer\/coresimulator\/profiles\/runtimes\/ios\\\\ 10.3.simruntime\/ " });
this.add({id:97, 
title:"Customizing build machines", 
body:" customizing build machines you macos base box setup guide automation scripts use building virtual machine boxes os x box bootstrap repository . the repository includes script use preparing base virtual machine images. for linux machines, check bitrise base docker image’s repository . system reports you check current configurations see tools versions preinstalled stacks . these reports generated scripts, linked first lines report. the repositories used virtual machine preparation open source, pull requests welcome. if you’d like tool pre-installed machines, feel free add changes included related stack(s) time stack updated. " });
this.add({id:91, 
title:"Configuring network access with IP allowlists", 
body:" configuring network access with ip allowlists you access bitrise virtual machines private network firewall. to so, allowlist build machine ip addresses network. our datacenters set public static ip addresses, with virtual machines having internal subnets addresses. depending company security policy, need allowlist addresses able access build machine: ip address ranges for the bitrise build machines . similarly, bitrise background workers powering app.bitrise.io ui related control plane, configuration management, signaling services accessible set static ip addresses. allowlisting addresses ensure receive build status updates bitrise access bitrise.yml file: ip address ranges for bitrise backend workers app . " });
this.add({id:92, 
title:"IP address ranges for the Bitrise build machines", 
body:" ip address ranges bitrise build machines for users, host repositories cloud-based service providers, need any network configuration able use bitrise. all permission access repository that, ssh key access token enough. however, company security policy allow unknown unauthorized ip addresses communicate with servers code stored - datacenter private cloud. in case, bitrise won’t work unless relevant added list. you see ip addresses following ranges source bitrise build machines reach services like git download code, test backend services, any run outside required reached ci workflow. allowlist entire subnet if provided public ip address subnet, need allow entire subnet network! for example, 208.52.166.128\/28 means addresses 208.52.166.128 208.52.166.143 (208.52.166.128, 208.52.166.129, 208.52.166.130, so on, way including 208.52.166.143) allowlisted. external internal ip address ranges build machines stack type public ip xcode stacks 74.122.200.0\/ 22 208.52.166.154\/32 208.52.166.128\/ 28 207.254.0.248\/ 29 207.254.0.208\/ 28 207.254.34.148\/32 207.254.33.176\/ 28 linux\/docker stacks 74.122.200.0\/ 22 104.197.15.74\/32 34.123.172.192\/32 34.125.50.224\/32 34.125.82.130\/32 34.134.193.138\/32 34.138.187.10\/32 34.150.152.190\/32 34.162.185.129\/32 34.162.202.37\/32 34.162.229.32\/32 34.162.29.153\/32 34.162.88.79\/32 34.23.207.105\/32 34.85.139.176\/32 34.85.240.93\/32 34.86.56.118\/32 35.202.121.43\/32 35.225.44.167\/32 35.231.56.118\/32 35.237.165.17\/32 35.243.148.182\/32 35.245.56.67\/32 " });
this.add({id:93, 
title:"IP address ranges for Bitrise backend workers", 
body:" ip address ranges bitrise backend workers bitrise backend workers operating firewalls nat gateways. there use cases need reach services. these addresses relevant use self-hosted git services store bitrise.yml file repository. in way bitrise can, example, access bitrise.yml file, send build status updates commits pull requests self-hosted repository. static ip addresses bitrise website background workers ip address ranges 74.122.200.0\/ 22 35.232.76.43 34.68.119.18 34.135.186.58 " });
this.add({id:94, 
title:"Document changelog", 
body:" document changelog april 2024 added 74.122.200.0\/22 range ip ranges build machines backend workers, utilize new range 20th may, 2024. october 2022 significantly increased linux\/docker stacks ip range. " });
this.add({id:92, 
title:"IP address ranges for the Bitrise build machines", 
body:" ip address ranges bitrise build machines for users, host repositories cloud-based service providers, need any network configuration able use bitrise. all permission access repository that, ssh key access token enough. however, company security policy allow unknown unauthorized ip addresses communicate with servers code stored - datacenter private cloud. in case, bitrise won’t work unless relevant added list. you see ip addresses following ranges source bitrise build machines reach services like git download code, test backend services, any run outside required reached ci workflow. allowlist entire subnet if provided public ip address subnet, need allow entire subnet network! for example, 208.52.166.128\/28 means addresses 208.52.166.128 208.52.166.143 (208.52.166.128, 208.52.166.129, 208.52.166.130, so on, way including 208.52.166.143) allowlisted. external internal ip address ranges build machines stack type public ip xcode stacks 74.122.200.0\/ 22 208.52.166.154\/32 208.52.166.128\/ 28 207.254.0.248\/ 29 207.254.0.208\/ 28 207.254.34.148\/32 207.254.33.176\/ 28 linux\/docker stacks 74.122.200.0\/ 22 104.197.15.74\/32 34.123.172.192\/32 34.125.50.224\/32 34.125.82.130\/32 34.134.193.138\/32 34.138.187.10\/32 34.150.152.190\/32 34.162.185.129\/32 34.162.202.37\/32 34.162.229.32\/32 34.162.29.153\/32 34.162.88.79\/32 34.23.207.105\/32 34.85.139.176\/32 34.85.240.93\/32 34.86.56.118\/32 35.202.121.43\/32 35.225.44.167\/32 35.231.56.118\/32 35.237.165.17\/32 35.243.148.182\/32 35.245.56.67\/32 " });
this.add({id:93, 
title:"IP address ranges for Bitrise backend workers", 
body:" ip address ranges bitrise backend workers bitrise backend workers operating firewalls nat gateways. there use cases need reach services. these addresses relevant use self-hosted git services store bitrise.yml file repository. in way bitrise can, example, access bitrise.yml file, send build status updates commits pull requests self-hosted repository. static ip addresses bitrise website background workers ip address ranges 74.122.200.0\/ 22 35.232.76.43 34.68.119.18 34.135.186.58 " });
this.add({id:94, 
title:"Document changelog", 
body:" document changelog april 2024 added 74.122.200.0\/22 range ip ranges build machines backend workers, utilize new range 20th may, 2024. october 2022 significantly increased linux\/docker stacks ip range. " });
this.add({id:95, 
title:"Storage space on build machines", 
body:" storage space build machines bitrise virtual machines different amounts free space available, depending type stack. our virtual machines different amounts free space available, depending type stack. the table summarizes data - mind numbers subject change, versions pre-installed tools resources varying machines. storage space build machines stack name filesystem size (gb) free (gb) linuxandroid \/dev\/loop0 160 112 linuxandroid \/dev\/sda1(bitrise) 194 28 xcode-10.3.x \/dev\/disk1s1 200 96 xcode-11.7.x \/dev\/disk1s5 200 54 xcode-11.6.x \/dev\/disk1s5 200 62 xcode-12.0.x \/dev\/disk1s5 200 70 xcode-12.1.x \/dev\/disk1s5 200 57 xcode-12.2.x \/dev\/disk1s5 200 60 xcode-12.3.x \/dev\/disk1s5 200 35 xcode-12.4.x \/dev\/disk1s5 200 53 xcode-12.5.x \/dev\/disk1s5s1 200 39 xcode-13.0.x \/dev\/disk1s5s1 200 119 xcode-edge \/dev\/disk1s5s1 200 39 " });
this.add({id:96, 
title:"Freeing up storage space on build machines", 
body:" freeing storage space build machines to free additional disk space bitrise build machines, delete unneeded tools resources using script step build. if need additional disk space bitrise build machines, delete tools resources use. you just use script step start build. java.io.ioexception: no space left device if java.io.ioexception: no space left device , error build , try free additional space with method - error indicates there's available build machine. check stack's system report github . the system report includes list pre-installed tools version stack. find tools don't need build. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step beginning workflow. in script content input step, add necessary commands uninstall tools. uninstalling unneeded tools if app doesn't need android sdk tools, remove with following commands script step: sudo rm -rf \/usr\/local\/share\/android-sdk \nsudo \/opt\/android-ndk you delete ios simulators don't use: sudo rm -rf ~\/library\/developer\/coresimulator\/profiles\/runtimes\/ios\\\\ 10.3.simruntime\/ " });
this.add({id:97, 
title:"Customizing build machines", 
body:" customizing build machines you macos base box setup guide automation scripts use building virtual machine boxes os x box bootstrap repository . the repository includes script use preparing base virtual machine images. for linux machines, check bitrise base docker image’s repository . system reports you check current configurations see tools versions preinstalled stacks . these reports generated scripts, linked first lines report. the repositories used virtual machine preparation open source, pull requests welcome. if you’d like tool pre-installed machines, feel free add changes included related stack(s) time stack updated. " });
this.add({id:98, 
title:"Build stacks", 
body:" build stacks the bitrise build stack defines virtual machine version used run builds. main types macos stacks android & docker stacks. the build stack indicates virtual machine version use run build. the main stack types are: macos stacks : these stacks run macos operating includes multiple xcode versions. ideal building ios apps . they android tools installed want use build cross-platform app. the android & docker stack: these stacks run linux operating docker environment. they android tools installed ideal building native apps. free disk space each stack 100 gb free disk space. you check stack's exact available space relevant report page: bitrise stack reports . each build runs virtual machine rolled saved state, “base box” finished. this way builds protected changes others previous builds use stable environment define build workflow, state persists builds. passwordless sudo enabled the user account used builds configured passwordless sudo enabled. this way able install extra things need builds automation. if tool preinstalled stack choice, - see guide. after adding app bitrise select appropriate stack it. you change any time stacks & machines tab workflow editor. after selecting stack want use, you’ll see short description with additional link learn specific (for example, tools preinstalled, versions, selected stack). stack status types type description stable generally available expected supported foreseeable future. updated update stack’s primary tool available. example: xcode 7.3.1 was released, 7.3 stack updated instead 7.3(.0). stack prepare types type description pre-booted if stack available pre-booted, there’s pre-booted machines with configuration, build start right away, waiting environment boot. in case machine on-demand configuration. on-demand if stack available on-demand configuration there’s (available) pre-booted stack, create virtual machine selected build starts. this means preparing environment state related created & booted. for macos boot process usually takes 1 - 1.5 minutes. the prepare time (of course) counted time, won’t affect how long run. " });
this.add({id:99, 
title:"Stack update policy", 
body:" stack update policy bitrise stacks updated week: completely rebuilt others certain cache archives updated. bitrise stacks include important tools mobile development pre-installed ready use. our goal make workflows simple builds fast efficient. these change continuously: old versions become deprecated unsupported new released with features breaking changes. stacks bitrise.io updated regularly. the updates contain following kinds changes: tool upgrade: an installed tool upgraded latest version (for example, git cli 2.9.1 2.9.5). tool addition: a new tool added (for example, latest android emulator image preinstalled version released). tool removal: a tool version removed reaches end-of-life poses security risk, making default (for example, ruby 2.7 removed, 3.0 new default). dependency mirror updates: on xcode stacks, local caches homebrew cocoapods updated with latest snapshot. platform changes: changes major components, like xcode macos stacks, os versions, android sdk. using previous version stack updating stack new version cause problems with builds. to help ease transition, use previous 2-3 days update: using the previous version of a stack . for information tools available different stacks, check relevant guide: preinstalled tools on bitrise stacks . " });
this.add({id:100, 
title:"Xcode stack updates", 
body:" xcode stack updates you select macos stacks based xcode version need. under hood, vm image contains multiple versions installed requested activated runtime workflow starts. as rule thumb, xcode minor versions major version share vm image, exceptions based compatibility issues considerations. versioning when talking versions, use semver terminology, regardless how various tools define versions. stacks lifecycle different states: edge, stable, frozen removed. edge : these stacks previewing upcoming versions changes. they updated in-place regularly, include latest stable release xcode, beta xcode (if available), version pre-installed tools, dependency manager cache updates. regular weekly updates add remove upgrade os. backwards compatibility guaranteed edge stack. run builds preview tool changes (such ruby 3.2 default) access pre-release 15 beta). stable : these stacks updated with xcode patch versions, dependency manager cache updates critical security fixes. note specific stack stable state (for example, 14.3) receive major update new edge released (a hypothetical 14.4 beta) tool versions current become stable. for maximum reliability reproducible builds, recommend pinning exact workflows instead relying defaults ruby version). frozen : these stacks longer updated flagged removal accordance with stack deprecation removal policy . the stack available yourbuilds see final removal date ui. preinstalled tools updated, so it’s responsibility with bugfixes security patches. removed : these stacks longer available use. dependency manager cache updates homebrew cocoapods dependency mirrors updated frequently (usually week) xcode stacks. these mirror updates change preinstalled tool versions, updating package manager caches faster dependency installs. edge stacks receive package upgrades, meaning homebrew packages updated latest versions. " });
this.add({id:101, 
title:"State transitions for Xcode stacks", 
body:" state transitions xcode stacks during lifecycle stack transition states triggered new xcode macos releases. stacks follows: edge stable. stable frozen. frozen removed. " });
this.add({id:102, 
title:"Edge stack updates", 
body:" edge stack updates edge stacks provide way preview test upcoming changes. xcode beta versions become available final releases new stable stacks. change when: the first beta version new major xcode released. the first beta version new minor xcode released. a new version xcode beta released. when xcode minor version released beta, available edge stack. other stacks transition stable beta question ga version. first beta version new major xcode in example: the current latest xcode version 15.3. a new beta version major xcode released: 16.0 1. once new beta version released, update stacks: the new xcode release available bitrise edge stack. in example, 16.0 beta 1 current edge stacks phased out, users automatically migrated new stack. this happens days xcode release. in example, means phasing 15.x stacks. stable stacks affected point. first beta version new minor xcode in example: the current latest xcode version 15.2. a new beta version minor xcode released: 15.3 1. once new beta version released, update stacks: the new xcode release available edge stack. in example, 15.3 beta 1 stable stacks affected point. a new beta version xcode in example: the current latest xcode version 16.0 beta 1. a new beta version released: 16.0 2. once new beta version released, update stacks: xcode 16.0 beta 2 replaces 1 edge stack. stable stacks affected point. " });
this.add({id:103, 
title:"Stable stack updates", 
body:" stable stack updates stable stacks change than edge want avoid unexpected breaking changes stacks. existing stable stacks change when: a new major xcode version released. a new minor xcode version released. a new major xcode version in example: the current latest xcode version 15.3.0. a new major xcode version released: 16.0. when new major version released, update stacks: new stable stack: xcode 16.0 available bitrise new stack. existing stable stacks: new tool versions potentially breaking changes land stacks. oldest stable stacks become frozen. in example, xcode 14.x frozen, available building. tool versions changing stacks: latest state frozen. old frozen stacks removed: example, xcode 13.x removed. the remaining users migrated newer stacks. changes previous stable stacks we update previous stable stacks new xcode version released number reasons: most preinstalled runtimes tools eventually reach end-of-life according support policy, longer receive bugfixes security patches. we need periodically upgrade default version majority users newer version. there breaking changes make enable new features user requests. while breaking changes frustrating, think doing year predictable schedule (tied major xcode release) good compromise. we trying make switch smoother by: offering edge stacks preview changes. while stack tied latest xcode beta, offer stable xcodes, so try tooling changes doing upgrade project. communicating changes advance usual communication channels. for example, blog post . offering temporary rollback option stack update . a new minor xcode version in example: the current latest xcode version 15.2. a new minor xcode version released: 15.3. when new minor version released, update stacks: new stable stack: xcode 15.3 available bitrise stack. xcode 15.3 edge stack updated with final version. " });
this.add({id:104, 
title:"macOS releases", 
body:" macos releases the exact macos version highlighted stack report pages . when new major macos version released, upgrade edge stacks os internal testing period. as general rule, don’t upgrade macos stable stacks avoid unexpected build failures. we wait future xcode release starts requiring new os version (for example, 15.0, 15.1 15.2 compatible with ventura, 15.3 requires sonoma). once happens, stack variant based major version, older remain version. while new major os available stable stack, recommend testing edge stacks. we looking feedback, including edge cases performance regressions. " });
this.add({id:105, 
title:"Events not triggering a state transition", 
body:" events triggering state transition not xcode releases trigger transition. for example, beta minor version edge stable stack transition: new simply replaces old one. patch instead, stacks updated place with version. " });
this.add({id:106, 
title:"Simulator runtimes on Xcode stacks", 
body:" simulator runtimes xcode stacks you list preinstalled tools, including simulator runtimes stacks stack reports pages . you expect following simulator runtimes installed: the matching runtime versions given xcode version: ios, watchos, tvos visionos prompts download first launch. for ios, install additional versions: previous major versions, latest minor version installed. for watchos, install previous major release’s latest minor version. for example, selecting xcode 15.0 stack, expect: ios 17.0: matching runtime xcode. ios 16.4: latest minor release previous major version. ios 15.5: latest minor release second-previous major version. watchos 10.0: matching runtime xcode. watchos 9.4: latest minor release previous major version. tvos 17.0: matching runtime xcode. visionos 1.0: matching runtime xcode " });
this.add({id:107, 
title:"Linux stack updates", 
body:" linux stack updates linux stacks bitrise based ubuntu lts releases . each bitrise stack based ubuntu lts version gets upgraded another. instead, release new stacks sunset older ones time. " });
this.add({id:108, 
title:"Using the previous version of a stack", 
body:" using previous version stack not available dedicated build environments this feature available enterprise plan with dedicated build environment, user controls rollout stack updates plans. we regularly update bitrise stacks based user requests external tooling changes. these updates potentially introduce breaking changes, despite efforts avoid those. for cases, provide temporary option use previous version given stack days release new version. this meant temporary mechanism only. because infrastructure reasons, can't previous release available forever. usually, version removed days successful release. once previous version unavailable, new builds run latest feature enabled. if previous version available given stack time, switch inactive feature can't turned on. any build triggered run current stack. to use previous version stack: workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go stacks & machines tab. find stack want configure: default workflow-specific stacks. under machine type chosen stack, toggle use previous version switch. this modifies bitrise.yml file: adds previous version stack meta block. if store bitrise.yml file repository , need specify exact rollback version meta object. you use toggle workflow editor turn feature modify configuration file stored bitrise: edit bitrise.yml repository. unavailable versions if specified version available, workflow editor display warning. any build triggered previous stack unavailable run current stable version stack. find meta block bitrise.yml file. add stack_rollback_version field with given version string. finding previous version number to previous version string, open older build, switch details & add-ons tab, look stack image version field. meta:\n stack: osx-xcode-15.0.x\n machine_type_id: g2-m1.8core\n stack_rollback_version: 2-16-2 " });
this.add({id:109, 
title:"Changelog", 
body:" changelog march 2024 new : define happens edge stack phased favor newer edge stack. removed : when new xcode edge stack released, longer brings tooling changes stable stacks. changed : new, simpler simulator runtime policy. the number older ios major versions installed, latest minor version installed each. " });
this.add({id:110, 
title:"Stack deprecation and removal policy", 
body:" stack deprecation removal policy on bitrise, android stacks supported years; xcode deprecated gradually new versions released. we don't stacks forever: aim provide with latest tools help build best app can. however, don't expect rework build configuration time stack update comes out: using reliable older stacks long time. some older stacks frozen new major version xcode released. when stack frozen, using it, longer any updates, point, strongly recommend switching newer, active stack. after stacks frozen year, removed major version xcode released. " });
this.add({id:111, 
title:"Maintaining Xcode stacks", 
body:" maintaining xcode stacks we offer wide variety xcode stacks order make sure need immediately switch new version comes out. our policy follows: keep recent major versions xcode. keep recent minor versions major version xcode. we base policy apple's current release cadence: first beta june, general availability september. the life cycle major xcode version stacks 36 months. for 24 months, stack active maintained according update policy. after 24 months, stack frozen 12 months longer receive updates. at point, strongly recommend migrating active stack. after end 36th month, stacks major xcode version removed. maintaining xcode stacks when xcode version 15.2.x released, keep: all latest patch releases recent minor versions xcode 15: 15.2 15.1 xcode 15.0 removed. the latest versions previous xcode major versions: xcode 14.3 xcode 14.2 xcode 13.4 (frozen) xcode 13.3 (frozen) in cases, minimum weeks' notice provided removal stacks. you see upcoming stack deprecations page . we recommend subscribing rss updates important announcements stacks. " });
this.add({id:112, 
title:"Deprecating Linux stacks", 
body:" deprecating linux stacks a linux stack supported years, roughly sync with ubuntu lts (long term support) releases. when previous linux stack reaches end maintenance, deprecate earmark removal. at point longer select apps. but apps using stacks in cases, minimum weeks' notice provided removal stacks. you see upcoming stack deprecations page . we recommend subscribing rss updates important announcements stacks. " });
this.add({id:113, 
title:"Preinstalled tools on Bitrise stacks", 
body:" preinstalled tools bitrise stacks every bitrise stack comes with large number preinstalled tools applications. check list reports repository. every bitrise stack comes with large number preinstalled tools applications make sure build process apps smooth fast possible. every time create update stack publish report well. the reports include list preinstalled tools version stack. we update stacks regularly: macos linux updated regularly provide latest installed tool versions . you available stack’s stack report dedicated page: bitrise stack reports . installing tools build if can't tool need build machine, install itself: installing tools during a build . you concrete examples knowledge base: installing specific fastlane version installing specific npm version " });
this.add({id:114, 
title:"The Android\/Linux\/Docker environment", 
body:" the android\/linux\/docker environment bitrise's android stacks run linux-based virtual machines created docker images. you image files github. for linux-based stacks, use standard docker images, hosted docker hub . you available stacks, called ubuntu android & docker , stack reports . pre-installed tools all stacks large number pre-installed tools available: preinstalled tools on bitrise stacks every build runs new vm, just container. the vm destroyed right build. this allows grant control docker environment. when build starts docker-based stack, volume mount \/var\/run\/docker.sock socket container (similar calling docker run -v \/var\/run\/docker.sock:\/var\/run\/docker.sock ... . you description access granting method ). the docker binary installed inside base docker image docker started migrate single-binary solution dynamically loaded components, simply sharing docker binary sufficient anymore. we install docker images so don’t use image, base image images. this means access docker container, use tools docker, like docker-compose . you can, example, configure run tests automations website projects using docker-compose . you docker info , docker build , docker run , docker login , docker push exactly how machine. shared volumes if want run docker build share volumes, note volumes shared with base docker container (the running in). this how docker handles volume sharing. everything \/bitrise mounted volume, path guaranteed work with --volume mapping. it means use standard paths relative mount volumes, it’ll work expected, default source code directory located inside \/bitrise (by default it’s \/bitrise\/src docker images). what won’t work, however, change source code directory located outside \/bitrise , want mount folder with absolute path outside \/bitrise . " });
this.add({id:115, 
title:"Managing Java versions", 
body:" managing java versions all bitrise virtual machines java 8, 11, 17 pre-installed. the default version switch versions any time. by default, bitrise stack comes with java 11 pre-installed ready use. if switch version, build use 11. in addition 11, java versions pre-installed stacks: java 8 java 17 you switch versions any time. install different java version (for example, 14). potential issues with java versions using new java version, switching versions build cause unexpected issues: java_home isn't set correctly switching java 11 macos-based stacks using android sdk tools with java 11 java.lang.classnotfoundexception " });
this.add({id:116, 
title:"Setting Java version with the Set Java version Step", 
body:" setting java version with set step each bitrise stack different java versions pre-installed: 8, 11 (the default version), 17. you easily switch with set java version step . the step allows set global java version virtual machine runs build. installing new java version this step install any java version. it switch versions pre-installed stacks. if want version available stacks default, check installing a java version on an android stack . add set java version step workflow . we recommend setting first step workflow. find java version set globally build input. set version need. the options are: 8 11 (the default value) 17 yaml example in example, we're setting java version 17 bitrise.yml file. primary:\n steps:\n - set-java-version@1:\n inputs:\n set_java_version: '17' " });
this.add({id:117, 
title:"Installing a Java version on an Android stack", 
body:" installing java version android stack if need java jdk version installed android stacks, follow guide. the example install java\/jdk 1.14 with script step. you adapt version choice. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step workflow. in script content input step, add script: the example installs java 14 feel free replace openjdk-14-jdk java-1.14.0-openjdk-amd64 parts with version choice. #!\/bin\/bash\nset -ex\n \nadd-apt-repository -y ppa:openjdk-r\/ppa\napt-get update -qq\napt-get install openjdk-14-jdk\nupdate-java-alternatives -s \/usr\/lib\/jvm\/java-1.14.0-openjdk-amd64\necho \"done\" start new build. this script step first workflow, does depend else. " });
this.add({id:99, 
title:"Stack update policy", 
body:" stack update policy bitrise stacks updated week: completely rebuilt others certain cache archives updated. bitrise stacks include important tools mobile development pre-installed ready use. our goal make workflows simple builds fast efficient. these change continuously: old versions become deprecated unsupported new released with features breaking changes. stacks bitrise.io updated regularly. the updates contain following kinds changes: tool upgrade: an installed tool upgraded latest version (for example, git cli 2.9.1 2.9.5). tool addition: a new tool added (for example, latest android emulator image preinstalled version released). tool removal: a tool version removed reaches end-of-life poses security risk, making default (for example, ruby 2.7 removed, 3.0 new default). dependency mirror updates: on xcode stacks, local caches homebrew cocoapods updated with latest snapshot. platform changes: changes major components, like xcode macos stacks, os versions, android sdk. using previous version stack updating stack new version cause problems with builds. to help ease transition, use previous 2-3 days update: using the previous version of a stack . for information tools available different stacks, check relevant guide: preinstalled tools on bitrise stacks . " });
this.add({id:100, 
title:"Xcode stack updates", 
body:" xcode stack updates you select macos stacks based xcode version need. under hood, vm image contains multiple versions installed requested activated runtime workflow starts. as rule thumb, xcode minor versions major version share vm image, exceptions based compatibility issues considerations. versioning when talking versions, use semver terminology, regardless how various tools define versions. stacks lifecycle different states: edge, stable, frozen removed. edge : these stacks previewing upcoming versions changes. they updated in-place regularly, include latest stable release xcode, beta xcode (if available), version pre-installed tools, dependency manager cache updates. regular weekly updates add remove upgrade os. backwards compatibility guaranteed edge stack. run builds preview tool changes (such ruby 3.2 default) access pre-release 15 beta). stable : these stacks updated with xcode patch versions, dependency manager cache updates critical security fixes. note specific stack stable state (for example, 14.3) receive major update new edge released (a hypothetical 14.4 beta) tool versions current become stable. for maximum reliability reproducible builds, recommend pinning exact workflows instead relying defaults ruby version). frozen : these stacks longer updated flagged removal accordance with stack deprecation removal policy . the stack available yourbuilds see final removal date ui. preinstalled tools updated, so it’s responsibility with bugfixes security patches. removed : these stacks longer available use. dependency manager cache updates homebrew cocoapods dependency mirrors updated frequently (usually week) xcode stacks. these mirror updates change preinstalled tool versions, updating package manager caches faster dependency installs. edge stacks receive package upgrades, meaning homebrew packages updated latest versions. " });
this.add({id:101, 
title:"State transitions for Xcode stacks", 
body:" state transitions xcode stacks during lifecycle stack transition states triggered new xcode macos releases. stacks follows: edge stable. stable frozen. frozen removed. " });
this.add({id:102, 
title:"Edge stack updates", 
body:" edge stack updates edge stacks provide way preview test upcoming changes. xcode beta versions become available final releases new stable stacks. change when: the first beta version new major xcode released. the first beta version new minor xcode released. a new version xcode beta released. when xcode minor version released beta, available edge stack. other stacks transition stable beta question ga version. first beta version new major xcode in example: the current latest xcode version 15.3. a new beta version major xcode released: 16.0 1. once new beta version released, update stacks: the new xcode release available bitrise edge stack. in example, 16.0 beta 1 current edge stacks phased out, users automatically migrated new stack. this happens days xcode release. in example, means phasing 15.x stacks. stable stacks affected point. first beta version new minor xcode in example: the current latest xcode version 15.2. a new beta version minor xcode released: 15.3 1. once new beta version released, update stacks: the new xcode release available edge stack. in example, 15.3 beta 1 stable stacks affected point. a new beta version xcode in example: the current latest xcode version 16.0 beta 1. a new beta version released: 16.0 2. once new beta version released, update stacks: xcode 16.0 beta 2 replaces 1 edge stack. stable stacks affected point. " });
this.add({id:103, 
title:"Stable stack updates", 
body:" stable stack updates stable stacks change than edge want avoid unexpected breaking changes stacks. existing stable stacks change when: a new major xcode version released. a new minor xcode version released. a new major xcode version in example: the current latest xcode version 15.3.0. a new major xcode version released: 16.0. when new major version released, update stacks: new stable stack: xcode 16.0 available bitrise new stack. existing stable stacks: new tool versions potentially breaking changes land stacks. oldest stable stacks become frozen. in example, xcode 14.x frozen, available building. tool versions changing stacks: latest state frozen. old frozen stacks removed: example, xcode 13.x removed. the remaining users migrated newer stacks. changes previous stable stacks we update previous stable stacks new xcode version released number reasons: most preinstalled runtimes tools eventually reach end-of-life according support policy, longer receive bugfixes security patches. we need periodically upgrade default version majority users newer version. there breaking changes make enable new features user requests. while breaking changes frustrating, think doing year predictable schedule (tied major xcode release) good compromise. we trying make switch smoother by: offering edge stacks preview changes. while stack tied latest xcode beta, offer stable xcodes, so try tooling changes doing upgrade project. communicating changes advance usual communication channels. for example, blog post . offering temporary rollback option stack update . a new minor xcode version in example: the current latest xcode version 15.2. a new minor xcode version released: 15.3. when new minor version released, update stacks: new stable stack: xcode 15.3 available bitrise stack. xcode 15.3 edge stack updated with final version. " });
this.add({id:104, 
title:"macOS releases", 
body:" macos releases the exact macos version highlighted stack report pages . when new major macos version released, upgrade edge stacks os internal testing period. as general rule, don’t upgrade macos stable stacks avoid unexpected build failures. we wait future xcode release starts requiring new os version (for example, 15.0, 15.1 15.2 compatible with ventura, 15.3 requires sonoma). once happens, stack variant based major version, older remain version. while new major os available stable stack, recommend testing edge stacks. we looking feedback, including edge cases performance regressions. " });
this.add({id:105, 
title:"Events not triggering a state transition", 
body:" events triggering state transition not xcode releases trigger transition. for example, beta minor version edge stable stack transition: new simply replaces old one. patch instead, stacks updated place with version. " });
this.add({id:106, 
title:"Simulator runtimes on Xcode stacks", 
body:" simulator runtimes xcode stacks you list preinstalled tools, including simulator runtimes stacks stack reports pages . you expect following simulator runtimes installed: the matching runtime versions given xcode version: ios, watchos, tvos visionos prompts download first launch. for ios, install additional versions: previous major versions, latest minor version installed. for watchos, install previous major release’s latest minor version. for example, selecting xcode 15.0 stack, expect: ios 17.0: matching runtime xcode. ios 16.4: latest minor release previous major version. ios 15.5: latest minor release second-previous major version. watchos 10.0: matching runtime xcode. watchos 9.4: latest minor release previous major version. tvos 17.0: matching runtime xcode. visionos 1.0: matching runtime xcode " });
this.add({id:107, 
title:"Linux stack updates", 
body:" linux stack updates linux stacks bitrise based ubuntu lts releases . each bitrise stack based ubuntu lts version gets upgraded another. instead, release new stacks sunset older ones time. " });
this.add({id:108, 
title:"Using the previous version of a stack", 
body:" using previous version stack not available dedicated build environments this feature available enterprise plan with dedicated build environment, user controls rollout stack updates plans. we regularly update bitrise stacks based user requests external tooling changes. these updates potentially introduce breaking changes, despite efforts avoid those. for cases, provide temporary option use previous version given stack days release new version. this meant temporary mechanism only. because infrastructure reasons, can't previous release available forever. usually, version removed days successful release. once previous version unavailable, new builds run latest feature enabled. if previous version available given stack time, switch inactive feature can't turned on. any build triggered run current stack. to use previous version stack: workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go stacks & machines tab. find stack want configure: default workflow-specific stacks. under machine type chosen stack, toggle use previous version switch. this modifies bitrise.yml file: adds previous version stack meta block. if store bitrise.yml file repository , need specify exact rollback version meta object. you use toggle workflow editor turn feature modify configuration file stored bitrise: edit bitrise.yml repository. unavailable versions if specified version available, workflow editor display warning. any build triggered previous stack unavailable run current stable version stack. find meta block bitrise.yml file. add stack_rollback_version field with given version string. finding previous version number to previous version string, open older build, switch details & add-ons tab, look stack image version field. meta:\n stack: osx-xcode-15.0.x\n machine_type_id: g2-m1.8core\n stack_rollback_version: 2-16-2 " });
this.add({id:109, 
title:"Changelog", 
body:" changelog march 2024 new : define happens edge stack phased favor newer edge stack. removed : when new xcode edge stack released, longer brings tooling changes stable stacks. changed : new, simpler simulator runtime policy. the number older ios major versions installed, latest minor version installed each. " });
this.add({id:100, 
title:"Xcode stack updates", 
body:" xcode stack updates you select macos stacks based xcode version need. under hood, vm image contains multiple versions installed requested activated runtime workflow starts. as rule thumb, xcode minor versions major version share vm image, exceptions based compatibility issues considerations. versioning when talking versions, use semver terminology, regardless how various tools define versions. stacks lifecycle different states: edge, stable, frozen removed. edge : these stacks previewing upcoming versions changes. they updated in-place regularly, include latest stable release xcode, beta xcode (if available), version pre-installed tools, dependency manager cache updates. regular weekly updates add remove upgrade os. backwards compatibility guaranteed edge stack. run builds preview tool changes (such ruby 3.2 default) access pre-release 15 beta). stable : these stacks updated with xcode patch versions, dependency manager cache updates critical security fixes. note specific stack stable state (for example, 14.3) receive major update new edge released (a hypothetical 14.4 beta) tool versions current become stable. for maximum reliability reproducible builds, recommend pinning exact workflows instead relying defaults ruby version). frozen : these stacks longer updated flagged removal accordance with stack deprecation removal policy . the stack available yourbuilds see final removal date ui. preinstalled tools updated, so it’s responsibility with bugfixes security patches. removed : these stacks longer available use. dependency manager cache updates homebrew cocoapods dependency mirrors updated frequently (usually week) xcode stacks. these mirror updates change preinstalled tool versions, updating package manager caches faster dependency installs. edge stacks receive package upgrades, meaning homebrew packages updated latest versions. " });
this.add({id:101, 
title:"State transitions for Xcode stacks", 
body:" state transitions xcode stacks during lifecycle stack transition states triggered new xcode macos releases. stacks follows: edge stable. stable frozen. frozen removed. " });
this.add({id:102, 
title:"Edge stack updates", 
body:" edge stack updates edge stacks provide way preview test upcoming changes. xcode beta versions become available final releases new stable stacks. change when: the first beta version new major xcode released. the first beta version new minor xcode released. a new version xcode beta released. when xcode minor version released beta, available edge stack. other stacks transition stable beta question ga version. first beta version new major xcode in example: the current latest xcode version 15.3. a new beta version major xcode released: 16.0 1. once new beta version released, update stacks: the new xcode release available bitrise edge stack. in example, 16.0 beta 1 current edge stacks phased out, users automatically migrated new stack. this happens days xcode release. in example, means phasing 15.x stacks. stable stacks affected point. first beta version new minor xcode in example: the current latest xcode version 15.2. a new beta version minor xcode released: 15.3 1. once new beta version released, update stacks: the new xcode release available edge stack. in example, 15.3 beta 1 stable stacks affected point. a new beta version xcode in example: the current latest xcode version 16.0 beta 1. a new beta version released: 16.0 2. once new beta version released, update stacks: xcode 16.0 beta 2 replaces 1 edge stack. stable stacks affected point. " });
this.add({id:103, 
title:"Stable stack updates", 
body:" stable stack updates stable stacks change than edge want avoid unexpected breaking changes stacks. existing stable stacks change when: a new major xcode version released. a new minor xcode version released. a new major xcode version in example: the current latest xcode version 15.3.0. a new major xcode version released: 16.0. when new major version released, update stacks: new stable stack: xcode 16.0 available bitrise new stack. existing stable stacks: new tool versions potentially breaking changes land stacks. oldest stable stacks become frozen. in example, xcode 14.x frozen, available building. tool versions changing stacks: latest state frozen. old frozen stacks removed: example, xcode 13.x removed. the remaining users migrated newer stacks. changes previous stable stacks we update previous stable stacks new xcode version released number reasons: most preinstalled runtimes tools eventually reach end-of-life according support policy, longer receive bugfixes security patches. we need periodically upgrade default version majority users newer version. there breaking changes make enable new features user requests. while breaking changes frustrating, think doing year predictable schedule (tied major xcode release) good compromise. we trying make switch smoother by: offering edge stacks preview changes. while stack tied latest xcode beta, offer stable xcodes, so try tooling changes doing upgrade project. communicating changes advance usual communication channels. for example, blog post . offering temporary rollback option stack update . a new minor xcode version in example: the current latest xcode version 15.2. a new minor xcode version released: 15.3. when new minor version released, update stacks: new stable stack: xcode 15.3 available bitrise stack. xcode 15.3 edge stack updated with final version. " });
this.add({id:104, 
title:"macOS releases", 
body:" macos releases the exact macos version highlighted stack report pages . when new major macos version released, upgrade edge stacks os internal testing period. as general rule, don’t upgrade macos stable stacks avoid unexpected build failures. we wait future xcode release starts requiring new os version (for example, 15.0, 15.1 15.2 compatible with ventura, 15.3 requires sonoma). once happens, stack variant based major version, older remain version. while new major os available stable stack, recommend testing edge stacks. we looking feedback, including edge cases performance regressions. " });
this.add({id:105, 
title:"Events not triggering a state transition", 
body:" events triggering state transition not xcode releases trigger transition. for example, beta minor version edge stable stack transition: new simply replaces old one. patch instead, stacks updated place with version. " });
this.add({id:106, 
title:"Simulator runtimes on Xcode stacks", 
body:" simulator runtimes xcode stacks you list preinstalled tools, including simulator runtimes stacks stack reports pages . you expect following simulator runtimes installed: the matching runtime versions given xcode version: ios, watchos, tvos visionos prompts download first launch. for ios, install additional versions: previous major versions, latest minor version installed. for watchos, install previous major release’s latest minor version. for example, selecting xcode 15.0 stack, expect: ios 17.0: matching runtime xcode. ios 16.4: latest minor release previous major version. ios 15.5: latest minor release second-previous major version. watchos 10.0: matching runtime xcode. watchos 9.4: latest minor release previous major version. tvos 17.0: matching runtime xcode. visionos 1.0: matching runtime xcode " });
this.add({id:101, 
title:"State transitions for Xcode stacks", 
body:" state transitions xcode stacks during lifecycle stack transition states triggered new xcode macos releases. stacks follows: edge stable. stable frozen. frozen removed. " });
this.add({id:102, 
title:"Edge stack updates", 
body:" edge stack updates edge stacks provide way preview test upcoming changes. xcode beta versions become available final releases new stable stacks. change when: the first beta version new major xcode released. the first beta version new minor xcode released. a new version xcode beta released. when xcode minor version released beta, available edge stack. other stacks transition stable beta question ga version. first beta version new major xcode in example: the current latest xcode version 15.3. a new beta version major xcode released: 16.0 1. once new beta version released, update stacks: the new xcode release available bitrise edge stack. in example, 16.0 beta 1 current edge stacks phased out, users automatically migrated new stack. this happens days xcode release. in example, means phasing 15.x stacks. stable stacks affected point. first beta version new minor xcode in example: the current latest xcode version 15.2. a new beta version minor xcode released: 15.3 1. once new beta version released, update stacks: the new xcode release available edge stack. in example, 15.3 beta 1 stable stacks affected point. a new beta version xcode in example: the current latest xcode version 16.0 beta 1. a new beta version released: 16.0 2. once new beta version released, update stacks: xcode 16.0 beta 2 replaces 1 edge stack. stable stacks affected point. " });
this.add({id:103, 
title:"Stable stack updates", 
body:" stable stack updates stable stacks change than edge want avoid unexpected breaking changes stacks. existing stable stacks change when: a new major xcode version released. a new minor xcode version released. a new major xcode version in example: the current latest xcode version 15.3.0. a new major xcode version released: 16.0. when new major version released, update stacks: new stable stack: xcode 16.0 available bitrise new stack. existing stable stacks: new tool versions potentially breaking changes land stacks. oldest stable stacks become frozen. in example, xcode 14.x frozen, available building. tool versions changing stacks: latest state frozen. old frozen stacks removed: example, xcode 13.x removed. the remaining users migrated newer stacks. changes previous stable stacks we update previous stable stacks new xcode version released number reasons: most preinstalled runtimes tools eventually reach end-of-life according support policy, longer receive bugfixes security patches. we need periodically upgrade default version majority users newer version. there breaking changes make enable new features user requests. while breaking changes frustrating, think doing year predictable schedule (tied major xcode release) good compromise. we trying make switch smoother by: offering edge stacks preview changes. while stack tied latest xcode beta, offer stable xcodes, so try tooling changes doing upgrade project. communicating changes advance usual communication channels. for example, blog post . offering temporary rollback option stack update . a new minor xcode version in example: the current latest xcode version 15.2. a new minor xcode version released: 15.3. when new minor version released, update stacks: new stable stack: xcode 15.3 available bitrise stack. xcode 15.3 edge stack updated with final version. " });
this.add({id:104, 
title:"macOS releases", 
body:" macos releases the exact macos version highlighted stack report pages . when new major macos version released, upgrade edge stacks os internal testing period. as general rule, don’t upgrade macos stable stacks avoid unexpected build failures. we wait future xcode release starts requiring new os version (for example, 15.0, 15.1 15.2 compatible with ventura, 15.3 requires sonoma). once happens, stack variant based major version, older remain version. while new major os available stable stack, recommend testing edge stacks. we looking feedback, including edge cases performance regressions. " });
this.add({id:105, 
title:"Events not triggering a state transition", 
body:" events triggering state transition not xcode releases trigger transition. for example, beta minor version edge stable stack transition: new simply replaces old one. patch instead, stacks updated place with version. " });
this.add({id:106, 
title:"Simulator runtimes on Xcode stacks", 
body:" simulator runtimes xcode stacks you list preinstalled tools, including simulator runtimes stacks stack reports pages . you expect following simulator runtimes installed: the matching runtime versions given xcode version: ios, watchos, tvos visionos prompts download first launch. for ios, install additional versions: previous major versions, latest minor version installed. for watchos, install previous major release’s latest minor version. for example, selecting xcode 15.0 stack, expect: ios 17.0: matching runtime xcode. ios 16.4: latest minor release previous major version. ios 15.5: latest minor release second-previous major version. watchos 10.0: matching runtime xcode. watchos 9.4: latest minor release previous major version. tvos 17.0: matching runtime xcode. visionos 1.0: matching runtime xcode " });
this.add({id:107, 
title:"Linux stack updates", 
body:" linux stack updates linux stacks bitrise based ubuntu lts releases . each bitrise stack based ubuntu lts version gets upgraded another. instead, release new stacks sunset older ones time. " });
this.add({id:108, 
title:"Using the previous version of a stack", 
body:" using previous version stack not available dedicated build environments this feature available enterprise plan with dedicated build environment, user controls rollout stack updates plans. we regularly update bitrise stacks based user requests external tooling changes. these updates potentially introduce breaking changes, despite efforts avoid those. for cases, provide temporary option use previous version given stack days release new version. this meant temporary mechanism only. because infrastructure reasons, can't previous release available forever. usually, version removed days successful release. once previous version unavailable, new builds run latest feature enabled. if previous version available given stack time, switch inactive feature can't turned on. any build triggered run current stack. to use previous version stack: workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go stacks & machines tab. find stack want configure: default workflow-specific stacks. under machine type chosen stack, toggle use previous version switch. this modifies bitrise.yml file: adds previous version stack meta block. if store bitrise.yml file repository , need specify exact rollback version meta object. you use toggle workflow editor turn feature modify configuration file stored bitrise: edit bitrise.yml repository. unavailable versions if specified version available, workflow editor display warning. any build triggered previous stack unavailable run current stable version stack. find meta block bitrise.yml file. add stack_rollback_version field with given version string. finding previous version number to previous version string, open older build, switch details & add-ons tab, look stack image version field. meta:\n stack: osx-xcode-15.0.x\n machine_type_id: g2-m1.8core\n stack_rollback_version: 2-16-2 " });
this.add({id:109, 
title:"Changelog", 
body:" changelog march 2024 new : define happens edge stack phased favor newer edge stack. removed : when new xcode edge stack released, longer brings tooling changes stable stacks. changed : new, simpler simulator runtime policy. the number older ios major versions installed, latest minor version installed each. " });
this.add({id:110, 
title:"Stack deprecation and removal policy", 
body:" stack deprecation removal policy on bitrise, android stacks supported years; xcode deprecated gradually new versions released. we don't stacks forever: aim provide with latest tools help build best app can. however, don't expect rework build configuration time stack update comes out: using reliable older stacks long time. some older stacks frozen new major version xcode released. when stack frozen, using it, longer any updates, point, strongly recommend switching newer, active stack. after stacks frozen year, removed major version xcode released. " });
this.add({id:111, 
title:"Maintaining Xcode stacks", 
body:" maintaining xcode stacks we offer wide variety xcode stacks order make sure need immediately switch new version comes out. our policy follows: keep recent major versions xcode. keep recent minor versions major version xcode. we base policy apple's current release cadence: first beta june, general availability september. the life cycle major xcode version stacks 36 months. for 24 months, stack active maintained according update policy. after 24 months, stack frozen 12 months longer receive updates. at point, strongly recommend migrating active stack. after end 36th month, stacks major xcode version removed. maintaining xcode stacks when xcode version 15.2.x released, keep: all latest patch releases recent minor versions xcode 15: 15.2 15.1 xcode 15.0 removed. the latest versions previous xcode major versions: xcode 14.3 xcode 14.2 xcode 13.4 (frozen) xcode 13.3 (frozen) in cases, minimum weeks' notice provided removal stacks. you see upcoming stack deprecations page . we recommend subscribing rss updates important announcements stacks. " });
this.add({id:112, 
title:"Deprecating Linux stacks", 
body:" deprecating linux stacks a linux stack supported years, roughly sync with ubuntu lts (long term support) releases. when previous linux stack reaches end maintenance, deprecate earmark removal. at point longer select apps. but apps using stacks in cases, minimum weeks' notice provided removal stacks. you see upcoming stack deprecations page . we recommend subscribing rss updates important announcements stacks. " });
this.add({id:111, 
title:"Maintaining Xcode stacks", 
body:" maintaining xcode stacks we offer wide variety xcode stacks order make sure need immediately switch new version comes out. our policy follows: keep recent major versions xcode. keep recent minor versions major version xcode. we base policy apple's current release cadence: first beta june, general availability september. the life cycle major xcode version stacks 36 months. for 24 months, stack active maintained according update policy. after 24 months, stack frozen 12 months longer receive updates. at point, strongly recommend migrating active stack. after end 36th month, stacks major xcode version removed. maintaining xcode stacks when xcode version 15.2.x released, keep: all latest patch releases recent minor versions xcode 15: 15.2 15.1 xcode 15.0 removed. the latest versions previous xcode major versions: xcode 14.3 xcode 14.2 xcode 13.4 (frozen) xcode 13.3 (frozen) in cases, minimum weeks' notice provided removal stacks. you see upcoming stack deprecations page . we recommend subscribing rss updates important announcements stacks. " });
this.add({id:112, 
title:"Deprecating Linux stacks", 
body:" deprecating linux stacks a linux stack supported years, roughly sync with ubuntu lts (long term support) releases. when previous linux stack reaches end maintenance, deprecate earmark removal. at point longer select apps. but apps using stacks in cases, minimum weeks' notice provided removal stacks. you see upcoming stack deprecations page . we recommend subscribing rss updates important announcements stacks. " });
this.add({id:113, 
title:"Preinstalled tools on Bitrise stacks", 
body:" preinstalled tools bitrise stacks every bitrise stack comes with large number preinstalled tools applications. check list reports repository. every bitrise stack comes with large number preinstalled tools applications make sure build process apps smooth fast possible. every time create update stack publish report well. the reports include list preinstalled tools version stack. we update stacks regularly: macos linux updated regularly provide latest installed tool versions . you available stack’s stack report dedicated page: bitrise stack reports . installing tools build if can't tool need build machine, install itself: installing tools during a build . you concrete examples knowledge base: installing specific fastlane version installing specific npm version " });
this.add({id:114, 
title:"The Android\/Linux\/Docker environment", 
body:" the android\/linux\/docker environment bitrise's android stacks run linux-based virtual machines created docker images. you image files github. for linux-based stacks, use standard docker images, hosted docker hub . you available stacks, called ubuntu android & docker , stack reports . pre-installed tools all stacks large number pre-installed tools available: preinstalled tools on bitrise stacks every build runs new vm, just container. the vm destroyed right build. this allows grant control docker environment. when build starts docker-based stack, volume mount \/var\/run\/docker.sock socket container (similar calling docker run -v \/var\/run\/docker.sock:\/var\/run\/docker.sock ... . you description access granting method ). the docker binary installed inside base docker image docker started migrate single-binary solution dynamically loaded components, simply sharing docker binary sufficient anymore. we install docker images so don’t use image, base image images. this means access docker container, use tools docker, like docker-compose . you can, example, configure run tests automations website projects using docker-compose . you docker info , docker build , docker run , docker login , docker push exactly how machine. shared volumes if want run docker build share volumes, note volumes shared with base docker container (the running in). this how docker handles volume sharing. everything \/bitrise mounted volume, path guaranteed work with --volume mapping. it means use standard paths relative mount volumes, it’ll work expected, default source code directory located inside \/bitrise (by default it’s \/bitrise\/src docker images). what won’t work, however, change source code directory located outside \/bitrise , want mount folder with absolute path outside \/bitrise . " });
this.add({id:115, 
title:"Managing Java versions", 
body:" managing java versions all bitrise virtual machines java 8, 11, 17 pre-installed. the default version switch versions any time. by default, bitrise stack comes with java 11 pre-installed ready use. if switch version, build use 11. in addition 11, java versions pre-installed stacks: java 8 java 17 you switch versions any time. install different java version (for example, 14). potential issues with java versions using new java version, switching versions build cause unexpected issues: java_home isn't set correctly switching java 11 macos-based stacks using android sdk tools with java 11 java.lang.classnotfoundexception " });
this.add({id:116, 
title:"Setting Java version with the Set Java version Step", 
body:" setting java version with set step each bitrise stack different java versions pre-installed: 8, 11 (the default version), 17. you easily switch with set java version step . the step allows set global java version virtual machine runs build. installing new java version this step install any java version. it switch versions pre-installed stacks. if want version available stacks default, check installing a java version on an android stack . add set java version step workflow . we recommend setting first step workflow. find java version set globally build input. set version need. the options are: 8 11 (the default value) 17 yaml example in example, we're setting java version 17 bitrise.yml file. primary:\n steps:\n - set-java-version@1:\n inputs:\n set_java_version: '17' " });
this.add({id:117, 
title:"Installing a Java version on an Android stack", 
body:" installing java version android stack if need java jdk version installed android stacks, follow guide. the example install java\/jdk 1.14 with script step. you adapt version choice. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step workflow. in script content input step, add script: the example installs java 14 feel free replace openjdk-14-jdk java-1.14.0-openjdk-amd64 parts with version choice. #!\/bin\/bash\nset -ex\n \nadd-apt-repository -y ppa:openjdk-r\/ppa\napt-get update -qq\napt-get install openjdk-14-jdk\nupdate-java-alternatives -s \/usr\/lib\/jvm\/java-1.14.0-openjdk-amd64\necho \"done\" start new build. this script step first workflow, does depend else. " });
this.add({id:116, 
title:"Setting Java version with the Set Java version Step", 
body:" setting java version with set step each bitrise stack different java versions pre-installed: 8, 11 (the default version), 17. you easily switch with set java version step . the step allows set global java version virtual machine runs build. installing new java version this step install any java version. it switch versions pre-installed stacks. if want version available stacks default, check installing a java version on an android stack . add set java version step workflow . we recommend setting first step workflow. find java version set globally build input. set version need. the options are: 8 11 (the default value) 17 yaml example in example, we're setting java version 17 bitrise.yml file. primary:\n steps:\n - set-java-version@1:\n inputs:\n set_java_version: '17' " });
this.add({id:117, 
title:"Installing a Java version on an Android stack", 
body:" installing java version android stack if need java jdk version installed android stacks, follow guide. the example install java\/jdk 1.14 with script step. you adapt version choice. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step workflow. in script content input step, add script: the example installs java 14 feel free replace openjdk-14-jdk java-1.14.0-openjdk-amd64 parts with version choice. #!\/bin\/bash\nset -ex\n \nadd-apt-repository -y ppa:openjdk-r\/ppa\napt-get update -qq\napt-get install openjdk-14-jdk\nupdate-java-alternatives -s \/usr\/lib\/jvm\/java-1.14.0-openjdk-amd64\necho \"done\" start new build. this script step first workflow, does depend else. " });
this.add({id:118, 
title:"Code security", 
body:" code security every bitrise build runs new virtual machine access previous builds. we store source code set how accessed. to guarantee security code, bitrise build runs own, clean virtual machine discard finishes, erasing file uses change make build. this true android & docker stacks , use docker containers run build. the build itself gets virtual machine container started, used environment in short, manage environment, isolation - that’s ensured using machines this way builds protected changes others previous builds, access code use stable environment define build workflow . every build completed isolated environment, unrelated any previous parallelly running builds. " });
this.add({id:119, 
title:"Source code", 
body:" source code we don’t store source code. the code accessed build machines (virtual machines) way define bitrise configuration . if don’t git clone step step accesses git repository configuration, source code won’t touched all. at end build virtual machine destroyed. as such, any change lost unless commit changes push remote repository. " });
this.add({id:120, 
title:"Code signing and other files", 
body:" code signing files the files upload code signing tab workflow editor stored amazon s3 way it’s accessible web servers. the required credentials stored any database, available web servers’ environment. build servers can’t access files directly either. when build starts, server generates read-only, time limited url files, using amazon s3 pre-signed urls . " });
this.add({id:121, 
title:"Passwords", 
body:" passwords passwords stored hashed, encrypted form. we encrypting passwords with bcrypt algorithm , using multiple stretches. " });
this.add({id:119, 
title:"Source code", 
body:" source code we don’t store source code. the code accessed build machines (virtual machines) way define bitrise configuration . if don’t git clone step step accesses git repository configuration, source code won’t touched all. at end build virtual machine destroyed. as such, any change lost unless commit changes push remote repository. " });
this.add({id:120, 
title:"Code signing and other files", 
body:" code signing files the files upload code signing tab workflow editor stored amazon s3 way it’s accessible web servers. the required credentials stored any database, available web servers’ environment. build servers can’t access files directly either. when build starts, server generates read-only, time limited url files, using amazon s3 pre-signed urls . " });
this.add({id:121, 
title:"Passwords", 
body:" passwords passwords stored hashed, encrypted form. we encrypting passwords with bcrypt algorithm , using multiple stretches. " });
this.add({id:122, 
title:"Customizable enterprise build platforms", 
body:" customizable enterprise build platforms bitrise offers types custom build platforms enterprises: dedicated firewall private user's environment. using custom enterprise build platform means running bitrise builds virtual machines (vm) dedicated specifically configured needs. with private cloud, complete control how run. bitrise offers types custom build platforms enterprises: dedicated build platform: set dedicated machines bitrise firewall. these public ip address any bitrise build machine reserved exclusive use. private build platform: solution includes firewall, storage capacity, computing environment. this allows create custom virtualization configuration, site-to-site vpn. with latter, data leave network separately connect vpn with build . the private build platform advanced set-up with plenty configuration options. to learn details, contact ! check important differences dedicated private build platforms: dedicated vs private build platform available service dedicated build platform private build platform selecting resources available virtual machines yes yes dedicated customer success engineer, expert mobile ci\/cd. yes yes initial onboarding assistance first month with weekly calls. yes yes continued ci\/cd best practices mentoring with monthly check-ins bitrise account managers customer success engineers. yes yes weekly infrastructure maintenance includes licenses virtualization, orchestration, data storage. yes yes private network with dedicated firewall ip addresses - yes management dashboard access (vsphere google cloud platform) - yes " });
this.add({id:123, 
title:"Using your own Docker image", 
body:" using docker image you use docker image bitrise, run custom commands workflow. use hub dockerfile. docker hub rate limits from july 15, 2024, rate limiting apply downloads docker hub. if pull image hub authentication bitrise build linux machines, run issues limiting. bitrise mirroring popular public docker images, avoid potential issues with rate limiting, either: authenticate docker image pulling requests hub. for details docker's policy, refer docker hub rate limit . switch docker registry store images. on bitrise, single build runs own, separate virtual machine destroyed end build. android stacks , use docker purpose. our stacks pre-installed images custom image, run commands workflow. there ways configuration bitrise: run docker commands build. to so, use script step . set custom image workflow editor . no docker macos stacks docker isn't installed any macos-based stacks; guides related apply linux-based stacks. we recommend run docker commands with script step not change base environment docker image stack tab unless really to! running docker commands build flexible provides overall higher level control. github sample repository you sample repository github , configured run mac\/linux using bitrise cli . " });
this.add({id:124, 
title:"Running docker commands with a Script Step", 
body:" running docker commands with script step the recommended way using custom docker configuration locally bitrise.io , add script step workflow run docker commands. you use authenticate service hub selected image. we provide examples how run docker commands using script step: " });
this.add({id:125, 
title:"Running docker hello-world", 
body:" running docker hello-world the official hello-world docker image hosted hub. if wish use any images hub, authenticate first. in example, we’re following official getting started guide run hello-world docker image. in example bitrise.yml file, see simple build configuration run image: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n git-clone@3.4.1: {}\n script@1:\n title: docker run hello-world\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n\n login -u $dockerhub_user -p $dockerhub_token\n hello-world " });
this.add({id:126, 
title:"Building and running a Dockerfile", 
body:" building running dockerfile you use dockerfile bitrise repository define docker environment: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n git-clone@3.4.1: {}\n script@1:\n title: docker run\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n\n build -t bitrise-minimal-sample .\n run --rm this workflow will: git clone repository. run docker build -t bitrise-minimal-sample . docker run --rm bitrise-minimal-sample repository’s root. if dockerfile like root repository: from alpine:3.3\n\ncmd cat \/etc\/alpine-release the output look like this: +------------------------------------------------------------------------------+\n| (2) docker run hello-world |\n+------------------------------------------------------------------------------+\n| id: script |\n| version: 1.1.3 collection: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git toolkit: bash time: 2016-11-21t14:28:23z |\n+ build -t bitrise-minimal-sample .\nsending context docker daemon 69.12 kb\n\nstep 1 : from alpine:3.3\n3.3: pulling library\/alpine\n985c5f84712b: fs layer\n985c5f84712b: verifying checksum\n985c5f84712b: download complete\n985c5f84712b: pull complete\ndigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nstatus: downloaded newer image alpine:3.3\n ---> 6c2aa2137d97\nstep 2 cmd cat \/etc\/alpine-release\n running 507cfb961cc7\n 02a0da3ac697\nremoving intermediate container 507cfb961cc7\nsuccessfully built 02a0da3ac697\n+ --rm bitrise-minimal-sample\n3.3.3\n| |\n+---+---------------------------------------------------------------+----------+\n| ✓ | 4.24 sec |\n+---+---------------------------------------------------------------+----------+ " });
this.add({id:127, 
title:"Using docker-compose", 
body:" using docker-compose you run docker image file using docker-compose command. with compose, configure application’s services start with single command. for example, set docker-compose.yml like repository root (where dockerfile is): version: '2'\nservices:\n sample-app:\n build: . now run services with single docker-compose script step: - script@1.1.3:\n title: docker run\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n docker-compose run --rm sample-app docker compose build run image automatically. you don’t specify -t tag services used docker-compose tag image automatically. " });
this.add({id:128, 
title:"Using a custom Docker image from Docker Hub", 
body:" using custom docker image hub you use bitrise with docker image pulled hub, see running docker hello-world example. however, free plan anonymous users, docker hub allows limited number image pulls. if set workflow editor, authentication performed: pull user bitrise public ip address. with users going option, rate limit mean wouldn’t able start builds. the workaround simple: need use script step authenticate with docker hub account, pull image hub. to so: create personal access token docker hub. this used authenticate instead password. on bitrise, create secret environment variables : docker hub username personal access token. in examples, we’ll use dockerhub_user docker hub username dockerhub_token . use docker login command script step authenticate, with secret env vars arguments: - script@1.1.3: \n inputs: content: | docker login -u $dockerhub_user -p $dockerhub_token\n use docker run command script step run chosen docker image. in example, it’s docker’s official hello-world image. you just replace hello-world with any image want use docker hub. - script@1.1.3: \n inputs: content: | docker login -u $dockerhub_user -p $dockerhub_token\n run hello-world " });
this.add({id:129, 
title:"Setting a custom Docker image in the Workflow Editor", 
body:" setting custom docker image workflow editor in workflow editor bitrise.io, option set path custom docker image. if want run build custom docker environment, strongly recommend basing image base images. our images tool pre-installed, standard bitrise directories created, environments (such $bitrise_deploy_dir ) set, pre-cached build virtual machines. however, decide create docker image read guide, start finish. custom android docker image creating maintaining android docker image quite time consuming! if need install couple additional tools, that, example, with script step instead! for information, see install any additional tool guide. you use android docker image really to! using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub" });
this.add({id:130, 
title:"Creating your own image from a Bitrise image", 
body:" creating image bitrise we different docker image types available. you base any these, depending needs. using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub bitrise docker image types image type description github link quay.io link bitrise base image the bare minimum bitrise image with specific tools installed. https:\/\/github.com\/bitrise-docker\/bitrise-base https:\/\/quay.io\/repository\/bitriseio\/bitrise-base android base image bare-minimum base image with android-specific tools environment. https:\/\/github.com\/bitrise-docker\/android https:\/\/quay.io\/repository\/bitriseio\/android android ndk image built android base image with pre-installed ndk environment. https:\/\/github.com\/bitrise-docker\/android-ndk https:\/\/quay.io\/repository\/bitriseio\/android-ndk android ndk lts image lts “pin” android ndk docker image. https:\/\/github.com\/bitrise-docker\/android-ndk-lts https:\/\/quay.io\/repository\/bitriseio\/android-ndk-lts to base image available images, specify dockerfile with from instruction quay.io id image. in example, we’ll use latest version bitrise base image: from quay.io\/bitriseio\/docker-bitrise-base:latest you use quay.io id image want base image. for example, quay.io\/bitriseio\/android , quay.io\/bitriseio\/android-ndk , quay.io\/bitriseio\/android-ndk-lts , quay.io\/bitriseio\/bitrise-base . don’t use alpha images builds for docker image quay.io , alpha tagged version too. the alpha ones frequently rebuilt not precached on bitrise.io , so avoid those. " });
this.add({id:131, 
title:"Using your created Docker image in a build", 
body:" using created docker image build you set docker image workflow editor pulled with docker pull command . to so: using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub go workflow editor. click stack tab. copy paste id app. for example, quay.io\/bitriseio\/bitrise-base . click save upper-right corner. now able use image run builds bitrise.io . " });
this.add({id:124, 
title:"Running docker commands with a Script Step", 
body:" running docker commands with script step the recommended way using custom docker configuration locally bitrise.io , add script step workflow run docker commands. you use authenticate service hub selected image. we provide examples how run docker commands using script step: " });
this.add({id:125, 
title:"Running docker hello-world", 
body:" running docker hello-world the official hello-world docker image hosted hub. if wish use any images hub, authenticate first. in example, we’re following official getting started guide run hello-world docker image. in example bitrise.yml file, see simple build configuration run image: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n git-clone@3.4.1: {}\n script@1:\n title: docker run hello-world\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n\n login -u $dockerhub_user -p $dockerhub_token\n hello-world " });
this.add({id:126, 
title:"Building and running a Dockerfile", 
body:" building running dockerfile you use dockerfile bitrise repository define docker environment: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n git-clone@3.4.1: {}\n script@1:\n title: docker run\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n\n build -t bitrise-minimal-sample .\n run --rm this workflow will: git clone repository. run docker build -t bitrise-minimal-sample . docker run --rm bitrise-minimal-sample repository’s root. if dockerfile like root repository: from alpine:3.3\n\ncmd cat \/etc\/alpine-release the output look like this: +------------------------------------------------------------------------------+\n| (2) docker run hello-world |\n+------------------------------------------------------------------------------+\n| id: script |\n| version: 1.1.3 collection: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git toolkit: bash time: 2016-11-21t14:28:23z |\n+ build -t bitrise-minimal-sample .\nsending context docker daemon 69.12 kb\n\nstep 1 : from alpine:3.3\n3.3: pulling library\/alpine\n985c5f84712b: fs layer\n985c5f84712b: verifying checksum\n985c5f84712b: download complete\n985c5f84712b: pull complete\ndigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nstatus: downloaded newer image alpine:3.3\n ---> 6c2aa2137d97\nstep 2 cmd cat \/etc\/alpine-release\n running 507cfb961cc7\n 02a0da3ac697\nremoving intermediate container 507cfb961cc7\nsuccessfully built 02a0da3ac697\n+ --rm bitrise-minimal-sample\n3.3.3\n| |\n+---+---------------------------------------------------------------+----------+\n| ✓ | 4.24 sec |\n+---+---------------------------------------------------------------+----------+ " });
this.add({id:127, 
title:"Using docker-compose", 
body:" using docker-compose you run docker image file using docker-compose command. with compose, configure application’s services start with single command. for example, set docker-compose.yml like repository root (where dockerfile is): version: '2'\nservices:\n sample-app:\n build: . now run services with single docker-compose script step: - script@1.1.3:\n title: docker run\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n docker-compose run --rm sample-app docker compose build run image automatically. you don’t specify -t tag services used docker-compose tag image automatically. " });
this.add({id:125, 
title:"Running docker hello-world", 
body:" running docker hello-world the official hello-world docker image hosted hub. if wish use any images hub, authenticate first. in example, we’re following official getting started guide run hello-world docker image. in example bitrise.yml file, see simple build configuration run image: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n git-clone@3.4.1: {}\n script@1:\n title: docker run hello-world\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n\n login -u $dockerhub_user -p $dockerhub_token\n hello-world " });
this.add({id:126, 
title:"Building and running a Dockerfile", 
body:" building running dockerfile you use dockerfile bitrise repository define docker environment: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n git-clone@3.4.1: {}\n script@1:\n title: docker run\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n\n build -t bitrise-minimal-sample .\n run --rm this workflow will: git clone repository. run docker build -t bitrise-minimal-sample . docker run --rm bitrise-minimal-sample repository’s root. if dockerfile like root repository: from alpine:3.3\n\ncmd cat \/etc\/alpine-release the output look like this: +------------------------------------------------------------------------------+\n| (2) docker run hello-world |\n+------------------------------------------------------------------------------+\n| id: script |\n| version: 1.1.3 collection: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git toolkit: bash time: 2016-11-21t14:28:23z |\n+ build -t bitrise-minimal-sample .\nsending context docker daemon 69.12 kb\n\nstep 1 : from alpine:3.3\n3.3: pulling library\/alpine\n985c5f84712b: fs layer\n985c5f84712b: verifying checksum\n985c5f84712b: download complete\n985c5f84712b: pull complete\ndigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nstatus: downloaded newer image alpine:3.3\n ---> 6c2aa2137d97\nstep 2 cmd cat \/etc\/alpine-release\n running 507cfb961cc7\n 02a0da3ac697\nremoving intermediate container 507cfb961cc7\nsuccessfully built 02a0da3ac697\n+ --rm bitrise-minimal-sample\n3.3.3\n| |\n+---+---------------------------------------------------------------+----------+\n| ✓ | 4.24 sec |\n+---+---------------------------------------------------------------+----------+ " });
this.add({id:127, 
title:"Using docker-compose", 
body:" using docker-compose you run docker image file using docker-compose command. with compose, configure application’s services start with single command. for example, set docker-compose.yml like repository root (where dockerfile is): version: '2'\nservices:\n sample-app:\n build: . now run services with single docker-compose script step: - script@1.1.3:\n title: docker run\n inputs:\n content: |-\n #!\/bin\/bash\n # fail any commands fails\n set -e\n debug log\n -x\n docker-compose run --rm sample-app docker compose build run image automatically. you don’t specify -t tag services used docker-compose tag image automatically. " });
this.add({id:128, 
title:"Using a custom Docker image from Docker Hub", 
body:" using custom docker image hub you use bitrise with docker image pulled hub, see running docker hello-world example. however, free plan anonymous users, docker hub allows limited number image pulls. if set workflow editor, authentication performed: pull user bitrise public ip address. with users going option, rate limit mean wouldn’t able start builds. the workaround simple: need use script step authenticate with docker hub account, pull image hub. to so: create personal access token docker hub. this used authenticate instead password. on bitrise, create secret environment variables : docker hub username personal access token. in examples, we’ll use dockerhub_user docker hub username dockerhub_token . use docker login command script step authenticate, with secret env vars arguments: - script@1.1.3: \n inputs: content: | docker login -u $dockerhub_user -p $dockerhub_token\n use docker run command script step run chosen docker image. in example, it’s docker’s official hello-world image. you just replace hello-world with any image want use docker hub. - script@1.1.3: \n inputs: content: | docker login -u $dockerhub_user -p $dockerhub_token\n run hello-world " });
this.add({id:129, 
title:"Setting a custom Docker image in the Workflow Editor", 
body:" setting custom docker image workflow editor in workflow editor bitrise.io, option set path custom docker image. if want run build custom docker environment, strongly recommend basing image base images. our images tool pre-installed, standard bitrise directories created, environments (such $bitrise_deploy_dir ) set, pre-cached build virtual machines. however, decide create docker image read guide, start finish. custom android docker image creating maintaining android docker image quite time consuming! if need install couple additional tools, that, example, with script step instead! for information, see install any additional tool guide. you use android docker image really to! using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub" });
this.add({id:130, 
title:"Creating your own image from a Bitrise image", 
body:" creating image bitrise we different docker image types available. you base any these, depending needs. using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub bitrise docker image types image type description github link quay.io link bitrise base image the bare minimum bitrise image with specific tools installed. https:\/\/github.com\/bitrise-docker\/bitrise-base https:\/\/quay.io\/repository\/bitriseio\/bitrise-base android base image bare-minimum base image with android-specific tools environment. https:\/\/github.com\/bitrise-docker\/android https:\/\/quay.io\/repository\/bitriseio\/android android ndk image built android base image with pre-installed ndk environment. https:\/\/github.com\/bitrise-docker\/android-ndk https:\/\/quay.io\/repository\/bitriseio\/android-ndk android ndk lts image lts “pin” android ndk docker image. https:\/\/github.com\/bitrise-docker\/android-ndk-lts https:\/\/quay.io\/repository\/bitriseio\/android-ndk-lts to base image available images, specify dockerfile with from instruction quay.io id image. in example, we’ll use latest version bitrise base image: from quay.io\/bitriseio\/docker-bitrise-base:latest you use quay.io id image want base image. for example, quay.io\/bitriseio\/android , quay.io\/bitriseio\/android-ndk , quay.io\/bitriseio\/android-ndk-lts , quay.io\/bitriseio\/bitrise-base . don’t use alpha images builds for docker image quay.io , alpha tagged version too. the alpha ones frequently rebuilt not precached on bitrise.io , so avoid those. " });
this.add({id:131, 
title:"Using your created Docker image in a build", 
body:" using created docker image build you set docker image workflow editor pulled with docker pull command . to so: using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub go workflow editor. click stack tab. copy paste id app. for example, quay.io\/bitriseio\/bitrise-base . click save upper-right corner. now able use image run builds bitrise.io . " });
this.add({id:130, 
title:"Creating your own image from a Bitrise image", 
body:" creating image bitrise we different docker image types available. you base any these, depending needs. using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub bitrise docker image types image type description github link quay.io link bitrise base image the bare minimum bitrise image with specific tools installed. https:\/\/github.com\/bitrise-docker\/bitrise-base https:\/\/quay.io\/repository\/bitriseio\/bitrise-base android base image bare-minimum base image with android-specific tools environment. https:\/\/github.com\/bitrise-docker\/android https:\/\/quay.io\/repository\/bitriseio\/android android ndk image built android base image with pre-installed ndk environment. https:\/\/github.com\/bitrise-docker\/android-ndk https:\/\/quay.io\/repository\/bitriseio\/android-ndk android ndk lts image lts “pin” android ndk docker image. https:\/\/github.com\/bitrise-docker\/android-ndk-lts https:\/\/quay.io\/repository\/bitriseio\/android-ndk-lts to base image available images, specify dockerfile with from instruction quay.io id image. in example, we’ll use latest version bitrise base image: from quay.io\/bitriseio\/docker-bitrise-base:latest you use quay.io id image want base image. for example, quay.io\/bitriseio\/android , quay.io\/bitriseio\/android-ndk , quay.io\/bitriseio\/android-ndk-lts , quay.io\/bitriseio\/bitrise-base . don’t use alpha images builds for docker image quay.io , alpha tagged version too. the alpha ones frequently rebuilt not precached on bitrise.io , so avoid those. " });
this.add({id:131, 
title:"Using your created Docker image in a build", 
body:" using created docker image build you set docker image workflow editor pulled with docker pull command . to so: using image hosted docker hub if wish use image hosted docker hub, set path stack tab workflow editor! use script step instead authenticate docker hub account run selected image. using a custom docker image from docker hub go workflow editor. click stack tab. copy paste id app. for example, quay.io\/bitriseio\/bitrise-base . click save upper-right corner. now able use image run builds bitrise.io . " });
this.add({id:132, 
title:"Running your build locally in Docker", 
body:" running build locally docker you run bitrise build docker machines: need docker, cli, image. docker hub rate limit from july 15, 2024, rate limiting apply downloads docker hub. if pull image hub authentication bitrise build linux machines, run issues limiting. bitrise mirroring popular public docker images, avoid potential issues with rate limiting, either: authenticate docker image pulling requests hub. for details docker's policy, refer docker hub rate limit . switch docker registry store images. to able run linux stack builds locally, you’ll need docker : for linux, just follow official install instructions . for mac, use docker easiest way started. in guide, we’ll use bitrise android sample project . large images ahead the official bitrise docker images quite large include wide variety preinstalled tools. you’ll need 20-25 gb free disc space! if you’re familiar with bitrise cli , try first. you don’t master cli, know bitrise run workflow does, tutorial. " });
this.add({id:133, 
title:"Downloading docker images", 
body:" downloading docker images install docker . make sure bitrise.yml repository. you don’t commit it, file exist repository’s root directory. cd repository’s directory mac\/linux. pull image registry: docker pull bitriseio\/android-20.04:latest\n run following command: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android-20.04:latest bitrise workflow` if want just jump container experiment inside, replace --rm quay.io\/bitriseio\/android-20.04:latest bitrise run workflow with -it quay.io\/bitriseio\/android-20.04:latest bash start interactive bash shell inside container. for example: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android-20.04:latest bash\n in general, project android don’t use ndk, preserve precious disk space, quay.io\/bitriseio\/android docker image. you official bitrise images quay page . in example, we’re using quay.io\/bitriseio\/android one. download docker images quay : docker pull bitriseio\/android-20.04:latest`\n be aware quite bit time, image 10 gb. if download fails hangs, restart any time running command again. download bitrise build configuration ( bitrise.yml ) root directory repository. you download project’s bitrise.yml bitrise.yml tab workflow editor bitrise.io . in terminal \/ command line ( cd ) root directory repository. check bitrise.yml location. if try reproduce issue, git clone repository new directory, so directory contain files committed repository! it’s frequent reproducibility issue try run commands normal working directory, likely repository, example, .gitignore . " });
this.add({id:134, 
title:"Running the build", 
body:" running build run build with following command: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android:latest bitrise workflow --rm quay.io\/bitriseio\/android:latest bitrise run workflow with -it quay.io\/bitriseio\/android:latest bash start interactive bash shell inside container. for example: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android:latest bash`. this command share current directory (the repository) shared volume with docker container, make available inside container path \/bitrise\/src . after this, run bitrise run workflow , run workflow inside container. to exit container, just exit . don’t forget replace workflow with actual id workflow bitrise.yml , with like primary ! the --env ci=false flag sets environment variable ci false - make bitrise cli skip certain steps sense run ci environment. for example, git clone step - code, so there’s need git clone inside docker container (that’s shared code directory --volume ). the --rm flag tells docker discard container docker run command finishes. this means run again, thing persist docker run .. commands files stored shared --volume (in repository’s directory). every file generated temp any location discarded \/ won’t kept. if want debug container failed build, feel free remove --rm flag, check docker tutorial how connect existing docker container. please note simply running command use container, create new one! the --privileged flag allows access control host docker container, so use unless trust image use! this required allowing vpns work (to change network configs host), example. the --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" flag exposes docker socket host container - required want run containers container, any docker command build \/ inside container. " });
this.add({id:133, 
title:"Downloading docker images", 
body:" downloading docker images install docker . make sure bitrise.yml repository. you don’t commit it, file exist repository’s root directory. cd repository’s directory mac\/linux. pull image registry: docker pull bitriseio\/android-20.04:latest\n run following command: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android-20.04:latest bitrise workflow` if want just jump container experiment inside, replace --rm quay.io\/bitriseio\/android-20.04:latest bitrise run workflow with -it quay.io\/bitriseio\/android-20.04:latest bash start interactive bash shell inside container. for example: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android-20.04:latest bash\n in general, project android don’t use ndk, preserve precious disk space, quay.io\/bitriseio\/android docker image. you official bitrise images quay page . in example, we’re using quay.io\/bitriseio\/android one. download docker images quay : docker pull bitriseio\/android-20.04:latest`\n be aware quite bit time, image 10 gb. if download fails hangs, restart any time running command again. download bitrise build configuration ( bitrise.yml ) root directory repository. you download project’s bitrise.yml bitrise.yml tab workflow editor bitrise.io . in terminal \/ command line ( cd ) root directory repository. check bitrise.yml location. if try reproduce issue, git clone repository new directory, so directory contain files committed repository! it’s frequent reproducibility issue try run commands normal working directory, likely repository, example, .gitignore . " });
this.add({id:134, 
title:"Running the build", 
body:" running build run build with following command: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android:latest bitrise workflow --rm quay.io\/bitriseio\/android:latest bitrise run workflow with -it quay.io\/bitriseio\/android:latest bash start interactive bash shell inside container. for example: docker run --privileged --env ci=false --volume \"$(pwd):\/bitrise\/src\" \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android:latest bash`. this command share current directory (the repository) shared volume with docker container, make available inside container path \/bitrise\/src . after this, run bitrise run workflow , run workflow inside container. to exit container, just exit . don’t forget replace workflow with actual id workflow bitrise.yml , with like primary ! the --env ci=false flag sets environment variable ci false - make bitrise cli skip certain steps sense run ci environment. for example, git clone step - code, so there’s need git clone inside docker container (that’s shared code directory --volume ). the --rm flag tells docker discard container docker run command finishes. this means run again, thing persist docker run .. commands files stored shared --volume (in repository’s directory). every file generated temp any location discarded \/ won’t kept. if want debug container failed build, feel free remove --rm flag, check docker tutorial how connect existing docker container. please note simply running command use container, create new one! the --privileged flag allows access control host docker container, so use unless trust image use! this required allowing vpns work (to change network configs host), example. the --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" flag exposes docker socket host container - required want run containers container, any docker command build \/ inside container. " });
this.add({id:135, 
title:"Accounts", 
body:" accounts when sign bitrise, create individual user account. by itself, having account isn’t add apps run builds. for that, workspace. your bitrise account managed account page . from page, can: edit profile , including username, email address, password, avatar. enable two-factor authentication . find workspaces you're of. create manage personal access tokens used bitrise api . register test devices . can't run builds yet! when sign bitrise, create individual user account. by itself, having account isn’t add apps run builds. to able work bitrise, need options: creating workspace . get invited existing workspace . get added outside contributor app’s team . " });
this.add({id:136, 
title:"Connecting to services", 
body:" connecting services you connect git provider services, github\/gitlab\/bitbucket account bitrise account. to use features bitrise offers, want connect services git provider any apple use. our guides explain how connect github\/gitlab\/bitbucket account bitrise (or self-hosted gitlab instance workspace uses it). you certain git provider bitrise. disconnect new any time. you learn authentication methods use connect bitrise with apple services app store connect developer portal. whether id password api key authentication, got covered. " });
this.add({id:137, 
title:"Configuring repository access", 
body:" configuring repository access to advantage features bitrise offers, including automatic webhook registration, need connect github\/gitlab\/bitbucket account account. bitrise needs access code git repository able build. we recommend connecting provider account offer main methods doing so: the bitrise github app : we strongly recommend using github app connect bitrise account github. the app offers increased security granular repository access. using means don't need ssh keys webhooks. this works workspace level: single organization. oauth application git provider allows access repositories account. this means connecting personal bitrise account method supported github, gitlab, bitbucket. you connect git provider accounts either: connecting account adding new app . connecting account account settings page. one account git provider please note connect accounts git provider (for example, github accounts) bitrise. connecting git provider account final. you disconnect connect different any time: linked wrong git account bitrise . " });
this.add({id:138, 
title:"GitHub App integration", 
body:" github app integration the bitrise github app allows users connect workspace account organization with provides granular access increased security automatic status updates. the best way connect bitrise account github repositories integrating with github app . the bitrise github app number features make integration easier: the app eliminates need ssh key, personal access token, service credential user. for access, generates temporary access token build, significantly increasing security. it provides granular access repositories: need grant entire github organization, instead select specific repositories app access. with app installed, automatically receive bitrise status updates directly github with checks app. no need configuring reports separately. the bitrise github app supported cloud users. github enterprise server users need create install different github app, described relevant guide. " });
this.add({id:139, 
title:"Connecting via the GitHub App integration", 
body:" connecting github app integration this guide intended github cloud users, including enterprise wish install bitrise app connect workspace account organization with app. for server separate guide: integrating self-hosted github enterprise server with bitrise you connect github app integration ways: from workspace settings page. when adding new bitrise app. one github app installation workspace a workspace associated with single installation bitrise github app. no connected multiple installations " });
this.add({id:140, 
title:"Connecting a GitHub App from the Workspace settings page", 
body:" connecting github app workspace settings page a bitrise github app installation tied workspace. you install check connection workspace settings page. on bitrise main page, select workspace dropdown menu. from navigation menu left, select settings . on workspace settings page, select integrations . select git provider tab. under github , see github app card with connect bitrise github app . click connect . if haven't authorized bitrise github app before, prompted authorization point: you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected workspace settings page. authorization if authorized github install app, request installation. once admin approves installation, come select app installation list. if existing apps with oauth connection, recommend switching github app connection . " });
this.add({id:141, 
title:"Connecting a GitHub App when adding a new app", 
body:" connecting github app adding new app during process adding new app bitrise, select how bitrise access repository. this allows connecting github app. start process adding new app . at select repository section, select github app (recommended) provider dropdown menu. click connect account . you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected continue adding new bitrise app. " });
this.add({id:142, 
title:"Connecting a Git provider with OAuth when adding an app", 
body:" connecting git provider with oauth adding app connecting git provider account with oauth app allows bitrise to: list available repositories adding new app . automatically register webhooks . webhooks allow setting build triggers enable use git insights . automatically register ssh keys . log bitrise.io account. click + symbol menu bar select add new app web ui . adding new app cli you add new app using cli. for information, check adding a new app from a cli . on create new app page, select account set app’s privacy setting. use radio buttons select repository section choose selecting remote repository entering url manually. if opt enter git url manually, add git repository (clone) url field click next . choose git service provider app’s repository, chose select remote repository. if account with connected bitrise account, ui display option connect. click connect account . this login page git provider. log git provider account. you prompted authorize bitrise.io - it! if successful, redirected bitrise, pop-up message inform successfully linked account. click okay . " });
this.add({id:143, 
title:"Connecting a Git provider with OAuth from the Account settings page", 
body:" connecting git provider with oauth account settings page connecting git provider account with oauth application allows bitrise to: list available repositories adding new app . automatically register webhooks . webhooks allow setting build triggers enable use git insights . automatically register ssh keys . in upper right corner, open account selector dropdown menu. select account settings option. on left, connected git providers , click toggle git provider wish connect. log git provider account. you prompted authorize bitrise.io - it! if successful, redirected bitrise, pop-up message inform successfully linked account. click okay . " });
this.add({id:144, 
title:"Disconnecting a Git provider account", 
body:" disconnecting git provider account in upper right corner, open account selector dropdown menu. select account settings option. on left connected git providers , click toggle git provider wish disconnect. " });
this.add({id:145, 
title:"Switching from OAuth connection to the GitHub App", 
body:" switching oauth connection github app if bitrise app oauth connection set github account, change app any time losing functionality. we strongly recommend doing switch: with installed, longer need service credential user, ssh key, webhook run builds. can't switch once switch app oauth connection github app, won't able back! to switch: install bitrise github app described relevant guide: connecting a github app from the workspace settings page . open app bitrise with user admin role app . on main page app, click app settings icon: . on left navigation menu, select integrations git provider tab. in git integration status section, see blue card with information github app support. to switch, click switch github app . " });
this.add({id:146, 
title:"Connecting self-hosted GitLab instances", 
body:" connecting self-hosted gitlab instances for workspaces, bitrise supports connecting self-hosted gitlab instances. once it’s done, add apps privately hosted repositories. for workspaces, bitrise supports connecting self-hosted gitlab instances. connecting simple, it’s done, add apps privately hosted repositories. all functions got used with publicly repositories available! setting app self-hosted gitlab repository simple: bitrise needs authorized application entire instance application id secret value belonging bitrise oauth application added workspace bitrise.io . " });
this.add({id:147, 
title:"Configuring the GitLab connection", 
body:" configuring gitlab connection to access privately hosted gitlab repositories bitrise, need create new oauth application account, assign appropriate credentials server. publicly resolvable ip address your self-hosted gitlab instance publicly resolvable ip address, bitrise won’t able connect it. log gitlab instance with root privileges. if connect bitrise root privileges , workspace’s team members access repository gitlab instance . go admin area clicking little wrench icon menu bar. on left menu bar, select applications , click new application . in name field, enter clearly identifies application. for sake simplicity, recommend bitrise . in callback url field, enter https:\/\/app.bitrise.io\/users\/auth\/gitlab\/callback . in scopes menu, check api . set confidential option no . if newly created app configured confidential, bitrise won't able access it! click submit . on page, application id secret . you’ll need connect gitlab instance bitrise.io . log bitrise open account selector dropdown menu right. find workspace click little gear icon workspace's profile page. select self-hosted gitlab option left menu bar. add self-hosted gitlab credentials: app id secret self-hosted url you done! now able access privately hosted repositories with bitrise. " });
this.add({id:148, 
title:"Adding a new app from a self-hosted GitLab repository", 
body:" adding new app self-hosted gitlab repository log bitrise.io click + symbol menu bar select add new app web ui options. select workspace owner app. when prompted select git provider, gitlab . select self-hosted option. if haven’t provided self-hosted gitlab credentials workspace before, stage. click connect . once connected, proceed usual: adding a new app" });
this.add({id:149, 
title:"Apple services connection", 
body:" apple services connection connect bitrise builds apple services using api key authentication id order manage ios code signing deployment. your workflow contain steps need information apple service use, example, app store connect developer portal. these services supported following steps: manage ios code signing deploy app store connect with deliver (formerly itunes connect) deploy app store connect - application loader (formerly itunes connect) fastlane to connect steps with apple service wish use build runs bitrise, need provide authentication data bitrise select established method app. you authenticate with apple’s official api key apple id password. " });
this.add({id:150, 
title:"Apple two-factor authentication requirements", 
body:" apple two-factor authentication requirements apple’s two-factor authentication (2fa) provides extra layer security apple account. if authenticating with api key so far, affected two-factor authentication requirement. if, however, authenticating with apple id password, new 2fa requirement affects you, you’ll reconnect apple developer account apple service connection page bitrise profile. you’ll provide two-factor authentication\/two-step verification code app-specific password well. please official apple documentation how generate app-specific password . " });
this.add({id:151, 
title:"Steps that require connecting to your Apple Developer account", 
body:" steps require connecting apple developer account the following steps require connection apple services (such app store connect developer portal). if you’re using any steps, make sure establish with right method. steps requiring apple authentication steps connection type manage ios code signing api key authentication, apple id authentication step inputs xcode archive & export ios api key authentication, apple id authentication step inputs export ios tvos xcode archive api key authentication, apple id authentication step inputs xcode build testing ios api key authentication, apple id authentication step inputs fastlane api key authentication, apple id authentication step inputs deploy app store connect with deliver (formerly itunes connect) api key authentication, apple id authentication step inputs deploy app store connect - application loader (formerly itunes connect) api key authentication, apple id authentication step depending authentication use project, following options: api key authentication: if can, recommend use authentication method. it does require two-factor authentication. all takes connecting apple services providing name , issuer id , key id upload private key (.p8) , selecting account team tab app’s settings. the data automatically populates respective fields steps work with api key authentication. apple id authentication: if use api key authentication, authenticate with password. provide apple id , password , 2fa code app-specific password select account team tab app’s settings. the data automatically populates respective fields steps work with apple id authentication. api key apple id authentication step inputs: if wish deploy multiple teams team different connected you’ve using, add preferred step’s inputs. some steps, xcode archive & export ios, override option, like fastlane, options id level override. " });
this.add({id:152, 
title:"Apple service permissions", 
body:" apple service permissions in order successfully connect bitrise apple services, need set right roles accesses account id api keys. in order successfully connect bitrise apple services, need set right roles accesses account id api keys. you appropriate access rights able to: use automatic code signing. deploy app app store. the exact roles accesses need depend number factors: authentication method, use xcode managed signing, details app deployment process, things. in guide, we'll list roles based main authentication methods : api key authentication apple id authentication. " });
this.add({id:153, 
title:"Required access with API key authentication", 
body:" required access with api key authentication to use bitrise steps with apple api key authentication, need create app store connect appropriate access level. the level depends do. if, example, use xcode managed signing project wish export generated ipa file with distribution certificate app store provisioning profile, connect api key admin access. table 9, “ contains required access automatic code signing. in table, grouped signing actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. access required automatic code signing with api key authentication code signing action required access with xcode managed signing turned on required access with xcode managed signing turned off exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids developer developer exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids admin developer table 10, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. access required app store deployment with api key authentication app store deployment actions required access api key uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:154, 
title:"Required access with Apple ID authentication", 
body:" required access with apple id authentication to use bitrise steps with apple id authentication, need make sure appropriate role developer team. table 11, “ contains necessary roles using automatic code signing bitrise. in table, grouped actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. read different distribution methods: creating a signed ipa for xcode projects . xcode managed signing if use apple id authentication bitrise, xcode managed signing automatically turned project. instead, bitrise uses automatic code logic. roles required automatic code signing with apple id authentication code signing action required role exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager table 12, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. roles required app store deployment with api key authentication app store deployment actions required role apple id uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:155, 
title:"Connecting to an Apple service with API key", 
body:" connecting apple service with api key connect apple service with api key manage ios code signing deployment. the authentication recommended way connecting bitrise services. connecting apple service (such app store connect apple developer portal) with api key requires generating key, adding authentication data bitrise, assigning app. the api key authentication recommended way connecting bitrise apple services. you 50 keys added apple services connection page app use one. no step input modifications needed with method, step inputs related authenticating with apple api key automatically populated connection set up. you don't manually modify input fields all. " });
this.add({id:156, 
title:"Adding API key authentication data on Bitrise", 
body:" adding api key authentication data bitrise there ways add api key authentication data bitrise: on profile settings page. on integrations page app settings page. profile page app settings page on app store connect , generate new api key with admin access users access . you need key, key id issuer bitrise. admin access you use admin role new app store connect api key! the step build fail set different role. in upper right corner, open account selector dropdown menu. select account settings option. on left, select apple service connection . click add api key . fill required fields: name : your generated api key's name. issuer id : to issuer id, log to app store connect and select users access , select api keys tab.the issuer id appears near page. to copy id, click copy id. key id : when successfully generate new api key, app store connect shows key id. upload .p8 file: drag drop upload field, click select file computer. click connect . on app store connect , generate new api key with admin access users access . you need key, key id issuer bitrise. admin access you use admin role new app store connect api key! the step build fail set different role. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . select stores tab. find app store connect section. find api key authentication (recommended) option. click add api key . fill required fields: name : your generated api key's name. issuer id : to issuer id, log to app store connect and select users access , select api keys tab.the issuer id appears near page. to copy id, click copy id. key id : when successfully generate new api key, app store connect shows key id. upload .p8 file: drag drop upload field, click select file computer. click connect . once done, assign api key any app access account. from then, use connection app store connect. " });
this.add({id:157, 
title:"Assigning API key authentication to your app", 
body:" assigning api key authentication app to use api key authentication apple services app , must: add api key bitrise : you add multiple api keys account. assign api key app: each app assigned it. to assign api key app: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . select stores tab. find app store connect section. find api key authentication (recommended) option. click add api key api key set change api key existing assigned. multiple apps with api key with add api key button, add new app store connect api key bitrise account. other apps access use key, too. if changing existing api key, select key need dropdown menu dialog box. you see api key keys registered bitrise account. the step able connect app store connect apple developer portal build. " });
this.add({id:158, 
title:"Connecting to an Apple service with Apple ID", 
body:" connecting apple service with id connect apple service with id manage ios code signing deployment. connecting apple service (such app store connect developer portal) with id requires first add password apple service connection page, select app use apple id authentication build running. if use api key authentication, recommend try option. please note connect apple id bitrise. apple accounts with two-factor authentication enabled if two-factor authentication enabled apple account, provide app-specific password process. learn how generate app-specific password security section apple id account page . " });
this.add({id:159, 
title:"Adding Apple ID authentication data on Bitrise", 
body:" adding apple id authentication data bitrise in upper right corner, open account selector dropdown menu. select account settings option. on left menu bar, select apple service connection . click add connection button. provide apple id password popup window. click connect . enter verification code two factor authentication window. add app-specific password . click verify continue. you prompted provide verification code. your authentication expires 30 days authenticate again. when happens, apple service connection page, automatically ask two-factor authentication (2fa) code authenticate again. there list apple developer accounts defined. to far right id connection, 3 dots. click dots select re-authenticate ( 2sa\/2fa ). continue with assigning apple developer account app. " });
this.add({id:160, 
title:"Assigning Apple ID authentication to your app", 
body:" assigning apple id authentication app connecting apple service (such app store connect developer portal) with id authentication requires first add data bitrise.io assign credentials app. with method, don't worry using steps connect services: step inputs related automatically filled in. can't assign users' apple credentials you set user account's apple id authentication data app. if app needs else's credentials, log make change themselves. to assign apple id authentication data app: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll connection apple services section. find apple id authentication option. click change <username> . if can't option, probably haven't set apple credentials bitrise.io. note changing selected user removes previous user. need use user's again, log change themselves. test connection by clicking test connection , check bitrise access apple services using provided credentials. steps able connect apple service build. " });
this.add({id:161, 
title:"Connecting to an Apple Service with Step inputs", 
body:" connecting apple service with step inputs if want deploy team authentication different connected you’ve using, add preferred step’s inputs. if wish deploy multiple teams team authentication different connected you’ve using, add preferred step’s inputs. this override connection previously set bitrise developer connection . this way connection restricted given step set authentication. 2fa apple id authentication if 2fa required apple id, use id authentication with deploy app store connect with deliver (formerly itunes connect) fastlane steps instead authenticating step inputs. " });
this.add({id:162, 
title:"Authenticating in a Step with API key", 
body:" authenticating step with api key api-key & apple id api-key steps add following steps workflow: fastlane deploy app store connect with deliver (formerly itunes connect) deploy app store connect - application loader (formerly itunes connect) either api key apple id authentication step inputs you add type authentication step, api key apple id one. in case, make sure bitrise apple developer connection input set , step with configured authentication method apple service connection (unless decide remove connection teams tab). upload api key generic file storage section code signing & files tab. set bitrise apple developer connection input . set issuer id secret environment variable respective field step. configure api key path api issuer inputs. save changes run new build. add following steps workflow: manage ios code signing xcode archive & export ios export ios tvos xcode archive xcode build testing ios upload app store connect api private key file (.p8 file) the  generic file storage  in the  code signing & files  tab. set automatic code signing method api-key . set following step inputs the  app store connect connection override input group: app store connect api private key : local path remote url private key (.p8 file) app store connect api. set input automatically generated env var connected api file uploaded the generic file storage in step 2. app store connect api key id : private key id used app store connect authentication. app store connect api issuer id : private key issuer id used app store connect authentication. " });
this.add({id:163, 
title:"Authenticating in a Step with Apple ID and password", 
body:" authenticating step with apple id password either api key apple id authentication step inputs you add type authentication step, api key apple id one. in case, make sure bitrise apple developer connection input set , step with configured authentication method apple service connection (unless decide remove connection teams tab). add step workflow. set apple id password . set bitrise apple developer connection input . save changes run new build. " });
this.add({id:164, 
title:"Steps requiring Apple authentication", 
body:" steps requiring apple authentication check bitrise steps require connection apple service using api key id. in guide list steps require authentication methods choose depending app’s requirement. " });
this.add({id:165, 
title:"Manage iOS Code Signing Step", 
body:" manage ios code signing step this step takes care setting required code signing assets project built bitrise. the step uses api key apple id password authentication connect service. once connection configured, will: generate, update download provisioning profiles needed ios project. verify register project's bundle ids apple developer site. register ios devices connected bitrise account with app store connect. connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:166, 
title:"Xcode Archive & Export for iOS Step", 
body:" xcode archive & export ios step the step archives xcode project running the  xcodebuild archive  command exports archive ipa file with the  xcodebuild -exportarchive  command. this ipa file shared, installed test devices, uploaded app store connect. the step perform ios code signing automatic code signing method input specifies method. by default, it's turned off. to perform ios code signing, use api key apple id authentication. connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:167, 
title:"Export iOS and tvOS Xcode archive Step", 
body:" export ios tvos xcode archive step exports ipa existing ios tvos .xcarchive file. you add multiple export tvos xcode archive steps workflows create multiple different signed ipa files. the step perform ios code signing automatic code signing method input specifies method. by default, it's turned off. to perform ios code signing, use api key apple id authentication. connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:168, 
title:"Xcode Build for testing for iOS Step", 
body:" xcode build testing ios step the step runs xcode's  xcodebuild  command with the build-for-testing option. this builds app associated tests so can, example, upload third-party testing service run real device. the step creates an  .xctestrun  file. to able run tests real device needs code signing. the  automatic code signing method  step input allows log apple developer account based the apple service connection provide bitrise and download any provisioning profiles needed project the  distribution method . connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:169, 
title:"Deploy to App Store Connect with Deliver Step", 
body:" deploy app store connect with deliver step with step , upload screenshots, metadata binaries https:\/\/appstoreconnect.apple.com\/ submit app app store review using fastlane deliver action. the deploy app store connect with deliver (formerly itunes connect) step connect apple developer account with id app store connect api, inputs. please note case 2fa enabled id, deploy app store connect with deliver (formerly itunes connect) step work with apple id authentication set service page profile. the default method api key authentication. choose connection works project: connecting to an apple service with api keyconnecting to an apple service with apple idconnecting to an apple service with step inputs" });
this.add({id:170, 
title:"Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step", 
body:" deploy app store connect - application loader (formerly itunes connect) step with step , upload binaries (.ipa .pkg files) https:\/\/appstoreconnect.apple.com\/ . the deploy app store connect - application loader (formerly itunes connect) step connect apple developer account with app store connect api, id password, inputs. choose connection method works project: connecting to an apple service with api keyconnecting to an apple service with apple idconnecting to an apple service with step inputs" });
this.add({id:171, 
title:"fastlane Step", 
body:" fastlane step with step run fastlane lanes bitrise just like locally. check guide integrating fastlane bitrise information. please note case 2fa enabled apple id, fastlane step work with apple id authentication set apple service page profile. two-factor authentication fails with fastlane step in cases, fastlane step doesn't value fastlane_session variable correctly attempting connect apple developer portal, causing two-factor authentication fail. check potential workaround issue. connecting to an apple service with api keyconnecting to an apple service with apple idconnecting to an apple service with step inputs" });
this.add({id:172, 
title:"SAML SSO in Bitrise", 
body:" saml sso bitrise velocity enterprise users create log bitrise workspace using saml sso provider’s provide extra layer security. workspace members log bitrise using saml sso provider’s system. with sso, workspaces able apply security guidelines provider accessing workspace. managing role level access sso supported bitrise does support user authorization management (assigning roles) sso. bitrise does support user authentication (signup\/login) sso. before connecting saml sso workspace, make sure: you saml sso provider (identity provider) connect bitrise administrator hand. your account bitrise velocity enterprise build platform plan . if doesn’t workspace, ahead create one. setting saml sso existing brand new workspaces bitrise. only workspace owner set saml sso bitrise workspace. " });
this.add({id:173, 
title:"Navigating to the Single Sign-On page of Bitrise", 
body:" navigating single sign-on page bitrise if workspace owner bitrise, use single sign-on tab set saml sso connection provider bitrise workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left menu bar, click single sign-on single sign-on page. continue with setting saml sso workspace bitrise. " });
this.add({id:174, 
title:"Authorizing SAML SSO", 
body:" authorizing saml sso once workspace owner set saml sso, authorize sso logging sso. make sure you’re logged bitrise usual way. use browser window continue. bitrise sends verification e-mail workspace members. by clicking log in saml sso button using provided url, workspace members authorize saml sso login. the email shows owner’s address (should need contact them.) click log in saml sso button copy-paste url new tab browser. you’re directed bitrise allow “workspace name” sign page. click authorize trust workspace control bitrise account sign-in process. if you’re logged saml sso provider, you’ll automatically taken bitrise dashboard. if you’re not, you’ll prompted log saml sso provider’s site, taken bitrise dashboard. click don’t allow invitation email untrusted source. note using different non-matching email address, error message. make sure log with right address bitrise, sso provider site. if went well, landing bitrise dashboard. " });
this.add({id:175, 
title:"Joining a SAML SSO Workspace as a new member", 
body:" joining saml sso workspace new member if bitrise workspace owner invites workspace, email invitation join saml sso. let’s see how! go mailbox email titled saml invitation instructions . click sign sso button copy provided url paste new browser. our almost page appears. provide username like use bitrise workspace. please letters, numbers, underscores (_), dashes (-) dots (.) username. the email field non-editable. click finish sign-up button. if went well, you’re landing bitrise add first app. " });
this.add({id:176, 
title:"Checking SAML SSO statuses on Bitrise", 
body:" checking saml sso statuses bitrise now workspace owner set saml sso workspace, members (including owner) check member’s statuses team tab. accessing single sign-on tab the single sign-on tab available workspace owner. there kinds saml sso statuses bitrise. saml is enabled: login saml sso enabled. saml is disabled: the workspace member enabled saml sso connection yet. to enable it, follow instructions verification email bitrise. go workspace’s profile page. select team left menu. go members tab check workspace member’s saml status. " });
this.add({id:177, 
title:"Enforcing SAML SSO on a Workspace", 
body:" enforcing saml sso workspace enforcing saml sso workspace provides extra layer security: enforce security guidelines bitrise (for example, password format requirements, two-factor authentication). enforced saml sso enforcing saml sso workspace makes way logging in\/signing workspace. one workspace you member workspaces enforced saml sso bitrise. log bitrise hover left navigation bar. make sure right workspace selected. select settings . go workspace’s single sign on tab. check enforce saml sso checkbox enforce saml sso. unable enforce saml sso a workspace owner enforce saml sso members enabled connection with enforces sso. click save changes . now workspace members log saml sso. " });
this.add({id:178, 
title:"Adding a new user to a Workspace with enforced SAML SSO", 
body:" adding new user workspace with enforced saml sso once saml sso enforced workspace, add new users it. but case, it's important differentiate types users: users with existing accounts bitrise : we recommend workspace admin turns enforced sso invites user workspace. the invited bitrise invitation process enable connection. once done, turn enforce sso switch on. users new bitrise haven't registered account : the workspace admin doesn't need turn enforced sso: simply invite new user complete sign-up procedure described: joining a saml sso workspace as a new member . alternatively, new user directly sign-up page , click saml button follow instructions achieve goal. " });
this.add({id:179, 
title:"Logging in via SAML SSO", 
body:" logging saml sso if saml sso connection added workspace enabled too, easily log bitrise account having use password email address. expired saml sso certificate if saml sso certificate expired, log bitrise sso, contact support team help in. click login sso login page . you redirected initiate single sign-on page . provide workspace bitrise workspace’s name field. click continue with sso log in. if you’re logged sso provider site, automatically landing bitrise dashboard. if you’re logged sso provider site, redirected log in. after successful login, bitrise dashboard. " });
this.add({id:180, 
title:"Disabling a Workspace's SAML SSO", 
body:" disabling workspace's saml sso if disable saml sso, workspace members able sign with regular sign-in procedure. log bitrise hover left navigation bar. make sure right workspace selected. select settings . go single sign-on tab. if saml sso enforced workspace before, toggle enforce enforce saml sso off. click disable sso . a confirmation pop-up appears confirm\/cancel action. please note clicking disable sso button, disable saml sso workspace members. once it’s done, members able log normal bitrise credentials. you receive sso disabled email bitrise (letsconnect@bitrise.io) confirms disabled saml sso workspace. " });
this.add({id:181, 
title:"Disabling a Workspace member's SAML SSO", 
body:" disabling workspace member's saml sso if workspace owner, disable member’s saml sso connection bitrise. there ways so: remove user workspace. remove user saml sso provider means able log with any more. " });
this.add({id:182, 
title:"Updating SAML SSO configuration", 
body:" updating saml sso configuration you update workspace’s configured saml sso using configure saml sso provider button single sign-on page. this comes handy saml sso provider’s certificate expired wish insert new bitrise. another use case is, example, configured ago check current configuration details. accessing update sso button as with saml sso configurations, workspace owner access use update button. as owner workspace, click workspace’s single sing-on tab. click configure saml sso provider button. now access configuration details workspace’s saml sso. make changes click save changes . from any saml sso request use new configuration automatically. " });
this.add({id:183, 
title:"Setting up Google SSO for Bitrise", 
body:" setting google sso bitrise add saml sso bitrise workspace using google workspace. this guide provides step-by-step instructions setting bitrise saml application google workspace. saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure google administrator account add bitrise saml app. the workspace help setting sso workspace. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you'll need to: get configuration information google workspace bitrise. enable bitrise app group organizational unit. " });
this.add({id:184, 
title:"Getting configuration information from Google Workspace and Bitrise", 
body:" getting configuration information google workspace bitrise sign google admin console. select apps admin console page. on apps page, click saml apps . on web mobile apps page, click add apps button, select add custom saml app option dropdown. on app details page add bitrise app name. please note bitrise format accepted. click continue . on getting identity provider details page: copy sso url paste saml sso provider single sing-on url (sso url) bitrise. copy content certificate field paste saml sso provider certificate field bitrise. you upload certificate local too. while bitrise, click copy link button copy assertion consumer service url (acs url) . we need google workspace second. let’s not click configure sso button just now! let’s head getting identity provider details page google workspace. click continue . on service provider details page: paste assertion consumer service url (acs url) bitrise acs url field google workspace. (remember, got link step 7.) type bitrise entity id field. please note bitrise format accepted. tick signed response checkbox start url (optional) . click continue . click configure sso button bitrise. on google workspace’s attribute mapping page, click finish - configure here. " });
this.add({id:185, 
title:"Enabling Bitrise app for a group or an organizational unit", 
body:" enabling bitrise app group organizational unit all left g suite enable newly created bitrise app group organization choice. go web mobile apps page g suite select bitrise apps list. click user access service status page. select on hit save . " });
this.add({id:186, 
title:"Setting up AD FS SSO for Bitrise", 
body:" setting ad fs sso bitrise add saml sso bitrise workspace using microsoft active directory federation services. this guide provides step-by-step instructions setting saml sso using microsoft active directory federation services (ad fs). saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure ad fs administrator hand saml sso configuration process. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . in tutorial jumping forth bitrise ad fs so recommended tools available process. to configure saml sso with ad fs, you'll need to: add identity provider sign-on url ad fs bitrise . export certificate generated ad fs add bitrise . add bitrise relying party trust ad fs . configure claim rules . " });
this.add({id:187, 
title:"Adding the identity provider sign-on URL", 
body:" adding identity provider sign-on url log bitrise hover left navigation bar. make sure right workspace selected. select settings . go single sign-on tab. add identity provider sign-on url ad fs saml sso provider single sign-on url (sso url) field. for example, valid value https:\/\/<ad fs url>.com\/adfs\/ls . " });
this.add({id:188, 
title:"Exporting an AD FS certificate", 
body:" exporting ad fs certificate you add certificate generated ad fs saml sso provider certificate field single sign-on page bitrise. if you’ve created certificate ad fs, export pem format fs server. haven’t yet, follow instructions: obtain configure ts td certificates ad fs . in server manager , click tools , select ad fs management . select certificates folder left menu pane. click certificate token-signing . this brings certificates window. click details tab certificate page. hit next certificate export wizard window. select base-64 encoded x.509 (.cer) export file format. click next . give file field hit save . have final look certificate settings. if need modify any those, click backward arrow certificate export wizard . otherwise, click finish . make sure leave ad fs window open need minute. open exported certificate text editor copy\/paste content saml sso provider certificate field upload file itself local computer. save settings clicking configure sso bitrise. let’s continue saml sso configuration ad fs adding bitrise. " });
this.add({id:189, 
title:"Adding Bitrise as a relying party trust to AD FS", 
body:" adding bitrise relying party trust ad fs once finished with exporting certificate, continue adding bitrise relying party trust ad fs . the add relying party trust wizard guides steps. on ad fs, click relying party trust left menu bar, click relying party trust . select add relying party trust actions . on welcome page, select claims aware option hit start . on select data source page, click enter data relying party manually option page. click next . on specify display name page, add display name, example mycorp . click next . specify token encryption certificate configure certificate page optional. click next . on configure ur l page, select enable support saml 2.0 websso protocol copy paste assertion consumer service url (acs url) bitrise relying party saml 2. 0 sso service url field ad fs. click next . on configure identifiers page, add bitrise relying party trust identifier field. click add , hit next . do modify default access control policy choose access control policy page so access saml sso connection. click next . on ready add trust page, review settings click next . on finish page, tick checkbox edit claims issuance policy bitrise. click close . on ad fs, click relying party trust left menu bar, click relying party trust . select add relying party trust actions . on welcome page, select claims aware option hit start . on select data source page, click enter data relying party manually option page. click next . on specify display name page, add display name, example mycorp . click next . specify token encryption certificate configure certificate page optional. click next . on configure ur l page, select enable support saml 2.0 websso protocol copy paste assertion consumer service url (acs url) bitrise relying party saml 2. 0 sso service url field ad fs. click next . on configure identifiers page, add bitrise relying party trust identifier field. click add , hit next . do modify default access control policy choose access control policy page so access saml sso connection. click next . on ready add trust page, review settings click next . on finish page, tick checkbox edit claims issuance policy bitrise. click close . " });
this.add({id:190, 
title:"Configuring claim rules", 
body:" configuring claim rules on edit claim issuance policy page, click add rule button hit ok . create send ldap attributes claims claim rule click next . on configure claim rule page: add rule name, example send e-mail, claim rule field. select attribute store likely active directory. in mapping ldap attributes outgoing claim types field select e-mail addresses. click finish . add new rule turns e-mail formatter nameid. to so, click add rule edit claim issuance policy page again. on select rule template , select transform incoming claim option claim rule template dropdown. click next . give new rule, example, transform e-mail . select e-mail address incoming claim type . select nameid outgoing claim type. choose email outgoing id format . hit ok finish process. " });
this.add({id:191, 
title:"Setting up Azure AD SSO for Bitrise", 
body:" setting azure ad sso bitrise add saml sso bitrise workspace using azure ad. saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure azure ad administrator logged hand. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you need to: add bitrise azure ad new application . add users groups bitrise app azure ad . set saml sso bitrise azure ad . " });
this.add({id:192, 
title:"Adding Bitrise to Azure AD as a new application", 
body:" adding bitrise azure ad new application log microsoft azure admin. click azure active directory icon azure services page. click enterprise applications manage . click new application add bitrise new app account. type bitrise what’s app? field. the integrate any application don’t gallery button automatically selected. hit create . you newly created app listed all applications page. click bitrise app overview page. continue with configuring bitrise saml app. " });
this.add({id:193, 
title:"Adding users\/ groups to the app on Azure AD", 
body:" adding users\/ groups app azure ad before setting saml app, add users\/groups app azure ad use sso log bitrise workspace. in words, workspace member added user ad. select users groups left menu. click + add user\/group . on users page add assignment , select users list click select . once it’s done, select role users select role dropdown. on add assignment page, click assign finish adding users. " });
this.add({id:194, 
title:"Setting up SAML SSO between Bitrise and Azure AD", 
body:" setting saml sso bitrise azure ad click single sign-on left menu. select saml . you land set single sign-on with saml page. click pencil symbol basic saml configuration edit fields. add bitrise identifier (entity id) . leave window open! we come with information bitrise second. head workspace bitrise. click single sign on tab click copy link button copy assertion consumer service url (acs url) bitrise. let’s head basic saml configuration window azure ad. paste assertion consumer service url bitrise reply url field basic saml configuration page azure ad. click save close basic saml configuration window. on single sign-on page azure ad, scroll set bitrise section. copy login url paste saml sso provider single sign-on url (sso url) field bitrise. on single sign-on page azure ad, scroll bit saml signing certificate section. click download certificate (base64) download certificate local computer. open certificate file copy\/paste content saml sso provider certificate field bitrise upload file itself local too. (if manually adding content, need content (including ----begin certificate----- -----end certificate----- well). hit configure sso bitrise. you successfully set bitrise saml sso app azure ad. " });
this.add({id:195, 
title:"Setting up Auth0 SSO for Bitrise", 
body:" setting auth0 sso bitrise add saml sso bitrise workspace using auth0. this guide provides instructions setting saml sso using auth0 . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: an auth0 administrator logged hand. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you need to: create bitrise web application auth0 . retrieve saml sso information auth0 . setting mapping rule bitrise app's client id . " });
this.add({id:196, 
title:"Creating Bitrise as a web application on Auth0", 
body:" creating bitrise web application auth0 log auth0 admin. click applications left menu bar click + create application button right hand applications page. on create application window, type bitrise name field. in choose application type select regular web applications , click create button. you landing newly created bitrise app’s quick start page. click addons tab. toggle saml2 web app ’s switch right. this addon: saml2 web app page automatically. copy assertion consumer service url (acs url) bitrise paste application callback url field settings tab addon: saml2 web app page. scroll addon: saml2 web app page hit save . go addons page switch turned on. " });
this.add({id:197, 
title:"Retrieving SAML SSO information from Auth0", 
body:" retrieving saml sso information auth0 once enabled bitrise web application auth0, it’s time grab certificate identity provider’s unique login url finish saml configuration bitrise. on auth0, application , select addons tab enabled bitrise app. click saml2 web app web app select usage tab. click download auth0 certificate link identity provider certificate label. open downloaded certificate file copy content saml sso provider certificate field bitrise upload file itself local computer. go auth0 copy paste identity provider login url bitrise’s saml sso provider single sign-on url (sso url) . click configure sso button bitrise. now close dialog auth0. " });
this.add({id:198, 
title:"Setting up a mapping rule for your Bitrise app’s Client ID", 
body:" setting mapping rule bitrise app’s client id bitrise authenticates saml sso users email address so you’d test sso, make sure create new mapping rule auth0. this way map auth0 client id successful authentication bitrise. on auth0, click auth pipeline left menu bar. click rules . click + create set new mapping rule. on pick rules template page, click <> empty rule . add following codeblock script box: you need new bitrise app’s client id applications ’ page. function mapsamlattributes(user, context, callback) {\n (context.clientid === '{your app's clientid'}')\n context.samlconfiguration.mappings = \"http:\/\/schemas.xmlsoap.org\/ws\/2005\/05\/identity\/claims\/nameidentifier\": \"email\"\n }; \n }\n callback(null, user, context);\n} click save changes . " });
this.add({id:199, 
title:"Setting up Idaptive SAML SSO for Bitrise", 
body:" setting idaptive saml sso bitrise add saml sso bitrise workspace using idaptive. this guide provides step-by-step instructions setting bitrise saml application idaptive . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you logged admin portal idaptive set bitrise saml sso app establish connection idaptive. if using user portal , switch admin portal clicking avatar idaptive. log idaptive admin. go apps, web apps . click add web apps button right. on custom tab select saml , click add . on add web app popup hit yes . close window. you automatically directed settings page. add bitrise name application id fields settings page click save . click trust left menu bar select manual configuration identity provider configuration . click signing certificate dropdown download certificate. open with text editor so copy content you upload file. insert content upload file itself saml sso provider certificate text box enable single sign-on page bitrise. copy single sign on url trust page idaptive. insert saml sso provider single sing-on url (sso url) field enable single sign-on page bitrise. while single sign-on page bitrise, copy assertion consumer service url (acs url) url click configure sso . now let’s head idaptive! under service provider configuration click manual configuration . type bitrise sp entity id \/ issuer audience paste assertion consumer service url (acs url) bitrise assertion consumer service (acs) url idaptive. scroll nameid format select emailaddress . click save . go permissions click add button. in select user, group, role popup, type user want add saml app. select hit add . save changes. this change status bitrise saml app deployed . you ready use idaptive saml sso provider bitrise. " });
this.add({id:200, 
title:"Setting up Okta SSO for Bitrise", 
body:" setting okta sso bitrise add saml sso bitrise workspace using okta. this guide provides step-by-step instructions setting bitrise saml application okta . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure okta administrator logged hand. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . add bitrise okta . configure bitrise saml app . set scim previsioning okta . " });
this.add({id:201, 
title:"Adding Bitrise to Okta", 
body:" adding bitrise okta bitrise integrated app okta. you add manually okta first, configure saml sso it. we jumping forth bitrise workspace account okta so make sure pages available. in practice means owner logged admin okta. log okta click admin . from left menu, select applications applications section. click create app integration button. this opens create new app integration window. select saml 2.0 option sign-in method click next . at general settings step, type bitrise app field. (optionally, add app logo wish.) click next . head bitrise workspace click single sign on tab left menu. click copy button copy assertion consumer service url (acs url) . head okta’s configure saml page paste copied url step 7. single sign-on url input field. type bitrise audience uri (sp entity id) . you download okta certificate file now, paste content upload itself saml sso provider certificate field bitrise workspace’s single sign-on page. even easier leave later need assertion consumer service url (acs url) bitrise anyway. you fetch configuring saml app okta. do hit configure sso single sing-on page bitrise just yet. set name id format emailaddress . click next . fill feedback section. hit finish . in applications , sign-on tab, click edit settings . scroll credential details section, make sure application username format set email . click save . congrats! bitrise successfully added okta app. " });
this.add({id:202, 
title:"Configuring Bitrise as a SAML app for Okta", 
body:" configuring bitrise saml app okta click assignments tab bitrise app. here assign bitrise individuals\/groups. make sure workspace members access saml. click sign-on tab bitrise app. you see saml setup completed yet. scroll down, click view saml setup instructions . the how configure saml 2.0 bitrise application page displayed. it summarizes information need set saml connection bitrise okta. copy identity provider single sign-on url paste bitrise workspace’s sso url field. if haven’t pasted certificate’s content uploaded file itself saml sso provider certificate field bitrise workspace yet, so now. click configure sso bitrise workspace. that's it! from on, access single sign-on page, configure saml sso settings. " });
this.add({id:203, 
title:"Setting up SCIM provisioning in Okta", 
body:" setting scim provisioning okta you set scim provisioning bitrise using okta. managing workspace groups while scim great way manage access users bitrise workspaces, initial configuration groups finishing setting provisioning. for information configuring groups, check adding workspace groups to an app team . we jumping forth bitrise workspace account okta, so make sure pages available. in practice, means owner logged bitrise, okta admin okta. on bitrise, configure domain control generate scim credentials . you need have: a verified domain. an scim base url authentication token. make sure save need process later. log okta click admin . from left menu, select applications applications section. select bitrise app. click general tab bitrise app. click edit app settings section select scim option using radio button provisioning . click save . a new tab called provisioning appear. head okta, select provisioning tab, click edit . paste scim base url copied bitrise scim connector base url field. add username unique identifier field users field. select provisioning actions like enable using checkboxes supported provisioning actions . push groups mandatory please note enable push groups. this bitrise, workspace membership works groups okta\/scim control select http header authorization mode dropdown menu. copy paste scim authentication token authorization field. click test connector configuration test working correctly. close test connector configuration window click save . click provisioning tab bitrise app, click edit provisioning app section. select provisioning options like enable click save . sync password we recommend keeping sync password setting disabled. that's it! you use scim provisioning okta manage access users bitrise. " });
this.add({id:204, 
title:"Pushing Okta groups to Bitrise using SCIM", 
body:" pushing okta groups bitrise using scim you push groups okta bitrise using scim provisioning. pushing group links existing creates new workspace. either way, pushing group, set synchronization okta group bitrise group. log okta click admin . from left menu, select applications applications section. select bitrise app. click push groups tab. click push groups choose filtering method. find group(s) want push. you create new group, brand group bitrise workspace link okta existing group. you choose methods using dropdown menu match result & push action . linking group if decide link okta group existing bitrise group, following mind: if okta bitrise group names different, automatically renamed match group. when manually push group connected existing bitrise group, members added included okta removed single source truth. click save . when push status changes active , synchronization okta bitrise ready. your group updated couple seconds workspace well. " });
this.add({id:205, 
title:"Synchronizing groups and users between Okta and Bitrise", 
body:" synchronizing groups users okta bitrise after pushing okta groups bitrise , synchronize groups users okta bitrise. to so, manage app integration assignments okta: log okta click  admin . from left menu, select  applications  under the  applications  section. select bitrise app. make sure create users deactivate users options enabled provisioning tab. deprovisioning users if deprovision user with scim, automatically logged bitrise pats disabled. go assignments tab. click assign choose assign people synchronize individual users assign groups synchronize groups. select users groups like synchronize, click done . domain verification new users verified domains receive email invitation join workspace. existing users receive verification email unless verify company domain. to so, contact bitrise support. after synchronizing groups users, check push groups tab see synchronization finished. you manually push updates clicking dropdown menu push status column selecting push . \"push now\" overrides bitrise group users included okta group automatically removed linked bitrise group. " });
this.add({id:206, 
title:"Setting up Ping Identity SSO for Bitrise", 
body:" setting ping identity sso bitrise add saml sso bitrise workspace using ping identity. this guide provides step-by-step instructions setting bitrise saml sso application ping identity . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: a pingone administrator logged pingone . be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . to add bitrise ping identity: click applications bar pingone . on my applications tab, make sure saml selected. click add application drop-down select new saml application . at application details, required fields click continue next step . at application configuration , leave i saml configuration selected. fill following: assertion consumer service (acs) field: insert assertion consumer service url (acs url) link bitrise workspace’s single sign-on tab. entity id field : type bitrise . signing : click sign response option. here overview settings: continue step. at sso attribute mapping , don’t change anything, proceed step. at group access , add group(s) application. these groups able access bitrise saml sso. continue step. at review setup page, doublecheck details provided previous steps. make sure download following files review page: click download signing certificate saml metadata files. click finish . let’s open files. copy entire content saml metadata file paste saml sso provider certificate field bitrise single sign-on page. open signing certificate file copy http-post singlesignonservice location link paste saml sso provider single sign-on url (sso url) field bitrise. click configure sso bitrise. now set saml sso bitrise workspace. " });
this.add({id:207, 
title:"Setting up OneLogin SSO for Bitrise", 
body:" setting onelogin sso bitrise add saml sso bitrise workspace using onelogin. this guide provides step-by-step instructions setting bitrise saml application onelogin . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure administrator onelogin hand setting saml sso connection bitrise. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . to configure bitrise onelogin: log onelogin administrator. click administration bar. select applications click add app . this find applications page. type bitrise search bar select saml2.0 type search results. click configuration tab left sidebar. you change icon add descriptions wish. make sure organization (bitrise) ticked. hit save . click configuration tab paste assertion consumer service url (acs url) bitrise workspace’s single sign-on tab single sign-on url field onelogin. hit save onelogin . select sso left sidebar. click view details x.509 certificate. copy content x.509 certificate paste saml sso provider certificate field enable single sign-on page bitrise. go sso page onelogin copy saml 2.0 endpoint (http) link. paste saml sso provider single sign-on url (sso url) field bitrise. go bitrise click configure sso . users onelogin bitrise make sure users bitrise workspace added users page onelogin. if not, users , new user add new user. don’t forget send invite ( more actions drop-down menu, send invitation ) new user so activate account onelogin. users added newly created bitrise app clicking applications user info clicking + sign. make sure added users workspace members bitrise. if you’ve completed setting bitrise onelogin connected with workspace, workspace members email contains link activate sso connection workspace. " });
this.add({id:208, 
title:"Editing your profile settings", 
body:" editing profile settings you edit profile settings, username, password, account avatar, etc., profile settings page. on profile settings page, can: change username associated email address. change password. update personal company information. " });
this.add({id:209, 
title:"Changing your Bitrise username, email, and password", 
body:" changing bitrise username, email, password in upper right corner, open account selector dropdown menu. select account settings option. to change username, type new username username field. to change email, type new email address email field. to change password, type new password password field, type confirm password field. when done, click update . " });
this.add({id:210, 
title:"Adding an avatar to your account", 
body:" adding avatar account you add personalized avatar bitrise account. in upper right corner, open account selector dropdown menu. select account settings option. find default avatar left, account name. click image. drag drop new avatar change avatar window, click browse choose image computer. " });
this.add({id:211, 
title:"Unselecting notification preferences", 
body:" unselecting notification preferences by default bitrise sends newsletters platform updates email address provide profile . you unselect setting with 3 simple steps: click profile settings avatar. click notification left menu bar. you see newsletters platform updates enabled default. if wish any two, notifications, untick relevant checkbox\/es. " });
this.add({id:212, 
title:"Resetting your password", 
body:" resetting password if forgot password, reset clicking forgot password bitrise login page. you receive email with instructions. you log bitrise ways: with bitrise username password with gitlab\/github\/bitbucket account with bitrise workspace saml sso set enforced if try log forgot password: click forgot password login page . provide email username so know send password recovery link. check inbox reset password instructions sent letsconnect. click reset password copy url browser. add new password hit save . once password changed, click log access login page again. add username new password log bitrise dashboard. if failed log time, recaptcha enabled check human. if failed log excessive attempts, automatically locked out. check inbox unlock instructions email! " });
this.add({id:213, 
title:"Two-factor authentication", 
body:" two-factor authentication you add two-factor authentication (2fa) bitrise extra layer security profile settings. we provide extra layer security account enable two-factor authentication (2fa) bitrise account. we recommend check connected accounts (github, bitbucket, gitlab) enable 2fa haven’t already. " });
this.add({id:214, 
title:"Enabling two-factor authentication", 
body:" enabling two-factor authentication download install google authenticator phone. log bitrise.io profile . click profile setting . scroll click security left. click 2fa enabled two-factor authentication . open google authenticator scan qr-code appears screen. enter 6-digit code was generated. once activated 2fa saved recovery codes, receive confirmation email letsconnect@bitrise.io . " });
this.add({id:215, 
title:"Disabling two-factor authentication", 
body:" disabling two-factor authentication follow procedure disable two-factor authentication (2fa) logged bitrise. log bitrise.io profile . click profile settings . scroll click security left. click 2fa enabled two-factor authentication . provide bitrise login password pop-up window. " });
this.add({id:216, 
title:"Have you lost your authenticator and recovery codes?", 
body:" have lost authenticator recovery codes? 2fa protects account unwanted login attempts (for example, with stolen password) providing extra security step flow. this means lose device authenticator app, recovery codes, won't able access bitrise support remove activated account. however, any third-party service (for example, gitlab, github bitbucket) connected account before, try log that. in absence account, recommend create new bitrise. in special cases, bitrise remove 2fa account. please note disable activated account git provider connected bitrise. contact support team using email address provided signing bitrise. explain you’re requesting remove 2fa. our support team ask create new public repo git account with title: bitrise_verification send link created repo support team. please note support team deny request removing 2fa account pose security risk bitrise account. " });
this.add({id:217, 
title:"Personal access tokens", 
body:" personal access tokens you use personal access token authenticate bitrise api. create new any time created it, view copy value again. you use personal access token authenticate bitrise api. create new any time created it, view copy value again. " });
this.add({id:218, 
title:"Creating a personal access token", 
body:" creating personal access token to create new personal access token: in upper right corner, open account selector dropdown menu. select account settings option. on left, select security tab. scroll personal access tokens section, click create token . fill token description field select appropriate expiration time (1 hour, 1 day, month never) token. click next . in personal access token pop-up window, see newly generated token. click copy close store token clipboard so paste safe, finalize. " });
this.add({id:219, 
title:"Regenerating a personal access token", 
body:" regenerating personal access token you regenerate existing personal access token any time. however, can't view value previously generated again, new value. in upper right corner, open account selector dropdown menu. select account settings option. go security tab. find token personal access tokens section. click edit . click regenerate token . copy new token, click done . " });
this.add({id:220, 
title:"Deleting your Bitrise account", 
body:" deleting bitrise account we’re sad see wish delete bitrise account, so profile settings. we’re sad see wish delete bitrise account, it’s quite simple. workspace ownership if confirmed owner workspace, transfer ownership workspace account, delete deleting account. in upper right corner, open account selector dropdown menu. select account settings option. on page, click delete account button follow instructions. " });
this.add({id:136, 
title:"Connecting to services", 
body:" connecting services you connect git provider services, github\/gitlab\/bitbucket account bitrise account. to use features bitrise offers, want connect services git provider any apple use. our guides explain how connect github\/gitlab\/bitbucket account bitrise (or self-hosted gitlab instance workspace uses it). you certain git provider bitrise. disconnect new any time. you learn authentication methods use connect bitrise with apple services app store connect developer portal. whether id password api key authentication, got covered. " });
this.add({id:137, 
title:"Configuring repository access", 
body:" configuring repository access to advantage features bitrise offers, including automatic webhook registration, need connect github\/gitlab\/bitbucket account account. bitrise needs access code git repository able build. we recommend connecting provider account offer main methods doing so: the bitrise github app : we strongly recommend using github app connect bitrise account github. the app offers increased security granular repository access. using means don't need ssh keys webhooks. this works workspace level: single organization. oauth application git provider allows access repositories account. this means connecting personal bitrise account method supported github, gitlab, bitbucket. you connect git provider accounts either: connecting account adding new app . connecting account account settings page. one account git provider please note connect accounts git provider (for example, github accounts) bitrise. connecting git provider account final. you disconnect connect different any time: linked wrong git account bitrise . " });
this.add({id:138, 
title:"GitHub App integration", 
body:" github app integration the bitrise github app allows users connect workspace account organization with provides granular access increased security automatic status updates. the best way connect bitrise account github repositories integrating with github app . the bitrise github app number features make integration easier: the app eliminates need ssh key, personal access token, service credential user. for access, generates temporary access token build, significantly increasing security. it provides granular access repositories: need grant entire github organization, instead select specific repositories app access. with app installed, automatically receive bitrise status updates directly github with checks app. no need configuring reports separately. the bitrise github app supported cloud users. github enterprise server users need create install different github app, described relevant guide. " });
this.add({id:139, 
title:"Connecting via the GitHub App integration", 
body:" connecting github app integration this guide intended github cloud users, including enterprise wish install bitrise app connect workspace account organization with app. for server separate guide: integrating self-hosted github enterprise server with bitrise you connect github app integration ways: from workspace settings page. when adding new bitrise app. one github app installation workspace a workspace associated with single installation bitrise github app. no connected multiple installations " });
this.add({id:140, 
title:"Connecting a GitHub App from the Workspace settings page", 
body:" connecting github app workspace settings page a bitrise github app installation tied workspace. you install check connection workspace settings page. on bitrise main page, select workspace dropdown menu. from navigation menu left, select settings . on workspace settings page, select integrations . select git provider tab. under github , see github app card with connect bitrise github app . click connect . if haven't authorized bitrise github app before, prompted authorization point: you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected workspace settings page. authorization if authorized github install app, request installation. once admin approves installation, come select app installation list. if existing apps with oauth connection, recommend switching github app connection . " });
this.add({id:141, 
title:"Connecting a GitHub App when adding a new app", 
body:" connecting github app adding new app during process adding new app bitrise, select how bitrise access repository. this allows connecting github app. start process adding new app . at select repository section, select github app (recommended) provider dropdown menu. click connect account . you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected continue adding new bitrise app. " });
this.add({id:142, 
title:"Connecting a Git provider with OAuth when adding an app", 
body:" connecting git provider with oauth adding app connecting git provider account with oauth app allows bitrise to: list available repositories adding new app . automatically register webhooks . webhooks allow setting build triggers enable use git insights . automatically register ssh keys . log bitrise.io account. click + symbol menu bar select add new app web ui . adding new app cli you add new app using cli. for information, check adding a new app from a cli . on create new app page, select account set app’s privacy setting. use radio buttons select repository section choose selecting remote repository entering url manually. if opt enter git url manually, add git repository (clone) url field click next . choose git service provider app’s repository, chose select remote repository. if account with connected bitrise account, ui display option connect. click connect account . this login page git provider. log git provider account. you prompted authorize bitrise.io - it! if successful, redirected bitrise, pop-up message inform successfully linked account. click okay . " });
this.add({id:143, 
title:"Connecting a Git provider with OAuth from the Account settings page", 
body:" connecting git provider with oauth account settings page connecting git provider account with oauth application allows bitrise to: list available repositories adding new app . automatically register webhooks . webhooks allow setting build triggers enable use git insights . automatically register ssh keys . in upper right corner, open account selector dropdown menu. select account settings option. on left, connected git providers , click toggle git provider wish connect. log git provider account. you prompted authorize bitrise.io - it! if successful, redirected bitrise, pop-up message inform successfully linked account. click okay . " });
this.add({id:144, 
title:"Disconnecting a Git provider account", 
body:" disconnecting git provider account in upper right corner, open account selector dropdown menu. select account settings option. on left connected git providers , click toggle git provider wish disconnect. " });
this.add({id:145, 
title:"Switching from OAuth connection to the GitHub App", 
body:" switching oauth connection github app if bitrise app oauth connection set github account, change app any time losing functionality. we strongly recommend doing switch: with installed, longer need service credential user, ssh key, webhook run builds. can't switch once switch app oauth connection github app, won't able back! to switch: install bitrise github app described relevant guide: connecting a github app from the workspace settings page . open app bitrise with user admin role app . on main page app, click app settings icon: . on left navigation menu, select integrations git provider tab. in git integration status section, see blue card with information github app support. to switch, click switch github app . " });
this.add({id:146, 
title:"Connecting self-hosted GitLab instances", 
body:" connecting self-hosted gitlab instances for workspaces, bitrise supports connecting self-hosted gitlab instances. once it’s done, add apps privately hosted repositories. for workspaces, bitrise supports connecting self-hosted gitlab instances. connecting simple, it’s done, add apps privately hosted repositories. all functions got used with publicly repositories available! setting app self-hosted gitlab repository simple: bitrise needs authorized application entire instance application id secret value belonging bitrise oauth application added workspace bitrise.io . " });
this.add({id:147, 
title:"Configuring the GitLab connection", 
body:" configuring gitlab connection to access privately hosted gitlab repositories bitrise, need create new oauth application account, assign appropriate credentials server. publicly resolvable ip address your self-hosted gitlab instance publicly resolvable ip address, bitrise won’t able connect it. log gitlab instance with root privileges. if connect bitrise root privileges , workspace’s team members access repository gitlab instance . go admin area clicking little wrench icon menu bar. on left menu bar, select applications , click new application . in name field, enter clearly identifies application. for sake simplicity, recommend bitrise . in callback url field, enter https:\/\/app.bitrise.io\/users\/auth\/gitlab\/callback . in scopes menu, check api . set confidential option no . if newly created app configured confidential, bitrise won't able access it! click submit . on page, application id secret . you’ll need connect gitlab instance bitrise.io . log bitrise open account selector dropdown menu right. find workspace click little gear icon workspace's profile page. select self-hosted gitlab option left menu bar. add self-hosted gitlab credentials: app id secret self-hosted url you done! now able access privately hosted repositories with bitrise. " });
this.add({id:148, 
title:"Adding a new app from a self-hosted GitLab repository", 
body:" adding new app self-hosted gitlab repository log bitrise.io click + symbol menu bar select add new app web ui options. select workspace owner app. when prompted select git provider, gitlab . select self-hosted option. if haven’t provided self-hosted gitlab credentials workspace before, stage. click connect . once connected, proceed usual: adding a new app" });
this.add({id:149, 
title:"Apple services connection", 
body:" apple services connection connect bitrise builds apple services using api key authentication id order manage ios code signing deployment. your workflow contain steps need information apple service use, example, app store connect developer portal. these services supported following steps: manage ios code signing deploy app store connect with deliver (formerly itunes connect) deploy app store connect - application loader (formerly itunes connect) fastlane to connect steps with apple service wish use build runs bitrise, need provide authentication data bitrise select established method app. you authenticate with apple’s official api key apple id password. " });
this.add({id:150, 
title:"Apple two-factor authentication requirements", 
body:" apple two-factor authentication requirements apple’s two-factor authentication (2fa) provides extra layer security apple account. if authenticating with api key so far, affected two-factor authentication requirement. if, however, authenticating with apple id password, new 2fa requirement affects you, you’ll reconnect apple developer account apple service connection page bitrise profile. you’ll provide two-factor authentication\/two-step verification code app-specific password well. please official apple documentation how generate app-specific password . " });
this.add({id:151, 
title:"Steps that require connecting to your Apple Developer account", 
body:" steps require connecting apple developer account the following steps require connection apple services (such app store connect developer portal). if you’re using any steps, make sure establish with right method. steps requiring apple authentication steps connection type manage ios code signing api key authentication, apple id authentication step inputs xcode archive & export ios api key authentication, apple id authentication step inputs export ios tvos xcode archive api key authentication, apple id authentication step inputs xcode build testing ios api key authentication, apple id authentication step inputs fastlane api key authentication, apple id authentication step inputs deploy app store connect with deliver (formerly itunes connect) api key authentication, apple id authentication step inputs deploy app store connect - application loader (formerly itunes connect) api key authentication, apple id authentication step depending authentication use project, following options: api key authentication: if can, recommend use authentication method. it does require two-factor authentication. all takes connecting apple services providing name , issuer id , key id upload private key (.p8) , selecting account team tab app’s settings. the data automatically populates respective fields steps work with api key authentication. apple id authentication: if use api key authentication, authenticate with password. provide apple id , password , 2fa code app-specific password select account team tab app’s settings. the data automatically populates respective fields steps work with apple id authentication. api key apple id authentication step inputs: if wish deploy multiple teams team different connected you’ve using, add preferred step’s inputs. some steps, xcode archive & export ios, override option, like fastlane, options id level override. " });
this.add({id:152, 
title:"Apple service permissions", 
body:" apple service permissions in order successfully connect bitrise apple services, need set right roles accesses account id api keys. in order successfully connect bitrise apple services, need set right roles accesses account id api keys. you appropriate access rights able to: use automatic code signing. deploy app app store. the exact roles accesses need depend number factors: authentication method, use xcode managed signing, details app deployment process, things. in guide, we'll list roles based main authentication methods : api key authentication apple id authentication. " });
this.add({id:153, 
title:"Required access with API key authentication", 
body:" required access with api key authentication to use bitrise steps with apple api key authentication, need create app store connect appropriate access level. the level depends do. if, example, use xcode managed signing project wish export generated ipa file with distribution certificate app store provisioning profile, connect api key admin access. table 9, “ contains required access automatic code signing. in table, grouped signing actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. access required automatic code signing with api key authentication code signing action required access with xcode managed signing turned on required access with xcode managed signing turned off exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids developer developer exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids admin developer table 10, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. access required app store deployment with api key authentication app store deployment actions required access api key uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:154, 
title:"Required access with Apple ID authentication", 
body:" required access with apple id authentication to use bitrise steps with apple id authentication, need make sure appropriate role developer team. table 11, “ contains necessary roles using automatic code signing bitrise. in table, grouped actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. read different distribution methods: creating a signed ipa for xcode projects . xcode managed signing if use apple id authentication bitrise, xcode managed signing automatically turned project. instead, bitrise uses automatic code logic. roles required automatic code signing with apple id authentication code signing action required role exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager table 12, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. roles required app store deployment with api key authentication app store deployment actions required role apple id uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:155, 
title:"Connecting to an Apple service with API key", 
body:" connecting apple service with api key connect apple service with api key manage ios code signing deployment. the authentication recommended way connecting bitrise services. connecting apple service (such app store connect apple developer portal) with api key requires generating key, adding authentication data bitrise, assigning app. the api key authentication recommended way connecting bitrise apple services. you 50 keys added apple services connection page app use one. no step input modifications needed with method, step inputs related authenticating with apple api key automatically populated connection set up. you don't manually modify input fields all. " });
this.add({id:156, 
title:"Adding API key authentication data on Bitrise", 
body:" adding api key authentication data bitrise there ways add api key authentication data bitrise: on profile settings page. on integrations page app settings page. profile page app settings page on app store connect , generate new api key with admin access users access . you need key, key id issuer bitrise. admin access you use admin role new app store connect api key! the step build fail set different role. in upper right corner, open account selector dropdown menu. select account settings option. on left, select apple service connection . click add api key . fill required fields: name : your generated api key's name. issuer id : to issuer id, log to app store connect and select users access , select api keys tab.the issuer id appears near page. to copy id, click copy id. key id : when successfully generate new api key, app store connect shows key id. upload .p8 file: drag drop upload field, click select file computer. click connect . on app store connect , generate new api key with admin access users access . you need key, key id issuer bitrise. admin access you use admin role new app store connect api key! the step build fail set different role. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . select stores tab. find app store connect section. find api key authentication (recommended) option. click add api key . fill required fields: name : your generated api key's name. issuer id : to issuer id, log to app store connect and select users access , select api keys tab.the issuer id appears near page. to copy id, click copy id. key id : when successfully generate new api key, app store connect shows key id. upload .p8 file: drag drop upload field, click select file computer. click connect . once done, assign api key any app access account. from then, use connection app store connect. " });
this.add({id:157, 
title:"Assigning API key authentication to your app", 
body:" assigning api key authentication app to use api key authentication apple services app , must: add api key bitrise : you add multiple api keys account. assign api key app: each app assigned it. to assign api key app: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . select stores tab. find app store connect section. find api key authentication (recommended) option. click add api key api key set change api key existing assigned. multiple apps with api key with add api key button, add new app store connect api key bitrise account. other apps access use key, too. if changing existing api key, select key need dropdown menu dialog box. you see api key keys registered bitrise account. the step able connect app store connect apple developer portal build. " });
this.add({id:158, 
title:"Connecting to an Apple service with Apple ID", 
body:" connecting apple service with id connect apple service with id manage ios code signing deployment. connecting apple service (such app store connect developer portal) with id requires first add password apple service connection page, select app use apple id authentication build running. if use api key authentication, recommend try option. please note connect apple id bitrise. apple accounts with two-factor authentication enabled if two-factor authentication enabled apple account, provide app-specific password process. learn how generate app-specific password security section apple id account page . " });
this.add({id:159, 
title:"Adding Apple ID authentication data on Bitrise", 
body:" adding apple id authentication data bitrise in upper right corner, open account selector dropdown menu. select account settings option. on left menu bar, select apple service connection . click add connection button. provide apple id password popup window. click connect . enter verification code two factor authentication window. add app-specific password . click verify continue. you prompted provide verification code. your authentication expires 30 days authenticate again. when happens, apple service connection page, automatically ask two-factor authentication (2fa) code authenticate again. there list apple developer accounts defined. to far right id connection, 3 dots. click dots select re-authenticate ( 2sa\/2fa ). continue with assigning apple developer account app. " });
this.add({id:160, 
title:"Assigning Apple ID authentication to your app", 
body:" assigning apple id authentication app connecting apple service (such app store connect developer portal) with id authentication requires first add data bitrise.io assign credentials app. with method, don't worry using steps connect services: step inputs related automatically filled in. can't assign users' apple credentials you set user account's apple id authentication data app. if app needs else's credentials, log make change themselves. to assign apple id authentication data app: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll connection apple services section. find apple id authentication option. click change <username> . if can't option, probably haven't set apple credentials bitrise.io. note changing selected user removes previous user. need use user's again, log change themselves. test connection by clicking test connection , check bitrise access apple services using provided credentials. steps able connect apple service build. " });
this.add({id:161, 
title:"Connecting to an Apple Service with Step inputs", 
body:" connecting apple service with step inputs if want deploy team authentication different connected you’ve using, add preferred step’s inputs. if wish deploy multiple teams team authentication different connected you’ve using, add preferred step’s inputs. this override connection previously set bitrise developer connection . this way connection restricted given step set authentication. 2fa apple id authentication if 2fa required apple id, use id authentication with deploy app store connect with deliver (formerly itunes connect) fastlane steps instead authenticating step inputs. " });
this.add({id:162, 
title:"Authenticating in a Step with API key", 
body:" authenticating step with api key api-key & apple id api-key steps add following steps workflow: fastlane deploy app store connect with deliver (formerly itunes connect) deploy app store connect - application loader (formerly itunes connect) either api key apple id authentication step inputs you add type authentication step, api key apple id one. in case, make sure bitrise apple developer connection input set , step with configured authentication method apple service connection (unless decide remove connection teams tab). upload api key generic file storage section code signing & files tab. set bitrise apple developer connection input . set issuer id secret environment variable respective field step. configure api key path api issuer inputs. save changes run new build. add following steps workflow: manage ios code signing xcode archive & export ios export ios tvos xcode archive xcode build testing ios upload app store connect api private key file (.p8 file) the  generic file storage  in the  code signing & files  tab. set automatic code signing method api-key . set following step inputs the  app store connect connection override input group: app store connect api private key : local path remote url private key (.p8 file) app store connect api. set input automatically generated env var connected api file uploaded the generic file storage in step 2. app store connect api key id : private key id used app store connect authentication. app store connect api issuer id : private key issuer id used app store connect authentication. " });
this.add({id:163, 
title:"Authenticating in a Step with Apple ID and password", 
body:" authenticating step with apple id password either api key apple id authentication step inputs you add type authentication step, api key apple id one. in case, make sure bitrise apple developer connection input set , step with configured authentication method apple service connection (unless decide remove connection teams tab). add step workflow. set apple id password . set bitrise apple developer connection input . save changes run new build. " });
this.add({id:164, 
title:"Steps requiring Apple authentication", 
body:" steps requiring apple authentication check bitrise steps require connection apple service using api key id. in guide list steps require authentication methods choose depending app’s requirement. " });
this.add({id:165, 
title:"Manage iOS Code Signing Step", 
body:" manage ios code signing step this step takes care setting required code signing assets project built bitrise. the step uses api key apple id password authentication connect service. once connection configured, will: generate, update download provisioning profiles needed ios project. verify register project's bundle ids apple developer site. register ios devices connected bitrise account with app store connect. connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:166, 
title:"Xcode Archive & Export for iOS Step", 
body:" xcode archive & export ios step the step archives xcode project running the  xcodebuild archive  command exports archive ipa file with the  xcodebuild -exportarchive  command. this ipa file shared, installed test devices, uploaded app store connect. the step perform ios code signing automatic code signing method input specifies method. by default, it's turned off. to perform ios code signing, use api key apple id authentication. connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:167, 
title:"Export iOS and tvOS Xcode archive Step", 
body:" export ios tvos xcode archive step exports ipa existing ios tvos .xcarchive file. you add multiple export tvos xcode archive steps workflows create multiple different signed ipa files. the step perform ios code signing automatic code signing method input specifies method. by default, it's turned off. to perform ios code signing, use api key apple id authentication. connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:168, 
title:"Xcode Build for testing for iOS Step", 
body:" xcode build testing ios step the step runs xcode's  xcodebuild  command with the build-for-testing option. this builds app associated tests so can, example, upload third-party testing service run real device. the step creates an  .xctestrun  file. to able run tests real device needs code signing. the  automatic code signing method  step input allows log apple developer account based the apple service connection provide bitrise and download any provisioning profiles needed project the  distribution method . connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:169, 
title:"Deploy to App Store Connect with Deliver Step", 
body:" deploy app store connect with deliver step with step , upload screenshots, metadata binaries https:\/\/appstoreconnect.apple.com\/ submit app app store review using fastlane deliver action. the deploy app store connect with deliver (formerly itunes connect) step connect apple developer account with id app store connect api, inputs. please note case 2fa enabled id, deploy app store connect with deliver (formerly itunes connect) step work with apple id authentication set service page profile. the default method api key authentication. choose connection works project: connecting to an apple service with api keyconnecting to an apple service with apple idconnecting to an apple service with step inputs" });
this.add({id:170, 
title:"Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step", 
body:" deploy app store connect - application loader (formerly itunes connect) step with step , upload binaries (.ipa .pkg files) https:\/\/appstoreconnect.apple.com\/ . the deploy app store connect - application loader (formerly itunes connect) step connect apple developer account with app store connect api, id password, inputs. choose connection method works project: connecting to an apple service with api keyconnecting to an apple service with apple idconnecting to an apple service with step inputs" });
this.add({id:171, 
title:"fastlane Step", 
body:" fastlane step with step run fastlane lanes bitrise just like locally. check guide integrating fastlane bitrise information. please note case 2fa enabled apple id, fastlane step work with apple id authentication set apple service page profile. two-factor authentication fails with fastlane step in cases, fastlane step doesn't value fastlane_session variable correctly attempting connect apple developer portal, causing two-factor authentication fail. check potential workaround issue. connecting to an apple service with api keyconnecting to an apple service with apple idconnecting to an apple service with step inputs" });
this.add({id:137, 
title:"Configuring repository access", 
body:" configuring repository access to advantage features bitrise offers, including automatic webhook registration, need connect github\/gitlab\/bitbucket account account. bitrise needs access code git repository able build. we recommend connecting provider account offer main methods doing so: the bitrise github app : we strongly recommend using github app connect bitrise account github. the app offers increased security granular repository access. using means don't need ssh keys webhooks. this works workspace level: single organization. oauth application git provider allows access repositories account. this means connecting personal bitrise account method supported github, gitlab, bitbucket. you connect git provider accounts either: connecting account adding new app . connecting account account settings page. one account git provider please note connect accounts git provider (for example, github accounts) bitrise. connecting git provider account final. you disconnect connect different any time: linked wrong git account bitrise . " });
this.add({id:138, 
title:"GitHub App integration", 
body:" github app integration the bitrise github app allows users connect workspace account organization with provides granular access increased security automatic status updates. the best way connect bitrise account github repositories integrating with github app . the bitrise github app number features make integration easier: the app eliminates need ssh key, personal access token, service credential user. for access, generates temporary access token build, significantly increasing security. it provides granular access repositories: need grant entire github organization, instead select specific repositories app access. with app installed, automatically receive bitrise status updates directly github with checks app. no need configuring reports separately. the bitrise github app supported cloud users. github enterprise server users need create install different github app, described relevant guide. " });
this.add({id:139, 
title:"Connecting via the GitHub App integration", 
body:" connecting github app integration this guide intended github cloud users, including enterprise wish install bitrise app connect workspace account organization with app. for server separate guide: integrating self-hosted github enterprise server with bitrise you connect github app integration ways: from workspace settings page. when adding new bitrise app. one github app installation workspace a workspace associated with single installation bitrise github app. no connected multiple installations " });
this.add({id:140, 
title:"Connecting a GitHub App from the Workspace settings page", 
body:" connecting github app workspace settings page a bitrise github app installation tied workspace. you install check connection workspace settings page. on bitrise main page, select workspace dropdown menu. from navigation menu left, select settings . on workspace settings page, select integrations . select git provider tab. under github , see github app card with connect bitrise github app . click connect . if haven't authorized bitrise github app before, prompted authorization point: you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected workspace settings page. authorization if authorized github install app, request installation. once admin approves installation, come select app installation list. if existing apps with oauth connection, recommend switching github app connection . " });
this.add({id:141, 
title:"Connecting a GitHub App when adding a new app", 
body:" connecting github app adding new app during process adding new app bitrise, select how bitrise access repository. this allows connecting github app. start process adding new app . at select repository section, select github app (recommended) provider dropdown menu. click connect account . you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected continue adding new bitrise app. " });
this.add({id:142, 
title:"Connecting a Git provider with OAuth when adding an app", 
body:" connecting git provider with oauth adding app connecting git provider account with oauth app allows bitrise to: list available repositories adding new app . automatically register webhooks . webhooks allow setting build triggers enable use git insights . automatically register ssh keys . log bitrise.io account. click + symbol menu bar select add new app web ui . adding new app cli you add new app using cli. for information, check adding a new app from a cli . on create new app page, select account set app’s privacy setting. use radio buttons select repository section choose selecting remote repository entering url manually. if opt enter git url manually, add git repository (clone) url field click next . choose git service provider app’s repository, chose select remote repository. if account with connected bitrise account, ui display option connect. click connect account . this login page git provider. log git provider account. you prompted authorize bitrise.io - it! if successful, redirected bitrise, pop-up message inform successfully linked account. click okay . " });
this.add({id:143, 
title:"Connecting a Git provider with OAuth from the Account settings page", 
body:" connecting git provider with oauth account settings page connecting git provider account with oauth application allows bitrise to: list available repositories adding new app . automatically register webhooks . webhooks allow setting build triggers enable use git insights . automatically register ssh keys . in upper right corner, open account selector dropdown menu. select account settings option. on left, connected git providers , click toggle git provider wish connect. log git provider account. you prompted authorize bitrise.io - it! if successful, redirected bitrise, pop-up message inform successfully linked account. click okay . " });
this.add({id:144, 
title:"Disconnecting a Git provider account", 
body:" disconnecting git provider account in upper right corner, open account selector dropdown menu. select account settings option. on left connected git providers , click toggle git provider wish disconnect. " });
this.add({id:145, 
title:"Switching from OAuth connection to the GitHub App", 
body:" switching oauth connection github app if bitrise app oauth connection set github account, change app any time losing functionality. we strongly recommend doing switch: with installed, longer need service credential user, ssh key, webhook run builds. can't switch once switch app oauth connection github app, won't able back! to switch: install bitrise github app described relevant guide: connecting a github app from the workspace settings page . open app bitrise with user admin role app . on main page app, click app settings icon: . on left navigation menu, select integrations git provider tab. in git integration status section, see blue card with information github app support. to switch, click switch github app . " });
this.add({id:138, 
title:"GitHub App integration", 
body:" github app integration the bitrise github app allows users connect workspace account organization with provides granular access increased security automatic status updates. the best way connect bitrise account github repositories integrating with github app . the bitrise github app number features make integration easier: the app eliminates need ssh key, personal access token, service credential user. for access, generates temporary access token build, significantly increasing security. it provides granular access repositories: need grant entire github organization, instead select specific repositories app access. with app installed, automatically receive bitrise status updates directly github with checks app. no need configuring reports separately. the bitrise github app supported cloud users. github enterprise server users need create install different github app, described relevant guide. " });
this.add({id:139, 
title:"Connecting via the GitHub App integration", 
body:" connecting github app integration this guide intended github cloud users, including enterprise wish install bitrise app connect workspace account organization with app. for server separate guide: integrating self-hosted github enterprise server with bitrise you connect github app integration ways: from workspace settings page. when adding new bitrise app. one github app installation workspace a workspace associated with single installation bitrise github app. no connected multiple installations " });
this.add({id:140, 
title:"Connecting a GitHub App from the Workspace settings page", 
body:" connecting github app workspace settings page a bitrise github app installation tied workspace. you install check connection workspace settings page. on bitrise main page, select workspace dropdown menu. from navigation menu left, select settings . on workspace settings page, select integrations . select git provider tab. under github , see github app card with connect bitrise github app . click connect . if haven't authorized bitrise github app before, prompted authorization point: you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected workspace settings page. authorization if authorized github install app, request installation. once admin approves installation, come select app installation list. if existing apps with oauth connection, recommend switching github app connection . " });
this.add({id:141, 
title:"Connecting a GitHub App when adding a new app", 
body:" connecting github app adding new app during process adding new app bitrise, select how bitrise access repository. this allows connecting github app. start process adding new app . at select repository section, select github app (recommended) provider dropdown menu. click connect account . you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected continue adding new bitrise app. " });
this.add({id:139, 
title:"Connecting via the GitHub App integration", 
body:" connecting github app integration this guide intended github cloud users, including enterprise wish install bitrise app connect workspace account organization with app. for server separate guide: integrating self-hosted github enterprise server with bitrise you connect github app integration ways: from workspace settings page. when adding new bitrise app. one github app installation workspace a workspace associated with single installation bitrise github app. no connected multiple installations " });
this.add({id:140, 
title:"Connecting a GitHub App from the Workspace settings page", 
body:" connecting github app workspace settings page a bitrise github app installation tied workspace. you install check connection workspace settings page. on bitrise main page, select workspace dropdown menu. from navigation menu left, select settings . on workspace settings page, select integrations . select git provider tab. under github , see github app card with connect bitrise github app . click connect . if haven't authorized bitrise github app before, prompted authorization point: you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected workspace settings page. authorization if authorized github install app, request installation. once admin approves installation, come select app installation list. if existing apps with oauth connection, recommend switching github app connection . " });
this.add({id:141, 
title:"Connecting a GitHub App when adding a new app", 
body:" connecting github app adding new app during process adding new app bitrise, select how bitrise access repository. this allows connecting github app. start process adding new app . at select repository section, select github app (recommended) provider dropdown menu. click connect account . you prompted select github account organization want connect. if don't need list, install app first: click link list accounts. once click link, prompted select account organization. after selecting one, transferred install & authorize page. on install & authorize page, select access type: all repositories : bitrise github app access repositories belonging account organization, including future ones. only select repositories : select repositories bitrise able access. you add later so, need reconfigure repository access app's page. when done, click install & authorize . you redirected continue adding new bitrise app. " });
this.add({id:142, 
title:"Connecting a Git provider with OAuth when adding an app", 
body:" connecting git provider with oauth adding app connecting git provider account with oauth app allows bitrise to: list available repositories adding new app . automatically register webhooks . webhooks allow setting build triggers enable use git insights . automatically register ssh keys . log bitrise.io account. click + symbol menu bar select add new app web ui . adding new app cli you add new app using cli. for information, check adding a new app from a cli . on create new app page, select account set app’s privacy setting. use radio buttons select repository section choose selecting remote repository entering url manually. if opt enter git url manually, add git repository (clone) url field click next . choose git service provider app’s repository, chose select remote repository. if account with connected bitrise account, ui display option connect. click connect account . this login page git provider. log git provider account. you prompted authorize bitrise.io - it! if successful, redirected bitrise, pop-up message inform successfully linked account. click okay . " });
this.add({id:143, 
title:"Connecting a Git provider with OAuth from the Account settings page", 
body:" connecting git provider with oauth account settings page connecting git provider account with oauth application allows bitrise to: list available repositories adding new app . automatically register webhooks . webhooks allow setting build triggers enable use git insights . automatically register ssh keys . in upper right corner, open account selector dropdown menu. select account settings option. on left, connected git providers , click toggle git provider wish connect. log git provider account. you prompted authorize bitrise.io - it! if successful, redirected bitrise, pop-up message inform successfully linked account. click okay . " });
this.add({id:144, 
title:"Disconnecting a Git provider account", 
body:" disconnecting git provider account in upper right corner, open account selector dropdown menu. select account settings option. on left connected git providers , click toggle git provider wish disconnect. " });
this.add({id:145, 
title:"Switching from OAuth connection to the GitHub App", 
body:" switching oauth connection github app if bitrise app oauth connection set github account, change app any time losing functionality. we strongly recommend doing switch: with installed, longer need service credential user, ssh key, webhook run builds. can't switch once switch app oauth connection github app, won't able back! to switch: install bitrise github app described relevant guide: connecting a github app from the workspace settings page . open app bitrise with user admin role app . on main page app, click app settings icon: . on left navigation menu, select integrations git provider tab. in git integration status section, see blue card with information github app support. to switch, click switch github app . " });
this.add({id:146, 
title:"Connecting self-hosted GitLab instances", 
body:" connecting self-hosted gitlab instances for workspaces, bitrise supports connecting self-hosted gitlab instances. once it’s done, add apps privately hosted repositories. for workspaces, bitrise supports connecting self-hosted gitlab instances. connecting simple, it’s done, add apps privately hosted repositories. all functions got used with publicly repositories available! setting app self-hosted gitlab repository simple: bitrise needs authorized application entire instance application id secret value belonging bitrise oauth application added workspace bitrise.io . " });
this.add({id:147, 
title:"Configuring the GitLab connection", 
body:" configuring gitlab connection to access privately hosted gitlab repositories bitrise, need create new oauth application account, assign appropriate credentials server. publicly resolvable ip address your self-hosted gitlab instance publicly resolvable ip address, bitrise won’t able connect it. log gitlab instance with root privileges. if connect bitrise root privileges , workspace’s team members access repository gitlab instance . go admin area clicking little wrench icon menu bar. on left menu bar, select applications , click new application . in name field, enter clearly identifies application. for sake simplicity, recommend bitrise . in callback url field, enter https:\/\/app.bitrise.io\/users\/auth\/gitlab\/callback . in scopes menu, check api . set confidential option no . if newly created app configured confidential, bitrise won't able access it! click submit . on page, application id secret . you’ll need connect gitlab instance bitrise.io . log bitrise open account selector dropdown menu right. find workspace click little gear icon workspace's profile page. select self-hosted gitlab option left menu bar. add self-hosted gitlab credentials: app id secret self-hosted url you done! now able access privately hosted repositories with bitrise. " });
this.add({id:148, 
title:"Adding a new app from a self-hosted GitLab repository", 
body:" adding new app self-hosted gitlab repository log bitrise.io click + symbol menu bar select add new app web ui options. select workspace owner app. when prompted select git provider, gitlab . select self-hosted option. if haven’t provided self-hosted gitlab credentials workspace before, stage. click connect . once connected, proceed usual: adding a new app" });
this.add({id:147, 
title:"Configuring the GitLab connection", 
body:" configuring gitlab connection to access privately hosted gitlab repositories bitrise, need create new oauth application account, assign appropriate credentials server. publicly resolvable ip address your self-hosted gitlab instance publicly resolvable ip address, bitrise won’t able connect it. log gitlab instance with root privileges. if connect bitrise root privileges , workspace’s team members access repository gitlab instance . go admin area clicking little wrench icon menu bar. on left menu bar, select applications , click new application . in name field, enter clearly identifies application. for sake simplicity, recommend bitrise . in callback url field, enter https:\/\/app.bitrise.io\/users\/auth\/gitlab\/callback . in scopes menu, check api . set confidential option no . if newly created app configured confidential, bitrise won't able access it! click submit . on page, application id secret . you’ll need connect gitlab instance bitrise.io . log bitrise open account selector dropdown menu right. find workspace click little gear icon workspace's profile page. select self-hosted gitlab option left menu bar. add self-hosted gitlab credentials: app id secret self-hosted url you done! now able access privately hosted repositories with bitrise. " });
this.add({id:148, 
title:"Adding a new app from a self-hosted GitLab repository", 
body:" adding new app self-hosted gitlab repository log bitrise.io click + symbol menu bar select add new app web ui options. select workspace owner app. when prompted select git provider, gitlab . select self-hosted option. if haven’t provided self-hosted gitlab credentials workspace before, stage. click connect . once connected, proceed usual: adding a new app" });
this.add({id:149, 
title:"Apple services connection", 
body:" apple services connection connect bitrise builds apple services using api key authentication id order manage ios code signing deployment. your workflow contain steps need information apple service use, example, app store connect developer portal. these services supported following steps: manage ios code signing deploy app store connect with deliver (formerly itunes connect) deploy app store connect - application loader (formerly itunes connect) fastlane to connect steps with apple service wish use build runs bitrise, need provide authentication data bitrise select established method app. you authenticate with apple’s official api key apple id password. " });
this.add({id:150, 
title:"Apple two-factor authentication requirements", 
body:" apple two-factor authentication requirements apple’s two-factor authentication (2fa) provides extra layer security apple account. if authenticating with api key so far, affected two-factor authentication requirement. if, however, authenticating with apple id password, new 2fa requirement affects you, you’ll reconnect apple developer account apple service connection page bitrise profile. you’ll provide two-factor authentication\/two-step verification code app-specific password well. please official apple documentation how generate app-specific password . " });
this.add({id:151, 
title:"Steps that require connecting to your Apple Developer account", 
body:" steps require connecting apple developer account the following steps require connection apple services (such app store connect developer portal). if you’re using any steps, make sure establish with right method. steps requiring apple authentication steps connection type manage ios code signing api key authentication, apple id authentication step inputs xcode archive & export ios api key authentication, apple id authentication step inputs export ios tvos xcode archive api key authentication, apple id authentication step inputs xcode build testing ios api key authentication, apple id authentication step inputs fastlane api key authentication, apple id authentication step inputs deploy app store connect with deliver (formerly itunes connect) api key authentication, apple id authentication step inputs deploy app store connect - application loader (formerly itunes connect) api key authentication, apple id authentication step depending authentication use project, following options: api key authentication: if can, recommend use authentication method. it does require two-factor authentication. all takes connecting apple services providing name , issuer id , key id upload private key (.p8) , selecting account team tab app’s settings. the data automatically populates respective fields steps work with api key authentication. apple id authentication: if use api key authentication, authenticate with password. provide apple id , password , 2fa code app-specific password select account team tab app’s settings. the data automatically populates respective fields steps work with apple id authentication. api key apple id authentication step inputs: if wish deploy multiple teams team different connected you’ve using, add preferred step’s inputs. some steps, xcode archive & export ios, override option, like fastlane, options id level override. " });
this.add({id:152, 
title:"Apple service permissions", 
body:" apple service permissions in order successfully connect bitrise apple services, need set right roles accesses account id api keys. in order successfully connect bitrise apple services, need set right roles accesses account id api keys. you appropriate access rights able to: use automatic code signing. deploy app app store. the exact roles accesses need depend number factors: authentication method, use xcode managed signing, details app deployment process, things. in guide, we'll list roles based main authentication methods : api key authentication apple id authentication. " });
this.add({id:153, 
title:"Required access with API key authentication", 
body:" required access with api key authentication to use bitrise steps with apple api key authentication, need create app store connect appropriate access level. the level depends do. if, example, use xcode managed signing project wish export generated ipa file with distribution certificate app store provisioning profile, connect api key admin access. table 9, “ contains required access automatic code signing. in table, grouped signing actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. access required automatic code signing with api key authentication code signing action required access with xcode managed signing turned on required access with xcode managed signing turned off exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids developer developer exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids admin developer table 10, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. access required app store deployment with api key authentication app store deployment actions required access api key uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:154, 
title:"Required access with Apple ID authentication", 
body:" required access with apple id authentication to use bitrise steps with apple id authentication, need make sure appropriate role developer team. table 11, “ contains necessary roles using automatic code signing bitrise. in table, grouped actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. read different distribution methods: creating a signed ipa for xcode projects . xcode managed signing if use apple id authentication bitrise, xcode managed signing automatically turned project. instead, bitrise uses automatic code logic. roles required automatic code signing with apple id authentication code signing action required role exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager table 12, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. roles required app store deployment with api key authentication app store deployment actions required role apple id uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:150, 
title:"Apple two-factor authentication requirements", 
body:" apple two-factor authentication requirements apple’s two-factor authentication (2fa) provides extra layer security apple account. if authenticating with api key so far, affected two-factor authentication requirement. if, however, authenticating with apple id password, new 2fa requirement affects you, you’ll reconnect apple developer account apple service connection page bitrise profile. you’ll provide two-factor authentication\/two-step verification code app-specific password well. please official apple documentation how generate app-specific password . " });
this.add({id:151, 
title:"Steps that require connecting to your Apple Developer account", 
body:" steps require connecting apple developer account the following steps require connection apple services (such app store connect developer portal). if you’re using any steps, make sure establish with right method. steps requiring apple authentication steps connection type manage ios code signing api key authentication, apple id authentication step inputs xcode archive & export ios api key authentication, apple id authentication step inputs export ios tvos xcode archive api key authentication, apple id authentication step inputs xcode build testing ios api key authentication, apple id authentication step inputs fastlane api key authentication, apple id authentication step inputs deploy app store connect with deliver (formerly itunes connect) api key authentication, apple id authentication step inputs deploy app store connect - application loader (formerly itunes connect) api key authentication, apple id authentication step depending authentication use project, following options: api key authentication: if can, recommend use authentication method. it does require two-factor authentication. all takes connecting apple services providing name , issuer id , key id upload private key (.p8) , selecting account team tab app’s settings. the data automatically populates respective fields steps work with api key authentication. apple id authentication: if use api key authentication, authenticate with password. provide apple id , password , 2fa code app-specific password select account team tab app’s settings. the data automatically populates respective fields steps work with apple id authentication. api key apple id authentication step inputs: if wish deploy multiple teams team different connected you’ve using, add preferred step’s inputs. some steps, xcode archive & export ios, override option, like fastlane, options id level override. " });
this.add({id:152, 
title:"Apple service permissions", 
body:" apple service permissions in order successfully connect bitrise apple services, need set right roles accesses account id api keys. in order successfully connect bitrise apple services, need set right roles accesses account id api keys. you appropriate access rights able to: use automatic code signing. deploy app app store. the exact roles accesses need depend number factors: authentication method, use xcode managed signing, details app deployment process, things. in guide, we'll list roles based main authentication methods : api key authentication apple id authentication. " });
this.add({id:153, 
title:"Required access with API key authentication", 
body:" required access with api key authentication to use bitrise steps with apple api key authentication, need create app store connect appropriate access level. the level depends do. if, example, use xcode managed signing project wish export generated ipa file with distribution certificate app store provisioning profile, connect api key admin access. table 9, “ contains required access automatic code signing. in table, grouped signing actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. access required automatic code signing with api key authentication code signing action required access with xcode managed signing turned on required access with xcode managed signing turned off exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids developer developer exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids admin developer table 10, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. access required app store deployment with api key authentication app store deployment actions required access api key uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:154, 
title:"Required access with Apple ID authentication", 
body:" required access with apple id authentication to use bitrise steps with apple id authentication, need make sure appropriate role developer team. table 11, “ contains necessary roles using automatic code signing bitrise. in table, grouped actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. read different distribution methods: creating a signed ipa for xcode projects . xcode managed signing if use apple id authentication bitrise, xcode managed signing automatically turned project. instead, bitrise uses automatic code logic. roles required automatic code signing with apple id authentication code signing action required role exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager table 12, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. roles required app store deployment with api key authentication app store deployment actions required role apple id uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:153, 
title:"Required access with API key authentication", 
body:" required access with api key authentication to use bitrise steps with apple api key authentication, need create app store connect appropriate access level. the level depends do. if, example, use xcode managed signing project wish export generated ipa file with distribution certificate app store provisioning profile, connect api key admin access. table 9, “ contains required access automatic code signing. in table, grouped signing actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. access required automatic code signing with api key authentication code signing action required access with xcode managed signing turned on required access with xcode managed signing turned off exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids developer developer exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids admin developer table 10, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. access required app store deployment with api key authentication app store deployment actions required access api key uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:154, 
title:"Required access with Apple ID authentication", 
body:" required access with apple id authentication to use bitrise steps with apple id authentication, need make sure appropriate role developer team. table 11, “ contains necessary roles using automatic code signing bitrise. in table, grouped actions based type ipa file we're attempting export. there main types: development ipa: ipa exported with development method. distribution ipa: ipa exported with app-store , ad-hoc , enterprise distribution method. read different distribution methods: creating a signed ipa for xcode projects . xcode managed signing if use apple id authentication bitrise, xcode managed signing automatically turned project. instead, bitrise uses automatic code logic. roles required automatic code signing with apple id authentication code signing action required role exporting development ipa. this include: creating development provisioning profiles. deleting development provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager exporting app store ipa. this include: creating development distribution provisioning profiles. deleting development distribution provisioning profiles. downloading provisioning profiles. registering configuring app ids. adding device udids app manager table 12, “ contains required roles deploying app app store. for app store deployment, required access depends how wish upload generated ipa file. you either: upload ipa any additional steps. upload ipa with metadata screenshots, submit app review. roles required app store deployment with api key authentication app store deployment actions required role apple id uploading new ipa any metadata developer uploading new ipa and: updating app metadata. uploading screenshots. submitting app app store review. app manager " });
this.add({id:155, 
title:"Connecting to an Apple service with API key", 
body:" connecting apple service with api key connect apple service with api key manage ios code signing deployment. the authentication recommended way connecting bitrise services. connecting apple service (such app store connect apple developer portal) with api key requires generating key, adding authentication data bitrise, assigning app. the api key authentication recommended way connecting bitrise apple services. you 50 keys added apple services connection page app use one. no step input modifications needed with method, step inputs related authenticating with apple api key automatically populated connection set up. you don't manually modify input fields all. " });
this.add({id:156, 
title:"Adding API key authentication data on Bitrise", 
body:" adding api key authentication data bitrise there ways add api key authentication data bitrise: on profile settings page. on integrations page app settings page. profile page app settings page on app store connect , generate new api key with admin access users access . you need key, key id issuer bitrise. admin access you use admin role new app store connect api key! the step build fail set different role. in upper right corner, open account selector dropdown menu. select account settings option. on left, select apple service connection . click add api key . fill required fields: name : your generated api key's name. issuer id : to issuer id, log to app store connect and select users access , select api keys tab.the issuer id appears near page. to copy id, click copy id. key id : when successfully generate new api key, app store connect shows key id. upload .p8 file: drag drop upload field, click select file computer. click connect . on app store connect , generate new api key with admin access users access . you need key, key id issuer bitrise. admin access you use admin role new app store connect api key! the step build fail set different role. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . select stores tab. find app store connect section. find api key authentication (recommended) option. click add api key . fill required fields: name : your generated api key's name. issuer id : to issuer id, log to app store connect and select users access , select api keys tab.the issuer id appears near page. to copy id, click copy id. key id : when successfully generate new api key, app store connect shows key id. upload .p8 file: drag drop upload field, click select file computer. click connect . once done, assign api key any app access account. from then, use connection app store connect. " });
this.add({id:157, 
title:"Assigning API key authentication to your app", 
body:" assigning api key authentication app to use api key authentication apple services app , must: add api key bitrise : you add multiple api keys account. assign api key app: each app assigned it. to assign api key app: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . select stores tab. find app store connect section. find api key authentication (recommended) option. click add api key api key set change api key existing assigned. multiple apps with api key with add api key button, add new app store connect api key bitrise account. other apps access use key, too. if changing existing api key, select key need dropdown menu dialog box. you see api key keys registered bitrise account. the step able connect app store connect apple developer portal build. " });
this.add({id:156, 
title:"Adding API key authentication data on Bitrise", 
body:" adding api key authentication data bitrise there ways add api key authentication data bitrise: on profile settings page. on integrations page app settings page. profile page app settings page on app store connect , generate new api key with admin access users access . you need key, key id issuer bitrise. admin access you use admin role new app store connect api key! the step build fail set different role. in upper right corner, open account selector dropdown menu. select account settings option. on left, select apple service connection . click add api key . fill required fields: name : your generated api key's name. issuer id : to issuer id, log to app store connect and select users access , select api keys tab.the issuer id appears near page. to copy id, click copy id. key id : when successfully generate new api key, app store connect shows key id. upload .p8 file: drag drop upload field, click select file computer. click connect . on app store connect , generate new api key with admin access users access . you need key, key id issuer bitrise. admin access you use admin role new app store connect api key! the step build fail set different role. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . select stores tab. find app store connect section. find api key authentication (recommended) option. click add api key . fill required fields: name : your generated api key's name. issuer id : to issuer id, log to app store connect and select users access , select api keys tab.the issuer id appears near page. to copy id, click copy id. key id : when successfully generate new api key, app store connect shows key id. upload .p8 file: drag drop upload field, click select file computer. click connect . once done, assign api key any app access account. from then, use connection app store connect. " });
this.add({id:157, 
title:"Assigning API key authentication to your app", 
body:" assigning api key authentication app to use api key authentication apple services app , must: add api key bitrise : you add multiple api keys account. assign api key app: each app assigned it. to assign api key app: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . select stores tab. find app store connect section. find api key authentication (recommended) option. click add api key api key set change api key existing assigned. multiple apps with api key with add api key button, add new app store connect api key bitrise account. other apps access use key, too. if changing existing api key, select key need dropdown menu dialog box. you see api key keys registered bitrise account. the step able connect app store connect apple developer portal build. " });
this.add({id:158, 
title:"Connecting to an Apple service with Apple ID", 
body:" connecting apple service with id connect apple service with id manage ios code signing deployment. connecting apple service (such app store connect developer portal) with id requires first add password apple service connection page, select app use apple id authentication build running. if use api key authentication, recommend try option. please note connect apple id bitrise. apple accounts with two-factor authentication enabled if two-factor authentication enabled apple account, provide app-specific password process. learn how generate app-specific password security section apple id account page . " });
this.add({id:159, 
title:"Adding Apple ID authentication data on Bitrise", 
body:" adding apple id authentication data bitrise in upper right corner, open account selector dropdown menu. select account settings option. on left menu bar, select apple service connection . click add connection button. provide apple id password popup window. click connect . enter verification code two factor authentication window. add app-specific password . click verify continue. you prompted provide verification code. your authentication expires 30 days authenticate again. when happens, apple service connection page, automatically ask two-factor authentication (2fa) code authenticate again. there list apple developer accounts defined. to far right id connection, 3 dots. click dots select re-authenticate ( 2sa\/2fa ). continue with assigning apple developer account app. " });
this.add({id:160, 
title:"Assigning Apple ID authentication to your app", 
body:" assigning apple id authentication app connecting apple service (such app store connect developer portal) with id authentication requires first add data bitrise.io assign credentials app. with method, don't worry using steps connect services: step inputs related automatically filled in. can't assign users' apple credentials you set user account's apple id authentication data app. if app needs else's credentials, log make change themselves. to assign apple id authentication data app: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll connection apple services section. find apple id authentication option. click change <username> . if can't option, probably haven't set apple credentials bitrise.io. note changing selected user removes previous user. need use user's again, log change themselves. test connection by clicking test connection , check bitrise access apple services using provided credentials. steps able connect apple service build. " });
this.add({id:159, 
title:"Adding Apple ID authentication data on Bitrise", 
body:" adding apple id authentication data bitrise in upper right corner, open account selector dropdown menu. select account settings option. on left menu bar, select apple service connection . click add connection button. provide apple id password popup window. click connect . enter verification code two factor authentication window. add app-specific password . click verify continue. you prompted provide verification code. your authentication expires 30 days authenticate again. when happens, apple service connection page, automatically ask two-factor authentication (2fa) code authenticate again. there list apple developer accounts defined. to far right id connection, 3 dots. click dots select re-authenticate ( 2sa\/2fa ). continue with assigning apple developer account app. " });
this.add({id:160, 
title:"Assigning Apple ID authentication to your app", 
body:" assigning apple id authentication app connecting apple service (such app store connect developer portal) with id authentication requires first add data bitrise.io assign credentials app. with method, don't worry using steps connect services: step inputs related automatically filled in. can't assign users' apple credentials you set user account's apple id authentication data app. if app needs else's credentials, log make change themselves. to assign apple id authentication data app: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll connection apple services section. find apple id authentication option. click change <username> . if can't option, probably haven't set apple credentials bitrise.io. note changing selected user removes previous user. need use user's again, log change themselves. test connection by clicking test connection , check bitrise access apple services using provided credentials. steps able connect apple service build. " });
this.add({id:161, 
title:"Connecting to an Apple Service with Step inputs", 
body:" connecting apple service with step inputs if want deploy team authentication different connected you’ve using, add preferred step’s inputs. if wish deploy multiple teams team authentication different connected you’ve using, add preferred step’s inputs. this override connection previously set bitrise developer connection . this way connection restricted given step set authentication. 2fa apple id authentication if 2fa required apple id, use id authentication with deploy app store connect with deliver (formerly itunes connect) fastlane steps instead authenticating step inputs. " });
this.add({id:162, 
title:"Authenticating in a Step with API key", 
body:" authenticating step with api key api-key & apple id api-key steps add following steps workflow: fastlane deploy app store connect with deliver (formerly itunes connect) deploy app store connect - application loader (formerly itunes connect) either api key apple id authentication step inputs you add type authentication step, api key apple id one. in case, make sure bitrise apple developer connection input set , step with configured authentication method apple service connection (unless decide remove connection teams tab). upload api key generic file storage section code signing & files tab. set bitrise apple developer connection input . set issuer id secret environment variable respective field step. configure api key path api issuer inputs. save changes run new build. add following steps workflow: manage ios code signing xcode archive & export ios export ios tvos xcode archive xcode build testing ios upload app store connect api private key file (.p8 file) the  generic file storage  in the  code signing & files  tab. set automatic code signing method api-key . set following step inputs the  app store connect connection override input group: app store connect api private key : local path remote url private key (.p8 file) app store connect api. set input automatically generated env var connected api file uploaded the generic file storage in step 2. app store connect api key id : private key id used app store connect authentication. app store connect api issuer id : private key issuer id used app store connect authentication. " });
this.add({id:163, 
title:"Authenticating in a Step with Apple ID and password", 
body:" authenticating step with apple id password either api key apple id authentication step inputs you add type authentication step, api key apple id one. in case, make sure bitrise apple developer connection input set , step with configured authentication method apple service connection (unless decide remove connection teams tab). add step workflow. set apple id password . set bitrise apple developer connection input . save changes run new build. " });
this.add({id:162, 
title:"Authenticating in a Step with API key", 
body:" authenticating step with api key api-key & apple id api-key steps add following steps workflow: fastlane deploy app store connect with deliver (formerly itunes connect) deploy app store connect - application loader (formerly itunes connect) either api key apple id authentication step inputs you add type authentication step, api key apple id one. in case, make sure bitrise apple developer connection input set , step with configured authentication method apple service connection (unless decide remove connection teams tab). upload api key generic file storage section code signing & files tab. set bitrise apple developer connection input . set issuer id secret environment variable respective field step. configure api key path api issuer inputs. save changes run new build. add following steps workflow: manage ios code signing xcode archive & export ios export ios tvos xcode archive xcode build testing ios upload app store connect api private key file (.p8 file) the  generic file storage  in the  code signing & files  tab. set automatic code signing method api-key . set following step inputs the  app store connect connection override input group: app store connect api private key : local path remote url private key (.p8 file) app store connect api. set input automatically generated env var connected api file uploaded the generic file storage in step 2. app store connect api key id : private key id used app store connect authentication. app store connect api issuer id : private key issuer id used app store connect authentication. " });
this.add({id:163, 
title:"Authenticating in a Step with Apple ID and password", 
body:" authenticating step with apple id password either api key apple id authentication step inputs you add type authentication step, api key apple id one. in case, make sure bitrise apple developer connection input set , step with configured authentication method apple service connection (unless decide remove connection teams tab). add step workflow. set apple id password . set bitrise apple developer connection input . save changes run new build. " });
this.add({id:164, 
title:"Steps requiring Apple authentication", 
body:" steps requiring apple authentication check bitrise steps require connection apple service using api key id. in guide list steps require authentication methods choose depending app’s requirement. " });
this.add({id:165, 
title:"Manage iOS Code Signing Step", 
body:" manage ios code signing step this step takes care setting required code signing assets project built bitrise. the step uses api key apple id password authentication connect service. once connection configured, will: generate, update download provisioning profiles needed ios project. verify register project's bundle ids apple developer site. register ios devices connected bitrise account with app store connect. connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:166, 
title:"Xcode Archive & Export for iOS Step", 
body:" xcode archive & export ios step the step archives xcode project running the  xcodebuild archive  command exports archive ipa file with the  xcodebuild -exportarchive  command. this ipa file shared, installed test devices, uploaded app store connect. the step perform ios code signing automatic code signing method input specifies method. by default, it's turned off. to perform ios code signing, use api key apple id authentication. connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:167, 
title:"Export iOS and tvOS Xcode archive Step", 
body:" export ios tvos xcode archive step exports ipa existing ios tvos .xcarchive file. you add multiple export tvos xcode archive steps workflows create multiple different signed ipa files. the step perform ios code signing automatic code signing method input specifies method. by default, it's turned off. to perform ios code signing, use api key apple id authentication. connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:168, 
title:"Xcode Build for testing for iOS Step", 
body:" xcode build testing ios step the step runs xcode's  xcodebuild  command with the build-for-testing option. this builds app associated tests so can, example, upload third-party testing service run real device. the step creates an  .xctestrun  file. to able run tests real device needs code signing. the  automatic code signing method  step input allows log apple developer account based the apple service connection provide bitrise and download any provisioning profiles needed project the  distribution method . connecting to an apple service with api keyconnecting to an apple service with apple idauthenticating in a step with api key" });
this.add({id:169, 
title:"Deploy to App Store Connect with Deliver Step", 
body:" deploy app store connect with deliver step with step , upload screenshots, metadata binaries https:\/\/appstoreconnect.apple.com\/ submit app app store review using fastlane deliver action. the deploy app store connect with deliver (formerly itunes connect) step connect apple developer account with id app store connect api, inputs. please note case 2fa enabled id, deploy app store connect with deliver (formerly itunes connect) step work with apple id authentication set service page profile. the default method api key authentication. choose connection works project: connecting to an apple service with api keyconnecting to an apple service with apple idconnecting to an apple service with step inputs" });
this.add({id:170, 
title:"Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step", 
body:" deploy app store connect - application loader (formerly itunes connect) step with step , upload binaries (.ipa .pkg files) https:\/\/appstoreconnect.apple.com\/ . the deploy app store connect - application loader (formerly itunes connect) step connect apple developer account with app store connect api, id password, inputs. choose connection method works project: connecting to an apple service with api keyconnecting to an apple service with apple idconnecting to an apple service with step inputs" });
this.add({id:171, 
title:"fastlane Step", 
body:" fastlane step with step run fastlane lanes bitrise just like locally. check guide integrating fastlane bitrise information. please note case 2fa enabled apple id, fastlane step work with apple id authentication set apple service page profile. two-factor authentication fails with fastlane step in cases, fastlane step doesn't value fastlane_session variable correctly attempting connect apple developer portal, causing two-factor authentication fail. check potential workaround issue. connecting to an apple service with api keyconnecting to an apple service with apple idconnecting to an apple service with step inputs" });
this.add({id:172, 
title:"SAML SSO in Bitrise", 
body:" saml sso bitrise velocity enterprise users create log bitrise workspace using saml sso provider’s provide extra layer security. workspace members log bitrise using saml sso provider’s system. with sso, workspaces able apply security guidelines provider accessing workspace. managing role level access sso supported bitrise does support user authorization management (assigning roles) sso. bitrise does support user authentication (signup\/login) sso. before connecting saml sso workspace, make sure: you saml sso provider (identity provider) connect bitrise administrator hand. your account bitrise velocity enterprise build platform plan . if doesn’t workspace, ahead create one. setting saml sso existing brand new workspaces bitrise. only workspace owner set saml sso bitrise workspace. " });
this.add({id:173, 
title:"Navigating to the Single Sign-On page of Bitrise", 
body:" navigating single sign-on page bitrise if workspace owner bitrise, use single sign-on tab set saml sso connection provider bitrise workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left menu bar, click single sign-on single sign-on page. continue with setting saml sso workspace bitrise. " });
this.add({id:174, 
title:"Authorizing SAML SSO", 
body:" authorizing saml sso once workspace owner set saml sso, authorize sso logging sso. make sure you’re logged bitrise usual way. use browser window continue. bitrise sends verification e-mail workspace members. by clicking log in saml sso button using provided url, workspace members authorize saml sso login. the email shows owner’s address (should need contact them.) click log in saml sso button copy-paste url new tab browser. you’re directed bitrise allow “workspace name” sign page. click authorize trust workspace control bitrise account sign-in process. if you’re logged saml sso provider, you’ll automatically taken bitrise dashboard. if you’re not, you’ll prompted log saml sso provider’s site, taken bitrise dashboard. click don’t allow invitation email untrusted source. note using different non-matching email address, error message. make sure log with right address bitrise, sso provider site. if went well, landing bitrise dashboard. " });
this.add({id:175, 
title:"Joining a SAML SSO Workspace as a new member", 
body:" joining saml sso workspace new member if bitrise workspace owner invites workspace, email invitation join saml sso. let’s see how! go mailbox email titled saml invitation instructions . click sign sso button copy provided url paste new browser. our almost page appears. provide username like use bitrise workspace. please letters, numbers, underscores (_), dashes (-) dots (.) username. the email field non-editable. click finish sign-up button. if went well, you’re landing bitrise add first app. " });
this.add({id:176, 
title:"Checking SAML SSO statuses on Bitrise", 
body:" checking saml sso statuses bitrise now workspace owner set saml sso workspace, members (including owner) check member’s statuses team tab. accessing single sign-on tab the single sign-on tab available workspace owner. there kinds saml sso statuses bitrise. saml is enabled: login saml sso enabled. saml is disabled: the workspace member enabled saml sso connection yet. to enable it, follow instructions verification email bitrise. go workspace’s profile page. select team left menu. go members tab check workspace member’s saml status. " });
this.add({id:177, 
title:"Enforcing SAML SSO on a Workspace", 
body:" enforcing saml sso workspace enforcing saml sso workspace provides extra layer security: enforce security guidelines bitrise (for example, password format requirements, two-factor authentication). enforced saml sso enforcing saml sso workspace makes way logging in\/signing workspace. one workspace you member workspaces enforced saml sso bitrise. log bitrise hover left navigation bar. make sure right workspace selected. select settings . go workspace’s single sign on tab. check enforce saml sso checkbox enforce saml sso. unable enforce saml sso a workspace owner enforce saml sso members enabled connection with enforces sso. click save changes . now workspace members log saml sso. " });
this.add({id:178, 
title:"Adding a new user to a Workspace with enforced SAML SSO", 
body:" adding new user workspace with enforced saml sso once saml sso enforced workspace, add new users it. but case, it's important differentiate types users: users with existing accounts bitrise : we recommend workspace admin turns enforced sso invites user workspace. the invited bitrise invitation process enable connection. once done, turn enforce sso switch on. users new bitrise haven't registered account : the workspace admin doesn't need turn enforced sso: simply invite new user complete sign-up procedure described: joining a saml sso workspace as a new member . alternatively, new user directly sign-up page , click saml button follow instructions achieve goal. " });
this.add({id:179, 
title:"Logging in via SAML SSO", 
body:" logging saml sso if saml sso connection added workspace enabled too, easily log bitrise account having use password email address. expired saml sso certificate if saml sso certificate expired, log bitrise sso, contact support team help in. click login sso login page . you redirected initiate single sign-on page . provide workspace bitrise workspace’s name field. click continue with sso log in. if you’re logged sso provider site, automatically landing bitrise dashboard. if you’re logged sso provider site, redirected log in. after successful login, bitrise dashboard. " });
this.add({id:180, 
title:"Disabling a Workspace's SAML SSO", 
body:" disabling workspace's saml sso if disable saml sso, workspace members able sign with regular sign-in procedure. log bitrise hover left navigation bar. make sure right workspace selected. select settings . go single sign-on tab. if saml sso enforced workspace before, toggle enforce enforce saml sso off. click disable sso . a confirmation pop-up appears confirm\/cancel action. please note clicking disable sso button, disable saml sso workspace members. once it’s done, members able log normal bitrise credentials. you receive sso disabled email bitrise (letsconnect@bitrise.io) confirms disabled saml sso workspace. " });
this.add({id:181, 
title:"Disabling a Workspace member's SAML SSO", 
body:" disabling workspace member's saml sso if workspace owner, disable member’s saml sso connection bitrise. there ways so: remove user workspace. remove user saml sso provider means able log with any more. " });
this.add({id:182, 
title:"Updating SAML SSO configuration", 
body:" updating saml sso configuration you update workspace’s configured saml sso using configure saml sso provider button single sign-on page. this comes handy saml sso provider’s certificate expired wish insert new bitrise. another use case is, example, configured ago check current configuration details. accessing update sso button as with saml sso configurations, workspace owner access use update button. as owner workspace, click workspace’s single sing-on tab. click configure saml sso provider button. now access configuration details workspace’s saml sso. make changes click save changes . from any saml sso request use new configuration automatically. " });
this.add({id:183, 
title:"Setting up Google SSO for Bitrise", 
body:" setting google sso bitrise add saml sso bitrise workspace using google workspace. this guide provides step-by-step instructions setting bitrise saml application google workspace. saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure google administrator account add bitrise saml app. the workspace help setting sso workspace. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you'll need to: get configuration information google workspace bitrise. enable bitrise app group organizational unit. " });
this.add({id:184, 
title:"Getting configuration information from Google Workspace and Bitrise", 
body:" getting configuration information google workspace bitrise sign google admin console. select apps admin console page. on apps page, click saml apps . on web mobile apps page, click add apps button, select add custom saml app option dropdown. on app details page add bitrise app name. please note bitrise format accepted. click continue . on getting identity provider details page: copy sso url paste saml sso provider single sing-on url (sso url) bitrise. copy content certificate field paste saml sso provider certificate field bitrise. you upload certificate local too. while bitrise, click copy link button copy assertion consumer service url (acs url) . we need google workspace second. let’s not click configure sso button just now! let’s head getting identity provider details page google workspace. click continue . on service provider details page: paste assertion consumer service url (acs url) bitrise acs url field google workspace. (remember, got link step 7.) type bitrise entity id field. please note bitrise format accepted. tick signed response checkbox start url (optional) . click continue . click configure sso button bitrise. on google workspace’s attribute mapping page, click finish - configure here. " });
this.add({id:185, 
title:"Enabling Bitrise app for a group or an organizational unit", 
body:" enabling bitrise app group organizational unit all left g suite enable newly created bitrise app group organization choice. go web mobile apps page g suite select bitrise apps list. click user access service status page. select on hit save . " });
this.add({id:186, 
title:"Setting up AD FS SSO for Bitrise", 
body:" setting ad fs sso bitrise add saml sso bitrise workspace using microsoft active directory federation services. this guide provides step-by-step instructions setting saml sso using microsoft active directory federation services (ad fs). saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure ad fs administrator hand saml sso configuration process. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . in tutorial jumping forth bitrise ad fs so recommended tools available process. to configure saml sso with ad fs, you'll need to: add identity provider sign-on url ad fs bitrise . export certificate generated ad fs add bitrise . add bitrise relying party trust ad fs . configure claim rules . " });
this.add({id:187, 
title:"Adding the identity provider sign-on URL", 
body:" adding identity provider sign-on url log bitrise hover left navigation bar. make sure right workspace selected. select settings . go single sign-on tab. add identity provider sign-on url ad fs saml sso provider single sign-on url (sso url) field. for example, valid value https:\/\/<ad fs url>.com\/adfs\/ls . " });
this.add({id:188, 
title:"Exporting an AD FS certificate", 
body:" exporting ad fs certificate you add certificate generated ad fs saml sso provider certificate field single sign-on page bitrise. if you’ve created certificate ad fs, export pem format fs server. haven’t yet, follow instructions: obtain configure ts td certificates ad fs . in server manager , click tools , select ad fs management . select certificates folder left menu pane. click certificate token-signing . this brings certificates window. click details tab certificate page. hit next certificate export wizard window. select base-64 encoded x.509 (.cer) export file format. click next . give file field hit save . have final look certificate settings. if need modify any those, click backward arrow certificate export wizard . otherwise, click finish . make sure leave ad fs window open need minute. open exported certificate text editor copy\/paste content saml sso provider certificate field upload file itself local computer. save settings clicking configure sso bitrise. let’s continue saml sso configuration ad fs adding bitrise. " });
this.add({id:189, 
title:"Adding Bitrise as a relying party trust to AD FS", 
body:" adding bitrise relying party trust ad fs once finished with exporting certificate, continue adding bitrise relying party trust ad fs . the add relying party trust wizard guides steps. on ad fs, click relying party trust left menu bar, click relying party trust . select add relying party trust actions . on welcome page, select claims aware option hit start . on select data source page, click enter data relying party manually option page. click next . on specify display name page, add display name, example mycorp . click next . specify token encryption certificate configure certificate page optional. click next . on configure ur l page, select enable support saml 2.0 websso protocol copy paste assertion consumer service url (acs url) bitrise relying party saml 2. 0 sso service url field ad fs. click next . on configure identifiers page, add bitrise relying party trust identifier field. click add , hit next . do modify default access control policy choose access control policy page so access saml sso connection. click next . on ready add trust page, review settings click next . on finish page, tick checkbox edit claims issuance policy bitrise. click close . on ad fs, click relying party trust left menu bar, click relying party trust . select add relying party trust actions . on welcome page, select claims aware option hit start . on select data source page, click enter data relying party manually option page. click next . on specify display name page, add display name, example mycorp . click next . specify token encryption certificate configure certificate page optional. click next . on configure ur l page, select enable support saml 2.0 websso protocol copy paste assertion consumer service url (acs url) bitrise relying party saml 2. 0 sso service url field ad fs. click next . on configure identifiers page, add bitrise relying party trust identifier field. click add , hit next . do modify default access control policy choose access control policy page so access saml sso connection. click next . on ready add trust page, review settings click next . on finish page, tick checkbox edit claims issuance policy bitrise. click close . " });
this.add({id:190, 
title:"Configuring claim rules", 
body:" configuring claim rules on edit claim issuance policy page, click add rule button hit ok . create send ldap attributes claims claim rule click next . on configure claim rule page: add rule name, example send e-mail, claim rule field. select attribute store likely active directory. in mapping ldap attributes outgoing claim types field select e-mail addresses. click finish . add new rule turns e-mail formatter nameid. to so, click add rule edit claim issuance policy page again. on select rule template , select transform incoming claim option claim rule template dropdown. click next . give new rule, example, transform e-mail . select e-mail address incoming claim type . select nameid outgoing claim type. choose email outgoing id format . hit ok finish process. " });
this.add({id:191, 
title:"Setting up Azure AD SSO for Bitrise", 
body:" setting azure ad sso bitrise add saml sso bitrise workspace using azure ad. saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure azure ad administrator logged hand. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you need to: add bitrise azure ad new application . add users groups bitrise app azure ad . set saml sso bitrise azure ad . " });
this.add({id:192, 
title:"Adding Bitrise to Azure AD as a new application", 
body:" adding bitrise azure ad new application log microsoft azure admin. click azure active directory icon azure services page. click enterprise applications manage . click new application add bitrise new app account. type bitrise what’s app? field. the integrate any application don’t gallery button automatically selected. hit create . you newly created app listed all applications page. click bitrise app overview page. continue with configuring bitrise saml app. " });
this.add({id:193, 
title:"Adding users\/ groups to the app on Azure AD", 
body:" adding users\/ groups app azure ad before setting saml app, add users\/groups app azure ad use sso log bitrise workspace. in words, workspace member added user ad. select users groups left menu. click + add user\/group . on users page add assignment , select users list click select . once it’s done, select role users select role dropdown. on add assignment page, click assign finish adding users. " });
this.add({id:194, 
title:"Setting up SAML SSO between Bitrise and Azure AD", 
body:" setting saml sso bitrise azure ad click single sign-on left menu. select saml . you land set single sign-on with saml page. click pencil symbol basic saml configuration edit fields. add bitrise identifier (entity id) . leave window open! we come with information bitrise second. head workspace bitrise. click single sign on tab click copy link button copy assertion consumer service url (acs url) bitrise. let’s head basic saml configuration window azure ad. paste assertion consumer service url bitrise reply url field basic saml configuration page azure ad. click save close basic saml configuration window. on single sign-on page azure ad, scroll set bitrise section. copy login url paste saml sso provider single sign-on url (sso url) field bitrise. on single sign-on page azure ad, scroll bit saml signing certificate section. click download certificate (base64) download certificate local computer. open certificate file copy\/paste content saml sso provider certificate field bitrise upload file itself local too. (if manually adding content, need content (including ----begin certificate----- -----end certificate----- well). hit configure sso bitrise. you successfully set bitrise saml sso app azure ad. " });
this.add({id:195, 
title:"Setting up Auth0 SSO for Bitrise", 
body:" setting auth0 sso bitrise add saml sso bitrise workspace using auth0. this guide provides instructions setting saml sso using auth0 . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: an auth0 administrator logged hand. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you need to: create bitrise web application auth0 . retrieve saml sso information auth0 . setting mapping rule bitrise app's client id . " });
this.add({id:196, 
title:"Creating Bitrise as a web application on Auth0", 
body:" creating bitrise web application auth0 log auth0 admin. click applications left menu bar click + create application button right hand applications page. on create application window, type bitrise name field. in choose application type select regular web applications , click create button. you landing newly created bitrise app’s quick start page. click addons tab. toggle saml2 web app ’s switch right. this addon: saml2 web app page automatically. copy assertion consumer service url (acs url) bitrise paste application callback url field settings tab addon: saml2 web app page. scroll addon: saml2 web app page hit save . go addons page switch turned on. " });
this.add({id:197, 
title:"Retrieving SAML SSO information from Auth0", 
body:" retrieving saml sso information auth0 once enabled bitrise web application auth0, it’s time grab certificate identity provider’s unique login url finish saml configuration bitrise. on auth0, application , select addons tab enabled bitrise app. click saml2 web app web app select usage tab. click download auth0 certificate link identity provider certificate label. open downloaded certificate file copy content saml sso provider certificate field bitrise upload file itself local computer. go auth0 copy paste identity provider login url bitrise’s saml sso provider single sign-on url (sso url) . click configure sso button bitrise. now close dialog auth0. " });
this.add({id:198, 
title:"Setting up a mapping rule for your Bitrise app’s Client ID", 
body:" setting mapping rule bitrise app’s client id bitrise authenticates saml sso users email address so you’d test sso, make sure create new mapping rule auth0. this way map auth0 client id successful authentication bitrise. on auth0, click auth pipeline left menu bar. click rules . click + create set new mapping rule. on pick rules template page, click <> empty rule . add following codeblock script box: you need new bitrise app’s client id applications ’ page. function mapsamlattributes(user, context, callback) {\n (context.clientid === '{your app's clientid'}')\n context.samlconfiguration.mappings = \"http:\/\/schemas.xmlsoap.org\/ws\/2005\/05\/identity\/claims\/nameidentifier\": \"email\"\n }; \n }\n callback(null, user, context);\n} click save changes . " });
this.add({id:199, 
title:"Setting up Idaptive SAML SSO for Bitrise", 
body:" setting idaptive saml sso bitrise add saml sso bitrise workspace using idaptive. this guide provides step-by-step instructions setting bitrise saml application idaptive . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you logged admin portal idaptive set bitrise saml sso app establish connection idaptive. if using user portal , switch admin portal clicking avatar idaptive. log idaptive admin. go apps, web apps . click add web apps button right. on custom tab select saml , click add . on add web app popup hit yes . close window. you automatically directed settings page. add bitrise name application id fields settings page click save . click trust left menu bar select manual configuration identity provider configuration . click signing certificate dropdown download certificate. open with text editor so copy content you upload file. insert content upload file itself saml sso provider certificate text box enable single sign-on page bitrise. copy single sign on url trust page idaptive. insert saml sso provider single sing-on url (sso url) field enable single sign-on page bitrise. while single sign-on page bitrise, copy assertion consumer service url (acs url) url click configure sso . now let’s head idaptive! under service provider configuration click manual configuration . type bitrise sp entity id \/ issuer audience paste assertion consumer service url (acs url) bitrise assertion consumer service (acs) url idaptive. scroll nameid format select emailaddress . click save . go permissions click add button. in select user, group, role popup, type user want add saml app. select hit add . save changes. this change status bitrise saml app deployed . you ready use idaptive saml sso provider bitrise. " });
this.add({id:200, 
title:"Setting up Okta SSO for Bitrise", 
body:" setting okta sso bitrise add saml sso bitrise workspace using okta. this guide provides step-by-step instructions setting bitrise saml application okta . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure okta administrator logged hand. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . add bitrise okta . configure bitrise saml app . set scim previsioning okta . " });
this.add({id:201, 
title:"Adding Bitrise to Okta", 
body:" adding bitrise okta bitrise integrated app okta. you add manually okta first, configure saml sso it. we jumping forth bitrise workspace account okta so make sure pages available. in practice means owner logged admin okta. log okta click admin . from left menu, select applications applications section. click create app integration button. this opens create new app integration window. select saml 2.0 option sign-in method click next . at general settings step, type bitrise app field. (optionally, add app logo wish.) click next . head bitrise workspace click single sign on tab left menu. click copy button copy assertion consumer service url (acs url) . head okta’s configure saml page paste copied url step 7. single sign-on url input field. type bitrise audience uri (sp entity id) . you download okta certificate file now, paste content upload itself saml sso provider certificate field bitrise workspace’s single sign-on page. even easier leave later need assertion consumer service url (acs url) bitrise anyway. you fetch configuring saml app okta. do hit configure sso single sing-on page bitrise just yet. set name id format emailaddress . click next . fill feedback section. hit finish . in applications , sign-on tab, click edit settings . scroll credential details section, make sure application username format set email . click save . congrats! bitrise successfully added okta app. " });
this.add({id:202, 
title:"Configuring Bitrise as a SAML app for Okta", 
body:" configuring bitrise saml app okta click assignments tab bitrise app. here assign bitrise individuals\/groups. make sure workspace members access saml. click sign-on tab bitrise app. you see saml setup completed yet. scroll down, click view saml setup instructions . the how configure saml 2.0 bitrise application page displayed. it summarizes information need set saml connection bitrise okta. copy identity provider single sign-on url paste bitrise workspace’s sso url field. if haven’t pasted certificate’s content uploaded file itself saml sso provider certificate field bitrise workspace yet, so now. click configure sso bitrise workspace. that's it! from on, access single sign-on page, configure saml sso settings. " });
this.add({id:203, 
title:"Setting up SCIM provisioning in Okta", 
body:" setting scim provisioning okta you set scim provisioning bitrise using okta. managing workspace groups while scim great way manage access users bitrise workspaces, initial configuration groups finishing setting provisioning. for information configuring groups, check adding workspace groups to an app team . we jumping forth bitrise workspace account okta, so make sure pages available. in practice, means owner logged bitrise, okta admin okta. on bitrise, configure domain control generate scim credentials . you need have: a verified domain. an scim base url authentication token. make sure save need process later. log okta click admin . from left menu, select applications applications section. select bitrise app. click general tab bitrise app. click edit app settings section select scim option using radio button provisioning . click save . a new tab called provisioning appear. head okta, select provisioning tab, click edit . paste scim base url copied bitrise scim connector base url field. add username unique identifier field users field. select provisioning actions like enable using checkboxes supported provisioning actions . push groups mandatory please note enable push groups. this bitrise, workspace membership works groups okta\/scim control select http header authorization mode dropdown menu. copy paste scim authentication token authorization field. click test connector configuration test working correctly. close test connector configuration window click save . click provisioning tab bitrise app, click edit provisioning app section. select provisioning options like enable click save . sync password we recommend keeping sync password setting disabled. that's it! you use scim provisioning okta manage access users bitrise. " });
this.add({id:204, 
title:"Pushing Okta groups to Bitrise using SCIM", 
body:" pushing okta groups bitrise using scim you push groups okta bitrise using scim provisioning. pushing group links existing creates new workspace. either way, pushing group, set synchronization okta group bitrise group. log okta click admin . from left menu, select applications applications section. select bitrise app. click push groups tab. click push groups choose filtering method. find group(s) want push. you create new group, brand group bitrise workspace link okta existing group. you choose methods using dropdown menu match result & push action . linking group if decide link okta group existing bitrise group, following mind: if okta bitrise group names different, automatically renamed match group. when manually push group connected existing bitrise group, members added included okta removed single source truth. click save . when push status changes active , synchronization okta bitrise ready. your group updated couple seconds workspace well. " });
this.add({id:205, 
title:"Synchronizing groups and users between Okta and Bitrise", 
body:" synchronizing groups users okta bitrise after pushing okta groups bitrise , synchronize groups users okta bitrise. to so, manage app integration assignments okta: log okta click  admin . from left menu, select  applications  under the  applications  section. select bitrise app. make sure create users deactivate users options enabled provisioning tab. deprovisioning users if deprovision user with scim, automatically logged bitrise pats disabled. go assignments tab. click assign choose assign people synchronize individual users assign groups synchronize groups. select users groups like synchronize, click done . domain verification new users verified domains receive email invitation join workspace. existing users receive verification email unless verify company domain. to so, contact bitrise support. after synchronizing groups users, check push groups tab see synchronization finished. you manually push updates clicking dropdown menu push status column selecting push . \"push now\" overrides bitrise group users included okta group automatically removed linked bitrise group. " });
this.add({id:206, 
title:"Setting up Ping Identity SSO for Bitrise", 
body:" setting ping identity sso bitrise add saml sso bitrise workspace using ping identity. this guide provides step-by-step instructions setting bitrise saml sso application ping identity . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: a pingone administrator logged pingone . be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . to add bitrise ping identity: click applications bar pingone . on my applications tab, make sure saml selected. click add application drop-down select new saml application . at application details, required fields click continue next step . at application configuration , leave i saml configuration selected. fill following: assertion consumer service (acs) field: insert assertion consumer service url (acs url) link bitrise workspace’s single sign-on tab. entity id field : type bitrise . signing : click sign response option. here overview settings: continue step. at sso attribute mapping , don’t change anything, proceed step. at group access , add group(s) application. these groups able access bitrise saml sso. continue step. at review setup page, doublecheck details provided previous steps. make sure download following files review page: click download signing certificate saml metadata files. click finish . let’s open files. copy entire content saml metadata file paste saml sso provider certificate field bitrise single sign-on page. open signing certificate file copy http-post singlesignonservice location link paste saml sso provider single sign-on url (sso url) field bitrise. click configure sso bitrise. now set saml sso bitrise workspace. " });
this.add({id:207, 
title:"Setting up OneLogin SSO for Bitrise", 
body:" setting onelogin sso bitrise add saml sso bitrise workspace using onelogin. this guide provides step-by-step instructions setting bitrise saml application onelogin . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure administrator onelogin hand setting saml sso connection bitrise. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . to configure bitrise onelogin: log onelogin administrator. click administration bar. select applications click add app . this find applications page. type bitrise search bar select saml2.0 type search results. click configuration tab left sidebar. you change icon add descriptions wish. make sure organization (bitrise) ticked. hit save . click configuration tab paste assertion consumer service url (acs url) bitrise workspace’s single sign-on tab single sign-on url field onelogin. hit save onelogin . select sso left sidebar. click view details x.509 certificate. copy content x.509 certificate paste saml sso provider certificate field enable single sign-on page bitrise. go sso page onelogin copy saml 2.0 endpoint (http) link. paste saml sso provider single sign-on url (sso url) field bitrise. go bitrise click configure sso . users onelogin bitrise make sure users bitrise workspace added users page onelogin. if not, users , new user add new user. don’t forget send invite ( more actions drop-down menu, send invitation ) new user so activate account onelogin. users added newly created bitrise app clicking applications user info clicking + sign. make sure added users workspace members bitrise. if you’ve completed setting bitrise onelogin connected with workspace, workspace members email contains link activate sso connection workspace. " });
this.add({id:173, 
title:"Navigating to the Single Sign-On page of Bitrise", 
body:" navigating single sign-on page bitrise if workspace owner bitrise, use single sign-on tab set saml sso connection provider bitrise workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left menu bar, click single sign-on single sign-on page. continue with setting saml sso workspace bitrise. " });
this.add({id:174, 
title:"Authorizing SAML SSO", 
body:" authorizing saml sso once workspace owner set saml sso, authorize sso logging sso. make sure you’re logged bitrise usual way. use browser window continue. bitrise sends verification e-mail workspace members. by clicking log in saml sso button using provided url, workspace members authorize saml sso login. the email shows owner’s address (should need contact them.) click log in saml sso button copy-paste url new tab browser. you’re directed bitrise allow “workspace name” sign page. click authorize trust workspace control bitrise account sign-in process. if you’re logged saml sso provider, you’ll automatically taken bitrise dashboard. if you’re not, you’ll prompted log saml sso provider’s site, taken bitrise dashboard. click don’t allow invitation email untrusted source. note using different non-matching email address, error message. make sure log with right address bitrise, sso provider site. if went well, landing bitrise dashboard. " });
this.add({id:175, 
title:"Joining a SAML SSO Workspace as a new member", 
body:" joining saml sso workspace new member if bitrise workspace owner invites workspace, email invitation join saml sso. let’s see how! go mailbox email titled saml invitation instructions . click sign sso button copy provided url paste new browser. our almost page appears. provide username like use bitrise workspace. please letters, numbers, underscores (_), dashes (-) dots (.) username. the email field non-editable. click finish sign-up button. if went well, you’re landing bitrise add first app. " });
this.add({id:176, 
title:"Checking SAML SSO statuses on Bitrise", 
body:" checking saml sso statuses bitrise now workspace owner set saml sso workspace, members (including owner) check member’s statuses team tab. accessing single sign-on tab the single sign-on tab available workspace owner. there kinds saml sso statuses bitrise. saml is enabled: login saml sso enabled. saml is disabled: the workspace member enabled saml sso connection yet. to enable it, follow instructions verification email bitrise. go workspace’s profile page. select team left menu. go members tab check workspace member’s saml status. " });
this.add({id:177, 
title:"Enforcing SAML SSO on a Workspace", 
body:" enforcing saml sso workspace enforcing saml sso workspace provides extra layer security: enforce security guidelines bitrise (for example, password format requirements, two-factor authentication). enforced saml sso enforcing saml sso workspace makes way logging in\/signing workspace. one workspace you member workspaces enforced saml sso bitrise. log bitrise hover left navigation bar. make sure right workspace selected. select settings . go workspace’s single sign on tab. check enforce saml sso checkbox enforce saml sso. unable enforce saml sso a workspace owner enforce saml sso members enabled connection with enforces sso. click save changes . now workspace members log saml sso. " });
this.add({id:178, 
title:"Adding a new user to a Workspace with enforced SAML SSO", 
body:" adding new user workspace with enforced saml sso once saml sso enforced workspace, add new users it. but case, it's important differentiate types users: users with existing accounts bitrise : we recommend workspace admin turns enforced sso invites user workspace. the invited bitrise invitation process enable connection. once done, turn enforce sso switch on. users new bitrise haven't registered account : the workspace admin doesn't need turn enforced sso: simply invite new user complete sign-up procedure described: joining a saml sso workspace as a new member . alternatively, new user directly sign-up page , click saml button follow instructions achieve goal. " });
this.add({id:179, 
title:"Logging in via SAML SSO", 
body:" logging saml sso if saml sso connection added workspace enabled too, easily log bitrise account having use password email address. expired saml sso certificate if saml sso certificate expired, log bitrise sso, contact support team help in. click login sso login page . you redirected initiate single sign-on page . provide workspace bitrise workspace’s name field. click continue with sso log in. if you’re logged sso provider site, automatically landing bitrise dashboard. if you’re logged sso provider site, redirected log in. after successful login, bitrise dashboard. " });
this.add({id:180, 
title:"Disabling a Workspace's SAML SSO", 
body:" disabling workspace's saml sso if disable saml sso, workspace members able sign with regular sign-in procedure. log bitrise hover left navigation bar. make sure right workspace selected. select settings . go single sign-on tab. if saml sso enforced workspace before, toggle enforce enforce saml sso off. click disable sso . a confirmation pop-up appears confirm\/cancel action. please note clicking disable sso button, disable saml sso workspace members. once it’s done, members able log normal bitrise credentials. you receive sso disabled email bitrise (letsconnect@bitrise.io) confirms disabled saml sso workspace. " });
this.add({id:181, 
title:"Disabling a Workspace member's SAML SSO", 
body:" disabling workspace member's saml sso if workspace owner, disable member’s saml sso connection bitrise. there ways so: remove user workspace. remove user saml sso provider means able log with any more. " });
this.add({id:182, 
title:"Updating SAML SSO configuration", 
body:" updating saml sso configuration you update workspace’s configured saml sso using configure saml sso provider button single sign-on page. this comes handy saml sso provider’s certificate expired wish insert new bitrise. another use case is, example, configured ago check current configuration details. accessing update sso button as with saml sso configurations, workspace owner access use update button. as owner workspace, click workspace’s single sing-on tab. click configure saml sso provider button. now access configuration details workspace’s saml sso. make changes click save changes . from any saml sso request use new configuration automatically. " });
this.add({id:183, 
title:"Setting up Google SSO for Bitrise", 
body:" setting google sso bitrise add saml sso bitrise workspace using google workspace. this guide provides step-by-step instructions setting bitrise saml application google workspace. saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure google administrator account add bitrise saml app. the workspace help setting sso workspace. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you'll need to: get configuration information google workspace bitrise. enable bitrise app group organizational unit. " });
this.add({id:184, 
title:"Getting configuration information from Google Workspace and Bitrise", 
body:" getting configuration information google workspace bitrise sign google admin console. select apps admin console page. on apps page, click saml apps . on web mobile apps page, click add apps button, select add custom saml app option dropdown. on app details page add bitrise app name. please note bitrise format accepted. click continue . on getting identity provider details page: copy sso url paste saml sso provider single sing-on url (sso url) bitrise. copy content certificate field paste saml sso provider certificate field bitrise. you upload certificate local too. while bitrise, click copy link button copy assertion consumer service url (acs url) . we need google workspace second. let’s not click configure sso button just now! let’s head getting identity provider details page google workspace. click continue . on service provider details page: paste assertion consumer service url (acs url) bitrise acs url field google workspace. (remember, got link step 7.) type bitrise entity id field. please note bitrise format accepted. tick signed response checkbox start url (optional) . click continue . click configure sso button bitrise. on google workspace’s attribute mapping page, click finish - configure here. " });
this.add({id:185, 
title:"Enabling Bitrise app for a group or an organizational unit", 
body:" enabling bitrise app group organizational unit all left g suite enable newly created bitrise app group organization choice. go web mobile apps page g suite select bitrise apps list. click user access service status page. select on hit save . " });
this.add({id:184, 
title:"Getting configuration information from Google Workspace and Bitrise", 
body:" getting configuration information google workspace bitrise sign google admin console. select apps admin console page. on apps page, click saml apps . on web mobile apps page, click add apps button, select add custom saml app option dropdown. on app details page add bitrise app name. please note bitrise format accepted. click continue . on getting identity provider details page: copy sso url paste saml sso provider single sing-on url (sso url) bitrise. copy content certificate field paste saml sso provider certificate field bitrise. you upload certificate local too. while bitrise, click copy link button copy assertion consumer service url (acs url) . we need google workspace second. let’s not click configure sso button just now! let’s head getting identity provider details page google workspace. click continue . on service provider details page: paste assertion consumer service url (acs url) bitrise acs url field google workspace. (remember, got link step 7.) type bitrise entity id field. please note bitrise format accepted. tick signed response checkbox start url (optional) . click continue . click configure sso button bitrise. on google workspace’s attribute mapping page, click finish - configure here. " });
this.add({id:185, 
title:"Enabling Bitrise app for a group or an organizational unit", 
body:" enabling bitrise app group organizational unit all left g suite enable newly created bitrise app group organization choice. go web mobile apps page g suite select bitrise apps list. click user access service status page. select on hit save . " });
this.add({id:186, 
title:"Setting up AD FS SSO for Bitrise", 
body:" setting ad fs sso bitrise add saml sso bitrise workspace using microsoft active directory federation services. this guide provides step-by-step instructions setting saml sso using microsoft active directory federation services (ad fs). saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure ad fs administrator hand saml sso configuration process. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . in tutorial jumping forth bitrise ad fs so recommended tools available process. to configure saml sso with ad fs, you'll need to: add identity provider sign-on url ad fs bitrise . export certificate generated ad fs add bitrise . add bitrise relying party trust ad fs . configure claim rules . " });
this.add({id:187, 
title:"Adding the identity provider sign-on URL", 
body:" adding identity provider sign-on url log bitrise hover left navigation bar. make sure right workspace selected. select settings . go single sign-on tab. add identity provider sign-on url ad fs saml sso provider single sign-on url (sso url) field. for example, valid value https:\/\/<ad fs url>.com\/adfs\/ls . " });
this.add({id:188, 
title:"Exporting an AD FS certificate", 
body:" exporting ad fs certificate you add certificate generated ad fs saml sso provider certificate field single sign-on page bitrise. if you’ve created certificate ad fs, export pem format fs server. haven’t yet, follow instructions: obtain configure ts td certificates ad fs . in server manager , click tools , select ad fs management . select certificates folder left menu pane. click certificate token-signing . this brings certificates window. click details tab certificate page. hit next certificate export wizard window. select base-64 encoded x.509 (.cer) export file format. click next . give file field hit save . have final look certificate settings. if need modify any those, click backward arrow certificate export wizard . otherwise, click finish . make sure leave ad fs window open need minute. open exported certificate text editor copy\/paste content saml sso provider certificate field upload file itself local computer. save settings clicking configure sso bitrise. let’s continue saml sso configuration ad fs adding bitrise. " });
this.add({id:189, 
title:"Adding Bitrise as a relying party trust to AD FS", 
body:" adding bitrise relying party trust ad fs once finished with exporting certificate, continue adding bitrise relying party trust ad fs . the add relying party trust wizard guides steps. on ad fs, click relying party trust left menu bar, click relying party trust . select add relying party trust actions . on welcome page, select claims aware option hit start . on select data source page, click enter data relying party manually option page. click next . on specify display name page, add display name, example mycorp . click next . specify token encryption certificate configure certificate page optional. click next . on configure ur l page, select enable support saml 2.0 websso protocol copy paste assertion consumer service url (acs url) bitrise relying party saml 2. 0 sso service url field ad fs. click next . on configure identifiers page, add bitrise relying party trust identifier field. click add , hit next . do modify default access control policy choose access control policy page so access saml sso connection. click next . on ready add trust page, review settings click next . on finish page, tick checkbox edit claims issuance policy bitrise. click close . on ad fs, click relying party trust left menu bar, click relying party trust . select add relying party trust actions . on welcome page, select claims aware option hit start . on select data source page, click enter data relying party manually option page. click next . on specify display name page, add display name, example mycorp . click next . specify token encryption certificate configure certificate page optional. click next . on configure ur l page, select enable support saml 2.0 websso protocol copy paste assertion consumer service url (acs url) bitrise relying party saml 2. 0 sso service url field ad fs. click next . on configure identifiers page, add bitrise relying party trust identifier field. click add , hit next . do modify default access control policy choose access control policy page so access saml sso connection. click next . on ready add trust page, review settings click next . on finish page, tick checkbox edit claims issuance policy bitrise. click close . " });
this.add({id:190, 
title:"Configuring claim rules", 
body:" configuring claim rules on edit claim issuance policy page, click add rule button hit ok . create send ldap attributes claims claim rule click next . on configure claim rule page: add rule name, example send e-mail, claim rule field. select attribute store likely active directory. in mapping ldap attributes outgoing claim types field select e-mail addresses. click finish . add new rule turns e-mail formatter nameid. to so, click add rule edit claim issuance policy page again. on select rule template , select transform incoming claim option claim rule template dropdown. click next . give new rule, example, transform e-mail . select e-mail address incoming claim type . select nameid outgoing claim type. choose email outgoing id format . hit ok finish process. " });
this.add({id:187, 
title:"Adding the identity provider sign-on URL", 
body:" adding identity provider sign-on url log bitrise hover left navigation bar. make sure right workspace selected. select settings . go single sign-on tab. add identity provider sign-on url ad fs saml sso provider single sign-on url (sso url) field. for example, valid value https:\/\/<ad fs url>.com\/adfs\/ls . " });
this.add({id:188, 
title:"Exporting an AD FS certificate", 
body:" exporting ad fs certificate you add certificate generated ad fs saml sso provider certificate field single sign-on page bitrise. if you’ve created certificate ad fs, export pem format fs server. haven’t yet, follow instructions: obtain configure ts td certificates ad fs . in server manager , click tools , select ad fs management . select certificates folder left menu pane. click certificate token-signing . this brings certificates window. click details tab certificate page. hit next certificate export wizard window. select base-64 encoded x.509 (.cer) export file format. click next . give file field hit save . have final look certificate settings. if need modify any those, click backward arrow certificate export wizard . otherwise, click finish . make sure leave ad fs window open need minute. open exported certificate text editor copy\/paste content saml sso provider certificate field upload file itself local computer. save settings clicking configure sso bitrise. let’s continue saml sso configuration ad fs adding bitrise. " });
this.add({id:189, 
title:"Adding Bitrise as a relying party trust to AD FS", 
body:" adding bitrise relying party trust ad fs once finished with exporting certificate, continue adding bitrise relying party trust ad fs . the add relying party trust wizard guides steps. on ad fs, click relying party trust left menu bar, click relying party trust . select add relying party trust actions . on welcome page, select claims aware option hit start . on select data source page, click enter data relying party manually option page. click next . on specify display name page, add display name, example mycorp . click next . specify token encryption certificate configure certificate page optional. click next . on configure ur l page, select enable support saml 2.0 websso protocol copy paste assertion consumer service url (acs url) bitrise relying party saml 2. 0 sso service url field ad fs. click next . on configure identifiers page, add bitrise relying party trust identifier field. click add , hit next . do modify default access control policy choose access control policy page so access saml sso connection. click next . on ready add trust page, review settings click next . on finish page, tick checkbox edit claims issuance policy bitrise. click close . on ad fs, click relying party trust left menu bar, click relying party trust . select add relying party trust actions . on welcome page, select claims aware option hit start . on select data source page, click enter data relying party manually option page. click next . on specify display name page, add display name, example mycorp . click next . specify token encryption certificate configure certificate page optional. click next . on configure ur l page, select enable support saml 2.0 websso protocol copy paste assertion consumer service url (acs url) bitrise relying party saml 2. 0 sso service url field ad fs. click next . on configure identifiers page, add bitrise relying party trust identifier field. click add , hit next . do modify default access control policy choose access control policy page so access saml sso connection. click next . on ready add trust page, review settings click next . on finish page, tick checkbox edit claims issuance policy bitrise. click close . " });
this.add({id:190, 
title:"Configuring claim rules", 
body:" configuring claim rules on edit claim issuance policy page, click add rule button hit ok . create send ldap attributes claims claim rule click next . on configure claim rule page: add rule name, example send e-mail, claim rule field. select attribute store likely active directory. in mapping ldap attributes outgoing claim types field select e-mail addresses. click finish . add new rule turns e-mail formatter nameid. to so, click add rule edit claim issuance policy page again. on select rule template , select transform incoming claim option claim rule template dropdown. click next . give new rule, example, transform e-mail . select e-mail address incoming claim type . select nameid outgoing claim type. choose email outgoing id format . hit ok finish process. " });
this.add({id:191, 
title:"Setting up Azure AD SSO for Bitrise", 
body:" setting azure ad sso bitrise add saml sso bitrise workspace using azure ad. saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure azure ad administrator logged hand. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you need to: add bitrise azure ad new application . add users groups bitrise app azure ad . set saml sso bitrise azure ad . " });
this.add({id:192, 
title:"Adding Bitrise to Azure AD as a new application", 
body:" adding bitrise azure ad new application log microsoft azure admin. click azure active directory icon azure services page. click enterprise applications manage . click new application add bitrise new app account. type bitrise what’s app? field. the integrate any application don’t gallery button automatically selected. hit create . you newly created app listed all applications page. click bitrise app overview page. continue with configuring bitrise saml app. " });
this.add({id:193, 
title:"Adding users\/ groups to the app on Azure AD", 
body:" adding users\/ groups app azure ad before setting saml app, add users\/groups app azure ad use sso log bitrise workspace. in words, workspace member added user ad. select users groups left menu. click + add user\/group . on users page add assignment , select users list click select . once it’s done, select role users select role dropdown. on add assignment page, click assign finish adding users. " });
this.add({id:194, 
title:"Setting up SAML SSO between Bitrise and Azure AD", 
body:" setting saml sso bitrise azure ad click single sign-on left menu. select saml . you land set single sign-on with saml page. click pencil symbol basic saml configuration edit fields. add bitrise identifier (entity id) . leave window open! we come with information bitrise second. head workspace bitrise. click single sign on tab click copy link button copy assertion consumer service url (acs url) bitrise. let’s head basic saml configuration window azure ad. paste assertion consumer service url bitrise reply url field basic saml configuration page azure ad. click save close basic saml configuration window. on single sign-on page azure ad, scroll set bitrise section. copy login url paste saml sso provider single sign-on url (sso url) field bitrise. on single sign-on page azure ad, scroll bit saml signing certificate section. click download certificate (base64) download certificate local computer. open certificate file copy\/paste content saml sso provider certificate field bitrise upload file itself local too. (if manually adding content, need content (including ----begin certificate----- -----end certificate----- well). hit configure sso bitrise. you successfully set bitrise saml sso app azure ad. " });
this.add({id:192, 
title:"Adding Bitrise to Azure AD as a new application", 
body:" adding bitrise azure ad new application log microsoft azure admin. click azure active directory icon azure services page. click enterprise applications manage . click new application add bitrise new app account. type bitrise what’s app? field. the integrate any application don’t gallery button automatically selected. hit create . you newly created app listed all applications page. click bitrise app overview page. continue with configuring bitrise saml app. " });
this.add({id:193, 
title:"Adding users\/ groups to the app on Azure AD", 
body:" adding users\/ groups app azure ad before setting saml app, add users\/groups app azure ad use sso log bitrise workspace. in words, workspace member added user ad. select users groups left menu. click + add user\/group . on users page add assignment , select users list click select . once it’s done, select role users select role dropdown. on add assignment page, click assign finish adding users. " });
this.add({id:194, 
title:"Setting up SAML SSO between Bitrise and Azure AD", 
body:" setting saml sso bitrise azure ad click single sign-on left menu. select saml . you land set single sign-on with saml page. click pencil symbol basic saml configuration edit fields. add bitrise identifier (entity id) . leave window open! we come with information bitrise second. head workspace bitrise. click single sign on tab click copy link button copy assertion consumer service url (acs url) bitrise. let’s head basic saml configuration window azure ad. paste assertion consumer service url bitrise reply url field basic saml configuration page azure ad. click save close basic saml configuration window. on single sign-on page azure ad, scroll set bitrise section. copy login url paste saml sso provider single sign-on url (sso url) field bitrise. on single sign-on page azure ad, scroll bit saml signing certificate section. click download certificate (base64) download certificate local computer. open certificate file copy\/paste content saml sso provider certificate field bitrise upload file itself local too. (if manually adding content, need content (including ----begin certificate----- -----end certificate----- well). hit configure sso bitrise. you successfully set bitrise saml sso app azure ad. " });
this.add({id:195, 
title:"Setting up Auth0 SSO for Bitrise", 
body:" setting auth0 sso bitrise add saml sso bitrise workspace using auth0. this guide provides instructions setting saml sso using auth0 . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: an auth0 administrator logged hand. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you need to: create bitrise web application auth0 . retrieve saml sso information auth0 . setting mapping rule bitrise app's client id . " });
this.add({id:196, 
title:"Creating Bitrise as a web application on Auth0", 
body:" creating bitrise web application auth0 log auth0 admin. click applications left menu bar click + create application button right hand applications page. on create application window, type bitrise name field. in choose application type select regular web applications , click create button. you landing newly created bitrise app’s quick start page. click addons tab. toggle saml2 web app ’s switch right. this addon: saml2 web app page automatically. copy assertion consumer service url (acs url) bitrise paste application callback url field settings tab addon: saml2 web app page. scroll addon: saml2 web app page hit save . go addons page switch turned on. " });
this.add({id:197, 
title:"Retrieving SAML SSO information from Auth0", 
body:" retrieving saml sso information auth0 once enabled bitrise web application auth0, it’s time grab certificate identity provider’s unique login url finish saml configuration bitrise. on auth0, application , select addons tab enabled bitrise app. click saml2 web app web app select usage tab. click download auth0 certificate link identity provider certificate label. open downloaded certificate file copy content saml sso provider certificate field bitrise upload file itself local computer. go auth0 copy paste identity provider login url bitrise’s saml sso provider single sign-on url (sso url) . click configure sso button bitrise. now close dialog auth0. " });
this.add({id:198, 
title:"Setting up a mapping rule for your Bitrise app’s Client ID", 
body:" setting mapping rule bitrise app’s client id bitrise authenticates saml sso users email address so you’d test sso, make sure create new mapping rule auth0. this way map auth0 client id successful authentication bitrise. on auth0, click auth pipeline left menu bar. click rules . click + create set new mapping rule. on pick rules template page, click <> empty rule . add following codeblock script box: you need new bitrise app’s client id applications ’ page. function mapsamlattributes(user, context, callback) {\n (context.clientid === '{your app's clientid'}')\n context.samlconfiguration.mappings = \"http:\/\/schemas.xmlsoap.org\/ws\/2005\/05\/identity\/claims\/nameidentifier\": \"email\"\n }; \n }\n callback(null, user, context);\n} click save changes . " });
this.add({id:196, 
title:"Creating Bitrise as a web application on Auth0", 
body:" creating bitrise web application auth0 log auth0 admin. click applications left menu bar click + create application button right hand applications page. on create application window, type bitrise name field. in choose application type select regular web applications , click create button. you landing newly created bitrise app’s quick start page. click addons tab. toggle saml2 web app ’s switch right. this addon: saml2 web app page automatically. copy assertion consumer service url (acs url) bitrise paste application callback url field settings tab addon: saml2 web app page. scroll addon: saml2 web app page hit save . go addons page switch turned on. " });
this.add({id:197, 
title:"Retrieving SAML SSO information from Auth0", 
body:" retrieving saml sso information auth0 once enabled bitrise web application auth0, it’s time grab certificate identity provider’s unique login url finish saml configuration bitrise. on auth0, application , select addons tab enabled bitrise app. click saml2 web app web app select usage tab. click download auth0 certificate link identity provider certificate label. open downloaded certificate file copy content saml sso provider certificate field bitrise upload file itself local computer. go auth0 copy paste identity provider login url bitrise’s saml sso provider single sign-on url (sso url) . click configure sso button bitrise. now close dialog auth0. " });
this.add({id:198, 
title:"Setting up a mapping rule for your Bitrise app’s Client ID", 
body:" setting mapping rule bitrise app’s client id bitrise authenticates saml sso users email address so you’d test sso, make sure create new mapping rule auth0. this way map auth0 client id successful authentication bitrise. on auth0, click auth pipeline left menu bar. click rules . click + create set new mapping rule. on pick rules template page, click <> empty rule . add following codeblock script box: you need new bitrise app’s client id applications ’ page. function mapsamlattributes(user, context, callback) {\n (context.clientid === '{your app's clientid'}')\n context.samlconfiguration.mappings = \"http:\/\/schemas.xmlsoap.org\/ws\/2005\/05\/identity\/claims\/nameidentifier\": \"email\"\n }; \n }\n callback(null, user, context);\n} click save changes . " });
this.add({id:199, 
title:"Setting up Idaptive SAML SSO for Bitrise", 
body:" setting idaptive saml sso bitrise add saml sso bitrise workspace using idaptive. this guide provides step-by-step instructions setting bitrise saml application idaptive . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . you logged admin portal idaptive set bitrise saml sso app establish connection idaptive. if using user portal , switch admin portal clicking avatar idaptive. log idaptive admin. go apps, web apps . click add web apps button right. on custom tab select saml , click add . on add web app popup hit yes . close window. you automatically directed settings page. add bitrise name application id fields settings page click save . click trust left menu bar select manual configuration identity provider configuration . click signing certificate dropdown download certificate. open with text editor so copy content you upload file. insert content upload file itself saml sso provider certificate text box enable single sign-on page bitrise. copy single sign on url trust page idaptive. insert saml sso provider single sing-on url (sso url) field enable single sign-on page bitrise. while single sign-on page bitrise, copy assertion consumer service url (acs url) url click configure sso . now let’s head idaptive! under service provider configuration click manual configuration . type bitrise sp entity id \/ issuer audience paste assertion consumer service url (acs url) bitrise assertion consumer service (acs) url idaptive. scroll nameid format select emailaddress . click save . go permissions click add button. in select user, group, role popup, type user want add saml app. select hit add . save changes. this change status bitrise saml app deployed . you ready use idaptive saml sso provider bitrise. " });
this.add({id:200, 
title:"Setting up Okta SSO for Bitrise", 
body:" setting okta sso bitrise add saml sso bitrise workspace using okta. this guide provides step-by-step instructions setting bitrise saml application okta . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure okta administrator logged hand. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . add bitrise okta . configure bitrise saml app . set scim previsioning okta . " });
this.add({id:201, 
title:"Adding Bitrise to Okta", 
body:" adding bitrise okta bitrise integrated app okta. you add manually okta first, configure saml sso it. we jumping forth bitrise workspace account okta so make sure pages available. in practice means owner logged admin okta. log okta click admin . from left menu, select applications applications section. click create app integration button. this opens create new app integration window. select saml 2.0 option sign-in method click next . at general settings step, type bitrise app field. (optionally, add app logo wish.) click next . head bitrise workspace click single sign on tab left menu. click copy button copy assertion consumer service url (acs url) . head okta’s configure saml page paste copied url step 7. single sign-on url input field. type bitrise audience uri (sp entity id) . you download okta certificate file now, paste content upload itself saml sso provider certificate field bitrise workspace’s single sign-on page. even easier leave later need assertion consumer service url (acs url) bitrise anyway. you fetch configuring saml app okta. do hit configure sso single sing-on page bitrise just yet. set name id format emailaddress . click next . fill feedback section. hit finish . in applications , sign-on tab, click edit settings . scroll credential details section, make sure application username format set email . click save . congrats! bitrise successfully added okta app. " });
this.add({id:202, 
title:"Configuring Bitrise as a SAML app for Okta", 
body:" configuring bitrise saml app okta click assignments tab bitrise app. here assign bitrise individuals\/groups. make sure workspace members access saml. click sign-on tab bitrise app. you see saml setup completed yet. scroll down, click view saml setup instructions . the how configure saml 2.0 bitrise application page displayed. it summarizes information need set saml connection bitrise okta. copy identity provider single sign-on url paste bitrise workspace’s sso url field. if haven’t pasted certificate’s content uploaded file itself saml sso provider certificate field bitrise workspace yet, so now. click configure sso bitrise workspace. that's it! from on, access single sign-on page, configure saml sso settings. " });
this.add({id:203, 
title:"Setting up SCIM provisioning in Okta", 
body:" setting scim provisioning okta you set scim provisioning bitrise using okta. managing workspace groups while scim great way manage access users bitrise workspaces, initial configuration groups finishing setting provisioning. for information configuring groups, check adding workspace groups to an app team . we jumping forth bitrise workspace account okta, so make sure pages available. in practice, means owner logged bitrise, okta admin okta. on bitrise, configure domain control generate scim credentials . you need have: a verified domain. an scim base url authentication token. make sure save need process later. log okta click admin . from left menu, select applications applications section. select bitrise app. click general tab bitrise app. click edit app settings section select scim option using radio button provisioning . click save . a new tab called provisioning appear. head okta, select provisioning tab, click edit . paste scim base url copied bitrise scim connector base url field. add username unique identifier field users field. select provisioning actions like enable using checkboxes supported provisioning actions . push groups mandatory please note enable push groups. this bitrise, workspace membership works groups okta\/scim control select http header authorization mode dropdown menu. copy paste scim authentication token authorization field. click test connector configuration test working correctly. close test connector configuration window click save . click provisioning tab bitrise app, click edit provisioning app section. select provisioning options like enable click save . sync password we recommend keeping sync password setting disabled. that's it! you use scim provisioning okta manage access users bitrise. " });
this.add({id:204, 
title:"Pushing Okta groups to Bitrise using SCIM", 
body:" pushing okta groups bitrise using scim you push groups okta bitrise using scim provisioning. pushing group links existing creates new workspace. either way, pushing group, set synchronization okta group bitrise group. log okta click admin . from left menu, select applications applications section. select bitrise app. click push groups tab. click push groups choose filtering method. find group(s) want push. you create new group, brand group bitrise workspace link okta existing group. you choose methods using dropdown menu match result & push action . linking group if decide link okta group existing bitrise group, following mind: if okta bitrise group names different, automatically renamed match group. when manually push group connected existing bitrise group, members added included okta removed single source truth. click save . when push status changes active , synchronization okta bitrise ready. your group updated couple seconds workspace well. " });
this.add({id:205, 
title:"Synchronizing groups and users between Okta and Bitrise", 
body:" synchronizing groups users okta bitrise after pushing okta groups bitrise , synchronize groups users okta bitrise. to so, manage app integration assignments okta: log okta click  admin . from left menu, select  applications  under the  applications  section. select bitrise app. make sure create users deactivate users options enabled provisioning tab. deprovisioning users if deprovision user with scim, automatically logged bitrise pats disabled. go assignments tab. click assign choose assign people synchronize individual users assign groups synchronize groups. select users groups like synchronize, click done . domain verification new users verified domains receive email invitation join workspace. existing users receive verification email unless verify company domain. to so, contact bitrise support. after synchronizing groups users, check push groups tab see synchronization finished. you manually push updates clicking dropdown menu push status column selecting push . \"push now\" overrides bitrise group users included okta group automatically removed linked bitrise group. " });
this.add({id:201, 
title:"Adding Bitrise to Okta", 
body:" adding bitrise okta bitrise integrated app okta. you add manually okta first, configure saml sso it. we jumping forth bitrise workspace account okta so make sure pages available. in practice means owner logged admin okta. log okta click admin . from left menu, select applications applications section. click create app integration button. this opens create new app integration window. select saml 2.0 option sign-in method click next . at general settings step, type bitrise app field. (optionally, add app logo wish.) click next . head bitrise workspace click single sign on tab left menu. click copy button copy assertion consumer service url (acs url) . head okta’s configure saml page paste copied url step 7. single sign-on url input field. type bitrise audience uri (sp entity id) . you download okta certificate file now, paste content upload itself saml sso provider certificate field bitrise workspace’s single sign-on page. even easier leave later need assertion consumer service url (acs url) bitrise anyway. you fetch configuring saml app okta. do hit configure sso single sing-on page bitrise just yet. set name id format emailaddress . click next . fill feedback section. hit finish . in applications , sign-on tab, click edit settings . scroll credential details section, make sure application username format set email . click save . congrats! bitrise successfully added okta app. " });
this.add({id:202, 
title:"Configuring Bitrise as a SAML app for Okta", 
body:" configuring bitrise saml app okta click assignments tab bitrise app. here assign bitrise individuals\/groups. make sure workspace members access saml. click sign-on tab bitrise app. you see saml setup completed yet. scroll down, click view saml setup instructions . the how configure saml 2.0 bitrise application page displayed. it summarizes information need set saml connection bitrise okta. copy identity provider single sign-on url paste bitrise workspace’s sso url field. if haven’t pasted certificate’s content uploaded file itself saml sso provider certificate field bitrise workspace yet, so now. click configure sso bitrise workspace. that's it! from on, access single sign-on page, configure saml sso settings. " });
this.add({id:203, 
title:"Setting up SCIM provisioning in Okta", 
body:" setting scim provisioning okta you set scim provisioning bitrise using okta. managing workspace groups while scim great way manage access users bitrise workspaces, initial configuration groups finishing setting provisioning. for information configuring groups, check adding workspace groups to an app team . we jumping forth bitrise workspace account okta, so make sure pages available. in practice, means owner logged bitrise, okta admin okta. on bitrise, configure domain control generate scim credentials . you need have: a verified domain. an scim base url authentication token. make sure save need process later. log okta click admin . from left menu, select applications applications section. select bitrise app. click general tab bitrise app. click edit app settings section select scim option using radio button provisioning . click save . a new tab called provisioning appear. head okta, select provisioning tab, click edit . paste scim base url copied bitrise scim connector base url field. add username unique identifier field users field. select provisioning actions like enable using checkboxes supported provisioning actions . push groups mandatory please note enable push groups. this bitrise, workspace membership works groups okta\/scim control select http header authorization mode dropdown menu. copy paste scim authentication token authorization field. click test connector configuration test working correctly. close test connector configuration window click save . click provisioning tab bitrise app, click edit provisioning app section. select provisioning options like enable click save . sync password we recommend keeping sync password setting disabled. that's it! you use scim provisioning okta manage access users bitrise. " });
this.add({id:204, 
title:"Pushing Okta groups to Bitrise using SCIM", 
body:" pushing okta groups bitrise using scim you push groups okta bitrise using scim provisioning. pushing group links existing creates new workspace. either way, pushing group, set synchronization okta group bitrise group. log okta click admin . from left menu, select applications applications section. select bitrise app. click push groups tab. click push groups choose filtering method. find group(s) want push. you create new group, brand group bitrise workspace link okta existing group. you choose methods using dropdown menu match result & push action . linking group if decide link okta group existing bitrise group, following mind: if okta bitrise group names different, automatically renamed match group. when manually push group connected existing bitrise group, members added included okta removed single source truth. click save . when push status changes active , synchronization okta bitrise ready. your group updated couple seconds workspace well. " });
this.add({id:205, 
title:"Synchronizing groups and users between Okta and Bitrise", 
body:" synchronizing groups users okta bitrise after pushing okta groups bitrise , synchronize groups users okta bitrise. to so, manage app integration assignments okta: log okta click  admin . from left menu, select  applications  under the  applications  section. select bitrise app. make sure create users deactivate users options enabled provisioning tab. deprovisioning users if deprovision user with scim, automatically logged bitrise pats disabled. go assignments tab. click assign choose assign people synchronize individual users assign groups synchronize groups. select users groups like synchronize, click done . domain verification new users verified domains receive email invitation join workspace. existing users receive verification email unless verify company domain. to so, contact bitrise support. after synchronizing groups users, check push groups tab see synchronization finished. you manually push updates clicking dropdown menu push status column selecting push . \"push now\" overrides bitrise group users included okta group automatically removed linked bitrise group. " });
this.add({id:206, 
title:"Setting up Ping Identity SSO for Bitrise", 
body:" setting ping identity sso bitrise add saml sso bitrise workspace using ping identity. this guide provides step-by-step instructions setting bitrise saml sso application ping identity . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: a pingone administrator logged pingone . be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . to add bitrise ping identity: click applications bar pingone . on my applications tab, make sure saml selected. click add application drop-down select new saml application . at application details, required fields click continue next step . at application configuration , leave i saml configuration selected. fill following: assertion consumer service (acs) field: insert assertion consumer service url (acs url) link bitrise workspace’s single sign-on tab. entity id field : type bitrise . signing : click sign response option. here overview settings: continue step. at sso attribute mapping , don’t change anything, proceed step. at group access , add group(s) application. these groups able access bitrise saml sso. continue step. at review setup page, doublecheck details provided previous steps. make sure download following files review page: click download signing certificate saml metadata files. click finish . let’s open files. copy entire content saml metadata file paste saml sso provider certificate field bitrise single sign-on page. open signing certificate file copy http-post singlesignonservice location link paste saml sso provider single sign-on url (sso url) field bitrise. click configure sso bitrise. now set saml sso bitrise workspace. " });
this.add({id:207, 
title:"Setting up OneLogin SSO for Bitrise", 
body:" setting onelogin sso bitrise add saml sso bitrise workspace using onelogin. this guide provides step-by-step instructions setting bitrise saml application onelogin . saml sso restrictions saml sso available workspace with velocity enterprise build plans . since saml sso feature tied plans, decide downgrade, lose feature. all workspace members receive email downgrade you’ll weeks re-upgrade wish use again. before connecting saml sso workspace: make sure administrator onelogin hand setting saml sso connection bitrise. be aware workspace owner set saml sso bitrise workspace. your account bitrise workspace with velocity enterprise plan . to configure bitrise onelogin: log onelogin administrator. click administration bar. select applications click add app . this find applications page. type bitrise search bar select saml2.0 type search results. click configuration tab left sidebar. you change icon add descriptions wish. make sure organization (bitrise) ticked. hit save . click configuration tab paste assertion consumer service url (acs url) bitrise workspace’s single sign-on tab single sign-on url field onelogin. hit save onelogin . select sso left sidebar. click view details x.509 certificate. copy content x.509 certificate paste saml sso provider certificate field enable single sign-on page bitrise. go sso page onelogin copy saml 2.0 endpoint (http) link. paste saml sso provider single sign-on url (sso url) field bitrise. go bitrise click configure sso . users onelogin bitrise make sure users bitrise workspace added users page onelogin. if not, users , new user add new user. don’t forget send invite ( more actions drop-down menu, send invitation ) new user so activate account onelogin. users added newly created bitrise app clicking applications user info clicking + sign. make sure added users workspace members bitrise. if you’ve completed setting bitrise onelogin connected with workspace, workspace members email contains link activate sso connection workspace. " });
this.add({id:208, 
title:"Editing your profile settings", 
body:" editing profile settings you edit profile settings, username, password, account avatar, etc., profile settings page. on profile settings page, can: change username associated email address. change password. update personal company information. " });
this.add({id:209, 
title:"Changing your Bitrise username, email, and password", 
body:" changing bitrise username, email, password in upper right corner, open account selector dropdown menu. select account settings option. to change username, type new username username field. to change email, type new email address email field. to change password, type new password password field, type confirm password field. when done, click update . " });
this.add({id:210, 
title:"Adding an avatar to your account", 
body:" adding avatar account you add personalized avatar bitrise account. in upper right corner, open account selector dropdown menu. select account settings option. find default avatar left, account name. click image. drag drop new avatar change avatar window, click browse choose image computer. " });
this.add({id:211, 
title:"Unselecting notification preferences", 
body:" unselecting notification preferences by default bitrise sends newsletters platform updates email address provide profile . you unselect setting with 3 simple steps: click profile settings avatar. click notification left menu bar. you see newsletters platform updates enabled default. if wish any two, notifications, untick relevant checkbox\/es. " });
this.add({id:209, 
title:"Changing your Bitrise username, email, and password", 
body:" changing bitrise username, email, password in upper right corner, open account selector dropdown menu. select account settings option. to change username, type new username username field. to change email, type new email address email field. to change password, type new password password field, type confirm password field. when done, click update . " });
this.add({id:210, 
title:"Adding an avatar to your account", 
body:" adding avatar account you add personalized avatar bitrise account. in upper right corner, open account selector dropdown menu. select account settings option. find default avatar left, account name. click image. drag drop new avatar change avatar window, click browse choose image computer. " });
this.add({id:211, 
title:"Unselecting notification preferences", 
body:" unselecting notification preferences by default bitrise sends newsletters platform updates email address provide profile . you unselect setting with 3 simple steps: click profile settings avatar. click notification left menu bar. you see newsletters platform updates enabled default. if wish any two, notifications, untick relevant checkbox\/es. " });
this.add({id:212, 
title:"Resetting your password", 
body:" resetting password if forgot password, reset clicking forgot password bitrise login page. you receive email with instructions. you log bitrise ways: with bitrise username password with gitlab\/github\/bitbucket account with bitrise workspace saml sso set enforced if try log forgot password: click forgot password login page . provide email username so know send password recovery link. check inbox reset password instructions sent letsconnect. click reset password copy url browser. add new password hit save . once password changed, click log access login page again. add username new password log bitrise dashboard. if failed log time, recaptcha enabled check human. if failed log excessive attempts, automatically locked out. check inbox unlock instructions email! " });
this.add({id:213, 
title:"Two-factor authentication", 
body:" two-factor authentication you add two-factor authentication (2fa) bitrise extra layer security profile settings. we provide extra layer security account enable two-factor authentication (2fa) bitrise account. we recommend check connected accounts (github, bitbucket, gitlab) enable 2fa haven’t already. " });
this.add({id:214, 
title:"Enabling two-factor authentication", 
body:" enabling two-factor authentication download install google authenticator phone. log bitrise.io profile . click profile setting . scroll click security left. click 2fa enabled two-factor authentication . open google authenticator scan qr-code appears screen. enter 6-digit code was generated. once activated 2fa saved recovery codes, receive confirmation email letsconnect@bitrise.io . " });
this.add({id:215, 
title:"Disabling two-factor authentication", 
body:" disabling two-factor authentication follow procedure disable two-factor authentication (2fa) logged bitrise. log bitrise.io profile . click profile settings . scroll click security left. click 2fa enabled two-factor authentication . provide bitrise login password pop-up window. " });
this.add({id:216, 
title:"Have you lost your authenticator and recovery codes?", 
body:" have lost authenticator recovery codes? 2fa protects account unwanted login attempts (for example, with stolen password) providing extra security step flow. this means lose device authenticator app, recovery codes, won't able access bitrise support remove activated account. however, any third-party service (for example, gitlab, github bitbucket) connected account before, try log that. in absence account, recommend create new bitrise. in special cases, bitrise remove 2fa account. please note disable activated account git provider connected bitrise. contact support team using email address provided signing bitrise. explain you’re requesting remove 2fa. our support team ask create new public repo git account with title: bitrise_verification send link created repo support team. please note support team deny request removing 2fa account pose security risk bitrise account. " });
this.add({id:214, 
title:"Enabling two-factor authentication", 
body:" enabling two-factor authentication download install google authenticator phone. log bitrise.io profile . click profile setting . scroll click security left. click 2fa enabled two-factor authentication . open google authenticator scan qr-code appears screen. enter 6-digit code was generated. once activated 2fa saved recovery codes, receive confirmation email letsconnect@bitrise.io . " });
this.add({id:215, 
title:"Disabling two-factor authentication", 
body:" disabling two-factor authentication follow procedure disable two-factor authentication (2fa) logged bitrise. log bitrise.io profile . click profile settings . scroll click security left. click 2fa enabled two-factor authentication . provide bitrise login password pop-up window. " });
this.add({id:216, 
title:"Have you lost your authenticator and recovery codes?", 
body:" have lost authenticator recovery codes? 2fa protects account unwanted login attempts (for example, with stolen password) providing extra security step flow. this means lose device authenticator app, recovery codes, won't able access bitrise support remove activated account. however, any third-party service (for example, gitlab, github bitbucket) connected account before, try log that. in absence account, recommend create new bitrise. in special cases, bitrise remove 2fa account. please note disable activated account git provider connected bitrise. contact support team using email address provided signing bitrise. explain you’re requesting remove 2fa. our support team ask create new public repo git account with title: bitrise_verification send link created repo support team. please note support team deny request removing 2fa account pose security risk bitrise account. " });
this.add({id:217, 
title:"Personal access tokens", 
body:" personal access tokens you use personal access token authenticate bitrise api. create new any time created it, view copy value again. you use personal access token authenticate bitrise api. create new any time created it, view copy value again. " });
this.add({id:218, 
title:"Creating a personal access token", 
body:" creating personal access token to create new personal access token: in upper right corner, open account selector dropdown menu. select account settings option. on left, select security tab. scroll personal access tokens section, click create token . fill token description field select appropriate expiration time (1 hour, 1 day, month never) token. click next . in personal access token pop-up window, see newly generated token. click copy close store token clipboard so paste safe, finalize. " });
this.add({id:219, 
title:"Regenerating a personal access token", 
body:" regenerating personal access token you regenerate existing personal access token any time. however, can't view value previously generated again, new value. in upper right corner, open account selector dropdown menu. select account settings option. go security tab. find token personal access tokens section. click edit . click regenerate token . copy new token, click done . " });
this.add({id:218, 
title:"Creating a personal access token", 
body:" creating personal access token to create new personal access token: in upper right corner, open account selector dropdown menu. select account settings option. on left, select security tab. scroll personal access tokens section, click create token . fill token description field select appropriate expiration time (1 hour, 1 day, month never) token. click next . in personal access token pop-up window, see newly generated token. click copy close store token clipboard so paste safe, finalize. " });
this.add({id:219, 
title:"Regenerating a personal access token", 
body:" regenerating personal access token you regenerate existing personal access token any time. however, can't view value previously generated again, new value. in upper right corner, open account selector dropdown menu. select account settings option. go security tab. find token personal access tokens section. click edit . click regenerate token . copy new token, click done . " });
this.add({id:220, 
title:"Deleting your Bitrise account", 
body:" deleting bitrise account we’re sad see wish delete bitrise account, so profile settings. we’re sad see wish delete bitrise account, it’s quite simple. workspace ownership if confirmed owner workspace, transfer ownership workspace account, delete deleting account. in upper right corner, open account selector dropdown menu. select account settings option. on page, click delete account button follow instructions. " });
this.add({id:221, 
title:"Workspaces", 
body:" workspaces a workspace environment allows manage bitrise apps team members working apps. you create multiple workspaces, invited workspaces users. a workspace environment allows manage bitrise apps team members working apps. you create multiple workspaces, invited workspaces users. to able add apps run builds, need workspace, outside contributor app's team. you need workspace paid subscription plan bitrise. each workspaces different subscription plan determines how credits workspace's apps use. legacy users legacy users with concurrency-based accounts: account use credits running builds. add apps personal run builds workspace. " });
this.add({id:222, 
title:"Creating Workspaces", 
body:" creating workspaces create bitrise workspace able add new apps run builds. when sign bitrise, automatically prompted create first workspace. a workspace environment allows manage bitrise apps team members working apps. you create multiple workspaces, invited workspaces bitrise users. you access workspace able use bitrise. when create new account, can’t add apps run builds. to so, need workspace, invited existing one. when sign bitrise, automatically prompted create new workspace. if skip creating workspace, want additional workspaces later, it: log bitrise.io . hover left navigation bar. open dropdown menu workspace name. select create workspace . this takes create new workspace page. find workspace input field, add name. click create . this creates workspace - comes optional completed later point. however, subscription plan free paid inactive won't able apps run builds. choose plan. if you’re interested details, want plans, check pricing page info. select paid subscription plan, follow instructions configure details plan set payment methods. alternatively, select hobby plan add subscription later . and that’s it. you start adding apps inviting people workspace. " });
this.add({id:223, 
title:"Workspace billing and invoicing", 
body:" workspace billing invoicing you modify subscription plan billing information any time workspace page. download past invoices. it’s simple set subscription plan workspace skipped step creating workspace. you modify billing information any time owner you set credit card we’ll automatically; payment methods, contact support. set email address so send invoices - need rummage site looking them, we’ll deliver straight inbox. however, wish download manually site, that, too. " });
this.add({id:224, 
title:"Adding and updating billing details for a Workspace", 
body:" adding updating billing details workspace sign with account member workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select plan & billing menu options. if haven't provided billing information yet, so: click add credit card right billing information menu. fill details. note owner(s) workspace’s any access billing information. " });
this.add({id:225, 
title:"Setting up an email address for Workspace invoices", 
body:" setting email address workspace invoices by default, workspace’s invoices sent email provided workspace was created. however, owner(s) change any time. sign with account owner workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select general settings menu options. locate billing email field click edit underneath it. enter new email address click confirm changes . " });
this.add({id:226, 
title:"Downloading Workspace invoices", 
body:" downloading workspace invoices sign with account owner workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select plan & billing menu options. locate past statements menu. select invoice need click download icon right. " });
this.add({id:227, 
title:"Workspace groups", 
body:" workspace groups workspace membership based groups bitrise: add people so assigned work workspace's apps. workspace groups allow convenient management members. you add any number members group assign app owned workspace. the different user roles multiple different apps. workspace members roles workspace members groups inherent roles all. you assign groups individual members app teams choose user role there. the member workspace group different roles apps. a workspace group's relevant: group called admin , doesn’t admin role any app default assign apps with roles, too. " });
this.add({id:228, 
title:"Creating groups for Workspaces", 
body:" creating groups workspaces owners only workspace owners create groups workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select collaboration menu options. select groups tab. click create group button bring dialogue box. enter group enter unique field, click create . " });
this.add({id:229, 
title:"Adding members to a Workspace group", 
body:" adding members workspace group you add workspace members groups convenient management members. groups allow assign app teams time. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select collaboration menu options. select groups tab. find group need click 3 dots right bring dropdown menu. click + add member button. enter email address add existing member group using radio buttons dialogue box. select invite new member workspace enter email address. click send invite send invitation. select add existing member select existing workspace members dropdown menu. click add member add team member group. " });
this.add({id:230, 
title:"Managing app access roles for Workspace groups", 
body:" managing app access roles workspace groups you grant workspace groups access application teams bitrise. it means members group able work app role assigned group . list groups granted given role app's team using get \/apps\/{app-slug}\/roles\/{role-name} endpoint. the role-name parameter takes possible values: admin manager : equivalent developer role bitrise.io. member : equivalent tester\/qa bitrise.io. in example, we're querying list workspace groups granted admin role specific app: curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'authorization: access-token' grant access existing workspace groups using put \/apps\/{app-slug}\/roles\/{role-name} endpoint. this endpoint requires groups object contains slugs groups granted access with specified role. specify groups this endpoint replaces previous groups specified role app's team. if, example, grant alpha beta admin team, access app afterwards. if group - let's delta previously removed. getting group slugs to group slugs workspace, use get \/organizations\/{org-slug}\/groups endpoint. in following example, we'll granting groups admin access: curl -x 'put' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'content-type: -d '{\n \"groups\": [\n \"group-slug-1\", \"group-slug-2\"\n ]\n}' " });
this.add({id:231, 
title:"Managing the owners of a Workspace", 
body:" managing owners workspace workspace owners access delete apps linked manage billing details workspace. only add remove owners. workspace owners access delete apps linked workspace, manage billing details add remove owners. every workspace owner. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select team menu options. select owners tab. click + add owner add new owner workspace. enter email address add existing member owners group using radio buttons dialogue box. the account question become owner workspace. " });
this.add({id:232, 
title:"Workspace FAQ", 
body:" workspace faq the frequently asked questions bitrise workspaces: they, how manage apps, members groups do? what workspace bitrise? workspaces used seamlessly manage bigger teams members inside company. it place gather people working company’s apps delegate creating different groups. how i add app workspace? first, added group workspace. then, add new app page select workspace dropdown left. you change process adding app, finished changing owner possible transferring ownership app. how i migrate\/transfer existing apps workspace? once you’ve created workspace, transfer any apps going team tab app want transfer, clicking transfer ownership button right. what owners inside workspace? workspaces than owner. owners manage billing, delete apps change billing email, create, assign groups apps. what “members” workspace do? members displayed people tab workspace’s page. one added member including group groups tab. these members option add apps workspace view list workspace’s apps tab. members access workspace’s app, granted app directly group , respect assigned role (admin, developer tester). what groups good for? a group basically wrapper members. by creating groups, owners admins add multiple members app’s team once, making faster easier setup new projects bitrise. it make reassign, remove change role each group handled entity app’s team  tab. they added app’s team, group’s role set, removing group team revoke access member group app. it’s possible add delete individual members there, workspace’s page. what’s difference team workspace? teams handled app, workspaces globally. a team workspace’s app contain members invited directly groups assigned them. with direct role access can’t add workspace. members (admin, developer tester). who outside contributors? outside contributors members app’s team with direct role, invited app workspace itself. can i multiple workspaces? one user workspaces like, workspace active subscription able run builds. can i remove workspace’s apps? if owner workspace, remove members contributors org’s people tab, with click. owners remove group groups tab. in case user removed apps’ team group assigned to. how i leave workspace? if owner workspace, leave workplace simply first accessing workspace settings (selecting gear icon right screen), selecting team menu options left, selecting members tab, clicking \" \" icon email address. i see remove workspace icon email address if owner workspace want leave, first remove list owners owners tab (you add new owner isn't already). for information, see managing the owners of a workspace . " });
this.add({id:222, 
title:"Creating Workspaces", 
body:" creating workspaces create bitrise workspace able add new apps run builds. when sign bitrise, automatically prompted create first workspace. a workspace environment allows manage bitrise apps team members working apps. you create multiple workspaces, invited workspaces bitrise users. you access workspace able use bitrise. when create new account, can’t add apps run builds. to so, need workspace, invited existing one. when sign bitrise, automatically prompted create new workspace. if skip creating workspace, want additional workspaces later, it: log bitrise.io . hover left navigation bar. open dropdown menu workspace name. select create workspace . this takes create new workspace page. find workspace input field, add name. click create . this creates workspace - comes optional completed later point. however, subscription plan free paid inactive won't able apps run builds. choose plan. if you’re interested details, want plans, check pricing page info. select paid subscription plan, follow instructions configure details plan set payment methods. alternatively, select hobby plan add subscription later . and that’s it. you start adding apps inviting people workspace. " });
this.add({id:223, 
title:"Workspace billing and invoicing", 
body:" workspace billing invoicing you modify subscription plan billing information any time workspace page. download past invoices. it’s simple set subscription plan workspace skipped step creating workspace. you modify billing information any time owner you set credit card we’ll automatically; payment methods, contact support. set email address so send invoices - need rummage site looking them, we’ll deliver straight inbox. however, wish download manually site, that, too. " });
this.add({id:224, 
title:"Adding and updating billing details for a Workspace", 
body:" adding updating billing details workspace sign with account member workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select plan & billing menu options. if haven't provided billing information yet, so: click add credit card right billing information menu. fill details. note owner(s) workspace’s any access billing information. " });
this.add({id:225, 
title:"Setting up an email address for Workspace invoices", 
body:" setting email address workspace invoices by default, workspace’s invoices sent email provided workspace was created. however, owner(s) change any time. sign with account owner workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select general settings menu options. locate billing email field click edit underneath it. enter new email address click confirm changes . " });
this.add({id:226, 
title:"Downloading Workspace invoices", 
body:" downloading workspace invoices sign with account owner workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select plan & billing menu options. locate past statements menu. select invoice need click download icon right. " });
this.add({id:224, 
title:"Adding and updating billing details for a Workspace", 
body:" adding updating billing details workspace sign with account member workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select plan & billing menu options. if haven't provided billing information yet, so: click add credit card right billing information menu. fill details. note owner(s) workspace’s any access billing information. " });
this.add({id:225, 
title:"Setting up an email address for Workspace invoices", 
body:" setting email address workspace invoices by default, workspace’s invoices sent email provided workspace was created. however, owner(s) change any time. sign with account owner workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select general settings menu options. locate billing email field click edit underneath it. enter new email address click confirm changes . " });
this.add({id:226, 
title:"Downloading Workspace invoices", 
body:" downloading workspace invoices sign with account owner workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select plan & billing menu options. locate past statements menu. select invoice need click download icon right. " });
this.add({id:227, 
title:"Workspace groups", 
body:" workspace groups workspace membership based groups bitrise: add people so assigned work workspace's apps. workspace groups allow convenient management members. you add any number members group assign app owned workspace. the different user roles multiple different apps. workspace members roles workspace members groups inherent roles all. you assign groups individual members app teams choose user role there. the member workspace group different roles apps. a workspace group's relevant: group called admin , doesn’t admin role any app default assign apps with roles, too. " });
this.add({id:228, 
title:"Creating groups for Workspaces", 
body:" creating groups workspaces owners only workspace owners create groups workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select collaboration menu options. select groups tab. click create group button bring dialogue box. enter group enter unique field, click create . " });
this.add({id:229, 
title:"Adding members to a Workspace group", 
body:" adding members workspace group you add workspace members groups convenient management members. groups allow assign app teams time. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select collaboration menu options. select groups tab. find group need click 3 dots right bring dropdown menu. click + add member button. enter email address add existing member group using radio buttons dialogue box. select invite new member workspace enter email address. click send invite send invitation. select add existing member select existing workspace members dropdown menu. click add member add team member group. " });
this.add({id:230, 
title:"Managing app access roles for Workspace groups", 
body:" managing app access roles workspace groups you grant workspace groups access application teams bitrise. it means members group able work app role assigned group . list groups granted given role app's team using get \/apps\/{app-slug}\/roles\/{role-name} endpoint. the role-name parameter takes possible values: admin manager : equivalent developer role bitrise.io. member : equivalent tester\/qa bitrise.io. in example, we're querying list workspace groups granted admin role specific app: curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'authorization: access-token' grant access existing workspace groups using put \/apps\/{app-slug}\/roles\/{role-name} endpoint. this endpoint requires groups object contains slugs groups granted access with specified role. specify groups this endpoint replaces previous groups specified role app's team. if, example, grant alpha beta admin team, access app afterwards. if group - let's delta previously removed. getting group slugs to group slugs workspace, use get \/organizations\/{org-slug}\/groups endpoint. in following example, we'll granting groups admin access: curl -x 'put' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'content-type: -d '{\n \"groups\": [\n \"group-slug-1\", \"group-slug-2\"\n ]\n}' " });
this.add({id:228, 
title:"Creating groups for Workspaces", 
body:" creating groups workspaces owners only workspace owners create groups workspace. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select collaboration menu options. select groups tab. click create group button bring dialogue box. enter group enter unique field, click create . " });
this.add({id:229, 
title:"Adding members to a Workspace group", 
body:" adding members workspace group you add workspace members groups convenient management members. groups allow assign app teams time. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select collaboration menu options. select groups tab. find group need click 3 dots right bring dropdown menu. click + add member button. enter email address add existing member group using radio buttons dialogue box. select invite new member workspace enter email address. click send invite send invitation. select add existing member select existing workspace members dropdown menu. click add member add team member group. " });
this.add({id:230, 
title:"Managing app access roles for Workspace groups", 
body:" managing app access roles workspace groups you grant workspace groups access application teams bitrise. it means members group able work app role assigned group . list groups granted given role app's team using get \/apps\/{app-slug}\/roles\/{role-name} endpoint. the role-name parameter takes possible values: admin manager : equivalent developer role bitrise.io. member : equivalent tester\/qa bitrise.io. in example, we're querying list workspace groups granted admin role specific app: curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'authorization: access-token' grant access existing workspace groups using put \/apps\/{app-slug}\/roles\/{role-name} endpoint. this endpoint requires groups object contains slugs groups granted access with specified role. specify groups this endpoint replaces previous groups specified role app's team. if, example, grant alpha beta admin team, access app afterwards. if group - let's delta previously removed. getting group slugs to group slugs workspace, use get \/organizations\/{org-slug}\/groups endpoint. in following example, we'll granting groups admin access: curl -x 'put' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'content-type: -d '{\n \"groups\": [\n \"group-slug-1\", \"group-slug-2\"\n ]\n}' " });
this.add({id:231, 
title:"Managing the owners of a Workspace", 
body:" managing owners workspace workspace owners access delete apps linked manage billing details workspace. only add remove owners. workspace owners access delete apps linked workspace, manage billing details add remove owners. every workspace owner. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select team menu options. select owners tab. click + add owner add new owner workspace. enter email address add existing member owners group using radio buttons dialogue box. the account question become owner workspace. " });
this.add({id:232, 
title:"Workspace FAQ", 
body:" workspace faq the frequently asked questions bitrise workspaces: they, how manage apps, members groups do? what workspace bitrise? workspaces used seamlessly manage bigger teams members inside company. it place gather people working company’s apps delegate creating different groups. how i add app workspace? first, added group workspace. then, add new app page select workspace dropdown left. you change process adding app, finished changing owner possible transferring ownership app. how i migrate\/transfer existing apps workspace? once you’ve created workspace, transfer any apps going team tab app want transfer, clicking transfer ownership button right. what owners inside workspace? workspaces than owner. owners manage billing, delete apps change billing email, create, assign groups apps. what “members” workspace do? members displayed people tab workspace’s page. one added member including group groups tab. these members option add apps workspace view list workspace’s apps tab. members access workspace’s app, granted app directly group , respect assigned role (admin, developer tester). what groups good for? a group basically wrapper members. by creating groups, owners admins add multiple members app’s team once, making faster easier setup new projects bitrise. it make reassign, remove change role each group handled entity app’s team  tab. they added app’s team, group’s role set, removing group team revoke access member group app. it’s possible add delete individual members there, workspace’s page. what’s difference team workspace? teams handled app, workspaces globally. a team workspace’s app contain members invited directly groups assigned them. with direct role access can’t add workspace. members (admin, developer tester). who outside contributors? outside contributors members app’s team with direct role, invited app workspace itself. can i multiple workspaces? one user workspaces like, workspace active subscription able run builds. can i remove workspace’s apps? if owner workspace, remove members contributors org’s people tab, with click. owners remove group groups tab. in case user removed apps’ team group assigned to. how i leave workspace? if owner workspace, leave workplace simply first accessing workspace settings (selecting gear icon right screen), selecting team menu options left, selecting members tab, clicking \" \" icon email address. i see remove workspace icon email address if owner workspace want leave, first remove list owners owners tab (you add new owner isn't already). for information, see managing the owners of a workspace . " });
this.add({id:233, 
title:"Apps", 
body:" apps apps main building blocks bitrise experience: git repository stores source code added app. apps main building blocks bitrise experience: git repository stores source code added app. as such, app isn't necessarily actual application: it's just run builds with bitrise. once access workspace , start adding managing apps. you configure pretty aspect app any time initial setup. among things, can: change app's repository url . setting service credentials . update app's ssh keys . register new webhooks update existing ones . the users invited work bitrise app make app's team . you invite users individually, assign workspace groups apps. the user workspace group different roles app teams. " });
this.add({id:234, 
title:"Webhooks", 
body:" webhooks bitrise makes extensive use incoming webhooks automatically trigger builds outgoing send reports build events services, slack. a webhook user-defined callback triggered event, pushing code repository. bitrise makes extensive use webhooks: incoming webhooks, registered with git service provider, used automatically trigger builds bitrise enable use git insights . webhook issues if builds triggers don't work, problem with webhooks: builds aren't getting triggered . outgoing webhooks used send reports build events services, slack. you add incoming webhook automatically creating app later; it’s possible manually add webhook any supported service. outgoing webhooks added website bitrise api . " });
this.add({id:235, 
title:"Adding incoming webhooks", 
body:" adding incoming webhooks an incoming webhook bitrise serves purpose: start builds automatically certain code event (code push, git tag, pull request) happens. you setup webhooks manually adding app bitrise. most source code hosting service provides feature register webhooks. a webhook basically url called specified events. an incoming webhook bitrise serves purpose: start builds automatically certain code event (code push, git tag, pull request) happens. you just need register repository configure build triggers . webhook issues if builds triggers don't work, problem with webhooks: builds aren't getting triggered . " });
this.add({id:236, 
title:"Registering an incoming webhook automatically", 
body:" registering incoming webhook automatically automatic webhook registration supported apps code hosted github, gitlab bitbucket. if use services source code hosting provider, bitrise automatically sets webhook with click button end app setup journey. github app integration if use bitrise github app connect bitrise workspace git account organization, don't need webhook. the app trigger builds send status updates it. however, change webhook later add new skipped registering adding app. you automatically register webhook repository app settings page app. automatic registration means bitrise registers webhook repository, so don't manually add git provider's website. this requires: that admin rights repository. that account hosts repository connected bitrise account. to register webhook automatically: make sure bitrise account connected git provider hosts repository admin rights repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . on integrations page, select webhooks tab. in incoming webhooks section, select set webhooks automatically . bitrise automatically register webhook app's repository. " });
this.add({id:237, 
title:"Registering an incoming webhook manually", 
body:" registering incoming webhook manually you manually setup change webhooks registered app bitrise. the process different depending git provider bitrise, basic steps each. create webhook implementation our webhook processor open sourced . if looking unsupported solution, create issue github page pull request with implementation. you run webhook provider firewall required. open app bitrise with user admin role app . on main page app, click app settings icon: . in incoming webhooks section, set webhooks manually . on integrations page, select webhooks tab. in pop-up window, select service dropdown menu. copy webhook url register git provider. " });
this.add({id:238, 
title:"Adding a GitHub webhook", 
body:" adding github webhook you specify webhooks github so bitrise automatically triggers build app perform specified action, code push pull request. github app integration if connect github account organization bitrise github app integration , don't need webhook any purpose. you specify webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for github, register bitrise-webhooks url webhook github repository. in addition, advantage git insights . git insights enables quantify optimize collaboration. it provides crucial metrics like pull request cycle time merge frequency. you register webhook automatically manually. this guide walks process manually registering webhook. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select github dropdown menu. copy webhook url. navigate github repository select settings . select add webhook webhooks . paste github webhook url bitrise payload url . and page, select let select individual events . select pull request, push , pull request review comments . press add webhook button you're done. " });
this.add({id:239, 
title:"Adding a GitLab webhook", 
body:" adding gitlab webhook you specify webhooks gitlab so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for gitlab, register bitrise-webhooks url webhook gitlab repository. in addition, advantage git insights . git insights enables quantify optimize collaboration. it provides crucial metrics like pull request cycle time merge frequency. you register webhook automatically manually. this guide walks process manually registering webhook. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select gitlab dropdown menu. copy webhook url. open project gitlab.com go settings project. select webhooks click add new webhook . enter bitrise-webhooks url field. in trigger section select: push events tag push events merge request events comments click add webhook . that’s all! the time push code, new tag create\/update merge request build triggered (if trigger mapping defined event(s) bitrise). " });
this.add({id:240, 
title:"Adding a Bitbucket webhook", 
body:" adding bitbucket webhook you specify webhooks bitbucket so bitrise automatically triggers build app perform specified action, code push pull request. to bitrise automatically start build time push code repository, set webhook hosting service trigger with repository. in addition, advantage git insights set webhook with necessary permissions. git insights enables quantify optimize collaboration. it provides crucial metrics like pull request cycle time merge frequency. you register webhook automatically manually. this guide walks process manually registering bitbucket webhook. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select bitbucket webhooks dropdown menu. copy webhook url. navigate bitbucket repository select settings . select webhooks left. select add webhook . paste bitbucket webhook url bitrise url add title . select choose list triggers . select necessary permissions: for automatically triggering builds, just need select push repository permissions, created , updated comment created comment updated pull request permissions. for git insights , need need, addition above, merged declined pull request permissions. " });
this.add({id:241, 
title:"Adding a Gogs webhook", 
body:" adding gogs webhook you specify webhooks gogs so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action. for gogs, register bitrise-webhooks url webhook gogs repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select gogs dropdown menu. copy webhook url. open project repository’s hosting url. go settings project. select webhooks , add webhook , gogs . specify bitrise-webhooks url ( ...\/h\/gogs\/bitrise-app-slug\/bitrise-app-api-token ) payload url field. set content type application\/json . a secret required time. set trigger fired just push event . click add webhook . and you’re done! from on, code push gogs repository trigger build bitrise. " });
this.add({id:242, 
title:"Adding a Slack webhook", 
body:" adding slack webhook you set slack app with slash commands allow trigger bitrise builds slack. slash commands slack apps allow send payload service typing command slack. you use slash commands trigger bitrise builds creating command. the request url command webhook url. open app bitrise with user admin role app . on main page app, click app settings icon: . go app’s page bitrise. on left, select integrations . click set webhooks manually . choose slack dropdown menu. copy webhook url. open slack app. if don't one, create slack app . on app management dashboard, select slash commands navigation menu. click create new command . paste webhook url request url field. fill rest fields finish configuring slash command click save . that's - successfully registered webhook slack app. you trigger builds using slash command . " });
this.add({id:243, 
title:"Adding a Visual Studio webhook", 
body:" adding visual studio webhook you specify webhooks visual studio so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for visual studio, register bitrise-webhooks url visualstudio.com project service hooks integration. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select visual studio dropdown menu. copy webhook url. open project visualstudio.com . go admin\/control pane project. select service hooks . click create subscription . create service integration: in service list select web hooks option. select code pushed event trigger . in filters section select repository want integrate. you leave filters default. click next . on action setup form enter bitrise-webhooks url ( ...\/h\/visualstudio\/bitrise-app-slug\/bitrise-app-api-token ) url field. you leave option default. click finish . " });
this.add({id:244, 
title:"Adding an Assembla webhook", 
body:" adding assembla webhook you specify webhooks assembla so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for assembla, need add bitrise-webhooks url assembla space. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select assembla dropdown menu. copy webhook url. open space assembla.com organisation’s assembla domain. go webhooks section space. select create new webhook . set title bitrise webhook . specify bitrise-webhooks url. ( ...\/h\/assembla\/bitrise-app-slug\/bitrise-app-api-token ) external url field. select application\/json content type field. paste following code content : {\"assembla\": {\"space\": \"%{space}\", \"action\": \"%{action}\", \"object\": \"%{object}\"}, \"message\": {\"title\": \"%{title}\", \"body\": \"%{body}\", \"author\": \"%{author}\"}, \"git\": {\"repository_suffix\": \"%{repository_suffix}\", \"repository_url\": \"%{repository_url}\", \"branch\": \"%{branch}\", \"commit_id\": \"%{commit_id}\"}}\n select code commits and\/or git push post updates about: section. click add . that’s all! the time push code build triggered (if trigger mapping defined event(s) bitrise). " });
this.add({id:245, 
title:"Adding a Deveo webhook", 
body:" adding deveo webhook you specify webhooks deveo so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for deveo, register bitrise-webhooks url deveo repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select deveo dropdown menu. copy webhook url. open repository app.deveo.com . go hooks project. add new repository hook clicking + button right. select repository select webhook service. enter bitrise-webhooks url ( ...\/h\/deveo\/bitrise-app-slug\/bitrise-app-api-token url field). type json content type field. click save hook . that’s all! the time push code push new tag build triggered (if trigger mapping defined event(s) bitrise). " });
this.add({id:246, 
title:"Adding outgoing webhooks", 
body:" adding outgoing webhooks you create outgoing webhooks so bitrise automatically sends build event notifications any service like. you configure bitrise send build event notifications any service like. a is: when build started. when build ends. you use notification share build statuses with git provider don’t support yet, notify right team success failure, automate in-house release pipeline. you add, remove edit webhooks easily website interface. accessing services firewall if need access service firewall, can't use outgoing webhooks: payload won't past firewall. to service, recommend configuring firewall allow bitrise build machines it, make request machine. for information how so, check relevant guides: configuring network access with ip allowlistsconnecting to a vpn during a build" });
this.add({id:247, 
title:"Adding an outgoing webhook to an app", 
body:" adding outgoing webhook app you set configure webhooks sent bitrise web ui. let’s see how! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll outgoing webhooks . click add webhook . enter url service wish send notification url field. select send select individual events option. send : supported event type trigger webhook. currently, build events options future! select individual events : specify individual events trigger webhook. optionally, add custom headers webhook: headers section, specify value header. when done, click add header . for example, api listening webhook, track requests with keys set custom header. hiding header value you hide value headers checking box hide . please note this, won't able view change value again. click create webhook . and you’re done! you modify webhook any time clicking pencil icon webhook. " });
this.add({id:248, 
title:"Adding custom headers to outgoing webhooks", 
body:" adding custom headers outgoing webhooks you add extra headers outgoing webhooks code tab web interface. for example, api listening webhook, track requests with keys set custom header. you add custom headers when: creating new outgoing webhook . modifying existing outgoing webhook clicking edit button url. to add header: find webhook headers section. add key value header. you need able save click add header . click create webhook \/ update webhook . " });
this.add({id:249, 
title:"Checking outgoing webhook deliveries", 
body:" checking outgoing webhook deliveries you check recent deliveries outgoing webhooks any time, resend necessary. the marked with appropriate status code, depending delivery was successful. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll outgoing webhooks . find webhook select icon. select delivery expand request response. you redeliver webhook payload any time. find delivery need click icon it. editing payload before trying deliver webhook payload again, edit configuration. close recent deliveries pop-up window click icon webhook edit it. when finished, click update webhook . " });
this.add({id:250, 
title:"Configuring the repository URL and default branch", 
body:" configuring repository url default branch when adding new app bitrise, specify repository used store source code, branch bitrise uses default branch. you change any time app settings. when adding new app bitrise, specify repository used store source code, branch bitrise uses default branch. once app set up, change any time. " });
this.add({id:251, 
title:"Changing the repository URL", 
body:" changing repository url the repository url address accessed bitrise. it ssh https url: strongly recommend using urls private apps security reasons. using https url you use https git urls, using personal access token authorization: case, don't need ssh key: configuring https authorization . if project's repository, url changes any reason, update bitrise continue building issue. open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select general . click edit . find repository url field. enter new url. click save save changes. " });
this.add({id:252, 
title:"Changing the default branch", 
body:" changing default branch the default branch repository bitrise use configuration indicates otherwise. you change default branch any time. open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select general . click edit . find default branch field. type branch want use default branch. click save save changes. " });
this.add({id:253, 
title:"Configuring SSH keys", 
body:" configuring ssh keys to access app's repository, bitrise needs ssh key. you add key first app update keys any point app settings. ssh keys primary method authentication. to access app's repository, bitrise needs public-private ssh keypair, with public key registered app's git repository. there exception this: use bitrise github app connect workspace github, need ssh key. using https url you use https git urls, using personal access token authorization: case, don't need ssh key: configuring https authorization . you add ssh key first app bitrise update keys any point. skip configuration adding register later. accessing multiple repositories if app needs access multiple repositories build, best practice generate ssh keypair, register public key repository need. however, mind github does support method. to learn more, see apps with submodules or private repo dependencies . " });
this.add({id:254, 
title:"Generating your own SSH keypair", 
body:" generating ssh keypair you generate ssh keypair device use generated public private keys bitrise app. this completely optional automatically register you, process adding app later app settings menu. generate ssh keypair with simple command line\/terminal command: ssh-keygen -t rsa -b 4096 -p '' -f .\/bitrise-ssh -m pem this generates files current directory (the run command): bitrise-ssh (private key) bitrise-ssh.pub (public key) copy paste public key git hosting service (for example, github), register app bitrise.io , you’ll provide private key . " });
this.add({id:255, 
title:"Configuring SSH keys for your Bitrise app", 
body:" configuring ssh keys bitrise app to configure ssh keys bitrise.io : open app bitrise with user admin role app . on main page app, click app settings icon: . find ssh settings section. click change ssh keypair . if haven't ssh key added before, button add ssh keypair instead. choose options: generate ssh keypair auto-add github : bitrise automatically registers public ssh key github repository. choose administrator rights generate ssh keypair : bitrise generates ssh keypair you, manually register public key git repository. use ssh keypair : you provide ssh keypair authentication, manually register public key git repository. " });
this.add({id:256, 
title:"Managing user access to an app", 
body:" managing user access app to collaborate app, users app's team. you add workspace groups app settings' team page app settings page. each bitrise app owned workspace - doesn't mean members belonging workspace access given app. in order able collaborate app, users app's team. an app's team consists users invited work app. there ways add team: adding outside contributors . adding groups workspace owns app . assigning workspace member app's team . this allows set user roles time. similarly, ways revoke access app: revoking access group . revoking access user . " });
this.add({id:257, 
title:"Adding an outside contributor to an app team", 
body:" adding outside contributor app team an outside contributor user app's team isn't member workspace owns app. admins owners you need admin app's team owners workspace owns app able add new team members app. allowing outside contributors workspaces disable allowing outside contributors. to so, workspace's profile page select team tab left. switch outside contributors tab toggle allow outside contributors . when app with outside contributors transferred workspace doesn't allow contributors, existing automatically removed app's team. open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select team . make sure people tab. click add contributor . type email address select role . if registered bitrise, send invitation email them. click save . " });
this.add({id:258, 
title:"Adding Workspace groups to an app team", 
body:" adding workspace groups app team to assign users workspace certain app, convenient way group app's team. assigning user role means users group role app's team. an app team consisting workspace groups let’s say workspace called testspace owns app called testapp . testorg following groups: group alpha - assigned testapp with admin role. members group assign groups app add outside contributors, change settings, manage roles workflows. group beta - assigned testapp with developer role. members group run builds, view build logs builds. group gamma - assigned testapp with tester\/qa role. they view builds. there ways assign workspace groups bitrise app's team: you assign team tab workspace's profile settings page. you assign app settings page app. " });
this.add({id:259, 
title:"Assigning a group from the Workspace's profile settings page", 
body:" assigning group workspace's profile settings page sign with account owner workspace open profile page selecting gear icon workspace's name. on left, select team menu options make sure groups tab. choose group wish assign, click dropdown menu indicated symbol. click manage access apps . you app(s) need select appropriate role group, group current apps using radio buttons. role cheatsheets you check role cheatsheet user roles on app teams , any app’s team tab. click save changes finalize changes. " });
this.add({id:260, 
title:"Assigning a group from the App settings page", 
body:" assigning group app settings page go app’s page bitrise.io . click app settings . on left, select team menu options. make sure groups tab. click grant access group . find group wish add select role using drop menus. click save . " });
this.add({id:261, 
title:"Revoking access to an app from a group", 
body:" revoking access app group open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select  team . go the  group  tab. search group like remove click \" \". click revoke access resulting window revoke group's access app. " });
this.add({id:262, 
title:"Revoking access to an app from a single user", 
body:" revoking access app single user open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select  team . go the  people  tab. search user like remove click \" \". click yes resulting window revoke access app. " });
this.add({id:263, 
title:"User roles on app teams", 
body:" user roles app teams bitrise apps user roles defined team. they limit with application. the different apps. roles important bitrise. they limit actions user perform application. roles work app basis: user different roles applications. workspace members - viewers managers - assigned app’s team individually workspace group . there types roles assign user app's team: admin devops engineer developer tester\/qa in addition, app owners. " });
this.add({id:264, 
title:"Owners", 
body:" owners bitrise apps owned workspaces. on app's team, users owners workspace owner access right app. owners unlimited access apps. only owners destroy apps transfer ownership apps, payment information. " });
this.add({id:265, 
title:"Admins", 
body:" admins here’s role cheatsheet admins app's team: an admin delete app invite members work app. the rights users - however, transfer ownership app! release manager role admins granted release manager role default. they grant acccess users: granting release manager rights . " });
this.add({id:266, 
title:"Developers", 
body:" developers here’s role cheatsheet developers: developers change team member roles, add new members, remove existing members create, edit delete workflows. they can, however, run builds view build logs. they access sensitive data payment information, tokens webhooks. " });
this.add({id:267, 
title:"Platform Engineers", 
body:" platform engineers here's role cheatsheet platform engineers: platform engineers developers can, addition that, edit workflows. they can't access app settings, manage team members billing, delete app. " });
this.add({id:268, 
title:"Testers\/QA", 
body:" testers\/qa here’s role cheatsheet testers\/qa: testers view builds. they access build logs modify app any way form. they access sensitive data payment information, tokens webhooks. " });
this.add({id:269, 
title:"Changing the owner of an app", 
body:" changing owner app you change owner app workspace profile page app's app settings page. workspaces apps. when add app bitrise, select workspace act owner app. from point, owners change ownership it happen need transfer application bitrise workspace. this ways: you select apps want transfer workspace profile page's apps tab. any given app transferred app's app settings page. " });
this.add({id:270, 
title:"Transferring apps from the Workspace profile page", 
body:" transferring apps workspace profile page owners you owner workspace transfer apps workspace. apps with outside contributors when transferring apps with outside contributors workspace doesn't allow contributors, existing automatically removed app's team. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select apps menu options. click transfer ownership (↔) button app's select app. select user workspace transfer app them. click transfer ownership finalize. transferring ownership permanent only new owner change app's ownership transfer completed! " });
this.add({id:271, 
title:"Transferring an app from App settings", 
body:" transferring app app settings log with account owner app. open app settings page. make sure general selected menu options left. scroll danger zone label. click transfer app ownership button. select user workspace transfer app them. click transfer ownership finalize. transferring ownership permanent! only new owner change app's ownership transfer completed! " });
this.add({id:272, 
title:"Enabling the Bitrise Support Access for your app", 
body:" enabling bitrise support access app you enable bitrise support access app settings page. this way, support team access project, specifically workflow, build log, app settings, bitrise.yml. if you’re stuck with problem bitrise, support center page see helps most: browse documentation , check knowledge base community pages solutions specific issues. you touch with support team clicking submit request button. in article describe how enable bitrise support access so support team access app , specifically workflow , build log, app settings bitrise.yml file. with toggle function, easily turn bitrise support access off. no need add user app's team. the bitrise support user, enabled, admin access app. that means regular user with rights app do: builds edit workflows, modify inputs team , code options app settings . no access billing information the bitrise support user can’t see account information any billing information. only owner account access information right modify any account-related records. the support user can’t see apps enabled. for details, what bitrise support user can\/can't do? how long does bitrise support access remain active? due security reasons toggle bitrise support access on, remain active weeks automatically gets revoked. let’s see how set up! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select general menu options. scroll support access toggle switch right enable it. it couple seconds work need refresh page see enabled status. in case failing workflow, best practice create new correct version workflow called support-testing . you compare support-testing with update support-testing orkflow, rename wish, develop further. " });
this.add({id:273, 
title:"Apps with submodules or private repo dependencies", 
body:" apps with submodules private repo dependencies bitrise needs access repositories submodules successful build, so app private repo dependencies, grant well. if project with submodules private repository dependencies (for example, cocoapods repositories), bitrise needs access repositories successful build. uses ssh git apps : grant access, need make sure repositories accessed with public ssh key generated bitrise app. app privacy the scope guide mainly covers private bitrise apps. git cloning submodules repository dependencies section briefly how access multiple repositories with public app : process simpler need make sure repositories https git clone url. you don’t worry ssh keys with public apps, them. there ways achieve this: register ssh key repository access build. register ssh key with bot user add repositories. registering ssh key repository best, secure way - services support it. gitlab bitbucket does it, github, however, doesn’t. if code stored read on! we’ll option, using bot user machine - github calls users detail. in brief, concept simple: register bitrise public ssh key add repositories accessed build. machine user with read access it required use special bot\/machine user: add ssh key account git hosting service. the best practice, however, machine user, with read access, repositories want access build. github recommends method accessing multiple repositories. let’s quickly example. the multibit app we bitrise app we’ll multibit. it main repository needs pull additional data other, private repositories build. our user called bitman github account linked account. to access build, creates github, bitbot. bitbot machine user. now, bitman accesses app settings page bitrise app, copies public ssh key current ssh public key field. bitman adds ssh key bitbot user github private repositories collaborator. now bitrise public access necessary. it’s time test bitman’s setup works. bitman goes bitrise opens workflow editor . he activate ssh key step repository so ssh key work. bitman adds script step clone private repositories - git clone step works with main repository! once done, build work expected. " });
this.add({id:274, 
title:"Using a machine user to access private repositories", 
body:" using machine user access private repositories a machine bot user github user used humans, instead exclusively automation. this best way access private repository: create machine user, add public ssh key provide read repository. " });
this.add({id:275, 
title:"Adding the machine user to your repository", 
body:" adding machine user repository create new github user account, serve machine user. go repository github select settings tab. on left menu, select collaborators & teams . scroll collaborators window. in search input field, username newly created account. click add collaborator . change user permission read . by default, invited collaborator’s permission write . you way, course, read permission bitrise. " });
this.add({id:276, 
title:"Adding the SSH key to the machine user", 
body:" adding ssh key machine user in order bitrise able use machine user access repository, add ssh key app bitrise. " });
this.add({id:277, 
title:"When adding a new app", 
body:" when adding new app start process adding app bitrise . when prompted setup repository access, choose automatic add ssh : if choose add ssh , generate ssh keypair. provide generated key app add public key github machine user . if choose automatic , click i need asked need use additional private repository. copy ssh public key github machine user . finish process. " });
this.add({id:278, 
title:"When your app already exists", 
body:" when app exists open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. copy ssh key current ssh public key field. add github machine user . " });
this.add({id:279, 
title:"Git cloning submodules and repository dependencies", 
body:" git cloning submodules repository dependencies you options comes accessing multiple repositories bitrise build: cloning repositories virtual machine, accessing needed. adding additional repositories submodules main repository. in latter case, need worry cloning them: set ssh access correctly, git clone step care everything. if don’t want can’t add repository dependencies submodules, read on: we’ll talk how clone them. public vs private apps there important mind want access submodules private repository dependencies app: app’s privacy settings determine git url use . if private app: use ssh urls everywhere! most services support key based authentication (for example, git@github.com:bitrise-io\/bitrise.git ). therefore private repository want use addressed with ssh url. if direct git repo references cocoapods podfile, you’ll url well. the applies submodules ssh key register bitrise.io . if public app: use https urls everywhere! ssh require keys repository public. for security reasons, apps cannot keys. as git clone any authentication case repositories, used bitrise apps. the git clone step the git clone step works with main repository. if need access multiple private repositories, add git clone steps. use script steps clone repositories bitrise virtual machine. to clone additional private repositories build: make sure added user with bitrise public ssh key repositories. make sure activate ssh key step git clone step start workflow. add script steps clone additional private repositories build. run build. cloning issues if encounter issues with git cloning - example, submodules cloned try following command cloning: git submodule update –recursive –remote –merge –force " });
this.add({id:280, 
title:"Public apps", 
body:" public apps to create public app, simply add new app bitrise start process, set privacy public. if public, build url see logs. open source projects great - love them! they pain maintain, however, especially with ci\/cd picture. that’s introduced public apps feature bitrise: make everyone’s life lot easier! if bitrise app public, build url see logs. for example, ci status check github fails pull request, click view to create public app, simply add new app bitrise start process, set privacy public . can't modify privacy later you can't change setting later! once you've added app public app, set private. add again. when public app, outside contributors troubleshoot issues easier, why, example, pull request theirs resulted failed build. they invited bitrise team able view logs need help member, either. of course, does mean with public app bitrise. if user viewing logs invited work role, able to: view build logs. download build logs. view build’s bitrise.yml file. public app’s build logs available remember: public app’s build logs bitrise.yml file seen - make sure files expose want seen! " });
this.add({id:281, 
title:"Creating white label app versions", 
body:" creating white label app versions you create different versions white label project build just version chaining workflows setting differences environment variables. this guide explains how create different versions white label project build just version chaining workflows setting differences environment variables . in article, we’re building individual versions (red, green, white) white label project. what you’ll need setup: a main workflow launches version-specific workflow. one version-specific workflow(s) set parameters distinguish versions other. a utility workflow describes build logic, refers version-specific options parameters. utility workflows underscore workflow id . utility workflows executed with bitrise_run command: need reference with before_run after_run properties. you chain utility workflows with regular workflow editor . " });
this.add({id:282, 
title:"Prepping Workflows of a white label app", 
body:" prepping workflows white label app add app bitrise usual way. click app dashboard workflows . next workflow , click + create main workflow. add new workflow based empty workflow . in example, main workflow called allcolor . this workflow start running version-specific workflows chain. click + create version-specific workflow. keep adding workflows different versions wish create. go env vars tab add version-specific parameters workflow you’ve just created. as see image we’re adding workflow environment variables green , red white workflows leaving allcolor intact. go workflows tab click workflow create utility workflow . make sure starts with underscore, example, _runner , bitrise cli treat utility workflow. add steps utility workflow. in example, we’re adding script step inherit environment variable workflows print value build log. " });
this.add({id:283, 
title:"Chaining Workflows for a white label app", 
body:" chaining workflows white label app now bunch workflows ready, it’s time chain right order. select main workflow ( allcolor example) responsive triggers. click add workflow , select version-specific workflow, hit done . click add workflow add utility workflow right version-specific workflow. keep adding workflows depending how versions you’d like build. in guide, we’re 3 different types allcolor workflow followed utility workflow. this setup looks like workflows tab. go build’s page click start\/schedule build . in build configuration pop-up window, select main workflow workflow . this kickstart chained workflows build app versions white label app. in simple example, output chained workflows: " });
this.add({id:234, 
title:"Webhooks", 
body:" webhooks bitrise makes extensive use incoming webhooks automatically trigger builds outgoing send reports build events services, slack. a webhook user-defined callback triggered event, pushing code repository. bitrise makes extensive use webhooks: incoming webhooks, registered with git service provider, used automatically trigger builds bitrise enable use git insights . webhook issues if builds triggers don't work, problem with webhooks: builds aren't getting triggered . outgoing webhooks used send reports build events services, slack. you add incoming webhook automatically creating app later; it’s possible manually add webhook any supported service. outgoing webhooks added website bitrise api . " });
this.add({id:235, 
title:"Adding incoming webhooks", 
body:" adding incoming webhooks an incoming webhook bitrise serves purpose: start builds automatically certain code event (code push, git tag, pull request) happens. you setup webhooks manually adding app bitrise. most source code hosting service provides feature register webhooks. a webhook basically url called specified events. an incoming webhook bitrise serves purpose: start builds automatically certain code event (code push, git tag, pull request) happens. you just need register repository configure build triggers . webhook issues if builds triggers don't work, problem with webhooks: builds aren't getting triggered . " });
this.add({id:236, 
title:"Registering an incoming webhook automatically", 
body:" registering incoming webhook automatically automatic webhook registration supported apps code hosted github, gitlab bitbucket. if use services source code hosting provider, bitrise automatically sets webhook with click button end app setup journey. github app integration if use bitrise github app connect bitrise workspace git account organization, don't need webhook. the app trigger builds send status updates it. however, change webhook later add new skipped registering adding app. you automatically register webhook repository app settings page app. automatic registration means bitrise registers webhook repository, so don't manually add git provider's website. this requires: that admin rights repository. that account hosts repository connected bitrise account. to register webhook automatically: make sure bitrise account connected git provider hosts repository admin rights repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . on integrations page, select webhooks tab. in incoming webhooks section, select set webhooks automatically . bitrise automatically register webhook app's repository. " });
this.add({id:237, 
title:"Registering an incoming webhook manually", 
body:" registering incoming webhook manually you manually setup change webhooks registered app bitrise. the process different depending git provider bitrise, basic steps each. create webhook implementation our webhook processor open sourced . if looking unsupported solution, create issue github page pull request with implementation. you run webhook provider firewall required. open app bitrise with user admin role app . on main page app, click app settings icon: . in incoming webhooks section, set webhooks manually . on integrations page, select webhooks tab. in pop-up window, select service dropdown menu. copy webhook url register git provider. " });
this.add({id:238, 
title:"Adding a GitHub webhook", 
body:" adding github webhook you specify webhooks github so bitrise automatically triggers build app perform specified action, code push pull request. github app integration if connect github account organization bitrise github app integration , don't need webhook any purpose. you specify webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for github, register bitrise-webhooks url webhook github repository. in addition, advantage git insights . git insights enables quantify optimize collaboration. it provides crucial metrics like pull request cycle time merge frequency. you register webhook automatically manually. this guide walks process manually registering webhook. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select github dropdown menu. copy webhook url. navigate github repository select settings . select add webhook webhooks . paste github webhook url bitrise payload url . and page, select let select individual events . select pull request, push , pull request review comments . press add webhook button you're done. " });
this.add({id:239, 
title:"Adding a GitLab webhook", 
body:" adding gitlab webhook you specify webhooks gitlab so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for gitlab, register bitrise-webhooks url webhook gitlab repository. in addition, advantage git insights . git insights enables quantify optimize collaboration. it provides crucial metrics like pull request cycle time merge frequency. you register webhook automatically manually. this guide walks process manually registering webhook. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select gitlab dropdown menu. copy webhook url. open project gitlab.com go settings project. select webhooks click add new webhook . enter bitrise-webhooks url field. in trigger section select: push events tag push events merge request events comments click add webhook . that’s all! the time push code, new tag create\/update merge request build triggered (if trigger mapping defined event(s) bitrise). " });
this.add({id:240, 
title:"Adding a Bitbucket webhook", 
body:" adding bitbucket webhook you specify webhooks bitbucket so bitrise automatically triggers build app perform specified action, code push pull request. to bitrise automatically start build time push code repository, set webhook hosting service trigger with repository. in addition, advantage git insights set webhook with necessary permissions. git insights enables quantify optimize collaboration. it provides crucial metrics like pull request cycle time merge frequency. you register webhook automatically manually. this guide walks process manually registering bitbucket webhook. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select bitbucket webhooks dropdown menu. copy webhook url. navigate bitbucket repository select settings . select webhooks left. select add webhook . paste bitbucket webhook url bitrise url add title . select choose list triggers . select necessary permissions: for automatically triggering builds, just need select push repository permissions, created , updated comment created comment updated pull request permissions. for git insights , need need, addition above, merged declined pull request permissions. " });
this.add({id:241, 
title:"Adding a Gogs webhook", 
body:" adding gogs webhook you specify webhooks gogs so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action. for gogs, register bitrise-webhooks url webhook gogs repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select gogs dropdown menu. copy webhook url. open project repository’s hosting url. go settings project. select webhooks , add webhook , gogs . specify bitrise-webhooks url ( ...\/h\/gogs\/bitrise-app-slug\/bitrise-app-api-token ) payload url field. set content type application\/json . a secret required time. set trigger fired just push event . click add webhook . and you’re done! from on, code push gogs repository trigger build bitrise. " });
this.add({id:242, 
title:"Adding a Slack webhook", 
body:" adding slack webhook you set slack app with slash commands allow trigger bitrise builds slack. slash commands slack apps allow send payload service typing command slack. you use slash commands trigger bitrise builds creating command. the request url command webhook url. open app bitrise with user admin role app . on main page app, click app settings icon: . go app’s page bitrise. on left, select integrations . click set webhooks manually . choose slack dropdown menu. copy webhook url. open slack app. if don't one, create slack app . on app management dashboard, select slash commands navigation menu. click create new command . paste webhook url request url field. fill rest fields finish configuring slash command click save . that's - successfully registered webhook slack app. you trigger builds using slash command . " });
this.add({id:243, 
title:"Adding a Visual Studio webhook", 
body:" adding visual studio webhook you specify webhooks visual studio so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for visual studio, register bitrise-webhooks url visualstudio.com project service hooks integration. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select visual studio dropdown menu. copy webhook url. open project visualstudio.com . go admin\/control pane project. select service hooks . click create subscription . create service integration: in service list select web hooks option. select code pushed event trigger . in filters section select repository want integrate. you leave filters default. click next . on action setup form enter bitrise-webhooks url ( ...\/h\/visualstudio\/bitrise-app-slug\/bitrise-app-api-token ) url field. you leave option default. click finish . " });
this.add({id:244, 
title:"Adding an Assembla webhook", 
body:" adding assembla webhook you specify webhooks assembla so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for assembla, need add bitrise-webhooks url assembla space. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select assembla dropdown menu. copy webhook url. open space assembla.com organisation’s assembla domain. go webhooks section space. select create new webhook . set title bitrise webhook . specify bitrise-webhooks url. ( ...\/h\/assembla\/bitrise-app-slug\/bitrise-app-api-token ) external url field. select application\/json content type field. paste following code content : {\"assembla\": {\"space\": \"%{space}\", \"action\": \"%{action}\", \"object\": \"%{object}\"}, \"message\": {\"title\": \"%{title}\", \"body\": \"%{body}\", \"author\": \"%{author}\"}, \"git\": {\"repository_suffix\": \"%{repository_suffix}\", \"repository_url\": \"%{repository_url}\", \"branch\": \"%{branch}\", \"commit_id\": \"%{commit_id}\"}}\n select code commits and\/or git push post updates about: section. click add . that’s all! the time push code build triggered (if trigger mapping defined event(s) bitrise). " });
this.add({id:245, 
title:"Adding a Deveo webhook", 
body:" adding deveo webhook you specify webhooks deveo so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for deveo, register bitrise-webhooks url deveo repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select deveo dropdown menu. copy webhook url. open repository app.deveo.com . go hooks project. add new repository hook clicking + button right. select repository select webhook service. enter bitrise-webhooks url ( ...\/h\/deveo\/bitrise-app-slug\/bitrise-app-api-token url field). type json content type field. click save hook . that’s all! the time push code push new tag build triggered (if trigger mapping defined event(s) bitrise). " });
this.add({id:246, 
title:"Adding outgoing webhooks", 
body:" adding outgoing webhooks you create outgoing webhooks so bitrise automatically sends build event notifications any service like. you configure bitrise send build event notifications any service like. a is: when build started. when build ends. you use notification share build statuses with git provider don’t support yet, notify right team success failure, automate in-house release pipeline. you add, remove edit webhooks easily website interface. accessing services firewall if need access service firewall, can't use outgoing webhooks: payload won't past firewall. to service, recommend configuring firewall allow bitrise build machines it, make request machine. for information how so, check relevant guides: configuring network access with ip allowlistsconnecting to a vpn during a build" });
this.add({id:247, 
title:"Adding an outgoing webhook to an app", 
body:" adding outgoing webhook app you set configure webhooks sent bitrise web ui. let’s see how! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll outgoing webhooks . click add webhook . enter url service wish send notification url field. select send select individual events option. send : supported event type trigger webhook. currently, build events options future! select individual events : specify individual events trigger webhook. optionally, add custom headers webhook: headers section, specify value header. when done, click add header . for example, api listening webhook, track requests with keys set custom header. hiding header value you hide value headers checking box hide . please note this, won't able view change value again. click create webhook . and you’re done! you modify webhook any time clicking pencil icon webhook. " });
this.add({id:248, 
title:"Adding custom headers to outgoing webhooks", 
body:" adding custom headers outgoing webhooks you add extra headers outgoing webhooks code tab web interface. for example, api listening webhook, track requests with keys set custom header. you add custom headers when: creating new outgoing webhook . modifying existing outgoing webhook clicking edit button url. to add header: find webhook headers section. add key value header. you need able save click add header . click create webhook \/ update webhook . " });
this.add({id:249, 
title:"Checking outgoing webhook deliveries", 
body:" checking outgoing webhook deliveries you check recent deliveries outgoing webhooks any time, resend necessary. the marked with appropriate status code, depending delivery was successful. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll outgoing webhooks . find webhook select icon. select delivery expand request response. you redeliver webhook payload any time. find delivery need click icon it. editing payload before trying deliver webhook payload again, edit configuration. close recent deliveries pop-up window click icon webhook edit it. when finished, click update webhook . " });
this.add({id:235, 
title:"Adding incoming webhooks", 
body:" adding incoming webhooks an incoming webhook bitrise serves purpose: start builds automatically certain code event (code push, git tag, pull request) happens. you setup webhooks manually adding app bitrise. most source code hosting service provides feature register webhooks. a webhook basically url called specified events. an incoming webhook bitrise serves purpose: start builds automatically certain code event (code push, git tag, pull request) happens. you just need register repository configure build triggers . webhook issues if builds triggers don't work, problem with webhooks: builds aren't getting triggered . " });
this.add({id:236, 
title:"Registering an incoming webhook automatically", 
body:" registering incoming webhook automatically automatic webhook registration supported apps code hosted github, gitlab bitbucket. if use services source code hosting provider, bitrise automatically sets webhook with click button end app setup journey. github app integration if use bitrise github app connect bitrise workspace git account organization, don't need webhook. the app trigger builds send status updates it. however, change webhook later add new skipped registering adding app. you automatically register webhook repository app settings page app. automatic registration means bitrise registers webhook repository, so don't manually add git provider's website. this requires: that admin rights repository. that account hosts repository connected bitrise account. to register webhook automatically: make sure bitrise account connected git provider hosts repository admin rights repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . on integrations page, select webhooks tab. in incoming webhooks section, select set webhooks automatically . bitrise automatically register webhook app's repository. " });
this.add({id:237, 
title:"Registering an incoming webhook manually", 
body:" registering incoming webhook manually you manually setup change webhooks registered app bitrise. the process different depending git provider bitrise, basic steps each. create webhook implementation our webhook processor open sourced . if looking unsupported solution, create issue github page pull request with implementation. you run webhook provider firewall required. open app bitrise with user admin role app . on main page app, click app settings icon: . in incoming webhooks section, set webhooks manually . on integrations page, select webhooks tab. in pop-up window, select service dropdown menu. copy webhook url register git provider. " });
this.add({id:236, 
title:"Registering an incoming webhook automatically", 
body:" registering incoming webhook automatically automatic webhook registration supported apps code hosted github, gitlab bitbucket. if use services source code hosting provider, bitrise automatically sets webhook with click button end app setup journey. github app integration if use bitrise github app connect bitrise workspace git account organization, don't need webhook. the app trigger builds send status updates it. however, change webhook later add new skipped registering adding app. you automatically register webhook repository app settings page app. automatic registration means bitrise registers webhook repository, so don't manually add git provider's website. this requires: that admin rights repository. that account hosts repository connected bitrise account. to register webhook automatically: make sure bitrise account connected git provider hosts repository admin rights repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . on integrations page, select webhooks tab. in incoming webhooks section, select set webhooks automatically . bitrise automatically register webhook app's repository. " });
this.add({id:237, 
title:"Registering an incoming webhook manually", 
body:" registering incoming webhook manually you manually setup change webhooks registered app bitrise. the process different depending git provider bitrise, basic steps each. create webhook implementation our webhook processor open sourced . if looking unsupported solution, create issue github page pull request with implementation. you run webhook provider firewall required. open app bitrise with user admin role app . on main page app, click app settings icon: . in incoming webhooks section, set webhooks manually . on integrations page, select webhooks tab. in pop-up window, select service dropdown menu. copy webhook url register git provider. " });
this.add({id:238, 
title:"Adding a GitHub webhook", 
body:" adding github webhook you specify webhooks github so bitrise automatically triggers build app perform specified action, code push pull request. github app integration if connect github account organization bitrise github app integration , don't need webhook any purpose. you specify webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for github, register bitrise-webhooks url webhook github repository. in addition, advantage git insights . git insights enables quantify optimize collaboration. it provides crucial metrics like pull request cycle time merge frequency. you register webhook automatically manually. this guide walks process manually registering webhook. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select github dropdown menu. copy webhook url. navigate github repository select settings . select add webhook webhooks . paste github webhook url bitrise payload url . and page, select let select individual events . select pull request, push , pull request review comments . press add webhook button you're done. " });
this.add({id:239, 
title:"Adding a GitLab webhook", 
body:" adding gitlab webhook you specify webhooks gitlab so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for gitlab, register bitrise-webhooks url webhook gitlab repository. in addition, advantage git insights . git insights enables quantify optimize collaboration. it provides crucial metrics like pull request cycle time merge frequency. you register webhook automatically manually. this guide walks process manually registering webhook. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select gitlab dropdown menu. copy webhook url. open project gitlab.com go settings project. select webhooks click add new webhook . enter bitrise-webhooks url field. in trigger section select: push events tag push events merge request events comments click add webhook . that’s all! the time push code, new tag create\/update merge request build triggered (if trigger mapping defined event(s) bitrise). " });
this.add({id:240, 
title:"Adding a Bitbucket webhook", 
body:" adding bitbucket webhook you specify webhooks bitbucket so bitrise automatically triggers build app perform specified action, code push pull request. to bitrise automatically start build time push code repository, set webhook hosting service trigger with repository. in addition, advantage git insights set webhook with necessary permissions. git insights enables quantify optimize collaboration. it provides crucial metrics like pull request cycle time merge frequency. you register webhook automatically manually. this guide walks process manually registering bitbucket webhook. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select bitbucket webhooks dropdown menu. copy webhook url. navigate bitbucket repository select settings . select webhooks left. select add webhook . paste bitbucket webhook url bitrise url add title . select choose list triggers . select necessary permissions: for automatically triggering builds, just need select push repository permissions, created , updated comment created comment updated pull request permissions. for git insights , need need, addition above, merged declined pull request permissions. " });
this.add({id:241, 
title:"Adding a Gogs webhook", 
body:" adding gogs webhook you specify webhooks gogs so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action. for gogs, register bitrise-webhooks url webhook gogs repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select gogs dropdown menu. copy webhook url. open project repository’s hosting url. go settings project. select webhooks , add webhook , gogs . specify bitrise-webhooks url ( ...\/h\/gogs\/bitrise-app-slug\/bitrise-app-api-token ) payload url field. set content type application\/json . a secret required time. set trigger fired just push event . click add webhook . and you’re done! from on, code push gogs repository trigger build bitrise. " });
this.add({id:242, 
title:"Adding a Slack webhook", 
body:" adding slack webhook you set slack app with slash commands allow trigger bitrise builds slack. slash commands slack apps allow send payload service typing command slack. you use slash commands trigger bitrise builds creating command. the request url command webhook url. open app bitrise with user admin role app . on main page app, click app settings icon: . go app’s page bitrise. on left, select integrations . click set webhooks manually . choose slack dropdown menu. copy webhook url. open slack app. if don't one, create slack app . on app management dashboard, select slash commands navigation menu. click create new command . paste webhook url request url field. fill rest fields finish configuring slash command click save . that's - successfully registered webhook slack app. you trigger builds using slash command . " });
this.add({id:243, 
title:"Adding a Visual Studio webhook", 
body:" adding visual studio webhook you specify webhooks visual studio so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for visual studio, register bitrise-webhooks url visualstudio.com project service hooks integration. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select visual studio dropdown menu. copy webhook url. open project visualstudio.com . go admin\/control pane project. select service hooks . click create subscription . create service integration: in service list select web hooks option. select code pushed event trigger . in filters section select repository want integrate. you leave filters default. click next . on action setup form enter bitrise-webhooks url ( ...\/h\/visualstudio\/bitrise-app-slug\/bitrise-app-api-token ) url field. you leave option default. click finish . " });
this.add({id:244, 
title:"Adding an Assembla webhook", 
body:" adding assembla webhook you specify webhooks assembla so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for assembla, need add bitrise-webhooks url assembla space. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select assembla dropdown menu. copy webhook url. open space assembla.com organisation’s assembla domain. go webhooks section space. select create new webhook . set title bitrise webhook . specify bitrise-webhooks url. ( ...\/h\/assembla\/bitrise-app-slug\/bitrise-app-api-token ) external url field. select application\/json content type field. paste following code content : {\"assembla\": {\"space\": \"%{space}\", \"action\": \"%{action}\", \"object\": \"%{object}\"}, \"message\": {\"title\": \"%{title}\", \"body\": \"%{body}\", \"author\": \"%{author}\"}, \"git\": {\"repository_suffix\": \"%{repository_suffix}\", \"repository_url\": \"%{repository_url}\", \"branch\": \"%{branch}\", \"commit_id\": \"%{commit_id}\"}}\n select code commits and\/or git push post updates about: section. click add . that’s all! the time push code build triggered (if trigger mapping defined event(s) bitrise). " });
this.add({id:245, 
title:"Adding a Deveo webhook", 
body:" adding deveo webhook you specify webhooks deveo so bitrise automatically triggers build app perform specified action, code push pull request. you set webhooks so bitrise automatically triggers build app perform specified action, code push pull request. for deveo, register bitrise-webhooks url deveo repository. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . click set webhooks manually . in pop-up window, select deveo dropdown menu. copy webhook url. open repository app.deveo.com . go hooks project. add new repository hook clicking + button right. select repository select webhook service. enter bitrise-webhooks url ( ...\/h\/deveo\/bitrise-app-slug\/bitrise-app-api-token url field). type json content type field. click save hook . that’s all! the time push code push new tag build triggered (if trigger mapping defined event(s) bitrise). " });
this.add({id:246, 
title:"Adding outgoing webhooks", 
body:" adding outgoing webhooks you create outgoing webhooks so bitrise automatically sends build event notifications any service like. you configure bitrise send build event notifications any service like. a is: when build started. when build ends. you use notification share build statuses with git provider don’t support yet, notify right team success failure, automate in-house release pipeline. you add, remove edit webhooks easily website interface. accessing services firewall if need access service firewall, can't use outgoing webhooks: payload won't past firewall. to service, recommend configuring firewall allow bitrise build machines it, make request machine. for information how so, check relevant guides: configuring network access with ip allowlistsconnecting to a vpn during a build" });
this.add({id:247, 
title:"Adding an outgoing webhook to an app", 
body:" adding outgoing webhook app you set configure webhooks sent bitrise web ui. let’s see how! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll outgoing webhooks . click add webhook . enter url service wish send notification url field. select send select individual events option. send : supported event type trigger webhook. currently, build events options future! select individual events : specify individual events trigger webhook. optionally, add custom headers webhook: headers section, specify value header. when done, click add header . for example, api listening webhook, track requests with keys set custom header. hiding header value you hide value headers checking box hide . please note this, won't able view change value again. click create webhook . and you’re done! you modify webhook any time clicking pencil icon webhook. " });
this.add({id:248, 
title:"Adding custom headers to outgoing webhooks", 
body:" adding custom headers outgoing webhooks you add extra headers outgoing webhooks code tab web interface. for example, api listening webhook, track requests with keys set custom header. you add custom headers when: creating new outgoing webhook . modifying existing outgoing webhook clicking edit button url. to add header: find webhook headers section. add key value header. you need able save click add header . click create webhook \/ update webhook . " });
this.add({id:249, 
title:"Checking outgoing webhook deliveries", 
body:" checking outgoing webhook deliveries you check recent deliveries outgoing webhooks any time, resend necessary. the marked with appropriate status code, depending delivery was successful. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll outgoing webhooks . find webhook select icon. select delivery expand request response. you redeliver webhook payload any time. find delivery need click icon it. editing payload before trying deliver webhook payload again, edit configuration. close recent deliveries pop-up window click icon webhook edit it. when finished, click update webhook . " });
this.add({id:247, 
title:"Adding an outgoing webhook to an app", 
body:" adding outgoing webhook app you set configure webhooks sent bitrise web ui. let’s see how! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll outgoing webhooks . click add webhook . enter url service wish send notification url field. select send select individual events option. send : supported event type trigger webhook. currently, build events options future! select individual events : specify individual events trigger webhook. optionally, add custom headers webhook: headers section, specify value header. when done, click add header . for example, api listening webhook, track requests with keys set custom header. hiding header value you hide value headers checking box hide . please note this, won't able view change value again. click create webhook . and you’re done! you modify webhook any time clicking pencil icon webhook. " });
this.add({id:248, 
title:"Adding custom headers to outgoing webhooks", 
body:" adding custom headers outgoing webhooks you add extra headers outgoing webhooks code tab web interface. for example, api listening webhook, track requests with keys set custom header. you add custom headers when: creating new outgoing webhook . modifying existing outgoing webhook clicking edit button url. to add header: find webhook headers section. add key value header. you need able save click add header . click create webhook \/ update webhook . " });
this.add({id:249, 
title:"Checking outgoing webhook deliveries", 
body:" checking outgoing webhook deliveries you check recent deliveries outgoing webhooks any time, resend necessary. the marked with appropriate status code, depending delivery was successful. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . scroll outgoing webhooks . find webhook select icon. select delivery expand request response. you redeliver webhook payload any time. find delivery need click icon it. editing payload before trying deliver webhook payload again, edit configuration. close recent deliveries pop-up window click icon webhook edit it. when finished, click update webhook . " });
this.add({id:250, 
title:"Configuring the repository URL and default branch", 
body:" configuring repository url default branch when adding new app bitrise, specify repository used store source code, branch bitrise uses default branch. you change any time app settings. when adding new app bitrise, specify repository used store source code, branch bitrise uses default branch. once app set up, change any time. " });
this.add({id:251, 
title:"Changing the repository URL", 
body:" changing repository url the repository url address accessed bitrise. it ssh https url: strongly recommend using urls private apps security reasons. using https url you use https git urls, using personal access token authorization: case, don't need ssh key: configuring https authorization . if project's repository, url changes any reason, update bitrise continue building issue. open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select general . click edit . find repository url field. enter new url. click save save changes. " });
this.add({id:252, 
title:"Changing the default branch", 
body:" changing default branch the default branch repository bitrise use configuration indicates otherwise. you change default branch any time. open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select general . click edit . find default branch field. type branch want use default branch. click save save changes. " });
this.add({id:251, 
title:"Changing the repository URL", 
body:" changing repository url the repository url address accessed bitrise. it ssh https url: strongly recommend using urls private apps security reasons. using https url you use https git urls, using personal access token authorization: case, don't need ssh key: configuring https authorization . if project's repository, url changes any reason, update bitrise continue building issue. open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select general . click edit . find repository url field. enter new url. click save save changes. " });
this.add({id:252, 
title:"Changing the default branch", 
body:" changing default branch the default branch repository bitrise use configuration indicates otherwise. you change default branch any time. open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select general . click edit . find default branch field. type branch want use default branch. click save save changes. " });
this.add({id:253, 
title:"Configuring SSH keys", 
body:" configuring ssh keys to access app's repository, bitrise needs ssh key. you add key first app update keys any point app settings. ssh keys primary method authentication. to access app's repository, bitrise needs public-private ssh keypair, with public key registered app's git repository. there exception this: use bitrise github app connect workspace github, need ssh key. using https url you use https git urls, using personal access token authorization: case, don't need ssh key: configuring https authorization . you add ssh key first app bitrise update keys any point. skip configuration adding register later. accessing multiple repositories if app needs access multiple repositories build, best practice generate ssh keypair, register public key repository need. however, mind github does support method. to learn more, see apps with submodules or private repo dependencies . " });
this.add({id:254, 
title:"Generating your own SSH keypair", 
body:" generating ssh keypair you generate ssh keypair device use generated public private keys bitrise app. this completely optional automatically register you, process adding app later app settings menu. generate ssh keypair with simple command line\/terminal command: ssh-keygen -t rsa -b 4096 -p '' -f .\/bitrise-ssh -m pem this generates files current directory (the run command): bitrise-ssh (private key) bitrise-ssh.pub (public key) copy paste public key git hosting service (for example, github), register app bitrise.io , you’ll provide private key . " });
this.add({id:255, 
title:"Configuring SSH keys for your Bitrise app", 
body:" configuring ssh keys bitrise app to configure ssh keys bitrise.io : open app bitrise with user admin role app . on main page app, click app settings icon: . find ssh settings section. click change ssh keypair . if haven't ssh key added before, button add ssh keypair instead. choose options: generate ssh keypair auto-add github : bitrise automatically registers public ssh key github repository. choose administrator rights generate ssh keypair : bitrise generates ssh keypair you, manually register public key git repository. use ssh keypair : you provide ssh keypair authentication, manually register public key git repository. " });
this.add({id:254, 
title:"Generating your own SSH keypair", 
body:" generating ssh keypair you generate ssh keypair device use generated public private keys bitrise app. this completely optional automatically register you, process adding app later app settings menu. generate ssh keypair with simple command line\/terminal command: ssh-keygen -t rsa -b 4096 -p '' -f .\/bitrise-ssh -m pem this generates files current directory (the run command): bitrise-ssh (private key) bitrise-ssh.pub (public key) copy paste public key git hosting service (for example, github), register app bitrise.io , you’ll provide private key . " });
this.add({id:255, 
title:"Configuring SSH keys for your Bitrise app", 
body:" configuring ssh keys bitrise app to configure ssh keys bitrise.io : open app bitrise with user admin role app . on main page app, click app settings icon: . find ssh settings section. click change ssh keypair . if haven't ssh key added before, button add ssh keypair instead. choose options: generate ssh keypair auto-add github : bitrise automatically registers public ssh key github repository. choose administrator rights generate ssh keypair : bitrise generates ssh keypair you, manually register public key git repository. use ssh keypair : you provide ssh keypair authentication, manually register public key git repository. " });
this.add({id:256, 
title:"Managing user access to an app", 
body:" managing user access app to collaborate app, users app's team. you add workspace groups app settings' team page app settings page. each bitrise app owned workspace - doesn't mean members belonging workspace access given app. in order able collaborate app, users app's team. an app's team consists users invited work app. there ways add team: adding outside contributors . adding groups workspace owns app . assigning workspace member app's team . this allows set user roles time. similarly, ways revoke access app: revoking access group . revoking access user . " });
this.add({id:257, 
title:"Adding an outside contributor to an app team", 
body:" adding outside contributor app team an outside contributor user app's team isn't member workspace owns app. admins owners you need admin app's team owners workspace owns app able add new team members app. allowing outside contributors workspaces disable allowing outside contributors. to so, workspace's profile page select team tab left. switch outside contributors tab toggle allow outside contributors . when app with outside contributors transferred workspace doesn't allow contributors, existing automatically removed app's team. open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select team . make sure people tab. click add contributor . type email address select role . if registered bitrise, send invitation email them. click save . " });
this.add({id:258, 
title:"Adding Workspace groups to an app team", 
body:" adding workspace groups app team to assign users workspace certain app, convenient way group app's team. assigning user role means users group role app's team. an app team consisting workspace groups let’s say workspace called testspace owns app called testapp . testorg following groups: group alpha - assigned testapp with admin role. members group assign groups app add outside contributors, change settings, manage roles workflows. group beta - assigned testapp with developer role. members group run builds, view build logs builds. group gamma - assigned testapp with tester\/qa role. they view builds. there ways assign workspace groups bitrise app's team: you assign team tab workspace's profile settings page. you assign app settings page app. " });
this.add({id:259, 
title:"Assigning a group from the Workspace's profile settings page", 
body:" assigning group workspace's profile settings page sign with account owner workspace open profile page selecting gear icon workspace's name. on left, select team menu options make sure groups tab. choose group wish assign, click dropdown menu indicated symbol. click manage access apps . you app(s) need select appropriate role group, group current apps using radio buttons. role cheatsheets you check role cheatsheet user roles on app teams , any app’s team tab. click save changes finalize changes. " });
this.add({id:260, 
title:"Assigning a group from the App settings page", 
body:" assigning group app settings page go app’s page bitrise.io . click app settings . on left, select team menu options. make sure groups tab. click grant access group . find group wish add select role using drop menus. click save . " });
this.add({id:261, 
title:"Revoking access to an app from a group", 
body:" revoking access app group open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select  team . go the  group  tab. search group like remove click \" \". click revoke access resulting window revoke group's access app. " });
this.add({id:262, 
title:"Revoking access to an app from a single user", 
body:" revoking access app single user open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select  team . go the  people  tab. search user like remove click \" \". click yes resulting window revoke access app. " });
this.add({id:257, 
title:"Adding an outside contributor to an app team", 
body:" adding outside contributor app team an outside contributor user app's team isn't member workspace owns app. admins owners you need admin app's team owners workspace owns app able add new team members app. allowing outside contributors workspaces disable allowing outside contributors. to so, workspace's profile page select team tab left. switch outside contributors tab toggle allow outside contributors . when app with outside contributors transferred workspace doesn't allow contributors, existing automatically removed app's team. open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select team . make sure people tab. click add contributor . type email address select role . if registered bitrise, send invitation email them. click save . " });
this.add({id:258, 
title:"Adding Workspace groups to an app team", 
body:" adding workspace groups app team to assign users workspace certain app, convenient way group app's team. assigning user role means users group role app's team. an app team consisting workspace groups let’s say workspace called testspace owns app called testapp . testorg following groups: group alpha - assigned testapp with admin role. members group assign groups app add outside contributors, change settings, manage roles workflows. group beta - assigned testapp with developer role. members group run builds, view build logs builds. group gamma - assigned testapp with tester\/qa role. they view builds. there ways assign workspace groups bitrise app's team: you assign team tab workspace's profile settings page. you assign app settings page app. " });
this.add({id:259, 
title:"Assigning a group from the Workspace's profile settings page", 
body:" assigning group workspace's profile settings page sign with account owner workspace open profile page selecting gear icon workspace's name. on left, select team menu options make sure groups tab. choose group wish assign, click dropdown menu indicated symbol. click manage access apps . you app(s) need select appropriate role group, group current apps using radio buttons. role cheatsheets you check role cheatsheet user roles on app teams , any app’s team tab. click save changes finalize changes. " });
this.add({id:260, 
title:"Assigning a group from the App settings page", 
body:" assigning group app settings page go app’s page bitrise.io . click app settings . on left, select team menu options. make sure groups tab. click grant access group . find group wish add select role using drop menus. click save . " });
this.add({id:261, 
title:"Revoking access to an app from a group", 
body:" revoking access app group open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select  team . go the  group  tab. search group like remove click \" \". click revoke access resulting window revoke group's access app. " });
this.add({id:262, 
title:"Revoking access to an app from a single user", 
body:" revoking access app single user open app bitrise with user admin role app . on main page app, click app settings icon: . from menu left, select  team . go the  people  tab. search user like remove click \" \". click yes resulting window revoke access app. " });
this.add({id:263, 
title:"User roles on app teams", 
body:" user roles app teams bitrise apps user roles defined team. they limit with application. the different apps. roles important bitrise. they limit actions user perform application. roles work app basis: user different roles applications. workspace members - viewers managers - assigned app’s team individually workspace group . there types roles assign user app's team: admin devops engineer developer tester\/qa in addition, app owners. " });
this.add({id:264, 
title:"Owners", 
body:" owners bitrise apps owned workspaces. on app's team, users owners workspace owner access right app. owners unlimited access apps. only owners destroy apps transfer ownership apps, payment information. " });
this.add({id:265, 
title:"Admins", 
body:" admins here’s role cheatsheet admins app's team: an admin delete app invite members work app. the rights users - however, transfer ownership app! release manager role admins granted release manager role default. they grant acccess users: granting release manager rights . " });
this.add({id:266, 
title:"Developers", 
body:" developers here’s role cheatsheet developers: developers change team member roles, add new members, remove existing members create, edit delete workflows. they can, however, run builds view build logs. they access sensitive data payment information, tokens webhooks. " });
this.add({id:267, 
title:"Platform Engineers", 
body:" platform engineers here's role cheatsheet platform engineers: platform engineers developers can, addition that, edit workflows. they can't access app settings, manage team members billing, delete app. " });
this.add({id:268, 
title:"Testers\/QA", 
body:" testers\/qa here’s role cheatsheet testers\/qa: testers view builds. they access build logs modify app any way form. they access sensitive data payment information, tokens webhooks. " });
this.add({id:264, 
title:"Owners", 
body:" owners bitrise apps owned workspaces. on app's team, users owners workspace owner access right app. owners unlimited access apps. only owners destroy apps transfer ownership apps, payment information. " });
this.add({id:265, 
title:"Admins", 
body:" admins here’s role cheatsheet admins app's team: an admin delete app invite members work app. the rights users - however, transfer ownership app! release manager role admins granted release manager role default. they grant acccess users: granting release manager rights . " });
this.add({id:266, 
title:"Developers", 
body:" developers here’s role cheatsheet developers: developers change team member roles, add new members, remove existing members create, edit delete workflows. they can, however, run builds view build logs. they access sensitive data payment information, tokens webhooks. " });
this.add({id:267, 
title:"Platform Engineers", 
body:" platform engineers here's role cheatsheet platform engineers: platform engineers developers can, addition that, edit workflows. they can't access app settings, manage team members billing, delete app. " });
this.add({id:268, 
title:"Testers\/QA", 
body:" testers\/qa here’s role cheatsheet testers\/qa: testers view builds. they access build logs modify app any way form. they access sensitive data payment information, tokens webhooks. " });
this.add({id:269, 
title:"Changing the owner of an app", 
body:" changing owner app you change owner app workspace profile page app's app settings page. workspaces apps. when add app bitrise, select workspace act owner app. from point, owners change ownership it happen need transfer application bitrise workspace. this ways: you select apps want transfer workspace profile page's apps tab. any given app transferred app's app settings page. " });
this.add({id:270, 
title:"Transferring apps from the Workspace profile page", 
body:" transferring apps workspace profile page owners you owner workspace transfer apps workspace. apps with outside contributors when transferring apps with outside contributors workspace doesn't allow contributors, existing automatically removed app's team. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select apps menu options. click transfer ownership (↔) button app's select app. select user workspace transfer app them. click transfer ownership finalize. transferring ownership permanent only new owner change app's ownership transfer completed! " });
this.add({id:271, 
title:"Transferring an app from App settings", 
body:" transferring app app settings log with account owner app. open app settings page. make sure general selected menu options left. scroll danger zone label. click transfer app ownership button. select user workspace transfer app them. click transfer ownership finalize. transferring ownership permanent! only new owner change app's ownership transfer completed! " });
this.add({id:270, 
title:"Transferring apps from the Workspace profile page", 
body:" transferring apps workspace profile page owners you owner workspace transfer apps workspace. apps with outside contributors when transferring apps with outside contributors workspace doesn't allow contributors, existing automatically removed app's team. log bitrise hover left navigation bar. make sure right workspace selected. select settings . on left, select apps menu options. click transfer ownership (↔) button app's select app. select user workspace transfer app them. click transfer ownership finalize. transferring ownership permanent only new owner change app's ownership transfer completed! " });
this.add({id:271, 
title:"Transferring an app from App settings", 
body:" transferring app app settings log with account owner app. open app settings page. make sure general selected menu options left. scroll danger zone label. click transfer app ownership button. select user workspace transfer app them. click transfer ownership finalize. transferring ownership permanent! only new owner change app's ownership transfer completed! " });
this.add({id:272, 
title:"Enabling the Bitrise Support Access for your app", 
body:" enabling bitrise support access app you enable bitrise support access app settings page. this way, support team access project, specifically workflow, build log, app settings, bitrise.yml. if you’re stuck with problem bitrise, support center page see helps most: browse documentation , check knowledge base community pages solutions specific issues. you touch with support team clicking submit request button. in article describe how enable bitrise support access so support team access app , specifically workflow , build log, app settings bitrise.yml file. with toggle function, easily turn bitrise support access off. no need add user app's team. the bitrise support user, enabled, admin access app. that means regular user with rights app do: builds edit workflows, modify inputs team , code options app settings . no access billing information the bitrise support user can’t see account information any billing information. only owner account access information right modify any account-related records. the support user can’t see apps enabled. for details, what bitrise support user can\/can't do? how long does bitrise support access remain active? due security reasons toggle bitrise support access on, remain active weeks automatically gets revoked. let’s see how set up! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select general menu options. scroll support access toggle switch right enable it. it couple seconds work need refresh page see enabled status. in case failing workflow, best practice create new correct version workflow called support-testing . you compare support-testing with update support-testing orkflow, rename wish, develop further. " });
this.add({id:273, 
title:"Apps with submodules or private repo dependencies", 
body:" apps with submodules private repo dependencies bitrise needs access repositories submodules successful build, so app private repo dependencies, grant well. if project with submodules private repository dependencies (for example, cocoapods repositories), bitrise needs access repositories successful build. uses ssh git apps : grant access, need make sure repositories accessed with public ssh key generated bitrise app. app privacy the scope guide mainly covers private bitrise apps. git cloning submodules repository dependencies section briefly how access multiple repositories with public app : process simpler need make sure repositories https git clone url. you don’t worry ssh keys with public apps, them. there ways achieve this: register ssh key repository access build. register ssh key with bot user add repositories. registering ssh key repository best, secure way - services support it. gitlab bitbucket does it, github, however, doesn’t. if code stored read on! we’ll option, using bot user machine - github calls users detail. in brief, concept simple: register bitrise public ssh key add repositories accessed build. machine user with read access it required use special bot\/machine user: add ssh key account git hosting service. the best practice, however, machine user, with read access, repositories want access build. github recommends method accessing multiple repositories. let’s quickly example. the multibit app we bitrise app we’ll multibit. it main repository needs pull additional data other, private repositories build. our user called bitman github account linked account. to access build, creates github, bitbot. bitbot machine user. now, bitman accesses app settings page bitrise app, copies public ssh key current ssh public key field. bitman adds ssh key bitbot user github private repositories collaborator. now bitrise public access necessary. it’s time test bitman’s setup works. bitman goes bitrise opens workflow editor . he activate ssh key step repository so ssh key work. bitman adds script step clone private repositories - git clone step works with main repository! once done, build work expected. " });
this.add({id:274, 
title:"Using a machine user to access private repositories", 
body:" using machine user access private repositories a machine bot user github user used humans, instead exclusively automation. this best way access private repository: create machine user, add public ssh key provide read repository. " });
this.add({id:275, 
title:"Adding the machine user to your repository", 
body:" adding machine user repository create new github user account, serve machine user. go repository github select settings tab. on left menu, select collaborators & teams . scroll collaborators window. in search input field, username newly created account. click add collaborator . change user permission read . by default, invited collaborator’s permission write . you way, course, read permission bitrise. " });
this.add({id:276, 
title:"Adding the SSH key to the machine user", 
body:" adding ssh key machine user in order bitrise able use machine user access repository, add ssh key app bitrise. " });
this.add({id:277, 
title:"When adding a new app", 
body:" when adding new app start process adding app bitrise . when prompted setup repository access, choose automatic add ssh : if choose add ssh , generate ssh keypair. provide generated key app add public key github machine user . if choose automatic , click i need asked need use additional private repository. copy ssh public key github machine user . finish process. " });
this.add({id:278, 
title:"When your app already exists", 
body:" when app exists open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. copy ssh key current ssh public key field. add github machine user . " });
this.add({id:279, 
title:"Git cloning submodules and repository dependencies", 
body:" git cloning submodules repository dependencies you options comes accessing multiple repositories bitrise build: cloning repositories virtual machine, accessing needed. adding additional repositories submodules main repository. in latter case, need worry cloning them: set ssh access correctly, git clone step care everything. if don’t want can’t add repository dependencies submodules, read on: we’ll talk how clone them. public vs private apps there important mind want access submodules private repository dependencies app: app’s privacy settings determine git url use . if private app: use ssh urls everywhere! most services support key based authentication (for example, git@github.com:bitrise-io\/bitrise.git ). therefore private repository want use addressed with ssh url. if direct git repo references cocoapods podfile, you’ll url well. the applies submodules ssh key register bitrise.io . if public app: use https urls everywhere! ssh require keys repository public. for security reasons, apps cannot keys. as git clone any authentication case repositories, used bitrise apps. the git clone step the git clone step works with main repository. if need access multiple private repositories, add git clone steps. use script steps clone repositories bitrise virtual machine. to clone additional private repositories build: make sure added user with bitrise public ssh key repositories. make sure activate ssh key step git clone step start workflow. add script steps clone additional private repositories build. run build. cloning issues if encounter issues with git cloning - example, submodules cloned try following command cloning: git submodule update –recursive –remote –merge –force " });
this.add({id:274, 
title:"Using a machine user to access private repositories", 
body:" using machine user access private repositories a machine bot user github user used humans, instead exclusively automation. this best way access private repository: create machine user, add public ssh key provide read repository. " });
this.add({id:275, 
title:"Adding the machine user to your repository", 
body:" adding machine user repository create new github user account, serve machine user. go repository github select settings tab. on left menu, select collaborators & teams . scroll collaborators window. in search input field, username newly created account. click add collaborator . change user permission read . by default, invited collaborator’s permission write . you way, course, read permission bitrise. " });
this.add({id:276, 
title:"Adding the SSH key to the machine user", 
body:" adding ssh key machine user in order bitrise able use machine user access repository, add ssh key app bitrise. " });
this.add({id:277, 
title:"When adding a new app", 
body:" when adding new app start process adding app bitrise . when prompted setup repository access, choose automatic add ssh : if choose add ssh , generate ssh keypair. provide generated key app add public key github machine user . if choose automatic , click i need asked need use additional private repository. copy ssh public key github machine user . finish process. " });
this.add({id:278, 
title:"When your app already exists", 
body:" when app exists open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. copy ssh key current ssh public key field. add github machine user . " });
this.add({id:275, 
title:"Adding the machine user to your repository", 
body:" adding machine user repository create new github user account, serve machine user. go repository github select settings tab. on left menu, select collaborators & teams . scroll collaborators window. in search input field, username newly created account. click add collaborator . change user permission read . by default, invited collaborator’s permission write . you way, course, read permission bitrise. " });
this.add({id:276, 
title:"Adding the SSH key to the machine user", 
body:" adding ssh key machine user in order bitrise able use machine user access repository, add ssh key app bitrise. " });
this.add({id:277, 
title:"When adding a new app", 
body:" when adding new app start process adding app bitrise . when prompted setup repository access, choose automatic add ssh : if choose add ssh , generate ssh keypair. provide generated key app add public key github machine user . if choose automatic , click i need asked need use additional private repository. copy ssh public key github machine user . finish process. " });
this.add({id:278, 
title:"When your app already exists", 
body:" when app exists open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. copy ssh key current ssh public key field. add github machine user . " });
this.add({id:279, 
title:"Git cloning submodules and repository dependencies", 
body:" git cloning submodules repository dependencies you options comes accessing multiple repositories bitrise build: cloning repositories virtual machine, accessing needed. adding additional repositories submodules main repository. in latter case, need worry cloning them: set ssh access correctly, git clone step care everything. if don’t want can’t add repository dependencies submodules, read on: we’ll talk how clone them. public vs private apps there important mind want access submodules private repository dependencies app: app’s privacy settings determine git url use . if private app: use ssh urls everywhere! most services support key based authentication (for example, git@github.com:bitrise-io\/bitrise.git ). therefore private repository want use addressed with ssh url. if direct git repo references cocoapods podfile, you’ll url well. the applies submodules ssh key register bitrise.io . if public app: use https urls everywhere! ssh require keys repository public. for security reasons, apps cannot keys. as git clone any authentication case repositories, used bitrise apps. the git clone step the git clone step works with main repository. if need access multiple private repositories, add git clone steps. use script steps clone repositories bitrise virtual machine. to clone additional private repositories build: make sure added user with bitrise public ssh key repositories. make sure activate ssh key step git clone step start workflow. add script steps clone additional private repositories build. run build. cloning issues if encounter issues with git cloning - example, submodules cloned try following command cloning: git submodule update –recursive –remote –merge –force " });
this.add({id:280, 
title:"Public apps", 
body:" public apps to create public app, simply add new app bitrise start process, set privacy public. if public, build url see logs. open source projects great - love them! they pain maintain, however, especially with ci\/cd picture. that’s introduced public apps feature bitrise: make everyone’s life lot easier! if bitrise app public, build url see logs. for example, ci status check github fails pull request, click view to create public app, simply add new app bitrise start process, set privacy public . can't modify privacy later you can't change setting later! once you've added app public app, set private. add again. when public app, outside contributors troubleshoot issues easier, why, example, pull request theirs resulted failed build. they invited bitrise team able view logs need help member, either. of course, does mean with public app bitrise. if user viewing logs invited work role, able to: view build logs. download build logs. view build’s bitrise.yml file. public app’s build logs available remember: public app’s build logs bitrise.yml file seen - make sure files expose want seen! " });
this.add({id:281, 
title:"Creating white label app versions", 
body:" creating white label app versions you create different versions white label project build just version chaining workflows setting differences environment variables. this guide explains how create different versions white label project build just version chaining workflows setting differences environment variables . in article, we’re building individual versions (red, green, white) white label project. what you’ll need setup: a main workflow launches version-specific workflow. one version-specific workflow(s) set parameters distinguish versions other. a utility workflow describes build logic, refers version-specific options parameters. utility workflows underscore workflow id . utility workflows executed with bitrise_run command: need reference with before_run after_run properties. you chain utility workflows with regular workflow editor . " });
this.add({id:282, 
title:"Prepping Workflows of a white label app", 
body:" prepping workflows white label app add app bitrise usual way. click app dashboard workflows . next workflow , click + create main workflow. add new workflow based empty workflow . in example, main workflow called allcolor . this workflow start running version-specific workflows chain. click + create version-specific workflow. keep adding workflows different versions wish create. go env vars tab add version-specific parameters workflow you’ve just created. as see image we’re adding workflow environment variables green , red white workflows leaving allcolor intact. go workflows tab click workflow create utility workflow . make sure starts with underscore, example, _runner , bitrise cli treat utility workflow. add steps utility workflow. in example, we’re adding script step inherit environment variable workflows print value build log. " });
this.add({id:283, 
title:"Chaining Workflows for a white label app", 
body:" chaining workflows white label app now bunch workflows ready, it’s time chain right order. select main workflow ( allcolor example) responsive triggers. click add workflow , select version-specific workflow, hit done . click add workflow add utility workflow right version-specific workflow. keep adding workflows depending how versions you’d like build. in guide, we’re 3 different types allcolor workflow followed utility workflow. this setup looks like workflows tab. go build’s page click start\/schedule build . in build configuration pop-up window, select main workflow workflow . this kickstart chained workflows build app versions white label app. in simple example, output chained workflows: " });
this.add({id:282, 
title:"Prepping Workflows of a white label app", 
body:" prepping workflows white label app add app bitrise usual way. click app dashboard workflows . next workflow , click + create main workflow. add new workflow based empty workflow . in example, main workflow called allcolor . this workflow start running version-specific workflows chain. click + create version-specific workflow. keep adding workflows different versions wish create. go env vars tab add version-specific parameters workflow you’ve just created. as see image we’re adding workflow environment variables green , red white workflows leaving allcolor intact. go workflows tab click workflow create utility workflow . make sure starts with underscore, example, _runner , bitrise cli treat utility workflow. add steps utility workflow. in example, we’re adding script step inherit environment variable workflows print value build log. " });
this.add({id:283, 
title:"Chaining Workflows for a white label app", 
body:" chaining workflows white label app now bunch workflows ready, it’s time chain right order. select main workflow ( allcolor example) responsive triggers. click add workflow , select version-specific workflow, hit done . click add workflow add utility workflow right version-specific workflow. keep adding workflows depending how versions you’d like build. in guide, we’re 3 different types allcolor workflow followed utility workflow. this setup looks like workflows tab. go build’s page click start\/schedule build . in build configuration pop-up window, select main workflow workflow . this kickstart chained workflows build app versions white label app. in simple example, output chained workflows: " });
this.add({id:284, 
title:"Workflows and Pipelines", 
body:" workflows pipelines steps, workflows, pipelines heart how bitrise works. a build simply series defined workflow, executed cli virtual machines (or own). pipeline collection organised stages. steps workflows heart how bitrise works. a build simply series steps, defined workflow, executed cli virtual machines (or own). a step contains code performs build task. you configure inputs parameters define task, view reuse outputs step generates. when build app running, steps executed order defined workflow. you easily steps workflow, chain different workflows , configure app so different branches code events trigger builds with workflows. you execute multiple workflows parallel pipeline . pipelines highest level bitrise ci\/cd configuration. it consists stages: stage contain multiple workflows executed parallel. " });
this.add({id:285, 
title:"Steps", 
body:" steps a step block script execution encapsulates build task bitrise: code perform task, inputs parameters define outputs generates. steps heart bitrise. a step build task: example, git clone step clones git repository start build google play deploy step deploy finished app play store. a step contains code performs build task. you configure inputs parameters define task, view reuse outputs generates. reusing output means use value inputs. our steps defined yaml format, written bash go. you list steps in: the integrations page . the bitrise steplib . the workflow editor. you create run any custom script want bitrise build using script step. all need specify script runner (the default bash), add script, run build. for information how set custom scripts, check bitrise script step - running (bash, python, nodejs, ruby, swift, kotlin) . for purposes builds, steps managed directly workflow editor. you rearrange them, set versions, add remove any time. " });
this.add({id:286, 
title:"Types of Steps", 
body:" types steps bitrise 300 steps its  step library (steplib) third-party companies open-source teams enrich with steps based services\/tools. there different types steps bitrise. you identify based labels gui: official bitrise steps : these steps created maintained bitrise. labeled green badge \"b\". verified steps : these steps created maintained community, owned service tool open-source team guarantees secure, maintained, consistent, high-quality performance any bitrise user. labeled blue badge check mark. for information verified steps, guide . community steps : these steps created community. labeled don't badge. if like learn how develop share with bitrise community, check developing a new step . " });
this.add({id:287, 
title:"Adding Steps to a Workflow", 
body:" adding steps workflow steps added removed any time workflows. you add step workflow - absolutely restrictions. it’s possible specific to, example, ios apps android app. steps added removed any time workflows. when adding new app bitrise, project scanner generates workflow with default don't use all: it's want include. you add any step workflow - absolutely restrictions. please note means it’s possible specific to, example, ios apps android app. always make sure relevant steps workflow! " });
this.add({id:288, 
title:"Adding Steps in the Workflow Editor", 
body:" adding steps workflow editor open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click + symbol steps insert step position. search step need. search filter be aware filter right search field. by default, set platform type app. for example, want add step ios app, filtered steps. click all search steps. click step add workflow. " });
this.add({id:289, 
title:"Adding Steps from alternative sources", 
body:" adding steps alternative sources generally, recommend using steps official bitrise step library. but add sources, want to: use git url local path. on bitrise website, git:: special source easiest way use step bitrise library. let’s see how. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. add git url step want use. in example, we’re adding script step git source: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: click save . " });
this.add({id:290, 
title:"Removing a Step from a Workflow", 
body:" removing step workflow you remove step any time. be aware, however, add later date, inputs set default value - custom configuration gone. disabling step if don't want step run configuration intact, disable step: enabling or disabling a step conditionally . open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click step want remove. click trash bin icon right. click save . " });
this.add({id:291, 
title:"Step versioning", 
body:" step versioning bitrise step versions follow semantic versioning: version number looks like major.minor.patch. for example, 3.2.1 first patch second minor major version. bitrise step versions follow semantic versioning: version number looks like major.minor.patch. for example, 3.2.1 first patch second minor major version. you use any existing version step workflows, different versions workflows. we regularly update steps make sure fully equipped users’ needs. however, don’t use latest version want to: old stable compatible with build, feel free continue using that, roll any time. " });
this.add({id:292, 
title:"Locking a Step to a major or minor version", 
body:" locking step major minor version on graphical ui workflow editor, choose locking step major version minor any workflows. this determines use. locking step version means workflow automatically updated use latest release step’s selected type, major minor, won’t different minor released. if step locked major version, automatically updated new minor version patch released. released, won’t updated. if step locked minor version, automatically updated new patch version released. major released, won’t updated. version locking the example step’s current version workflow 2.3.3. a new minor comes out: 2.4.0. if step locked major version 2.x.x, updated 2.4.0. if step locked minor version 2.3.x, not updated 2.4.0. now let’s say example step gets new major version: 3.0.0! in case, step automatically updated way. if want use new version, need lock major version 3.x.x minor 3.0.x. this way sure update break builds. to lock step major minor version: open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. select step. next current version, open dropdown menu. select major minor version need: example, 3.x.x sets version. " });
this.add({id:293, 
title:"Using a specific Step version", 
body:" using specific step version you option using specific, static step version. for example, version 3.2.2. this means matter new versions released step, updated workflow. yaml mode only! please note set specific step version graphical ui: lock major minor version. setting possible yaml mode. to set specific step version, need add version reference app’s bitrise.yml file: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go bitrise.yml tab. find workflow step need. set step version reference. in example, we're setting activate ssh key step primary workflow version 4.0.3: workflows:\n primary:\n steps:\n - activate-ssh-key@4.0.3: " });
this.add({id:294, 
title:"Using the latest available version of the Step", 
body:" using latest available version step locking latest release step means new version released, user’s workflow updated use that. this includes automatic update major version, potentially breaking build. so careful! to make sure workflow use latest available version given step, remove any information step reference bitrise.yml file app: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. find workflow step need. make sure step version information: in example, we're setting activate ssh key step primary workflow latest version: workflows:\n primary:\n steps:\n - activate-ssh-key: " });
this.add({id:295, 
title:"Step inputs", 
body:" step inputs step inputs way configure steps build. required valid value optional provide options customize step inputs way configure steps build. required valid value optional provide options customize click step bring input variables right currently selected workflow . required inputs marked workflow editor. if required valid values, step fail. modify step input either: clicking input field. clicking change option input field. you use environment variables (env vars) step inputs. " });
this.add({id:296, 
title:"Skipping Steps", 
body:" skipping steps you configure steps bitrise builds so don't run previous step workflow failed. this help with avoiding wasting build time credits. you skip certain steps bitrise build. there point running, example, unit test step previous failed build app. of course, examples it’s better run step previous failed. for example, cache:pull step fails, reason run - fact, installs dependencies it’s bad idea skip pulling cache unsuccessful. enabling step conditionally you configure steps run certain conditions: enabling or disabling a step conditionally . to set given step skipped previous failed: open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. select step want skip. on right, use toggle disable run previous step failed option. " });
this.add({id:297, 
title:"Enabling or disabling a Step conditionally", 
body:" enabling disabling step conditionally you enable disable step any given workflow, set conditions steps. so, computer, with bitrise cli using bitrise.yml tab workflow editor. you enable disable step any given workflow , set conditions steps. you computer, with bitrise cli using bitrise.yml tab workflow editor. we mostly use run_if expressions things. check examples possible template expressions: examples of run_if expressions . you view examples github: template expression examples . a run_if any valid go template a run_if any valid go template , long evaluates true false (or any string representation, example true , t , yes y considered true ). if template evaluates true , step run, won’t. an example run_if check custom environment variable : run_if: |-\n \t{{enveq \"custom_env_var_key\" \"test value test against\"}}\n this run_if skip step value custom_env_var_key test value . " });
this.add({id:298, 
title:"Disabling a Step", 
body:" disabling step if want remove step workflow don’t run, disable it, using run_if expression. experimenting with workflows to experiment with different configurations workflow, removing disabling steps, recommend cloning workflow. you modify cloned workflow wish changing original. workflow editor bitrise.yml open workflow need. find step want disable. in additional run conditions input, type false . conditionals any condition evaluates false works, too. open app’s bitrise.yml file. find step want disable. add run_if: false it. conditionals any condition evaluates false works, too. - script:\n run_if: false\n inputs:\n content: |-\n #!\/bin\/bash\n echo \"this run, run_if:false\" " });
this.add({id:299, 
title:"Running a Step only in a CI environment", 
body:" running step ci environment running step ci environment means build skip particular local builds. like disabling steps, with run_if expression. use debug builds locally. enabling ci mode locally ci mode enabled mac\/pc setting ci environment true (for example, run export ci=true bash terminal), running bitrise run with --ci flag: bitrise --ci run ... . workflow editor bitrise.yml open workflow need. find step need. in additional run conditions input, type .isci . open app’s bitrise.yml file. find step need. add run_if: .isci properties: - script:\n run_if: .isci\n inputs:\n content: |-\n #!\/bin\/bash\n echo \"this run ci environment isci\" " });
this.add({id:300, 
title:"Running a Step only if the build failed", 
body:" running step build failed it possible run step only build failed got particular step. in addition run_if , need use is_always_run property well. workflow editor bitrise.yml open workflow need. find step want disable. in additional run conditions input, type .isbuildfailed . make sure run previous step(s) failed option toggled on. open app’s bitrise.yml file. find step want disable. add run_if: .isbuildfailed it. add is_always_run: true it. this enables step run previous failed. - script:\n is_always_run: true\n run_if: .isbuildfailed\n inputs:\n content: |-\n #!\/bin\/bash\n echo \"build failed!\" " });
this.add({id:301, 
title:"Ignoring a failed Step without failing the build", 
body:" ignoring failed step failing build usually, step fails build, built itself fails, too. this isn't case with step, course: bitrise.io cache:pull bitrise.io cache:push steps fail failing build. you configure any step ensure failure doesn't yaml mode you can't graphical ui workflow editor: edit app's bitrise.yml file. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. find step need. add is_skippable flag set true : - script: \n is_skippable: true inputs: content: |- # !\/bin\/bash echo \"failing step.\" exit 1 mark step failed, won't break build flag \/ property " });
this.add({id:302, 
title:"Setting up run_if conditions with Script Steps", 
body:" setting run_if conditions with script steps sometimes conditions required determine step run complex multi-layered. if so, using chain go templates run_if expression overwhelming, especially prefer languages instead go. in cases, recommend using workaround: add script step workflow, write script evaluates certain value. store value environment variable, with conditional expression needs check using non-go script run_if expression in example, we'll create simple bash script store value, check matches preset value. first, add script step, script content, define value. once value defined, use envman store environment variable. in particular case, define variable bash, use value env var: workflows: \n example: steps: - script@1:\n title: do with script step inputs: content: |- #!\/usr\/bin\/env bash\n # fail any commands fails set -e\n debug log\n -x\n creating variable storing env var my_variable='this value need!' envman add --key our_condition --value \"$my_variable\"\n we create simple run_if expression step need condition. in case, save cache step, we'll check value our_condition variable matches value stored previous bash variable: - save-cache@1: \n run_if: |- {{getenv \"our_condition\" | eq \"this value need!\"}} since values match, save cache step run. " });
this.add({id:303, 
title:"Examples of run_if expressions", 
body:" examples run_if expressions there different ways using run_if expression. the following workflow contains examples them, with commented explanations. expressions used script steps that, successfully running, print used expression was true. all expressions valid go templates. to learn templates, check documentation: go template docs . pipeline support the envcontain property supported pipelines . for standalone workflows, use check environment variable contains given string available pipelines yet. workflows:\n primary:\n steps:\n #\n # check environment variable's value equal given string\n - script:\n title: run-if expression\n run_if: |-\n {{getenv \"test_key\" | eq \"test value\"}}\n inputs:\n content: #!\/bin\/bash\n echo \"runif expression was true\"\n use enveq function check env var's '{{enveq value\"}}'\n envcontain var contains '{{envcontain not empty\n '{{getenv ne \"\"}}'\n vars value\n \"test_key_1\" (getenv \"test_key_2\")}}'\n available data properties\n like isci (checks build runs ci environment) isbuildfailed failed) directly\n {{.isci}}\n you don't wrap {{...}} it's simple\n oneliner\n $.isci\n remove $ sign, optional this\n .isci\n if-else condition, example step run environment\n {{if .isci}}\n true\n {{else}}\n false\n {{end}}\n use multiple conditions\n not failed\n {{.isci (not .isbuildfailed)}}\n pull request not\n only request\n .ispr\n pull request\n \"pull request id: ${pull_request_id}\" " });
this.add({id:304, 
title:"Setting a time limit for Steps", 
body:" setting time limit steps a step timeout, defined seconds, sets maximum time allowed run. if exceeds limit, workflow moves step. ensure builds exceed time limit setting step timeout steps cause builds hang. a step timeout, defined seconds, sets maximum time allowed run. if exceeds limit, workflow moves step. this useful if, example, builds hang immediately obvious reasons - set timeouts steps suspected caused problem. find step bitrise.yml file. you edit file locally, bitrise.yml tab workflow editor. add timeout property step inputs specify value seconds: - xcode-test@1.18.14:\n timeout: 120\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: \"$bitrise_scheme\" " });
this.add({id:305, 
title:"Developing your own Bitrise Step", 
body:" developing bitrise step you develop bitrise steps project scanner, submit so users use them, too. contributing bitrise easy: develop open source integration, submit you’re done! in section, we’ll focusing technical contributions: creating new step creating project scanner . " });
this.add({id:306, 
title:"Creating your own Step", 
body:" creating step bitrise offers 200 steps users. we maintain users’ community does outstanding job contributing step library (steplib). anyone submit - approved, become official steplib available users! check how create share with world:  creating step . " });
this.add({id:307, 
title:"Creating your own scanner", 
body:" creating scanner our project scanner automatically detects type add new app bitrise. in context, means platform framework used create app, example, android, ios, react native flutter. based results, configuration, with default workflow contains frequently steps detected type. our scanner detect app, couple reasons: missing repository (such config.xml file case ionic example), simply don’t type yet. if it’s latter, can  configure app manually , create scanner, with project configuration:  creating bitrise project scanner. " });
this.add({id:308, 
title:"Developing a new Step", 
body:" developing new step to develop bitrise step integrated library, need write code, create description, submit review. duplicate steps before deciding develop new step, make sure there’s existing step performs function. you search steps integrations page step library github. a step build task: example, git clone step clones git repository start build google play deploy step deploy finished app play store. a step contains code performs build task. you configure inputs parameters define task, view reuse outputs generates. reusing output means use value inputs. our steps written go bash. steps contained git repositories: includes code step.yml file defines configuration step. if wish make step available users, step.yml file needs included bitrise-steplib repository so users step website, workflow editor . sharing steps sharing custom steps optional: step with use case specific single user help others. as run machine any git repository, bitrise library. for info sharing steps with users, check sharing steps guide. for detailed information how steps work, see following guides: steps yaml step inputs step outputs step properties " });
this.add({id:309, 
title:"Before you start developing a new Step", 
body:" before start developing new step before creating new step, need install bitrise cli, set up, make sure step plugin updated latest version. install bitrise cli . run bitrise setup. update step plugin latest version with following command: bitrise plugin update step " });
this.add({id:310, 
title:"Creating the Step", 
body:" creating step we use step plugin bitrise cli create new step. with this, we’ll basic structure certain properties inputs generated assigned automatically. you change later so don’t worry yet. the step plugin run bitrise :step command line interface check commands. creating basic structure step simple. we’ll concepts involved process later; now, just create step. at end process, step.yml file, readme.md file main.go step.sh file repository. before start during step creation process, prompted set number options. note change any submitting bitrise review: data included generated step.yml file edit leisure later. during initial step creation process, use placeholders want to. open command line interface, terminal app macos. create new directory step haven’t so enter directory: create step with bitrise plugin: bitrise :step create . when prompted, set step’s author. hit enter leave default value. when prompted, set step’s name. the plugin automatically generates step id based name. provide summary: than couple sentences step does. provide description step. this contain configuration information troubleshooting step. select primary category step. to so, type number preferred option hit enter. this changed later. choose toolkit want use: choose go bash. set source code hosting data step: to so, first decide want host github any site enter appropriate option: if chose github, asked provide username account repository. if chose store github, provide valid url repository. you done! if went well, plugin initialized git repository current directory added step.yml , readme.md file, main.go main.sh file. now we’ll how step.yml file works how set up. " });
this.add({id:311, 
title:"The step.yml file", 
body:" the step.yml file the step.yml file step interface definition, containing dependencies, inputs outputs properties. it points location step’s source code. every one. if use step plugin create new step, required properties value assigned - change any time. so don’t worry title set initial process does conform guidelines below. we’ll look important configuration options step.yml file, including naming describing step, setting step inputs outputs. " });
this.add({id:312, 
title:"Naming and describing a Step", 
body:" naming describing step every step title summary defined step.yml file. these appear integrations page workflow editor . the description property optional strongly recommend providing so users better understand how step works. description summary both description summary accept markdown formatting values. " });
this.add({id:313, 
title:"The title", 
body:" the title the title property the title property required! the title property sets step, appear bitrise.io . it short descriptive. include service function fulfils, git clone . here’s guidelines step titles: do use word ‘step’. use imperative verbs instead nouns possible. for example, script runner , run script . do include platform. make sure use correct service tool. for example, github instead github. do include implementation details. " });
this.add({id:314, 
title:"The summary", 
body:" the summary the summary property the summary property required! a single line significant information step. it can’t longer than 100 characters. the summary visible default workflow editor. if user expands summary, step’s description presented - one, course. " });
this.add({id:315, 
title:"The description", 
body:" the description a detailed explanation step. it include: what step does. the services tools used step. configuration information, including important inputs. troubleshooting information: potential issues solutions. by default, step’s description collapsed workflow editor summary presented. " });
this.add({id:316, 
title:"Step categories", 
body:" step categories there thing we’d like know step: type step it? as see integrations page workflow editor, steps sorted different categories based factors: platforms available functionality. " });
this.add({id:317, 
title:"Platforms", 
body:" platforms the available platform types controlled project_type_tags attribute. if step available platform project type, specify project_type_tags . in any case, select platform types step available. the available values are: ios macos android react-native cordova ionic flutter " });
this.add({id:318, 
title:"Category", 
body:" category functional categories controlled type_tags attribute step.yml . one step single type tag assigned it. use utility believe none types fit step. the available values are: build code-sign test deploy notification access-control artifact-info installer dependency utility " });
this.add({id:319, 
title:"Step inputs", 
body:" step inputs step inputs bitrise environment variables : consist key value pair users step set control behavior. for example, git clone step input with key branch: title: git clone repository\nsummary: repository specified path vm\ninputs:\n- branch: master the value input - master example used determine branch repository cloned. step inputs visible workflow editor: presented order appear step.yml . as such, required frequently used inputs top. " });
this.add({id:320, 
title:"Step input keys and values", 
body:" step input keys values use lower case snake case style input keys. for example, project_path . using opts input key the input key opts , used input’s options. there need add domain-specific prefixes input keys, inputs exposed step run process. this means project_path input overlap with subsequent steps’ project_path inputs. step input values strings: bitrise cli exposes inputs environment variables steps. provide default values step inputs possible (and makes sense). that configuration easier bitrise users. environment variables used default values, unless: they exposed bitrise cli bitrise.io . they generated output step (for example, $bitrise_ipa_path , $bitrise_aab_path ). this workflow editor highlights required inputs values express step work setting valid value given input. if set env var, does automatically assigned value, default input, think input question (even var yet). also, reason suggest certain environment variable way: users value assigned env var with different name. let’s talk how step inputs passed code presented. " });
this.add({id:321, 
title:"Configuring Step inputs", 
body:" configuring step inputs step inputs defined configured step.yml file. in addition key value, step inputs required opts property. this property contains different options define how inputs passed code step presented workflow editor. the possible values input set opts well. let’s see example. - install_defaults: \"yes\"\n opts:\n title: installs default codesign files\n value_options:\n \"no\"\n \"yes\" the input key install_defaults, default value yes. the value_options option defines possible values: case, yes and no. its opts property contains information how input presented: case, it’s just title option, required. the displayed workflow editor instead key input. the value_options input the value_options input contain string. this means quotation marks, indicated example, validation fail. " });
this.add({id:322, 
title:"Naming and describing Step inputs", 
body:" naming describing step inputs a step input name, summary, description, just like itself. to define these: include opts property with step input. under opts, provide title, summary, description option. let’s look how like! description summary both description summary accept markdown formatting values. title : it short descriptive sentence half sentence: the xcode project’s path. cli flag api parameter used internally. this makes step configuration easier, preexisting knowledge required underlying tool service interfaces. it’s easier change step’s implementation maintaining backwards compatibility. summary : it short version description, provides quick overview input. on bitrise workflow editor, summary inputs presented default click step. description : it user facing description step input: provide deeper, detailed explanation input. by default, visible workflow editor, unless clicks input question. here example: - install_defaults: \"yes\"\n opts:\n description: installs default (bitrise) wildcard provisioning profile and\n certificate files testing.\n summary: code signing files.\n title: now, let’s talk configuration options steps. " });
this.add({id:323, 
title:"Required inputs", 
body:" required inputs required inputs valid value, step fail. to mark step input required, use is_required option opts property. it values: true false . if set true , input displayed required workflow editor. - keychain_password: $bitrise_keychain_password\n opts:\n title: \"keychain's password\"\n is_required: true " });
this.add({id:324, 
title:"Sensitive inputs", 
body:" sensitive inputs you mark step inputs sensitive make sure values exposed. sensitive accept secrets values. this ensures visible build logs. to mark step input sensitive, use is_sensitive option opts property. it values: true false . if set true , input displayed sensitive workflow editor. the is_expand option if mark input sensitive, is_expand option input true, default setting. inputs:\n - certificate_urls: $bitrise_certificate_url\n opts:\n title: \"certificate url\"\n is_sensitive: true " });
this.add({id:325, 
title:"Using Env Vars as input values", 
body:" using env vars input values as noted earlier, possible use environment variables value any given input. by default, step expand env var pass execution. this defined is_expand option opts property. - project_path: $bitrise_project_path\n opts:\n is_expand: true the is_expand option values: true false. if set true - default behavior -, value $bitrise_project_path passed step execution. if set false , string $bitrise_project_path passed (and particular step fail project location). env vars step code do use environment variables directly step’s code. instead, expose outside variable input step set default value variable want use. this way it’s easier test user easily declare inputs, having scour code required variable. " });
this.add({id:326, 
title:"Grouping inputs together", 
body:" grouping inputs the category option used group inputs together. inputs belonging displayed collapsed default workflow editor. - default_certificate_passphrase: $bitrise_default_certificate_passphrase\n opts:\n category: default code signing files\n description: |\n certificate passphrase default certificate.\n is_sensitive: true\n title: certificate in case, input appear with inputs category set. categories used step than inputs. the suggested maximum number inputs group root six. please mind, designing step categories, that: required inputs grouped! grouped inputs displayed non-categorised inputs. " });
this.add({id:327, 
title:"Accepting a list of values for inputs", 
body:" accepting list values inputs it absolutely possible accept list values given input. if wish so, strongly recommend adding suffix key input (for example, input_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). as best practice, filter items. use either: first value\\n\\nsecond value first value\\n \\nsecond value " });
this.add({id:328, 
title:"Step outputs", 
body:" step outputs steps generate outputs used inputs. that means step generates artifact, path artifact input build. for example, xcode archive & export ios step exposes $bitrise_api_path output used input value deploy itunesconnect step. outputs defined step.yml file, outputs property. they structure inputs: consist key value pair. an output’s used input subsequent step, just environment variables exposed bitrise.io bitrise cli be. " });
this.add({id:329, 
title:"Step output keys and values", 
body:" step output keys values for output keys, use upper case snake case style output keys, example: output_path. " });
this.add({id:330, 
title:"Naming and describing Step outputs", 
body:" naming describing step outputs step outputs exported environment variables (env var). for example, xcode archive & export ios step generates ipa file: output exported bitrise_ipa_path env var: outputs:\n- bitrise_ipa_path: \n opts: title: .ipa file path summary: local created as example shows, output definition contains key ( bitrise_ipa_path ) opts property, includes title summary. in workflow editor, key visible default: required. addition, add summary description: title : it short descriptive sentence half sentence: generated ipa path. this required. summary : it short version description, provides quick overview output. this optional, visible workflow editor click title. description : it user facing description step output: provide deeper, detailed explanation output. this optional, visible workflow editor click title. " });
this.add({id:331, 
title:"Outputs with list of values", 
body:" outputs with list values it absolutely possible provide list values given output. if wish so, strongly recommend adding list suffix key output (for example, bitrise_apk_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). " });
this.add({id:332, 
title:"Setting conditions for running the Step", 
body:" setting conditions running step there properties define step run given workflow not: is_always_run , is_skippable run_if . all properties set step.yml file govern default behavior step, set given app’s bitrise.yml case-by-case basis. is_always_run : by default, steps run previous step workflow failed. however, is_always_run property set true , step runs regardless status previous steps workflow. this useful, example, case send notifications build: failed builds. is_skippable : as mentioned above, steps run previous step workflow failed. however, step’s is_skippable property set true , build fail subsequent steps run particular step fails. a good example cache:pull step: app build cache pull from, step fail reason build. run_if : if want make step execution dependent certain condition, use run_if property define run condition. for example, configure step so runs ci environment. read enabling or disabling a step conditionally guide possible use cases. " });
this.add({id:333, 
title:"Submodules and Step dependencies", 
body:" submodules step dependencies do use submodules, require any resource downloaded on-demand step! try include required step step’s repository. otherwise run problems if, say, fails download network error authorization problem. in case content repository instead using submodule you can, however, declare dependencies fetch os dependency manager, apt-get brew. a step installed bitrise cli available path environment variable. as steps run any environment bitrise cli run, list used dependency, know pre-installed stacks. unused dependencies (for example, git wget added sample default) waste build time. step dependencies include toolkit dependencies, bitrise cli care installing automatically. a written golang list dependency uses go toolkit. the bitrise cli install step dependencies available homebrew package manager: deps:\n brew:\n - name: cmake it install apt-get dependencies available sources listed sources.list file host machine: deps:\n apt_get:\n - name: cmake " });
this.add({id:334, 
title:"Accessing files in the Step repo with an Env Var", 
body:" accessing files step repo with env var if need binary, assets required step bundled repository, include step.yml file code step. the bitrise cli automatically exports environment variable called bitrise_step_source_dir allows access files any time. for example, access .jar file root step’s repository like this: $bitrise_step_source_dir\/mytool.jar " });
this.add({id:335, 
title:"Adding a Step icon", 
body:" adding step icon you add step icon step: see workflow editor integrations page. if want to, requirements: its background color transparent. size: 256x256 px. margin: 60 px. format: svg. verified steps please note wish submit step verification so verified step , add step icon. to submit step’s icon: add .svg file steplib fork repo at: steplib_fork_root\/steps\/your_step_id\/assets\/icon.svg . create new pull request steplib repository . " });
this.add({id:336, 
title:"Sharing Steps with all Bitrise users", 
body:" sharing steps with bitrise users if think bitrise step use others, share cli command workflow. shared steps actively maintained open contributors. if think step use others, share it! before doing so, however, check steps solve problem. you check: in list released steps . in list open pull requests steplib. in list closed pull requests steplib. if step missing particular feature, try contribute developing sharing brand new feature. you use integrations page search steps bitrise steplib. by clicking github source button given step’s page taken repository, submit feature request open pull request. also, mind shared steps actively maintained open contributors. " });
this.add({id:337, 
title:"Sharing a new Step", 
body:" sharing new step the sharing process relatively straightforward - make sure carefully new step. the bitrise share command during step development, help anytime simply running bitrise share. this print short guide sharing. there ways share step: you manually, using bitrise share command. if created step with plugin, run share-this-step workflow step’s directory. " });
this.add({id:338, 
title:"Before you start", 
body:" before start before start, make sure that: your step public git repository. the step.yml file contains support_url property points valid issue tracker (for example, issues page step’s github repository). the step.yml file contains source_code_url property points correct git url repository. sharing than step sharing than step - is, adding new step.yml file bitrise steplib separate pull requests! you open request contains step! if you’re ready, ahead with preferred sharing process! " });
this.add({id:339, 
title:"Sharing with the bitrise share command", 
body:" sharing with bitrise share command fork bitrise steplib repository. prepare forked steplib locally sharing: $ bitrise share start -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> add step version tag step’s repository. add step forked steplib repository: $ bitrise share create --tag [step-version-tag] --git [step-git-uri].git --stepid [step-id] optionally, perform complete health check forked steplib: $ bitrise share audit -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> review step’s step.yml file, you’re happy with it, finish share process: this commits pushes file forked steplib repository. $ bitrise share finish this commits pushes step.yml file forked steplib repository. open pull request official bitrise steplib repository. " });
this.add({id:340, 
title:"Sharing with the share-this-step Workflow", 
body:" sharing with share-this-step workflow the share-this-step workflow included bitrise.yml file step plugin automatically generates create new with it. using it, sharing incredibly easy: fork bitrise steplib repository. set required workflow environment variables app level bitrise.yml file: app: envs: - bitrise_step_id: bitrise_step_version: bitrise_step_git_clone_url: my_steplib_repo_fork_git_url: run share-this-step workflow bitrise cli: $ bitrise run share-this-step " });
this.add({id:341, 
title:"Fixing issues in a StepLib pull request", 
body:" fixing issues steplib pull request once submitted step version steplib, wait bitrise team review it. if ask changes: close pull request. delete share branch fork bitrise steplib. fix issues step repository. add new version tag commit contains fixes step repository. run share process again. hopefully, fixing issues, we’ll able merge pull request release step public! " });
this.add({id:342, 
title:"Abandoned Steps", 
body:" abandoned steps if step maintainer, reachable reasonable timeframe submits issue pull request step. try contact times regarding important fix\/update refuse answer weeks deprecate, remove replace collection! abandoned steps threat use it, mind decide share with others! the repository issue tracker removed, permanent links included step.yml bitrise steplib. if shared step versions continue function managed file hosting service share process. a new version step released, bitrise. if shared step you’re longer able willing maintain it, create github issue repository: bitrise steplib " });
this.add({id:343, 
title:"Reporting Step issues", 
body:" reporting step issues if you’re user step critical (security functionality) issues, create ticket step’s issue tracker. every declares preferred way reporting issues with support_url attribute. if don’t response step’s maintainer extended period (for than couple weeks) create github issue repository: https:\/\/github.com\/bitrise-io\/bitrise-steplib we’ll try resolve issue, following abandoned step policy. please patient mind contributes collection does so help providing use! " });
this.add({id:344, 
title:"Verified Steps", 
body:" verified steps verified steps bitrise owner guarantees secure, maintained, consistent, high-quality performance any user. to step verified, apply badge. " });
this.add({id:345, 
title:"What are Verified Steps?", 
body:" what verified steps? a step contains code performs specific build task. bitrise 300 steps step library (steplib) party companies open source teams enrich with steps based services\/tools. this means power roll updates step bitrise maintains overlaying control ensure service quality security. a verified step means owner service tool open source team guarantees secure, maintained, consistent, high-quality performance any bitrise user. our official steps maintained us, community community. it’s easy decide type falls gui. verified steps labeled with blue badge bitrise . official bitrise steps labeled with green badge. community created steps any badge. in guide explain how step verified bitrise. requirements for company owned services tools: your owner service tool used step apply verified badge. for open-source services tools: if member open source informal team, confirm with rest team sign applies steps submitting team. your step comply with service level agreement . your step icon. you include workflow recipe step become verified step. we strongly recommend consult with step development guidelines creating step. " });
this.add({id:346, 
title:"What is a Workflow Recipe?", 
body:" what workflow recipe? a workflow recipe template submitting step bitrise applying verified badge. you develop decide include recipe, turn one, submit well. workflow recipes published bitrise bitrise community learn how verified step used specific setup. should questions, turn partnership team partners@bitrise.io . " });
this.add({id:347, 
title:"Promoting your Verified Step", 
body:" promoting verified step as verified step program, commit taking than following co-marketing activities: in-app messaging. dedicated co-branded email campaign, newsletter mention. blog post content. how-to article, documentation, help center page. social media activities. webinars virtual events. podcasts. events (panels, fireside chats, video testimonials, sponsorship). case study\/whitepaper\/ebook\/ (shared research, testimonials, co-writing chapter, publishing others’ blogs). video content posted public youtube channel. joint pr campaigns. these co-marketing opportunities enable increase product’s content generation output, grow go-to-market plans, help drive integration adoption. you consult with bitrise partner manager ( partners@bitrise.io ) confirm co-marketing activities do, clarifying level involvement want based marketing plans. there interested single event so managed first-come, first-serve basis. " });
this.add({id:348, 
title:"Applying for a Verified badge", 
body:" applying verified badge create step based step development guideline . the step’s repository must github. share step bitrise-steplib new pull request checklist. when claassistant prompts you, sign contributor license agreement. until completed, merging blocked pr. please partnership form ! once submitted form, partner management team contact 5 business days discuss rest process. if any stage process wonder happens with step candidate covered steplib, head how step duplication ? " });
this.add({id:349, 
title:"Service level agreement for Verified Step authors", 
body:" service level agreement verified step authors anyone contribute verified step steplib creating issue pull request (pr). the author manage contribution (for example, issue, pr, any maintenance third-party changes) start finish. bitrise monitors open issues prs created steps contacts authors contributions handled. if fails described contributor license agreement sla, withdraws badge step. this ensure high quality meet users’ expectations. " });
this.add({id:350, 
title:"Managing contributions", 
body:" managing contributions the following guidelines aim help verified step authors categorize contributions. author responsible any contribution step. acknowledges adding label estimated time perform fix, merge pr. there labels use type contribution: critical-bug label means current feature set abnormal behavior, blocks users using step workaround fix issue. this critical bug fixed author. bug label means current feature set abnormal behavior, does block users using step workaround issue. this bug fixed author. feature-request label means new feature step requested. the verified author decide worth implementing. maintenance label means improving step’s source code way does add new features potential bugs step. the verified step author decide feature worth implementing not. rejected label means contribution gets rejected verified step author closed first response time, 5 business days. when rejecting contribution, provide explanation contributor time. accepted contribution means given: critical-bug, bug, feature, maintenance fixed\/merged given resolution time. first response time means 5 day window verified step author respond contribution with accepted rejected labels. resolution time means certain business days contribution (issue pr) completed verified step author. type first response time resolution time critical-bug 5 business days 10 business days bug 5 business days 15 business days feature-request 5 business days 20 business days maintenance 5 business days 20 business days " });
this.add({id:351, 
title:"How do we go about Step duplications?", 
body:" how step duplications? in general try steplib streamlined avoid step duplications build task. here questions answers comes any potential duplications. i was going submit step apply verified badge, official bitrise build task steplib. what do? submit step application process. once completed, deprecate official bitrise users use new verified step. i was going submit step apply verified badge, community build task. what do? submit step application process. your new verified community available steplib. i was going submit community step verified build task. what do? if verified step available steplib, reject community submission build task avoid duplication. we offer developer work future updates existing step. " });
this.add({id:352, 
title:"Creating your own Bitrise project scanner", 
body:" creating bitrise project scanner a bitrise project scanner scan result model. every platform writes possible options, configurations, warnings these translated step input values choosing desired given options. the project scanner tool identifies given project’s type generates basic bitrise configuration. each supported scanner: scanners stored separate packages. a project type scanner defines workflows : testing ( primary ) building ( deploy ). it includes minimal steps successfully run . build test steps build steps test specific requirements: a build  step build app so ready deployment output environment variable points file(s). for example, step ios .ipa file (not, say, .xcodearchive ) path .ipa file. a test step output test results so available viewing build page on bitrise.io. when adding new project website initializing machine, bitrise-init tool iterates scanner, calls scanner interface methods collects outputs. based outputs, basic configuration generated. the possible workflows described scan result model. model consists of: options configs warnings here basic structure model, yaml: options:\n detected_platform_1: optionmodel\n detected_platform_2: ...\n\nconfigs:\n detected_platform_1:\n config_name_1: configmodel\n config_name_2: ...\n detected_platform_2:\n ...\n\nwarnings:\n - \"warning message 1\"\n 2\"\n ... every platform scanner writes possible options, configurations warnings model. these translated step input values choosing desired given options. every option chain’s selects configuration. warnings display issues with given project setup. " });
this.add({id:353, 
title:"Options", 
body:" options options represents question possible answers question. for example: question: what path ios project files? possible answers: list possible paths check these questions answers translated step inputs. the scanner determine input value let user select type value. for example, xcode archive & export ios step input called export-method . this informs step type .ipa want export. the value determined based source code so scanner collects possible presents user form list choose from. selecting option start chain: lead different options presented afterwards. for example, select xcode scheme associated test targets, leads “questions”. similarly, selecting certain workflow generated " });
this.add({id:354, 
title:"The option model", 
body:" the option model the optionmodel represents input option. it looks like go: \/\/ optionmodel ...\ntype struct {\n title string\n envkey string\n\n childoptionmap map[string]*optionmodel\n config string\n} title : human readable input. envkey : represents input’s key step model. childoptionmap : map subsequent options user chooses given value option. for example, let’s see scenario choose value scheme input. you value_map options . the possible values are: schemewithtest schemewithouttest by choosing schemewithtest , option related simulator used perform test. by choosing schemewithouttest , option export method .ipa file. {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n ...\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n }\n }\n} every option chain first option: called head . the possible values options branch option chain. every option branch’s options config property set. config holds id generated bitrise configuration. an options chain’s options value_map . {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n \"-\": \"config\": \"bitrise_config_with_test\",\n }\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n \"development\": \"bitrise_config_without_test\",\n \"app-store\": \"ad-hoc\": }\n}\n " });
this.add({id:355, 
title:"Scanners", 
body:" scanners scanners generate possible options chains possible workflows options project type. the activescanner variable holds scanner implementation. every specific implements scannerinterface . \/\/ scannerinterface ...\ntype interface {\n name() string\n detectplatform(string) (bool, error)\n\n options() (models.optionmodel, models.warnings, error)\n configs() (models.bitriseconfigmap, defaultoptions() models.optionmodel\n defaultconfigs() excludedscannernames() []string\n} name() string : this method used logging storing scanner output (warnings, options configs). the stored map[scanner_name]output . for example, options ios project stored optionsmap[ios]options . detectplatform(string) (bool, error) : this method used determine given search directory contains project type not. options() (models.optionmodel, models.warnings, error) : this method used generate option branches project. each branch define complete valid set build final bitrise config model. every branch’s options store configuration id, filled with selected options. configs() (models.bitriseconfigmap, error) : this method used generate possible configs. bitriseconfigmap’s element bitrise config template fulfilled with user selected option values. defaultoptions() models.optionmodel defaultconfigs() (models.bitriseconfigmap, error) : these methods used generate options configs scanning given project. in case required step input value provided user. this way scanner fails, user option started. " });
this.add({id:356, 
title:"Testing a scanner", 
body:" testing scanner to test scanner, require unit tests integration tests. unit tests written using go’s standard testing library. for integration tests, validating project type scanners generating desired bitrise configurations instance type. to this, use new scanner scan given sample modify generated result fit tests. the reason modification scanners adding steps generated config, step versions updated time time. version definitions steps\/const.go . so bitrise-init --ci config sample project’s root directory, generated scan_result.yml file replace step versions with %s use fmt.sprintf inject latest defined step versions config. in integration tests, matching scan_result.yml file generated scanner with previously reference scan_result content. " });
this.add({id:357, 
title:"Submitting your own scanner", 
body:" submitting scanner you submit scanner bitrise: review integrate bitrise-init tool it’s approved! the development path new scanner starts with sample project ends updating existing steps type. let’s it! find create open source sample app demonstrates typical instance project type. it include: readme file (including tool versions required updating, building testing project). bitrise.yml file generated scanner. build test sample app with existing steps custom scripts. create missing steps new project type needs. the pr steps link scanner created scanner. create scanner project type. run required unit tests integration tests. open scanner pull request bitrise-init project. it should: link new project type’s sample app. link new project type’s guides testing building. include icon new project type - create you. recommend default stack listing required tools building testing new project type. update existing steps with new project type necessary. the pr steps link scanner pr. " });
this.add({id:358, 
title:"Workflows", 
body:" workflows a bitrise workflow collection steps. when build app running, step executed order defined workflow. a bitrise workflow collection steps. when build app running, step executed order defined workflow. workflows created, modified ways: using graphical workflow editor bitrise.io , offline version device . directly editing bitrise.yml file project. ultimately, methods modify bitrise.yml file - workflow editor simply friendlier way doing so! by default, single build single workflow. but chain workflows so run succession, trigger multiple workflow simultaneously. workflows arranged pipelines . a pipeline consists multiple stages stage workflows run parallel. " });
this.add({id:359, 
title:"Default Workflows", 
body:" default workflows when add new app bitrise.io , workflows created automatically, depending app. when add new app bitrise.io , workflows created automatically, depending app . you use workflows basis bitrise configuration. " });
this.add({id:360, 
title:"The primary Workflow", 
body:" the primary workflow the primary workflow automatically created adding new app. once process app over, bitrise triggers app’s first build automatically: runs with primary workflow. the primary workflow app create: contains different steps depending project type. for example, android project’s primary workflow include install missing android sdk components , android lint android unit test steps. but overall, primary basic workflow performs following actions: activates ssh key, added app. the step saves file loads user’s ssh-agent with ssh-add command. the step, default, does run ssh key added. clones git repository project with git clone repository step. runs bitrise.io cache:pull bitrise.io cache:push steps. deploys build artifacts with deploy bitrise.io step. " });
this.add({id:361, 
title:"The deploy Workflow", 
body:" the deploy workflow the deploy workflow automatically created adding new app tests configured app. it similar primary number ways: it basic steps. its specific steps dependent project type. the deploy workflow, however, contains steps build project, and, successful, produces necessary artifacts installing app deploying online. for example, android project’s deploy workflow contains android build step builds project with gradle, android sign step creates signed apk deployed google play installed test devices. " });
this.add({id:362, 
title:"Creating a Workflow", 
body:" creating workflow you create new bitrise workflows based any existing ones, simply workflow add steps yourself. it’s simple create workflow with workflow editor. you create new workflows based any existing ones, simply add steps yourself. if, example, create workflow based primary one, means created with exact steps input values primary workflow. open app bitrise . click workflows button main page. on workflows & pipelines page, click create workflow button. in pop-up window, workflow name. the long wish longer titles broken multiple lines so read title conveniently. from dropdown menu labeled based on , select workflow want use basis new one. alternatively, choose empty workflow option create workflow. add steps need workflow. click + symbol steps insert step position. remove need clicking little trash bin symbol. click save right corner. " });
this.add({id:363, 
title:"Managing Workflows", 
body:" managing workflows you chain multiple workflows, rearrange order workflows chain, rename any time bitrise workflow editor. you chain multiple workflows , rearrange order workflows chain, rename any time bitrise workflow editor. offline workflow editor the workflow editor available online offline: you use online bitrise.io. you use offline workflow editor . " });
this.add({id:364, 
title:"The Workflows & Pipelines screen", 
body:" the workflows & pipelines screen the workflows & pipelines page provides overview workflows pipelines fundamental structural elements bitrise configuration. to workflows & pipelines page, open app bitrise click workflows button. on page, can: view list workflows pipelines. for automatically generated default workflows , see brief summary function. you filter any workflow pipeline name. start schedule build. you so clicking start\/schedule build button workflow pipeline want build click run build button name. in case latter, start build dialogue window selected workflow pipeline set. for information starting builds, see: starting builds . enter workflow editor create new workflow: click create workflow button. for information creating workflows, see creating a workflow . enter workflow editor edit selected clicking edit workflow name. for pipeline, button takes bitrise.yml tab workflow editor edit app's bitrise.yml configuration file. you choose bitrise.yml tab directly: click edit bitrise.yml button. read bitrise.yml file: basics of bitrise.yml . if need additional resources, click help button page read guides getting started with bitrise. " });
this.add({id:365, 
title:"Chaining Workflows together", 
body:" chaining workflows you set multiple workflows run succession. the order rearranged, new added chain existing removed any time. bitrise start build step be aware chain workflows described guide, run virtual machine. however, use bitrise start build step, triggered workflows run separate virtual machine: starting parallel builds with a single trigger . open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click ellipsis (...) button right workflow. from dropdown menu, select insert workflow chain workflow currently selected select insert workflow chain workflow currently selected one. click save right corner. chaining workflows yaml in example, we're chaining workflows: test , deploy , ci , using before_run after_run parameters. workflows:\n test:\n envs:\n - is_test: \"true\"\n steps:\n # test steps run\n\n deploy:\n before_run:\n test\n steps deploy\n\n ci:\n after_run:\n for information how manage workflows directly bitrise.yml file, check workflow reference . " });
this.add({id:366, 
title:"Rearranging chained Workflows", 
body:" rearranging chained workflows once chain, easily rearrange order workflows drag-and-drop menu. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click ellipsis (...) button right workflow. from dropdown menu, select change workflow execution order bring drag-and-drop menu rearrange workflows chain. click save right corner. " });
this.add({id:367, 
title:"Renaming Workflows", 
body:" renaming workflows rename workflows any time feel necessary: it’s quick simple. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click rename workflow. type new click check mark save name. click save right corner. " });
this.add({id:368, 
title:"Utility Workflows", 
body:" utility workflows bitrise supports special type workflow called utility workflow. a workflow's id starts with underscore character: example, _setup . they usually used perform tasks required start end different workflows: example, separate git cloning activating ssh key utility workflow instead adding steps app. you create utility workflow exact way create regular one. to denote utility workflow, just need prefix with underscore. utility workflows run alone utility workflows run standalone workflows. they need chained with normal workflow, workflow: chaining workflows together . utility workflow yaml in example, utility workflows, called _setup _send-notifications . they chained with workflows called test ci using before_run after_run parameters. workflows:\n _send-notifications:\n steps:\n # send notifications\n\n _setup:\n setup steps run\n\n test:\n before_run:\n - _setup\n envs:\n is_test: \"true\"\n test ci:\n test\n after_run:\n _send-notifications for information how manage workflows directly bitrise.yml file, check workflow reference . " });
this.add({id:369, 
title:"Copying Workflows from one app to another", 
body:" copying workflows app you copy existing bitrise workflow any bitrise.yml file, including local files. if lot apps , want spend time with setting workflows separately, especially there’s little difference workflows want run them. if so, easiest thing simply copy existing workflow. yaml mode copying workflow app possible yaml mode. you create new workflow based existing app. you copy workflow any bitrise.yml file, including local files. to copy existing workflow bitrise app website: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. select workflow want copy it. open app want copy to. go workflow tab bitrise.yml tab. paste workflow workflows property. " });
this.add({id:285, 
title:"Steps", 
body:" steps a step block script execution encapsulates build task bitrise: code perform task, inputs parameters define outputs generates. steps heart bitrise. a step build task: example, git clone step clones git repository start build google play deploy step deploy finished app play store. a step contains code performs build task. you configure inputs parameters define task, view reuse outputs generates. reusing output means use value inputs. our steps defined yaml format, written bash go. you list steps in: the integrations page . the bitrise steplib . the workflow editor. you create run any custom script want bitrise build using script step. all need specify script runner (the default bash), add script, run build. for information how set custom scripts, check bitrise script step - running (bash, python, nodejs, ruby, swift, kotlin) . for purposes builds, steps managed directly workflow editor. you rearrange them, set versions, add remove any time. " });
this.add({id:286, 
title:"Types of Steps", 
body:" types steps bitrise 300 steps its  step library (steplib) third-party companies open-source teams enrich with steps based services\/tools. there different types steps bitrise. you identify based labels gui: official bitrise steps : these steps created maintained bitrise. labeled green badge \"b\". verified steps : these steps created maintained community, owned service tool open-source team guarantees secure, maintained, consistent, high-quality performance any bitrise user. labeled blue badge check mark. for information verified steps, guide . community steps : these steps created community. labeled don't badge. if like learn how develop share with bitrise community, check developing a new step . " });
this.add({id:286, 
title:"Types of Steps", 
body:" types steps bitrise 300 steps its  step library (steplib) third-party companies open-source teams enrich with steps based services\/tools. there different types steps bitrise. you identify based labels gui: official bitrise steps : these steps created maintained bitrise. labeled green badge \"b\". verified steps : these steps created maintained community, owned service tool open-source team guarantees secure, maintained, consistent, high-quality performance any bitrise user. labeled blue badge check mark. for information verified steps, guide . community steps : these steps created community. labeled don't badge. if like learn how develop share with bitrise community, check developing a new step . " });
this.add({id:287, 
title:"Adding Steps to a Workflow", 
body:" adding steps workflow steps added removed any time workflows. you add step workflow - absolutely restrictions. it’s possible specific to, example, ios apps android app. steps added removed any time workflows. when adding new app bitrise, project scanner generates workflow with default don't use all: it's want include. you add any step workflow - absolutely restrictions. please note means it’s possible specific to, example, ios apps android app. always make sure relevant steps workflow! " });
this.add({id:288, 
title:"Adding Steps in the Workflow Editor", 
body:" adding steps workflow editor open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click + symbol steps insert step position. search step need. search filter be aware filter right search field. by default, set platform type app. for example, want add step ios app, filtered steps. click all search steps. click step add workflow. " });
this.add({id:289, 
title:"Adding Steps from alternative sources", 
body:" adding steps alternative sources generally, recommend using steps official bitrise step library. but add sources, want to: use git url local path. on bitrise website, git:: special source easiest way use step bitrise library. let’s see how. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. add git url step want use. in example, we’re adding script step git source: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: click save . " });
this.add({id:290, 
title:"Removing a Step from a Workflow", 
body:" removing step workflow you remove step any time. be aware, however, add later date, inputs set default value - custom configuration gone. disabling step if don't want step run configuration intact, disable step: enabling or disabling a step conditionally . open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click step want remove. click trash bin icon right. click save . " });
this.add({id:288, 
title:"Adding Steps in the Workflow Editor", 
body:" adding steps workflow editor open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click + symbol steps insert step position. search step need. search filter be aware filter right search field. by default, set platform type app. for example, want add step ios app, filtered steps. click all search steps. click step add workflow. " });
this.add({id:289, 
title:"Adding Steps from alternative sources", 
body:" adding steps alternative sources generally, recommend using steps official bitrise step library. but add sources, want to: use git url local path. on bitrise website, git:: special source easiest way use step bitrise library. let’s see how. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. add git url step want use. in example, we’re adding script step git source: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: click save . " });
this.add({id:290, 
title:"Removing a Step from a Workflow", 
body:" removing step workflow you remove step any time. be aware, however, add later date, inputs set default value - custom configuration gone. disabling step if don't want step run configuration intact, disable step: enabling or disabling a step conditionally . open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click step want remove. click trash bin icon right. click save . " });
this.add({id:291, 
title:"Step versioning", 
body:" step versioning bitrise step versions follow semantic versioning: version number looks like major.minor.patch. for example, 3.2.1 first patch second minor major version. bitrise step versions follow semantic versioning: version number looks like major.minor.patch. for example, 3.2.1 first patch second minor major version. you use any existing version step workflows, different versions workflows. we regularly update steps make sure fully equipped users’ needs. however, don’t use latest version want to: old stable compatible with build, feel free continue using that, roll any time. " });
this.add({id:292, 
title:"Locking a Step to a major or minor version", 
body:" locking step major minor version on graphical ui workflow editor, choose locking step major version minor any workflows. this determines use. locking step version means workflow automatically updated use latest release step’s selected type, major minor, won’t different minor released. if step locked major version, automatically updated new minor version patch released. released, won’t updated. if step locked minor version, automatically updated new patch version released. major released, won’t updated. version locking the example step’s current version workflow 2.3.3. a new minor comes out: 2.4.0. if step locked major version 2.x.x, updated 2.4.0. if step locked minor version 2.3.x, not updated 2.4.0. now let’s say example step gets new major version: 3.0.0! in case, step automatically updated way. if want use new version, need lock major version 3.x.x minor 3.0.x. this way sure update break builds. to lock step major minor version: open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. select step. next current version, open dropdown menu. select major minor version need: example, 3.x.x sets version. " });
this.add({id:293, 
title:"Using a specific Step version", 
body:" using specific step version you option using specific, static step version. for example, version 3.2.2. this means matter new versions released step, updated workflow. yaml mode only! please note set specific step version graphical ui: lock major minor version. setting possible yaml mode. to set specific step version, need add version reference app’s bitrise.yml file: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go bitrise.yml tab. find workflow step need. set step version reference. in example, we're setting activate ssh key step primary workflow version 4.0.3: workflows:\n primary:\n steps:\n - activate-ssh-key@4.0.3: " });
this.add({id:294, 
title:"Using the latest available version of the Step", 
body:" using latest available version step locking latest release step means new version released, user’s workflow updated use that. this includes automatic update major version, potentially breaking build. so careful! to make sure workflow use latest available version given step, remove any information step reference bitrise.yml file app: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. find workflow step need. make sure step version information: in example, we're setting activate ssh key step primary workflow latest version: workflows:\n primary:\n steps:\n - activate-ssh-key: " });
this.add({id:292, 
title:"Locking a Step to a major or minor version", 
body:" locking step major minor version on graphical ui workflow editor, choose locking step major version minor any workflows. this determines use. locking step version means workflow automatically updated use latest release step’s selected type, major minor, won’t different minor released. if step locked major version, automatically updated new minor version patch released. released, won’t updated. if step locked minor version, automatically updated new patch version released. major released, won’t updated. version locking the example step’s current version workflow 2.3.3. a new minor comes out: 2.4.0. if step locked major version 2.x.x, updated 2.4.0. if step locked minor version 2.3.x, not updated 2.4.0. now let’s say example step gets new major version: 3.0.0! in case, step automatically updated way. if want use new version, need lock major version 3.x.x minor 3.0.x. this way sure update break builds. to lock step major minor version: open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. select step. next current version, open dropdown menu. select major minor version need: example, 3.x.x sets version. " });
this.add({id:293, 
title:"Using a specific Step version", 
body:" using specific step version you option using specific, static step version. for example, version 3.2.2. this means matter new versions released step, updated workflow. yaml mode only! please note set specific step version graphical ui: lock major minor version. setting possible yaml mode. to set specific step version, need add version reference app’s bitrise.yml file: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go bitrise.yml tab. find workflow step need. set step version reference. in example, we're setting activate ssh key step primary workflow version 4.0.3: workflows:\n primary:\n steps:\n - activate-ssh-key@4.0.3: " });
this.add({id:294, 
title:"Using the latest available version of the Step", 
body:" using latest available version step locking latest release step means new version released, user’s workflow updated use that. this includes automatic update major version, potentially breaking build. so careful! to make sure workflow use latest available version given step, remove any information step reference bitrise.yml file app: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. find workflow step need. make sure step version information: in example, we're setting activate ssh key step primary workflow latest version: workflows:\n primary:\n steps:\n - activate-ssh-key: " });
this.add({id:295, 
title:"Step inputs", 
body:" step inputs step inputs way configure steps build. required valid value optional provide options customize step inputs way configure steps build. required valid value optional provide options customize click step bring input variables right currently selected workflow . required inputs marked workflow editor. if required valid values, step fail. modify step input either: clicking input field. clicking change option input field. you use environment variables (env vars) step inputs. " });
this.add({id:296, 
title:"Skipping Steps", 
body:" skipping steps you configure steps bitrise builds so don't run previous step workflow failed. this help with avoiding wasting build time credits. you skip certain steps bitrise build. there point running, example, unit test step previous failed build app. of course, examples it’s better run step previous failed. for example, cache:pull step fails, reason run - fact, installs dependencies it’s bad idea skip pulling cache unsuccessful. enabling step conditionally you configure steps run certain conditions: enabling or disabling a step conditionally . to set given step skipped previous failed: open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. select step want skip. on right, use toggle disable run previous step failed option. " });
this.add({id:297, 
title:"Enabling or disabling a Step conditionally", 
body:" enabling disabling step conditionally you enable disable step any given workflow, set conditions steps. so, computer, with bitrise cli using bitrise.yml tab workflow editor. you enable disable step any given workflow , set conditions steps. you computer, with bitrise cli using bitrise.yml tab workflow editor. we mostly use run_if expressions things. check examples possible template expressions: examples of run_if expressions . you view examples github: template expression examples . a run_if any valid go template a run_if any valid go template , long evaluates true false (or any string representation, example true , t , yes y considered true ). if template evaluates true , step run, won’t. an example run_if check custom environment variable : run_if: |-\n \t{{enveq \"custom_env_var_key\" \"test value test against\"}}\n this run_if skip step value custom_env_var_key test value . " });
this.add({id:298, 
title:"Disabling a Step", 
body:" disabling step if want remove step workflow don’t run, disable it, using run_if expression. experimenting with workflows to experiment with different configurations workflow, removing disabling steps, recommend cloning workflow. you modify cloned workflow wish changing original. workflow editor bitrise.yml open workflow need. find step want disable. in additional run conditions input, type false . conditionals any condition evaluates false works, too. open app’s bitrise.yml file. find step want disable. add run_if: false it. conditionals any condition evaluates false works, too. - script:\n run_if: false\n inputs:\n content: |-\n #!\/bin\/bash\n echo \"this run, run_if:false\" " });
this.add({id:299, 
title:"Running a Step only in a CI environment", 
body:" running step ci environment running step ci environment means build skip particular local builds. like disabling steps, with run_if expression. use debug builds locally. enabling ci mode locally ci mode enabled mac\/pc setting ci environment true (for example, run export ci=true bash terminal), running bitrise run with --ci flag: bitrise --ci run ... . workflow editor bitrise.yml open workflow need. find step need. in additional run conditions input, type .isci . open app’s bitrise.yml file. find step need. add run_if: .isci properties: - script:\n run_if: .isci\n inputs:\n content: |-\n #!\/bin\/bash\n echo \"this run ci environment isci\" " });
this.add({id:300, 
title:"Running a Step only if the build failed", 
body:" running step build failed it possible run step only build failed got particular step. in addition run_if , need use is_always_run property well. workflow editor bitrise.yml open workflow need. find step want disable. in additional run conditions input, type .isbuildfailed . make sure run previous step(s) failed option toggled on. open app’s bitrise.yml file. find step want disable. add run_if: .isbuildfailed it. add is_always_run: true it. this enables step run previous failed. - script:\n is_always_run: true\n run_if: .isbuildfailed\n inputs:\n content: |-\n #!\/bin\/bash\n echo \"build failed!\" " });
this.add({id:301, 
title:"Ignoring a failed Step without failing the build", 
body:" ignoring failed step failing build usually, step fails build, built itself fails, too. this isn't case with step, course: bitrise.io cache:pull bitrise.io cache:push steps fail failing build. you configure any step ensure failure doesn't yaml mode you can't graphical ui workflow editor: edit app's bitrise.yml file. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. find step need. add is_skippable flag set true : - script: \n is_skippable: true inputs: content: |- # !\/bin\/bash echo \"failing step.\" exit 1 mark step failed, won't break build flag \/ property " });
this.add({id:302, 
title:"Setting up run_if conditions with Script Steps", 
body:" setting run_if conditions with script steps sometimes conditions required determine step run complex multi-layered. if so, using chain go templates run_if expression overwhelming, especially prefer languages instead go. in cases, recommend using workaround: add script step workflow, write script evaluates certain value. store value environment variable, with conditional expression needs check using non-go script run_if expression in example, we'll create simple bash script store value, check matches preset value. first, add script step, script content, define value. once value defined, use envman store environment variable. in particular case, define variable bash, use value env var: workflows: \n example: steps: - script@1:\n title: do with script step inputs: content: |- #!\/usr\/bin\/env bash\n # fail any commands fails set -e\n debug log\n -x\n creating variable storing env var my_variable='this value need!' envman add --key our_condition --value \"$my_variable\"\n we create simple run_if expression step need condition. in case, save cache step, we'll check value our_condition variable matches value stored previous bash variable: - save-cache@1: \n run_if: |- {{getenv \"our_condition\" | eq \"this value need!\"}} since values match, save cache step run. " });
this.add({id:303, 
title:"Examples of run_if expressions", 
body:" examples run_if expressions there different ways using run_if expression. the following workflow contains examples them, with commented explanations. expressions used script steps that, successfully running, print used expression was true. all expressions valid go templates. to learn templates, check documentation: go template docs . pipeline support the envcontain property supported pipelines . for standalone workflows, use check environment variable contains given string available pipelines yet. workflows:\n primary:\n steps:\n #\n # check environment variable's value equal given string\n - script:\n title: run-if expression\n run_if: |-\n {{getenv \"test_key\" | eq \"test value\"}}\n inputs:\n content: #!\/bin\/bash\n echo \"runif expression was true\"\n use enveq function check env var's '{{enveq value\"}}'\n envcontain var contains '{{envcontain not empty\n '{{getenv ne \"\"}}'\n vars value\n \"test_key_1\" (getenv \"test_key_2\")}}'\n available data properties\n like isci (checks build runs ci environment) isbuildfailed failed) directly\n {{.isci}}\n you don't wrap {{...}} it's simple\n oneliner\n $.isci\n remove $ sign, optional this\n .isci\n if-else condition, example step run environment\n {{if .isci}}\n true\n {{else}}\n false\n {{end}}\n use multiple conditions\n not failed\n {{.isci (not .isbuildfailed)}}\n pull request not\n only request\n .ispr\n pull request\n \"pull request id: ${pull_request_id}\" " });
this.add({id:298, 
title:"Disabling a Step", 
body:" disabling step if want remove step workflow don’t run, disable it, using run_if expression. experimenting with workflows to experiment with different configurations workflow, removing disabling steps, recommend cloning workflow. you modify cloned workflow wish changing original. workflow editor bitrise.yml open workflow need. find step want disable. in additional run conditions input, type false . conditionals any condition evaluates false works, too. open app’s bitrise.yml file. find step want disable. add run_if: false it. conditionals any condition evaluates false works, too. - script:\n run_if: false\n inputs:\n content: |-\n #!\/bin\/bash\n echo \"this run, run_if:false\" " });
this.add({id:299, 
title:"Running a Step only in a CI environment", 
body:" running step ci environment running step ci environment means build skip particular local builds. like disabling steps, with run_if expression. use debug builds locally. enabling ci mode locally ci mode enabled mac\/pc setting ci environment true (for example, run export ci=true bash terminal), running bitrise run with --ci flag: bitrise --ci run ... . workflow editor bitrise.yml open workflow need. find step need. in additional run conditions input, type .isci . open app’s bitrise.yml file. find step need. add run_if: .isci properties: - script:\n run_if: .isci\n inputs:\n content: |-\n #!\/bin\/bash\n echo \"this run ci environment isci\" " });
this.add({id:300, 
title:"Running a Step only if the build failed", 
body:" running step build failed it possible run step only build failed got particular step. in addition run_if , need use is_always_run property well. workflow editor bitrise.yml open workflow need. find step want disable. in additional run conditions input, type .isbuildfailed . make sure run previous step(s) failed option toggled on. open app’s bitrise.yml file. find step want disable. add run_if: .isbuildfailed it. add is_always_run: true it. this enables step run previous failed. - script:\n is_always_run: true\n run_if: .isbuildfailed\n inputs:\n content: |-\n #!\/bin\/bash\n echo \"build failed!\" " });
this.add({id:301, 
title:"Ignoring a failed Step without failing the build", 
body:" ignoring failed step failing build usually, step fails build, built itself fails, too. this isn't case with step, course: bitrise.io cache:pull bitrise.io cache:push steps fail failing build. you configure any step ensure failure doesn't yaml mode you can't graphical ui workflow editor: edit app's bitrise.yml file. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. find step need. add is_skippable flag set true : - script: \n is_skippable: true inputs: content: |- # !\/bin\/bash echo \"failing step.\" exit 1 mark step failed, won't break build flag \/ property " });
this.add({id:302, 
title:"Setting up run_if conditions with Script Steps", 
body:" setting run_if conditions with script steps sometimes conditions required determine step run complex multi-layered. if so, using chain go templates run_if expression overwhelming, especially prefer languages instead go. in cases, recommend using workaround: add script step workflow, write script evaluates certain value. store value environment variable, with conditional expression needs check using non-go script run_if expression in example, we'll create simple bash script store value, check matches preset value. first, add script step, script content, define value. once value defined, use envman store environment variable. in particular case, define variable bash, use value env var: workflows: \n example: steps: - script@1:\n title: do with script step inputs: content: |- #!\/usr\/bin\/env bash\n # fail any commands fails set -e\n debug log\n -x\n creating variable storing env var my_variable='this value need!' envman add --key our_condition --value \"$my_variable\"\n we create simple run_if expression step need condition. in case, save cache step, we'll check value our_condition variable matches value stored previous bash variable: - save-cache@1: \n run_if: |- {{getenv \"our_condition\" | eq \"this value need!\"}} since values match, save cache step run. " });
this.add({id:303, 
title:"Examples of run_if expressions", 
body:" examples run_if expressions there different ways using run_if expression. the following workflow contains examples them, with commented explanations. expressions used script steps that, successfully running, print used expression was true. all expressions valid go templates. to learn templates, check documentation: go template docs . pipeline support the envcontain property supported pipelines . for standalone workflows, use check environment variable contains given string available pipelines yet. workflows:\n primary:\n steps:\n #\n # check environment variable's value equal given string\n - script:\n title: run-if expression\n run_if: |-\n {{getenv \"test_key\" | eq \"test value\"}}\n inputs:\n content: #!\/bin\/bash\n echo \"runif expression was true\"\n use enveq function check env var's '{{enveq value\"}}'\n envcontain var contains '{{envcontain not empty\n '{{getenv ne \"\"}}'\n vars value\n \"test_key_1\" (getenv \"test_key_2\")}}'\n available data properties\n like isci (checks build runs ci environment) isbuildfailed failed) directly\n {{.isci}}\n you don't wrap {{...}} it's simple\n oneliner\n $.isci\n remove $ sign, optional this\n .isci\n if-else condition, example step run environment\n {{if .isci}}\n true\n {{else}}\n false\n {{end}}\n use multiple conditions\n not failed\n {{.isci (not .isbuildfailed)}}\n pull request not\n only request\n .ispr\n pull request\n \"pull request id: ${pull_request_id}\" " });
this.add({id:304, 
title:"Setting a time limit for Steps", 
body:" setting time limit steps a step timeout, defined seconds, sets maximum time allowed run. if exceeds limit, workflow moves step. ensure builds exceed time limit setting step timeout steps cause builds hang. a step timeout, defined seconds, sets maximum time allowed run. if exceeds limit, workflow moves step. this useful if, example, builds hang immediately obvious reasons - set timeouts steps suspected caused problem. find step bitrise.yml file. you edit file locally, bitrise.yml tab workflow editor. add timeout property step inputs specify value seconds: - xcode-test@1.18.14:\n timeout: 120\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: \"$bitrise_scheme\" " });
this.add({id:305, 
title:"Developing your own Bitrise Step", 
body:" developing bitrise step you develop bitrise steps project scanner, submit so users use them, too. contributing bitrise easy: develop open source integration, submit you’re done! in section, we’ll focusing technical contributions: creating new step creating project scanner . " });
this.add({id:306, 
title:"Creating your own Step", 
body:" creating step bitrise offers 200 steps users. we maintain users’ community does outstanding job contributing step library (steplib). anyone submit - approved, become official steplib available users! check how create share with world:  creating step . " });
this.add({id:307, 
title:"Creating your own scanner", 
body:" creating scanner our project scanner automatically detects type add new app bitrise. in context, means platform framework used create app, example, android, ios, react native flutter. based results, configuration, with default workflow contains frequently steps detected type. our scanner detect app, couple reasons: missing repository (such config.xml file case ionic example), simply don’t type yet. if it’s latter, can  configure app manually , create scanner, with project configuration:  creating bitrise project scanner. " });
this.add({id:308, 
title:"Developing a new Step", 
body:" developing new step to develop bitrise step integrated library, need write code, create description, submit review. duplicate steps before deciding develop new step, make sure there’s existing step performs function. you search steps integrations page step library github. a step build task: example, git clone step clones git repository start build google play deploy step deploy finished app play store. a step contains code performs build task. you configure inputs parameters define task, view reuse outputs generates. reusing output means use value inputs. our steps written go bash. steps contained git repositories: includes code step.yml file defines configuration step. if wish make step available users, step.yml file needs included bitrise-steplib repository so users step website, workflow editor . sharing steps sharing custom steps optional: step with use case specific single user help others. as run machine any git repository, bitrise library. for info sharing steps with users, check sharing steps guide. for detailed information how steps work, see following guides: steps yaml step inputs step outputs step properties " });
this.add({id:309, 
title:"Before you start developing a new Step", 
body:" before start developing new step before creating new step, need install bitrise cli, set up, make sure step plugin updated latest version. install bitrise cli . run bitrise setup. update step plugin latest version with following command: bitrise plugin update step " });
this.add({id:310, 
title:"Creating the Step", 
body:" creating step we use step plugin bitrise cli create new step. with this, we’ll basic structure certain properties inputs generated assigned automatically. you change later so don’t worry yet. the step plugin run bitrise :step command line interface check commands. creating basic structure step simple. we’ll concepts involved process later; now, just create step. at end process, step.yml file, readme.md file main.go step.sh file repository. before start during step creation process, prompted set number options. note change any submitting bitrise review: data included generated step.yml file edit leisure later. during initial step creation process, use placeholders want to. open command line interface, terminal app macos. create new directory step haven’t so enter directory: create step with bitrise plugin: bitrise :step create . when prompted, set step’s author. hit enter leave default value. when prompted, set step’s name. the plugin automatically generates step id based name. provide summary: than couple sentences step does. provide description step. this contain configuration information troubleshooting step. select primary category step. to so, type number preferred option hit enter. this changed later. choose toolkit want use: choose go bash. set source code hosting data step: to so, first decide want host github any site enter appropriate option: if chose github, asked provide username account repository. if chose store github, provide valid url repository. you done! if went well, plugin initialized git repository current directory added step.yml , readme.md file, main.go main.sh file. now we’ll how step.yml file works how set up. " });
this.add({id:311, 
title:"The step.yml file", 
body:" the step.yml file the step.yml file step interface definition, containing dependencies, inputs outputs properties. it points location step’s source code. every one. if use step plugin create new step, required properties value assigned - change any time. so don’t worry title set initial process does conform guidelines below. we’ll look important configuration options step.yml file, including naming describing step, setting step inputs outputs. " });
this.add({id:312, 
title:"Naming and describing a Step", 
body:" naming describing step every step title summary defined step.yml file. these appear integrations page workflow editor . the description property optional strongly recommend providing so users better understand how step works. description summary both description summary accept markdown formatting values. " });
this.add({id:313, 
title:"The title", 
body:" the title the title property the title property required! the title property sets step, appear bitrise.io . it short descriptive. include service function fulfils, git clone . here’s guidelines step titles: do use word ‘step’. use imperative verbs instead nouns possible. for example, script runner , run script . do include platform. make sure use correct service tool. for example, github instead github. do include implementation details. " });
this.add({id:314, 
title:"The summary", 
body:" the summary the summary property the summary property required! a single line significant information step. it can’t longer than 100 characters. the summary visible default workflow editor. if user expands summary, step’s description presented - one, course. " });
this.add({id:315, 
title:"The description", 
body:" the description a detailed explanation step. it include: what step does. the services tools used step. configuration information, including important inputs. troubleshooting information: potential issues solutions. by default, step’s description collapsed workflow editor summary presented. " });
this.add({id:316, 
title:"Step categories", 
body:" step categories there thing we’d like know step: type step it? as see integrations page workflow editor, steps sorted different categories based factors: platforms available functionality. " });
this.add({id:317, 
title:"Platforms", 
body:" platforms the available platform types controlled project_type_tags attribute. if step available platform project type, specify project_type_tags . in any case, select platform types step available. the available values are: ios macos android react-native cordova ionic flutter " });
this.add({id:318, 
title:"Category", 
body:" category functional categories controlled type_tags attribute step.yml . one step single type tag assigned it. use utility believe none types fit step. the available values are: build code-sign test deploy notification access-control artifact-info installer dependency utility " });
this.add({id:319, 
title:"Step inputs", 
body:" step inputs step inputs bitrise environment variables : consist key value pair users step set control behavior. for example, git clone step input with key branch: title: git clone repository\nsummary: repository specified path vm\ninputs:\n- branch: master the value input - master example used determine branch repository cloned. step inputs visible workflow editor: presented order appear step.yml . as such, required frequently used inputs top. " });
this.add({id:320, 
title:"Step input keys and values", 
body:" step input keys values use lower case snake case style input keys. for example, project_path . using opts input key the input key opts , used input’s options. there need add domain-specific prefixes input keys, inputs exposed step run process. this means project_path input overlap with subsequent steps’ project_path inputs. step input values strings: bitrise cli exposes inputs environment variables steps. provide default values step inputs possible (and makes sense). that configuration easier bitrise users. environment variables used default values, unless: they exposed bitrise cli bitrise.io . they generated output step (for example, $bitrise_ipa_path , $bitrise_aab_path ). this workflow editor highlights required inputs values express step work setting valid value given input. if set env var, does automatically assigned value, default input, think input question (even var yet). also, reason suggest certain environment variable way: users value assigned env var with different name. let’s talk how step inputs passed code presented. " });
this.add({id:321, 
title:"Configuring Step inputs", 
body:" configuring step inputs step inputs defined configured step.yml file. in addition key value, step inputs required opts property. this property contains different options define how inputs passed code step presented workflow editor. the possible values input set opts well. let’s see example. - install_defaults: \"yes\"\n opts:\n title: installs default codesign files\n value_options:\n \"no\"\n \"yes\" the input key install_defaults, default value yes. the value_options option defines possible values: case, yes and no. its opts property contains information how input presented: case, it’s just title option, required. the displayed workflow editor instead key input. the value_options input the value_options input contain string. this means quotation marks, indicated example, validation fail. " });
this.add({id:322, 
title:"Naming and describing Step inputs", 
body:" naming describing step inputs a step input name, summary, description, just like itself. to define these: include opts property with step input. under opts, provide title, summary, description option. let’s look how like! description summary both description summary accept markdown formatting values. title : it short descriptive sentence half sentence: the xcode project’s path. cli flag api parameter used internally. this makes step configuration easier, preexisting knowledge required underlying tool service interfaces. it’s easier change step’s implementation maintaining backwards compatibility. summary : it short version description, provides quick overview input. on bitrise workflow editor, summary inputs presented default click step. description : it user facing description step input: provide deeper, detailed explanation input. by default, visible workflow editor, unless clicks input question. here example: - install_defaults: \"yes\"\n opts:\n description: installs default (bitrise) wildcard provisioning profile and\n certificate files testing.\n summary: code signing files.\n title: now, let’s talk configuration options steps. " });
this.add({id:323, 
title:"Required inputs", 
body:" required inputs required inputs valid value, step fail. to mark step input required, use is_required option opts property. it values: true false . if set true , input displayed required workflow editor. - keychain_password: $bitrise_keychain_password\n opts:\n title: \"keychain's password\"\n is_required: true " });
this.add({id:324, 
title:"Sensitive inputs", 
body:" sensitive inputs you mark step inputs sensitive make sure values exposed. sensitive accept secrets values. this ensures visible build logs. to mark step input sensitive, use is_sensitive option opts property. it values: true false . if set true , input displayed sensitive workflow editor. the is_expand option if mark input sensitive, is_expand option input true, default setting. inputs:\n - certificate_urls: $bitrise_certificate_url\n opts:\n title: \"certificate url\"\n is_sensitive: true " });
this.add({id:325, 
title:"Using Env Vars as input values", 
body:" using env vars input values as noted earlier, possible use environment variables value any given input. by default, step expand env var pass execution. this defined is_expand option opts property. - project_path: $bitrise_project_path\n opts:\n is_expand: true the is_expand option values: true false. if set true - default behavior -, value $bitrise_project_path passed step execution. if set false , string $bitrise_project_path passed (and particular step fail project location). env vars step code do use environment variables directly step’s code. instead, expose outside variable input step set default value variable want use. this way it’s easier test user easily declare inputs, having scour code required variable. " });
this.add({id:326, 
title:"Grouping inputs together", 
body:" grouping inputs the category option used group inputs together. inputs belonging displayed collapsed default workflow editor. - default_certificate_passphrase: $bitrise_default_certificate_passphrase\n opts:\n category: default code signing files\n description: |\n certificate passphrase default certificate.\n is_sensitive: true\n title: certificate in case, input appear with inputs category set. categories used step than inputs. the suggested maximum number inputs group root six. please mind, designing step categories, that: required inputs grouped! grouped inputs displayed non-categorised inputs. " });
this.add({id:327, 
title:"Accepting a list of values for inputs", 
body:" accepting list values inputs it absolutely possible accept list values given input. if wish so, strongly recommend adding suffix key input (for example, input_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). as best practice, filter items. use either: first value\\n\\nsecond value first value\\n \\nsecond value " });
this.add({id:328, 
title:"Step outputs", 
body:" step outputs steps generate outputs used inputs. that means step generates artifact, path artifact input build. for example, xcode archive & export ios step exposes $bitrise_api_path output used input value deploy itunesconnect step. outputs defined step.yml file, outputs property. they structure inputs: consist key value pair. an output’s used input subsequent step, just environment variables exposed bitrise.io bitrise cli be. " });
this.add({id:329, 
title:"Step output keys and values", 
body:" step output keys values for output keys, use upper case snake case style output keys, example: output_path. " });
this.add({id:330, 
title:"Naming and describing Step outputs", 
body:" naming describing step outputs step outputs exported environment variables (env var). for example, xcode archive & export ios step generates ipa file: output exported bitrise_ipa_path env var: outputs:\n- bitrise_ipa_path: \n opts: title: .ipa file path summary: local created as example shows, output definition contains key ( bitrise_ipa_path ) opts property, includes title summary. in workflow editor, key visible default: required. addition, add summary description: title : it short descriptive sentence half sentence: generated ipa path. this required. summary : it short version description, provides quick overview output. this optional, visible workflow editor click title. description : it user facing description step output: provide deeper, detailed explanation output. this optional, visible workflow editor click title. " });
this.add({id:331, 
title:"Outputs with list of values", 
body:" outputs with list values it absolutely possible provide list values given output. if wish so, strongly recommend adding list suffix key output (for example, bitrise_apk_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). " });
this.add({id:332, 
title:"Setting conditions for running the Step", 
body:" setting conditions running step there properties define step run given workflow not: is_always_run , is_skippable run_if . all properties set step.yml file govern default behavior step, set given app’s bitrise.yml case-by-case basis. is_always_run : by default, steps run previous step workflow failed. however, is_always_run property set true , step runs regardless status previous steps workflow. this useful, example, case send notifications build: failed builds. is_skippable : as mentioned above, steps run previous step workflow failed. however, step’s is_skippable property set true , build fail subsequent steps run particular step fails. a good example cache:pull step: app build cache pull from, step fail reason build. run_if : if want make step execution dependent certain condition, use run_if property define run condition. for example, configure step so runs ci environment. read enabling or disabling a step conditionally guide possible use cases. " });
this.add({id:333, 
title:"Submodules and Step dependencies", 
body:" submodules step dependencies do use submodules, require any resource downloaded on-demand step! try include required step step’s repository. otherwise run problems if, say, fails download network error authorization problem. in case content repository instead using submodule you can, however, declare dependencies fetch os dependency manager, apt-get brew. a step installed bitrise cli available path environment variable. as steps run any environment bitrise cli run, list used dependency, know pre-installed stacks. unused dependencies (for example, git wget added sample default) waste build time. step dependencies include toolkit dependencies, bitrise cli care installing automatically. a written golang list dependency uses go toolkit. the bitrise cli install step dependencies available homebrew package manager: deps:\n brew:\n - name: cmake it install apt-get dependencies available sources listed sources.list file host machine: deps:\n apt_get:\n - name: cmake " });
this.add({id:334, 
title:"Accessing files in the Step repo with an Env Var", 
body:" accessing files step repo with env var if need binary, assets required step bundled repository, include step.yml file code step. the bitrise cli automatically exports environment variable called bitrise_step_source_dir allows access files any time. for example, access .jar file root step’s repository like this: $bitrise_step_source_dir\/mytool.jar " });
this.add({id:335, 
title:"Adding a Step icon", 
body:" adding step icon you add step icon step: see workflow editor integrations page. if want to, requirements: its background color transparent. size: 256x256 px. margin: 60 px. format: svg. verified steps please note wish submit step verification so verified step , add step icon. to submit step’s icon: add .svg file steplib fork repo at: steplib_fork_root\/steps\/your_step_id\/assets\/icon.svg . create new pull request steplib repository . " });
this.add({id:336, 
title:"Sharing Steps with all Bitrise users", 
body:" sharing steps with bitrise users if think bitrise step use others, share cli command workflow. shared steps actively maintained open contributors. if think step use others, share it! before doing so, however, check steps solve problem. you check: in list released steps . in list open pull requests steplib. in list closed pull requests steplib. if step missing particular feature, try contribute developing sharing brand new feature. you use integrations page search steps bitrise steplib. by clicking github source button given step’s page taken repository, submit feature request open pull request. also, mind shared steps actively maintained open contributors. " });
this.add({id:337, 
title:"Sharing a new Step", 
body:" sharing new step the sharing process relatively straightforward - make sure carefully new step. the bitrise share command during step development, help anytime simply running bitrise share. this print short guide sharing. there ways share step: you manually, using bitrise share command. if created step with plugin, run share-this-step workflow step’s directory. " });
this.add({id:338, 
title:"Before you start", 
body:" before start before start, make sure that: your step public git repository. the step.yml file contains support_url property points valid issue tracker (for example, issues page step’s github repository). the step.yml file contains source_code_url property points correct git url repository. sharing than step sharing than step - is, adding new step.yml file bitrise steplib separate pull requests! you open request contains step! if you’re ready, ahead with preferred sharing process! " });
this.add({id:339, 
title:"Sharing with the bitrise share command", 
body:" sharing with bitrise share command fork bitrise steplib repository. prepare forked steplib locally sharing: $ bitrise share start -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> add step version tag step’s repository. add step forked steplib repository: $ bitrise share create --tag [step-version-tag] --git [step-git-uri].git --stepid [step-id] optionally, perform complete health check forked steplib: $ bitrise share audit -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> review step’s step.yml file, you’re happy with it, finish share process: this commits pushes file forked steplib repository. $ bitrise share finish this commits pushes step.yml file forked steplib repository. open pull request official bitrise steplib repository. " });
this.add({id:340, 
title:"Sharing with the share-this-step Workflow", 
body:" sharing with share-this-step workflow the share-this-step workflow included bitrise.yml file step plugin automatically generates create new with it. using it, sharing incredibly easy: fork bitrise steplib repository. set required workflow environment variables app level bitrise.yml file: app: envs: - bitrise_step_id: bitrise_step_version: bitrise_step_git_clone_url: my_steplib_repo_fork_git_url: run share-this-step workflow bitrise cli: $ bitrise run share-this-step " });
this.add({id:341, 
title:"Fixing issues in a StepLib pull request", 
body:" fixing issues steplib pull request once submitted step version steplib, wait bitrise team review it. if ask changes: close pull request. delete share branch fork bitrise steplib. fix issues step repository. add new version tag commit contains fixes step repository. run share process again. hopefully, fixing issues, we’ll able merge pull request release step public! " });
this.add({id:342, 
title:"Abandoned Steps", 
body:" abandoned steps if step maintainer, reachable reasonable timeframe submits issue pull request step. try contact times regarding important fix\/update refuse answer weeks deprecate, remove replace collection! abandoned steps threat use it, mind decide share with others! the repository issue tracker removed, permanent links included step.yml bitrise steplib. if shared step versions continue function managed file hosting service share process. a new version step released, bitrise. if shared step you’re longer able willing maintain it, create github issue repository: bitrise steplib " });
this.add({id:343, 
title:"Reporting Step issues", 
body:" reporting step issues if you’re user step critical (security functionality) issues, create ticket step’s issue tracker. every declares preferred way reporting issues with support_url attribute. if don’t response step’s maintainer extended period (for than couple weeks) create github issue repository: https:\/\/github.com\/bitrise-io\/bitrise-steplib we’ll try resolve issue, following abandoned step policy. please patient mind contributes collection does so help providing use! " });
this.add({id:344, 
title:"Verified Steps", 
body:" verified steps verified steps bitrise owner guarantees secure, maintained, consistent, high-quality performance any user. to step verified, apply badge. " });
this.add({id:345, 
title:"What are Verified Steps?", 
body:" what verified steps? a step contains code performs specific build task. bitrise 300 steps step library (steplib) party companies open source teams enrich with steps based services\/tools. this means power roll updates step bitrise maintains overlaying control ensure service quality security. a verified step means owner service tool open source team guarantees secure, maintained, consistent, high-quality performance any bitrise user. our official steps maintained us, community community. it’s easy decide type falls gui. verified steps labeled with blue badge bitrise . official bitrise steps labeled with green badge. community created steps any badge. in guide explain how step verified bitrise. requirements for company owned services tools: your owner service tool used step apply verified badge. for open-source services tools: if member open source informal team, confirm with rest team sign applies steps submitting team. your step comply with service level agreement . your step icon. you include workflow recipe step become verified step. we strongly recommend consult with step development guidelines creating step. " });
this.add({id:346, 
title:"What is a Workflow Recipe?", 
body:" what workflow recipe? a workflow recipe template submitting step bitrise applying verified badge. you develop decide include recipe, turn one, submit well. workflow recipes published bitrise bitrise community learn how verified step used specific setup. should questions, turn partnership team partners@bitrise.io . " });
this.add({id:347, 
title:"Promoting your Verified Step", 
body:" promoting verified step as verified step program, commit taking than following co-marketing activities: in-app messaging. dedicated co-branded email campaign, newsletter mention. blog post content. how-to article, documentation, help center page. social media activities. webinars virtual events. podcasts. events (panels, fireside chats, video testimonials, sponsorship). case study\/whitepaper\/ebook\/ (shared research, testimonials, co-writing chapter, publishing others’ blogs). video content posted public youtube channel. joint pr campaigns. these co-marketing opportunities enable increase product’s content generation output, grow go-to-market plans, help drive integration adoption. you consult with bitrise partner manager ( partners@bitrise.io ) confirm co-marketing activities do, clarifying level involvement want based marketing plans. there interested single event so managed first-come, first-serve basis. " });
this.add({id:348, 
title:"Applying for a Verified badge", 
body:" applying verified badge create step based step development guideline . the step’s repository must github. share step bitrise-steplib new pull request checklist. when claassistant prompts you, sign contributor license agreement. until completed, merging blocked pr. please partnership form ! once submitted form, partner management team contact 5 business days discuss rest process. if any stage process wonder happens with step candidate covered steplib, head how step duplication ? " });
this.add({id:349, 
title:"Service level agreement for Verified Step authors", 
body:" service level agreement verified step authors anyone contribute verified step steplib creating issue pull request (pr). the author manage contribution (for example, issue, pr, any maintenance third-party changes) start finish. bitrise monitors open issues prs created steps contacts authors contributions handled. if fails described contributor license agreement sla, withdraws badge step. this ensure high quality meet users’ expectations. " });
this.add({id:350, 
title:"Managing contributions", 
body:" managing contributions the following guidelines aim help verified step authors categorize contributions. author responsible any contribution step. acknowledges adding label estimated time perform fix, merge pr. there labels use type contribution: critical-bug label means current feature set abnormal behavior, blocks users using step workaround fix issue. this critical bug fixed author. bug label means current feature set abnormal behavior, does block users using step workaround issue. this bug fixed author. feature-request label means new feature step requested. the verified author decide worth implementing. maintenance label means improving step’s source code way does add new features potential bugs step. the verified step author decide feature worth implementing not. rejected label means contribution gets rejected verified step author closed first response time, 5 business days. when rejecting contribution, provide explanation contributor time. accepted contribution means given: critical-bug, bug, feature, maintenance fixed\/merged given resolution time. first response time means 5 day window verified step author respond contribution with accepted rejected labels. resolution time means certain business days contribution (issue pr) completed verified step author. type first response time resolution time critical-bug 5 business days 10 business days bug 5 business days 15 business days feature-request 5 business days 20 business days maintenance 5 business days 20 business days " });
this.add({id:351, 
title:"How do we go about Step duplications?", 
body:" how step duplications? in general try steplib streamlined avoid step duplications build task. here questions answers comes any potential duplications. i was going submit step apply verified badge, official bitrise build task steplib. what do? submit step application process. once completed, deprecate official bitrise users use new verified step. i was going submit step apply verified badge, community build task. what do? submit step application process. your new verified community available steplib. i was going submit community step verified build task. what do? if verified step available steplib, reject community submission build task avoid duplication. we offer developer work future updates existing step. " });
this.add({id:352, 
title:"Creating your own Bitrise project scanner", 
body:" creating bitrise project scanner a bitrise project scanner scan result model. every platform writes possible options, configurations, warnings these translated step input values choosing desired given options. the project scanner tool identifies given project’s type generates basic bitrise configuration. each supported scanner: scanners stored separate packages. a project type scanner defines workflows : testing ( primary ) building ( deploy ). it includes minimal steps successfully run . build test steps build steps test specific requirements: a build  step build app so ready deployment output environment variable points file(s). for example, step ios .ipa file (not, say, .xcodearchive ) path .ipa file. a test step output test results so available viewing build page on bitrise.io. when adding new project website initializing machine, bitrise-init tool iterates scanner, calls scanner interface methods collects outputs. based outputs, basic configuration generated. the possible workflows described scan result model. model consists of: options configs warnings here basic structure model, yaml: options:\n detected_platform_1: optionmodel\n detected_platform_2: ...\n\nconfigs:\n detected_platform_1:\n config_name_1: configmodel\n config_name_2: ...\n detected_platform_2:\n ...\n\nwarnings:\n - \"warning message 1\"\n 2\"\n ... every platform scanner writes possible options, configurations warnings model. these translated step input values choosing desired given options. every option chain’s selects configuration. warnings display issues with given project setup. " });
this.add({id:353, 
title:"Options", 
body:" options options represents question possible answers question. for example: question: what path ios project files? possible answers: list possible paths check these questions answers translated step inputs. the scanner determine input value let user select type value. for example, xcode archive & export ios step input called export-method . this informs step type .ipa want export. the value determined based source code so scanner collects possible presents user form list choose from. selecting option start chain: lead different options presented afterwards. for example, select xcode scheme associated test targets, leads “questions”. similarly, selecting certain workflow generated " });
this.add({id:354, 
title:"The option model", 
body:" the option model the optionmodel represents input option. it looks like go: \/\/ optionmodel ...\ntype struct {\n title string\n envkey string\n\n childoptionmap map[string]*optionmodel\n config string\n} title : human readable input. envkey : represents input’s key step model. childoptionmap : map subsequent options user chooses given value option. for example, let’s see scenario choose value scheme input. you value_map options . the possible values are: schemewithtest schemewithouttest by choosing schemewithtest , option related simulator used perform test. by choosing schemewithouttest , option export method .ipa file. {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n ...\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n }\n }\n} every option chain first option: called head . the possible values options branch option chain. every option branch’s options config property set. config holds id generated bitrise configuration. an options chain’s options value_map . {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n \"-\": \"config\": \"bitrise_config_with_test\",\n }\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n \"development\": \"bitrise_config_without_test\",\n \"app-store\": \"ad-hoc\": }\n}\n " });
this.add({id:355, 
title:"Scanners", 
body:" scanners scanners generate possible options chains possible workflows options project type. the activescanner variable holds scanner implementation. every specific implements scannerinterface . \/\/ scannerinterface ...\ntype interface {\n name() string\n detectplatform(string) (bool, error)\n\n options() (models.optionmodel, models.warnings, error)\n configs() (models.bitriseconfigmap, defaultoptions() models.optionmodel\n defaultconfigs() excludedscannernames() []string\n} name() string : this method used logging storing scanner output (warnings, options configs). the stored map[scanner_name]output . for example, options ios project stored optionsmap[ios]options . detectplatform(string) (bool, error) : this method used determine given search directory contains project type not. options() (models.optionmodel, models.warnings, error) : this method used generate option branches project. each branch define complete valid set build final bitrise config model. every branch’s options store configuration id, filled with selected options. configs() (models.bitriseconfigmap, error) : this method used generate possible configs. bitriseconfigmap’s element bitrise config template fulfilled with user selected option values. defaultoptions() models.optionmodel defaultconfigs() (models.bitriseconfigmap, error) : these methods used generate options configs scanning given project. in case required step input value provided user. this way scanner fails, user option started. " });
this.add({id:356, 
title:"Testing a scanner", 
body:" testing scanner to test scanner, require unit tests integration tests. unit tests written using go’s standard testing library. for integration tests, validating project type scanners generating desired bitrise configurations instance type. to this, use new scanner scan given sample modify generated result fit tests. the reason modification scanners adding steps generated config, step versions updated time time. version definitions steps\/const.go . so bitrise-init --ci config sample project’s root directory, generated scan_result.yml file replace step versions with %s use fmt.sprintf inject latest defined step versions config. in integration tests, matching scan_result.yml file generated scanner with previously reference scan_result content. " });
this.add({id:357, 
title:"Submitting your own scanner", 
body:" submitting scanner you submit scanner bitrise: review integrate bitrise-init tool it’s approved! the development path new scanner starts with sample project ends updating existing steps type. let’s it! find create open source sample app demonstrates typical instance project type. it include: readme file (including tool versions required updating, building testing project). bitrise.yml file generated scanner. build test sample app with existing steps custom scripts. create missing steps new project type needs. the pr steps link scanner created scanner. create scanner project type. run required unit tests integration tests. open scanner pull request bitrise-init project. it should: link new project type’s sample app. link new project type’s guides testing building. include icon new project type - create you. recommend default stack listing required tools building testing new project type. update existing steps with new project type necessary. the pr steps link scanner pr. " });
this.add({id:306, 
title:"Creating your own Step", 
body:" creating step bitrise offers 200 steps users. we maintain users’ community does outstanding job contributing step library (steplib). anyone submit - approved, become official steplib available users! check how create share with world:  creating step . " });
this.add({id:307, 
title:"Creating your own scanner", 
body:" creating scanner our project scanner automatically detects type add new app bitrise. in context, means platform framework used create app, example, android, ios, react native flutter. based results, configuration, with default workflow contains frequently steps detected type. our scanner detect app, couple reasons: missing repository (such config.xml file case ionic example), simply don’t type yet. if it’s latter, can  configure app manually , create scanner, with project configuration:  creating bitrise project scanner. " });
this.add({id:308, 
title:"Developing a new Step", 
body:" developing new step to develop bitrise step integrated library, need write code, create description, submit review. duplicate steps before deciding develop new step, make sure there’s existing step performs function. you search steps integrations page step library github. a step build task: example, git clone step clones git repository start build google play deploy step deploy finished app play store. a step contains code performs build task. you configure inputs parameters define task, view reuse outputs generates. reusing output means use value inputs. our steps written go bash. steps contained git repositories: includes code step.yml file defines configuration step. if wish make step available users, step.yml file needs included bitrise-steplib repository so users step website, workflow editor . sharing steps sharing custom steps optional: step with use case specific single user help others. as run machine any git repository, bitrise library. for info sharing steps with users, check sharing steps guide. for detailed information how steps work, see following guides: steps yaml step inputs step outputs step properties " });
this.add({id:309, 
title:"Before you start developing a new Step", 
body:" before start developing new step before creating new step, need install bitrise cli, set up, make sure step plugin updated latest version. install bitrise cli . run bitrise setup. update step plugin latest version with following command: bitrise plugin update step " });
this.add({id:310, 
title:"Creating the Step", 
body:" creating step we use step plugin bitrise cli create new step. with this, we’ll basic structure certain properties inputs generated assigned automatically. you change later so don’t worry yet. the step plugin run bitrise :step command line interface check commands. creating basic structure step simple. we’ll concepts involved process later; now, just create step. at end process, step.yml file, readme.md file main.go step.sh file repository. before start during step creation process, prompted set number options. note change any submitting bitrise review: data included generated step.yml file edit leisure later. during initial step creation process, use placeholders want to. open command line interface, terminal app macos. create new directory step haven’t so enter directory: create step with bitrise plugin: bitrise :step create . when prompted, set step’s author. hit enter leave default value. when prompted, set step’s name. the plugin automatically generates step id based name. provide summary: than couple sentences step does. provide description step. this contain configuration information troubleshooting step. select primary category step. to so, type number preferred option hit enter. this changed later. choose toolkit want use: choose go bash. set source code hosting data step: to so, first decide want host github any site enter appropriate option: if chose github, asked provide username account repository. if chose store github, provide valid url repository. you done! if went well, plugin initialized git repository current directory added step.yml , readme.md file, main.go main.sh file. now we’ll how step.yml file works how set up. " });
this.add({id:311, 
title:"The step.yml file", 
body:" the step.yml file the step.yml file step interface definition, containing dependencies, inputs outputs properties. it points location step’s source code. every one. if use step plugin create new step, required properties value assigned - change any time. so don’t worry title set initial process does conform guidelines below. we’ll look important configuration options step.yml file, including naming describing step, setting step inputs outputs. " });
this.add({id:312, 
title:"Naming and describing a Step", 
body:" naming describing step every step title summary defined step.yml file. these appear integrations page workflow editor . the description property optional strongly recommend providing so users better understand how step works. description summary both description summary accept markdown formatting values. " });
this.add({id:313, 
title:"The title", 
body:" the title the title property the title property required! the title property sets step, appear bitrise.io . it short descriptive. include service function fulfils, git clone . here’s guidelines step titles: do use word ‘step’. use imperative verbs instead nouns possible. for example, script runner , run script . do include platform. make sure use correct service tool. for example, github instead github. do include implementation details. " });
this.add({id:314, 
title:"The summary", 
body:" the summary the summary property the summary property required! a single line significant information step. it can’t longer than 100 characters. the summary visible default workflow editor. if user expands summary, step’s description presented - one, course. " });
this.add({id:315, 
title:"The description", 
body:" the description a detailed explanation step. it include: what step does. the services tools used step. configuration information, including important inputs. troubleshooting information: potential issues solutions. by default, step’s description collapsed workflow editor summary presented. " });
this.add({id:316, 
title:"Step categories", 
body:" step categories there thing we’d like know step: type step it? as see integrations page workflow editor, steps sorted different categories based factors: platforms available functionality. " });
this.add({id:317, 
title:"Platforms", 
body:" platforms the available platform types controlled project_type_tags attribute. if step available platform project type, specify project_type_tags . in any case, select platform types step available. the available values are: ios macos android react-native cordova ionic flutter " });
this.add({id:318, 
title:"Category", 
body:" category functional categories controlled type_tags attribute step.yml . one step single type tag assigned it. use utility believe none types fit step. the available values are: build code-sign test deploy notification access-control artifact-info installer dependency utility " });
this.add({id:319, 
title:"Step inputs", 
body:" step inputs step inputs bitrise environment variables : consist key value pair users step set control behavior. for example, git clone step input with key branch: title: git clone repository\nsummary: repository specified path vm\ninputs:\n- branch: master the value input - master example used determine branch repository cloned. step inputs visible workflow editor: presented order appear step.yml . as such, required frequently used inputs top. " });
this.add({id:320, 
title:"Step input keys and values", 
body:" step input keys values use lower case snake case style input keys. for example, project_path . using opts input key the input key opts , used input’s options. there need add domain-specific prefixes input keys, inputs exposed step run process. this means project_path input overlap with subsequent steps’ project_path inputs. step input values strings: bitrise cli exposes inputs environment variables steps. provide default values step inputs possible (and makes sense). that configuration easier bitrise users. environment variables used default values, unless: they exposed bitrise cli bitrise.io . they generated output step (for example, $bitrise_ipa_path , $bitrise_aab_path ). this workflow editor highlights required inputs values express step work setting valid value given input. if set env var, does automatically assigned value, default input, think input question (even var yet). also, reason suggest certain environment variable way: users value assigned env var with different name. let’s talk how step inputs passed code presented. " });
this.add({id:321, 
title:"Configuring Step inputs", 
body:" configuring step inputs step inputs defined configured step.yml file. in addition key value, step inputs required opts property. this property contains different options define how inputs passed code step presented workflow editor. the possible values input set opts well. let’s see example. - install_defaults: \"yes\"\n opts:\n title: installs default codesign files\n value_options:\n \"no\"\n \"yes\" the input key install_defaults, default value yes. the value_options option defines possible values: case, yes and no. its opts property contains information how input presented: case, it’s just title option, required. the displayed workflow editor instead key input. the value_options input the value_options input contain string. this means quotation marks, indicated example, validation fail. " });
this.add({id:322, 
title:"Naming and describing Step inputs", 
body:" naming describing step inputs a step input name, summary, description, just like itself. to define these: include opts property with step input. under opts, provide title, summary, description option. let’s look how like! description summary both description summary accept markdown formatting values. title : it short descriptive sentence half sentence: the xcode project’s path. cli flag api parameter used internally. this makes step configuration easier, preexisting knowledge required underlying tool service interfaces. it’s easier change step’s implementation maintaining backwards compatibility. summary : it short version description, provides quick overview input. on bitrise workflow editor, summary inputs presented default click step. description : it user facing description step input: provide deeper, detailed explanation input. by default, visible workflow editor, unless clicks input question. here example: - install_defaults: \"yes\"\n opts:\n description: installs default (bitrise) wildcard provisioning profile and\n certificate files testing.\n summary: code signing files.\n title: now, let’s talk configuration options steps. " });
this.add({id:323, 
title:"Required inputs", 
body:" required inputs required inputs valid value, step fail. to mark step input required, use is_required option opts property. it values: true false . if set true , input displayed required workflow editor. - keychain_password: $bitrise_keychain_password\n opts:\n title: \"keychain's password\"\n is_required: true " });
this.add({id:324, 
title:"Sensitive inputs", 
body:" sensitive inputs you mark step inputs sensitive make sure values exposed. sensitive accept secrets values. this ensures visible build logs. to mark step input sensitive, use is_sensitive option opts property. it values: true false . if set true , input displayed sensitive workflow editor. the is_expand option if mark input sensitive, is_expand option input true, default setting. inputs:\n - certificate_urls: $bitrise_certificate_url\n opts:\n title: \"certificate url\"\n is_sensitive: true " });
this.add({id:325, 
title:"Using Env Vars as input values", 
body:" using env vars input values as noted earlier, possible use environment variables value any given input. by default, step expand env var pass execution. this defined is_expand option opts property. - project_path: $bitrise_project_path\n opts:\n is_expand: true the is_expand option values: true false. if set true - default behavior -, value $bitrise_project_path passed step execution. if set false , string $bitrise_project_path passed (and particular step fail project location). env vars step code do use environment variables directly step’s code. instead, expose outside variable input step set default value variable want use. this way it’s easier test user easily declare inputs, having scour code required variable. " });
this.add({id:326, 
title:"Grouping inputs together", 
body:" grouping inputs the category option used group inputs together. inputs belonging displayed collapsed default workflow editor. - default_certificate_passphrase: $bitrise_default_certificate_passphrase\n opts:\n category: default code signing files\n description: |\n certificate passphrase default certificate.\n is_sensitive: true\n title: certificate in case, input appear with inputs category set. categories used step than inputs. the suggested maximum number inputs group root six. please mind, designing step categories, that: required inputs grouped! grouped inputs displayed non-categorised inputs. " });
this.add({id:327, 
title:"Accepting a list of values for inputs", 
body:" accepting list values inputs it absolutely possible accept list values given input. if wish so, strongly recommend adding suffix key input (for example, input_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). as best practice, filter items. use either: first value\\n\\nsecond value first value\\n \\nsecond value " });
this.add({id:328, 
title:"Step outputs", 
body:" step outputs steps generate outputs used inputs. that means step generates artifact, path artifact input build. for example, xcode archive & export ios step exposes $bitrise_api_path output used input value deploy itunesconnect step. outputs defined step.yml file, outputs property. they structure inputs: consist key value pair. an output’s used input subsequent step, just environment variables exposed bitrise.io bitrise cli be. " });
this.add({id:329, 
title:"Step output keys and values", 
body:" step output keys values for output keys, use upper case snake case style output keys, example: output_path. " });
this.add({id:330, 
title:"Naming and describing Step outputs", 
body:" naming describing step outputs step outputs exported environment variables (env var). for example, xcode archive & export ios step generates ipa file: output exported bitrise_ipa_path env var: outputs:\n- bitrise_ipa_path: \n opts: title: .ipa file path summary: local created as example shows, output definition contains key ( bitrise_ipa_path ) opts property, includes title summary. in workflow editor, key visible default: required. addition, add summary description: title : it short descriptive sentence half sentence: generated ipa path. this required. summary : it short version description, provides quick overview output. this optional, visible workflow editor click title. description : it user facing description step output: provide deeper, detailed explanation output. this optional, visible workflow editor click title. " });
this.add({id:331, 
title:"Outputs with list of values", 
body:" outputs with list values it absolutely possible provide list values given output. if wish so, strongly recommend adding list suffix key output (for example, bitrise_apk_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). " });
this.add({id:332, 
title:"Setting conditions for running the Step", 
body:" setting conditions running step there properties define step run given workflow not: is_always_run , is_skippable run_if . all properties set step.yml file govern default behavior step, set given app’s bitrise.yml case-by-case basis. is_always_run : by default, steps run previous step workflow failed. however, is_always_run property set true , step runs regardless status previous steps workflow. this useful, example, case send notifications build: failed builds. is_skippable : as mentioned above, steps run previous step workflow failed. however, step’s is_skippable property set true , build fail subsequent steps run particular step fails. a good example cache:pull step: app build cache pull from, step fail reason build. run_if : if want make step execution dependent certain condition, use run_if property define run condition. for example, configure step so runs ci environment. read enabling or disabling a step conditionally guide possible use cases. " });
this.add({id:333, 
title:"Submodules and Step dependencies", 
body:" submodules step dependencies do use submodules, require any resource downloaded on-demand step! try include required step step’s repository. otherwise run problems if, say, fails download network error authorization problem. in case content repository instead using submodule you can, however, declare dependencies fetch os dependency manager, apt-get brew. a step installed bitrise cli available path environment variable. as steps run any environment bitrise cli run, list used dependency, know pre-installed stacks. unused dependencies (for example, git wget added sample default) waste build time. step dependencies include toolkit dependencies, bitrise cli care installing automatically. a written golang list dependency uses go toolkit. the bitrise cli install step dependencies available homebrew package manager: deps:\n brew:\n - name: cmake it install apt-get dependencies available sources listed sources.list file host machine: deps:\n apt_get:\n - name: cmake " });
this.add({id:334, 
title:"Accessing files in the Step repo with an Env Var", 
body:" accessing files step repo with env var if need binary, assets required step bundled repository, include step.yml file code step. the bitrise cli automatically exports environment variable called bitrise_step_source_dir allows access files any time. for example, access .jar file root step’s repository like this: $bitrise_step_source_dir\/mytool.jar " });
this.add({id:335, 
title:"Adding a Step icon", 
body:" adding step icon you add step icon step: see workflow editor integrations page. if want to, requirements: its background color transparent. size: 256x256 px. margin: 60 px. format: svg. verified steps please note wish submit step verification so verified step , add step icon. to submit step’s icon: add .svg file steplib fork repo at: steplib_fork_root\/steps\/your_step_id\/assets\/icon.svg . create new pull request steplib repository . " });
this.add({id:309, 
title:"Before you start developing a new Step", 
body:" before start developing new step before creating new step, need install bitrise cli, set up, make sure step plugin updated latest version. install bitrise cli . run bitrise setup. update step plugin latest version with following command: bitrise plugin update step " });
this.add({id:310, 
title:"Creating the Step", 
body:" creating step we use step plugin bitrise cli create new step. with this, we’ll basic structure certain properties inputs generated assigned automatically. you change later so don’t worry yet. the step plugin run bitrise :step command line interface check commands. creating basic structure step simple. we’ll concepts involved process later; now, just create step. at end process, step.yml file, readme.md file main.go step.sh file repository. before start during step creation process, prompted set number options. note change any submitting bitrise review: data included generated step.yml file edit leisure later. during initial step creation process, use placeholders want to. open command line interface, terminal app macos. create new directory step haven’t so enter directory: create step with bitrise plugin: bitrise :step create . when prompted, set step’s author. hit enter leave default value. when prompted, set step’s name. the plugin automatically generates step id based name. provide summary: than couple sentences step does. provide description step. this contain configuration information troubleshooting step. select primary category step. to so, type number preferred option hit enter. this changed later. choose toolkit want use: choose go bash. set source code hosting data step: to so, first decide want host github any site enter appropriate option: if chose github, asked provide username account repository. if chose store github, provide valid url repository. you done! if went well, plugin initialized git repository current directory added step.yml , readme.md file, main.go main.sh file. now we’ll how step.yml file works how set up. " });
this.add({id:311, 
title:"The step.yml file", 
body:" the step.yml file the step.yml file step interface definition, containing dependencies, inputs outputs properties. it points location step’s source code. every one. if use step plugin create new step, required properties value assigned - change any time. so don’t worry title set initial process does conform guidelines below. we’ll look important configuration options step.yml file, including naming describing step, setting step inputs outputs. " });
this.add({id:312, 
title:"Naming and describing a Step", 
body:" naming describing step every step title summary defined step.yml file. these appear integrations page workflow editor . the description property optional strongly recommend providing so users better understand how step works. description summary both description summary accept markdown formatting values. " });
this.add({id:313, 
title:"The title", 
body:" the title the title property the title property required! the title property sets step, appear bitrise.io . it short descriptive. include service function fulfils, git clone . here’s guidelines step titles: do use word ‘step’. use imperative verbs instead nouns possible. for example, script runner , run script . do include platform. make sure use correct service tool. for example, github instead github. do include implementation details. " });
this.add({id:314, 
title:"The summary", 
body:" the summary the summary property the summary property required! a single line significant information step. it can’t longer than 100 characters. the summary visible default workflow editor. if user expands summary, step’s description presented - one, course. " });
this.add({id:315, 
title:"The description", 
body:" the description a detailed explanation step. it include: what step does. the services tools used step. configuration information, including important inputs. troubleshooting information: potential issues solutions. by default, step’s description collapsed workflow editor summary presented. " });
this.add({id:313, 
title:"The title", 
body:" the title the title property the title property required! the title property sets step, appear bitrise.io . it short descriptive. include service function fulfils, git clone . here’s guidelines step titles: do use word ‘step’. use imperative verbs instead nouns possible. for example, script runner , run script . do include platform. make sure use correct service tool. for example, github instead github. do include implementation details. " });
this.add({id:314, 
title:"The summary", 
body:" the summary the summary property the summary property required! a single line significant information step. it can’t longer than 100 characters. the summary visible default workflow editor. if user expands summary, step’s description presented - one, course. " });
this.add({id:315, 
title:"The description", 
body:" the description a detailed explanation step. it include: what step does. the services tools used step. configuration information, including important inputs. troubleshooting information: potential issues solutions. by default, step’s description collapsed workflow editor summary presented. " });
this.add({id:316, 
title:"Step categories", 
body:" step categories there thing we’d like know step: type step it? as see integrations page workflow editor, steps sorted different categories based factors: platforms available functionality. " });
this.add({id:317, 
title:"Platforms", 
body:" platforms the available platform types controlled project_type_tags attribute. if step available platform project type, specify project_type_tags . in any case, select platform types step available. the available values are: ios macos android react-native cordova ionic flutter " });
this.add({id:318, 
title:"Category", 
body:" category functional categories controlled type_tags attribute step.yml . one step single type tag assigned it. use utility believe none types fit step. the available values are: build code-sign test deploy notification access-control artifact-info installer dependency utility " });
this.add({id:317, 
title:"Platforms", 
body:" platforms the available platform types controlled project_type_tags attribute. if step available platform project type, specify project_type_tags . in any case, select platform types step available. the available values are: ios macos android react-native cordova ionic flutter " });
this.add({id:318, 
title:"Category", 
body:" category functional categories controlled type_tags attribute step.yml . one step single type tag assigned it. use utility believe none types fit step. the available values are: build code-sign test deploy notification access-control artifact-info installer dependency utility " });
this.add({id:319, 
title:"Step inputs", 
body:" step inputs step inputs bitrise environment variables : consist key value pair users step set control behavior. for example, git clone step input with key branch: title: git clone repository\nsummary: repository specified path vm\ninputs:\n- branch: master the value input - master example used determine branch repository cloned. step inputs visible workflow editor: presented order appear step.yml . as such, required frequently used inputs top. " });
this.add({id:320, 
title:"Step input keys and values", 
body:" step input keys values use lower case snake case style input keys. for example, project_path . using opts input key the input key opts , used input’s options. there need add domain-specific prefixes input keys, inputs exposed step run process. this means project_path input overlap with subsequent steps’ project_path inputs. step input values strings: bitrise cli exposes inputs environment variables steps. provide default values step inputs possible (and makes sense). that configuration easier bitrise users. environment variables used default values, unless: they exposed bitrise cli bitrise.io . they generated output step (for example, $bitrise_ipa_path , $bitrise_aab_path ). this workflow editor highlights required inputs values express step work setting valid value given input. if set env var, does automatically assigned value, default input, think input question (even var yet). also, reason suggest certain environment variable way: users value assigned env var with different name. let’s talk how step inputs passed code presented. " });
this.add({id:320, 
title:"Step input keys and values", 
body:" step input keys values use lower case snake case style input keys. for example, project_path . using opts input key the input key opts , used input’s options. there need add domain-specific prefixes input keys, inputs exposed step run process. this means project_path input overlap with subsequent steps’ project_path inputs. step input values strings: bitrise cli exposes inputs environment variables steps. provide default values step inputs possible (and makes sense). that configuration easier bitrise users. environment variables used default values, unless: they exposed bitrise cli bitrise.io . they generated output step (for example, $bitrise_ipa_path , $bitrise_aab_path ). this workflow editor highlights required inputs values express step work setting valid value given input. if set env var, does automatically assigned value, default input, think input question (even var yet). also, reason suggest certain environment variable way: users value assigned env var with different name. let’s talk how step inputs passed code presented. " });
this.add({id:321, 
title:"Configuring Step inputs", 
body:" configuring step inputs step inputs defined configured step.yml file. in addition key value, step inputs required opts property. this property contains different options define how inputs passed code step presented workflow editor. the possible values input set opts well. let’s see example. - install_defaults: \"yes\"\n opts:\n title: installs default codesign files\n value_options:\n \"no\"\n \"yes\" the input key install_defaults, default value yes. the value_options option defines possible values: case, yes and no. its opts property contains information how input presented: case, it’s just title option, required. the displayed workflow editor instead key input. the value_options input the value_options input contain string. this means quotation marks, indicated example, validation fail. " });
this.add({id:322, 
title:"Naming and describing Step inputs", 
body:" naming describing step inputs a step input name, summary, description, just like itself. to define these: include opts property with step input. under opts, provide title, summary, description option. let’s look how like! description summary both description summary accept markdown formatting values. title : it short descriptive sentence half sentence: the xcode project’s path. cli flag api parameter used internally. this makes step configuration easier, preexisting knowledge required underlying tool service interfaces. it’s easier change step’s implementation maintaining backwards compatibility. summary : it short version description, provides quick overview input. on bitrise workflow editor, summary inputs presented default click step. description : it user facing description step input: provide deeper, detailed explanation input. by default, visible workflow editor, unless clicks input question. here example: - install_defaults: \"yes\"\n opts:\n description: installs default (bitrise) wildcard provisioning profile and\n certificate files testing.\n summary: code signing files.\n title: now, let’s talk configuration options steps. " });
this.add({id:323, 
title:"Required inputs", 
body:" required inputs required inputs valid value, step fail. to mark step input required, use is_required option opts property. it values: true false . if set true , input displayed required workflow editor. - keychain_password: $bitrise_keychain_password\n opts:\n title: \"keychain's password\"\n is_required: true " });
this.add({id:324, 
title:"Sensitive inputs", 
body:" sensitive inputs you mark step inputs sensitive make sure values exposed. sensitive accept secrets values. this ensures visible build logs. to mark step input sensitive, use is_sensitive option opts property. it values: true false . if set true , input displayed sensitive workflow editor. the is_expand option if mark input sensitive, is_expand option input true, default setting. inputs:\n - certificate_urls: $bitrise_certificate_url\n opts:\n title: \"certificate url\"\n is_sensitive: true " });
this.add({id:325, 
title:"Using Env Vars as input values", 
body:" using env vars input values as noted earlier, possible use environment variables value any given input. by default, step expand env var pass execution. this defined is_expand option opts property. - project_path: $bitrise_project_path\n opts:\n is_expand: true the is_expand option values: true false. if set true - default behavior -, value $bitrise_project_path passed step execution. if set false , string $bitrise_project_path passed (and particular step fail project location). env vars step code do use environment variables directly step’s code. instead, expose outside variable input step set default value variable want use. this way it’s easier test user easily declare inputs, having scour code required variable. " });
this.add({id:326, 
title:"Grouping inputs together", 
body:" grouping inputs the category option used group inputs together. inputs belonging displayed collapsed default workflow editor. - default_certificate_passphrase: $bitrise_default_certificate_passphrase\n opts:\n category: default code signing files\n description: |\n certificate passphrase default certificate.\n is_sensitive: true\n title: certificate in case, input appear with inputs category set. categories used step than inputs. the suggested maximum number inputs group root six. please mind, designing step categories, that: required inputs grouped! grouped inputs displayed non-categorised inputs. " });
this.add({id:327, 
title:"Accepting a list of values for inputs", 
body:" accepting list values inputs it absolutely possible accept list values given input. if wish so, strongly recommend adding suffix key input (for example, input_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). as best practice, filter items. use either: first value\\n\\nsecond value first value\\n \\nsecond value " });
this.add({id:322, 
title:"Naming and describing Step inputs", 
body:" naming describing step inputs a step input name, summary, description, just like itself. to define these: include opts property with step input. under opts, provide title, summary, description option. let’s look how like! description summary both description summary accept markdown formatting values. title : it short descriptive sentence half sentence: the xcode project’s path. cli flag api parameter used internally. this makes step configuration easier, preexisting knowledge required underlying tool service interfaces. it’s easier change step’s implementation maintaining backwards compatibility. summary : it short version description, provides quick overview input. on bitrise workflow editor, summary inputs presented default click step. description : it user facing description step input: provide deeper, detailed explanation input. by default, visible workflow editor, unless clicks input question. here example: - install_defaults: \"yes\"\n opts:\n description: installs default (bitrise) wildcard provisioning profile and\n certificate files testing.\n summary: code signing files.\n title: now, let’s talk configuration options steps. " });
this.add({id:323, 
title:"Required inputs", 
body:" required inputs required inputs valid value, step fail. to mark step input required, use is_required option opts property. it values: true false . if set true , input displayed required workflow editor. - keychain_password: $bitrise_keychain_password\n opts:\n title: \"keychain's password\"\n is_required: true " });
this.add({id:324, 
title:"Sensitive inputs", 
body:" sensitive inputs you mark step inputs sensitive make sure values exposed. sensitive accept secrets values. this ensures visible build logs. to mark step input sensitive, use is_sensitive option opts property. it values: true false . if set true , input displayed sensitive workflow editor. the is_expand option if mark input sensitive, is_expand option input true, default setting. inputs:\n - certificate_urls: $bitrise_certificate_url\n opts:\n title: \"certificate url\"\n is_sensitive: true " });
this.add({id:325, 
title:"Using Env Vars as input values", 
body:" using env vars input values as noted earlier, possible use environment variables value any given input. by default, step expand env var pass execution. this defined is_expand option opts property. - project_path: $bitrise_project_path\n opts:\n is_expand: true the is_expand option values: true false. if set true - default behavior -, value $bitrise_project_path passed step execution. if set false , string $bitrise_project_path passed (and particular step fail project location). env vars step code do use environment variables directly step’s code. instead, expose outside variable input step set default value variable want use. this way it’s easier test user easily declare inputs, having scour code required variable. " });
this.add({id:326, 
title:"Grouping inputs together", 
body:" grouping inputs the category option used group inputs together. inputs belonging displayed collapsed default workflow editor. - default_certificate_passphrase: $bitrise_default_certificate_passphrase\n opts:\n category: default code signing files\n description: |\n certificate passphrase default certificate.\n is_sensitive: true\n title: certificate in case, input appear with inputs category set. categories used step than inputs. the suggested maximum number inputs group root six. please mind, designing step categories, that: required inputs grouped! grouped inputs displayed non-categorised inputs. " });
this.add({id:327, 
title:"Accepting a list of values for inputs", 
body:" accepting list values inputs it absolutely possible accept list values given input. if wish so, strongly recommend adding suffix key input (for example, input_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). as best practice, filter items. use either: first value\\n\\nsecond value first value\\n \\nsecond value " });
this.add({id:328, 
title:"Step outputs", 
body:" step outputs steps generate outputs used inputs. that means step generates artifact, path artifact input build. for example, xcode archive & export ios step exposes $bitrise_api_path output used input value deploy itunesconnect step. outputs defined step.yml file, outputs property. they structure inputs: consist key value pair. an output’s used input subsequent step, just environment variables exposed bitrise.io bitrise cli be. " });
this.add({id:329, 
title:"Step output keys and values", 
body:" step output keys values for output keys, use upper case snake case style output keys, example: output_path. " });
this.add({id:330, 
title:"Naming and describing Step outputs", 
body:" naming describing step outputs step outputs exported environment variables (env var). for example, xcode archive & export ios step generates ipa file: output exported bitrise_ipa_path env var: outputs:\n- bitrise_ipa_path: \n opts: title: .ipa file path summary: local created as example shows, output definition contains key ( bitrise_ipa_path ) opts property, includes title summary. in workflow editor, key visible default: required. addition, add summary description: title : it short descriptive sentence half sentence: generated ipa path. this required. summary : it short version description, provides quick overview output. this optional, visible workflow editor click title. description : it user facing description step output: provide deeper, detailed explanation output. this optional, visible workflow editor click title. " });
this.add({id:331, 
title:"Outputs with list of values", 
body:" outputs with list values it absolutely possible provide list values given output. if wish so, strongly recommend adding list suffix key output (for example, bitrise_apk_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). " });
this.add({id:329, 
title:"Step output keys and values", 
body:" step output keys values for output keys, use upper case snake case style output keys, example: output_path. " });
this.add({id:330, 
title:"Naming and describing Step outputs", 
body:" naming describing step outputs step outputs exported environment variables (env var). for example, xcode archive & export ios step generates ipa file: output exported bitrise_ipa_path env var: outputs:\n- bitrise_ipa_path: \n opts: title: .ipa file path summary: local created as example shows, output definition contains key ( bitrise_ipa_path ) opts property, includes title summary. in workflow editor, key visible default: required. addition, add summary description: title : it short descriptive sentence half sentence: generated ipa path. this required. summary : it short version description, provides quick overview output. this optional, visible workflow editor click title. description : it user facing description step output: provide deeper, detailed explanation output. this optional, visible workflow editor click title. " });
this.add({id:331, 
title:"Outputs with list of values", 
body:" outputs with list values it absolutely possible provide list values given output. if wish so, strongly recommend adding list suffix key output (for example, bitrise_apk_path_list ), expect values provided newline character (\\n) separated list (for example, first value\\nsecond value). please use solution unless really need character separating values. based experience, newline (\\n) works universal separator character, it’s quite rare input values (compared ,, ;, = common characters). " });
this.add({id:332, 
title:"Setting conditions for running the Step", 
body:" setting conditions running step there properties define step run given workflow not: is_always_run , is_skippable run_if . all properties set step.yml file govern default behavior step, set given app’s bitrise.yml case-by-case basis. is_always_run : by default, steps run previous step workflow failed. however, is_always_run property set true , step runs regardless status previous steps workflow. this useful, example, case send notifications build: failed builds. is_skippable : as mentioned above, steps run previous step workflow failed. however, step’s is_skippable property set true , build fail subsequent steps run particular step fails. a good example cache:pull step: app build cache pull from, step fail reason build. run_if : if want make step execution dependent certain condition, use run_if property define run condition. for example, configure step so runs ci environment. read enabling or disabling a step conditionally guide possible use cases. " });
this.add({id:333, 
title:"Submodules and Step dependencies", 
body:" submodules step dependencies do use submodules, require any resource downloaded on-demand step! try include required step step’s repository. otherwise run problems if, say, fails download network error authorization problem. in case content repository instead using submodule you can, however, declare dependencies fetch os dependency manager, apt-get brew. a step installed bitrise cli available path environment variable. as steps run any environment bitrise cli run, list used dependency, know pre-installed stacks. unused dependencies (for example, git wget added sample default) waste build time. step dependencies include toolkit dependencies, bitrise cli care installing automatically. a written golang list dependency uses go toolkit. the bitrise cli install step dependencies available homebrew package manager: deps:\n brew:\n - name: cmake it install apt-get dependencies available sources listed sources.list file host machine: deps:\n apt_get:\n - name: cmake " });
this.add({id:334, 
title:"Accessing files in the Step repo with an Env Var", 
body:" accessing files step repo with env var if need binary, assets required step bundled repository, include step.yml file code step. the bitrise cli automatically exports environment variable called bitrise_step_source_dir allows access files any time. for example, access .jar file root step’s repository like this: $bitrise_step_source_dir\/mytool.jar " });
this.add({id:334, 
title:"Accessing files in the Step repo with an Env Var", 
body:" accessing files step repo with env var if need binary, assets required step bundled repository, include step.yml file code step. the bitrise cli automatically exports environment variable called bitrise_step_source_dir allows access files any time. for example, access .jar file root step’s repository like this: $bitrise_step_source_dir\/mytool.jar " });
this.add({id:335, 
title:"Adding a Step icon", 
body:" adding step icon you add step icon step: see workflow editor integrations page. if want to, requirements: its background color transparent. size: 256x256 px. margin: 60 px. format: svg. verified steps please note wish submit step verification so verified step , add step icon. to submit step’s icon: add .svg file steplib fork repo at: steplib_fork_root\/steps\/your_step_id\/assets\/icon.svg . create new pull request steplib repository . " });
this.add({id:336, 
title:"Sharing Steps with all Bitrise users", 
body:" sharing steps with bitrise users if think bitrise step use others, share cli command workflow. shared steps actively maintained open contributors. if think step use others, share it! before doing so, however, check steps solve problem. you check: in list released steps . in list open pull requests steplib. in list closed pull requests steplib. if step missing particular feature, try contribute developing sharing brand new feature. you use integrations page search steps bitrise steplib. by clicking github source button given step’s page taken repository, submit feature request open pull request. also, mind shared steps actively maintained open contributors. " });
this.add({id:337, 
title:"Sharing a new Step", 
body:" sharing new step the sharing process relatively straightforward - make sure carefully new step. the bitrise share command during step development, help anytime simply running bitrise share. this print short guide sharing. there ways share step: you manually, using bitrise share command. if created step with plugin, run share-this-step workflow step’s directory. " });
this.add({id:338, 
title:"Before you start", 
body:" before start before start, make sure that: your step public git repository. the step.yml file contains support_url property points valid issue tracker (for example, issues page step’s github repository). the step.yml file contains source_code_url property points correct git url repository. sharing than step sharing than step - is, adding new step.yml file bitrise steplib separate pull requests! you open request contains step! if you’re ready, ahead with preferred sharing process! " });
this.add({id:339, 
title:"Sharing with the bitrise share command", 
body:" sharing with bitrise share command fork bitrise steplib repository. prepare forked steplib locally sharing: $ bitrise share start -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> add step version tag step’s repository. add step forked steplib repository: $ bitrise share create --tag [step-version-tag] --git [step-git-uri].git --stepid [step-id] optionally, perform complete health check forked steplib: $ bitrise share audit -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> review step’s step.yml file, you’re happy with it, finish share process: this commits pushes file forked steplib repository. $ bitrise share finish this commits pushes step.yml file forked steplib repository. open pull request official bitrise steplib repository. " });
this.add({id:340, 
title:"Sharing with the share-this-step Workflow", 
body:" sharing with share-this-step workflow the share-this-step workflow included bitrise.yml file step plugin automatically generates create new with it. using it, sharing incredibly easy: fork bitrise steplib repository. set required workflow environment variables app level bitrise.yml file: app: envs: - bitrise_step_id: bitrise_step_version: bitrise_step_git_clone_url: my_steplib_repo_fork_git_url: run share-this-step workflow bitrise cli: $ bitrise run share-this-step " });
this.add({id:341, 
title:"Fixing issues in a StepLib pull request", 
body:" fixing issues steplib pull request once submitted step version steplib, wait bitrise team review it. if ask changes: close pull request. delete share branch fork bitrise steplib. fix issues step repository. add new version tag commit contains fixes step repository. run share process again. hopefully, fixing issues, we’ll able merge pull request release step public! " });
this.add({id:342, 
title:"Abandoned Steps", 
body:" abandoned steps if step maintainer, reachable reasonable timeframe submits issue pull request step. try contact times regarding important fix\/update refuse answer weeks deprecate, remove replace collection! abandoned steps threat use it, mind decide share with others! the repository issue tracker removed, permanent links included step.yml bitrise steplib. if shared step versions continue function managed file hosting service share process. a new version step released, bitrise. if shared step you’re longer able willing maintain it, create github issue repository: bitrise steplib " });
this.add({id:343, 
title:"Reporting Step issues", 
body:" reporting step issues if you’re user step critical (security functionality) issues, create ticket step’s issue tracker. every declares preferred way reporting issues with support_url attribute. if don’t response step’s maintainer extended period (for than couple weeks) create github issue repository: https:\/\/github.com\/bitrise-io\/bitrise-steplib we’ll try resolve issue, following abandoned step policy. please patient mind contributes collection does so help providing use! " });
this.add({id:337, 
title:"Sharing a new Step", 
body:" sharing new step the sharing process relatively straightforward - make sure carefully new step. the bitrise share command during step development, help anytime simply running bitrise share. this print short guide sharing. there ways share step: you manually, using bitrise share command. if created step with plugin, run share-this-step workflow step’s directory. " });
this.add({id:338, 
title:"Before you start", 
body:" before start before start, make sure that: your step public git repository. the step.yml file contains support_url property points valid issue tracker (for example, issues page step’s github repository). the step.yml file contains source_code_url property points correct git url repository. sharing than step sharing than step - is, adding new step.yml file bitrise steplib separate pull requests! you open request contains step! if you’re ready, ahead with preferred sharing process! " });
this.add({id:339, 
title:"Sharing with the bitrise share command", 
body:" sharing with bitrise share command fork bitrise steplib repository. prepare forked steplib locally sharing: $ bitrise share start -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> add step version tag step’s repository. add step forked steplib repository: $ bitrise share create --tag [step-version-tag] --git [step-git-uri].git --stepid [step-id] optionally, perform complete health check forked steplib: $ bitrise share audit -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> review step’s step.yml file, you’re happy with it, finish share process: this commits pushes file forked steplib repository. $ bitrise share finish this commits pushes step.yml file forked steplib repository. open pull request official bitrise steplib repository. " });
this.add({id:340, 
title:"Sharing with the share-this-step Workflow", 
body:" sharing with share-this-step workflow the share-this-step workflow included bitrise.yml file step plugin automatically generates create new with it. using it, sharing incredibly easy: fork bitrise steplib repository. set required workflow environment variables app level bitrise.yml file: app: envs: - bitrise_step_id: bitrise_step_version: bitrise_step_git_clone_url: my_steplib_repo_fork_git_url: run share-this-step workflow bitrise cli: $ bitrise run share-this-step " });
this.add({id:341, 
title:"Fixing issues in a StepLib pull request", 
body:" fixing issues steplib pull request once submitted step version steplib, wait bitrise team review it. if ask changes: close pull request. delete share branch fork bitrise steplib. fix issues step repository. add new version tag commit contains fixes step repository. run share process again. hopefully, fixing issues, we’ll able merge pull request release step public! " });
this.add({id:338, 
title:"Before you start", 
body:" before start before start, make sure that: your step public git repository. the step.yml file contains support_url property points valid issue tracker (for example, issues page step’s github repository). the step.yml file contains source_code_url property points correct git url repository. sharing than step sharing than step - is, adding new step.yml file bitrise steplib separate pull requests! you open request contains step! if you’re ready, ahead with preferred sharing process! " });
this.add({id:339, 
title:"Sharing with the bitrise share command", 
body:" sharing with bitrise share command fork bitrise steplib repository. prepare forked steplib locally sharing: $ bitrise share start -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> add step version tag step’s repository. add step forked steplib repository: $ bitrise share create --tag [step-version-tag] --git [step-git-uri].git --stepid [step-id] optionally, perform complete health check forked steplib: $ bitrise share audit -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> review step’s step.yml file, you’re happy with it, finish share process: this commits pushes file forked steplib repository. $ bitrise share finish this commits pushes step.yml file forked steplib repository. open pull request official bitrise steplib repository. " });
this.add({id:340, 
title:"Sharing with the share-this-step Workflow", 
body:" sharing with share-this-step workflow the share-this-step workflow included bitrise.yml file step plugin automatically generates create new with it. using it, sharing incredibly easy: fork bitrise steplib repository. set required workflow environment variables app level bitrise.yml file: app: envs: - bitrise_step_id: bitrise_step_version: bitrise_step_git_clone_url: my_steplib_repo_fork_git_url: run share-this-step workflow bitrise cli: $ bitrise run share-this-step " });
this.add({id:341, 
title:"Fixing issues in a StepLib pull request", 
body:" fixing issues steplib pull request once submitted step version steplib, wait bitrise team review it. if ask changes: close pull request. delete share branch fork bitrise steplib. fix issues step repository. add new version tag commit contains fixes step repository. run share process again. hopefully, fixing issues, we’ll able merge pull request release step public! " });
this.add({id:342, 
title:"Abandoned Steps", 
body:" abandoned steps if step maintainer, reachable reasonable timeframe submits issue pull request step. try contact times regarding important fix\/update refuse answer weeks deprecate, remove replace collection! abandoned steps threat use it, mind decide share with others! the repository issue tracker removed, permanent links included step.yml bitrise steplib. if shared step versions continue function managed file hosting service share process. a new version step released, bitrise. if shared step you’re longer able willing maintain it, create github issue repository: bitrise steplib " });
this.add({id:343, 
title:"Reporting Step issues", 
body:" reporting step issues if you’re user step critical (security functionality) issues, create ticket step’s issue tracker. every declares preferred way reporting issues with support_url attribute. if don’t response step’s maintainer extended period (for than couple weeks) create github issue repository: https:\/\/github.com\/bitrise-io\/bitrise-steplib we’ll try resolve issue, following abandoned step policy. please patient mind contributes collection does so help providing use! " });
this.add({id:344, 
title:"Verified Steps", 
body:" verified steps verified steps bitrise owner guarantees secure, maintained, consistent, high-quality performance any user. to step verified, apply badge. " });
this.add({id:345, 
title:"What are Verified Steps?", 
body:" what verified steps? a step contains code performs specific build task. bitrise 300 steps step library (steplib) party companies open source teams enrich with steps based services\/tools. this means power roll updates step bitrise maintains overlaying control ensure service quality security. a verified step means owner service tool open source team guarantees secure, maintained, consistent, high-quality performance any bitrise user. our official steps maintained us, community community. it’s easy decide type falls gui. verified steps labeled with blue badge bitrise . official bitrise steps labeled with green badge. community created steps any badge. in guide explain how step verified bitrise. requirements for company owned services tools: your owner service tool used step apply verified badge. for open-source services tools: if member open source informal team, confirm with rest team sign applies steps submitting team. your step comply with service level agreement . your step icon. you include workflow recipe step become verified step. we strongly recommend consult with step development guidelines creating step. " });
this.add({id:346, 
title:"What is a Workflow Recipe?", 
body:" what workflow recipe? a workflow recipe template submitting step bitrise applying verified badge. you develop decide include recipe, turn one, submit well. workflow recipes published bitrise bitrise community learn how verified step used specific setup. should questions, turn partnership team partners@bitrise.io . " });
this.add({id:347, 
title:"Promoting your Verified Step", 
body:" promoting verified step as verified step program, commit taking than following co-marketing activities: in-app messaging. dedicated co-branded email campaign, newsletter mention. blog post content. how-to article, documentation, help center page. social media activities. webinars virtual events. podcasts. events (panels, fireside chats, video testimonials, sponsorship). case study\/whitepaper\/ebook\/ (shared research, testimonials, co-writing chapter, publishing others’ blogs). video content posted public youtube channel. joint pr campaigns. these co-marketing opportunities enable increase product’s content generation output, grow go-to-market plans, help drive integration adoption. you consult with bitrise partner manager ( partners@bitrise.io ) confirm co-marketing activities do, clarifying level involvement want based marketing plans. there interested single event so managed first-come, first-serve basis. " });
this.add({id:348, 
title:"Applying for a Verified badge", 
body:" applying verified badge create step based step development guideline . the step’s repository must github. share step bitrise-steplib new pull request checklist. when claassistant prompts you, sign contributor license agreement. until completed, merging blocked pr. please partnership form ! once submitted form, partner management team contact 5 business days discuss rest process. if any stage process wonder happens with step candidate covered steplib, head how step duplication ? " });
this.add({id:349, 
title:"Service level agreement for Verified Step authors", 
body:" service level agreement verified step authors anyone contribute verified step steplib creating issue pull request (pr). the author manage contribution (for example, issue, pr, any maintenance third-party changes) start finish. bitrise monitors open issues prs created steps contacts authors contributions handled. if fails described contributor license agreement sla, withdraws badge step. this ensure high quality meet users’ expectations. " });
this.add({id:350, 
title:"Managing contributions", 
body:" managing contributions the following guidelines aim help verified step authors categorize contributions. author responsible any contribution step. acknowledges adding label estimated time perform fix, merge pr. there labels use type contribution: critical-bug label means current feature set abnormal behavior, blocks users using step workaround fix issue. this critical bug fixed author. bug label means current feature set abnormal behavior, does block users using step workaround issue. this bug fixed author. feature-request label means new feature step requested. the verified author decide worth implementing. maintenance label means improving step’s source code way does add new features potential bugs step. the verified step author decide feature worth implementing not. rejected label means contribution gets rejected verified step author closed first response time, 5 business days. when rejecting contribution, provide explanation contributor time. accepted contribution means given: critical-bug, bug, feature, maintenance fixed\/merged given resolution time. first response time means 5 day window verified step author respond contribution with accepted rejected labels. resolution time means certain business days contribution (issue pr) completed verified step author. type first response time resolution time critical-bug 5 business days 10 business days bug 5 business days 15 business days feature-request 5 business days 20 business days maintenance 5 business days 20 business days " });
this.add({id:351, 
title:"How do we go about Step duplications?", 
body:" how step duplications? in general try steplib streamlined avoid step duplications build task. here questions answers comes any potential duplications. i was going submit step apply verified badge, official bitrise build task steplib. what do? submit step application process. once completed, deprecate official bitrise users use new verified step. i was going submit step apply verified badge, community build task. what do? submit step application process. your new verified community available steplib. i was going submit community step verified build task. what do? if verified step available steplib, reject community submission build task avoid duplication. we offer developer work future updates existing step. " });
this.add({id:345, 
title:"What are Verified Steps?", 
body:" what verified steps? a step contains code performs specific build task. bitrise 300 steps step library (steplib) party companies open source teams enrich with steps based services\/tools. this means power roll updates step bitrise maintains overlaying control ensure service quality security. a verified step means owner service tool open source team guarantees secure, maintained, consistent, high-quality performance any bitrise user. our official steps maintained us, community community. it’s easy decide type falls gui. verified steps labeled with blue badge bitrise . official bitrise steps labeled with green badge. community created steps any badge. in guide explain how step verified bitrise. requirements for company owned services tools: your owner service tool used step apply verified badge. for open-source services tools: if member open source informal team, confirm with rest team sign applies steps submitting team. your step comply with service level agreement . your step icon. you include workflow recipe step become verified step. we strongly recommend consult with step development guidelines creating step. " });
this.add({id:346, 
title:"What is a Workflow Recipe?", 
body:" what workflow recipe? a workflow recipe template submitting step bitrise applying verified badge. you develop decide include recipe, turn one, submit well. workflow recipes published bitrise bitrise community learn how verified step used specific setup. should questions, turn partnership team partners@bitrise.io . " });
this.add({id:347, 
title:"Promoting your Verified Step", 
body:" promoting verified step as verified step program, commit taking than following co-marketing activities: in-app messaging. dedicated co-branded email campaign, newsletter mention. blog post content. how-to article, documentation, help center page. social media activities. webinars virtual events. podcasts. events (panels, fireside chats, video testimonials, sponsorship). case study\/whitepaper\/ebook\/ (shared research, testimonials, co-writing chapter, publishing others’ blogs). video content posted public youtube channel. joint pr campaigns. these co-marketing opportunities enable increase product’s content generation output, grow go-to-market plans, help drive integration adoption. you consult with bitrise partner manager ( partners@bitrise.io ) confirm co-marketing activities do, clarifying level involvement want based marketing plans. there interested single event so managed first-come, first-serve basis. " });
this.add({id:346, 
title:"What is a Workflow Recipe?", 
body:" what workflow recipe? a workflow recipe template submitting step bitrise applying verified badge. you develop decide include recipe, turn one, submit well. workflow recipes published bitrise bitrise community learn how verified step used specific setup. should questions, turn partnership team partners@bitrise.io . " });
this.add({id:347, 
title:"Promoting your Verified Step", 
body:" promoting verified step as verified step program, commit taking than following co-marketing activities: in-app messaging. dedicated co-branded email campaign, newsletter mention. blog post content. how-to article, documentation, help center page. social media activities. webinars virtual events. podcasts. events (panels, fireside chats, video testimonials, sponsorship). case study\/whitepaper\/ebook\/ (shared research, testimonials, co-writing chapter, publishing others’ blogs). video content posted public youtube channel. joint pr campaigns. these co-marketing opportunities enable increase product’s content generation output, grow go-to-market plans, help drive integration adoption. you consult with bitrise partner manager ( partners@bitrise.io ) confirm co-marketing activities do, clarifying level involvement want based marketing plans. there interested single event so managed first-come, first-serve basis. " });
this.add({id:348, 
title:"Applying for a Verified badge", 
body:" applying verified badge create step based step development guideline . the step’s repository must github. share step bitrise-steplib new pull request checklist. when claassistant prompts you, sign contributor license agreement. until completed, merging blocked pr. please partnership form ! once submitted form, partner management team contact 5 business days discuss rest process. if any stage process wonder happens with step candidate covered steplib, head how step duplication ? " });
this.add({id:349, 
title:"Service level agreement for Verified Step authors", 
body:" service level agreement verified step authors anyone contribute verified step steplib creating issue pull request (pr). the author manage contribution (for example, issue, pr, any maintenance third-party changes) start finish. bitrise monitors open issues prs created steps contacts authors contributions handled. if fails described contributor license agreement sla, withdraws badge step. this ensure high quality meet users’ expectations. " });
this.add({id:350, 
title:"Managing contributions", 
body:" managing contributions the following guidelines aim help verified step authors categorize contributions. author responsible any contribution step. acknowledges adding label estimated time perform fix, merge pr. there labels use type contribution: critical-bug label means current feature set abnormal behavior, blocks users using step workaround fix issue. this critical bug fixed author. bug label means current feature set abnormal behavior, does block users using step workaround issue. this bug fixed author. feature-request label means new feature step requested. the verified author decide worth implementing. maintenance label means improving step’s source code way does add new features potential bugs step. the verified step author decide feature worth implementing not. rejected label means contribution gets rejected verified step author closed first response time, 5 business days. when rejecting contribution, provide explanation contributor time. accepted contribution means given: critical-bug, bug, feature, maintenance fixed\/merged given resolution time. first response time means 5 day window verified step author respond contribution with accepted rejected labels. resolution time means certain business days contribution (issue pr) completed verified step author. type first response time resolution time critical-bug 5 business days 10 business days bug 5 business days 15 business days feature-request 5 business days 20 business days maintenance 5 business days 20 business days " });
this.add({id:351, 
title:"How do we go about Step duplications?", 
body:" how step duplications? in general try steplib streamlined avoid step duplications build task. here questions answers comes any potential duplications. i was going submit step apply verified badge, official bitrise build task steplib. what do? submit step application process. once completed, deprecate official bitrise users use new verified step. i was going submit step apply verified badge, community build task. what do? submit step application process. your new verified community available steplib. i was going submit community step verified build task. what do? if verified step available steplib, reject community submission build task avoid duplication. we offer developer work future updates existing step. " });
this.add({id:352, 
title:"Creating your own Bitrise project scanner", 
body:" creating bitrise project scanner a bitrise project scanner scan result model. every platform writes possible options, configurations, warnings these translated step input values choosing desired given options. the project scanner tool identifies given project’s type generates basic bitrise configuration. each supported scanner: scanners stored separate packages. a project type scanner defines workflows : testing ( primary ) building ( deploy ). it includes minimal steps successfully run . build test steps build steps test specific requirements: a build  step build app so ready deployment output environment variable points file(s). for example, step ios .ipa file (not, say, .xcodearchive ) path .ipa file. a test step output test results so available viewing build page on bitrise.io. when adding new project website initializing machine, bitrise-init tool iterates scanner, calls scanner interface methods collects outputs. based outputs, basic configuration generated. the possible workflows described scan result model. model consists of: options configs warnings here basic structure model, yaml: options:\n detected_platform_1: optionmodel\n detected_platform_2: ...\n\nconfigs:\n detected_platform_1:\n config_name_1: configmodel\n config_name_2: ...\n detected_platform_2:\n ...\n\nwarnings:\n - \"warning message 1\"\n 2\"\n ... every platform scanner writes possible options, configurations warnings model. these translated step input values choosing desired given options. every option chain’s selects configuration. warnings display issues with given project setup. " });
this.add({id:353, 
title:"Options", 
body:" options options represents question possible answers question. for example: question: what path ios project files? possible answers: list possible paths check these questions answers translated step inputs. the scanner determine input value let user select type value. for example, xcode archive & export ios step input called export-method . this informs step type .ipa want export. the value determined based source code so scanner collects possible presents user form list choose from. selecting option start chain: lead different options presented afterwards. for example, select xcode scheme associated test targets, leads “questions”. similarly, selecting certain workflow generated " });
this.add({id:354, 
title:"The option model", 
body:" the option model the optionmodel represents input option. it looks like go: \/\/ optionmodel ...\ntype struct {\n title string\n envkey string\n\n childoptionmap map[string]*optionmodel\n config string\n} title : human readable input. envkey : represents input’s key step model. childoptionmap : map subsequent options user chooses given value option. for example, let’s see scenario choose value scheme input. you value_map options . the possible values are: schemewithtest schemewithouttest by choosing schemewithtest , option related simulator used perform test. by choosing schemewithouttest , option export method .ipa file. {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n ...\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n }\n }\n} every option chain first option: called head . the possible values options branch option chain. every option branch’s options config property set. config holds id generated bitrise configuration. an options chain’s options value_map . {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n \"-\": \"config\": \"bitrise_config_with_test\",\n }\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n \"development\": \"bitrise_config_without_test\",\n \"app-store\": \"ad-hoc\": }\n}\n " });
this.add({id:355, 
title:"Scanners", 
body:" scanners scanners generate possible options chains possible workflows options project type. the activescanner variable holds scanner implementation. every specific implements scannerinterface . \/\/ scannerinterface ...\ntype interface {\n name() string\n detectplatform(string) (bool, error)\n\n options() (models.optionmodel, models.warnings, error)\n configs() (models.bitriseconfigmap, defaultoptions() models.optionmodel\n defaultconfigs() excludedscannernames() []string\n} name() string : this method used logging storing scanner output (warnings, options configs). the stored map[scanner_name]output . for example, options ios project stored optionsmap[ios]options . detectplatform(string) (bool, error) : this method used determine given search directory contains project type not. options() (models.optionmodel, models.warnings, error) : this method used generate option branches project. each branch define complete valid set build final bitrise config model. every branch’s options store configuration id, filled with selected options. configs() (models.bitriseconfigmap, error) : this method used generate possible configs. bitriseconfigmap’s element bitrise config template fulfilled with user selected option values. defaultoptions() models.optionmodel defaultconfigs() (models.bitriseconfigmap, error) : these methods used generate options configs scanning given project. in case required step input value provided user. this way scanner fails, user option started. " });
this.add({id:356, 
title:"Testing a scanner", 
body:" testing scanner to test scanner, require unit tests integration tests. unit tests written using go’s standard testing library. for integration tests, validating project type scanners generating desired bitrise configurations instance type. to this, use new scanner scan given sample modify generated result fit tests. the reason modification scanners adding steps generated config, step versions updated time time. version definitions steps\/const.go . so bitrise-init --ci config sample project’s root directory, generated scan_result.yml file replace step versions with %s use fmt.sprintf inject latest defined step versions config. in integration tests, matching scan_result.yml file generated scanner with previously reference scan_result content. " });
this.add({id:357, 
title:"Submitting your own scanner", 
body:" submitting scanner you submit scanner bitrise: review integrate bitrise-init tool it’s approved! the development path new scanner starts with sample project ends updating existing steps type. let’s it! find create open source sample app demonstrates typical instance project type. it include: readme file (including tool versions required updating, building testing project). bitrise.yml file generated scanner. build test sample app with existing steps custom scripts. create missing steps new project type needs. the pr steps link scanner created scanner. create scanner project type. run required unit tests integration tests. open scanner pull request bitrise-init project. it should: link new project type’s sample app. link new project type’s guides testing building. include icon new project type - create you. recommend default stack listing required tools building testing new project type. update existing steps with new project type necessary. the pr steps link scanner pr. " });
this.add({id:353, 
title:"Options", 
body:" options options represents question possible answers question. for example: question: what path ios project files? possible answers: list possible paths check these questions answers translated step inputs. the scanner determine input value let user select type value. for example, xcode archive & export ios step input called export-method . this informs step type .ipa want export. the value determined based source code so scanner collects possible presents user form list choose from. selecting option start chain: lead different options presented afterwards. for example, select xcode scheme associated test targets, leads “questions”. similarly, selecting certain workflow generated " });
this.add({id:354, 
title:"The option model", 
body:" the option model the optionmodel represents input option. it looks like go: \/\/ optionmodel ...\ntype struct {\n title string\n envkey string\n\n childoptionmap map[string]*optionmodel\n config string\n} title : human readable input. envkey : represents input’s key step model. childoptionmap : map subsequent options user chooses given value option. for example, let’s see scenario choose value scheme input. you value_map options . the possible values are: schemewithtest schemewithouttest by choosing schemewithtest , option related simulator used perform test. by choosing schemewithouttest , option export method .ipa file. {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n ...\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n }\n }\n} every option chain first option: called head . the possible values options branch option chain. every option branch’s options config property set. config holds id generated bitrise configuration. an options chain’s options value_map . {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n \"-\": \"config\": \"bitrise_config_with_test\",\n }\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n \"development\": \"bitrise_config_without_test\",\n \"app-store\": \"ad-hoc\": }\n}\n " });
this.add({id:354, 
title:"The option model", 
body:" the option model the optionmodel represents input option. it looks like go: \/\/ optionmodel ...\ntype struct {\n title string\n envkey string\n\n childoptionmap map[string]*optionmodel\n config string\n} title : human readable input. envkey : represents input’s key step model. childoptionmap : map subsequent options user chooses given value option. for example, let’s see scenario choose value scheme input. you value_map options . the possible values are: schemewithtest schemewithouttest by choosing schemewithtest , option related simulator used perform test. by choosing schemewithouttest , option export method .ipa file. {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n ...\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n }\n }\n} every option chain first option: called head . the possible values options branch option chain. every option branch’s options config property set. config holds id generated bitrise configuration. an options chain’s options value_map . {\n \"title\": \"scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": \"schemewithtest\": \"simulator name\",\n \"simulator_name\",\n \"-\": \"config\": \"bitrise_config_with_test\",\n }\n },\n \"schemewithouttest\": \"export method\",\n \"export_method\",\n \"development\": \"bitrise_config_without_test\",\n \"app-store\": \"ad-hoc\": }\n}\n " });
this.add({id:355, 
title:"Scanners", 
body:" scanners scanners generate possible options chains possible workflows options project type. the activescanner variable holds scanner implementation. every specific implements scannerinterface . \/\/ scannerinterface ...\ntype interface {\n name() string\n detectplatform(string) (bool, error)\n\n options() (models.optionmodel, models.warnings, error)\n configs() (models.bitriseconfigmap, defaultoptions() models.optionmodel\n defaultconfigs() excludedscannernames() []string\n} name() string : this method used logging storing scanner output (warnings, options configs). the stored map[scanner_name]output . for example, options ios project stored optionsmap[ios]options . detectplatform(string) (bool, error) : this method used determine given search directory contains project type not. options() (models.optionmodel, models.warnings, error) : this method used generate option branches project. each branch define complete valid set build final bitrise config model. every branch’s options store configuration id, filled with selected options. configs() (models.bitriseconfigmap, error) : this method used generate possible configs. bitriseconfigmap’s element bitrise config template fulfilled with user selected option values. defaultoptions() models.optionmodel defaultconfigs() (models.bitriseconfigmap, error) : these methods used generate options configs scanning given project. in case required step input value provided user. this way scanner fails, user option started. " });
this.add({id:356, 
title:"Testing a scanner", 
body:" testing scanner to test scanner, require unit tests integration tests. unit tests written using go’s standard testing library. for integration tests, validating project type scanners generating desired bitrise configurations instance type. to this, use new scanner scan given sample modify generated result fit tests. the reason modification scanners adding steps generated config, step versions updated time time. version definitions steps\/const.go . so bitrise-init --ci config sample project’s root directory, generated scan_result.yml file replace step versions with %s use fmt.sprintf inject latest defined step versions config. in integration tests, matching scan_result.yml file generated scanner with previously reference scan_result content. " });
this.add({id:357, 
title:"Submitting your own scanner", 
body:" submitting scanner you submit scanner bitrise: review integrate bitrise-init tool it’s approved! the development path new scanner starts with sample project ends updating existing steps type. let’s it! find create open source sample app demonstrates typical instance project type. it include: readme file (including tool versions required updating, building testing project). bitrise.yml file generated scanner. build test sample app with existing steps custom scripts. create missing steps new project type needs. the pr steps link scanner created scanner. create scanner project type. run required unit tests integration tests. open scanner pull request bitrise-init project. it should: link new project type’s sample app. link new project type’s guides testing building. include icon new project type - create you. recommend default stack listing required tools building testing new project type. update existing steps with new project type necessary. the pr steps link scanner pr. " });
this.add({id:356, 
title:"Testing a scanner", 
body:" testing scanner to test scanner, require unit tests integration tests. unit tests written using go’s standard testing library. for integration tests, validating project type scanners generating desired bitrise configurations instance type. to this, use new scanner scan given sample modify generated result fit tests. the reason modification scanners adding steps generated config, step versions updated time time. version definitions steps\/const.go . so bitrise-init --ci config sample project’s root directory, generated scan_result.yml file replace step versions with %s use fmt.sprintf inject latest defined step versions config. in integration tests, matching scan_result.yml file generated scanner with previously reference scan_result content. " });
this.add({id:357, 
title:"Submitting your own scanner", 
body:" submitting scanner you submit scanner bitrise: review integrate bitrise-init tool it’s approved! the development path new scanner starts with sample project ends updating existing steps type. let’s it! find create open source sample app demonstrates typical instance project type. it include: readme file (including tool versions required updating, building testing project). bitrise.yml file generated scanner. build test sample app with existing steps custom scripts. create missing steps new project type needs. the pr steps link scanner created scanner. create scanner project type. run required unit tests integration tests. open scanner pull request bitrise-init project. it should: link new project type’s sample app. link new project type’s guides testing building. include icon new project type - create you. recommend default stack listing required tools building testing new project type. update existing steps with new project type necessary. the pr steps link scanner pr. " });
this.add({id:358, 
title:"Workflows", 
body:" workflows a bitrise workflow collection steps. when build app running, step executed order defined workflow. a bitrise workflow collection steps. when build app running, step executed order defined workflow. workflows created, modified ways: using graphical workflow editor bitrise.io , offline version device . directly editing bitrise.yml file project. ultimately, methods modify bitrise.yml file - workflow editor simply friendlier way doing so! by default, single build single workflow. but chain workflows so run succession, trigger multiple workflow simultaneously. workflows arranged pipelines . a pipeline consists multiple stages stage workflows run parallel. " });
this.add({id:359, 
title:"Default Workflows", 
body:" default workflows when add new app bitrise.io , workflows created automatically, depending app. when add new app bitrise.io , workflows created automatically, depending app . you use workflows basis bitrise configuration. " });
this.add({id:360, 
title:"The primary Workflow", 
body:" the primary workflow the primary workflow automatically created adding new app. once process app over, bitrise triggers app’s first build automatically: runs with primary workflow. the primary workflow app create: contains different steps depending project type. for example, android project’s primary workflow include install missing android sdk components , android lint android unit test steps. but overall, primary basic workflow performs following actions: activates ssh key, added app. the step saves file loads user’s ssh-agent with ssh-add command. the step, default, does run ssh key added. clones git repository project with git clone repository step. runs bitrise.io cache:pull bitrise.io cache:push steps. deploys build artifacts with deploy bitrise.io step. " });
this.add({id:361, 
title:"The deploy Workflow", 
body:" the deploy workflow the deploy workflow automatically created adding new app tests configured app. it similar primary number ways: it basic steps. its specific steps dependent project type. the deploy workflow, however, contains steps build project, and, successful, produces necessary artifacts installing app deploying online. for example, android project’s deploy workflow contains android build step builds project with gradle, android sign step creates signed apk deployed google play installed test devices. " });
this.add({id:360, 
title:"The primary Workflow", 
body:" the primary workflow the primary workflow automatically created adding new app. once process app over, bitrise triggers app’s first build automatically: runs with primary workflow. the primary workflow app create: contains different steps depending project type. for example, android project’s primary workflow include install missing android sdk components , android lint android unit test steps. but overall, primary basic workflow performs following actions: activates ssh key, added app. the step saves file loads user’s ssh-agent with ssh-add command. the step, default, does run ssh key added. clones git repository project with git clone repository step. runs bitrise.io cache:pull bitrise.io cache:push steps. deploys build artifacts with deploy bitrise.io step. " });
this.add({id:361, 
title:"The deploy Workflow", 
body:" the deploy workflow the deploy workflow automatically created adding new app tests configured app. it similar primary number ways: it basic steps. its specific steps dependent project type. the deploy workflow, however, contains steps build project, and, successful, produces necessary artifacts installing app deploying online. for example, android project’s deploy workflow contains android build step builds project with gradle, android sign step creates signed apk deployed google play installed test devices. " });
this.add({id:362, 
title:"Creating a Workflow", 
body:" creating workflow you create new bitrise workflows based any existing ones, simply workflow add steps yourself. it’s simple create workflow with workflow editor. you create new workflows based any existing ones, simply add steps yourself. if, example, create workflow based primary one, means created with exact steps input values primary workflow. open app bitrise . click workflows button main page. on workflows & pipelines page, click create workflow button. in pop-up window, workflow name. the long wish longer titles broken multiple lines so read title conveniently. from dropdown menu labeled based on , select workflow want use basis new one. alternatively, choose empty workflow option create workflow. add steps need workflow. click + symbol steps insert step position. remove need clicking little trash bin symbol. click save right corner. " });
this.add({id:363, 
title:"Managing Workflows", 
body:" managing workflows you chain multiple workflows, rearrange order workflows chain, rename any time bitrise workflow editor. you chain multiple workflows , rearrange order workflows chain, rename any time bitrise workflow editor. offline workflow editor the workflow editor available online offline: you use online bitrise.io. you use offline workflow editor . " });
this.add({id:364, 
title:"The Workflows & Pipelines screen", 
body:" the workflows & pipelines screen the workflows & pipelines page provides overview workflows pipelines fundamental structural elements bitrise configuration. to workflows & pipelines page, open app bitrise click workflows button. on page, can: view list workflows pipelines. for automatically generated default workflows , see brief summary function. you filter any workflow pipeline name. start schedule build. you so clicking start\/schedule build button workflow pipeline want build click run build button name. in case latter, start build dialogue window selected workflow pipeline set. for information starting builds, see: starting builds . enter workflow editor create new workflow: click create workflow button. for information creating workflows, see creating a workflow . enter workflow editor edit selected clicking edit workflow name. for pipeline, button takes bitrise.yml tab workflow editor edit app's bitrise.yml configuration file. you choose bitrise.yml tab directly: click edit bitrise.yml button. read bitrise.yml file: basics of bitrise.yml . if need additional resources, click help button page read guides getting started with bitrise. " });
this.add({id:365, 
title:"Chaining Workflows together", 
body:" chaining workflows you set multiple workflows run succession. the order rearranged, new added chain existing removed any time. bitrise start build step be aware chain workflows described guide, run virtual machine. however, use bitrise start build step, triggered workflows run separate virtual machine: starting parallel builds with a single trigger . open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click ellipsis (...) button right workflow. from dropdown menu, select insert workflow chain workflow currently selected select insert workflow chain workflow currently selected one. click save right corner. chaining workflows yaml in example, we're chaining workflows: test , deploy , ci , using before_run after_run parameters. workflows:\n test:\n envs:\n - is_test: \"true\"\n steps:\n # test steps run\n\n deploy:\n before_run:\n test\n steps deploy\n\n ci:\n after_run:\n for information how manage workflows directly bitrise.yml file, check workflow reference . " });
this.add({id:366, 
title:"Rearranging chained Workflows", 
body:" rearranging chained workflows once chain, easily rearrange order workflows drag-and-drop menu. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click ellipsis (...) button right workflow. from dropdown menu, select change workflow execution order bring drag-and-drop menu rearrange workflows chain. click save right corner. " });
this.add({id:367, 
title:"Renaming Workflows", 
body:" renaming workflows rename workflows any time feel necessary: it’s quick simple. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click rename workflow. type new click check mark save name. click save right corner. " });
this.add({id:368, 
title:"Utility Workflows", 
body:" utility workflows bitrise supports special type workflow called utility workflow. a workflow's id starts with underscore character: example, _setup . they usually used perform tasks required start end different workflows: example, separate git cloning activating ssh key utility workflow instead adding steps app. you create utility workflow exact way create regular one. to denote utility workflow, just need prefix with underscore. utility workflows run alone utility workflows run standalone workflows. they need chained with normal workflow, workflow: chaining workflows together . utility workflow yaml in example, utility workflows, called _setup _send-notifications . they chained with workflows called test ci using before_run after_run parameters. workflows:\n _send-notifications:\n steps:\n # send notifications\n\n _setup:\n setup steps run\n\n test:\n before_run:\n - _setup\n envs:\n is_test: \"true\"\n test ci:\n test\n after_run:\n _send-notifications for information how manage workflows directly bitrise.yml file, check workflow reference . " });
this.add({id:364, 
title:"The Workflows & Pipelines screen", 
body:" the workflows & pipelines screen the workflows & pipelines page provides overview workflows pipelines fundamental structural elements bitrise configuration. to workflows & pipelines page, open app bitrise click workflows button. on page, can: view list workflows pipelines. for automatically generated default workflows , see brief summary function. you filter any workflow pipeline name. start schedule build. you so clicking start\/schedule build button workflow pipeline want build click run build button name. in case latter, start build dialogue window selected workflow pipeline set. for information starting builds, see: starting builds . enter workflow editor create new workflow: click create workflow button. for information creating workflows, see creating a workflow . enter workflow editor edit selected clicking edit workflow name. for pipeline, button takes bitrise.yml tab workflow editor edit app's bitrise.yml configuration file. you choose bitrise.yml tab directly: click edit bitrise.yml button. read bitrise.yml file: basics of bitrise.yml . if need additional resources, click help button page read guides getting started with bitrise. " });
this.add({id:365, 
title:"Chaining Workflows together", 
body:" chaining workflows you set multiple workflows run succession. the order rearranged, new added chain existing removed any time. bitrise start build step be aware chain workflows described guide, run virtual machine. however, use bitrise start build step, triggered workflows run separate virtual machine: starting parallel builds with a single trigger . open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click ellipsis (...) button right workflow. from dropdown menu, select insert workflow chain workflow currently selected select insert workflow chain workflow currently selected one. click save right corner. chaining workflows yaml in example, we're chaining workflows: test , deploy , ci , using before_run after_run parameters. workflows:\n test:\n envs:\n - is_test: \"true\"\n steps:\n # test steps run\n\n deploy:\n before_run:\n test\n steps deploy\n\n ci:\n after_run:\n for information how manage workflows directly bitrise.yml file, check workflow reference . " });
this.add({id:366, 
title:"Rearranging chained Workflows", 
body:" rearranging chained workflows once chain, easily rearrange order workflows drag-and-drop menu. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click ellipsis (...) button right workflow. from dropdown menu, select change workflow execution order bring drag-and-drop menu rearrange workflows chain. click save right corner. " });
this.add({id:367, 
title:"Renaming Workflows", 
body:" renaming workflows rename workflows any time feel necessary: it’s quick simple. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click rename workflow. type new click check mark save name. click save right corner. " });
this.add({id:368, 
title:"Utility Workflows", 
body:" utility workflows bitrise supports special type workflow called utility workflow. a workflow's id starts with underscore character: example, _setup . they usually used perform tasks required start end different workflows: example, separate git cloning activating ssh key utility workflow instead adding steps app. you create utility workflow exact way create regular one. to denote utility workflow, just need prefix with underscore. utility workflows run alone utility workflows run standalone workflows. they need chained with normal workflow, workflow: chaining workflows together . utility workflow yaml in example, utility workflows, called _setup _send-notifications . they chained with workflows called test ci using before_run after_run parameters. workflows:\n _send-notifications:\n steps:\n # send notifications\n\n _setup:\n setup steps run\n\n test:\n before_run:\n - _setup\n envs:\n is_test: \"true\"\n test ci:\n test\n after_run:\n _send-notifications for information how manage workflows directly bitrise.yml file, check workflow reference . " });
this.add({id:369, 
title:"Copying Workflows from one app to another", 
body:" copying workflows app you copy existing bitrise workflow any bitrise.yml file, including local files. if lot apps , want spend time with setting workflows separately, especially there’s little difference workflows want run them. if so, easiest thing simply copy existing workflow. yaml mode copying workflow app possible yaml mode. you create new workflow based existing app. you copy workflow any bitrise.yml file, including local files. to copy existing workflow bitrise app website: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select bitrise.yml navigation menu. select workflow want copy it. open app want copy to. go workflow tab bitrise.yml tab. paste workflow workflows property. " });
this.add({id:370, 
title:"Builds", 
body:" builds a bitrise build specified app’s workflow which collection of steps. the app’s configuration modified the bitrise.yml file or graphical workflow editor. a bitrise build series jobs, specified app’s workflow collection steps . the app’s build configuration specified bitrise.yml configuration file modify bitrise.io ’s graphical workflow editor locally. the file stored bitrise.io app's git repository . when build running, scripts define steps executed order you’ve defined workflow, with input parameters set. they produce multiple different outputs use, including limited executable binaries, screenshots, test reports, variables, so on. the build process following: starting build , manually automatic trigger. environment preparation: a virtual machine provisioned prepared run build. build specific environment variables preset so use steps. you information available stacks workflow editor, stack tab. workflow execution: steps workflows executed order defined editor application, bottom. you reorder dragging around. the log step generates displayed build’s details page. cleanup: after execution build, build log created stored bitrise server. the virtual machine running build destroyed so code\/files fall wrong hands. build retention 200 days on builds page app, builds 200 days. the limit applies searching specific builds page. this limitation applies api calls: get\/apps\/{app-slug}\/builds endpoint related endpoints return builds 200 days. however, methods build older than 200 days: if know exact build url, access build. you use get\/apps\/{app-slug}\/archived-builds api endpoint: listing the archived builds of an app . after build finished, users notified email , set slack integration , example. " });
this.add({id:371, 
title:"Configuring build settings", 
body:" configuring build settings the heart build bitrise.yml file. you configure steps use, project type, trigger map, specify app- workflow-level env vars. you configure customize builds extensively. bitrise provides multitude options make sure build app exactly way want to. the heart build configuration bitrise.yml file: file contains configuration workflows steps use, specifies project type, trigger map, contains app- workflow-level environment variables specified. you store file bitrise.io git repository access bitrise.yml file any previous build ran. you configure notifications so users immediately notified build finished. if don't want run build time commit pushed pull request opened, certain files changed, using selective builds feature. if commits frequently pushed repository, with commit triggering new build, don't wait triggered build finishes start. use rolling builds feature make sure don't waste time! " });
this.add({id:372, 
title:"Setting the stack for your builds", 
body:" setting stack builds the build stack indicates virtual machine version bitrise use run build. you set builds, workflow-specific stacks, workflow editor bitrise.yml file. the build stack indicates virtual machine version use run build. you set stack builds, set workflow -specific stacks. changing machine types using api you change build machine types apps owned single user workspace using api: changing machine types in all apps at the same time . " });
this.add({id:373, 
title:"Setting the stack in the Workflow Editor", 
body:" setting stack workflow editor the simplest way configure build stack workflow editor . you set default stack workflow-specific stacks. " });
this.add({id:374, 
title:"Setting the default stack", 
body:" setting default stack the default stack app used haven't set specific workflow. project type note change project type app's settings tab type isn't compatible with selected default stack, we'll automatically change stack one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . in default stack section, open dropdown menu select stack need. click save right corner. " });
this.add({id:375, 
title:"Setting a Workflow-specific stack", 
body:" setting workflow-specific stack when set stack workflow, workflow run stack, regardless default stack. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . scroll workflow need. select stack. click save right corner. " });
this.add({id:376, 
title:"Setting the machine type in the Workflow Editor", 
body:" setting machine type workflow editor you define machine type want use build workflow editor. the available types depend stack use: table 13, “ . to set machine type: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . in default stack section, machine type default stack section choose machine type. optionally, choose workflow-specific machine type any workflow stack set. " });
this.add({id:377, 
title:"Setting the stack in the bitrise.yml file", 
body:" setting stack bitrise.yml file you set default stack workflow-specific tasks bitrise.yml file app. use meta field with appropriate stack id: meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x this particularly useful bitrise.yml file stored app's repository . stack ids you stack ids report: bitrise stack reports . alternatively, set stack workflow editor check id bitrise.yml tab, finding meta field. the stack reports pre-installed tool available stack. " });
this.add({id:378, 
title:"Setting the default stack in the bitrise.yml", 
body:" setting default stack bitrise.yml the default stack app used haven't set specific workflow. open app's bitrise.yml file. add meta entry outside workflows property end bitrise.yml file: meta:      \n bitrise.io:       \n stack:  make sure use double indentation. add stack id. you stack ids reports page : filenames .log extension stack ids. meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " });
this.add({id:379, 
title:"Setting Workflow-specific stacks in the bitrise.yml", 
body:" setting workflow-specific stacks bitrise.yml when set stack workflow, workflow run stack, regardless default stack. open app's bitrise.yml file. find workflows property workflow need within. add meta entry workflow itself: workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack:  add stack id. you stack ids stack report page . workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " });
this.add({id:380, 
title:"Setting the machine type in the bitrise.yml file", 
body:" setting machine type bitrise.yml file you define machine type want use build bitrise.yml app. machine type refers hardware resources used build; example, elite machine cpu cores available ram than standard machine. to set machine type bitrise.yml file, need use machine_type_id attribute meta entry: available machine ids you available machine type ids here: build machine types . open app's bitrise.yml file. find workflows property workflow need within. add meta entry: # setting 8-core gen2 machine xcode stack default type app:\nmeta:\n bitrise.io:\n machine_type_id: g2.8core\n# 12-core workflow-specific type\nworkflows:\n deploy: \n meta: bitrise.io: g2.12core " });
this.add({id:381, 
title:"Build machine types", 
body:" build machine types bitrise offers multiple build machines with different specifications credit costs. you choose based needs. bitrise offers multiple build machines with different specifications credit costs. you choose based needs. you track how time spent building apps machine type with insights: utilization metrics . machine availability subscription plan not machines available subscription plans. visit pricing page machines available plan! macos machines with intel cpu deprecated macos build machines with intel cpus deprecated. do use app's configuration. instead apple silicon m1 machines. transitioning apple intel silicon bitrise build machine types operating machine type cpu ram credit cost minute machine type id yaml configuration macos m1 medium 4 cpu @3.2ghz 6 gb 2\/min g2-m1.4core m1 large 8 cpu @3.2 ghz 12 gb 4\/min g2-m1.8core m1 max medium 5 cpu @3.2 ghz 27 gb 6\/min g2-m1-max.5core m1 max large 10 cpu @3.2 ghz 54 gb 8\/min g2-m1-max.10core linux medium 4 vcpu @3.1 ghz 16 gb 1\/min standard large 8 vcpu @3.1 ghz 32 gb 2\/min elite x large 16 vcpu @3.1 ghz 64 gb 4\/min elite-xl " });
this.add({id:382, 
title:"Managing an app's bitrise.yml file", 
body:" managing app's bitrise.yml file the heart build bitrise.yml file. you configure steps use, project type, trigger map, specify app- workflow-level env vars. the bitrise.yml file heart bitrise setup: stores entire build configuration app . it specifies stack, trigger map, workflows steps included. when edit workflows graphical ui workflow editor, actually modify bitrise.yml file. yaml files size limitation please note total, combined size bitrise.yml bitrise.secrets.yml file exceed 400kb. there ways manage bitrise.yml file app: keep file git repository: with solution, control maintaining versioning bitrise.yml file. keep bitrise.io : bitrise store configuration, access any time website. with solution, configuration file fully independent repository. you switch solutions any time. bitrise.yml reference you detailed reference information bitrise.yml file relevant guide: basics of bitrise.yml . " });
this.add({id:383, 
title:"Storing the bitrise.yml file in your repository", 
body:" storing bitrise.yml file repository privately hosted repositories unfortunately, feature supported users can't use service credential user integration github app integration ; example, repository accessible private ip subnet. there's workaround, however: storing bitrise.yml privately hosted repository . this workaround works, example, bitbucket server users. for github enterprise, offer integration allows store bitrise.yml file github enterprise repository: integrating self-hosted github enterprise server with bitrise . when store bitrise.yml configuration file repository, build process bitrise use run builds. this means that: you control versioning configuration file. every time make change workflows trigger map, commit changes file repository. you don’t need create bitrise.yml file advance: use stored bitrise.io . let's see how store bitrise.yml file repository does contain yet. the feature requires service credential integration. if service credential user supported, feature won't work. multiple apps with repository you store single bitrise.yml file given repository. bitrise look root directory, such, currently there’s way include separate folders. if code multiple apps repository, recommend using different workflows apps. open app bitrise app settings page. select collaboration . check service credential user section. the service credential user bitrise read access repository. open workflow editor. in workflow editor, select bitrise.yml navigation menu left. click store app repository . when prompted add bitrise.yml app's repository, options: copy content current bitrise.yml file clipboard. you create copy contents it. download current bitrise.yml file. in repository, commit bitrise.yml file root default branch. the default branch app bitrise.yml file it. you store different bitrise.yml files branches: storing a bitrise.yml file on multiple branches in the repository . you check bitrise app's default branch bitrise.io going settings tab finding default branch option. on bitrise, click update setting . when prompted make sure bitrise.yml file valid, click continue . make sure file valid the bitrise.yml file repository valid! if contains incorrect syntax, break builds. if goes well, receive confirmation successfully changing bitrise.yml storage settings. allowlist bitrise website ip addresses if use form self-hosted solution storing code, need allowlist static ip addresses bitrise website background workers. this allows features bitrise.yml file repository, receiving build status updates bitrise: ip address ranges for bitrise backend workers . " });
this.add({id:384, 
title:"Updating a bitrise.yml stored in the repository", 
body:" updating bitrise.yml stored repository when store bitrise.yml file repository, use online workflow editor make changes build configuration. you just need commit saving editor: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. make changes workflows want update. click save right corner. you're prompted update bitrise.yml file repository. you options: copy content current bitrise.yml file clipboard. you create copy contents it. download current bitrise.yml file. in repository, commit bitrise.yml file. on bitrise, click i'm fetch bitrise.yml repository. commit changes first! if haven't committed changes repository, overwrite them! " });
this.add({id:385, 
title:"Storing a bitrise.yml file on multiple branches in the repository", 
body:" storing bitrise.yml file multiple branches repository when first add bitrise.yml repository, committed default branch. you check app’s branch bitrise.io settings tab. if choose store bitrise.yml file repository, default branch bitrise.yml ! however, did initial configuration set using bitrise.yml repository, store bitrise.yml files branches use any run builds. if want build branch repository bitrise, need bitrise.yml file branch. and don’t forget need bitrise.yml file default branch. bitrise setup with bitrise.yml files multiple branches let’s say app called fantasticapp. in fantasticapp’s git repository, default branch main . there deploy branch. any code push pull request main triggers workflow called main-workflow . any code push pull request deploy triggers workflow called deploy-workflow . in repository, bitrise.yml file main deploy branch, containing workflows. when making changes workflows, fantasticapp team commits modified bitrise.yml file branches ensure workflows date both. " });
this.add({id:386, 
title:"Moving the bitrise.yml file back to bitrise.io", 
body:" moving bitrise.yml file bitrise.io the default setting store bitrise.yml file bitrise.io : add new app, automatically create bitrise.yml file it’s stored website. if works you, don’t need change anything! if, however, changed storage settings configuration file repository, easily change any time store bitrise.io . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. in workflow editor, select bitrise.yml navigation menu left. click store bitrise.io . choose bitrise.yml file used bitrise.io now. you copy content bitrise.yml file stored app’s repository. you copy version bitrise.yml file used bitrise.io . click update setting . if goes well, receive confirmation successfully changing bitrise.yml storage settings. " });
this.add({id:387, 
title:"Editing the app's bitrise.yml file", 
body:" editing app's bitrise.yml file you edit file bitrise.io, graphical workflow editor, download locally. whenever modify step you're indirectly editing app's bitrise.yml configuration file. whenever modify workflow step workflow editor, you're indirectly editing app's bitrise.yml configuration file. however, prefer, edit file directly, yaml. this requires familiarity with structure bitrise.yml file. read more: basics of bitrise.yml you edit file bitrise.io, graphical workflow editor, download locally. " });
this.add({id:388, 
title:"Editing the bitrise.yml file online", 
body:" editing bitrise.yml file online you edit build config yml format bitrise.yml editor app’s workflow editor click bitrise.yml tab. fold unfold with - + signs. press ctrl \/ cmd + f search replace with regexp , match whole word , case-sensitive, case-insensitive, search selected section. use preview sidebar right easier navigation. to save changes, click save right corner. to download current bitrise.yml file, click download currently saved config . alternatively, simply select certain sections file copy local bitrise.yml file app's bitrise.yml file. " });
this.add({id:389, 
title:"Editing the bitrise.yml file locally", 
body:" editing bitrise.yml file locally our yml scheme shared schemastore . this means syntax highlight auto-completion available following files edit locally: bitrise.yml step.yml bitrise.json the following editors support auto-complete feature: intellij idea phpstorm pycharm rider rubymine visual studio 2013+ visual studio code visual studio mac webstorm jsonbuddy " });
this.add({id:390, 
title:"Accessing a build's bitrise.yml file", 
body:" accessing build's bitrise.yml file you access build's bitrise.yml file selecting build app's dashboard 'show bitrise.yml' drop-down menu. once ran build bitrise, check bitrise.yml configuration build used. you download it, compare current bitrise.yml file, replace current configuration file with build's file. to access build's configuration file: select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select show bitrise.yml . " });
this.add({id:391, 
title:"Checking changes in the bitrise.yml file", 
body:" checking changes bitrise.yml file once you’ve clicked show bitrise.yml , see build’s bitrise yml pop-up window displaying builds’ configuration details. if build’s bitrise.yml content differs current build’s bitrise.yml , see editors displayed side-by-side bitrise.yml changes pop-up window. the differences builds highlighted following colors: green means added content. blue means modified content. red means deleted content. " });
this.add({id:392, 
title:"Restoring the current bitrise.yml to the build's bitrise.yml", 
body:" restoring current bitrise.yml build's you change current bitrise.yml configuration app's previous builds. to so: select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select show bitrise.yml . in bitrise.yml changes pop-up window, click restore button. hit ok are sure? pop-up window confirm override current bitrise.yml . " });
this.add({id:393, 
title:"Deleting a build's bitrise.yml file", 
body:" deleting build's bitrise.yml file if wish, simply delete build’s bitrise.yml file. but note action undone: able view particular build’s bitrise.yml file delete it. select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select delete bitrise.yml . in confirmation window, click yes . " });
this.add({id:394, 
title:"Selective builds", 
body:" selective builds the selective builds setting provides change detection builds. enabling allows trigger build app certain files folders modified. using build triggers instead this legacy feature. instead using feature, configure build triggers trigger builds certain files folders changed: so, create new push pull request events, choose files changed trigger condition. we strongly recommend using option instead selective builds. the selective builds setting provides change detection builds. enabling allows trigger build app certain files folders modified. you want use setting if: you monorepo; is, build multiple apps single repository. multiple apps share common files repository. selective builds with non-github projects the current version selective builds feature works with github projects. if repository hosted git hosting service, option available. using selective builds feature let's say want make sure commit app's repository triggers bitrise build mycode.go file develop branch modified commit. in example, branch called  develop . you trigger starts build time code push happens the  develop  branch. in selective builds feature, specified the  mycode.go  file input field. if make commit develop branch modifies mycode.go file, bitrise trigger build. if commit doesn't modify file any way, to configure selective builds: open app bitrise with user admin role app . on main page app, click app settings icon: . make sure appropriate service credential user set integrations page. this user admin right github repository project. click app dashboard . on left, select builds . find selective builds section. click add path button. can't button? if can't button - like screenshot -, possible reasons: the app's repository isn't hosted github. the service credential user isn't set correctly doesn't admin rights repo. in pop-up window, set paths need. you add path time. " });
this.add({id:395, 
title:"Using patterns in the file name or file path", 
body:" using patterns file path you need set exact file path selective builds feature: patterns. using regular expressions supported pattern contain certain metacharacters: * : matches files. a* : matches files beginning with a. *a : matches files ending with a. *a* : matches files (including beginning end). ** : matches directories recursively. ? : matches any character. \\ : escapes metacharacter. [set] : matches any character set. " });
this.add({id:396, 
title:"Rolling builds", 
body:" rolling builds with rolling builds feature, configure bitrise automatically abort on-hold running build triggered branch. you cancel running builds hold - need abort manually! if turn rolling builds feature, previous builds app automatically aborted new started. please note manual scheduled builds cancelled start new build with rolling builds option enabled. when build aborted? if trigger build branch running, running aborted runs workflow . for example, trigger build master branch repository with deploy workflow, not cancel build running master branch with primary workflow. you set types triggered builds wish abort. let’s see how! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . find rolling builds section. select type(s) builds wish abort new build started. enabling options following: enabled pull requests : cancel previous builds on-hold pull requests related pushes. running builds canceled unless running builds aborted enabled. enabled pushes : cancel previous builds on-hold pushes branch. running builds canceled unless running builds aborted enabled. running builds aborted : auto-cancel running builds addition on-hold ones. all done! from on, don’t wait triggered build finish need it! " });
this.add({id:397, 
title:"Configuring email notifications", 
body:" configuring email notifications bitrise's built-in email notification sends emails builds user assigned work application. they sent build finished configured successful failed builds. notifications updates activity bitrise. usually, concern state builds receive notifications lot different things. our built-in email notification sends emails builds user assigned work application . they sent build finished configured successful failed builds. watching app to receive automatic email messages, need watching app . if turn watching, won’t receive automated emails. email notifications automatically set applications first creating modify notification settings any time: changing your email notification settings the alternative solution send emails dedicated step . this allows far customization regarding notifications: sending emails with a step" });
this.add({id:398, 
title:"Watching an app", 
body:" watching app watching app means getting email notifications app. this default setting create invited to. turning watching no longer get automatic notifications. to toggle feature, dashboard open app want watch unwatch. on right, see button with label watching watching app currently. if not, button watch . toggle it. " });
this.add({id:399, 
title:"Changing your email notification settings", 
body:" changing email notification settings email notifications automatically set applications first creating them. there possible settings successful builds failed builds: always . this default setting failed builds. never . send email build status changes branch . this default setting successful builds. means build #1 #2 succeeded, notification #2. however, #3 fails #4 succeeds again, notified. you change email notification settings any time - completely disable them. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select notifications . scroll email notifications. select settings need successful failed builds appropriate dropdown menu. for example, want disable receiving notifications, set options never . " });
this.add({id:400, 
title:"Sending emails with a Step", 
body:" sending emails with step the send email with mailgun step send emails any email address with customized updates, html plain text format. you use environment variables information, attach files emails. to use step, need: a mailgun account. a mailgun api key. your mailgun domain name. make sure step runs build! if use send email with mailgun step workflow, make sure set run previous step failed ! this default setting step. if change it, receive emails builds fail. create secret environment variable holds mailgun api key. we recommend naming key $mailgun_api_key . this default value step’s relevant input. create secret environment variable holds mailgun domain. we recommend naming key $mailgun_domain . this default value step’s relevant input. add send email with mailgun step end workflow. find send to emails input step. click click select secret variable . create new secret environment variable contains list email addresses. you choose any key want. the addresses separated comma. set email subject, potential messages: successful build, failed build. you insert environment variables any inputs (the subject messages). in email, values displayed. the default messages send app, number build succeeded failed. attach files, necessary: file attachments input accepts file path environment variable input. multiple files attached: separate paths with commas. run build - check emails! " });
this.add({id:401, 
title:"Configuring Slack integration", 
body:" configuring slack integration you integrate slack app bitrise adding \"send message\" step app's workflow. bitrise supports slack integration, course - it’s quite easy set up. send messages individual users, groups channels; customize messages, include attachments, link buttons users build page. to use dedicated step , need slack webhook url slack api token bot user . make sure step runs build! if use send slack message step workflow , make sure set run previous step failed ! this default setting step. if change it, messages won’t sent build fails. add send slack message step workflow. find slack webhook url slack api token input. click input click select secret variable . create new secret environment variable stores webhook url slack api token. you choose any key want. customize slack message with relevant inputs step. there options, including limited to: setting target channel, group username: encoded id. the text message send. the bot’s username message the message’s color file attachment link buttons attached message check inputs workflow editor see ways customize slack messages. " });
this.add({id:402, 
title:"Setting your Git credentials on build machines", 
body:" setting git credentials build machines if want push any commits git repo bitrise running build, set credentials build machines. the default git username user email address stacks following: git config --global user.email \"please-set-your-email@bitrise.io\"\ngit user.name \"j. doe (https:\/\/devcenter.bitrise.io\/builds\/setting-your-git-credentials-on-build-machines\/)\"\n if want push ( git push ) any commits repo bitrise running build, set username email address. there ways achieve this: you use custom script step set credentials with git config command. you set git credentials env vars. you use set git credentials step. " });
this.add({id:403, 
title:"Setting your Git credentials using Env Vars", 
body:" setting git credentials using env vars git various basic environmental variables similar bitrise env vars . if like reduce steps workflow, set env vars bitrise utilizing specific git environmental variables: open workflow editor. go the  env vars  tab. create following env vars: git_author_name : this human-readable “author”. git_author_email : this email address \"author\". git_committer_name : this human-readable “committer”. git_committer_email : this email address \"committer\". " });
this.add({id:404, 
title:"Setting your Git credentials using the Set Git Credentials Step", 
body:" setting git credentials using set credentials step add set git credentials step first step workflow. the come you’d git commit . this way make sure any changes current build attached commit associated with username email address. in git username field, set value user name. in git email address field, set value email address. start build. if went well, see changes repository git provider. the new username email address visible future commits push builds " });
this.add({id:405, 
title:"Reporting the build status to your Git hosting provider", 
body:" reporting build status git hosting provider you need authenticate bitrise specify service credential user app settings page app push build status reports git provider. github app integration if use bitrise github app connect bitrise workspace git account organization, don't need any additional configuration described guide: app automatically provides status reports. bitrise push build status reports git provider (github\/gitlab\/bitbucket). you need authenticate communicate hosting service. apart reports, enables operations, auto-registering ssh keys webhooks. status sent automatically triggered builds, builds code pull request. to this, need specify service credential user app bitrise.io . you need make sure user connected account with git hosting service choice bitrise.io . this account used bitrise communicate with api git hosting provider. " });
this.add({id:406, 
title:"Configuring build status reporting", 
body:" configuring build status reporting allowlist bitrise website ip addresses if use form self-hosted solution storing code, need allowlist static ip addresses bitrise website background workers. this allows features bitrise.yml file repository, receiving build status updates bitrise: ip address ranges for bitrise backend workers . to report status, need make sure service credential user's bitrise account connected git provider account. this access app's repository. service credential user restriction you set service credential user so, need admin role app's team bitrise. if service credential user specific bitrise user, log set themselves. for information, see: changing the service credential user . to check build status reporting possible: in upper right corner, open account selector dropdown menu. select account settings option. make sure account connected git provider hosts repository: check the  connected accounts  menu left side. make sure connected git provider account required level permission sending status reports. on github bitbucket, write access required. on gitlab, developer access required. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . find service credential user section. click test <git provider> connection button make sure selected user’s connection used sending build status hosting provider. " });
this.add({id:407, 
title:"Troubleshooting build status reporting", 
body:" troubleshooting build status reporting if builds send status reports git hosting provider - github, gitlab bitbucket -, need little investigating causes problem. let’s look potential issues! " });
this.add({id:408, 
title:"Checking the service credential user", 
body:" checking service credential user the service credential user app bitrise.io connected bitrise account git hosting access repository app account. you check service credential user test git connection. open app bitrise with user admin role app . on main page app, click app settings icon: . go app’s page bitrise.io . find service credential user section. current user in figure, current active user service credential user. if different user, looks little different, including button's text. click test <git provider> connection button test user's git connection. " });
this.add({id:409, 
title:"Checking repository permissions and repository URL", 
body:" checking repository permissions url make sure granted bitrise access workspace team. it did grant denied github bitbucket team owns repository. make sure url repository date: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select general . find repository url make sure it's correct. " });
this.add({id:410, 
title:"Starting builds", 
body:" starting builds you start builds bitrise multiple ways: manually, scheduling, setting triggers, using api. pipelines this section documentation deals with starting standalone bitrise builds. for pipelines, check running a pipeline . you start builds bitrise multiple ways: starting builds manuallyscheduling buildstriggering builds automatically with api: triggering and aborting builds you configure bitrise skip certain commits git tags, preventing triggering builds. " });
this.add({id:411, 
title:"Starting builds manually", 
body:" starting builds manually you start builds manually selecting app need dashboard clicking start\/schedule build button. starting build manually bitrise takes literally clicks - leave default settings. if wish that, want sure settings are, read on! to start build using basic configuration options: on bitrise ci page app, start build button click with clock icon it. enter branch want run branch input field. you set branch. if pull request repository forked branch, type branch run build request. pull request build starting build pull request’s branch not request build. the manually started state code branch. an automatically triggered build, however, builds look like merged request. optionally, enter build message message field. please note entering git commit message specific doesn't trigger build commit! select workflow run workflow menu. if don't select one, bitrise choose workflow based app's trigger map scheduling build the schedule build option allows configure builds triggered specific times. read more: scheduling builds . " });
this.add({id:412, 
title:"Running Workflows from the Workflow Editor", 
body:" running workflows workflow editor you manually start build running single workflow workflow editor . to so: open app bitrise click the  workflows  button open workflow editor. on workflows tab, use workflow drop-down menu select workflow like run. click run workflow . specify branch that want build branch field. click run workflow start build. and that's it! as soon click run workflow button, build kicked off, build's page open new tab. " });
this.add({id:413, 
title:"Advanced configuration options for starting\/scheduling builds", 
body:" advanced configuration options starting\/scheduling builds if choose advanced build configuration window, options available with basic , more: git tag : builds particular branch commit tagged with tag enter. if set this, can't hash. git tags commit hashes conflicting options you specify git tag commit hash. when set one, disappear. this ensures enter conflicting input values. commit hash : copy specific commit’s hash build particular commit. this option send status update git hosting service. if set this, can't git tag. commit hash takes precedence branch option if branch option specifies branch commit hash chose doesn't exist, bitrise does given run build with branch. custom environment variables : create custom environment variable used build. see setting a custom env var when starting a build . generated curl command : based options set build configuration window, provide automatically generated curl command. this copied pasted, run any platform installed. " });
this.add({id:414, 
title:"Triggering builds automatically", 
body:" triggering builds automatically you configure automatic build triggers bitrise specifying trigger event workflow. builds code pushes, pull requests git tags. you configure automatic build triggers bitrise specifying code event trigger destination workflow run. define multiple app. by default, trigger workflow. if need multiple workflows single trigger, ways: use pipelines: pipeline, workflow run parallel stage, pipeline trigger starts first stage pipeline. read more: configuring pipeline triggers . chain workflows so run other. use bitrise start build bitrise wait build steps . there types triggers: code push: trigger build automatically push code using commits match conditions. for example, a commit specified branch app's repository triggers build. pull request: trigger build automatically pull request matches conditions. for example, specify source and\/or destination branches any trigger build. git tag: trigger build automatically commit with specific tag triggers build. trigger conditions each trigger type set with multiple different conditions. the available conditions listed explained procedure creating type. not trigger conditions supported git providers. for detailed list, see supported trigger conditions . you manage triggers triggers section workflow editor directly edit bitrise.yml app set up. also, can't set different triggers code event (for example, push) branch main). the workflow editor allow save configuration attempt so. " });
this.add({id:415, 
title:"Code push triggers", 
body:" code push triggers a code push trigger starts build time app's repository changes. a code push trigger possible condition types: push branch: only commits specified branch app's repository trigger new build. commit message: only specified commit message triggers new build. for example, hotfix critical: resolved security vulnerability user authentication . you use wild card pattern like hotfix.*   regex pattern like hotfix\\s*(critical|high):.* trigger builds commit messages. files changed: a build triggered certain files change. this especially useful monorepo setups; is, single repository contains code multiple different projects. for example, regex pattern like ios\/.*\\.swift$ trigger builds swift files ios directory changed inside monorepo. similarly, simple wild card patterns like ios\/app.js ios\/components\/myview.swift ios\/layouts\/main_screen.xml target specific files relevant directories trigger builds. these conditions combined: example, set trigger starts build given file changes main branch app's repository. at condition configured trigger. when set multiple conditions, fulfilled build triggered. the trigger configuration allows use regular expressions: regex match branch, commit message, filename. first build potential subsequent matches ignored. " });
this.add({id:416, 
title:"Creating triggers for code pushes", 
body:" creating triggers code pushes workflow editor bitrise.yml if use oauth connection repository, make sure bitrise webhook registered repository. if use github app integration, don't need webhook. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select push tab. click add push trigger . in add push trigger dialog, set trigger conditions: push branch : commits specified branch trigger build. commit message : commits with specified commit message trigger build. file change : changes specified file(s) trigger build. when setting multiple conditions, conditions fulfilled build start. you use regular expressions any condition types. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . if use oauth connection repository, make sure bitrise webhook registered repository. if use github app integration, don't need webhook. open bitrise.yml file. under trigger_map , add new trigger defining type push setting trigger condition: trigger_map:\n- type: push\n commit_message: your_message in example, use commit_message trigger condition. the available conditions are: push_branch : commits specified branch trigger build. commit_message : commits with specified commit message trigger build. changed_files : changes specified file(s) trigger build. you use regex adding regex:  trigger condition. for example: commit_message: \n regex: \".*\" add workflow pipeline triggered. trigger_map:\n- type: push\n commit_message: your_message\n workflow: primary you’re done! from on, code gets pushed selected branch app’s repository, bitrise trigger build with workflow pipeline. " });
this.add({id:417, 
title:"Pull request triggers", 
body:" pull request triggers a pull request trigger starts build time opened app's repository. a pull request trigger possible condition types: source branch: the branch containing changes pull request. target branch: the branch pull request merged to. pull request label: only pull requests with certain label applied trigger builds. for example, manually builds specific prs adding like build-test. these conditions combined: example, set trigger starts build pull request opened given source branch with certain label. at condition configured trigger. when multiple conditions, fulfilled triggered. the trigger configuration allows use regular expressions: regex match branch pr label. first build potential subsequent matches ignored. builds triggered pull requests subject manual approval: approving pull request builds . by default, draft pull requests trigger builds, too. this disabled any time: triggering builds from draft prs . " });
this.add({id:418, 
title:"Creating triggers for pull requests", 
body:" creating triggers pull requests workflow editor bitrise.yml make sure bitrise webhook registered repository. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select pull request tab. click add pull request trigger . in add pull request trigger dialog, set trigger conditions builds: source branch : the branch pull request opened. target branch : the branch pull request merged into. pr label : a label applied pr. pr comment : a specified comment submitted pull request. commit message : one commit messages pull request. file change : changes specified file(s) pull request. pull request trigger limitations to use the  pr comment  trigger, allow pull request comment passed webhook payload git provider. enable events: comment created , comment updated . when setting multiple conditions, conditions fulfilled build start. you use regular expressions any condition types. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . make sure bitrise webhook registered repository. open bitrise.yml file. under trigger_map , add new trigger defining type pull-request setting trigger condition: trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\" in example, use pull_request_target_branch trigger condition with regular expression. the available conditions following (you use regex them): pull_request_source_branch : pull requests opened specified branch trigger build. pull_request_target_branch : pull requests merged specified branch trigger build. pull_request_label : pull requests with given label trigger build. you use regex adding regex:  trigger condition. add workflow pipeline triggered. trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\"\n workflow: primary and you’re done! from on, pull request opened repository, bitrise trigger build with selected workflow! " });
this.add({id:419, 
title:"Triggering builds from draft PRs", 
body:" triggering builds draft prs github gitlab offers feature called draft pull request (or merge request case gitlab): create pull (pr), choose ready review draft request. draft requests merged, code owners automatically requested requests. git provider limitations this feature supported github gitlab repositories. by default, draft prs trigger builds: time open pr push code pr. you disable any with toggle workflow editor. check exact events builds depending settings: build trigger behavior for draft prs . each separate trigger toggle: configure app so certain triggers start build draft prs don't. " });
this.add({id:420, 
title:"Disabling builds from a draft PR", 
body:" disabling builds draft pr skipping steps build triggered draft pr this guide tells how disable triggering builds draft pr altogether. you can, however, skip certain steps build triggered pull request. just need use run_if condition github_pr_is_draft environment variable: information, see enabling or disabling a step conditionally . workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . find trigger need toggle draft pull requests enabled switch. open bitrise.yml file. in trigger_map property, trigger. it type: pull_request field. add draft_pull_request_enabled: false it. trigger_map:\n- type: pull-request\n pull_request_target_branch: main\n workflow: primary\n draft_pull_request_enabled: false\n " });
this.add({id:421, 
title:"Build trigger behavior for draft PRs", 
body:" build trigger behavior draft prs the table shows build triggered specific action performed regarding draft prs, depending pr trigger settings. for example, converting doesn't enabled does it's disabled. trigger behavior action draft pr trigger enabled draft pr trigger disabled open draft pr push commit draft pr convert draft pr convert pr draft " });
this.add({id:422, 
title:"Git tag triggers", 
body:" git tag triggers a git tag trigger starts build time commit with given git tag pushed app's repository. for tag trigger, possible condition: itself. when setting need set regular expression pattern. " });
this.add({id:423, 
title:"Creating Git tag triggers", 
body:" creating git tag triggers note certain providers, gitlab, require tag push events specifically enabled webhook setup. workflow editor bitrise.yml make sure bitrise webhook registered repository. if git provider requires it, make sure tag push events enabled webhook configuration. for example, gitlab requires it. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select tag tab. click add tag trigger . in add tag trigger dialog, add tag tag field. you use regular expression instead tag. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . make sure bitrise webhook registered repository. open bitrise.yml file. under trigger_map , add new trigger defining type tag-push set tag trigger condition: trigger_map:\n- type: tag-push\n tag: '*' this example uses wildcard triggers build any tag push. add workflow pipeline triggered. trigger_map:\n- type: tag-push\n tag: '*'\n workflow: primary " });
this.add({id:424, 
title:"Deactivating a trigger", 
body:" deactivating trigger you temporarily deactivate any build trigger. a deactivated trigger doesn't builds retains configuration information. if need future, don't recreate it: just reactivate with single click. to deactivate build trigger: workflow editor bitrise.yml open workflow editor bitrise. on left, select triggers . select appropriate tab, depending trigger want deactivate. set trigger inactive . open bitrise.yml file. find trigger_map property trigger want disable. add enabled: false it. trigger_map:\n- type: push\n push_branch: main\n workflow: primary\n enabled: false\n " });
this.add({id:425, 
title:"Supported trigger conditions", 
body:" supported trigger conditions not trigger conditions available git providers. as general rule, cloud service frequently used providers: github, gitlab, bitbucket. for providers, self-hosted repositories, check detailed table push triggers pull request triggers. supported trigger conditions code push triggers git provider branch commit message files changed github (cloud) github (self-hosted) gitlab (cloud) gitlab (self-hosted) bitbucket (cloud) bitbucket server (self-hosted) assembla deveo (perforce) gogs vs team services supported trigger conditions pull request triggers git provider source branch target branch labels comments commit message changed files github (cloud) github (self-hosted) gitlab (cloud) gitlab (self-hosted) bitbucket (cloud) n\/a bitbucket server (self-hosted) n\/a assembla n\/a deveo (perforce) gogs vs team services " });
this.add({id:426, 
title:"Scheduling builds", 
body:" scheduling builds you schedule builds run automatically specific time week. you schedule builds run automatically specific time week so check logs it’s convenient you. when scheduling build, define custom environment variables . you set advanced filters git tags commit hash. if regularly scheduled builds, can: edit configuration. trigger manually any time. temporarily disable them. permanently delete them. " });
this.add({id:427, 
title:"Scheduling a build", 
body:" scheduling build how schedule build with basic configuration options bitrise: on bitrise ci page app, start build button click with clock icon it. in schedule build dialog, set scheduling cadence: choose basic cron settings. in basic settings, need set start date, time 24-hour format, select timezone. in cron settings, set cron schedule expression . the dialog parse expression display configured time human-readable format. if chose basic , enable disable repetition with repetition toggle. if enable repetition, configure frequency, minutes years. the build triggered with configured frequency, time, determined scheduling cadence. for example, configure builds run monday thursday week. when ready, click next proceed build configuration. select basic advanced configuration. basic configuration offers options: a branch name. this required field. a message message field. this related git commit messages all. it's just place provide optional information build. a workflow pipeline. you select specific use based trigger map option select using trigger map app's bitrise.yml configuration file. pull request branch starting build pull request’s branch not request build. the manually started state code branch. an automatically triggered build, however, builds look like merged request. for advanced configuration options, see advanced configuration options for starting\/scheduling builds section. when done, click schedule build . " });
this.add({id:428, 
title:"Advanced configuration options for starting\/scheduling builds", 
body:" advanced configuration options starting\/scheduling builds if choose advanced build configuration window, options available with basic , more: git tag : builds particular branch commit tagged with tag enter. if set this, can't hash. git tags commit hashes conflicting options you specify git tag commit hash. when set one, disappear. this ensures enter conflicting input values. commit hash : copy specific commit’s hash build particular commit. this option send status update git hosting service. if set this, can't git tag. commit hash takes precedence branch option if branch option specifies branch commit hash chose doesn't exist, bitrise does given run build with branch. custom environment variables : create custom environment variable used build. see setting a custom env var when starting a build . generated curl command : based options set build configuration window, provide automatically generated curl command. this copied pasted, run any platform installed. " });
this.add({id:429, 
title:"Editing a scheduled build", 
body:" editing scheduled build to change configuration regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click little gear icon open settings menu. click edit scheduled build . make changes want click save changes . " });
this.add({id:430, 
title:"Triggering a scheduled build manually", 
body:" triggering scheduled build manually to immediately trigger scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click trigger . " });
this.add({id:431, 
title:"Disabling a scheduled build", 
body:" disabling scheduled build to temporarily disable regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . toggle enabled option. the build run enable again. " });
this.add({id:432, 
title:"Deleting a scheduled build", 
body:" deleting scheduled build to permanently delete regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click little gear icon open settings menu. click delete click delete prompted confirmation. " });
this.add({id:433, 
title:"Approving pull request builds", 
body:" approving pull request builds you option requiring manual approval bitrise builds started pull requests app contains exposed secrets. this deactivated public apps. not pull requests need built. after all, projects, create fork repository submit request. however, app bitrise set with secrets exposed pull request builds, example, probably don’t want just able access secrets. that option require approval pull request build start. this feature works somewhat differently public private apps: private apps: default, pull requests submitted fork require approval. the setting changed. if secrets not exposed prs, build run asking public apps: pull requests submitted fork require approval default changed. apps cannot opt feature. " });
this.add({id:434, 
title:"Enabling manual approval for private apps", 
body:" enabling manual approval private apps to enable disable manual approval, need admin owner application’s team. the application must private: public apps opt feature! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . scroll manual build approval . please note change setting private apps! for public apps, enabled. toggle switch enable disable it. by default, set disabled. " });
this.add({id:435, 
title:"Approving the PR build", 
body:" approving pr build approving pr build please note approving pr build means bitrise. approving pull request github, example, isn't sufficient start bitrise: owner approve bitrise itself. if pull request submitted fork, notified pr build waiting approval: a notification email sent with app, links repository itself app’s builds page bitrise. on git provider, status ci check pending - waiting approval on builds page app, confirmation box displayed. to approve run build, click approve run build button. clicking review opens pull request website git provider. " });
this.add({id:436, 
title:"Build triggers in the bitrise.yml file", 
body:" build triggers bitrise.yml file on bitrise, create triggers (or webhooks) events code push pull requests start build automatically. you trigger builds bitrise registering webhook source code hosting provider configuring build trigger. each app with triggers map bitrise.yml file. the trigger map defines build triggers, including type conditions. the trigger map essentially list filters: filter item matches certain case. if case matched, build triggered. every include condition. " });
this.add({id:437, 
title:"Overview of the trigger map", 
body:" overview trigger map the trigger map defined trigger_map property bitrise.yml file. a valid trigger map trigger. a trigger main elements: the type trigger: push , pull_request , tag . the trigger condition. for example, source branch pull request. the workflow pipeline triggered. one trigger means build: single workflow pipeline. you chain workflows run workflows succession single trigger. below single trigger triggers build with primary workflow pull request opened any branch. trigger_map:\n- pull_request_source_branch: \"*\" \n type: pull_request workflow: primary " });
this.add({id:438, 
title:"Multiple trigger conditions", 
body:" multiple trigger conditions if define multiple trigger conditions single item match order build. for example: trigger_map:\n- pull_request_target_branch: \"main\"\n pull_request_source_branch: \"develop\"\n type: pull_request\n workflow: primary this select primary workflow pull request’s source branch develop and target branch main . " });
this.add({id:439, 
title:"Order of triggers", 
body:" order triggers the order triggers important: first trigger with matching conditions build. for example, let's say code push triggers: trigger_map:\n- type: push\n push_branch: main\n workflow: primary\n- commit_message: deploy\n deploy the first trigger triggers primary workflow code pushed main branch app's repository. the second trigger triggers deploy workflow commit with message deploy pushed any branch repository. what happens commit pushed main branch with commit message deploy ? the commit matches conditions first trigger so primary workflow triggered. in scenario, deploy workflow not triggered, commit matches conditions trigger, too. " });
this.add({id:440, 
title:"Wildcards and regex", 
body:" wildcards regex we support wildcards ( * ) simple text matching triggers. wildcards good choice don't need advanced pattern capabilities regular expressions. for example, trigger based commit messages starting with fix achieved using wildcard. wildcards useful match specific, fixed values appearing input. we recommend using regexes needed multiple alternative values, negation, capturing specific groups characters character types (for example, numbers only) needed. to use regular expressions trigger condition, need add regex: value following format: trigger_map:\n- type: push\n push_branch:\n regex: <regular expression>\n workflow: primary\n- pull_request\n pull_request_source_branch:\n " });
this.add({id:441, 
title:"Components of the trigger map", 
body:" components trigger map the trigger_map property accepts values listed tables below. components trigger types component description accepted values default value type the type trigger. a trigger with given accepts conditions belonging type. push pull_request tag n\/a enabled a boolean property defines trigger currently active. true false true workflow pipeline the workflow pipeline triggered. you can't set both. the exact workflow pipeline. n\/a components code push triggers component description default value push_branch the branch repository code pushed trigger build. * commit_message the commit message trigger build. * changed_files the path file folder changes trigger build. * components pull request triggers component description default value pull_request_source_branch the branch pull request opened. * pull_request_target_branch the branch merge target pull request. * pull_request_label the pull request label. * draft_pull_request_enabled a boolean property defines draft pull requests trigger builds. true pull_request_comment a comment posted pull request. * commit_message a specific commit message pushes pull request. * changed_files specific files modified pull request. * " });
this.add({id:442, 
title:"Starting parallel builds with a single trigger", 
body:" starting parallel builds with single trigger you start multiple parallel builds using bitrise start build wait steps. using build pipelines start parallel builds with single trigger if credit-based account planning running multiple tasks parallel with single trigger, recommend using build pipelines. for information, check build pipelines . if than concurrency credit-based account, run build simultaneously. and want make life easy possible, builds started automatically, with single trigger. let’s how works! in example, workflows single app set run time. let’s trigger , building testing . the workflow called trigger triggered pull request, workflow trigger building testing run simultaneously. all workflows run separate, clean virtual machines. they different types stacks: choose stack any workflow, workflow editor app select stack tab. if any builds fail, build considered failed build. triggered webhook, bitrise send summarized build result git provider. if any parallel builds fail, failed status reported. no reports \"child\" builds bitrise send git status report original \"parent\" build, triggered builds. the \"child\" builds reports provider! for example, build a triggers builds b c, status report sent finished. there separate reports however. what need: a personal access token. a secret environment variable storing token. the bitrise start build step. the bitrise wait build step. bitrise start build step ci since bitrise build start step heavily relies parameters currently running build (for example, app slug, slug number) api , use bitrise build start step locally. bitrise.yml example you edit bitrise.yml file bitrise.yml tab workflow editor, edit file locally. the example focuses bitrise ui, prefer use yaml format, check example ! create personal access token user. go profile settings select security option left side. click generate new button. copying token make sure copy token it's generated: won't able see again! create secret environment variable secrets tab app’s workflow editor add token value. feel free use any key wish secret. we recommend simple like $access_token . add bitrise start build step trigger workflow. note bitrise start build step set environment variable builds starts: $source_bitrise_build_number . each build triggered step numbers source number them. add secret env storing personal access token bitrise access token input step: click select secret variable button choose key created. find workflows input step, add building testing it. add bitrise wait build step trigger workflow. checking build statuses the step checks statuses builds defined step. build slugs input: slugs output bitrise start build step. as long builds defined slugs running, step hold build running in. the fail any included fail. add secret env storing personal access token bitrise access token input step: click select secret variable button choose key created. and done! once trigger trigger workflow, bitrise start build step workflow trigger builds running simultaneously. if successful, bitrise wait build step lets first build finish. a single status report sent git hosting provider, regardless successful not. " });
this.add({id:443, 
title:"bitrise.yml example", 
body:" bitrise.yml example trigger:\n steps:\n - build-router-start@0:\n inputs:\n workflows: |-\n building\n testing\n access_token: \"$bitrise_api_key\"\n build-router-wait@0:\n \"$bitrise_api_key\" " });
this.add({id:444, 
title:"Skipping a given commit or pull request", 
body:" skipping given commit pull request depending settings, code change repository trigger bitrise builds. however, need to, skip specific commit pull request. depending settings, code change repository trigger bitrise builds. however, need to, skip specific commit pull request. skipping means, context, code change not trigger build bitrise, triggers set so. " });
this.add({id:445, 
title:"Preventing a commit from triggering a build", 
body:" preventing commit triggering build to make sure specific commit does trigger build, include [skip ci] [ci skip] commit message: this important, [skip ci] or: i just changed readme \n\n[ci skip] \n only head\/last commit message checked! if push than commit, (head) commit’s message checked skip ci pattern! if want start build all, choices: rebase commit (change message). push commit. pushing commit git allows create push commits. if want build skipped git commit --allow-empty -m \"i decided run this\" related branch push commit. " });
this.add({id:446, 
title:"Preventing a pull request from triggering a build", 
body:" preventing pull request triggering build pull requests treated (virtual) commits themselves, commit message title + description pull request. it commit messages individual commits make pull request. to skip pull request include [skip ci] pattern pull request’s title description. individual commit messages checked putting [skip ci] pattern commit message individual commits make pull request work: trigger build appropriate set up. once decide skip pull request, simply remove [skip ci] pattern pull request’s title description. this automatically trigger new build with latest commit, future commits request built (unless add [skip ci] pattern again). " });
this.add({id:447, 
title:"Skipping Steps triggered by a draft PR", 
body:" skipping steps triggered draft pr when use draft pr function github , bitrise inserts environment variable called github_pr_is_draft build environment variable list. if env var available list, value set true . triggering builds draft prs you configure trigger map avoid triggering builds draft pull requests (or merge case gitlab). this doesn't require github_pr_is_draft env var: just need toggle switch workflow editor . you use github_pr_is_draft env var build conditional: example, skip certain steps builds triggered draft prs: workflow1:\n steps:\n - script:\n run_if: '{{enveq \"github_pr_is_draft\" \"\"}}' \n inputs:\n content: |-\n #!\/usr\/bin\/env bash\n # fail any commands fails\n set -e\n debug log\n -x in example, run_if condition means step run build not triggered draft pr. yo recommend insert run_if command step workflow skip steps. starting new build draft pr if previously used draft pr build ready merge changes code pr, clicking ready review button github won’t trigger new build bitrise. the previous builds contain draft pr related env vars. in case, recommend manually start brand website ci with commit. " });
this.add({id:448, 
title:"Caching", 
body:" caching every single bitrise build runs clean virtual machine, store content cache using branch-based caching key-based caching. every single bitrise build runs clean virtual machine . this means normally, caching, scratch virtual machine, including, example, installing dependencies. with caching, preserve contents selected files directories, installed dependencies generated build. there main methods caching bitrise: branch-based caching : uses bitrise.io cache: push step bitrise.io cache: pull step manage cache archives. each archive tied specific branch repository. key-based caching : it works associating cache archives with key. during workflow , restore cache archive referring key associated with it. " });
this.add({id:449, 
title:"Using branch-based caching in your builds", 
body:" using branch-based caching builds you use dedicated bitrise steps caching: bitrise.io cache pull tap cache contents build, push store information build cache. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . the basics using cache builds simple work box, depending workflows: just use dedicated steps. add bitrise.io cache:pull step right need cache. for example, case ios app, insert bitrise.io cache:pull step git clone repository dependency installer steps (such run cocoapods install carthage steps). you bitrise.io cache:pull step before git clone repository step. build cache expiry the build cache, related specific branch, expires seven days means automatically deleted - there’s new branch meantime. this builds frequently than week, cache won’t deleted. if don’t start days, deleted, run like first. add bitrise.io cache:push step workflow. for simple use cases, that’s it, do. these steps work box alongside with caching function. but wish learn create configuration, read on! pull request builds by default, run build triggered pull request, bitrise.io cache:push step won’t work: case, pull request build read cache can’t update it! we strongly recommend change this! from security perspective, best practice allow pull request builds alter affect bitrise builds. if absolutely change it, need use run_if expression app’s bitrise.yml file. read run_if expressions: enabling or disabling a step conditionally . you example build cache configurations\/guides build-cache discuss page . " });
this.add({id:450, 
title:"Including files and folders in the build cache", 
body:" including files folders build cache as mentioned before, file folder specified bitrise.io cache:push step’s cache paths input gets cached, unless step configured ignore certain folders files. in cases, don’t change input. if use steps in-built caching function, worry specifying files specific case. to check step caching function, look inputs. if there’s input turn off, question doesn’t function. to include files steps caching function: in workflow, open bitrise.io cache:push step. find cache paths input. add path paths files folders want include cache. you use absolute path, relative root repository. " });
this.add({id:451, 
title:"Ignoring files and dependencies", 
body:" ignoring files dependencies you tell bitrise.io cache:push step specifically ignore certain content. ignoring means things: a file folder isn’t checked changes: specified path included previous cache archive, new with content before. a file folder completely excluded: words, isn’t uploaded cache all, regardless changes. you choose option any files folders. to ignore certain files folders: in workflow, open bitrise.io cache:push step. find ignore paths change check input. add path paths files folders want ignore. you use absolute path, relative root repository. if want completely exclude given path cache archive, prefix with ! . for example, !my\/path\/ . if want exclude given path change checking, just add any prefix. located inside ignored cache item not prefixed with ! , path included cache archive, checked changes. for example, add my\/path\/ input, path directory included archive checked changes. you can, course, specify certain patterns paths, too. for example: replacing path element with * : a\/*\/b : match a\/x\/b replacing path with ** : a\/**\/b match a\/x\/y\/z\/b ignoring entire directory with \/ . for example, \/my\/full\/path\/ ignores path folder. ignoring paths you can’t ignore path results invalid cache item. for example, specify a\/path\/to\/cache path cached, can’t ignore a\/path\/to , ignore file wouldn’t check changes, fingerprint generated a\/path\/to\/cache . this won’t fail step: you’ll simply receive following warning: no path cache, skip caching... you can, however, ignore paths inside cache path. for example, path a\/path\/to\/cache , ignore a\/path\/to\/cache\/.ignore-me , unless that’s file inside a\/path\/to\/cache . " });
this.add({id:452, 
title:"Downloading or deleting the build cache", 
body:" downloading deleting build cache you download delete build caches branch generated cache. check size time given cache was used. deleting single branch's cache if want delete cache related single branch, default branch’s too! this build runs branch doesn’t cache, the  bitrise.io cache:pull   step cache default branch. to manage build caches: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . find the  manage build caches  section. select branch-based (legacy) caching tab. you see cache archives pop-up window. download delete any archives, them. " });
this.add({id:453, 
title:"Caching Cocoapods", 
body:" caching cocoapods you cache cocoapods content putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . before start, make sure latest version cocoapods install step workflow. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . insert bitrise.io cache:pull step git clone cocoapods install steps. step version cache:pull make sure step version 1.0.0 newer. with older versions, manually specify paths caching. insert bitrise.io cache:push step end workflow. and do! if wish use earlier version cache steps, information . " });
this.add({id:454, 
title:"Caching Gradle", 
body:" caching gradle you cache gradle content putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . before start, make sure latest version android build step workflow. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . insert cache:pull step git clone android build steps. step version cache:pull make sure step version 1.0.0 newer. with older versions, manually specify paths caching. insert cache:push step end workflow. and you’re done! " });
this.add({id:455, 
title:"Caching Maven", 
body:" caching maven you cache maven content putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . insert cache:pull step git clone android build steps. step version cache:pull make sure step version 1.0.0 newer. with older versions, manually specify paths caching. insert bitrise.io cache:push step end workflow. in cache paths input step, enter $home\/.m2 . and you’re done! " });
this.add({id:456, 
title:"Caching Ruby Gems", 
body:" caching ruby gems you cache ruby gems putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . ruby gems cached default bitrise.io virtual machines. installed location depending current rbenv version. the version checked running rbenv version . you location directory with gem environment gemdir . however, cache directory rbenv sets link ruby version specific gems: directory - example, \/users\/vagrant\/.rbenv\/versions\/2.5.3 - cached. it recommended set value $gem_home enviroment variable, result installed gems found. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . add script step workflow. set $gem_cache_path environment variable script step. - script:\n title: set gem_cache_path env var\n inputs:\n content: |-\n #!\/bin\/bash\n set -ex\n rbenv_dir=\"`cd $(rbenv ruby)\/..\/..;pwd`\"\n echo \"gem cache directory: $rbenv_dir\"\n envman add --key --value $rbenv_dir insert cache:pull step git clone android build steps. insert cache:push step end workflow. open input cache paths step cache:push add $gem_cache_path new line additional cache dir. and you’re done! " });
this.add({id:457, 
title:"Caching Homebrew installers", 
body:" caching homebrew installers to enable caching homebrew installers, set cache input yes brew install step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . the brew install step supports caching: option enabled, any downloaded brew installers cached location brew --cache . the cache path ~\/library\/caches\/homebrew\/ . to enable caching brew installers: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . add select (if it's workflow) brew install step. set cache option yes . as always, click save . " });
this.add({id:458, 
title:"Managing build files", 
body:" managing build files using deploy bitrise.io step, deploy files generated build bitrise.io. you upload code signing files. view uploaded apps & artifacts tab page. managing files bitrise allows upload use builds. you required purposes code signing. builds produce outputs. you can: upload files generic file storage. use uploaded files builds. use encrypted files builds. using deploy bitrise.io step, deploy files generated build bitrise.io. you view artifacts tab build page. in addition, check build's generated installable artifacts (installable binaries, ipa apk\/aab) files artifacts page app . the page shows generated binaries past builds view details file, including qr code link public install page, allow users app devices. you upload android ios code signing files. read android code signing ios code signing detailed guides. " });
this.add({id:459, 
title:"Uploading files for your builds", 
body:" uploading files builds if build requires any files make work, upload code signing tab workflow editor. if build requires any files make work, upload bitrise app settings page. it accepts any file type, need provide unique id upload file. once file uploaded, stored environment variable (env var) . you use env var access file builds. the be: downloaded admin owner role app’s team bitrise. you prevent this: protecting your uploaded files exposed pull request builds. file restrictions there certain restrictions upload size number files: you can't upload file bigger than 5 mb. you store total 5 different files time. if want upload more, need delete storage. to upload file: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select files . click add file . in dialog box, enter unique id file storage id input field. the unique id generated download url bitrise stores environment variable . upload file. you options: click select file upload section select file computer. drag drop file select file upload section. remember file size exceed 5 mb. " });
this.add({id:460, 
title:"Protecting your uploaded files", 
body:" protecting uploaded files once uploaded file bitrise, set files protected mode. this means download reveal account builds use them. bitrise handle environment variable attached secret . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select files . click horizontal ellipsis button file, select make protected . click make protected dialog box. " });
this.add({id:461, 
title:"Using files in your builds", 
body:" using files builds to use file builds, download using step like file downloader workflow, file's automatically generated env var input. there multiple ways use files bitrise builds. most steps generate files store filepath output environment variable (env var). subsequent workflow re-use env var access file. you upload file generic file storage use automatically generated env var step input value steps accept urls input. you upload file generic file storage use steps (for example, file downloader step) download file build. this works with steps require local paths support urls directly input value. " });
this.add({id:462, 
title:"Downloading a file using the File Downloader Step", 
body:" downloading file using file downloader step one ways access file build using file downloader step. this step useful need use file input accepts local paths value. the step downloads file location specify, subsequent access location. workflow editor bitrise.yml open workflow editor . add file downloader step workflow. in download source url input, add location file found. finding download url uploaded file if uploaded file bitrise , download url files section app settings page. in download destination path input, specify path want download file. it relative root repository. using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. click save right corner. open app's bitrise.yml file. add file-downloader step workflow. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n in source input, add location file found. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n source: \"$bitriseio_bitrise_test_url\"\n in destination input, specify path want download file. it relative root repository. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n destination: \"\/\"\n source: \"$bitriseio_bitrise_test_url\"\n deploy-to-bitrise-io: {} using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. " });
this.add({id:463, 
title:"Downloading a file using a custom Script Step", 
body:" downloading file using custom script step if don't want use file downloader step download access uploaded file build, use custom script well. all need url specifying path exists build machine. workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step workflow. find script content input step. add script download file store destination path env var. uploading file bitrise if upload file bitrise , use file's download url script. in example below, download url stored bitrise_io_my_file_id_url env var. we're using envman store destination path bitriseio_my_file_local_path env var. subsequent steps use var access file. #!\/bin\/bash\nset -ex\n\n# specify local download path\nexport file_local_path=download\/path\/to\/my\/file\n\n# file\nwget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\necho \"file downloaded to: $file_local_path\"\n\n# optionally: export file's path, able use subsequent steps input value\nenvman add --key bitriseio_my_file_local_path --value alternatively, example, set location app env var and simply download path instead defining inside script step. open bitrise.yml file app. add script step workflow. my-workflow:\n steps:\n script:\n inputs:\n - content: in content input, add script download file store destination path env var. uploading file bitrise if upload file bitrise , use file's download url script. in example below, download url stored bitrise_io_my_file_id_url env var. we're using envman store destination path bitriseio_my_file_local_path env var. subsequent steps use var access file. my-workflow:\n steps:\n - script:\n inputs:\n content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n file\n wget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\n echo \"file downloaded to: $file_local_path\"\n alternatively, example, set location app env var and simply download path instead defining inside script step. optionally, export file's local path so use subsequent steps workflow. my-workflow:\n steps:\n - script:\n inputs:\n content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n file\n wget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\n echo \"file downloaded to: $file_local_path\"\n\n file path subsequent steps\n envman add --key bitriseio_my_file_local_path --value " });
this.add({id:464, 
title:"Using encrypted files in your builds", 
body:" using encrypted files builds you use encrypted files bitrise, easily. after encrypting file computer, upload generic file storage decrypt file step custom decrypting solution decrypt need it. you use encrypted files bitrise, easily securely. all need encrypt file computer, upload generic file storage use decrypt file step custom decrypting solution decrypt need it. gpg encryption please note decrypt file step decrypts files encrypted with gpg. if use encryption software, able decrypt using step. you can, course, set decryption solution script step. " });
this.add({id:465, 
title:"Encrypting your files", 
body:" encrypting files in example, we’ll use pwgen password generator tool gpg encryption software encrypt file. open terminal\/command line. create 32 character passphrase encryption. keep passphrase you need passphrase decrypt file bitrise. pwgen -s 32 1 encrypt file. in example, file called my_secret_file . gpg -c my_secret_file optionally, encrypt file(s) non-interactive way. gpg --batch --passphrase <passphrase> -c my_secret_file " });
this.add({id:466, 
title:"Decrypting and downloading your files during a build", 
body:" decrypting downloading files build after successfully encrypted file, need upload bitrise able decrypt build. in procedure, we'll use decrypt file step decrypt file. gpg encryption please note decrypt file step decrypts files encrypted with gpg. if use encryption software, able decrypt using step. you can, course, set decryption solution script step. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab, add decryption passphrase secret . upload file bitrise copy environment variable (env var) uploaded file. this env var stores download url go workflows tab. open workflow editor . add decrypt file step workflow. paste env var file encrypted file path input. in output file path input, specify path want place decrypted file. subsequent steps able access file path. using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. a bitrise.yml example decrypting files ---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: macos\nworkflows:\n secret:\n steps:\n - activate-ssh-key@4: {}\n git-clone@6: decrypt-file@0:\n inputs:\n encrypted_file_path: \".\/secret.txt.gpg\"\n output_file_path: \".\/secret\/\"\n decrypt_passphrase: \"$password_for_encrypt\"\n deploy-to-bitrise-io@2: {} " });
this.add({id:467, 
title:"Build artifacts online", 
body:" build artifacts online a build bitrise does produce artifacts: example, test reports, images, executable binaries. if select app, artifacts tab, check artifacts generated build. build artifacts any files generated bitrise build: test results, screenshots, executable binaries, so on. you view build places: on artifacts tab build's page. here view artifacts. the artifacts page main app. here see installable binaries. there limitation number files deployed artifacts tab build. there limitation, however, file size 2gb file. artifact retention 365 days artifacts older than 365 days permanently deleted. " });
this.add({id:468, 
title:"The Installable artifacts page", 
body:" the installable artifacts page on installable artifacts page, can: view installable binaries past builds. download installable artifacts. check details page artifacts. this include public install page . to page, log bitrise, select workspace owns app, open bitrise ci . select app see artifacts left. you filter installable artifacts using different filters: platform binary (ios android). the timeframe build generated it. the workflow build ran on. the branch repository was built. " });
this.add({id:469, 
title:"Artifact details", 
body:" artifact details you check details any installable artifact (a binary, ipa apk\/aab file) generated bitrise build. the potentially include: the exact filename. the version binary. metadata time creation file size. a qr code installation. a link public install page enabled. to details page, open artifacts page select file installable artifacts list. on details page itself, important thing install app mobile device. this particularly useful testing purposes. you options: a qr code: scan install binary. a link public install page. note you're trying install ios app device, device registered apple developer portal. you see available devices who install app? section. " });
this.add({id:470, 
title:"Deploying files into artifacts", 
body:" deploying files artifacts artifacts deployed artifacts section build’s page with help deploy bitrise.io step. it deploys files generated build stores $bitrise_deploy_dir directory. to deploy artifacts, insert deploy bitrise.io step after step(s) generate artifacts better deploy bitrise.io step end workflow. put step right place add deploy bitrise.io step right place. if insert steps generate files build, deploy bitrise.io deploy. note content any sub-directories deploy directory displayed artifacts section build. you can, however, compress artifacts zip file modify default false value true compress artifacts file field deploy bitrise.io step. this compress directory with sub-directories deploy artifacts . " });
this.add({id:471, 
title:"Modifying the target directory path", 
body:" modifying target directory path you modify target directory path make sure reference paths steps workflow ensure generated files collected directory. " });
this.add({id:472, 
title:"Viewing artifacts if your build has failed", 
body:" viewing artifacts build failed with run previous step failed toggle enabled, access build artifacts - successfully generated failed. for example, detect bugs failed looking test report files. " });
this.add({id:473, 
title:"Who can access build artifacts?", 
body:" who access build artifacts? the artifacts artifacts accessible owner, admin, developer, tester\/qa app. besides roles, default config enable public page app feature, receives url, able access app artifacts. " });
this.add({id:474, 
title:"Environment Variables", 
body:" environment variables an environment variable (env var) key-value pair holds data use builds inserting step inputs. an environment variable (env var) key-value pair holds data use builds inserting step inputs. for example, working directory app's repository stored env var so don't specify path step input needs it. you configure env vars entire app specific workflows . app level env vars available workflow app; given workflow. size limit env var list individual vars by default, env var list size 120 kb. you easily increase using script step described knowledge base article . the default size limit env var 20 kb. you increase using script step following knowledge base article . secrets specific type environment variable: hide information encrypted format value exposed build logs. protect confidential information unlike secrets, env vars fully exposed builds triggered pull requests so add any sensitive information vars. " });
this.add({id:475, 
title:"Scope of Environment Variables", 
body:" scope environment variables users declare environment variables different levels: app level. workflow level. step level. automatically exposed environment variables in addition user-declared env vars, vars automatically exposed bitrise cli bitrise.io. these available any build. you list here: available environment variables app level env vars available build given app. whenever create new workflow, example, immediately automatically access single app level env var. a workflow level env var available specific workflow was defined in. if primary workflow env var with key test_env , deploy workflow won't able access env var. chaining workflows if chain workflows , using after_run parameter, define env var workflows, subsequent workflows chain able access var. a step level env var defined particular step build. such env var available workflows, preceding steps workflow. subsequent steps, however, access it. outputs exposed environment variables. you set environment variables, regardless level, workflow editor, app's bitrise.yml file, build with custom script using envman tool: setting an env var in the workflow editorsetting and managing env vars during a build environment variables given processing order based level: availability order of environment variables" });
this.add({id:476, 
title:"Availability order of Environment Variables", 
body:" availability order environment variables environment variables (env var) available env var processed. there env vars exposed bitrise cli. these available start: example, bitrise_source_dir bitrise_triggered_workflow_id . all env vars processed available build progresses. the processing order following: env vars exposed bitrise cli. secrets : processed workflow starts. one-off environment variables specified build api. app environment variables. workflow environment variables: processing specified starts, env vars available. if workflow workflows chained , environment variables chained workflows processed available right first step workflow run. step inputs: exposed step, right start. step outputs: exposed specific step, so available subsequent steps finishes. " });
this.add({id:477, 
title:"Setting an Env Var in the Workflow Editor", 
body:" setting env var workflow editor every env var value string the value environment variable secret string. even set number (for example, 7), passed using $ character you use $ character value env var secret (for example, password) case leave replace variables inputs? toggle inactive. if replace variable's key with value inputs, bitrise cli treat env var $ character. to set new environment variable (env var): open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select env vars navigation menu. choose level env var: scroll app environment variables section set app level env var. scroll workflow environment variables sections set env var specific workflow. click add new button chosen section. type env var key key input field value value input field. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n click save right corner. that's it. your new env var saved ready used. " });
this.add({id:478, 
title:"Setting a custom Env Var when starting a build", 
body:" setting custom env var starting build when scheduling new build starting manually, option set custom environment variables (env var). these variables available started scheduled. don't use key app env var app environment variables precedence custom variables! this means define env var with key var, build use value var. on bitrise ci page app, start build button click with clock icon it. in build configuration pop-up window, select advanced tab. find custom environment variables section. enter key value. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n press + add environment variable button. finish starting scheduling build. " });
this.add({id:479, 
title:"Using an Env Var in a Step input", 
body:" using env var step input many step inputs accept environment variables (env var) secrets input values. sensitive inputs input fields marked sensitive accept secrets input. generally, recommend changing value inputs. to use env var secret step input value: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . select step workflow. for example, git clone repository step. choose step input. for example, clone destination (local) directory path input git clone repository step. next input, click insert variable . find env var list, select it. you search env var typing key (or it) filter key search field. env vars generated steps the interactive list env vars generated previous steps workflow. for example, want insert var inputs step workflow, choose first second steps. that's it. the time run build workflow, step input use value inserted env var value. " });
this.add({id:480, 
title:"Using Env Vars in the value of an Env Var", 
body:" using env vars value var environment variables (env var) normally contain simple string value. however, possible set env var includes vars values. secrets variable values the methods described apply secrets . you embed secret env var. you can, any time, use environment variable value env var - embedding var, so speak. for example, let's say want set $bitrise_auth env var $personal_access_token env var. to this, need make sure key $bitrise_auth replaced with value so embedded env var passed workflows steps. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select env vars navigation menu. under key env var need, toggle replace variables inputs? toggle active. " });
this.add({id:481, 
title:"Setting and managing Env Vars during a build", 
body:" setting managing env vars build you set env vars build defining step, typically script step. to accomplish this, use envman tool. new env vars effect step any environment variable create with envman tool takes effect subsequent step workflow. in words, can't use newly created environment variable was created. here simple example we're using envman add new env var with key my_release_note : envman add --key my_release_note --value \"this release note\" you envman any step, including script step, script (stored repository) bitrise build. you specify value --value parameter, using pipe: echo 'hi' | envman add --key my_release_note you read value file: envman add --key my_release_note --valuefile .\/some\/file\/path once env var exposed, use like any var. you exposed vars inputs steps well. here example we’re exposing release note env var using script step send slack message step: workflows:\n example:\n steps:\n - script:\n inputs:\n content: |\n #!\/bin\/bash\n envman add --key my_release_note --value \"this release note\"\n echo \"my release note: $my_release_note\"\n slack:\n channel: ...\n webhook_url: message: \"release $my_release_note\" if want expose value env var accessible key var, so. for example, expose value bitrise_build_number key my_build_number :  envman add --key my_build_number --value \"${bitrise_build_number}\" after this, subsequent steps value bitrise_build_number my_build_number env var. if change value bitrise_build_number this, value my_build_number won’t modified, hold original value! if need know custom env var defined, easily check it, overwrite value: #!\/bin\/bash\nset -ex\nif [ ! -z \"$api_project_scheme\" ] ; then\n envman add --key project_scheme --value \"$api_project_scheme\"\nfi this script checks api_project_scheme env var defined, is, value assigned project_scheme environment variable, overwriting original value project_scheme . " });
this.add({id:482, 
title:"Setting Env Vars in the bitrise.yml", 
body:" setting env vars bitrise.yml you set env vars directly bitrise.yml configuration file app. you set app level workflow env vars app's config file. in example, configuration with app-level env var called test_key : app: \n envs: - opts: is_expand: false test_key: test value replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n in example, deploy-alpha workflow defines env var called env_type , runs workflow use env var: workflows:\n\n deploy-alpha:\n envs:\n - env_type: alpha\n after_run:\n _deploy\n\n _deploy:\n steps:\n script:\n inputs:\n content: |\n #!\/bin\/bash\n echo \"env_type: $env_type\" if run deploy-alpha workflow, set env_type env var alpha , run deploy workflow, use env var. in example, simply print value (the printed text be: env_type: alpha ). " });
this.add({id:483, 
title:"Secrets", 
body:" secrets secrets specific type environment variable: aren't shown bitrise.yml value exposed build logs. secrets specific type environment variable: hide information encrypted format value exposed build logs. they aren't shown bitrise.yml configuration either. you store confidential information, passwords api keys secrets. just like environment variables, secrets used value step input: using an env var in a step input sensitive inputs input fields marked sensitive accept secrets input. generally, recommend changing value inputs. " });
this.add({id:484, 
title:"Setting a Secret", 
body:" setting secret every env var value string the value environment variable secret string. even set number (for example, 7), passed using $ character you use $ character value env var secret (for example, password) case leave replace variables inputs? toggle inactive. if replace variable's key with value inputs, bitrise cli treat env var $ character. there ways creating new secret graphical ui workflow editor. in first procedure, we're using secrets tab. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click add new button. type env var key key input field value value input field. exposing secrets pull requests under value, see expose pull requests? toggle. by default, secrets aren't exposed pull requests. we strongly recommend exposing secrets pull requests cases. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n on right secret, click save button. the method create secrets modifying step input values. you marked sensitive . sensitive inputs accept secrets so choose existing list, create new one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. select workflow step want configure. find sensitive input wish modify. click input field. under create new secret env var label, specify key value new secret. exposing secrets pull requests under value, see expose pull requests? toggle. by default, secrets aren't exposed pull requests. we strongly recommend exposing secrets pull requests cases. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n click add new button. " });
this.add({id:485, 
title:"Editing an existing Secret", 
body:" editing existing secret once you’ve added new secret env var secrets tab, come any time, modify content make protected curious eyes! open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click edit value secret. modify content needed. on right secret, click save button. " });
this.add({id:486, 
title:"Protecting the value of a Secret", 
body:" protecting value secret normally, hide value secret clicking eye icon. this feature useful long list secret env vars secrets wish check value secret leaving values hidden. if hidden, it’s represented with crossed eye icon. however, hide value secret permanently making protected. if so, one, including yourself, able change view again. a secret's protection can't undone making secret protected irreversible. if need change value, delete create new one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click edit value secret. click make protected . the pop-up window warn process irreversible. click make protected . that's it. you longer view value secret. " });
this.add({id:487, 
title:"Exposing a Secret to pull requests", 
body:" exposing secret pull requests by default, pull requests access values secrets. this means request opened fork repository triggers build, build can't use app's if need grant pull request builds access particular secret, expose secret requests. however, exposed, value won't visible logs: displayed [redacted]. protected secrets can't exposed once secret protected , can't expose pull request builds. public apps if app public app, can't expose app's secrets pull requests builds. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click edit value secret. toggle expose pull requests? toggle. once secret exposed, pull request builds access it. " });
this.add({id:488, 
title:"Managing Secrets across multiple apps", 
body:" managing secrets multiple apps by default, secrets handled app level. you reuse secret keys multiple bitrise apps, corresponding values different app. however, possible set secret holds value apps, manage location. for example, apps need access api, makes sense store containing api key central if changes, change single location applies bitrise apps. there ways achieve this: managing secrets workspace . this available enterprise plans. managing secrets central location vault database pulling with step. " });
this.add({id:489, 
title:"Managing Secrets on a Workspace level", 
body:" managing secrets workspace level on enterprise plans, store secrets workspace level. this means secret accessible apps owned workspace. increased security: owners managers access secrets. downgrading if downgrade enterprise plan, workspace secrets converted app level secrets. when passing secrets build, app level precedence workspace availability order . this means secrets with key, app level secret used build. to add new secret: on bitrise main page, select settings navigation menu left. it takes workspace settings page. on workspace settings page, select shared resources . click add new button. add key value. configure usage details secret: replace variables inputs : this passes value secret string build. use embedded secrets environment variables: key variable. for use cases, don't need checked. expose pull requests : exposing secret pr means available use pull request builds. depending repository's privacy settings, potential security risk! protected : the value changed viewed again. this setting irreversible saved. when you're ready, click done . " });
this.add({id:490, 
title:"Managing Secrets from a central vault or database", 
body:" managing secrets central vault database setting secrets central location requires things: a central vault database - hashicorp doppler store secrets. it accessible cli. a script step access central vault\/database, pull secret set sensitive bitrise. to create new secret store central location build: add secrets key-value pair vault database want store them. add script step all workflows want use secrets. add necessary commands access vault pull secrets. the exact depend service you’re using. use envman tool mark secrets sensitive. the envman following syntax: envman add --key key --value value --sensitive . make sure step doesn’t display value secret build log. to so, remove set -x step’s content . secret redaction please note secret redaction turned off, secrets redacted thus value visible logs. storing secrets hashicorp vault let’s say hashicorp vault instance called secret\/hello . you secrets vault instance: foo with value world foo2 with value world2 . to use secrets bitrise build, need to: export vault instance. iterate mark sensitive. you use script achieve both: # exporting secrets\nvault kv --format=json secret\/hello | jq -r '.data.data to_entries[] [.key, .value] @tsv' \n# iterating secrets marking sensitive\nwhile ifs=$'\\t' read key value; do\n envman add --key \"$key\" --value \"$value\" --sensitive\ndone " });
this.add({id:491, 
title:"Redacting Secrets", 
body:" redacting secrets the bitrise cli automatically redacts secret env vars prints [redacted] with newlines key so secret env vars not visible build log. this applies private public apps. you turn any time need secrets visible logs. this potential security risk. we strongly recommend turn secret redaction. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click add new register bitrise_secret_filtering secret environment variable with false value. click save right corner. " });
this.add({id:492, 
title:"Build statuses", 
body:" build statuses on the builds page, track current status builds. there different build statuses: hold, starting, running, aborted, failed, success. on builds page, track current status builds. there different build statuses: on hold : there builds started than current plan allows. in cases, relevant legacy, concurrency-based plans: means don't concurrency start build. time limit all builds hold aborted 30 days ensure build gets permanently stuck. starting : when build triggered, bitrise creates virtual machine run it. if computing resources aren’t immediately available, placed queue. once worker assigned create processing request. running : once virtual machine ready go, build starts running. this means bitrise executing steps defined workflow. aborted : a build aborted manually user, automatically rolling builds feature build time run out. aborted with success there specific status called aborted with success: means build aborted api reported success git hosting provider. use the  abort_with_success  parameter with bitrise api abort build count successful one. failed : in cases, build fails any steps fails. there exceptions, caching steps , mark steps skippable means fail, build running. success : if bitrise successfully executes steps aren’t marked skippable, build successful. you check build status builds page app, send status reports: reporting the build status to your git hosting provider" });
this.add({id:493, 
title:"Installing tools during a build", 
body:" installing tools build if need tool isn't preinstalled build machines can’t step it, install use with scripts script steps. if need tool isn't preinstalled build machines can’t step it, install use with scripts script steps. add script step workflow, write script there, run repository. passwordless sudo enabled build virtual machines, so freely use sudo need it. once working script, transform step optionally share with others (through steplib). read more: developing a new step open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click + sign insert step position step library . in search steps bar, search “script” click script step . this add workflow. click step workflow. insert script script content input field. running script repository if want run script repository, script step. paths relative repository’s root. for example, bash script path\/to\/script.sh add script content input field run with following command: #!\/bin\/bash\nset -ex\nbash .\/path\/to\/script.sh you run non-bash scripts too, example, ruby script : #!\/bin\/bash\nset -ex\nruby .\/path\/to\/script.rb installing cmake macos install cmake with script step macos with following brew command: #!\/bin\/bash\nset -ex\nbrew install cmake brew install you use brew install step install cmake tools. installing cmake linux install cmake with script step linux with following apt-get command: #!\/bin\/bash\nset -ex\nsudo apt-get install -y cmake use -y flag apt-get if don’t add -y (yes) flag apt-get command, apt-get present prompt accept deny manually. this problem linux machine ci environment can’t provide manual input apt-get . to prevent issue, auto accept prompt, just use -y flag, shown example. run npm command you use run npm command step install cmake tools. installing ios 13 runtime xcode 14 stacks install ios 13 runtime xcode 14 stacks with script step. #!\/bin\/bash\nset -ex\nsudo xcodes runtimes install \"ios 13.0\" available simulator runtimes macos stacks you install runtimes using similar syntax, mind, preinstalled stacks. if interested list tools, simulator stacks, available stack’s  system report github . " });
this.add({id:494, 
title:"Installing tools by declaring deps in the bitrise.yml file", 
body:" installing tools declaring deps bitrise.yml file instead installing dependency tool using installer step script step, use deps option bitrise.yml . if declare deps specific step, bitrise cli check tool installed, install you, required. if selected tool dependency available, bitrise cli install it. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go bitrise.yml tab. find step need: declare dependencies step. add deps step title: workflows:\n test:\n steps:\n - script:\n deps: declare package manager name. workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n name: cmake\n apt_get:\n cmake declaring binary if want declare dependency available source (not package manager), related binary . if package does match binary name, declare with bin_name . an example aws cli, package managers awscli , binary itself aws . workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n name: awscli\n bin_name: aws " });
this.add({id:495, 
title:"Connecting to a VPN during a build", 
body:" connecting vpn build to connect vpn build, make sure step establishing connection, set openvpn server. you require vpn connection build, able connect server, git clone repository access private api. to connect vpn, need to: make sure local network address space does clash with bitrise virtual machines' address space cause error with vpn. install configure required vpn components. connect vpn. you configure connect vpn workflow - before use connection, course. for example, require connection access repository, git clone step. ssh sessions when choose vpn tool setup\/configuration, careful not to restart or abort existing ssh sessions! the bitrise.io workers abort build ssh connection build’s control\/master machine virtual terminates! " });
this.add({id:496, 
title:"Accessing a repository via VPN", 
body:" accessing repository vpn if repository app accessed vpn, things mind all: during builds, vpn connection established cloning repository virtual machines: practice, means step establishing placed git clone step workflow . when adding new app, need workaround: use dummy repository accessed vpn process app. let’s workaround! create repository accessible vpn connection. add new app, using repository source. make sure private app! there need register webhook . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select general . at basic settings section, click edit . in pop-up window, paste new repository url. click save . place step steps establishing vpn connection any access repository workflow. and you’re done. for different methods establishing vpn connection, look example configurations. " });
this.add({id:497, 
title:"Example VPN configurations", 
body:" example vpn configurations in section, present example configurations connecting vpn build: using openvpn server . using strongswan vpn . using cisco vpn . " });
this.add({id:498, 
title:"Using the Connect to OpenVPN Server Step", 
body:" using connect openvpn server step to use connect openvpn server step, need build openvpn server advance, encode certificate files private key. set openvpn server . encode following base64: ca certificate client certificate client private key you base64 encode files with following command: $ base64 <filepath> open app bitrise workflow tab. register encoded certificates key secrets . we recommend using following keys default inputs vpn step: ca certificate: $vpn_ca_crt_base64 client certificate: $vpn_client_crt_base64 private key: vpn_client_key_base64 add connect openvpn server step workflow. add step any steps require vpn connection. add previously created secrets respective inputs: base64 encoded ca certificate base64 encoded client certificate base64 encoded client private key if created secrets with recommended keys, change inputs. fill required inputs. host : open vpn server ip hostname port : openvpn server port number protocol : openvpn server protocol " });
this.add({id:499, 
title:"Using Strongswan VPN", 
body:" using strongswan vpn this example script save repository run there, just copy paste content script step bitrise configuration ( bitrise.yml \/ workflow). the script uses strongswan vpn connect vpn. it works macos linux. once run successfully, any subsequent bitrise step access devices services connection. #!\/usr\/bin\/env bash\nset -e\n\necho \"wan ip\"\n# this prints servers internet ip adress log, useful debugging\ncurl http:\/\/httpbin.org\/ip\n\ncase \"$ostype\" in\n linux*)\n echo \"configuring linux\"\n\n # variables\n etc_dir=\/etc\n etc_sudo='sudo' sudo needed linux strongswan configuration\n\n install strongswan\n \"installing strongswan...\"\n sudo apt-get install -y strongswan\n\n ;;\n darwin*)\n mac os\"\n\n etc_dir=\/usr\/local\/etc\n etc_sudo='' not os using homebrew\n openssl...\"\n manually openssl first save time, installing directly compiles source instead\n brew openssl\n *)\n \"unknown operative system: $ostype, exiting\"\n exit 1\n ;;\nesac\n\n\n# method rendering template string file (when run, returns input with $variables replaced env)\nrender_template() {\n eval \"echo \\\"$(cat $1)\\\"\"\n}\n\n# create temporary directory hold files\ntemp_dir=\/tmp\/vpn-config\nmkdir $temp_dir\n\n# ipsec config file, see examples https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ikev1examples https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ikev2examples\necho \"downloading ipsec.conf...\"\nwget https:\/\/www.example.com\/ipsec.conf.template -o $temp_dir\/ipsec.conf.template\n# credentials documentation https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ipsecsecrets\necho ipsec.secrets...\"\nwget https:\/\/www.example.com\/ipsec.secrets.template $temp_dir\/ipsec.secrets.template\n# in cases need download certificate, certificate chain, vpn endpoint\necho server.crt...\"\nwget https:\/\/www.example.com\/server.crt $temp_dir\/server.crt\n\necho \"rendering templates\"\nrender_template $temp_dir\/ipsec.conf.template > $temp_dir\/ipsec.conf\nrender_template $temp_dir\/ipsec.secrets.template $temp_dir\/ipsec.secrets\n\necho configuration\"\n$etc_sudo cp $temp_dir\/ipsec.conf $etc_dir\/ipsec.conf\n$etc_sudo $temp_dir\/ipsec.secrets $etc_dir\/ipsec.secrets\n$etc_sudo $temp_dir\/server.crt $etc_dir\/ipsec.d\/ocspcerts\/server.crt\n\n# start ipsec service\necho \"starting ipsec\"\nsudo start\n\n# we're sleeping commands, mostly problems otherwise\nsleep 1\n\n# output helpful status log\necho \"status statusall\n\nsleep switch myconnection connection ipsec.conf\necho \"initiating connection\"\nsudo myconnection\n\nsleep 1\n\ncase el capitan, `sudo up` command consistently fails succeeds restart service\n \"restarting ipsec\"\n restart\n\n sleep 1\n\n connection\"\n myconnection\n\n step apply routing traffic trough (that is, remote range 0.0.0.0\/0)\n capitan getting dns configuration interface. also ipv6 causes issues. so we're manually turning forcing new configuration.\n \"disabling settings\"\n fetch main interface\n main_interface=$(networksetup -listnetworkserviceorder | awk -f'\\\\) ' '\/\\(1\\)\/ {print $2}')\n completely disable ipv6\n networksetup -setv6off \"$main_interface\"\n 10.0.0.1 server\n -setdnsservers \"$main_interface\" 10.0.0.1\n *) ;;\nesac\n\n# your running. any following steps bitrise workflow access devices 🎉\n " });
this.add({id:500, 
title:"Using Cisco VPN", 
body:" using cisco vpn you use cisco vpn connect step: connects with cisco vpn provided vpn3000 concentrator, juniper\/netscreen, ios pix using vpnc. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add cisco vpn connect step start workflow. provide vpn client settings credentials required step by: using existing vpnc configuration file: vpnc.conf using command line options input step. the options specified precedence configuration file! for information setting vpnc, check vpnc homepage vpnc manual . " });
this.add({id:501, 
title:"Finding a specific build", 
body:" finding specific build if app multiple builds, search specific main page using variety options, like build number commit message. build retention 200 days on builds page app, builds 200 days. the limit applies searching specific builds page. this limitation applies api calls: get\/apps\/{app-slug}\/builds endpoint related endpoints return builds 200 days. however, methods build older than 200 days: if know exact build url, access build. you use get\/apps\/{app-slug}\/archived-builds api endpoint: listing the archived builds of an app . if app multiple builds bitrise.io , search specific using variety options. to so: open app bitrise. on main page app, search options list builds. you options: in search build number commit message field, enter build number commit message build. choose filter status dropdown menu builds with specific status. choose filter branch dropdown menu builds ran specific branch. choose filter workflows dropdown menu builds ran with specific workflows. choose filter triggers dropdown menu builds triggered trigger options: pushes, pull requests, tags. " });
this.add({id:502, 
title:"Build numbering and app versioning", 
body:" build numbering app versioning all bitrise builds build number. the first app is, default, number 1, gets incremented with build. you change manually. all bitrise builds build number. the first app is, default, number 1, gets incremented with build. you build’s website, $bitrise_build_number environment variable. this variable used any step script need bitrise build number reason. you care app’s versioning automatically, using bitrise. we steps you: setting up app versioning automatically on bitrise" });
this.add({id:503, 
title:"Adding the SSH key to the machine user", 
body:" adding ssh key machine user in order bitrise able use machine user access repository, add ssh key app bitrise. negative build numbers the build number 0 positive integer. negative numbers accepted. you can, however, set any used. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . scroll next build number . this number automatically incremented run build set manually. to modify number, click edit . " });
this.add({id:504, 
title:"Setting up app versioning automatically on Bitrise", 
body:" setting app versioning automatically bitrise track version app git repository modifying file containing essential information (for example, info.plist file ios apps build.gradle file androidmanifest.xml file android apps). bitrise steps you. these steps insert build number specified respective files: change android versioncode versionname android apps. set xcode project build number ios apps. both steps accept numbers (integers and\/or numeric strings) environment variables relevant inputs. by default, use $bitrise_build_number environment variable default value build number. " });
this.add({id:505, 
title:"Setting the versionCode and the versionName of an Android app", 
body:" setting versioncode versionname android app for android app, setting used internal version number, determine build app recent than build. the versionname setting string used version number shown users. for in-depth information android versioning, check android developer guide subject . version information manifest file in guide, we’re setting version information build.gradle file. this recommended method: set directly androidmanifest.xml file aware any version info set manifest build overwritten build.gradle file’s settings build. to configure android versioning: add change android versioncode versionname step workflow. set path build.gradle file path build.gradle file input. add value new versioncode input. the default value $bitrise_build_number environment variable. add value new versionname input. " });
this.add({id:506, 
title:"Setting the CFBundleVersion and CFBundleShortVersionString of an iOS app", 
body:" setting cfbundleversion cfbundleshortversionstring ios app for ios app, value cfbundleversion key (“bundle version” xcode) build number app value cfbundleshortversionstring key (“bundle versions string, short” xcode) version number app. for in-depth information ios versioning, including functions cfbundleversion cfbundleshortversionstring keys, check apple technical note ; look summary important keys . setting ios versioning apps using xcode 13+ to set ios versioning bitrise using xcode 13+, update following xcode: set generate info.plist file no , project targets build settings tab. make sure necessary keys defined info.plist file. add set xcode project build number step workflow. set file path info.plist file project path, scheme target input. add value build number input. this sets cfbundleversion key specified value info.plist file. the default value $bitrise_build_number environment value. optionally, add value version number input. this set cfbundleshortversionstring key specified value info.plist file. this input required. " });
this.add({id:507, 
title:"Offsetting the build version", 
body:" offsetting build version you offset app’s build version numbers handled tracking different way app: need setting value added number. the fixed integer environment variable. to offset version number bitrise build time triggered, use $bitrise_build_number environment variable: for android apps, versioncode offset input change android versioncode versionname step set $bitrise_build_number value. the value variable added specified versioncode input. for ios apps, build number offset input set xcode project build number step set $bitrise_build_number value. the value variable added specified build number input. offsetting android app's version let’s say app run fifth build bitrise. you wish offset build number 6 builds starting use the following configuration used: - version code: $bitrise_build_number\n- code offset: 6\n- name: 1.0.5 the value $bitrise_build_number (which equals 5 example) added version code offset value. as such, android:versionname value set 1.0.5 (11), indicating it’s 11th build version app. offsetting ios app's version let’s say app run fifth build bitrise. you wish offset build number 6 builds starting use the following configuration used: - build number: $bitrise_build_number\n- number offset: 6\n- version 1.1 the value $bitrise_build_number (which equals 5 example) added build number offset value. as such, cfbundleshortversionstring set 1.1 (11), indicating it’s 11th build version app. " });
this.add({id:508, 
title:"Build data and troubleshooting", 
body:" build data troubleshooting " });
this.add({id:509, 
title:"Build logs", 
body:" build logs on bitrise, build logs easily accessible: viewed website entirety downloaded view device. build logs allow users analyze builds went wrong - right! on bitrise, build easily accessible: viewed website entirety downloaded view device. build retention 200 days on builds page app, builds 200 days. the limit applies searching specific builds page. this limitation applies api calls: get\/apps\/{app-slug}\/builds endpoint related endpoints return builds 200 days. however, methods build older than 200 days: if know exact build url, access build. you use get\/apps\/{app-slug}\/archived-builds api endpoint: listing the archived builds of an app . " });
this.add({id:510, 
title:"Finding a build log", 
body:" finding build log when run build, build log generated automatically. every log, with unique url. the url contains slug: hexadecimal identifier specific build. assisting bitrise support when bitrise support asks build logs, best thing send url. find app dashboard, select it. on app's main page, select build want check out. make sure log tab selected. on log tab, see steps workflow status. by default, failed expanded. expand any step's info clicking downward arrow right step. this relevant build log. " });
this.add({id:511, 
title:"The build log page", 
body:" the build log page the build log page shows steps build, status. by default, failed expanded, with error message highlighted convenient troubleshooting. expanding step allows see: the start time step's run. the step id. this how bitrise.yml configuration file identifies step. for information, see step reference\/id format . the current version step. underneath number, check release notes if build didn't run with latest step, click update open workflow editor update step different version. under step resources , check step's documentation integrations page, source code issue tracker github. to view build log's contents full, single file, download log . " });
this.add({id:512, 
title:"Following a build log live", 
body:" following build log live you check log build live - is, running. what’s more, follow happening. that means progresses, automatically scroll new sections appear. to so: start build. go build’s page. scroll log. click follow . to stop following, just need manually navigate log. you restart following any time. " });
this.add({id:513, 
title:"Downloading a build log", 
body:" downloading build log if need send build logs people access app bitrise, want store archives, simply download log file bitrise. log security please note build log contain sensitive information! make sure check contents downloading file sending anyone. we recommend using secrets make sure sensitive appears build logs. find app dashboard, select it. on app's main page, select build want check out. open logs dropdown menu click download logs button. " });
this.add({id:514, 
title:"Deleting a build log", 
body:" deleting build log if necessary, delete logs any build bitrise. it handy if, example, want new team members see potentially sensitive information displayed previous logs. not team members authorized delete logs: with admin owner role team it. deletion final be aware undo deleting log. once delete it, way recover log file. find app dashboard, select it. on app's main page, select build want check out. open logs dropdown menu click delete logs button. in pop-up window, click delete logs . " });
this.add({id:515, 
title:"Remote access", 
body:" remote access remote access allows users connect build’s virtual machines ssh screenshare app, build's build details page. remote access allows users connect build’s virtual machines ssh screenshare app. a failed build rebuilt with remote enabled make troubleshooting lot easier - example, logs don’t provide information error. you rebuild standalone builds pipeline builds with remote access. authorization users testers\/qa roles app cannot use remote access. there ways use remote access build machines: ssh : available linux\/docker based macos machines. screenshare : available macos machines. it uses vnc system. with method, access build machine remotely 10 minutes finished. if like extend availability remote access, so adding simple custom script step failed step. check extending the availability of remote access information. build time when using remote access, 10 minutes added overall build time. " });
this.add({id:516, 
title:"Remote access with SSH", 
body:" remote access with ssh to access bitrise build machine with ssh, need command line interface correct password: open app bitrise. on main page app, build want re-run with remote access click it. on rebuild button, click downward arrow open dropdown menu. select rebuild with remote access . this starts new build access remotely. in ssh section, command run command line interface. and done! you able access virtual machine build running. " });
this.add({id:517, 
title:"Remote access with screenshare", 
body:" remote access with screenshare to access bitrise build machine with screenshare app, need correct username, password, address, vnc app: macos remote access with screenshare available workflows run macos-based stack . if workflow's stack (or absence workflow-specific stacks, app's default stack) linux-based one, won't see screenshare instructions all. open app bitrise. on main page app, build want re-run with remote access click it. on rebuild button, click downward arrow open dropdown menu. select rebuild with remote access . this starts new build access remotely. under screenshare option, required information: address username password open vnc screenshare application. the simplest option using default screen sharing application macos. fill required fields with information screenshare option. and done! you able access virtual machine build running. " });
this.add({id:518, 
title:"Finding your files on the VM", 
body:" finding files vm once successfully logged bitrise virtual machine ran build, dive files see what’s happening real time. after finished cloning app vm, access following location: \/users\/vagrant\/git " });
this.add({id:519, 
title:"Extending the availability of remote access", 
body:" extending availability remote access remote access available build running 10 minutes finished. if enough, there’s simple workaround make sure remote longer time. add script step causes build fail. toggle run previous step failed option ensure script step runs. add command let build “sleep” time specified seconds: sleep 5400 this example lets build run 90 minutes. it than time limit, course. that’s it. while build running, look virtual machine possible issues caused fail. " });
this.add({id:520, 
title:"Debugging your build on your own machine", 
body:" debugging build machine if build fails bitrise, recommend try run locally. to debug: use clean git clone, machine with bitrise cli. if build fails bitrise, recommend try run locally, machine. to this, following: do clean git clone project’s online repository. run build machine with bitrise cli. this helps eliminate, things, common issue: uncommitted gitignored files working directory haven’t committed git repository online available bitrise clones running build. other possible issues include: code signing files present local machine uploaded bitrise. a difference version tool(s) used build. android projects if can’t reproduce issue locally, want delete $home\/.gradle (hidden) directory, clear gradle caches. (quick terminal \/ command line command: rm -rf $home\/.gradle ). run docker clean git clone if project uses android\/linux environment, download use exact environment build running bitrise.io . ideally, first clean git clone run docker there, so files .gitignore won’t affect build, build run way bitrise.io . " });
this.add({id:521, 
title:"Testing with a full clean git clone", 
body:" testing with clean git clone open terminal \/ command line interface machine. type in: cd \/tmp clone repository with: git clone repourl .\/quick-repo-test --branch branch-you-want-to-test : git clone https:\/\/github.com\/bitrise-io\/bitrise.git .\/quick-repo-test --branch master type cd .\/quick-repo-test. run commands want test, build project, open project file directory. " });
this.add({id:522, 
title:"Testing with the Bitrise CLI", 
body:" testing with bitrise cli after doing clean git clone, run build locally, using bitrise cli . install bitrise cli . download app’s bitrise.yml file bitrise.io . run build with: bitrise run <workflow-name> (for example, bitrise run primary ). this help reproducing issues cases, allows attempt debug machine. if build succeeds conditions fails bitrise, contact support! " });
this.add({id:523, 
title:"GitHub Checks with the Bitrise GitHub App", 
body:" github checks with bitrise app bitrise checks github app provides extended version classic status checks sends github. github app integration if use bitrise github app connect workspace account organization, don't need described section: checks automatically work provide status updates. you can, however, continue use oauth connection apps github checks with app. the bitrise github app provides, things, extended version classic build status checks sends github. this includes summary check status. you view click details link pull request github. it unfolds detailed build summary status github app attaches checks tab github. there different check statuses: success. failed. action required (in case manual pull request approval). to start using bitrise checks, need perform separate actions: install bitrise checks : install github app repository. this necessary github.com users. enterprise server users set integration proceed enable bitrise checks. enable bitrise checks : turn feature bitrise website run first build able select checks branch protection rules. " });
this.add({id:524, 
title:"Installing Bitrise Checks", 
body:" installing bitrise checks to use bitrise checks github.com user, need install github app. if workspace owns bitrise app github app connected granted access app's repository, don't need install enable checks: just start using it. github.com users if github enterprise server user, don't need procedure. to enable bitrise checks, to: install github enterprise server integration . enable github checks bitrise . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. click install bitrise checks app github repository link toggle. don’t toggle switch just yet, first need install bitrise checks. this link github's bitrise checks installation page. on install bitrise checks page, select user github organization want add bitrise checks to. select option install bitrise checks to: all repositories : applies current future repositories. only select repositories : select repositories need. with this, authorize bitrise checks act behalf; example, check repos access to, use github display results. click install authorize . in github prompt, provide password. if goes well, land bitrise checks page github. you see blue note top-left corner bitrise checks successfully installed github account. " });
this.add({id:525, 
title:"Enabling GitHub Checks on Bitrise", 
body:" enabling github checks bitrise once bitrise checks installed github, need enable github checks app’s page bitrise . enabling github checks limited please note workspace owners app admins enable toggle app settings page app. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. scroll toggle github checks switch. can't toggle switch? if can't toggle switch, check can't enable github checks . trigger build. you so automatically manually. if trigger build manually, provide specific commit hash this build necessary perform first bitrise check. once finished check, select checks branch protection rules. and you’re done! now any pull request open app github validated with bitrise checks build automatically started (if pull request trigger properly set bitrise). you easily app’s page bitrise. if click build summary view details bitrise checks link checks tab, you’ll quickly app’s build page. " });
this.add({id:526, 
title:"Can't enable GitHub Checks", 
body:" can't enable github checks there main reasons able toggle switch enable github checks: you toggle switch unless install bitrise checks first. once it’s done, ahead right enable it. if renamed moved github repository app added bitrise installed checks it. the repository’s url obviously changed. github checks switch work url github bitrise fully match (no redirect allowed). so case, manually update repository url app . " });
this.add({id:527, 
title:"Switching to Bitrise Checks from previous CI checks", 
body:" switching bitrise checks previous ci checks if using status checks pull requests prior merging, ci\/bitrise\/... check system. to able use bitrise checks, manually switch ci\/bitrise\/... bitrise access detailed checks. let’s see how! go settings tab repository. click branches menu. under require status checks pass merging , see ci\/bitrise\/... selected checks system. select bitrise instead ci\/bitrise\/... . merge pull request. " });
this.add({id:528, 
title:"Disabling GitHub Checks", 
body:" disabling github checks you easily disable github checks bitrise toggle enable github checks switch left settings page app. if decide uninstall bitrise checks github account, click uninstall button install github apps page. " });
this.add({id:529, 
title:"GitHub Checks test summary", 
body:" github checks test summary if app’s repository contains any ui unit tests, run tests using appropriate testing steps workflow, add deploy bitrise.io step, test results displayed test reports page see github checks, too. for example, android app, use virtual unit testing android step able see test results github checks. " });
this.add({id:530, 
title:"Step by Step error report", 
body:" step error report if ci build runs, github checks' test summary displays steps' successful failed tests separate tabs left sidebar. click step, detailed report comes number listed with actionable error report. the available bitrise tab. please note github checks' test summary print detailed information following steps: xcode test ios android unit test ios device testing virtual device testing android flutter test you export test results generated any step deploy bitrise.io step ways: we strongly recommend using export test results test reports add-on step: step locates test results based inputs. you configure custom script step creates exports necessary files. " });
this.add({id:531, 
title:"Checking the test results of a failed Step", 
body:" checking test results failed step if build failed tests, how access github checks: click bitrise checks dropdown. click step view error report specific step. you click steps build summary. the view details bitrise checks link takes build page bitrise. " });
this.add({id:532, 
title:"Re-running a build using GitHub checks", 
body:" re-running build using github checks role requirement to re-run build using github checks, github account connected bitrise , need developer role app's team. if conditions met, re-run checks fail error. for complete list user roles role cheatsheets, check  user roles app teams . if like re-run build using github checks: open pull request github like re-run checks. open checks tab. click re-run checks . " });
this.add({id:533, 
title:"Meercode", 
body:" meercode the meercode add-on was sunset february 1, 2023. check bitrise insights free alternative monitor build, test, credit data. meercode deprecation notice the meercode add-on was sunset february 1, 2023. check bitrise insights free alternative monitor build, test, credit data. " });
this.add({id:534, 
title:"Integrating Meercode with Bitrise", 
body:" integrating meercode with bitrise to monitor bitrise builds with meercode: an admin app’s team enable meercode add-on app. once add-on enabled, team members app authorize account. integrating meercode with personal access token previously, integrate meercode using bitrise personal access token meercode’s website. this method longer works! to monitor builds with meercode, need add-on. enabling meercode app please note users with admin role app's team enable add-on app. read user roles: user roles on app teams" });
this.add({id:535, 
title:"Enabling the add-on as an admin", 
body:" enabling add-on admin to enable add-on specific app: log bitrise account. on dashboard, app need. click app settings . on left, select add-ons menu options. below meercode , click enable add-on button. in pop-up window, see access rights add-on needs. click enable add-on grant rights. " });
this.add({id:536, 
title:"Authorizing the add-on as a user", 
body:" authorizing add-on user after admin enables meercode add-on, user app’s team authorize add-on account. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. next meercode , click open add-on button. on page, see access rights add-on needs. click authorize add-on grant rights. " });
this.add({id:537, 
title:"Revoking authorization on Meercode", 
body:" revoking authorization meercode every user app’s team revoke token meercode add-on app. go security tab personal account. scroll authorized add-ons . click revoke revoke access token meercode. once you’ve revoked token, won’t access add-on any more, unless re-authorize add-on. " });
this.add({id:538, 
title:"Disabling Meercode", 
body:" disabling meercode only workspace admin disable meercode add-on app’s members. here how: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. click disable add-on meercode confirm pop-up window. once it’s done, access add-on any more, unless enabled admin. " });
this.add({id:539, 
title:"Accessing build data and insights with Meercode", 
body:" accessing build data insights with meercode to monitor builds: log meercode account. open dashboard tab left menu see overview running completed builds. on page, see builds progress. you monitor current duration estimated completion time. below that, completed builds listed cards. on card, see completion status information build 10 runs. the share button top-right corner allows create public links view dashboard. these secret securely shared with team members. to access build insights meercode: open insights tab access reports summarized historical build data. use filters page limit results given date range, provider organization. " });
this.add({id:371, 
title:"Configuring build settings", 
body:" configuring build settings the heart build bitrise.yml file. you configure steps use, project type, trigger map, specify app- workflow-level env vars. you configure customize builds extensively. bitrise provides multitude options make sure build app exactly way want to. the heart build configuration bitrise.yml file: file contains configuration workflows steps use, specifies project type, trigger map, contains app- workflow-level environment variables specified. you store file bitrise.io git repository access bitrise.yml file any previous build ran. you configure notifications so users immediately notified build finished. if don't want run build time commit pushed pull request opened, certain files changed, using selective builds feature. if commits frequently pushed repository, with commit triggering new build, don't wait triggered build finishes start. use rolling builds feature make sure don't waste time! " });
this.add({id:372, 
title:"Setting the stack for your builds", 
body:" setting stack builds the build stack indicates virtual machine version bitrise use run build. you set builds, workflow-specific stacks, workflow editor bitrise.yml file. the build stack indicates virtual machine version use run build. you set stack builds, set workflow -specific stacks. changing machine types using api you change build machine types apps owned single user workspace using api: changing machine types in all apps at the same time . " });
this.add({id:373, 
title:"Setting the stack in the Workflow Editor", 
body:" setting stack workflow editor the simplest way configure build stack workflow editor . you set default stack workflow-specific stacks. " });
this.add({id:374, 
title:"Setting the default stack", 
body:" setting default stack the default stack app used haven't set specific workflow. project type note change project type app's settings tab type isn't compatible with selected default stack, we'll automatically change stack one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . in default stack section, open dropdown menu select stack need. click save right corner. " });
this.add({id:375, 
title:"Setting a Workflow-specific stack", 
body:" setting workflow-specific stack when set stack workflow, workflow run stack, regardless default stack. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . scroll workflow need. select stack. click save right corner. " });
this.add({id:376, 
title:"Setting the machine type in the Workflow Editor", 
body:" setting machine type workflow editor you define machine type want use build workflow editor. the available types depend stack use: table 13, “ . to set machine type: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . in default stack section, machine type default stack section choose machine type. optionally, choose workflow-specific machine type any workflow stack set. " });
this.add({id:377, 
title:"Setting the stack in the bitrise.yml file", 
body:" setting stack bitrise.yml file you set default stack workflow-specific tasks bitrise.yml file app. use meta field with appropriate stack id: meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x this particularly useful bitrise.yml file stored app's repository . stack ids you stack ids report: bitrise stack reports . alternatively, set stack workflow editor check id bitrise.yml tab, finding meta field. the stack reports pre-installed tool available stack. " });
this.add({id:378, 
title:"Setting the default stack in the bitrise.yml", 
body:" setting default stack bitrise.yml the default stack app used haven't set specific workflow. open app's bitrise.yml file. add meta entry outside workflows property end bitrise.yml file: meta:      \n bitrise.io:       \n stack:  make sure use double indentation. add stack id. you stack ids reports page : filenames .log extension stack ids. meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " });
this.add({id:379, 
title:"Setting Workflow-specific stacks in the bitrise.yml", 
body:" setting workflow-specific stacks bitrise.yml when set stack workflow, workflow run stack, regardless default stack. open app's bitrise.yml file. find workflows property workflow need within. add meta entry workflow itself: workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack:  add stack id. you stack ids stack report page . workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " });
this.add({id:380, 
title:"Setting the machine type in the bitrise.yml file", 
body:" setting machine type bitrise.yml file you define machine type want use build bitrise.yml app. machine type refers hardware resources used build; example, elite machine cpu cores available ram than standard machine. to set machine type bitrise.yml file, need use machine_type_id attribute meta entry: available machine ids you available machine type ids here: build machine types . open app's bitrise.yml file. find workflows property workflow need within. add meta entry: # setting 8-core gen2 machine xcode stack default type app:\nmeta:\n bitrise.io:\n machine_type_id: g2.8core\n# 12-core workflow-specific type\nworkflows:\n deploy: \n meta: bitrise.io: g2.12core " });
this.add({id:381, 
title:"Build machine types", 
body:" build machine types bitrise offers multiple build machines with different specifications credit costs. you choose based needs. bitrise offers multiple build machines with different specifications credit costs. you choose based needs. you track how time spent building apps machine type with insights: utilization metrics . machine availability subscription plan not machines available subscription plans. visit pricing page machines available plan! macos machines with intel cpu deprecated macos build machines with intel cpus deprecated. do use app's configuration. instead apple silicon m1 machines. transitioning apple intel silicon bitrise build machine types operating machine type cpu ram credit cost minute machine type id yaml configuration macos m1 medium 4 cpu @3.2ghz 6 gb 2\/min g2-m1.4core m1 large 8 cpu @3.2 ghz 12 gb 4\/min g2-m1.8core m1 max medium 5 cpu @3.2 ghz 27 gb 6\/min g2-m1-max.5core m1 max large 10 cpu @3.2 ghz 54 gb 8\/min g2-m1-max.10core linux medium 4 vcpu @3.1 ghz 16 gb 1\/min standard large 8 vcpu @3.1 ghz 32 gb 2\/min elite x large 16 vcpu @3.1 ghz 64 gb 4\/min elite-xl " });
this.add({id:382, 
title:"Managing an app's bitrise.yml file", 
body:" managing app's bitrise.yml file the heart build bitrise.yml file. you configure steps use, project type, trigger map, specify app- workflow-level env vars. the bitrise.yml file heart bitrise setup: stores entire build configuration app . it specifies stack, trigger map, workflows steps included. when edit workflows graphical ui workflow editor, actually modify bitrise.yml file. yaml files size limitation please note total, combined size bitrise.yml bitrise.secrets.yml file exceed 400kb. there ways manage bitrise.yml file app: keep file git repository: with solution, control maintaining versioning bitrise.yml file. keep bitrise.io : bitrise store configuration, access any time website. with solution, configuration file fully independent repository. you switch solutions any time. bitrise.yml reference you detailed reference information bitrise.yml file relevant guide: basics of bitrise.yml . " });
this.add({id:383, 
title:"Storing the bitrise.yml file in your repository", 
body:" storing bitrise.yml file repository privately hosted repositories unfortunately, feature supported users can't use service credential user integration github app integration ; example, repository accessible private ip subnet. there's workaround, however: storing bitrise.yml privately hosted repository . this workaround works, example, bitbucket server users. for github enterprise, offer integration allows store bitrise.yml file github enterprise repository: integrating self-hosted github enterprise server with bitrise . when store bitrise.yml configuration file repository, build process bitrise use run builds. this means that: you control versioning configuration file. every time make change workflows trigger map, commit changes file repository. you don’t need create bitrise.yml file advance: use stored bitrise.io . let's see how store bitrise.yml file repository does contain yet. the feature requires service credential integration. if service credential user supported, feature won't work. multiple apps with repository you store single bitrise.yml file given repository. bitrise look root directory, such, currently there’s way include separate folders. if code multiple apps repository, recommend using different workflows apps. open app bitrise app settings page. select collaboration . check service credential user section. the service credential user bitrise read access repository. open workflow editor. in workflow editor, select bitrise.yml navigation menu left. click store app repository . when prompted add bitrise.yml app's repository, options: copy content current bitrise.yml file clipboard. you create copy contents it. download current bitrise.yml file. in repository, commit bitrise.yml file root default branch. the default branch app bitrise.yml file it. you store different bitrise.yml files branches: storing a bitrise.yml file on multiple branches in the repository . you check bitrise app's default branch bitrise.io going settings tab finding default branch option. on bitrise, click update setting . when prompted make sure bitrise.yml file valid, click continue . make sure file valid the bitrise.yml file repository valid! if contains incorrect syntax, break builds. if goes well, receive confirmation successfully changing bitrise.yml storage settings. allowlist bitrise website ip addresses if use form self-hosted solution storing code, need allowlist static ip addresses bitrise website background workers. this allows features bitrise.yml file repository, receiving build status updates bitrise: ip address ranges for bitrise backend workers . " });
this.add({id:384, 
title:"Updating a bitrise.yml stored in the repository", 
body:" updating bitrise.yml stored repository when store bitrise.yml file repository, use online workflow editor make changes build configuration. you just need commit saving editor: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. make changes workflows want update. click save right corner. you're prompted update bitrise.yml file repository. you options: copy content current bitrise.yml file clipboard. you create copy contents it. download current bitrise.yml file. in repository, commit bitrise.yml file. on bitrise, click i'm fetch bitrise.yml repository. commit changes first! if haven't committed changes repository, overwrite them! " });
this.add({id:385, 
title:"Storing a bitrise.yml file on multiple branches in the repository", 
body:" storing bitrise.yml file multiple branches repository when first add bitrise.yml repository, committed default branch. you check app’s branch bitrise.io settings tab. if choose store bitrise.yml file repository, default branch bitrise.yml ! however, did initial configuration set using bitrise.yml repository, store bitrise.yml files branches use any run builds. if want build branch repository bitrise, need bitrise.yml file branch. and don’t forget need bitrise.yml file default branch. bitrise setup with bitrise.yml files multiple branches let’s say app called fantasticapp. in fantasticapp’s git repository, default branch main . there deploy branch. any code push pull request main triggers workflow called main-workflow . any code push pull request deploy triggers workflow called deploy-workflow . in repository, bitrise.yml file main deploy branch, containing workflows. when making changes workflows, fantasticapp team commits modified bitrise.yml file branches ensure workflows date both. " });
this.add({id:386, 
title:"Moving the bitrise.yml file back to bitrise.io", 
body:" moving bitrise.yml file bitrise.io the default setting store bitrise.yml file bitrise.io : add new app, automatically create bitrise.yml file it’s stored website. if works you, don’t need change anything! if, however, changed storage settings configuration file repository, easily change any time store bitrise.io . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. in workflow editor, select bitrise.yml navigation menu left. click store bitrise.io . choose bitrise.yml file used bitrise.io now. you copy content bitrise.yml file stored app’s repository. you copy version bitrise.yml file used bitrise.io . click update setting . if goes well, receive confirmation successfully changing bitrise.yml storage settings. " });
this.add({id:387, 
title:"Editing the app's bitrise.yml file", 
body:" editing app's bitrise.yml file you edit file bitrise.io, graphical workflow editor, download locally. whenever modify step you're indirectly editing app's bitrise.yml configuration file. whenever modify workflow step workflow editor, you're indirectly editing app's bitrise.yml configuration file. however, prefer, edit file directly, yaml. this requires familiarity with structure bitrise.yml file. read more: basics of bitrise.yml you edit file bitrise.io, graphical workflow editor, download locally. " });
this.add({id:388, 
title:"Editing the bitrise.yml file online", 
body:" editing bitrise.yml file online you edit build config yml format bitrise.yml editor app’s workflow editor click bitrise.yml tab. fold unfold with - + signs. press ctrl \/ cmd + f search replace with regexp , match whole word , case-sensitive, case-insensitive, search selected section. use preview sidebar right easier navigation. to save changes, click save right corner. to download current bitrise.yml file, click download currently saved config . alternatively, simply select certain sections file copy local bitrise.yml file app's bitrise.yml file. " });
this.add({id:389, 
title:"Editing the bitrise.yml file locally", 
body:" editing bitrise.yml file locally our yml scheme shared schemastore . this means syntax highlight auto-completion available following files edit locally: bitrise.yml step.yml bitrise.json the following editors support auto-complete feature: intellij idea phpstorm pycharm rider rubymine visual studio 2013+ visual studio code visual studio mac webstorm jsonbuddy " });
this.add({id:390, 
title:"Accessing a build's bitrise.yml file", 
body:" accessing build's bitrise.yml file you access build's bitrise.yml file selecting build app's dashboard 'show bitrise.yml' drop-down menu. once ran build bitrise, check bitrise.yml configuration build used. you download it, compare current bitrise.yml file, replace current configuration file with build's file. to access build's configuration file: select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select show bitrise.yml . " });
this.add({id:391, 
title:"Checking changes in the bitrise.yml file", 
body:" checking changes bitrise.yml file once you’ve clicked show bitrise.yml , see build’s bitrise yml pop-up window displaying builds’ configuration details. if build’s bitrise.yml content differs current build’s bitrise.yml , see editors displayed side-by-side bitrise.yml changes pop-up window. the differences builds highlighted following colors: green means added content. blue means modified content. red means deleted content. " });
this.add({id:392, 
title:"Restoring the current bitrise.yml to the build's bitrise.yml", 
body:" restoring current bitrise.yml build's you change current bitrise.yml configuration app's previous builds. to so: select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select show bitrise.yml . in bitrise.yml changes pop-up window, click restore button. hit ok are sure? pop-up window confirm override current bitrise.yml . " });
this.add({id:393, 
title:"Deleting a build's bitrise.yml file", 
body:" deleting build's bitrise.yml file if wish, simply delete build’s bitrise.yml file. but note action undone: able view particular build’s bitrise.yml file delete it. select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select delete bitrise.yml . in confirmation window, click yes . " });
this.add({id:394, 
title:"Selective builds", 
body:" selective builds the selective builds setting provides change detection builds. enabling allows trigger build app certain files folders modified. using build triggers instead this legacy feature. instead using feature, configure build triggers trigger builds certain files folders changed: so, create new push pull request events, choose files changed trigger condition. we strongly recommend using option instead selective builds. the selective builds setting provides change detection builds. enabling allows trigger build app certain files folders modified. you want use setting if: you monorepo; is, build multiple apps single repository. multiple apps share common files repository. selective builds with non-github projects the current version selective builds feature works with github projects. if repository hosted git hosting service, option available. using selective builds feature let's say want make sure commit app's repository triggers bitrise build mycode.go file develop branch modified commit. in example, branch called  develop . you trigger starts build time code push happens the  develop  branch. in selective builds feature, specified the  mycode.go  file input field. if make commit develop branch modifies mycode.go file, bitrise trigger build. if commit doesn't modify file any way, to configure selective builds: open app bitrise with user admin role app . on main page app, click app settings icon: . make sure appropriate service credential user set integrations page. this user admin right github repository project. click app dashboard . on left, select builds . find selective builds section. click add path button. can't button? if can't button - like screenshot -, possible reasons: the app's repository isn't hosted github. the service credential user isn't set correctly doesn't admin rights repo. in pop-up window, set paths need. you add path time. " });
this.add({id:395, 
title:"Using patterns in the file name or file path", 
body:" using patterns file path you need set exact file path selective builds feature: patterns. using regular expressions supported pattern contain certain metacharacters: * : matches files. a* : matches files beginning with a. *a : matches files ending with a. *a* : matches files (including beginning end). ** : matches directories recursively. ? : matches any character. \\ : escapes metacharacter. [set] : matches any character set. " });
this.add({id:396, 
title:"Rolling builds", 
body:" rolling builds with rolling builds feature, configure bitrise automatically abort on-hold running build triggered branch. you cancel running builds hold - need abort manually! if turn rolling builds feature, previous builds app automatically aborted new started. please note manual scheduled builds cancelled start new build with rolling builds option enabled. when build aborted? if trigger build branch running, running aborted runs workflow . for example, trigger build master branch repository with deploy workflow, not cancel build running master branch with primary workflow. you set types triggered builds wish abort. let’s see how! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . find rolling builds section. select type(s) builds wish abort new build started. enabling options following: enabled pull requests : cancel previous builds on-hold pull requests related pushes. running builds canceled unless running builds aborted enabled. enabled pushes : cancel previous builds on-hold pushes branch. running builds canceled unless running builds aborted enabled. running builds aborted : auto-cancel running builds addition on-hold ones. all done! from on, don’t wait triggered build finish need it! " });
this.add({id:397, 
title:"Configuring email notifications", 
body:" configuring email notifications bitrise's built-in email notification sends emails builds user assigned work application. they sent build finished configured successful failed builds. notifications updates activity bitrise. usually, concern state builds receive notifications lot different things. our built-in email notification sends emails builds user assigned work application . they sent build finished configured successful failed builds. watching app to receive automatic email messages, need watching app . if turn watching, won’t receive automated emails. email notifications automatically set applications first creating modify notification settings any time: changing your email notification settings the alternative solution send emails dedicated step . this allows far customization regarding notifications: sending emails with a step" });
this.add({id:398, 
title:"Watching an app", 
body:" watching app watching app means getting email notifications app. this default setting create invited to. turning watching no longer get automatic notifications. to toggle feature, dashboard open app want watch unwatch. on right, see button with label watching watching app currently. if not, button watch . toggle it. " });
this.add({id:399, 
title:"Changing your email notification settings", 
body:" changing email notification settings email notifications automatically set applications first creating them. there possible settings successful builds failed builds: always . this default setting failed builds. never . send email build status changes branch . this default setting successful builds. means build #1 #2 succeeded, notification #2. however, #3 fails #4 succeeds again, notified. you change email notification settings any time - completely disable them. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select notifications . scroll email notifications. select settings need successful failed builds appropriate dropdown menu. for example, want disable receiving notifications, set options never . " });
this.add({id:400, 
title:"Sending emails with a Step", 
body:" sending emails with step the send email with mailgun step send emails any email address with customized updates, html plain text format. you use environment variables information, attach files emails. to use step, need: a mailgun account. a mailgun api key. your mailgun domain name. make sure step runs build! if use send email with mailgun step workflow, make sure set run previous step failed ! this default setting step. if change it, receive emails builds fail. create secret environment variable holds mailgun api key. we recommend naming key $mailgun_api_key . this default value step’s relevant input. create secret environment variable holds mailgun domain. we recommend naming key $mailgun_domain . this default value step’s relevant input. add send email with mailgun step end workflow. find send to emails input step. click click select secret variable . create new secret environment variable contains list email addresses. you choose any key want. the addresses separated comma. set email subject, potential messages: successful build, failed build. you insert environment variables any inputs (the subject messages). in email, values displayed. the default messages send app, number build succeeded failed. attach files, necessary: file attachments input accepts file path environment variable input. multiple files attached: separate paths with commas. run build - check emails! " });
this.add({id:401, 
title:"Configuring Slack integration", 
body:" configuring slack integration you integrate slack app bitrise adding \"send message\" step app's workflow. bitrise supports slack integration, course - it’s quite easy set up. send messages individual users, groups channels; customize messages, include attachments, link buttons users build page. to use dedicated step , need slack webhook url slack api token bot user . make sure step runs build! if use send slack message step workflow , make sure set run previous step failed ! this default setting step. if change it, messages won’t sent build fails. add send slack message step workflow. find slack webhook url slack api token input. click input click select secret variable . create new secret environment variable stores webhook url slack api token. you choose any key want. customize slack message with relevant inputs step. there options, including limited to: setting target channel, group username: encoded id. the text message send. the bot’s username message the message’s color file attachment link buttons attached message check inputs workflow editor see ways customize slack messages. " });
this.add({id:402, 
title:"Setting your Git credentials on build machines", 
body:" setting git credentials build machines if want push any commits git repo bitrise running build, set credentials build machines. the default git username user email address stacks following: git config --global user.email \"please-set-your-email@bitrise.io\"\ngit user.name \"j. doe (https:\/\/devcenter.bitrise.io\/builds\/setting-your-git-credentials-on-build-machines\/)\"\n if want push ( git push ) any commits repo bitrise running build, set username email address. there ways achieve this: you use custom script step set credentials with git config command. you set git credentials env vars. you use set git credentials step. " });
this.add({id:403, 
title:"Setting your Git credentials using Env Vars", 
body:" setting git credentials using env vars git various basic environmental variables similar bitrise env vars . if like reduce steps workflow, set env vars bitrise utilizing specific git environmental variables: open workflow editor. go the  env vars  tab. create following env vars: git_author_name : this human-readable “author”. git_author_email : this email address \"author\". git_committer_name : this human-readable “committer”. git_committer_email : this email address \"committer\". " });
this.add({id:404, 
title:"Setting your Git credentials using the Set Git Credentials Step", 
body:" setting git credentials using set credentials step add set git credentials step first step workflow. the come you’d git commit . this way make sure any changes current build attached commit associated with username email address. in git username field, set value user name. in git email address field, set value email address. start build. if went well, see changes repository git provider. the new username email address visible future commits push builds " });
this.add({id:405, 
title:"Reporting the build status to your Git hosting provider", 
body:" reporting build status git hosting provider you need authenticate bitrise specify service credential user app settings page app push build status reports git provider. github app integration if use bitrise github app connect bitrise workspace git account organization, don't need any additional configuration described guide: app automatically provides status reports. bitrise push build status reports git provider (github\/gitlab\/bitbucket). you need authenticate communicate hosting service. apart reports, enables operations, auto-registering ssh keys webhooks. status sent automatically triggered builds, builds code pull request. to this, need specify service credential user app bitrise.io . you need make sure user connected account with git hosting service choice bitrise.io . this account used bitrise communicate with api git hosting provider. " });
this.add({id:406, 
title:"Configuring build status reporting", 
body:" configuring build status reporting allowlist bitrise website ip addresses if use form self-hosted solution storing code, need allowlist static ip addresses bitrise website background workers. this allows features bitrise.yml file repository, receiving build status updates bitrise: ip address ranges for bitrise backend workers . to report status, need make sure service credential user's bitrise account connected git provider account. this access app's repository. service credential user restriction you set service credential user so, need admin role app's team bitrise. if service credential user specific bitrise user, log set themselves. for information, see: changing the service credential user . to check build status reporting possible: in upper right corner, open account selector dropdown menu. select account settings option. make sure account connected git provider hosts repository: check the  connected accounts  menu left side. make sure connected git provider account required level permission sending status reports. on github bitbucket, write access required. on gitlab, developer access required. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . find service credential user section. click test <git provider> connection button make sure selected user’s connection used sending build status hosting provider. " });
this.add({id:407, 
title:"Troubleshooting build status reporting", 
body:" troubleshooting build status reporting if builds send status reports git hosting provider - github, gitlab bitbucket -, need little investigating causes problem. let’s look potential issues! " });
this.add({id:408, 
title:"Checking the service credential user", 
body:" checking service credential user the service credential user app bitrise.io connected bitrise account git hosting access repository app account. you check service credential user test git connection. open app bitrise with user admin role app . on main page app, click app settings icon: . go app’s page bitrise.io . find service credential user section. current user in figure, current active user service credential user. if different user, looks little different, including button's text. click test <git provider> connection button test user's git connection. " });
this.add({id:409, 
title:"Checking repository permissions and repository URL", 
body:" checking repository permissions url make sure granted bitrise access workspace team. it did grant denied github bitbucket team owns repository. make sure url repository date: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select general . find repository url make sure it's correct. " });
this.add({id:372, 
title:"Setting the stack for your builds", 
body:" setting stack builds the build stack indicates virtual machine version bitrise use run build. you set builds, workflow-specific stacks, workflow editor bitrise.yml file. the build stack indicates virtual machine version use run build. you set stack builds, set workflow -specific stacks. changing machine types using api you change build machine types apps owned single user workspace using api: changing machine types in all apps at the same time . " });
this.add({id:373, 
title:"Setting the stack in the Workflow Editor", 
body:" setting stack workflow editor the simplest way configure build stack workflow editor . you set default stack workflow-specific stacks. " });
this.add({id:374, 
title:"Setting the default stack", 
body:" setting default stack the default stack app used haven't set specific workflow. project type note change project type app's settings tab type isn't compatible with selected default stack, we'll automatically change stack one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . in default stack section, open dropdown menu select stack need. click save right corner. " });
this.add({id:375, 
title:"Setting a Workflow-specific stack", 
body:" setting workflow-specific stack when set stack workflow, workflow run stack, regardless default stack. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . scroll workflow need. select stack. click save right corner. " });
this.add({id:376, 
title:"Setting the machine type in the Workflow Editor", 
body:" setting machine type workflow editor you define machine type want use build workflow editor. the available types depend stack use: table 13, “ . to set machine type: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . in default stack section, machine type default stack section choose machine type. optionally, choose workflow-specific machine type any workflow stack set. " });
this.add({id:377, 
title:"Setting the stack in the bitrise.yml file", 
body:" setting stack bitrise.yml file you set default stack workflow-specific tasks bitrise.yml file app. use meta field with appropriate stack id: meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x this particularly useful bitrise.yml file stored app's repository . stack ids you stack ids report: bitrise stack reports . alternatively, set stack workflow editor check id bitrise.yml tab, finding meta field. the stack reports pre-installed tool available stack. " });
this.add({id:378, 
title:"Setting the default stack in the bitrise.yml", 
body:" setting default stack bitrise.yml the default stack app used haven't set specific workflow. open app's bitrise.yml file. add meta entry outside workflows property end bitrise.yml file: meta:      \n bitrise.io:       \n stack:  make sure use double indentation. add stack id. you stack ids reports page : filenames .log extension stack ids. meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " });
this.add({id:379, 
title:"Setting Workflow-specific stacks in the bitrise.yml", 
body:" setting workflow-specific stacks bitrise.yml when set stack workflow, workflow run stack, regardless default stack. open app's bitrise.yml file. find workflows property workflow need within. add meta entry workflow itself: workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack:  add stack id. you stack ids stack report page . workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " });
this.add({id:380, 
title:"Setting the machine type in the bitrise.yml file", 
body:" setting machine type bitrise.yml file you define machine type want use build bitrise.yml app. machine type refers hardware resources used build; example, elite machine cpu cores available ram than standard machine. to set machine type bitrise.yml file, need use machine_type_id attribute meta entry: available machine ids you available machine type ids here: build machine types . open app's bitrise.yml file. find workflows property workflow need within. add meta entry: # setting 8-core gen2 machine xcode stack default type app:\nmeta:\n bitrise.io:\n machine_type_id: g2.8core\n# 12-core workflow-specific type\nworkflows:\n deploy: \n meta: bitrise.io: g2.12core " });
this.add({id:381, 
title:"Build machine types", 
body:" build machine types bitrise offers multiple build machines with different specifications credit costs. you choose based needs. bitrise offers multiple build machines with different specifications credit costs. you choose based needs. you track how time spent building apps machine type with insights: utilization metrics . machine availability subscription plan not machines available subscription plans. visit pricing page machines available plan! macos machines with intel cpu deprecated macos build machines with intel cpus deprecated. do use app's configuration. instead apple silicon m1 machines. transitioning apple intel silicon bitrise build machine types operating machine type cpu ram credit cost minute machine type id yaml configuration macos m1 medium 4 cpu @3.2ghz 6 gb 2\/min g2-m1.4core m1 large 8 cpu @3.2 ghz 12 gb 4\/min g2-m1.8core m1 max medium 5 cpu @3.2 ghz 27 gb 6\/min g2-m1-max.5core m1 max large 10 cpu @3.2 ghz 54 gb 8\/min g2-m1-max.10core linux medium 4 vcpu @3.1 ghz 16 gb 1\/min standard large 8 vcpu @3.1 ghz 32 gb 2\/min elite x large 16 vcpu @3.1 ghz 64 gb 4\/min elite-xl " });
this.add({id:373, 
title:"Setting the stack in the Workflow Editor", 
body:" setting stack workflow editor the simplest way configure build stack workflow editor . you set default stack workflow-specific stacks. " });
this.add({id:374, 
title:"Setting the default stack", 
body:" setting default stack the default stack app used haven't set specific workflow. project type note change project type app's settings tab type isn't compatible with selected default stack, we'll automatically change stack one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . in default stack section, open dropdown menu select stack need. click save right corner. " });
this.add({id:375, 
title:"Setting a Workflow-specific stack", 
body:" setting workflow-specific stack when set stack workflow, workflow run stack, regardless default stack. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . scroll workflow need. select stack. click save right corner. " });
this.add({id:376, 
title:"Setting the machine type in the Workflow Editor", 
body:" setting machine type workflow editor you define machine type want use build workflow editor. the available types depend stack use: table 13, “ . to set machine type: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select stacks & machines . in default stack section, machine type default stack section choose machine type. optionally, choose workflow-specific machine type any workflow stack set. " });
this.add({id:377, 
title:"Setting the stack in the bitrise.yml file", 
body:" setting stack bitrise.yml file you set default stack workflow-specific tasks bitrise.yml file app. use meta field with appropriate stack id: meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x this particularly useful bitrise.yml file stored app's repository . stack ids you stack ids report: bitrise stack reports . alternatively, set stack workflow editor check id bitrise.yml tab, finding meta field. the stack reports pre-installed tool available stack. " });
this.add({id:378, 
title:"Setting the default stack in the bitrise.yml", 
body:" setting default stack bitrise.yml the default stack app used haven't set specific workflow. open app's bitrise.yml file. add meta entry outside workflows property end bitrise.yml file: meta:      \n bitrise.io:       \n stack:  make sure use double indentation. add stack id. you stack ids reports page : filenames .log extension stack ids. meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " });
this.add({id:379, 
title:"Setting Workflow-specific stacks in the bitrise.yml", 
body:" setting workflow-specific stacks bitrise.yml when set stack workflow, workflow run stack, regardless default stack. open app's bitrise.yml file. find workflows property workflow need within. add meta entry workflow itself: workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack:  add stack id. you stack ids stack report page . workflows:\n deploy: \n meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x " });
this.add({id:380, 
title:"Setting the machine type in the bitrise.yml file", 
body:" setting machine type bitrise.yml file you define machine type want use build bitrise.yml app. machine type refers hardware resources used build; example, elite machine cpu cores available ram than standard machine. to set machine type bitrise.yml file, need use machine_type_id attribute meta entry: available machine ids you available machine type ids here: build machine types . open app's bitrise.yml file. find workflows property workflow need within. add meta entry: # setting 8-core gen2 machine xcode stack default type app:\nmeta:\n bitrise.io:\n machine_type_id: g2.8core\n# 12-core workflow-specific type\nworkflows:\n deploy: \n meta: bitrise.io: g2.12core " });
this.add({id:381, 
title:"Build machine types", 
body:" build machine types bitrise offers multiple build machines with different specifications credit costs. you choose based needs. bitrise offers multiple build machines with different specifications credit costs. you choose based needs. you track how time spent building apps machine type with insights: utilization metrics . machine availability subscription plan not machines available subscription plans. visit pricing page machines available plan! macos machines with intel cpu deprecated macos build machines with intel cpus deprecated. do use app's configuration. instead apple silicon m1 machines. transitioning apple intel silicon bitrise build machine types operating machine type cpu ram credit cost minute machine type id yaml configuration macos m1 medium 4 cpu @3.2ghz 6 gb 2\/min g2-m1.4core m1 large 8 cpu @3.2 ghz 12 gb 4\/min g2-m1.8core m1 max medium 5 cpu @3.2 ghz 27 gb 6\/min g2-m1-max.5core m1 max large 10 cpu @3.2 ghz 54 gb 8\/min g2-m1-max.10core linux medium 4 vcpu @3.1 ghz 16 gb 1\/min standard large 8 vcpu @3.1 ghz 32 gb 2\/min elite x large 16 vcpu @3.1 ghz 64 gb 4\/min elite-xl " });
this.add({id:382, 
title:"Managing an app's bitrise.yml file", 
body:" managing app's bitrise.yml file the heart build bitrise.yml file. you configure steps use, project type, trigger map, specify app- workflow-level env vars. the bitrise.yml file heart bitrise setup: stores entire build configuration app . it specifies stack, trigger map, workflows steps included. when edit workflows graphical ui workflow editor, actually modify bitrise.yml file. yaml files size limitation please note total, combined size bitrise.yml bitrise.secrets.yml file exceed 400kb. there ways manage bitrise.yml file app: keep file git repository: with solution, control maintaining versioning bitrise.yml file. keep bitrise.io : bitrise store configuration, access any time website. with solution, configuration file fully independent repository. you switch solutions any time. bitrise.yml reference you detailed reference information bitrise.yml file relevant guide: basics of bitrise.yml . " });
this.add({id:383, 
title:"Storing the bitrise.yml file in your repository", 
body:" storing bitrise.yml file repository privately hosted repositories unfortunately, feature supported users can't use service credential user integration github app integration ; example, repository accessible private ip subnet. there's workaround, however: storing bitrise.yml privately hosted repository . this workaround works, example, bitbucket server users. for github enterprise, offer integration allows store bitrise.yml file github enterprise repository: integrating self-hosted github enterprise server with bitrise . when store bitrise.yml configuration file repository, build process bitrise use run builds. this means that: you control versioning configuration file. every time make change workflows trigger map, commit changes file repository. you don’t need create bitrise.yml file advance: use stored bitrise.io . let's see how store bitrise.yml file repository does contain yet. the feature requires service credential integration. if service credential user supported, feature won't work. multiple apps with repository you store single bitrise.yml file given repository. bitrise look root directory, such, currently there’s way include separate folders. if code multiple apps repository, recommend using different workflows apps. open app bitrise app settings page. select collaboration . check service credential user section. the service credential user bitrise read access repository. open workflow editor. in workflow editor, select bitrise.yml navigation menu left. click store app repository . when prompted add bitrise.yml app's repository, options: copy content current bitrise.yml file clipboard. you create copy contents it. download current bitrise.yml file. in repository, commit bitrise.yml file root default branch. the default branch app bitrise.yml file it. you store different bitrise.yml files branches: storing a bitrise.yml file on multiple branches in the repository . you check bitrise app's default branch bitrise.io going settings tab finding default branch option. on bitrise, click update setting . when prompted make sure bitrise.yml file valid, click continue . make sure file valid the bitrise.yml file repository valid! if contains incorrect syntax, break builds. if goes well, receive confirmation successfully changing bitrise.yml storage settings. allowlist bitrise website ip addresses if use form self-hosted solution storing code, need allowlist static ip addresses bitrise website background workers. this allows features bitrise.yml file repository, receiving build status updates bitrise: ip address ranges for bitrise backend workers . " });
this.add({id:384, 
title:"Updating a bitrise.yml stored in the repository", 
body:" updating bitrise.yml stored repository when store bitrise.yml file repository, use online workflow editor make changes build configuration. you just need commit saving editor: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. make changes workflows want update. click save right corner. you're prompted update bitrise.yml file repository. you options: copy content current bitrise.yml file clipboard. you create copy contents it. download current bitrise.yml file. in repository, commit bitrise.yml file. on bitrise, click i'm fetch bitrise.yml repository. commit changes first! if haven't committed changes repository, overwrite them! " });
this.add({id:385, 
title:"Storing a bitrise.yml file on multiple branches in the repository", 
body:" storing bitrise.yml file multiple branches repository when first add bitrise.yml repository, committed default branch. you check app’s branch bitrise.io settings tab. if choose store bitrise.yml file repository, default branch bitrise.yml ! however, did initial configuration set using bitrise.yml repository, store bitrise.yml files branches use any run builds. if want build branch repository bitrise, need bitrise.yml file branch. and don’t forget need bitrise.yml file default branch. bitrise setup with bitrise.yml files multiple branches let’s say app called fantasticapp. in fantasticapp’s git repository, default branch main . there deploy branch. any code push pull request main triggers workflow called main-workflow . any code push pull request deploy triggers workflow called deploy-workflow . in repository, bitrise.yml file main deploy branch, containing workflows. when making changes workflows, fantasticapp team commits modified bitrise.yml file branches ensure workflows date both. " });
this.add({id:386, 
title:"Moving the bitrise.yml file back to bitrise.io", 
body:" moving bitrise.yml file bitrise.io the default setting store bitrise.yml file bitrise.io : add new app, automatically create bitrise.yml file it’s stored website. if works you, don’t need change anything! if, however, changed storage settings configuration file repository, easily change any time store bitrise.io . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. in workflow editor, select bitrise.yml navigation menu left. click store bitrise.io . choose bitrise.yml file used bitrise.io now. you copy content bitrise.yml file stored app’s repository. you copy version bitrise.yml file used bitrise.io . click update setting . if goes well, receive confirmation successfully changing bitrise.yml storage settings. " });
this.add({id:383, 
title:"Storing the bitrise.yml file in your repository", 
body:" storing bitrise.yml file repository privately hosted repositories unfortunately, feature supported users can't use service credential user integration github app integration ; example, repository accessible private ip subnet. there's workaround, however: storing bitrise.yml privately hosted repository . this workaround works, example, bitbucket server users. for github enterprise, offer integration allows store bitrise.yml file github enterprise repository: integrating self-hosted github enterprise server with bitrise . when store bitrise.yml configuration file repository, build process bitrise use run builds. this means that: you control versioning configuration file. every time make change workflows trigger map, commit changes file repository. you don’t need create bitrise.yml file advance: use stored bitrise.io . let's see how store bitrise.yml file repository does contain yet. the feature requires service credential integration. if service credential user supported, feature won't work. multiple apps with repository you store single bitrise.yml file given repository. bitrise look root directory, such, currently there’s way include separate folders. if code multiple apps repository, recommend using different workflows apps. open app bitrise app settings page. select collaboration . check service credential user section. the service credential user bitrise read access repository. open workflow editor. in workflow editor, select bitrise.yml navigation menu left. click store app repository . when prompted add bitrise.yml app's repository, options: copy content current bitrise.yml file clipboard. you create copy contents it. download current bitrise.yml file. in repository, commit bitrise.yml file root default branch. the default branch app bitrise.yml file it. you store different bitrise.yml files branches: storing a bitrise.yml file on multiple branches in the repository . you check bitrise app's default branch bitrise.io going settings tab finding default branch option. on bitrise, click update setting . when prompted make sure bitrise.yml file valid, click continue . make sure file valid the bitrise.yml file repository valid! if contains incorrect syntax, break builds. if goes well, receive confirmation successfully changing bitrise.yml storage settings. allowlist bitrise website ip addresses if use form self-hosted solution storing code, need allowlist static ip addresses bitrise website background workers. this allows features bitrise.yml file repository, receiving build status updates bitrise: ip address ranges for bitrise backend workers . " });
this.add({id:384, 
title:"Updating a bitrise.yml stored in the repository", 
body:" updating bitrise.yml stored repository when store bitrise.yml file repository, use online workflow editor make changes build configuration. you just need commit saving editor: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. make changes workflows want update. click save right corner. you're prompted update bitrise.yml file repository. you options: copy content current bitrise.yml file clipboard. you create copy contents it. download current bitrise.yml file. in repository, commit bitrise.yml file. on bitrise, click i'm fetch bitrise.yml repository. commit changes first! if haven't committed changes repository, overwrite them! " });
this.add({id:385, 
title:"Storing a bitrise.yml file on multiple branches in the repository", 
body:" storing bitrise.yml file multiple branches repository when first add bitrise.yml repository, committed default branch. you check app’s branch bitrise.io settings tab. if choose store bitrise.yml file repository, default branch bitrise.yml ! however, did initial configuration set using bitrise.yml repository, store bitrise.yml files branches use any run builds. if want build branch repository bitrise, need bitrise.yml file branch. and don’t forget need bitrise.yml file default branch. bitrise setup with bitrise.yml files multiple branches let’s say app called fantasticapp. in fantasticapp’s git repository, default branch main . there deploy branch. any code push pull request main triggers workflow called main-workflow . any code push pull request deploy triggers workflow called deploy-workflow . in repository, bitrise.yml file main deploy branch, containing workflows. when making changes workflows, fantasticapp team commits modified bitrise.yml file branches ensure workflows date both. " });
this.add({id:386, 
title:"Moving the bitrise.yml file back to bitrise.io", 
body:" moving bitrise.yml file bitrise.io the default setting store bitrise.yml file bitrise.io : add new app, automatically create bitrise.yml file it’s stored website. if works you, don’t need change anything! if, however, changed storage settings configuration file repository, easily change any time store bitrise.io . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. in workflow editor, select bitrise.yml navigation menu left. click store bitrise.io . choose bitrise.yml file used bitrise.io now. you copy content bitrise.yml file stored app’s repository. you copy version bitrise.yml file used bitrise.io . click update setting . if goes well, receive confirmation successfully changing bitrise.yml storage settings. " });
this.add({id:387, 
title:"Editing the app's bitrise.yml file", 
body:" editing app's bitrise.yml file you edit file bitrise.io, graphical workflow editor, download locally. whenever modify step you're indirectly editing app's bitrise.yml configuration file. whenever modify workflow step workflow editor, you're indirectly editing app's bitrise.yml configuration file. however, prefer, edit file directly, yaml. this requires familiarity with structure bitrise.yml file. read more: basics of bitrise.yml you edit file bitrise.io, graphical workflow editor, download locally. " });
this.add({id:388, 
title:"Editing the bitrise.yml file online", 
body:" editing bitrise.yml file online you edit build config yml format bitrise.yml editor app’s workflow editor click bitrise.yml tab. fold unfold with - + signs. press ctrl \/ cmd + f search replace with regexp , match whole word , case-sensitive, case-insensitive, search selected section. use preview sidebar right easier navigation. to save changes, click save right corner. to download current bitrise.yml file, click download currently saved config . alternatively, simply select certain sections file copy local bitrise.yml file app's bitrise.yml file. " });
this.add({id:389, 
title:"Editing the bitrise.yml file locally", 
body:" editing bitrise.yml file locally our yml scheme shared schemastore . this means syntax highlight auto-completion available following files edit locally: bitrise.yml step.yml bitrise.json the following editors support auto-complete feature: intellij idea phpstorm pycharm rider rubymine visual studio 2013+ visual studio code visual studio mac webstorm jsonbuddy " });
this.add({id:388, 
title:"Editing the bitrise.yml file online", 
body:" editing bitrise.yml file online you edit build config yml format bitrise.yml editor app’s workflow editor click bitrise.yml tab. fold unfold with - + signs. press ctrl \/ cmd + f search replace with regexp , match whole word , case-sensitive, case-insensitive, search selected section. use preview sidebar right easier navigation. to save changes, click save right corner. to download current bitrise.yml file, click download currently saved config . alternatively, simply select certain sections file copy local bitrise.yml file app's bitrise.yml file. " });
this.add({id:389, 
title:"Editing the bitrise.yml file locally", 
body:" editing bitrise.yml file locally our yml scheme shared schemastore . this means syntax highlight auto-completion available following files edit locally: bitrise.yml step.yml bitrise.json the following editors support auto-complete feature: intellij idea phpstorm pycharm rider rubymine visual studio 2013+ visual studio code visual studio mac webstorm jsonbuddy " });
this.add({id:390, 
title:"Accessing a build's bitrise.yml file", 
body:" accessing build's bitrise.yml file you access build's bitrise.yml file selecting build app's dashboard 'show bitrise.yml' drop-down menu. once ran build bitrise, check bitrise.yml configuration build used. you download it, compare current bitrise.yml file, replace current configuration file with build's file. to access build's configuration file: select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select show bitrise.yml . " });
this.add({id:391, 
title:"Checking changes in the bitrise.yml file", 
body:" checking changes bitrise.yml file once you’ve clicked show bitrise.yml , see build’s bitrise yml pop-up window displaying builds’ configuration details. if build’s bitrise.yml content differs current build’s bitrise.yml , see editors displayed side-by-side bitrise.yml changes pop-up window. the differences builds highlighted following colors: green means added content. blue means modified content. red means deleted content. " });
this.add({id:392, 
title:"Restoring the current bitrise.yml to the build's bitrise.yml", 
body:" restoring current bitrise.yml build's you change current bitrise.yml configuration app's previous builds. to so: select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select show bitrise.yml . in bitrise.yml changes pop-up window, click restore button. hit ok are sure? pop-up window confirm override current bitrise.yml . " });
this.add({id:393, 
title:"Deleting a build's bitrise.yml file", 
body:" deleting build's bitrise.yml file if wish, simply delete build’s bitrise.yml file. but note action undone: able view particular build’s bitrise.yml file delete it. select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select delete bitrise.yml . in confirmation window, click yes . " });
this.add({id:391, 
title:"Checking changes in the bitrise.yml file", 
body:" checking changes bitrise.yml file once you’ve clicked show bitrise.yml , see build’s bitrise yml pop-up window displaying builds’ configuration details. if build’s bitrise.yml content differs current build’s bitrise.yml , see editors displayed side-by-side bitrise.yml changes pop-up window. the differences builds highlighted following colors: green means added content. blue means modified content. red means deleted content. " });
this.add({id:392, 
title:"Restoring the current bitrise.yml to the build's bitrise.yml", 
body:" restoring current bitrise.yml build's you change current bitrise.yml configuration app's previous builds. to so: select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select show bitrise.yml . in bitrise.yml changes pop-up window, click restore button. hit ok are sure? pop-up window confirm override current bitrise.yml . " });
this.add({id:393, 
title:"Deleting a build's bitrise.yml file", 
body:" deleting build's bitrise.yml file if wish, simply delete build’s bitrise.yml file. but note action undone: able view particular build’s bitrise.yml file delete it. select application dashboard select builds. select bitrise.yml right, build status card. in dropdown menu, select delete bitrise.yml . in confirmation window, click yes . " });
this.add({id:394, 
title:"Selective builds", 
body:" selective builds the selective builds setting provides change detection builds. enabling allows trigger build app certain files folders modified. using build triggers instead this legacy feature. instead using feature, configure build triggers trigger builds certain files folders changed: so, create new push pull request events, choose files changed trigger condition. we strongly recommend using option instead selective builds. the selective builds setting provides change detection builds. enabling allows trigger build app certain files folders modified. you want use setting if: you monorepo; is, build multiple apps single repository. multiple apps share common files repository. selective builds with non-github projects the current version selective builds feature works with github projects. if repository hosted git hosting service, option available. using selective builds feature let's say want make sure commit app's repository triggers bitrise build mycode.go file develop branch modified commit. in example, branch called  develop . you trigger starts build time code push happens the  develop  branch. in selective builds feature, specified the  mycode.go  file input field. if make commit develop branch modifies mycode.go file, bitrise trigger build. if commit doesn't modify file any way, to configure selective builds: open app bitrise with user admin role app . on main page app, click app settings icon: . make sure appropriate service credential user set integrations page. this user admin right github repository project. click app dashboard . on left, select builds . find selective builds section. click add path button. can't button? if can't button - like screenshot -, possible reasons: the app's repository isn't hosted github. the service credential user isn't set correctly doesn't admin rights repo. in pop-up window, set paths need. you add path time. " });
this.add({id:395, 
title:"Using patterns in the file name or file path", 
body:" using patterns file path you need set exact file path selective builds feature: patterns. using regular expressions supported pattern contain certain metacharacters: * : matches files. a* : matches files beginning with a. *a : matches files ending with a. *a* : matches files (including beginning end). ** : matches directories recursively. ? : matches any character. \\ : escapes metacharacter. [set] : matches any character set. " });
this.add({id:396, 
title:"Rolling builds", 
body:" rolling builds with rolling builds feature, configure bitrise automatically abort on-hold running build triggered branch. you cancel running builds hold - need abort manually! if turn rolling builds feature, previous builds app automatically aborted new started. please note manual scheduled builds cancelled start new build with rolling builds option enabled. when build aborted? if trigger build branch running, running aborted runs workflow . for example, trigger build master branch repository with deploy workflow, not cancel build running master branch with primary workflow. you set types triggered builds wish abort. let’s see how! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . find rolling builds section. select type(s) builds wish abort new build started. enabling options following: enabled pull requests : cancel previous builds on-hold pull requests related pushes. running builds canceled unless running builds aborted enabled. enabled pushes : cancel previous builds on-hold pushes branch. running builds canceled unless running builds aborted enabled. running builds aborted : auto-cancel running builds addition on-hold ones. all done! from on, don’t wait triggered build finish need it! " });
this.add({id:397, 
title:"Configuring email notifications", 
body:" configuring email notifications bitrise's built-in email notification sends emails builds user assigned work application. they sent build finished configured successful failed builds. notifications updates activity bitrise. usually, concern state builds receive notifications lot different things. our built-in email notification sends emails builds user assigned work application . they sent build finished configured successful failed builds. watching app to receive automatic email messages, need watching app . if turn watching, won’t receive automated emails. email notifications automatically set applications first creating modify notification settings any time: changing your email notification settings the alternative solution send emails dedicated step . this allows far customization regarding notifications: sending emails with a step" });
this.add({id:398, 
title:"Watching an app", 
body:" watching app watching app means getting email notifications app. this default setting create invited to. turning watching no longer get automatic notifications. to toggle feature, dashboard open app want watch unwatch. on right, see button with label watching watching app currently. if not, button watch . toggle it. " });
this.add({id:399, 
title:"Changing your email notification settings", 
body:" changing email notification settings email notifications automatically set applications first creating them. there possible settings successful builds failed builds: always . this default setting failed builds. never . send email build status changes branch . this default setting successful builds. means build #1 #2 succeeded, notification #2. however, #3 fails #4 succeeds again, notified. you change email notification settings any time - completely disable them. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select notifications . scroll email notifications. select settings need successful failed builds appropriate dropdown menu. for example, want disable receiving notifications, set options never . " });
this.add({id:400, 
title:"Sending emails with a Step", 
body:" sending emails with step the send email with mailgun step send emails any email address with customized updates, html plain text format. you use environment variables information, attach files emails. to use step, need: a mailgun account. a mailgun api key. your mailgun domain name. make sure step runs build! if use send email with mailgun step workflow, make sure set run previous step failed ! this default setting step. if change it, receive emails builds fail. create secret environment variable holds mailgun api key. we recommend naming key $mailgun_api_key . this default value step’s relevant input. create secret environment variable holds mailgun domain. we recommend naming key $mailgun_domain . this default value step’s relevant input. add send email with mailgun step end workflow. find send to emails input step. click click select secret variable . create new secret environment variable contains list email addresses. you choose any key want. the addresses separated comma. set email subject, potential messages: successful build, failed build. you insert environment variables any inputs (the subject messages). in email, values displayed. the default messages send app, number build succeeded failed. attach files, necessary: file attachments input accepts file path environment variable input. multiple files attached: separate paths with commas. run build - check emails! " });
this.add({id:398, 
title:"Watching an app", 
body:" watching app watching app means getting email notifications app. this default setting create invited to. turning watching no longer get automatic notifications. to toggle feature, dashboard open app want watch unwatch. on right, see button with label watching watching app currently. if not, button watch . toggle it. " });
this.add({id:399, 
title:"Changing your email notification settings", 
body:" changing email notification settings email notifications automatically set applications first creating them. there possible settings successful builds failed builds: always . this default setting failed builds. never . send email build status changes branch . this default setting successful builds. means build #1 #2 succeeded, notification #2. however, #3 fails #4 succeeds again, notified. you change email notification settings any time - completely disable them. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select notifications . scroll email notifications. select settings need successful failed builds appropriate dropdown menu. for example, want disable receiving notifications, set options never . " });
this.add({id:400, 
title:"Sending emails with a Step", 
body:" sending emails with step the send email with mailgun step send emails any email address with customized updates, html plain text format. you use environment variables information, attach files emails. to use step, need: a mailgun account. a mailgun api key. your mailgun domain name. make sure step runs build! if use send email with mailgun step workflow, make sure set run previous step failed ! this default setting step. if change it, receive emails builds fail. create secret environment variable holds mailgun api key. we recommend naming key $mailgun_api_key . this default value step’s relevant input. create secret environment variable holds mailgun domain. we recommend naming key $mailgun_domain . this default value step’s relevant input. add send email with mailgun step end workflow. find send to emails input step. click click select secret variable . create new secret environment variable contains list email addresses. you choose any key want. the addresses separated comma. set email subject, potential messages: successful build, failed build. you insert environment variables any inputs (the subject messages). in email, values displayed. the default messages send app, number build succeeded failed. attach files, necessary: file attachments input accepts file path environment variable input. multiple files attached: separate paths with commas. run build - check emails! " });
this.add({id:401, 
title:"Configuring Slack integration", 
body:" configuring slack integration you integrate slack app bitrise adding \"send message\" step app's workflow. bitrise supports slack integration, course - it’s quite easy set up. send messages individual users, groups channels; customize messages, include attachments, link buttons users build page. to use dedicated step , need slack webhook url slack api token bot user . make sure step runs build! if use send slack message step workflow , make sure set run previous step failed ! this default setting step. if change it, messages won’t sent build fails. add send slack message step workflow. find slack webhook url slack api token input. click input click select secret variable . create new secret environment variable stores webhook url slack api token. you choose any key want. customize slack message with relevant inputs step. there options, including limited to: setting target channel, group username: encoded id. the text message send. the bot’s username message the message’s color file attachment link buttons attached message check inputs workflow editor see ways customize slack messages. " });
this.add({id:402, 
title:"Setting your Git credentials on build machines", 
body:" setting git credentials build machines if want push any commits git repo bitrise running build, set credentials build machines. the default git username user email address stacks following: git config --global user.email \"please-set-your-email@bitrise.io\"\ngit user.name \"j. doe (https:\/\/devcenter.bitrise.io\/builds\/setting-your-git-credentials-on-build-machines\/)\"\n if want push ( git push ) any commits repo bitrise running build, set username email address. there ways achieve this: you use custom script step set credentials with git config command. you set git credentials env vars. you use set git credentials step. " });
this.add({id:403, 
title:"Setting your Git credentials using Env Vars", 
body:" setting git credentials using env vars git various basic environmental variables similar bitrise env vars . if like reduce steps workflow, set env vars bitrise utilizing specific git environmental variables: open workflow editor. go the  env vars  tab. create following env vars: git_author_name : this human-readable “author”. git_author_email : this email address \"author\". git_committer_name : this human-readable “committer”. git_committer_email : this email address \"committer\". " });
this.add({id:404, 
title:"Setting your Git credentials using the Set Git Credentials Step", 
body:" setting git credentials using set credentials step add set git credentials step first step workflow. the come you’d git commit . this way make sure any changes current build attached commit associated with username email address. in git username field, set value user name. in git email address field, set value email address. start build. if went well, see changes repository git provider. the new username email address visible future commits push builds " });
this.add({id:405, 
title:"Reporting the build status to your Git hosting provider", 
body:" reporting build status git hosting provider you need authenticate bitrise specify service credential user app settings page app push build status reports git provider. github app integration if use bitrise github app connect bitrise workspace git account organization, don't need any additional configuration described guide: app automatically provides status reports. bitrise push build status reports git provider (github\/gitlab\/bitbucket). you need authenticate communicate hosting service. apart reports, enables operations, auto-registering ssh keys webhooks. status sent automatically triggered builds, builds code pull request. to this, need specify service credential user app bitrise.io . you need make sure user connected account with git hosting service choice bitrise.io . this account used bitrise communicate with api git hosting provider. " });
this.add({id:406, 
title:"Configuring build status reporting", 
body:" configuring build status reporting allowlist bitrise website ip addresses if use form self-hosted solution storing code, need allowlist static ip addresses bitrise website background workers. this allows features bitrise.yml file repository, receiving build status updates bitrise: ip address ranges for bitrise backend workers . to report status, need make sure service credential user's bitrise account connected git provider account. this access app's repository. service credential user restriction you set service credential user so, need admin role app's team bitrise. if service credential user specific bitrise user, log set themselves. for information, see: changing the service credential user . to check build status reporting possible: in upper right corner, open account selector dropdown menu. select account settings option. make sure account connected git provider hosts repository: check the  connected accounts  menu left side. make sure connected git provider account required level permission sending status reports. on github bitbucket, write access required. on gitlab, developer access required. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . find service credential user section. click test <git provider> connection button make sure selected user’s connection used sending build status hosting provider. " });
this.add({id:407, 
title:"Troubleshooting build status reporting", 
body:" troubleshooting build status reporting if builds send status reports git hosting provider - github, gitlab bitbucket -, need little investigating causes problem. let’s look potential issues! " });
this.add({id:408, 
title:"Checking the service credential user", 
body:" checking service credential user the service credential user app bitrise.io connected bitrise account git hosting access repository app account. you check service credential user test git connection. open app bitrise with user admin role app . on main page app, click app settings icon: . go app’s page bitrise.io . find service credential user section. current user in figure, current active user service credential user. if different user, looks little different, including button's text. click test <git provider> connection button test user's git connection. " });
this.add({id:409, 
title:"Checking repository permissions and repository URL", 
body:" checking repository permissions url make sure granted bitrise access workspace team. it did grant denied github bitbucket team owns repository. make sure url repository date: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select general . find repository url make sure it's correct. " });
this.add({id:406, 
title:"Configuring build status reporting", 
body:" configuring build status reporting allowlist bitrise website ip addresses if use form self-hosted solution storing code, need allowlist static ip addresses bitrise website background workers. this allows features bitrise.yml file repository, receiving build status updates bitrise: ip address ranges for bitrise backend workers . to report status, need make sure service credential user's bitrise account connected git provider account. this access app's repository. service credential user restriction you set service credential user so, need admin role app's team bitrise. if service credential user specific bitrise user, log set themselves. for information, see: changing the service credential user . to check build status reporting possible: in upper right corner, open account selector dropdown menu. select account settings option. make sure account connected git provider hosts repository: check the  connected accounts  menu left side. make sure connected git provider account required level permission sending status reports. on github bitbucket, write access required. on gitlab, developer access required. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations . find service credential user section. click test <git provider> connection button make sure selected user’s connection used sending build status hosting provider. " });
this.add({id:407, 
title:"Troubleshooting build status reporting", 
body:" troubleshooting build status reporting if builds send status reports git hosting provider - github, gitlab bitbucket -, need little investigating causes problem. let’s look potential issues! " });
this.add({id:408, 
title:"Checking the service credential user", 
body:" checking service credential user the service credential user app bitrise.io connected bitrise account git hosting access repository app account. you check service credential user test git connection. open app bitrise with user admin role app . on main page app, click app settings icon: . go app’s page bitrise.io . find service credential user section. current user in figure, current active user service credential user. if different user, looks little different, including button's text. click test <git provider> connection button test user's git connection. " });
this.add({id:409, 
title:"Checking repository permissions and repository URL", 
body:" checking repository permissions url make sure granted bitrise access workspace team. it did grant denied github bitbucket team owns repository. make sure url repository date: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select general . find repository url make sure it's correct. " });
this.add({id:410, 
title:"Starting builds", 
body:" starting builds you start builds bitrise multiple ways: manually, scheduling, setting triggers, using api. pipelines this section documentation deals with starting standalone bitrise builds. for pipelines, check running a pipeline . you start builds bitrise multiple ways: starting builds manuallyscheduling buildstriggering builds automatically with api: triggering and aborting builds you configure bitrise skip certain commits git tags, preventing triggering builds. " });
this.add({id:411, 
title:"Starting builds manually", 
body:" starting builds manually you start builds manually selecting app need dashboard clicking start\/schedule build button. starting build manually bitrise takes literally clicks - leave default settings. if wish that, want sure settings are, read on! to start build using basic configuration options: on bitrise ci page app, start build button click with clock icon it. enter branch want run branch input field. you set branch. if pull request repository forked branch, type branch run build request. pull request build starting build pull request’s branch not request build. the manually started state code branch. an automatically triggered build, however, builds look like merged request. optionally, enter build message message field. please note entering git commit message specific doesn't trigger build commit! select workflow run workflow menu. if don't select one, bitrise choose workflow based app's trigger map scheduling build the schedule build option allows configure builds triggered specific times. read more: scheduling builds . " });
this.add({id:412, 
title:"Running Workflows from the Workflow Editor", 
body:" running workflows workflow editor you manually start build running single workflow workflow editor . to so: open app bitrise click the  workflows  button open workflow editor. on workflows tab, use workflow drop-down menu select workflow like run. click run workflow . specify branch that want build branch field. click run workflow start build. and that's it! as soon click run workflow button, build kicked off, build's page open new tab. " });
this.add({id:413, 
title:"Advanced configuration options for starting\/scheduling builds", 
body:" advanced configuration options starting\/scheduling builds if choose advanced build configuration window, options available with basic , more: git tag : builds particular branch commit tagged with tag enter. if set this, can't hash. git tags commit hashes conflicting options you specify git tag commit hash. when set one, disappear. this ensures enter conflicting input values. commit hash : copy specific commit’s hash build particular commit. this option send status update git hosting service. if set this, can't git tag. commit hash takes precedence branch option if branch option specifies branch commit hash chose doesn't exist, bitrise does given run build with branch. custom environment variables : create custom environment variable used build. see setting a custom env var when starting a build . generated curl command : based options set build configuration window, provide automatically generated curl command. this copied pasted, run any platform installed. " });
this.add({id:414, 
title:"Triggering builds automatically", 
body:" triggering builds automatically you configure automatic build triggers bitrise specifying trigger event workflow. builds code pushes, pull requests git tags. you configure automatic build triggers bitrise specifying code event trigger destination workflow run. define multiple app. by default, trigger workflow. if need multiple workflows single trigger, ways: use pipelines: pipeline, workflow run parallel stage, pipeline trigger starts first stage pipeline. read more: configuring pipeline triggers . chain workflows so run other. use bitrise start build bitrise wait build steps . there types triggers: code push: trigger build automatically push code using commits match conditions. for example, a commit specified branch app's repository triggers build. pull request: trigger build automatically pull request matches conditions. for example, specify source and\/or destination branches any trigger build. git tag: trigger build automatically commit with specific tag triggers build. trigger conditions each trigger type set with multiple different conditions. the available conditions listed explained procedure creating type. not trigger conditions supported git providers. for detailed list, see supported trigger conditions . you manage triggers triggers section workflow editor directly edit bitrise.yml app set up. also, can't set different triggers code event (for example, push) branch main). the workflow editor allow save configuration attempt so. " });
this.add({id:415, 
title:"Code push triggers", 
body:" code push triggers a code push trigger starts build time app's repository changes. a code push trigger possible condition types: push branch: only commits specified branch app's repository trigger new build. commit message: only specified commit message triggers new build. for example, hotfix critical: resolved security vulnerability user authentication . you use wild card pattern like hotfix.*   regex pattern like hotfix\\s*(critical|high):.* trigger builds commit messages. files changed: a build triggered certain files change. this especially useful monorepo setups; is, single repository contains code multiple different projects. for example, regex pattern like ios\/.*\\.swift$ trigger builds swift files ios directory changed inside monorepo. similarly, simple wild card patterns like ios\/app.js ios\/components\/myview.swift ios\/layouts\/main_screen.xml target specific files relevant directories trigger builds. these conditions combined: example, set trigger starts build given file changes main branch app's repository. at condition configured trigger. when set multiple conditions, fulfilled build triggered. the trigger configuration allows use regular expressions: regex match branch, commit message, filename. first build potential subsequent matches ignored. " });
this.add({id:416, 
title:"Creating triggers for code pushes", 
body:" creating triggers code pushes workflow editor bitrise.yml if use oauth connection repository, make sure bitrise webhook registered repository. if use github app integration, don't need webhook. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select push tab. click add push trigger . in add push trigger dialog, set trigger conditions: push branch : commits specified branch trigger build. commit message : commits with specified commit message trigger build. file change : changes specified file(s) trigger build. when setting multiple conditions, conditions fulfilled build start. you use regular expressions any condition types. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . if use oauth connection repository, make sure bitrise webhook registered repository. if use github app integration, don't need webhook. open bitrise.yml file. under trigger_map , add new trigger defining type push setting trigger condition: trigger_map:\n- type: push\n commit_message: your_message in example, use commit_message trigger condition. the available conditions are: push_branch : commits specified branch trigger build. commit_message : commits with specified commit message trigger build. changed_files : changes specified file(s) trigger build. you use regex adding regex:  trigger condition. for example: commit_message: \n regex: \".*\" add workflow pipeline triggered. trigger_map:\n- type: push\n commit_message: your_message\n workflow: primary you’re done! from on, code gets pushed selected branch app’s repository, bitrise trigger build with workflow pipeline. " });
this.add({id:417, 
title:"Pull request triggers", 
body:" pull request triggers a pull request trigger starts build time opened app's repository. a pull request trigger possible condition types: source branch: the branch containing changes pull request. target branch: the branch pull request merged to. pull request label: only pull requests with certain label applied trigger builds. for example, manually builds specific prs adding like build-test. these conditions combined: example, set trigger starts build pull request opened given source branch with certain label. at condition configured trigger. when multiple conditions, fulfilled triggered. the trigger configuration allows use regular expressions: regex match branch pr label. first build potential subsequent matches ignored. builds triggered pull requests subject manual approval: approving pull request builds . by default, draft pull requests trigger builds, too. this disabled any time: triggering builds from draft prs . " });
this.add({id:418, 
title:"Creating triggers for pull requests", 
body:" creating triggers pull requests workflow editor bitrise.yml make sure bitrise webhook registered repository. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select pull request tab. click add pull request trigger . in add pull request trigger dialog, set trigger conditions builds: source branch : the branch pull request opened. target branch : the branch pull request merged into. pr label : a label applied pr. pr comment : a specified comment submitted pull request. commit message : one commit messages pull request. file change : changes specified file(s) pull request. pull request trigger limitations to use the  pr comment  trigger, allow pull request comment passed webhook payload git provider. enable events: comment created , comment updated . when setting multiple conditions, conditions fulfilled build start. you use regular expressions any condition types. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . make sure bitrise webhook registered repository. open bitrise.yml file. under trigger_map , add new trigger defining type pull-request setting trigger condition: trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\" in example, use pull_request_target_branch trigger condition with regular expression. the available conditions following (you use regex them): pull_request_source_branch : pull requests opened specified branch trigger build. pull_request_target_branch : pull requests merged specified branch trigger build. pull_request_label : pull requests with given label trigger build. you use regex adding regex:  trigger condition. add workflow pipeline triggered. trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\"\n workflow: primary and you’re done! from on, pull request opened repository, bitrise trigger build with selected workflow! " });
this.add({id:419, 
title:"Triggering builds from draft PRs", 
body:" triggering builds draft prs github gitlab offers feature called draft pull request (or merge request case gitlab): create pull (pr), choose ready review draft request. draft requests merged, code owners automatically requested requests. git provider limitations this feature supported github gitlab repositories. by default, draft prs trigger builds: time open pr push code pr. you disable any with toggle workflow editor. check exact events builds depending settings: build trigger behavior for draft prs . each separate trigger toggle: configure app so certain triggers start build draft prs don't. " });
this.add({id:420, 
title:"Disabling builds from a draft PR", 
body:" disabling builds draft pr skipping steps build triggered draft pr this guide tells how disable triggering builds draft pr altogether. you can, however, skip certain steps build triggered pull request. just need use run_if condition github_pr_is_draft environment variable: information, see enabling or disabling a step conditionally . workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . find trigger need toggle draft pull requests enabled switch. open bitrise.yml file. in trigger_map property, trigger. it type: pull_request field. add draft_pull_request_enabled: false it. trigger_map:\n- type: pull-request\n pull_request_target_branch: main\n workflow: primary\n draft_pull_request_enabled: false\n " });
this.add({id:421, 
title:"Build trigger behavior for draft PRs", 
body:" build trigger behavior draft prs the table shows build triggered specific action performed regarding draft prs, depending pr trigger settings. for example, converting doesn't enabled does it's disabled. trigger behavior action draft pr trigger enabled draft pr trigger disabled open draft pr push commit draft pr convert draft pr convert pr draft " });
this.add({id:422, 
title:"Git tag triggers", 
body:" git tag triggers a git tag trigger starts build time commit with given git tag pushed app's repository. for tag trigger, possible condition: itself. when setting need set regular expression pattern. " });
this.add({id:423, 
title:"Creating Git tag triggers", 
body:" creating git tag triggers note certain providers, gitlab, require tag push events specifically enabled webhook setup. workflow editor bitrise.yml make sure bitrise webhook registered repository. if git provider requires it, make sure tag push events enabled webhook configuration. for example, gitlab requires it. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select tag tab. click add tag trigger . in add tag trigger dialog, add tag tag field. you use regular expression instead tag. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . make sure bitrise webhook registered repository. open bitrise.yml file. under trigger_map , add new trigger defining type tag-push set tag trigger condition: trigger_map:\n- type: tag-push\n tag: '*' this example uses wildcard triggers build any tag push. add workflow pipeline triggered. trigger_map:\n- type: tag-push\n tag: '*'\n workflow: primary " });
this.add({id:424, 
title:"Deactivating a trigger", 
body:" deactivating trigger you temporarily deactivate any build trigger. a deactivated trigger doesn't builds retains configuration information. if need future, don't recreate it: just reactivate with single click. to deactivate build trigger: workflow editor bitrise.yml open workflow editor bitrise. on left, select triggers . select appropriate tab, depending trigger want deactivate. set trigger inactive . open bitrise.yml file. find trigger_map property trigger want disable. add enabled: false it. trigger_map:\n- type: push\n push_branch: main\n workflow: primary\n enabled: false\n " });
this.add({id:425, 
title:"Supported trigger conditions", 
body:" supported trigger conditions not trigger conditions available git providers. as general rule, cloud service frequently used providers: github, gitlab, bitbucket. for providers, self-hosted repositories, check detailed table push triggers pull request triggers. supported trigger conditions code push triggers git provider branch commit message files changed github (cloud) github (self-hosted) gitlab (cloud) gitlab (self-hosted) bitbucket (cloud) bitbucket server (self-hosted) assembla deveo (perforce) gogs vs team services supported trigger conditions pull request triggers git provider source branch target branch labels comments commit message changed files github (cloud) github (self-hosted) gitlab (cloud) gitlab (self-hosted) bitbucket (cloud) n\/a bitbucket server (self-hosted) n\/a assembla n\/a deveo (perforce) gogs vs team services " });
this.add({id:426, 
title:"Scheduling builds", 
body:" scheduling builds you schedule builds run automatically specific time week. you schedule builds run automatically specific time week so check logs it’s convenient you. when scheduling build, define custom environment variables . you set advanced filters git tags commit hash. if regularly scheduled builds, can: edit configuration. trigger manually any time. temporarily disable them. permanently delete them. " });
this.add({id:427, 
title:"Scheduling a build", 
body:" scheduling build how schedule build with basic configuration options bitrise: on bitrise ci page app, start build button click with clock icon it. in schedule build dialog, set scheduling cadence: choose basic cron settings. in basic settings, need set start date, time 24-hour format, select timezone. in cron settings, set cron schedule expression . the dialog parse expression display configured time human-readable format. if chose basic , enable disable repetition with repetition toggle. if enable repetition, configure frequency, minutes years. the build triggered with configured frequency, time, determined scheduling cadence. for example, configure builds run monday thursday week. when ready, click next proceed build configuration. select basic advanced configuration. basic configuration offers options: a branch name. this required field. a message message field. this related git commit messages all. it's just place provide optional information build. a workflow pipeline. you select specific use based trigger map option select using trigger map app's bitrise.yml configuration file. pull request branch starting build pull request’s branch not request build. the manually started state code branch. an automatically triggered build, however, builds look like merged request. for advanced configuration options, see advanced configuration options for starting\/scheduling builds section. when done, click schedule build . " });
this.add({id:428, 
title:"Advanced configuration options for starting\/scheduling builds", 
body:" advanced configuration options starting\/scheduling builds if choose advanced build configuration window, options available with basic , more: git tag : builds particular branch commit tagged with tag enter. if set this, can't hash. git tags commit hashes conflicting options you specify git tag commit hash. when set one, disappear. this ensures enter conflicting input values. commit hash : copy specific commit’s hash build particular commit. this option send status update git hosting service. if set this, can't git tag. commit hash takes precedence branch option if branch option specifies branch commit hash chose doesn't exist, bitrise does given run build with branch. custom environment variables : create custom environment variable used build. see setting a custom env var when starting a build . generated curl command : based options set build configuration window, provide automatically generated curl command. this copied pasted, run any platform installed. " });
this.add({id:429, 
title:"Editing a scheduled build", 
body:" editing scheduled build to change configuration regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click little gear icon open settings menu. click edit scheduled build . make changes want click save changes . " });
this.add({id:430, 
title:"Triggering a scheduled build manually", 
body:" triggering scheduled build manually to immediately trigger scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click trigger . " });
this.add({id:431, 
title:"Disabling a scheduled build", 
body:" disabling scheduled build to temporarily disable regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . toggle enabled option. the build run enable again. " });
this.add({id:432, 
title:"Deleting a scheduled build", 
body:" deleting scheduled build to permanently delete regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click little gear icon open settings menu. click delete click delete prompted confirmation. " });
this.add({id:433, 
title:"Approving pull request builds", 
body:" approving pull request builds you option requiring manual approval bitrise builds started pull requests app contains exposed secrets. this deactivated public apps. not pull requests need built. after all, projects, create fork repository submit request. however, app bitrise set with secrets exposed pull request builds, example, probably don’t want just able access secrets. that option require approval pull request build start. this feature works somewhat differently public private apps: private apps: default, pull requests submitted fork require approval. the setting changed. if secrets not exposed prs, build run asking public apps: pull requests submitted fork require approval default changed. apps cannot opt feature. " });
this.add({id:434, 
title:"Enabling manual approval for private apps", 
body:" enabling manual approval private apps to enable disable manual approval, need admin owner application’s team. the application must private: public apps opt feature! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . scroll manual build approval . please note change setting private apps! for public apps, enabled. toggle switch enable disable it. by default, set disabled. " });
this.add({id:435, 
title:"Approving the PR build", 
body:" approving pr build approving pr build please note approving pr build means bitrise. approving pull request github, example, isn't sufficient start bitrise: owner approve bitrise itself. if pull request submitted fork, notified pr build waiting approval: a notification email sent with app, links repository itself app’s builds page bitrise. on git provider, status ci check pending - waiting approval on builds page app, confirmation box displayed. to approve run build, click approve run build button. clicking review opens pull request website git provider. " });
this.add({id:436, 
title:"Build triggers in the bitrise.yml file", 
body:" build triggers bitrise.yml file on bitrise, create triggers (or webhooks) events code push pull requests start build automatically. you trigger builds bitrise registering webhook source code hosting provider configuring build trigger. each app with triggers map bitrise.yml file. the trigger map defines build triggers, including type conditions. the trigger map essentially list filters: filter item matches certain case. if case matched, build triggered. every include condition. " });
this.add({id:437, 
title:"Overview of the trigger map", 
body:" overview trigger map the trigger map defined trigger_map property bitrise.yml file. a valid trigger map trigger. a trigger main elements: the type trigger: push , pull_request , tag . the trigger condition. for example, source branch pull request. the workflow pipeline triggered. one trigger means build: single workflow pipeline. you chain workflows run workflows succession single trigger. below single trigger triggers build with primary workflow pull request opened any branch. trigger_map:\n- pull_request_source_branch: \"*\" \n type: pull_request workflow: primary " });
this.add({id:438, 
title:"Multiple trigger conditions", 
body:" multiple trigger conditions if define multiple trigger conditions single item match order build. for example: trigger_map:\n- pull_request_target_branch: \"main\"\n pull_request_source_branch: \"develop\"\n type: pull_request\n workflow: primary this select primary workflow pull request’s source branch develop and target branch main . " });
this.add({id:439, 
title:"Order of triggers", 
body:" order triggers the order triggers important: first trigger with matching conditions build. for example, let's say code push triggers: trigger_map:\n- type: push\n push_branch: main\n workflow: primary\n- commit_message: deploy\n deploy the first trigger triggers primary workflow code pushed main branch app's repository. the second trigger triggers deploy workflow commit with message deploy pushed any branch repository. what happens commit pushed main branch with commit message deploy ? the commit matches conditions first trigger so primary workflow triggered. in scenario, deploy workflow not triggered, commit matches conditions trigger, too. " });
this.add({id:440, 
title:"Wildcards and regex", 
body:" wildcards regex we support wildcards ( * ) simple text matching triggers. wildcards good choice don't need advanced pattern capabilities regular expressions. for example, trigger based commit messages starting with fix achieved using wildcard. wildcards useful match specific, fixed values appearing input. we recommend using regexes needed multiple alternative values, negation, capturing specific groups characters character types (for example, numbers only) needed. to use regular expressions trigger condition, need add regex: value following format: trigger_map:\n- type: push\n push_branch:\n regex: <regular expression>\n workflow: primary\n- pull_request\n pull_request_source_branch:\n " });
this.add({id:441, 
title:"Components of the trigger map", 
body:" components trigger map the trigger_map property accepts values listed tables below. components trigger types component description accepted values default value type the type trigger. a trigger with given accepts conditions belonging type. push pull_request tag n\/a enabled a boolean property defines trigger currently active. true false true workflow pipeline the workflow pipeline triggered. you can't set both. the exact workflow pipeline. n\/a components code push triggers component description default value push_branch the branch repository code pushed trigger build. * commit_message the commit message trigger build. * changed_files the path file folder changes trigger build. * components pull request triggers component description default value pull_request_source_branch the branch pull request opened. * pull_request_target_branch the branch merge target pull request. * pull_request_label the pull request label. * draft_pull_request_enabled a boolean property defines draft pull requests trigger builds. true pull_request_comment a comment posted pull request. * commit_message a specific commit message pushes pull request. * changed_files specific files modified pull request. * " });
this.add({id:442, 
title:"Starting parallel builds with a single trigger", 
body:" starting parallel builds with single trigger you start multiple parallel builds using bitrise start build wait steps. using build pipelines start parallel builds with single trigger if credit-based account planning running multiple tasks parallel with single trigger, recommend using build pipelines. for information, check build pipelines . if than concurrency credit-based account, run build simultaneously. and want make life easy possible, builds started automatically, with single trigger. let’s how works! in example, workflows single app set run time. let’s trigger , building testing . the workflow called trigger triggered pull request, workflow trigger building testing run simultaneously. all workflows run separate, clean virtual machines. they different types stacks: choose stack any workflow, workflow editor app select stack tab. if any builds fail, build considered failed build. triggered webhook, bitrise send summarized build result git provider. if any parallel builds fail, failed status reported. no reports \"child\" builds bitrise send git status report original \"parent\" build, triggered builds. the \"child\" builds reports provider! for example, build a triggers builds b c, status report sent finished. there separate reports however. what need: a personal access token. a secret environment variable storing token. the bitrise start build step. the bitrise wait build step. bitrise start build step ci since bitrise build start step heavily relies parameters currently running build (for example, app slug, slug number) api , use bitrise build start step locally. bitrise.yml example you edit bitrise.yml file bitrise.yml tab workflow editor, edit file locally. the example focuses bitrise ui, prefer use yaml format, check example ! create personal access token user. go profile settings select security option left side. click generate new button. copying token make sure copy token it's generated: won't able see again! create secret environment variable secrets tab app’s workflow editor add token value. feel free use any key wish secret. we recommend simple like $access_token . add bitrise start build step trigger workflow. note bitrise start build step set environment variable builds starts: $source_bitrise_build_number . each build triggered step numbers source number them. add secret env storing personal access token bitrise access token input step: click select secret variable button choose key created. find workflows input step, add building testing it. add bitrise wait build step trigger workflow. checking build statuses the step checks statuses builds defined step. build slugs input: slugs output bitrise start build step. as long builds defined slugs running, step hold build running in. the fail any included fail. add secret env storing personal access token bitrise access token input step: click select secret variable button choose key created. and done! once trigger trigger workflow, bitrise start build step workflow trigger builds running simultaneously. if successful, bitrise wait build step lets first build finish. a single status report sent git hosting provider, regardless successful not. " });
this.add({id:443, 
title:"bitrise.yml example", 
body:" bitrise.yml example trigger:\n steps:\n - build-router-start@0:\n inputs:\n workflows: |-\n building\n testing\n access_token: \"$bitrise_api_key\"\n build-router-wait@0:\n \"$bitrise_api_key\" " });
this.add({id:444, 
title:"Skipping a given commit or pull request", 
body:" skipping given commit pull request depending settings, code change repository trigger bitrise builds. however, need to, skip specific commit pull request. depending settings, code change repository trigger bitrise builds. however, need to, skip specific commit pull request. skipping means, context, code change not trigger build bitrise, triggers set so. " });
this.add({id:445, 
title:"Preventing a commit from triggering a build", 
body:" preventing commit triggering build to make sure specific commit does trigger build, include [skip ci] [ci skip] commit message: this important, [skip ci] or: i just changed readme \n\n[ci skip] \n only head\/last commit message checked! if push than commit, (head) commit’s message checked skip ci pattern! if want start build all, choices: rebase commit (change message). push commit. pushing commit git allows create push commits. if want build skipped git commit --allow-empty -m \"i decided run this\" related branch push commit. " });
this.add({id:446, 
title:"Preventing a pull request from triggering a build", 
body:" preventing pull request triggering build pull requests treated (virtual) commits themselves, commit message title + description pull request. it commit messages individual commits make pull request. to skip pull request include [skip ci] pattern pull request’s title description. individual commit messages checked putting [skip ci] pattern commit message individual commits make pull request work: trigger build appropriate set up. once decide skip pull request, simply remove [skip ci] pattern pull request’s title description. this automatically trigger new build with latest commit, future commits request built (unless add [skip ci] pattern again). " });
this.add({id:447, 
title:"Skipping Steps triggered by a draft PR", 
body:" skipping steps triggered draft pr when use draft pr function github , bitrise inserts environment variable called github_pr_is_draft build environment variable list. if env var available list, value set true . triggering builds draft prs you configure trigger map avoid triggering builds draft pull requests (or merge case gitlab). this doesn't require github_pr_is_draft env var: just need toggle switch workflow editor . you use github_pr_is_draft env var build conditional: example, skip certain steps builds triggered draft prs: workflow1:\n steps:\n - script:\n run_if: '{{enveq \"github_pr_is_draft\" \"\"}}' \n inputs:\n content: |-\n #!\/usr\/bin\/env bash\n # fail any commands fails\n set -e\n debug log\n -x in example, run_if condition means step run build not triggered draft pr. yo recommend insert run_if command step workflow skip steps. starting new build draft pr if previously used draft pr build ready merge changes code pr, clicking ready review button github won’t trigger new build bitrise. the previous builds contain draft pr related env vars. in case, recommend manually start brand website ci with commit. " });
this.add({id:411, 
title:"Starting builds manually", 
body:" starting builds manually you start builds manually selecting app need dashboard clicking start\/schedule build button. starting build manually bitrise takes literally clicks - leave default settings. if wish that, want sure settings are, read on! to start build using basic configuration options: on bitrise ci page app, start build button click with clock icon it. enter branch want run branch input field. you set branch. if pull request repository forked branch, type branch run build request. pull request build starting build pull request’s branch not request build. the manually started state code branch. an automatically triggered build, however, builds look like merged request. optionally, enter build message message field. please note entering git commit message specific doesn't trigger build commit! select workflow run workflow menu. if don't select one, bitrise choose workflow based app's trigger map scheduling build the schedule build option allows configure builds triggered specific times. read more: scheduling builds . " });
this.add({id:412, 
title:"Running Workflows from the Workflow Editor", 
body:" running workflows workflow editor you manually start build running single workflow workflow editor . to so: open app bitrise click the  workflows  button open workflow editor. on workflows tab, use workflow drop-down menu select workflow like run. click run workflow . specify branch that want build branch field. click run workflow start build. and that's it! as soon click run workflow button, build kicked off, build's page open new tab. " });
this.add({id:413, 
title:"Advanced configuration options for starting\/scheduling builds", 
body:" advanced configuration options starting\/scheduling builds if choose advanced build configuration window, options available with basic , more: git tag : builds particular branch commit tagged with tag enter. if set this, can't hash. git tags commit hashes conflicting options you specify git tag commit hash. when set one, disappear. this ensures enter conflicting input values. commit hash : copy specific commit’s hash build particular commit. this option send status update git hosting service. if set this, can't git tag. commit hash takes precedence branch option if branch option specifies branch commit hash chose doesn't exist, bitrise does given run build with branch. custom environment variables : create custom environment variable used build. see setting a custom env var when starting a build . generated curl command : based options set build configuration window, provide automatically generated curl command. this copied pasted, run any platform installed. " });
this.add({id:412, 
title:"Running Workflows from the Workflow Editor", 
body:" running workflows workflow editor you manually start build running single workflow workflow editor . to so: open app bitrise click the  workflows  button open workflow editor. on workflows tab, use workflow drop-down menu select workflow like run. click run workflow . specify branch that want build branch field. click run workflow start build. and that's it! as soon click run workflow button, build kicked off, build's page open new tab. " });
this.add({id:413, 
title:"Advanced configuration options for starting\/scheduling builds", 
body:" advanced configuration options starting\/scheduling builds if choose advanced build configuration window, options available with basic , more: git tag : builds particular branch commit tagged with tag enter. if set this, can't hash. git tags commit hashes conflicting options you specify git tag commit hash. when set one, disappear. this ensures enter conflicting input values. commit hash : copy specific commit’s hash build particular commit. this option send status update git hosting service. if set this, can't git tag. commit hash takes precedence branch option if branch option specifies branch commit hash chose doesn't exist, bitrise does given run build with branch. custom environment variables : create custom environment variable used build. see setting a custom env var when starting a build . generated curl command : based options set build configuration window, provide automatically generated curl command. this copied pasted, run any platform installed. " });
this.add({id:414, 
title:"Triggering builds automatically", 
body:" triggering builds automatically you configure automatic build triggers bitrise specifying trigger event workflow. builds code pushes, pull requests git tags. you configure automatic build triggers bitrise specifying code event trigger destination workflow run. define multiple app. by default, trigger workflow. if need multiple workflows single trigger, ways: use pipelines: pipeline, workflow run parallel stage, pipeline trigger starts first stage pipeline. read more: configuring pipeline triggers . chain workflows so run other. use bitrise start build bitrise wait build steps . there types triggers: code push: trigger build automatically push code using commits match conditions. for example, a commit specified branch app's repository triggers build. pull request: trigger build automatically pull request matches conditions. for example, specify source and\/or destination branches any trigger build. git tag: trigger build automatically commit with specific tag triggers build. trigger conditions each trigger type set with multiple different conditions. the available conditions listed explained procedure creating type. not trigger conditions supported git providers. for detailed list, see supported trigger conditions . you manage triggers triggers section workflow editor directly edit bitrise.yml app set up. also, can't set different triggers code event (for example, push) branch main). the workflow editor allow save configuration attempt so. " });
this.add({id:415, 
title:"Code push triggers", 
body:" code push triggers a code push trigger starts build time app's repository changes. a code push trigger possible condition types: push branch: only commits specified branch app's repository trigger new build. commit message: only specified commit message triggers new build. for example, hotfix critical: resolved security vulnerability user authentication . you use wild card pattern like hotfix.*   regex pattern like hotfix\\s*(critical|high):.* trigger builds commit messages. files changed: a build triggered certain files change. this especially useful monorepo setups; is, single repository contains code multiple different projects. for example, regex pattern like ios\/.*\\.swift$ trigger builds swift files ios directory changed inside monorepo. similarly, simple wild card patterns like ios\/app.js ios\/components\/myview.swift ios\/layouts\/main_screen.xml target specific files relevant directories trigger builds. these conditions combined: example, set trigger starts build given file changes main branch app's repository. at condition configured trigger. when set multiple conditions, fulfilled build triggered. the trigger configuration allows use regular expressions: regex match branch, commit message, filename. first build potential subsequent matches ignored. " });
this.add({id:416, 
title:"Creating triggers for code pushes", 
body:" creating triggers code pushes workflow editor bitrise.yml if use oauth connection repository, make sure bitrise webhook registered repository. if use github app integration, don't need webhook. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select push tab. click add push trigger . in add push trigger dialog, set trigger conditions: push branch : commits specified branch trigger build. commit message : commits with specified commit message trigger build. file change : changes specified file(s) trigger build. when setting multiple conditions, conditions fulfilled build start. you use regular expressions any condition types. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . if use oauth connection repository, make sure bitrise webhook registered repository. if use github app integration, don't need webhook. open bitrise.yml file. under trigger_map , add new trigger defining type push setting trigger condition: trigger_map:\n- type: push\n commit_message: your_message in example, use commit_message trigger condition. the available conditions are: push_branch : commits specified branch trigger build. commit_message : commits with specified commit message trigger build. changed_files : changes specified file(s) trigger build. you use regex adding regex:  trigger condition. for example: commit_message: \n regex: \".*\" add workflow pipeline triggered. trigger_map:\n- type: push\n commit_message: your_message\n workflow: primary you’re done! from on, code gets pushed selected branch app’s repository, bitrise trigger build with workflow pipeline. " });
this.add({id:417, 
title:"Pull request triggers", 
body:" pull request triggers a pull request trigger starts build time opened app's repository. a pull request trigger possible condition types: source branch: the branch containing changes pull request. target branch: the branch pull request merged to. pull request label: only pull requests with certain label applied trigger builds. for example, manually builds specific prs adding like build-test. these conditions combined: example, set trigger starts build pull request opened given source branch with certain label. at condition configured trigger. when multiple conditions, fulfilled triggered. the trigger configuration allows use regular expressions: regex match branch pr label. first build potential subsequent matches ignored. builds triggered pull requests subject manual approval: approving pull request builds . by default, draft pull requests trigger builds, too. this disabled any time: triggering builds from draft prs . " });
this.add({id:418, 
title:"Creating triggers for pull requests", 
body:" creating triggers pull requests workflow editor bitrise.yml make sure bitrise webhook registered repository. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select pull request tab. click add pull request trigger . in add pull request trigger dialog, set trigger conditions builds: source branch : the branch pull request opened. target branch : the branch pull request merged into. pr label : a label applied pr. pr comment : a specified comment submitted pull request. commit message : one commit messages pull request. file change : changes specified file(s) pull request. pull request trigger limitations to use the  pr comment  trigger, allow pull request comment passed webhook payload git provider. enable events: comment created , comment updated . when setting multiple conditions, conditions fulfilled build start. you use regular expressions any condition types. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . make sure bitrise webhook registered repository. open bitrise.yml file. under trigger_map , add new trigger defining type pull-request setting trigger condition: trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\" in example, use pull_request_target_branch trigger condition with regular expression. the available conditions following (you use regex them): pull_request_source_branch : pull requests opened specified branch trigger build. pull_request_target_branch : pull requests merged specified branch trigger build. pull_request_label : pull requests with given label trigger build. you use regex adding regex:  trigger condition. add workflow pipeline triggered. trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\"\n workflow: primary and you’re done! from on, pull request opened repository, bitrise trigger build with selected workflow! " });
this.add({id:419, 
title:"Triggering builds from draft PRs", 
body:" triggering builds draft prs github gitlab offers feature called draft pull request (or merge request case gitlab): create pull (pr), choose ready review draft request. draft requests merged, code owners automatically requested requests. git provider limitations this feature supported github gitlab repositories. by default, draft prs trigger builds: time open pr push code pr. you disable any with toggle workflow editor. check exact events builds depending settings: build trigger behavior for draft prs . each separate trigger toggle: configure app so certain triggers start build draft prs don't. " });
this.add({id:420, 
title:"Disabling builds from a draft PR", 
body:" disabling builds draft pr skipping steps build triggered draft pr this guide tells how disable triggering builds draft pr altogether. you can, however, skip certain steps build triggered pull request. just need use run_if condition github_pr_is_draft environment variable: information, see enabling or disabling a step conditionally . workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . find trigger need toggle draft pull requests enabled switch. open bitrise.yml file. in trigger_map property, trigger. it type: pull_request field. add draft_pull_request_enabled: false it. trigger_map:\n- type: pull-request\n pull_request_target_branch: main\n workflow: primary\n draft_pull_request_enabled: false\n " });
this.add({id:421, 
title:"Build trigger behavior for draft PRs", 
body:" build trigger behavior draft prs the table shows build triggered specific action performed regarding draft prs, depending pr trigger settings. for example, converting doesn't enabled does it's disabled. trigger behavior action draft pr trigger enabled draft pr trigger disabled open draft pr push commit draft pr convert draft pr convert pr draft " });
this.add({id:422, 
title:"Git tag triggers", 
body:" git tag triggers a git tag trigger starts build time commit with given git tag pushed app's repository. for tag trigger, possible condition: itself. when setting need set regular expression pattern. " });
this.add({id:423, 
title:"Creating Git tag triggers", 
body:" creating git tag triggers note certain providers, gitlab, require tag push events specifically enabled webhook setup. workflow editor bitrise.yml make sure bitrise webhook registered repository. if git provider requires it, make sure tag push events enabled webhook configuration. for example, gitlab requires it. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select tag tab. click add tag trigger . in add tag trigger dialog, add tag tag field. you use regular expression instead tag. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . make sure bitrise webhook registered repository. open bitrise.yml file. under trigger_map , add new trigger defining type tag-push set tag trigger condition: trigger_map:\n- type: tag-push\n tag: '*' this example uses wildcard triggers build any tag push. add workflow pipeline triggered. trigger_map:\n- type: tag-push\n tag: '*'\n workflow: primary " });
this.add({id:424, 
title:"Deactivating a trigger", 
body:" deactivating trigger you temporarily deactivate any build trigger. a deactivated trigger doesn't builds retains configuration information. if need future, don't recreate it: just reactivate with single click. to deactivate build trigger: workflow editor bitrise.yml open workflow editor bitrise. on left, select triggers . select appropriate tab, depending trigger want deactivate. set trigger inactive . open bitrise.yml file. find trigger_map property trigger want disable. add enabled: false it. trigger_map:\n- type: push\n push_branch: main\n workflow: primary\n enabled: false\n " });
this.add({id:425, 
title:"Supported trigger conditions", 
body:" supported trigger conditions not trigger conditions available git providers. as general rule, cloud service frequently used providers: github, gitlab, bitbucket. for providers, self-hosted repositories, check detailed table push triggers pull request triggers. supported trigger conditions code push triggers git provider branch commit message files changed github (cloud) github (self-hosted) gitlab (cloud) gitlab (self-hosted) bitbucket (cloud) bitbucket server (self-hosted) assembla deveo (perforce) gogs vs team services supported trigger conditions pull request triggers git provider source branch target branch labels comments commit message changed files github (cloud) github (self-hosted) gitlab (cloud) gitlab (self-hosted) bitbucket (cloud) n\/a bitbucket server (self-hosted) n\/a assembla n\/a deveo (perforce) gogs vs team services " });
this.add({id:415, 
title:"Code push triggers", 
body:" code push triggers a code push trigger starts build time app's repository changes. a code push trigger possible condition types: push branch: only commits specified branch app's repository trigger new build. commit message: only specified commit message triggers new build. for example, hotfix critical: resolved security vulnerability user authentication . you use wild card pattern like hotfix.*   regex pattern like hotfix\\s*(critical|high):.* trigger builds commit messages. files changed: a build triggered certain files change. this especially useful monorepo setups; is, single repository contains code multiple different projects. for example, regex pattern like ios\/.*\\.swift$ trigger builds swift files ios directory changed inside monorepo. similarly, simple wild card patterns like ios\/app.js ios\/components\/myview.swift ios\/layouts\/main_screen.xml target specific files relevant directories trigger builds. these conditions combined: example, set trigger starts build given file changes main branch app's repository. at condition configured trigger. when set multiple conditions, fulfilled build triggered. the trigger configuration allows use regular expressions: regex match branch, commit message, filename. first build potential subsequent matches ignored. " });
this.add({id:416, 
title:"Creating triggers for code pushes", 
body:" creating triggers code pushes workflow editor bitrise.yml if use oauth connection repository, make sure bitrise webhook registered repository. if use github app integration, don't need webhook. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select push tab. click add push trigger . in add push trigger dialog, set trigger conditions: push branch : commits specified branch trigger build. commit message : commits with specified commit message trigger build. file change : changes specified file(s) trigger build. when setting multiple conditions, conditions fulfilled build start. you use regular expressions any condition types. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . if use oauth connection repository, make sure bitrise webhook registered repository. if use github app integration, don't need webhook. open bitrise.yml file. under trigger_map , add new trigger defining type push setting trigger condition: trigger_map:\n- type: push\n commit_message: your_message in example, use commit_message trigger condition. the available conditions are: push_branch : commits specified branch trigger build. commit_message : commits with specified commit message trigger build. changed_files : changes specified file(s) trigger build. you use regex adding regex:  trigger condition. for example: commit_message: \n regex: \".*\" add workflow pipeline triggered. trigger_map:\n- type: push\n commit_message: your_message\n workflow: primary you’re done! from on, code gets pushed selected branch app’s repository, bitrise trigger build with workflow pipeline. " });
this.add({id:417, 
title:"Pull request triggers", 
body:" pull request triggers a pull request trigger starts build time opened app's repository. a pull request trigger possible condition types: source branch: the branch containing changes pull request. target branch: the branch pull request merged to. pull request label: only pull requests with certain label applied trigger builds. for example, manually builds specific prs adding like build-test. these conditions combined: example, set trigger starts build pull request opened given source branch with certain label. at condition configured trigger. when multiple conditions, fulfilled triggered. the trigger configuration allows use regular expressions: regex match branch pr label. first build potential subsequent matches ignored. builds triggered pull requests subject manual approval: approving pull request builds . by default, draft pull requests trigger builds, too. this disabled any time: triggering builds from draft prs . " });
this.add({id:418, 
title:"Creating triggers for pull requests", 
body:" creating triggers pull requests workflow editor bitrise.yml make sure bitrise webhook registered repository. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select pull request tab. click add pull request trigger . in add pull request trigger dialog, set trigger conditions builds: source branch : the branch pull request opened. target branch : the branch pull request merged into. pr label : a label applied pr. pr comment : a specified comment submitted pull request. commit message : one commit messages pull request. file change : changes specified file(s) pull request. pull request trigger limitations to use the  pr comment  trigger, allow pull request comment passed webhook payload git provider. enable events: comment created , comment updated . when setting multiple conditions, conditions fulfilled build start. you use regular expressions any condition types. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . make sure bitrise webhook registered repository. open bitrise.yml file. under trigger_map , add new trigger defining type pull-request setting trigger condition: trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\" in example, use pull_request_target_branch trigger condition with regular expression. the available conditions following (you use regex them): pull_request_source_branch : pull requests opened specified branch trigger build. pull_request_target_branch : pull requests merged specified branch trigger build. pull_request_label : pull requests with given label trigger build. you use regex adding regex:  trigger condition. add workflow pipeline triggered. trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\"\n workflow: primary and you’re done! from on, pull request opened repository, bitrise trigger build with selected workflow! " });
this.add({id:419, 
title:"Triggering builds from draft PRs", 
body:" triggering builds draft prs github gitlab offers feature called draft pull request (or merge request case gitlab): create pull (pr), choose ready review draft request. draft requests merged, code owners automatically requested requests. git provider limitations this feature supported github gitlab repositories. by default, draft prs trigger builds: time open pr push code pr. you disable any with toggle workflow editor. check exact events builds depending settings: build trigger behavior for draft prs . each separate trigger toggle: configure app so certain triggers start build draft prs don't. " });
this.add({id:420, 
title:"Disabling builds from a draft PR", 
body:" disabling builds draft pr skipping steps build triggered draft pr this guide tells how disable triggering builds draft pr altogether. you can, however, skip certain steps build triggered pull request. just need use run_if condition github_pr_is_draft environment variable: information, see enabling or disabling a step conditionally . workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . find trigger need toggle draft pull requests enabled switch. open bitrise.yml file. in trigger_map property, trigger. it type: pull_request field. add draft_pull_request_enabled: false it. trigger_map:\n- type: pull-request\n pull_request_target_branch: main\n workflow: primary\n draft_pull_request_enabled: false\n " });
this.add({id:421, 
title:"Build trigger behavior for draft PRs", 
body:" build trigger behavior draft prs the table shows build triggered specific action performed regarding draft prs, depending pr trigger settings. for example, converting doesn't enabled does it's disabled. trigger behavior action draft pr trigger enabled draft pr trigger disabled open draft pr push commit draft pr convert draft pr convert pr draft " });
this.add({id:420, 
title:"Disabling builds from a draft PR", 
body:" disabling builds draft pr skipping steps build triggered draft pr this guide tells how disable triggering builds draft pr altogether. you can, however, skip certain steps build triggered pull request. just need use run_if condition github_pr_is_draft environment variable: information, see enabling or disabling a step conditionally . workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . find trigger need toggle draft pull requests enabled switch. open bitrise.yml file. in trigger_map property, trigger. it type: pull_request field. add draft_pull_request_enabled: false it. trigger_map:\n- type: pull-request\n pull_request_target_branch: main\n workflow: primary\n draft_pull_request_enabled: false\n " });
this.add({id:421, 
title:"Build trigger behavior for draft PRs", 
body:" build trigger behavior draft prs the table shows build triggered specific action performed regarding draft prs, depending pr trigger settings. for example, converting doesn't enabled does it's disabled. trigger behavior action draft pr trigger enabled draft pr trigger disabled open draft pr push commit draft pr convert draft pr convert pr draft " });
this.add({id:422, 
title:"Git tag triggers", 
body:" git tag triggers a git tag trigger starts build time commit with given git tag pushed app's repository. for tag trigger, possible condition: itself. when setting need set regular expression pattern. " });
this.add({id:423, 
title:"Creating Git tag triggers", 
body:" creating git tag triggers note certain providers, gitlab, require tag push events specifically enabled webhook setup. workflow editor bitrise.yml make sure bitrise webhook registered repository. if git provider requires it, make sure tag push events enabled webhook configuration. for example, gitlab requires it. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select triggers . on triggers page, select tag tab. click add tag trigger . in add tag trigger dialog, add tag tag field. you use regular expression instead tag. click next done. select workflow pipeline want bitrise run conditions met. when done, click add trigger . triggers yaml for detailed description how build triggers defined yaml format, see build triggers in the bitrise.yml file . make sure bitrise webhook registered repository. open bitrise.yml file. under trigger_map , add new trigger defining type tag-push set tag trigger condition: trigger_map:\n- type: tag-push\n tag: '*' this example uses wildcard triggers build any tag push. add workflow pipeline triggered. trigger_map:\n- type: tag-push\n tag: '*'\n workflow: primary " });
this.add({id:424, 
title:"Deactivating a trigger", 
body:" deactivating trigger you temporarily deactivate any build trigger. a deactivated trigger doesn't builds retains configuration information. if need future, don't recreate it: just reactivate with single click. to deactivate build trigger: workflow editor bitrise.yml open workflow editor bitrise. on left, select triggers . select appropriate tab, depending trigger want deactivate. set trigger inactive . open bitrise.yml file. find trigger_map property trigger want disable. add enabled: false it. trigger_map:\n- type: push\n push_branch: main\n workflow: primary\n enabled: false\n " });
this.add({id:425, 
title:"Supported trigger conditions", 
body:" supported trigger conditions not trigger conditions available git providers. as general rule, cloud service frequently used providers: github, gitlab, bitbucket. for providers, self-hosted repositories, check detailed table push triggers pull request triggers. supported trigger conditions code push triggers git provider branch commit message files changed github (cloud) github (self-hosted) gitlab (cloud) gitlab (self-hosted) bitbucket (cloud) bitbucket server (self-hosted) assembla deveo (perforce) gogs vs team services supported trigger conditions pull request triggers git provider source branch target branch labels comments commit message changed files github (cloud) github (self-hosted) gitlab (cloud) gitlab (self-hosted) bitbucket (cloud) n\/a bitbucket server (self-hosted) n\/a assembla n\/a deveo (perforce) gogs vs team services " });
this.add({id:426, 
title:"Scheduling builds", 
body:" scheduling builds you schedule builds run automatically specific time week. you schedule builds run automatically specific time week so check logs it’s convenient you. when scheduling build, define custom environment variables . you set advanced filters git tags commit hash. if regularly scheduled builds, can: edit configuration. trigger manually any time. temporarily disable them. permanently delete them. " });
this.add({id:427, 
title:"Scheduling a build", 
body:" scheduling build how schedule build with basic configuration options bitrise: on bitrise ci page app, start build button click with clock icon it. in schedule build dialog, set scheduling cadence: choose basic cron settings. in basic settings, need set start date, time 24-hour format, select timezone. in cron settings, set cron schedule expression . the dialog parse expression display configured time human-readable format. if chose basic , enable disable repetition with repetition toggle. if enable repetition, configure frequency, minutes years. the build triggered with configured frequency, time, determined scheduling cadence. for example, configure builds run monday thursday week. when ready, click next proceed build configuration. select basic advanced configuration. basic configuration offers options: a branch name. this required field. a message message field. this related git commit messages all. it's just place provide optional information build. a workflow pipeline. you select specific use based trigger map option select using trigger map app's bitrise.yml configuration file. pull request branch starting build pull request’s branch not request build. the manually started state code branch. an automatically triggered build, however, builds look like merged request. for advanced configuration options, see advanced configuration options for starting\/scheduling builds section. when done, click schedule build . " });
this.add({id:428, 
title:"Advanced configuration options for starting\/scheduling builds", 
body:" advanced configuration options starting\/scheduling builds if choose advanced build configuration window, options available with basic , more: git tag : builds particular branch commit tagged with tag enter. if set this, can't hash. git tags commit hashes conflicting options you specify git tag commit hash. when set one, disappear. this ensures enter conflicting input values. commit hash : copy specific commit’s hash build particular commit. this option send status update git hosting service. if set this, can't git tag. commit hash takes precedence branch option if branch option specifies branch commit hash chose doesn't exist, bitrise does given run build with branch. custom environment variables : create custom environment variable used build. see setting a custom env var when starting a build . generated curl command : based options set build configuration window, provide automatically generated curl command. this copied pasted, run any platform installed. " });
this.add({id:429, 
title:"Editing a scheduled build", 
body:" editing scheduled build to change configuration regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click little gear icon open settings menu. click edit scheduled build . make changes want click save changes . " });
this.add({id:430, 
title:"Triggering a scheduled build manually", 
body:" triggering scheduled build manually to immediately trigger scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click trigger . " });
this.add({id:431, 
title:"Disabling a scheduled build", 
body:" disabling scheduled build to temporarily disable regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . toggle enabled option. the build run enable again. " });
this.add({id:432, 
title:"Deleting a scheduled build", 
body:" deleting scheduled build to permanently delete regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click little gear icon open settings menu. click delete click delete prompted confirmation. " });
this.add({id:427, 
title:"Scheduling a build", 
body:" scheduling build how schedule build with basic configuration options bitrise: on bitrise ci page app, start build button click with clock icon it. in schedule build dialog, set scheduling cadence: choose basic cron settings. in basic settings, need set start date, time 24-hour format, select timezone. in cron settings, set cron schedule expression . the dialog parse expression display configured time human-readable format. if chose basic , enable disable repetition with repetition toggle. if enable repetition, configure frequency, minutes years. the build triggered with configured frequency, time, determined scheduling cadence. for example, configure builds run monday thursday week. when ready, click next proceed build configuration. select basic advanced configuration. basic configuration offers options: a branch name. this required field. a message message field. this related git commit messages all. it's just place provide optional information build. a workflow pipeline. you select specific use based trigger map option select using trigger map app's bitrise.yml configuration file. pull request branch starting build pull request’s branch not request build. the manually started state code branch. an automatically triggered build, however, builds look like merged request. for advanced configuration options, see advanced configuration options for starting\/scheduling builds section. when done, click schedule build . " });
this.add({id:428, 
title:"Advanced configuration options for starting\/scheduling builds", 
body:" advanced configuration options starting\/scheduling builds if choose advanced build configuration window, options available with basic , more: git tag : builds particular branch commit tagged with tag enter. if set this, can't hash. git tags commit hashes conflicting options you specify git tag commit hash. when set one, disappear. this ensures enter conflicting input values. commit hash : copy specific commit’s hash build particular commit. this option send status update git hosting service. if set this, can't git tag. commit hash takes precedence branch option if branch option specifies branch commit hash chose doesn't exist, bitrise does given run build with branch. custom environment variables : create custom environment variable used build. see setting a custom env var when starting a build . generated curl command : based options set build configuration window, provide automatically generated curl command. this copied pasted, run any platform installed. " });
this.add({id:428, 
title:"Advanced configuration options for starting\/scheduling builds", 
body:" advanced configuration options starting\/scheduling builds if choose advanced build configuration window, options available with basic , more: git tag : builds particular branch commit tagged with tag enter. if set this, can't hash. git tags commit hashes conflicting options you specify git tag commit hash. when set one, disappear. this ensures enter conflicting input values. commit hash : copy specific commit’s hash build particular commit. this option send status update git hosting service. if set this, can't git tag. commit hash takes precedence branch option if branch option specifies branch commit hash chose doesn't exist, bitrise does given run build with branch. custom environment variables : create custom environment variable used build. see setting a custom env var when starting a build . generated curl command : based options set build configuration window, provide automatically generated curl command. this copied pasted, run any platform installed. " });
this.add({id:429, 
title:"Editing a scheduled build", 
body:" editing scheduled build to change configuration regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click little gear icon open settings menu. click edit scheduled build . make changes want click save changes . " });
this.add({id:430, 
title:"Triggering a scheduled build manually", 
body:" triggering scheduled build manually to immediately trigger scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click trigger . " });
this.add({id:431, 
title:"Disabling a scheduled build", 
body:" disabling scheduled build to temporarily disable regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . toggle enabled option. the build run enable again. " });
this.add({id:432, 
title:"Deleting a scheduled build", 
body:" deleting scheduled build to permanently delete regularly scheduled build: go builds tab app. on top, see list scheduled builds. click show scheduled . click little gear icon open settings menu. click delete click delete prompted confirmation. " });
this.add({id:433, 
title:"Approving pull request builds", 
body:" approving pull request builds you option requiring manual approval bitrise builds started pull requests app contains exposed secrets. this deactivated public apps. not pull requests need built. after all, projects, create fork repository submit request. however, app bitrise set with secrets exposed pull request builds, example, probably don’t want just able access secrets. that option require approval pull request build start. this feature works somewhat differently public private apps: private apps: default, pull requests submitted fork require approval. the setting changed. if secrets not exposed prs, build run asking public apps: pull requests submitted fork require approval default changed. apps cannot opt feature. " });
this.add({id:434, 
title:"Enabling manual approval for private apps", 
body:" enabling manual approval private apps to enable disable manual approval, need admin owner application’s team. the application must private: public apps opt feature! open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . scroll manual build approval . please note change setting private apps! for public apps, enabled. toggle switch enable disable it. by default, set disabled. " });
this.add({id:435, 
title:"Approving the PR build", 
body:" approving pr build approving pr build please note approving pr build means bitrise. approving pull request github, example, isn't sufficient start bitrise: owner approve bitrise itself. if pull request submitted fork, notified pr build waiting approval: a notification email sent with app, links repository itself app’s builds page bitrise. on git provider, status ci check pending - waiting approval on builds page app, confirmation box displayed. to approve run build, click approve run build button. clicking review opens pull request website git provider. " });
this.add({id:436, 
title:"Build triggers in the bitrise.yml file", 
body:" build triggers bitrise.yml file on bitrise, create triggers (or webhooks) events code push pull requests start build automatically. you trigger builds bitrise registering webhook source code hosting provider configuring build trigger. each app with triggers map bitrise.yml file. the trigger map defines build triggers, including type conditions. the trigger map essentially list filters: filter item matches certain case. if case matched, build triggered. every include condition. " });
this.add({id:437, 
title:"Overview of the trigger map", 
body:" overview trigger map the trigger map defined trigger_map property bitrise.yml file. a valid trigger map trigger. a trigger main elements: the type trigger: push , pull_request , tag . the trigger condition. for example, source branch pull request. the workflow pipeline triggered. one trigger means build: single workflow pipeline. you chain workflows run workflows succession single trigger. below single trigger triggers build with primary workflow pull request opened any branch. trigger_map:\n- pull_request_source_branch: \"*\" \n type: pull_request workflow: primary " });
this.add({id:438, 
title:"Multiple trigger conditions", 
body:" multiple trigger conditions if define multiple trigger conditions single item match order build. for example: trigger_map:\n- pull_request_target_branch: \"main\"\n pull_request_source_branch: \"develop\"\n type: pull_request\n workflow: primary this select primary workflow pull request’s source branch develop and target branch main . " });
this.add({id:439, 
title:"Order of triggers", 
body:" order triggers the order triggers important: first trigger with matching conditions build. for example, let's say code push triggers: trigger_map:\n- type: push\n push_branch: main\n workflow: primary\n- commit_message: deploy\n deploy the first trigger triggers primary workflow code pushed main branch app's repository. the second trigger triggers deploy workflow commit with message deploy pushed any branch repository. what happens commit pushed main branch with commit message deploy ? the commit matches conditions first trigger so primary workflow triggered. in scenario, deploy workflow not triggered, commit matches conditions trigger, too. " });
this.add({id:440, 
title:"Wildcards and regex", 
body:" wildcards regex we support wildcards ( * ) simple text matching triggers. wildcards good choice don't need advanced pattern capabilities regular expressions. for example, trigger based commit messages starting with fix achieved using wildcard. wildcards useful match specific, fixed values appearing input. we recommend using regexes needed multiple alternative values, negation, capturing specific groups characters character types (for example, numbers only) needed. to use regular expressions trigger condition, need add regex: value following format: trigger_map:\n- type: push\n push_branch:\n regex: <regular expression>\n workflow: primary\n- pull_request\n pull_request_source_branch:\n " });
this.add({id:441, 
title:"Components of the trigger map", 
body:" components trigger map the trigger_map property accepts values listed tables below. components trigger types component description accepted values default value type the type trigger. a trigger with given accepts conditions belonging type. push pull_request tag n\/a enabled a boolean property defines trigger currently active. true false true workflow pipeline the workflow pipeline triggered. you can't set both. the exact workflow pipeline. n\/a components code push triggers component description default value push_branch the branch repository code pushed trigger build. * commit_message the commit message trigger build. * changed_files the path file folder changes trigger build. * components pull request triggers component description default value pull_request_source_branch the branch pull request opened. * pull_request_target_branch the branch merge target pull request. * pull_request_label the pull request label. * draft_pull_request_enabled a boolean property defines draft pull requests trigger builds. true pull_request_comment a comment posted pull request. * commit_message a specific commit message pushes pull request. * changed_files specific files modified pull request. * " });
this.add({id:437, 
title:"Overview of the trigger map", 
body:" overview trigger map the trigger map defined trigger_map property bitrise.yml file. a valid trigger map trigger. a trigger main elements: the type trigger: push , pull_request , tag . the trigger condition. for example, source branch pull request. the workflow pipeline triggered. one trigger means build: single workflow pipeline. you chain workflows run workflows succession single trigger. below single trigger triggers build with primary workflow pull request opened any branch. trigger_map:\n- pull_request_source_branch: \"*\" \n type: pull_request workflow: primary " });
this.add({id:438, 
title:"Multiple trigger conditions", 
body:" multiple trigger conditions if define multiple trigger conditions single item match order build. for example: trigger_map:\n- pull_request_target_branch: \"main\"\n pull_request_source_branch: \"develop\"\n type: pull_request\n workflow: primary this select primary workflow pull request’s source branch develop and target branch main . " });
this.add({id:439, 
title:"Order of triggers", 
body:" order triggers the order triggers important: first trigger with matching conditions build. for example, let's say code push triggers: trigger_map:\n- type: push\n push_branch: main\n workflow: primary\n- commit_message: deploy\n deploy the first trigger triggers primary workflow code pushed main branch app's repository. the second trigger triggers deploy workflow commit with message deploy pushed any branch repository. what happens commit pushed main branch with commit message deploy ? the commit matches conditions first trigger so primary workflow triggered. in scenario, deploy workflow not triggered, commit matches conditions trigger, too. " });
this.add({id:440, 
title:"Wildcards and regex", 
body:" wildcards regex we support wildcards ( * ) simple text matching triggers. wildcards good choice don't need advanced pattern capabilities regular expressions. for example, trigger based commit messages starting with fix achieved using wildcard. wildcards useful match specific, fixed values appearing input. we recommend using regexes needed multiple alternative values, negation, capturing specific groups characters character types (for example, numbers only) needed. to use regular expressions trigger condition, need add regex: value following format: trigger_map:\n- type: push\n push_branch:\n regex: <regular expression>\n workflow: primary\n- pull_request\n pull_request_source_branch:\n " });
this.add({id:441, 
title:"Components of the trigger map", 
body:" components trigger map the trigger_map property accepts values listed tables below. components trigger types component description accepted values default value type the type trigger. a trigger with given accepts conditions belonging type. push pull_request tag n\/a enabled a boolean property defines trigger currently active. true false true workflow pipeline the workflow pipeline triggered. you can't set both. the exact workflow pipeline. n\/a components code push triggers component description default value push_branch the branch repository code pushed trigger build. * commit_message the commit message trigger build. * changed_files the path file folder changes trigger build. * components pull request triggers component description default value pull_request_source_branch the branch pull request opened. * pull_request_target_branch the branch merge target pull request. * pull_request_label the pull request label. * draft_pull_request_enabled a boolean property defines draft pull requests trigger builds. true pull_request_comment a comment posted pull request. * commit_message a specific commit message pushes pull request. * changed_files specific files modified pull request. * " });
this.add({id:442, 
title:"Starting parallel builds with a single trigger", 
body:" starting parallel builds with single trigger you start multiple parallel builds using bitrise start build wait steps. using build pipelines start parallel builds with single trigger if credit-based account planning running multiple tasks parallel with single trigger, recommend using build pipelines. for information, check build pipelines . if than concurrency credit-based account, run build simultaneously. and want make life easy possible, builds started automatically, with single trigger. let’s how works! in example, workflows single app set run time. let’s trigger , building testing . the workflow called trigger triggered pull request, workflow trigger building testing run simultaneously. all workflows run separate, clean virtual machines. they different types stacks: choose stack any workflow, workflow editor app select stack tab. if any builds fail, build considered failed build. triggered webhook, bitrise send summarized build result git provider. if any parallel builds fail, failed status reported. no reports \"child\" builds bitrise send git status report original \"parent\" build, triggered builds. the \"child\" builds reports provider! for example, build a triggers builds b c, status report sent finished. there separate reports however. what need: a personal access token. a secret environment variable storing token. the bitrise start build step. the bitrise wait build step. bitrise start build step ci since bitrise build start step heavily relies parameters currently running build (for example, app slug, slug number) api , use bitrise build start step locally. bitrise.yml example you edit bitrise.yml file bitrise.yml tab workflow editor, edit file locally. the example focuses bitrise ui, prefer use yaml format, check example ! create personal access token user. go profile settings select security option left side. click generate new button. copying token make sure copy token it's generated: won't able see again! create secret environment variable secrets tab app’s workflow editor add token value. feel free use any key wish secret. we recommend simple like $access_token . add bitrise start build step trigger workflow. note bitrise start build step set environment variable builds starts: $source_bitrise_build_number . each build triggered step numbers source number them. add secret env storing personal access token bitrise access token input step: click select secret variable button choose key created. find workflows input step, add building testing it. add bitrise wait build step trigger workflow. checking build statuses the step checks statuses builds defined step. build slugs input: slugs output bitrise start build step. as long builds defined slugs running, step hold build running in. the fail any included fail. add secret env storing personal access token bitrise access token input step: click select secret variable button choose key created. and done! once trigger trigger workflow, bitrise start build step workflow trigger builds running simultaneously. if successful, bitrise wait build step lets first build finish. a single status report sent git hosting provider, regardless successful not. " });
this.add({id:443, 
title:"bitrise.yml example", 
body:" bitrise.yml example trigger:\n steps:\n - build-router-start@0:\n inputs:\n workflows: |-\n building\n testing\n access_token: \"$bitrise_api_key\"\n build-router-wait@0:\n \"$bitrise_api_key\" " });
this.add({id:444, 
title:"Skipping a given commit or pull request", 
body:" skipping given commit pull request depending settings, code change repository trigger bitrise builds. however, need to, skip specific commit pull request. depending settings, code change repository trigger bitrise builds. however, need to, skip specific commit pull request. skipping means, context, code change not trigger build bitrise, triggers set so. " });
this.add({id:445, 
title:"Preventing a commit from triggering a build", 
body:" preventing commit triggering build to make sure specific commit does trigger build, include [skip ci] [ci skip] commit message: this important, [skip ci] or: i just changed readme \n\n[ci skip] \n only head\/last commit message checked! if push than commit, (head) commit’s message checked skip ci pattern! if want start build all, choices: rebase commit (change message). push commit. pushing commit git allows create push commits. if want build skipped git commit --allow-empty -m \"i decided run this\" related branch push commit. " });
this.add({id:446, 
title:"Preventing a pull request from triggering a build", 
body:" preventing pull request triggering build pull requests treated (virtual) commits themselves, commit message title + description pull request. it commit messages individual commits make pull request. to skip pull request include [skip ci] pattern pull request’s title description. individual commit messages checked putting [skip ci] pattern commit message individual commits make pull request work: trigger build appropriate set up. once decide skip pull request, simply remove [skip ci] pattern pull request’s title description. this automatically trigger new build with latest commit, future commits request built (unless add [skip ci] pattern again). " });
this.add({id:447, 
title:"Skipping Steps triggered by a draft PR", 
body:" skipping steps triggered draft pr when use draft pr function github , bitrise inserts environment variable called github_pr_is_draft build environment variable list. if env var available list, value set true . triggering builds draft prs you configure trigger map avoid triggering builds draft pull requests (or merge case gitlab). this doesn't require github_pr_is_draft env var: just need toggle switch workflow editor . you use github_pr_is_draft env var build conditional: example, skip certain steps builds triggered draft prs: workflow1:\n steps:\n - script:\n run_if: '{{enveq \"github_pr_is_draft\" \"\"}}' \n inputs:\n content: |-\n #!\/usr\/bin\/env bash\n # fail any commands fails\n set -e\n debug log\n -x in example, run_if condition means step run build not triggered draft pr. yo recommend insert run_if command step workflow skip steps. starting new build draft pr if previously used draft pr build ready merge changes code pr, clicking ready review button github won’t trigger new build bitrise. the previous builds contain draft pr related env vars. in case, recommend manually start brand website ci with commit. " });
this.add({id:445, 
title:"Preventing a commit from triggering a build", 
body:" preventing commit triggering build to make sure specific commit does trigger build, include [skip ci] [ci skip] commit message: this important, [skip ci] or: i just changed readme \n\n[ci skip] \n only head\/last commit message checked! if push than commit, (head) commit’s message checked skip ci pattern! if want start build all, choices: rebase commit (change message). push commit. pushing commit git allows create push commits. if want build skipped git commit --allow-empty -m \"i decided run this\" related branch push commit. " });
this.add({id:446, 
title:"Preventing a pull request from triggering a build", 
body:" preventing pull request triggering build pull requests treated (virtual) commits themselves, commit message title + description pull request. it commit messages individual commits make pull request. to skip pull request include [skip ci] pattern pull request’s title description. individual commit messages checked putting [skip ci] pattern commit message individual commits make pull request work: trigger build appropriate set up. once decide skip pull request, simply remove [skip ci] pattern pull request’s title description. this automatically trigger new build with latest commit, future commits request built (unless add [skip ci] pattern again). " });
this.add({id:447, 
title:"Skipping Steps triggered by a draft PR", 
body:" skipping steps triggered draft pr when use draft pr function github , bitrise inserts environment variable called github_pr_is_draft build environment variable list. if env var available list, value set true . triggering builds draft prs you configure trigger map avoid triggering builds draft pull requests (or merge case gitlab). this doesn't require github_pr_is_draft env var: just need toggle switch workflow editor . you use github_pr_is_draft env var build conditional: example, skip certain steps builds triggered draft prs: workflow1:\n steps:\n - script:\n run_if: '{{enveq \"github_pr_is_draft\" \"\"}}' \n inputs:\n content: |-\n #!\/usr\/bin\/env bash\n # fail any commands fails\n set -e\n debug log\n -x in example, run_if condition means step run build not triggered draft pr. yo recommend insert run_if command step workflow skip steps. starting new build draft pr if previously used draft pr build ready merge changes code pr, clicking ready review button github won’t trigger new build bitrise. the previous builds contain draft pr related env vars. in case, recommend manually start brand website ci with commit. " });
this.add({id:448, 
title:"Caching", 
body:" caching every single bitrise build runs clean virtual machine, store content cache using branch-based caching key-based caching. every single bitrise build runs clean virtual machine . this means normally, caching, scratch virtual machine, including, example, installing dependencies. with caching, preserve contents selected files directories, installed dependencies generated build. there main methods caching bitrise: branch-based caching : uses bitrise.io cache: push step bitrise.io cache: pull step manage cache archives. each archive tied specific branch repository. key-based caching : it works associating cache archives with key. during workflow , restore cache archive referring key associated with it. " });
this.add({id:449, 
title:"Using branch-based caching in your builds", 
body:" using branch-based caching builds you use dedicated bitrise steps caching: bitrise.io cache pull tap cache contents build, push store information build cache. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . the basics using cache builds simple work box, depending workflows: just use dedicated steps. add bitrise.io cache:pull step right need cache. for example, case ios app, insert bitrise.io cache:pull step git clone repository dependency installer steps (such run cocoapods install carthage steps). you bitrise.io cache:pull step before git clone repository step. build cache expiry the build cache, related specific branch, expires seven days means automatically deleted - there’s new branch meantime. this builds frequently than week, cache won’t deleted. if don’t start days, deleted, run like first. add bitrise.io cache:push step workflow. for simple use cases, that’s it, do. these steps work box alongside with caching function. but wish learn create configuration, read on! pull request builds by default, run build triggered pull request, bitrise.io cache:push step won’t work: case, pull request build read cache can’t update it! we strongly recommend change this! from security perspective, best practice allow pull request builds alter affect bitrise builds. if absolutely change it, need use run_if expression app’s bitrise.yml file. read run_if expressions: enabling or disabling a step conditionally . you example build cache configurations\/guides build-cache discuss page . " });
this.add({id:450, 
title:"Including files and folders in the build cache", 
body:" including files folders build cache as mentioned before, file folder specified bitrise.io cache:push step’s cache paths input gets cached, unless step configured ignore certain folders files. in cases, don’t change input. if use steps in-built caching function, worry specifying files specific case. to check step caching function, look inputs. if there’s input turn off, question doesn’t function. to include files steps caching function: in workflow, open bitrise.io cache:push step. find cache paths input. add path paths files folders want include cache. you use absolute path, relative root repository. " });
this.add({id:451, 
title:"Ignoring files and dependencies", 
body:" ignoring files dependencies you tell bitrise.io cache:push step specifically ignore certain content. ignoring means things: a file folder isn’t checked changes: specified path included previous cache archive, new with content before. a file folder completely excluded: words, isn’t uploaded cache all, regardless changes. you choose option any files folders. to ignore certain files folders: in workflow, open bitrise.io cache:push step. find ignore paths change check input. add path paths files folders want ignore. you use absolute path, relative root repository. if want completely exclude given path cache archive, prefix with ! . for example, !my\/path\/ . if want exclude given path change checking, just add any prefix. located inside ignored cache item not prefixed with ! , path included cache archive, checked changes. for example, add my\/path\/ input, path directory included archive checked changes. you can, course, specify certain patterns paths, too. for example: replacing path element with * : a\/*\/b : match a\/x\/b replacing path with ** : a\/**\/b match a\/x\/y\/z\/b ignoring entire directory with \/ . for example, \/my\/full\/path\/ ignores path folder. ignoring paths you can’t ignore path results invalid cache item. for example, specify a\/path\/to\/cache path cached, can’t ignore a\/path\/to , ignore file wouldn’t check changes, fingerprint generated a\/path\/to\/cache . this won’t fail step: you’ll simply receive following warning: no path cache, skip caching... you can, however, ignore paths inside cache path. for example, path a\/path\/to\/cache , ignore a\/path\/to\/cache\/.ignore-me , unless that’s file inside a\/path\/to\/cache . " });
this.add({id:452, 
title:"Downloading or deleting the build cache", 
body:" downloading deleting build cache you download delete build caches branch generated cache. check size time given cache was used. deleting single branch's cache if want delete cache related single branch, default branch’s too! this build runs branch doesn’t cache, the  bitrise.io cache:pull   step cache default branch. to manage build caches: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . find the  manage build caches  section. select branch-based (legacy) caching tab. you see cache archives pop-up window. download delete any archives, them. " });
this.add({id:453, 
title:"Caching Cocoapods", 
body:" caching cocoapods you cache cocoapods content putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . before start, make sure latest version cocoapods install step workflow. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . insert bitrise.io cache:pull step git clone cocoapods install steps. step version cache:pull make sure step version 1.0.0 newer. with older versions, manually specify paths caching. insert bitrise.io cache:push step end workflow. and do! if wish use earlier version cache steps, information . " });
this.add({id:454, 
title:"Caching Gradle", 
body:" caching gradle you cache gradle content putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . before start, make sure latest version android build step workflow. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . insert cache:pull step git clone android build steps. step version cache:pull make sure step version 1.0.0 newer. with older versions, manually specify paths caching. insert cache:push step end workflow. and you’re done! " });
this.add({id:455, 
title:"Caching Maven", 
body:" caching maven you cache maven content putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . insert cache:pull step git clone android build steps. step version cache:pull make sure step version 1.0.0 newer. with older versions, manually specify paths caching. insert bitrise.io cache:push step end workflow. in cache paths input step, enter $home\/.m2 . and you’re done! " });
this.add({id:456, 
title:"Caching Ruby Gems", 
body:" caching ruby gems you cache ruby gems putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . ruby gems cached default bitrise.io virtual machines. installed location depending current rbenv version. the version checked running rbenv version . you location directory with gem environment gemdir . however, cache directory rbenv sets link ruby version specific gems: directory - example, \/users\/vagrant\/.rbenv\/versions\/2.5.3 - cached. it recommended set value $gem_home enviroment variable, result installed gems found. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . add script step workflow. set $gem_cache_path environment variable script step. - script:\n title: set gem_cache_path env var\n inputs:\n content: |-\n #!\/bin\/bash\n set -ex\n rbenv_dir=\"`cd $(rbenv ruby)\/..\/..;pwd`\"\n echo \"gem cache directory: $rbenv_dir\"\n envman add --key --value $rbenv_dir insert cache:pull step git clone android build steps. insert cache:push step end workflow. open input cache paths step cache:push add $gem_cache_path new line additional cache dir. and you’re done! " });
this.add({id:457, 
title:"Caching Homebrew installers", 
body:" caching homebrew installers to enable caching homebrew installers, set cache input yes brew install step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . the brew install step supports caching: option enabled, any downloaded brew installers cached location brew --cache . the cache path ~\/library\/caches\/homebrew\/ . to enable caching brew installers: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . add select (if it's workflow) brew install step. set cache option yes . as always, click save . " });
this.add({id:449, 
title:"Using branch-based caching in your builds", 
body:" using branch-based caching builds you use dedicated bitrise steps caching: bitrise.io cache pull tap cache contents build, push store information build cache. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . the basics using cache builds simple work box, depending workflows: just use dedicated steps. add bitrise.io cache:pull step right need cache. for example, case ios app, insert bitrise.io cache:pull step git clone repository dependency installer steps (such run cocoapods install carthage steps). you bitrise.io cache:pull step before git clone repository step. build cache expiry the build cache, related specific branch, expires seven days means automatically deleted - there’s new branch meantime. this builds frequently than week, cache won’t deleted. if don’t start days, deleted, run like first. add bitrise.io cache:push step workflow. for simple use cases, that’s it, do. these steps work box alongside with caching function. but wish learn create configuration, read on! pull request builds by default, run build triggered pull request, bitrise.io cache:push step won’t work: case, pull request build read cache can’t update it! we strongly recommend change this! from security perspective, best practice allow pull request builds alter affect bitrise builds. if absolutely change it, need use run_if expression app’s bitrise.yml file. read run_if expressions: enabling or disabling a step conditionally . you example build cache configurations\/guides build-cache discuss page . " });
this.add({id:450, 
title:"Including files and folders in the build cache", 
body:" including files folders build cache as mentioned before, file folder specified bitrise.io cache:push step’s cache paths input gets cached, unless step configured ignore certain folders files. in cases, don’t change input. if use steps in-built caching function, worry specifying files specific case. to check step caching function, look inputs. if there’s input turn off, question doesn’t function. to include files steps caching function: in workflow, open bitrise.io cache:push step. find cache paths input. add path paths files folders want include cache. you use absolute path, relative root repository. " });
this.add({id:451, 
title:"Ignoring files and dependencies", 
body:" ignoring files dependencies you tell bitrise.io cache:push step specifically ignore certain content. ignoring means things: a file folder isn’t checked changes: specified path included previous cache archive, new with content before. a file folder completely excluded: words, isn’t uploaded cache all, regardless changes. you choose option any files folders. to ignore certain files folders: in workflow, open bitrise.io cache:push step. find ignore paths change check input. add path paths files folders want ignore. you use absolute path, relative root repository. if want completely exclude given path cache archive, prefix with ! . for example, !my\/path\/ . if want exclude given path change checking, just add any prefix. located inside ignored cache item not prefixed with ! , path included cache archive, checked changes. for example, add my\/path\/ input, path directory included archive checked changes. you can, course, specify certain patterns paths, too. for example: replacing path element with * : a\/*\/b : match a\/x\/b replacing path with ** : a\/**\/b match a\/x\/y\/z\/b ignoring entire directory with \/ . for example, \/my\/full\/path\/ ignores path folder. ignoring paths you can’t ignore path results invalid cache item. for example, specify a\/path\/to\/cache path cached, can’t ignore a\/path\/to , ignore file wouldn’t check changes, fingerprint generated a\/path\/to\/cache . this won’t fail step: you’ll simply receive following warning: no path cache, skip caching... you can, however, ignore paths inside cache path. for example, path a\/path\/to\/cache , ignore a\/path\/to\/cache\/.ignore-me , unless that’s file inside a\/path\/to\/cache . " });
this.add({id:452, 
title:"Downloading or deleting the build cache", 
body:" downloading deleting build cache you download delete build caches branch generated cache. check size time given cache was used. deleting single branch's cache if want delete cache related single branch, default branch’s too! this build runs branch doesn’t cache, the  bitrise.io cache:pull   step cache default branch. to manage build caches: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . find the  manage build caches  section. select branch-based (legacy) caching tab. you see cache archives pop-up window. download delete any archives, them. " });
this.add({id:450, 
title:"Including files and folders in the build cache", 
body:" including files folders build cache as mentioned before, file folder specified bitrise.io cache:push step’s cache paths input gets cached, unless step configured ignore certain folders files. in cases, don’t change input. if use steps in-built caching function, worry specifying files specific case. to check step caching function, look inputs. if there’s input turn off, question doesn’t function. to include files steps caching function: in workflow, open bitrise.io cache:push step. find cache paths input. add path paths files folders want include cache. you use absolute path, relative root repository. " });
this.add({id:451, 
title:"Ignoring files and dependencies", 
body:" ignoring files dependencies you tell bitrise.io cache:push step specifically ignore certain content. ignoring means things: a file folder isn’t checked changes: specified path included previous cache archive, new with content before. a file folder completely excluded: words, isn’t uploaded cache all, regardless changes. you choose option any files folders. to ignore certain files folders: in workflow, open bitrise.io cache:push step. find ignore paths change check input. add path paths files folders want ignore. you use absolute path, relative root repository. if want completely exclude given path cache archive, prefix with ! . for example, !my\/path\/ . if want exclude given path change checking, just add any prefix. located inside ignored cache item not prefixed with ! , path included cache archive, checked changes. for example, add my\/path\/ input, path directory included archive checked changes. you can, course, specify certain patterns paths, too. for example: replacing path element with * : a\/*\/b : match a\/x\/b replacing path with ** : a\/**\/b match a\/x\/y\/z\/b ignoring entire directory with \/ . for example, \/my\/full\/path\/ ignores path folder. ignoring paths you can’t ignore path results invalid cache item. for example, specify a\/path\/to\/cache path cached, can’t ignore a\/path\/to , ignore file wouldn’t check changes, fingerprint generated a\/path\/to\/cache . this won’t fail step: you’ll simply receive following warning: no path cache, skip caching... you can, however, ignore paths inside cache path. for example, path a\/path\/to\/cache , ignore a\/path\/to\/cache\/.ignore-me , unless that’s file inside a\/path\/to\/cache . " });
this.add({id:452, 
title:"Downloading or deleting the build cache", 
body:" downloading deleting build cache you download delete build caches branch generated cache. check size time given cache was used. deleting single branch's cache if want delete cache related single branch, default branch’s too! this build runs branch doesn’t cache, the  bitrise.io cache:pull   step cache default branch. to manage build caches: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . find the  manage build caches  section. select branch-based (legacy) caching tab. you see cache archives pop-up window. download delete any archives, them. " });
this.add({id:453, 
title:"Caching Cocoapods", 
body:" caching cocoapods you cache cocoapods content putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . before start, make sure latest version cocoapods install step workflow. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . insert bitrise.io cache:pull step git clone cocoapods install steps. step version cache:pull make sure step version 1.0.0 newer. with older versions, manually specify paths caching. insert bitrise.io cache:push step end workflow. and do! if wish use earlier version cache steps, information . " });
this.add({id:454, 
title:"Caching Gradle", 
body:" caching gradle you cache gradle content putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . before start, make sure latest version android build step workflow. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . insert cache:pull step git clone android build steps. step version cache:pull make sure step version 1.0.0 newer. with older versions, manually specify paths caching. insert cache:push step end workflow. and you’re done! " });
this.add({id:455, 
title:"Caching Maven", 
body:" caching maven you cache maven content putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . insert cache:pull step git clone android build steps. step version cache:pull make sure step version 1.0.0 newer. with older versions, manually specify paths caching. insert bitrise.io cache:push step end workflow. in cache paths input step, enter $home\/.m2 . and you’re done! " });
this.add({id:456, 
title:"Caching Ruby Gems", 
body:" caching ruby gems you cache ruby gems putting bitrise.io cache:push step end workflow. to later use cached data, cache:pull git clone step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . ruby gems cached default bitrise.io virtual machines. installed location depending current rbenv version. the version checked running rbenv version . you location directory with gem environment gemdir . however, cache directory rbenv sets link ruby version specific gems: directory - example, \/users\/vagrant\/.rbenv\/versions\/2.5.3 - cached. it recommended set value $gem_home enviroment variable, result installed gems found. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . add script step workflow. set $gem_cache_path environment variable script step. - script:\n title: set gem_cache_path env var\n inputs:\n content: |-\n #!\/bin\/bash\n set -ex\n rbenv_dir=\"`cd $(rbenv ruby)\/..\/..;pwd`\"\n echo \"gem cache directory: $rbenv_dir\"\n envman add --key --value $rbenv_dir insert cache:pull step git clone android build steps. insert cache:push step end workflow. open input cache paths step cache:push add $gem_cache_path new line additional cache dir. and you’re done! " });
this.add({id:457, 
title:"Caching Homebrew installers", 
body:" caching homebrew installers to enable caching homebrew installers, set cache input yes brew install step. branch-based caching vs key-based this guide legacy, branch-based caching. for key-based caching, check in-depth guide: key-based caching . you read dedicated key-based caching steps here: dedicated caching steps for dependency managers . the brew install step supports caching: option enabled, any downloaded brew installers cached location brew --cache . the cache path ~\/library\/caches\/homebrew\/ . to enable caching brew installers: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . add select (if it's workflow) brew install step. set cache option yes . as always, click save . " });
this.add({id:458, 
title:"Managing build files", 
body:" managing build files using deploy bitrise.io step, deploy files generated build bitrise.io. you upload code signing files. view uploaded apps & artifacts tab page. managing files bitrise allows upload use builds. you required purposes code signing. builds produce outputs. you can: upload files generic file storage. use uploaded files builds. use encrypted files builds. using deploy bitrise.io step, deploy files generated build bitrise.io. you view artifacts tab build page. in addition, check build's generated installable artifacts (installable binaries, ipa apk\/aab) files artifacts page app . the page shows generated binaries past builds view details file, including qr code link public install page, allow users app devices. you upload android ios code signing files. read android code signing ios code signing detailed guides. " });
this.add({id:459, 
title:"Uploading files for your builds", 
body:" uploading files builds if build requires any files make work, upload code signing tab workflow editor. if build requires any files make work, upload bitrise app settings page. it accepts any file type, need provide unique id upload file. once file uploaded, stored environment variable (env var) . you use env var access file builds. the be: downloaded admin owner role app’s team bitrise. you prevent this: protecting your uploaded files exposed pull request builds. file restrictions there certain restrictions upload size number files: you can't upload file bigger than 5 mb. you store total 5 different files time. if want upload more, need delete storage. to upload file: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select files . click add file . in dialog box, enter unique id file storage id input field. the unique id generated download url bitrise stores environment variable . upload file. you options: click select file upload section select file computer. drag drop file select file upload section. remember file size exceed 5 mb. " });
this.add({id:460, 
title:"Protecting your uploaded files", 
body:" protecting uploaded files once uploaded file bitrise, set files protected mode. this means download reveal account builds use them. bitrise handle environment variable attached secret . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select files . click horizontal ellipsis button file, select make protected . click make protected dialog box. " });
this.add({id:461, 
title:"Using files in your builds", 
body:" using files builds to use file builds, download using step like file downloader workflow, file's automatically generated env var input. there multiple ways use files bitrise builds. most steps generate files store filepath output environment variable (env var). subsequent workflow re-use env var access file. you upload file generic file storage use automatically generated env var step input value steps accept urls input. you upload file generic file storage use steps (for example, file downloader step) download file build. this works with steps require local paths support urls directly input value. " });
this.add({id:462, 
title:"Downloading a file using the File Downloader Step", 
body:" downloading file using file downloader step one ways access file build using file downloader step. this step useful need use file input accepts local paths value. the step downloads file location specify, subsequent access location. workflow editor bitrise.yml open workflow editor . add file downloader step workflow. in download source url input, add location file found. finding download url uploaded file if uploaded file bitrise , download url files section app settings page. in download destination path input, specify path want download file. it relative root repository. using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. click save right corner. open app's bitrise.yml file. add file-downloader step workflow. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n in source input, add location file found. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n source: \"$bitriseio_bitrise_test_url\"\n in destination input, specify path want download file. it relative root repository. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n destination: \"\/\"\n source: \"$bitriseio_bitrise_test_url\"\n deploy-to-bitrise-io: {} using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. " });
this.add({id:463, 
title:"Downloading a file using a custom Script Step", 
body:" downloading file using custom script step if don't want use file downloader step download access uploaded file build, use custom script well. all need url specifying path exists build machine. workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step workflow. find script content input step. add script download file store destination path env var. uploading file bitrise if upload file bitrise , use file's download url script. in example below, download url stored bitrise_io_my_file_id_url env var. we're using envman store destination path bitriseio_my_file_local_path env var. subsequent steps use var access file. #!\/bin\/bash\nset -ex\n\n# specify local download path\nexport file_local_path=download\/path\/to\/my\/file\n\n# file\nwget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\necho \"file downloaded to: $file_local_path\"\n\n# optionally: export file's path, able use subsequent steps input value\nenvman add --key bitriseio_my_file_local_path --value alternatively, example, set location app env var and simply download path instead defining inside script step. open bitrise.yml file app. add script step workflow. my-workflow:\n steps:\n script:\n inputs:\n - content: in content input, add script download file store destination path env var. uploading file bitrise if upload file bitrise , use file's download url script. in example below, download url stored bitrise_io_my_file_id_url env var. we're using envman store destination path bitriseio_my_file_local_path env var. subsequent steps use var access file. my-workflow:\n steps:\n - script:\n inputs:\n content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n file\n wget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\n echo \"file downloaded to: $file_local_path\"\n alternatively, example, set location app env var and simply download path instead defining inside script step. optionally, export file's local path so use subsequent steps workflow. my-workflow:\n steps:\n - script:\n inputs:\n content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n file\n wget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\n echo \"file downloaded to: $file_local_path\"\n\n file path subsequent steps\n envman add --key bitriseio_my_file_local_path --value " });
this.add({id:464, 
title:"Using encrypted files in your builds", 
body:" using encrypted files builds you use encrypted files bitrise, easily. after encrypting file computer, upload generic file storage decrypt file step custom decrypting solution decrypt need it. you use encrypted files bitrise, easily securely. all need encrypt file computer, upload generic file storage use decrypt file step custom decrypting solution decrypt need it. gpg encryption please note decrypt file step decrypts files encrypted with gpg. if use encryption software, able decrypt using step. you can, course, set decryption solution script step. " });
this.add({id:465, 
title:"Encrypting your files", 
body:" encrypting files in example, we’ll use pwgen password generator tool gpg encryption software encrypt file. open terminal\/command line. create 32 character passphrase encryption. keep passphrase you need passphrase decrypt file bitrise. pwgen -s 32 1 encrypt file. in example, file called my_secret_file . gpg -c my_secret_file optionally, encrypt file(s) non-interactive way. gpg --batch --passphrase <passphrase> -c my_secret_file " });
this.add({id:466, 
title:"Decrypting and downloading your files during a build", 
body:" decrypting downloading files build after successfully encrypted file, need upload bitrise able decrypt build. in procedure, we'll use decrypt file step decrypt file. gpg encryption please note decrypt file step decrypts files encrypted with gpg. if use encryption software, able decrypt using step. you can, course, set decryption solution script step. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab, add decryption passphrase secret . upload file bitrise copy environment variable (env var) uploaded file. this env var stores download url go workflows tab. open workflow editor . add decrypt file step workflow. paste env var file encrypted file path input. in output file path input, specify path want place decrypted file. subsequent steps able access file path. using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. a bitrise.yml example decrypting files ---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: macos\nworkflows:\n secret:\n steps:\n - activate-ssh-key@4: {}\n git-clone@6: decrypt-file@0:\n inputs:\n encrypted_file_path: \".\/secret.txt.gpg\"\n output_file_path: \".\/secret\/\"\n decrypt_passphrase: \"$password_for_encrypt\"\n deploy-to-bitrise-io@2: {} " });
this.add({id:467, 
title:"Build artifacts online", 
body:" build artifacts online a build bitrise does produce artifacts: example, test reports, images, executable binaries. if select app, artifacts tab, check artifacts generated build. build artifacts any files generated bitrise build: test results, screenshots, executable binaries, so on. you view build places: on artifacts tab build's page. here view artifacts. the artifacts page main app. here see installable binaries. there limitation number files deployed artifacts tab build. there limitation, however, file size 2gb file. artifact retention 365 days artifacts older than 365 days permanently deleted. " });
this.add({id:468, 
title:"The Installable artifacts page", 
body:" the installable artifacts page on installable artifacts page, can: view installable binaries past builds. download installable artifacts. check details page artifacts. this include public install page . to page, log bitrise, select workspace owns app, open bitrise ci . select app see artifacts left. you filter installable artifacts using different filters: platform binary (ios android). the timeframe build generated it. the workflow build ran on. the branch repository was built. " });
this.add({id:469, 
title:"Artifact details", 
body:" artifact details you check details any installable artifact (a binary, ipa apk\/aab file) generated bitrise build. the potentially include: the exact filename. the version binary. metadata time creation file size. a qr code installation. a link public install page enabled. to details page, open artifacts page select file installable artifacts list. on details page itself, important thing install app mobile device. this particularly useful testing purposes. you options: a qr code: scan install binary. a link public install page. note you're trying install ios app device, device registered apple developer portal. you see available devices who install app? section. " });
this.add({id:470, 
title:"Deploying files into artifacts", 
body:" deploying files artifacts artifacts deployed artifacts section build’s page with help deploy bitrise.io step. it deploys files generated build stores $bitrise_deploy_dir directory. to deploy artifacts, insert deploy bitrise.io step after step(s) generate artifacts better deploy bitrise.io step end workflow. put step right place add deploy bitrise.io step right place. if insert steps generate files build, deploy bitrise.io deploy. note content any sub-directories deploy directory displayed artifacts section build. you can, however, compress artifacts zip file modify default false value true compress artifacts file field deploy bitrise.io step. this compress directory with sub-directories deploy artifacts . " });
this.add({id:471, 
title:"Modifying the target directory path", 
body:" modifying target directory path you modify target directory path make sure reference paths steps workflow ensure generated files collected directory. " });
this.add({id:472, 
title:"Viewing artifacts if your build has failed", 
body:" viewing artifacts build failed with run previous step failed toggle enabled, access build artifacts - successfully generated failed. for example, detect bugs failed looking test report files. " });
this.add({id:473, 
title:"Who can access build artifacts?", 
body:" who access build artifacts? the artifacts artifacts accessible owner, admin, developer, tester\/qa app. besides roles, default config enable public page app feature, receives url, able access app artifacts. " });
this.add({id:459, 
title:"Uploading files for your builds", 
body:" uploading files builds if build requires any files make work, upload code signing tab workflow editor. if build requires any files make work, upload bitrise app settings page. it accepts any file type, need provide unique id upload file. once file uploaded, stored environment variable (env var) . you use env var access file builds. the be: downloaded admin owner role app’s team bitrise. you prevent this: protecting your uploaded files exposed pull request builds. file restrictions there certain restrictions upload size number files: you can't upload file bigger than 5 mb. you store total 5 different files time. if want upload more, need delete storage. to upload file: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select files . click add file . in dialog box, enter unique id file storage id input field. the unique id generated download url bitrise stores environment variable . upload file. you options: click select file upload section select file computer. drag drop file select file upload section. remember file size exceed 5 mb. " });
this.add({id:460, 
title:"Protecting your uploaded files", 
body:" protecting uploaded files once uploaded file bitrise, set files protected mode. this means download reveal account builds use them. bitrise handle environment variable attached secret . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select files . click horizontal ellipsis button file, select make protected . click make protected dialog box. " });
this.add({id:460, 
title:"Protecting your uploaded files", 
body:" protecting uploaded files once uploaded file bitrise, set files protected mode. this means download reveal account builds use them. bitrise handle environment variable attached secret . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select files . click horizontal ellipsis button file, select make protected . click make protected dialog box. " });
this.add({id:461, 
title:"Using files in your builds", 
body:" using files builds to use file builds, download using step like file downloader workflow, file's automatically generated env var input. there multiple ways use files bitrise builds. most steps generate files store filepath output environment variable (env var). subsequent workflow re-use env var access file. you upload file generic file storage use automatically generated env var step input value steps accept urls input. you upload file generic file storage use steps (for example, file downloader step) download file build. this works with steps require local paths support urls directly input value. " });
this.add({id:462, 
title:"Downloading a file using the File Downloader Step", 
body:" downloading file using file downloader step one ways access file build using file downloader step. this step useful need use file input accepts local paths value. the step downloads file location specify, subsequent access location. workflow editor bitrise.yml open workflow editor . add file downloader step workflow. in download source url input, add location file found. finding download url uploaded file if uploaded file bitrise , download url files section app settings page. in download destination path input, specify path want download file. it relative root repository. using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. click save right corner. open app's bitrise.yml file. add file-downloader step workflow. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n in source input, add location file found. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n source: \"$bitriseio_bitrise_test_url\"\n in destination input, specify path want download file. it relative root repository. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n destination: \"\/\"\n source: \"$bitriseio_bitrise_test_url\"\n deploy-to-bitrise-io: {} using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. " });
this.add({id:463, 
title:"Downloading a file using a custom Script Step", 
body:" downloading file using custom script step if don't want use file downloader step download access uploaded file build, use custom script well. all need url specifying path exists build machine. workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step workflow. find script content input step. add script download file store destination path env var. uploading file bitrise if upload file bitrise , use file's download url script. in example below, download url stored bitrise_io_my_file_id_url env var. we're using envman store destination path bitriseio_my_file_local_path env var. subsequent steps use var access file. #!\/bin\/bash\nset -ex\n\n# specify local download path\nexport file_local_path=download\/path\/to\/my\/file\n\n# file\nwget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\necho \"file downloaded to: $file_local_path\"\n\n# optionally: export file's path, able use subsequent steps input value\nenvman add --key bitriseio_my_file_local_path --value alternatively, example, set location app env var and simply download path instead defining inside script step. open bitrise.yml file app. add script step workflow. my-workflow:\n steps:\n script:\n inputs:\n - content: in content input, add script download file store destination path env var. uploading file bitrise if upload file bitrise , use file's download url script. in example below, download url stored bitrise_io_my_file_id_url env var. we're using envman store destination path bitriseio_my_file_local_path env var. subsequent steps use var access file. my-workflow:\n steps:\n - script:\n inputs:\n content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n file\n wget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\n echo \"file downloaded to: $file_local_path\"\n alternatively, example, set location app env var and simply download path instead defining inside script step. optionally, export file's local path so use subsequent steps workflow. my-workflow:\n steps:\n - script:\n inputs:\n content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n file\n wget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\n echo \"file downloaded to: $file_local_path\"\n\n file path subsequent steps\n envman add --key bitriseio_my_file_local_path --value " });
this.add({id:462, 
title:"Downloading a file using the File Downloader Step", 
body:" downloading file using file downloader step one ways access file build using file downloader step. this step useful need use file input accepts local paths value. the step downloads file location specify, subsequent access location. workflow editor bitrise.yml open workflow editor . add file downloader step workflow. in download source url input, add location file found. finding download url uploaded file if uploaded file bitrise , download url files section app settings page. in download destination path input, specify path want download file. it relative root repository. using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. click save right corner. open app's bitrise.yml file. add file-downloader step workflow. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n in source input, add location file found. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n source: \"$bitriseio_bitrise_test_url\"\n in destination input, specify path want download file. it relative root repository. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n git-clone: file-downloader:\n inputs:\n destination: \"\/\"\n source: \"$bitriseio_bitrise_test_url\"\n deploy-to-bitrise-io: {} using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. " });
this.add({id:463, 
title:"Downloading a file using a custom Script Step", 
body:" downloading file using custom script step if don't want use file downloader step download access uploaded file build, use custom script well. all need url specifying path exists build machine. workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add script step workflow. find script content input step. add script download file store destination path env var. uploading file bitrise if upload file bitrise , use file's download url script. in example below, download url stored bitrise_io_my_file_id_url env var. we're using envman store destination path bitriseio_my_file_local_path env var. subsequent steps use var access file. #!\/bin\/bash\nset -ex\n\n# specify local download path\nexport file_local_path=download\/path\/to\/my\/file\n\n# file\nwget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\necho \"file downloaded to: $file_local_path\"\n\n# optionally: export file's path, able use subsequent steps input value\nenvman add --key bitriseio_my_file_local_path --value alternatively, example, set location app env var and simply download path instead defining inside script step. open bitrise.yml file app. add script step workflow. my-workflow:\n steps:\n script:\n inputs:\n - content: in content input, add script download file store destination path env var. uploading file bitrise if upload file bitrise , use file's download url script. in example below, download url stored bitrise_io_my_file_id_url env var. we're using envman store destination path bitriseio_my_file_local_path env var. subsequent steps use var access file. my-workflow:\n steps:\n - script:\n inputs:\n content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n file\n wget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\n echo \"file downloaded to: $file_local_path\"\n alternatively, example, set location app env var and simply download path instead defining inside script step. optionally, export file's local path so use subsequent steps workflow. my-workflow:\n steps:\n - script:\n inputs:\n content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n file\n wget -o \"$file_local_path\" \"$bitriseio_my_file_id_url\"\n echo \"file downloaded to: $file_local_path\"\n\n file path subsequent steps\n envman add --key bitriseio_my_file_local_path --value " });
this.add({id:464, 
title:"Using encrypted files in your builds", 
body:" using encrypted files builds you use encrypted files bitrise, easily. after encrypting file computer, upload generic file storage decrypt file step custom decrypting solution decrypt need it. you use encrypted files bitrise, easily securely. all need encrypt file computer, upload generic file storage use decrypt file step custom decrypting solution decrypt need it. gpg encryption please note decrypt file step decrypts files encrypted with gpg. if use encryption software, able decrypt using step. you can, course, set decryption solution script step. " });
this.add({id:465, 
title:"Encrypting your files", 
body:" encrypting files in example, we’ll use pwgen password generator tool gpg encryption software encrypt file. open terminal\/command line. create 32 character passphrase encryption. keep passphrase you need passphrase decrypt file bitrise. pwgen -s 32 1 encrypt file. in example, file called my_secret_file . gpg -c my_secret_file optionally, encrypt file(s) non-interactive way. gpg --batch --passphrase <passphrase> -c my_secret_file " });
this.add({id:466, 
title:"Decrypting and downloading your files during a build", 
body:" decrypting downloading files build after successfully encrypted file, need upload bitrise able decrypt build. in procedure, we'll use decrypt file step decrypt file. gpg encryption please note decrypt file step decrypts files encrypted with gpg. if use encryption software, able decrypt using step. you can, course, set decryption solution script step. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab, add decryption passphrase secret . upload file bitrise copy environment variable (env var) uploaded file. this env var stores download url go workflows tab. open workflow editor . add decrypt file step workflow. paste env var file encrypted file path input. in output file path input, specify path want place decrypted file. subsequent steps able access file path. using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. a bitrise.yml example decrypting files ---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: macos\nworkflows:\n secret:\n steps:\n - activate-ssh-key@4: {}\n git-clone@6: decrypt-file@0:\n inputs:\n encrypted_file_path: \".\/secret.txt.gpg\"\n output_file_path: \".\/secret\/\"\n decrypt_passphrase: \"$password_for_encrypt\"\n deploy-to-bitrise-io@2: {} " });
this.add({id:465, 
title:"Encrypting your files", 
body:" encrypting files in example, we’ll use pwgen password generator tool gpg encryption software encrypt file. open terminal\/command line. create 32 character passphrase encryption. keep passphrase you need passphrase decrypt file bitrise. pwgen -s 32 1 encrypt file. in example, file called my_secret_file . gpg -c my_secret_file optionally, encrypt file(s) non-interactive way. gpg --batch --passphrase <passphrase> -c my_secret_file " });
this.add({id:466, 
title:"Decrypting and downloading your files during a build", 
body:" decrypting downloading files build after successfully encrypted file, need upload bitrise able decrypt build. in procedure, we'll use decrypt file step decrypt file. gpg encryption please note decrypt file step decrypts files encrypted with gpg. if use encryption software, able decrypt using step. you can, course, set decryption solution script step. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab, add decryption passphrase secret . upload file bitrise copy environment variable (env var) uploaded file. this env var stores download url go workflows tab. open workflow editor . add decrypt file step workflow. paste env var file encrypted file path input. in output file path input, specify path want place decrypted file. subsequent steps able access file path. using env var input value you store filepath app env var instead specifying directly input. that way refer file steps, won’t specify path time. for example, store path bitriseio_my_file_local_path env var, use path input, access file subsequent step. a bitrise.yml example decrypting files ---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: macos\nworkflows:\n secret:\n steps:\n - activate-ssh-key@4: {}\n git-clone@6: decrypt-file@0:\n inputs:\n encrypted_file_path: \".\/secret.txt.gpg\"\n output_file_path: \".\/secret\/\"\n decrypt_passphrase: \"$password_for_encrypt\"\n deploy-to-bitrise-io@2: {} " });
this.add({id:467, 
title:"Build artifacts online", 
body:" build artifacts online a build bitrise does produce artifacts: example, test reports, images, executable binaries. if select app, artifacts tab, check artifacts generated build. build artifacts any files generated bitrise build: test results, screenshots, executable binaries, so on. you view build places: on artifacts tab build's page. here view artifacts. the artifacts page main app. here see installable binaries. there limitation number files deployed artifacts tab build. there limitation, however, file size 2gb file. artifact retention 365 days artifacts older than 365 days permanently deleted. " });
this.add({id:468, 
title:"The Installable artifacts page", 
body:" the installable artifacts page on installable artifacts page, can: view installable binaries past builds. download installable artifacts. check details page artifacts. this include public install page . to page, log bitrise, select workspace owns app, open bitrise ci . select app see artifacts left. you filter installable artifacts using different filters: platform binary (ios android). the timeframe build generated it. the workflow build ran on. the branch repository was built. " });
this.add({id:469, 
title:"Artifact details", 
body:" artifact details you check details any installable artifact (a binary, ipa apk\/aab file) generated bitrise build. the potentially include: the exact filename. the version binary. metadata time creation file size. a qr code installation. a link public install page enabled. to details page, open artifacts page select file installable artifacts list. on details page itself, important thing install app mobile device. this particularly useful testing purposes. you options: a qr code: scan install binary. a link public install page. note you're trying install ios app device, device registered apple developer portal. you see available devices who install app? section. " });
this.add({id:470, 
title:"Deploying files into artifacts", 
body:" deploying files artifacts artifacts deployed artifacts section build’s page with help deploy bitrise.io step. it deploys files generated build stores $bitrise_deploy_dir directory. to deploy artifacts, insert deploy bitrise.io step after step(s) generate artifacts better deploy bitrise.io step end workflow. put step right place add deploy bitrise.io step right place. if insert steps generate files build, deploy bitrise.io deploy. note content any sub-directories deploy directory displayed artifacts section build. you can, however, compress artifacts zip file modify default false value true compress artifacts file field deploy bitrise.io step. this compress directory with sub-directories deploy artifacts . " });
this.add({id:471, 
title:"Modifying the target directory path", 
body:" modifying target directory path you modify target directory path make sure reference paths steps workflow ensure generated files collected directory. " });
this.add({id:472, 
title:"Viewing artifacts if your build has failed", 
body:" viewing artifacts build failed with run previous step failed toggle enabled, access build artifacts - successfully generated failed. for example, detect bugs failed looking test report files. " });
this.add({id:473, 
title:"Who can access build artifacts?", 
body:" who access build artifacts? the artifacts artifacts accessible owner, admin, developer, tester\/qa app. besides roles, default config enable public page app feature, receives url, able access app artifacts. " });
this.add({id:468, 
title:"The Installable artifacts page", 
body:" the installable artifacts page on installable artifacts page, can: view installable binaries past builds. download installable artifacts. check details page artifacts. this include public install page . to page, log bitrise, select workspace owns app, open bitrise ci . select app see artifacts left. you filter installable artifacts using different filters: platform binary (ios android). the timeframe build generated it. the workflow build ran on. the branch repository was built. " });
this.add({id:469, 
title:"Artifact details", 
body:" artifact details you check details any installable artifact (a binary, ipa apk\/aab file) generated bitrise build. the potentially include: the exact filename. the version binary. metadata time creation file size. a qr code installation. a link public install page enabled. to details page, open artifacts page select file installable artifacts list. on details page itself, important thing install app mobile device. this particularly useful testing purposes. you options: a qr code: scan install binary. a link public install page. note you're trying install ios app device, device registered apple developer portal. you see available devices who install app? section. " });
this.add({id:470, 
title:"Deploying files into artifacts", 
body:" deploying files artifacts artifacts deployed artifacts section build’s page with help deploy bitrise.io step. it deploys files generated build stores $bitrise_deploy_dir directory. to deploy artifacts, insert deploy bitrise.io step after step(s) generate artifacts better deploy bitrise.io step end workflow. put step right place add deploy bitrise.io step right place. if insert steps generate files build, deploy bitrise.io deploy. note content any sub-directories deploy directory displayed artifacts section build. you can, however, compress artifacts zip file modify default false value true compress artifacts file field deploy bitrise.io step. this compress directory with sub-directories deploy artifacts . " });
this.add({id:471, 
title:"Modifying the target directory path", 
body:" modifying target directory path you modify target directory path make sure reference paths steps workflow ensure generated files collected directory. " });
this.add({id:472, 
title:"Viewing artifacts if your build has failed", 
body:" viewing artifacts build failed with run previous step failed toggle enabled, access build artifacts - successfully generated failed. for example, detect bugs failed looking test report files. " });
this.add({id:473, 
title:"Who can access build artifacts?", 
body:" who access build artifacts? the artifacts artifacts accessible owner, admin, developer, tester\/qa app. besides roles, default config enable public page app feature, receives url, able access app artifacts. " });
this.add({id:474, 
title:"Environment Variables", 
body:" environment variables an environment variable (env var) key-value pair holds data use builds inserting step inputs. an environment variable (env var) key-value pair holds data use builds inserting step inputs. for example, working directory app's repository stored env var so don't specify path step input needs it. you configure env vars entire app specific workflows . app level env vars available workflow app; given workflow. size limit env var list individual vars by default, env var list size 120 kb. you easily increase using script step described knowledge base article . the default size limit env var 20 kb. you increase using script step following knowledge base article . secrets specific type environment variable: hide information encrypted format value exposed build logs. protect confidential information unlike secrets, env vars fully exposed builds triggered pull requests so add any sensitive information vars. " });
this.add({id:475, 
title:"Scope of Environment Variables", 
body:" scope environment variables users declare environment variables different levels: app level. workflow level. step level. automatically exposed environment variables in addition user-declared env vars, vars automatically exposed bitrise cli bitrise.io. these available any build. you list here: available environment variables app level env vars available build given app. whenever create new workflow, example, immediately automatically access single app level env var. a workflow level env var available specific workflow was defined in. if primary workflow env var with key test_env , deploy workflow won't able access env var. chaining workflows if chain workflows , using after_run parameter, define env var workflows, subsequent workflows chain able access var. a step level env var defined particular step build. such env var available workflows, preceding steps workflow. subsequent steps, however, access it. outputs exposed environment variables. you set environment variables, regardless level, workflow editor, app's bitrise.yml file, build with custom script using envman tool: setting an env var in the workflow editorsetting and managing env vars during a build environment variables given processing order based level: availability order of environment variables" });
this.add({id:476, 
title:"Availability order of Environment Variables", 
body:" availability order environment variables environment variables (env var) available env var processed. there env vars exposed bitrise cli. these available start: example, bitrise_source_dir bitrise_triggered_workflow_id . all env vars processed available build progresses. the processing order following: env vars exposed bitrise cli. secrets : processed workflow starts. one-off environment variables specified build api. app environment variables. workflow environment variables: processing specified starts, env vars available. if workflow workflows chained , environment variables chained workflows processed available right first step workflow run. step inputs: exposed step, right start. step outputs: exposed specific step, so available subsequent steps finishes. " });
this.add({id:477, 
title:"Setting an Env Var in the Workflow Editor", 
body:" setting env var workflow editor every env var value string the value environment variable secret string. even set number (for example, 7), passed using $ character you use $ character value env var secret (for example, password) case leave replace variables inputs? toggle inactive. if replace variable's key with value inputs, bitrise cli treat env var $ character. to set new environment variable (env var): open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select env vars navigation menu. choose level env var: scroll app environment variables section set app level env var. scroll workflow environment variables sections set env var specific workflow. click add new button chosen section. type env var key key input field value value input field. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n click save right corner. that's it. your new env var saved ready used. " });
this.add({id:478, 
title:"Setting a custom Env Var when starting a build", 
body:" setting custom env var starting build when scheduling new build starting manually, option set custom environment variables (env var). these variables available started scheduled. don't use key app env var app environment variables precedence custom variables! this means define env var with key var, build use value var. on bitrise ci page app, start build button click with clock icon it. in build configuration pop-up window, select advanced tab. find custom environment variables section. enter key value. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n press + add environment variable button. finish starting scheduling build. " });
this.add({id:479, 
title:"Using an Env Var in a Step input", 
body:" using env var step input many step inputs accept environment variables (env var) secrets input values. sensitive inputs input fields marked sensitive accept secrets input. generally, recommend changing value inputs. to use env var secret step input value: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . select step workflow. for example, git clone repository step. choose step input. for example, clone destination (local) directory path input git clone repository step. next input, click insert variable . find env var list, select it. you search env var typing key (or it) filter key search field. env vars generated steps the interactive list env vars generated previous steps workflow. for example, want insert var inputs step workflow, choose first second steps. that's it. the time run build workflow, step input use value inserted env var value. " });
this.add({id:480, 
title:"Using Env Vars in the value of an Env Var", 
body:" using env vars value var environment variables (env var) normally contain simple string value. however, possible set env var includes vars values. secrets variable values the methods described apply secrets . you embed secret env var. you can, any time, use environment variable value env var - embedding var, so speak. for example, let's say want set $bitrise_auth env var $personal_access_token env var. to this, need make sure key $bitrise_auth replaced with value so embedded env var passed workflows steps. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select env vars navigation menu. under key env var need, toggle replace variables inputs? toggle active. " });
this.add({id:481, 
title:"Setting and managing Env Vars during a build", 
body:" setting managing env vars build you set env vars build defining step, typically script step. to accomplish this, use envman tool. new env vars effect step any environment variable create with envman tool takes effect subsequent step workflow. in words, can't use newly created environment variable was created. here simple example we're using envman add new env var with key my_release_note : envman add --key my_release_note --value \"this release note\" you envman any step, including script step, script (stored repository) bitrise build. you specify value --value parameter, using pipe: echo 'hi' | envman add --key my_release_note you read value file: envman add --key my_release_note --valuefile .\/some\/file\/path once env var exposed, use like any var. you exposed vars inputs steps well. here example we’re exposing release note env var using script step send slack message step: workflows:\n example:\n steps:\n - script:\n inputs:\n content: |\n #!\/bin\/bash\n envman add --key my_release_note --value \"this release note\"\n echo \"my release note: $my_release_note\"\n slack:\n channel: ...\n webhook_url: message: \"release $my_release_note\" if want expose value env var accessible key var, so. for example, expose value bitrise_build_number key my_build_number :  envman add --key my_build_number --value \"${bitrise_build_number}\" after this, subsequent steps value bitrise_build_number my_build_number env var. if change value bitrise_build_number this, value my_build_number won’t modified, hold original value! if need know custom env var defined, easily check it, overwrite value: #!\/bin\/bash\nset -ex\nif [ ! -z \"$api_project_scheme\" ] ; then\n envman add --key project_scheme --value \"$api_project_scheme\"\nfi this script checks api_project_scheme env var defined, is, value assigned project_scheme environment variable, overwriting original value project_scheme . " });
this.add({id:482, 
title:"Setting Env Vars in the bitrise.yml", 
body:" setting env vars bitrise.yml you set env vars directly bitrise.yml configuration file app. you set app level workflow env vars app's config file. in example, configuration with app-level env var called test_key : app: \n envs: - opts: is_expand: false test_key: test value replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n in example, deploy-alpha workflow defines env var called env_type , runs workflow use env var: workflows:\n\n deploy-alpha:\n envs:\n - env_type: alpha\n after_run:\n _deploy\n\n _deploy:\n steps:\n script:\n inputs:\n content: |\n #!\/bin\/bash\n echo \"env_type: $env_type\" if run deploy-alpha workflow, set env_type env var alpha , run deploy workflow, use env var. in example, simply print value (the printed text be: env_type: alpha ). " });
this.add({id:475, 
title:"Scope of Environment Variables", 
body:" scope environment variables users declare environment variables different levels: app level. workflow level. step level. automatically exposed environment variables in addition user-declared env vars, vars automatically exposed bitrise cli bitrise.io. these available any build. you list here: available environment variables app level env vars available build given app. whenever create new workflow, example, immediately automatically access single app level env var. a workflow level env var available specific workflow was defined in. if primary workflow env var with key test_env , deploy workflow won't able access env var. chaining workflows if chain workflows , using after_run parameter, define env var workflows, subsequent workflows chain able access var. a step level env var defined particular step build. such env var available workflows, preceding steps workflow. subsequent steps, however, access it. outputs exposed environment variables. you set environment variables, regardless level, workflow editor, app's bitrise.yml file, build with custom script using envman tool: setting an env var in the workflow editorsetting and managing env vars during a build environment variables given processing order based level: availability order of environment variables" });
this.add({id:476, 
title:"Availability order of Environment Variables", 
body:" availability order environment variables environment variables (env var) available env var processed. there env vars exposed bitrise cli. these available start: example, bitrise_source_dir bitrise_triggered_workflow_id . all env vars processed available build progresses. the processing order following: env vars exposed bitrise cli. secrets : processed workflow starts. one-off environment variables specified build api. app environment variables. workflow environment variables: processing specified starts, env vars available. if workflow workflows chained , environment variables chained workflows processed available right first step workflow run. step inputs: exposed step, right start. step outputs: exposed specific step, so available subsequent steps finishes. " });
this.add({id:477, 
title:"Setting an Env Var in the Workflow Editor", 
body:" setting env var workflow editor every env var value string the value environment variable secret string. even set number (for example, 7), passed using $ character you use $ character value env var secret (for example, password) case leave replace variables inputs? toggle inactive. if replace variable's key with value inputs, bitrise cli treat env var $ character. to set new environment variable (env var): open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select env vars navigation menu. choose level env var: scroll app environment variables section set app level env var. scroll workflow environment variables sections set env var specific workflow. click add new button chosen section. type env var key key input field value value input field. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n click save right corner. that's it. your new env var saved ready used. " });
this.add({id:478, 
title:"Setting a custom Env Var when starting a build", 
body:" setting custom env var starting build when scheduling new build starting manually, option set custom environment variables (env var). these variables available started scheduled. don't use key app env var app environment variables precedence custom variables! this means define env var with key var, build use value var. on bitrise ci page app, start build button click with clock icon it. in build configuration pop-up window, select advanced tab. find custom environment variables section. enter key value. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n press + add environment variable button. finish starting scheduling build. " });
this.add({id:479, 
title:"Using an Env Var in a Step input", 
body:" using env var step input many step inputs accept environment variables (env var) secrets input values. sensitive inputs input fields marked sensitive accept secrets input. generally, recommend changing value inputs. to use env var secret step input value: open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. open workflow editor . select step workflow. for example, git clone repository step. choose step input. for example, clone destination (local) directory path input git clone repository step. next input, click insert variable . find env var list, select it. you search env var typing key (or it) filter key search field. env vars generated steps the interactive list env vars generated previous steps workflow. for example, want insert var inputs step workflow, choose first second steps. that's it. the time run build workflow, step input use value inserted env var value. " });
this.add({id:480, 
title:"Using Env Vars in the value of an Env Var", 
body:" using env vars value var environment variables (env var) normally contain simple string value. however, possible set env var includes vars values. secrets variable values the methods described apply secrets . you embed secret env var. you can, any time, use environment variable value env var - embedding var, so speak. for example, let's say want set $bitrise_auth env var $personal_access_token env var. to this, need make sure key $bitrise_auth replaced with value so embedded env var passed workflows steps. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. on left, select env vars navigation menu. under key env var need, toggle replace variables inputs? toggle active. " });
this.add({id:481, 
title:"Setting and managing Env Vars during a build", 
body:" setting managing env vars build you set env vars build defining step, typically script step. to accomplish this, use envman tool. new env vars effect step any environment variable create with envman tool takes effect subsequent step workflow. in words, can't use newly created environment variable was created. here simple example we're using envman add new env var with key my_release_note : envman add --key my_release_note --value \"this release note\" you envman any step, including script step, script (stored repository) bitrise build. you specify value --value parameter, using pipe: echo 'hi' | envman add --key my_release_note you read value file: envman add --key my_release_note --valuefile .\/some\/file\/path once env var exposed, use like any var. you exposed vars inputs steps well. here example we’re exposing release note env var using script step send slack message step: workflows:\n example:\n steps:\n - script:\n inputs:\n content: |\n #!\/bin\/bash\n envman add --key my_release_note --value \"this release note\"\n echo \"my release note: $my_release_note\"\n slack:\n channel: ...\n webhook_url: message: \"release $my_release_note\" if want expose value env var accessible key var, so. for example, expose value bitrise_build_number key my_build_number :  envman add --key my_build_number --value \"${bitrise_build_number}\" after this, subsequent steps value bitrise_build_number my_build_number env var. if change value bitrise_build_number this, value my_build_number won’t modified, hold original value! if need know custom env var defined, easily check it, overwrite value: #!\/bin\/bash\nset -ex\nif [ ! -z \"$api_project_scheme\" ] ; then\n envman add --key project_scheme --value \"$api_project_scheme\"\nfi this script checks api_project_scheme env var defined, is, value assigned project_scheme environment variable, overwriting original value project_scheme . " });
this.add({id:482, 
title:"Setting Env Vars in the bitrise.yml", 
body:" setting env vars bitrise.yml you set env vars directly bitrise.yml configuration file app. you set app level workflow env vars app's config file. in example, configuration with app-level env var called test_key : app: \n envs: - opts: is_expand: false test_key: test value replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n in example, deploy-alpha workflow defines env var called env_type , runs workflow use env var: workflows:\n\n deploy-alpha:\n envs:\n - env_type: alpha\n after_run:\n _deploy\n\n _deploy:\n steps:\n script:\n inputs:\n content: |\n #!\/bin\/bash\n echo \"env_type: $env_type\" if run deploy-alpha workflow, set env_type env var alpha , run deploy workflow, use env var. in example, simply print value (the printed text be: env_type: alpha ). " });
this.add({id:483, 
title:"Secrets", 
body:" secrets secrets specific type environment variable: aren't shown bitrise.yml value exposed build logs. secrets specific type environment variable: hide information encrypted format value exposed build logs. they aren't shown bitrise.yml configuration either. you store confidential information, passwords api keys secrets. just like environment variables, secrets used value step input: using an env var in a step input sensitive inputs input fields marked sensitive accept secrets input. generally, recommend changing value inputs. " });
this.add({id:484, 
title:"Setting a Secret", 
body:" setting secret every env var value string the value environment variable secret string. even set number (for example, 7), passed using $ character you use $ character value env var secret (for example, password) case leave replace variables inputs? toggle inactive. if replace variable's key with value inputs, bitrise cli treat env var $ character. there ways creating new secret graphical ui workflow editor. in first procedure, we're using secrets tab. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click add new button. type env var key key input field value value input field. exposing secrets pull requests under value, see expose pull requests? toggle. by default, secrets aren't exposed pull requests. we strongly recommend exposing secrets pull requests cases. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n on right secret, click save button. the method create secrets modifying step input values. you marked sensitive . sensitive inputs accept secrets so choose existing list, create new one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. select workflow step want configure. find sensitive input wish modify. click input field. under create new secret env var label, specify key value new secret. exposing secrets pull requests under value, see expose pull requests? toggle. by default, secrets aren't exposed pull requests. we strongly recommend exposing secrets pull requests cases. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n click add new button. " });
this.add({id:485, 
title:"Editing an existing Secret", 
body:" editing existing secret once you’ve added new secret env var secrets tab, come any time, modify content make protected curious eyes! open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click edit value secret. modify content needed. on right secret, click save button. " });
this.add({id:486, 
title:"Protecting the value of a Secret", 
body:" protecting value secret normally, hide value secret clicking eye icon. this feature useful long list secret env vars secrets wish check value secret leaving values hidden. if hidden, it’s represented with crossed eye icon. however, hide value secret permanently making protected. if so, one, including yourself, able change view again. a secret's protection can't undone making secret protected irreversible. if need change value, delete create new one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click edit value secret. click make protected . the pop-up window warn process irreversible. click make protected . that's it. you longer view value secret. " });
this.add({id:487, 
title:"Exposing a Secret to pull requests", 
body:" exposing secret pull requests by default, pull requests access values secrets. this means request opened fork repository triggers build, build can't use app's if need grant pull request builds access particular secret, expose secret requests. however, exposed, value won't visible logs: displayed [redacted]. protected secrets can't exposed once secret protected , can't expose pull request builds. public apps if app public app, can't expose app's secrets pull requests builds. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click edit value secret. toggle expose pull requests? toggle. once secret exposed, pull request builds access it. " });
this.add({id:488, 
title:"Managing Secrets across multiple apps", 
body:" managing secrets multiple apps by default, secrets handled app level. you reuse secret keys multiple bitrise apps, corresponding values different app. however, possible set secret holds value apps, manage location. for example, apps need access api, makes sense store containing api key central if changes, change single location applies bitrise apps. there ways achieve this: managing secrets workspace . this available enterprise plans. managing secrets central location vault database pulling with step. " });
this.add({id:489, 
title:"Managing Secrets on a Workspace level", 
body:" managing secrets workspace level on enterprise plans, store secrets workspace level. this means secret accessible apps owned workspace. increased security: owners managers access secrets. downgrading if downgrade enterprise plan, workspace secrets converted app level secrets. when passing secrets build, app level precedence workspace availability order . this means secrets with key, app level secret used build. to add new secret: on bitrise main page, select settings navigation menu left. it takes workspace settings page. on workspace settings page, select shared resources . click add new button. add key value. configure usage details secret: replace variables inputs : this passes value secret string build. use embedded secrets environment variables: key variable. for use cases, don't need checked. expose pull requests : exposing secret pr means available use pull request builds. depending repository's privacy settings, potential security risk! protected : the value changed viewed again. this setting irreversible saved. when you're ready, click done . " });
this.add({id:490, 
title:"Managing Secrets from a central vault or database", 
body:" managing secrets central vault database setting secrets central location requires things: a central vault database - hashicorp doppler store secrets. it accessible cli. a script step access central vault\/database, pull secret set sensitive bitrise. to create new secret store central location build: add secrets key-value pair vault database want store them. add script step all workflows want use secrets. add necessary commands access vault pull secrets. the exact depend service you’re using. use envman tool mark secrets sensitive. the envman following syntax: envman add --key key --value value --sensitive . make sure step doesn’t display value secret build log. to so, remove set -x step’s content . secret redaction please note secret redaction turned off, secrets redacted thus value visible logs. storing secrets hashicorp vault let’s say hashicorp vault instance called secret\/hello . you secrets vault instance: foo with value world foo2 with value world2 . to use secrets bitrise build, need to: export vault instance. iterate mark sensitive. you use script achieve both: # exporting secrets\nvault kv --format=json secret\/hello | jq -r '.data.data to_entries[] [.key, .value] @tsv' \n# iterating secrets marking sensitive\nwhile ifs=$'\\t' read key value; do\n envman add --key \"$key\" --value \"$value\" --sensitive\ndone " });
this.add({id:491, 
title:"Redacting Secrets", 
body:" redacting secrets the bitrise cli automatically redacts secret env vars prints [redacted] with newlines key so secret env vars not visible build log. this applies private public apps. you turn any time need secrets visible logs. this potential security risk. we strongly recommend turn secret redaction. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click add new register bitrise_secret_filtering secret environment variable with false value. click save right corner. " });
this.add({id:484, 
title:"Setting a Secret", 
body:" setting secret every env var value string the value environment variable secret string. even set number (for example, 7), passed using $ character you use $ character value env var secret (for example, password) case leave replace variables inputs? toggle inactive. if replace variable's key with value inputs, bitrise cli treat env var $ character. there ways creating new secret graphical ui workflow editor. in first procedure, we're using secrets tab. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click add new button. type env var key key input field value value input field. exposing secrets pull requests under value, see expose pull requests? toggle. by default, secrets aren't exposed pull requests. we strongly recommend exposing secrets pull requests cases. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n on right secret, click save button. the method create secrets modifying step input values. you marked sensitive . sensitive inputs accept secrets so choose existing list, create new one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. select workflow step want configure. find sensitive input wish modify. click input field. under create new secret env var label, specify key value new secret. exposing secrets pull requests under value, see expose pull requests? toggle. by default, secrets aren't exposed pull requests. we strongly recommend exposing secrets pull requests cases. replacing variables inputs all env vars is_expand property. on ui, represented replace variables inputs? toggle. we not recommend enabling it, unless value env var secret . toggling option ensures instead key env var, value var passed build. normally, necessary. please note add new environment variable directly bitrise.yml file not set is_expand property, default value true . we recommend explicitly setting is_expand case: envs:\n - opts:\n is_expand: false\n key: value\n click add new button. " });
this.add({id:485, 
title:"Editing an existing Secret", 
body:" editing existing secret once you’ve added new secret env var secrets tab, come any time, modify content make protected curious eyes! open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click edit value secret. modify content needed. on right secret, click save button. " });
this.add({id:486, 
title:"Protecting the value of a Secret", 
body:" protecting value secret normally, hide value secret clicking eye icon. this feature useful long list secret env vars secrets wish check value secret leaving values hidden. if hidden, it’s represented with crossed eye icon. however, hide value secret permanently making protected. if so, one, including yourself, able change view again. a secret's protection can't undone making secret protected irreversible. if need change value, delete create new one. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click edit value secret. click make protected . the pop-up window warn process irreversible. click make protected . that's it. you longer view value secret. " });
this.add({id:487, 
title:"Exposing a Secret to pull requests", 
body:" exposing secret pull requests by default, pull requests access values secrets. this means request opened fork repository triggers build, build can't use app's if need grant pull request builds access particular secret, expose secret requests. however, exposed, value won't visible logs: displayed [redacted]. protected secrets can't exposed once secret protected , can't expose pull request builds. public apps if app public app, can't expose app's secrets pull requests builds. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click edit value secret. toggle expose pull requests? toggle. once secret exposed, pull request builds access it. " });
this.add({id:488, 
title:"Managing Secrets across multiple apps", 
body:" managing secrets multiple apps by default, secrets handled app level. you reuse secret keys multiple bitrise apps, corresponding values different app. however, possible set secret holds value apps, manage location. for example, apps need access api, makes sense store containing api key central if changes, change single location applies bitrise apps. there ways achieve this: managing secrets workspace . this available enterprise plans. managing secrets central location vault database pulling with step. " });
this.add({id:489, 
title:"Managing Secrets on a Workspace level", 
body:" managing secrets workspace level on enterprise plans, store secrets workspace level. this means secret accessible apps owned workspace. increased security: owners managers access secrets. downgrading if downgrade enterprise plan, workspace secrets converted app level secrets. when passing secrets build, app level precedence workspace availability order . this means secrets with key, app level secret used build. to add new secret: on bitrise main page, select settings navigation menu left. it takes workspace settings page. on workspace settings page, select shared resources . click add new button. add key value. configure usage details secret: replace variables inputs : this passes value secret string build. use embedded secrets environment variables: key variable. for use cases, don't need checked. expose pull requests : exposing secret pr means available use pull request builds. depending repository's privacy settings, potential security risk! protected : the value changed viewed again. this setting irreversible saved. when you're ready, click done . " });
this.add({id:490, 
title:"Managing Secrets from a central vault or database", 
body:" managing secrets central vault database setting secrets central location requires things: a central vault database - hashicorp doppler store secrets. it accessible cli. a script step access central vault\/database, pull secret set sensitive bitrise. to create new secret store central location build: add secrets key-value pair vault database want store them. add script step all workflows want use secrets. add necessary commands access vault pull secrets. the exact depend service you’re using. use envman tool mark secrets sensitive. the envman following syntax: envman add --key key --value value --sensitive . make sure step doesn’t display value secret build log. to so, remove set -x step’s content . secret redaction please note secret redaction turned off, secrets redacted thus value visible logs. storing secrets hashicorp vault let’s say hashicorp vault instance called secret\/hello . you secrets vault instance: foo with value world foo2 with value world2 . to use secrets bitrise build, need to: export vault instance. iterate mark sensitive. you use script achieve both: # exporting secrets\nvault kv --format=json secret\/hello | jq -r '.data.data to_entries[] [.key, .value] @tsv' \n# iterating secrets marking sensitive\nwhile ifs=$'\\t' read key value; do\n envman add --key \"$key\" --value \"$value\" --sensitive\ndone " });
this.add({id:491, 
title:"Redacting Secrets", 
body:" redacting secrets the bitrise cli automatically redacts secret env vars prints [redacted] with newlines key so secret env vars not visible build log. this applies private public apps. you turn any time need secrets visible logs. this potential security risk. we strongly recommend turn secret redaction. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go secrets tab. click add new register bitrise_secret_filtering secret environment variable with false value. click save right corner. " });
this.add({id:492, 
title:"Build statuses", 
body:" build statuses on the builds page, track current status builds. there different build statuses: hold, starting, running, aborted, failed, success. on builds page, track current status builds. there different build statuses: on hold : there builds started than current plan allows. in cases, relevant legacy, concurrency-based plans: means don't concurrency start build. time limit all builds hold aborted 30 days ensure build gets permanently stuck. starting : when build triggered, bitrise creates virtual machine run it. if computing resources aren’t immediately available, placed queue. once worker assigned create processing request. running : once virtual machine ready go, build starts running. this means bitrise executing steps defined workflow. aborted : a build aborted manually user, automatically rolling builds feature build time run out. aborted with success there specific status called aborted with success: means build aborted api reported success git hosting provider. use the  abort_with_success  parameter with bitrise api abort build count successful one. failed : in cases, build fails any steps fails. there exceptions, caching steps , mark steps skippable means fail, build running. success : if bitrise successfully executes steps aren’t marked skippable, build successful. you check build status builds page app, send status reports: reporting the build status to your git hosting provider" });
this.add({id:493, 
title:"Installing tools during a build", 
body:" installing tools build if need tool isn't preinstalled build machines can’t step it, install use with scripts script steps. if need tool isn't preinstalled build machines can’t step it, install use with scripts script steps. add script step workflow, write script there, run repository. passwordless sudo enabled build virtual machines, so freely use sudo need it. once working script, transform step optionally share with others (through steplib). read more: developing a new step open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. click + sign insert step position step library . in search steps bar, search “script” click script step . this add workflow. click step workflow. insert script script content input field. running script repository if want run script repository, script step. paths relative repository’s root. for example, bash script path\/to\/script.sh add script content input field run with following command: #!\/bin\/bash\nset -ex\nbash .\/path\/to\/script.sh you run non-bash scripts too, example, ruby script : #!\/bin\/bash\nset -ex\nruby .\/path\/to\/script.rb installing cmake macos install cmake with script step macos with following brew command: #!\/bin\/bash\nset -ex\nbrew install cmake brew install you use brew install step install cmake tools. installing cmake linux install cmake with script step linux with following apt-get command: #!\/bin\/bash\nset -ex\nsudo apt-get install -y cmake use -y flag apt-get if don’t add -y (yes) flag apt-get command, apt-get present prompt accept deny manually. this problem linux machine ci environment can’t provide manual input apt-get . to prevent issue, auto accept prompt, just use -y flag, shown example. run npm command you use run npm command step install cmake tools. installing ios 13 runtime xcode 14 stacks install ios 13 runtime xcode 14 stacks with script step. #!\/bin\/bash\nset -ex\nsudo xcodes runtimes install \"ios 13.0\" available simulator runtimes macos stacks you install runtimes using similar syntax, mind, preinstalled stacks. if interested list tools, simulator stacks, available stack’s  system report github . " });
this.add({id:494, 
title:"Installing tools by declaring deps in the bitrise.yml file", 
body:" installing tools declaring deps bitrise.yml file instead installing dependency tool using installer step script step, use deps option bitrise.yml . if declare deps specific step, bitrise cli check tool installed, install you, required. if selected tool dependency available, bitrise cli install it. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go bitrise.yml tab. find step need: declare dependencies step. add deps step title: workflows:\n test:\n steps:\n - script:\n deps: declare package manager name. workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n name: cmake\n apt_get:\n cmake declaring binary if want declare dependency available source (not package manager), related binary . if package does match binary name, declare with bin_name . an example aws cli, package managers awscli , binary itself aws . workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n name: awscli\n bin_name: aws " });
this.add({id:494, 
title:"Installing tools by declaring deps in the bitrise.yml file", 
body:" installing tools declaring deps bitrise.yml file instead installing dependency tool using installer step script step, use deps option bitrise.yml . if declare deps specific step, bitrise cli check tool installed, install you, required. if selected tool dependency available, bitrise cli install it. open app bitrise . click workflows button main page. on workflows & pipelines pages, can: click edit bitrise.yml button bitrise.yml tab workflow editor. select workflow list app's workflows. go bitrise.yml tab. find step need: declare dependencies step. add deps step title: workflows:\n test:\n steps:\n - script:\n deps: declare package manager name. workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n name: cmake\n apt_get:\n cmake declaring binary if want declare dependency available source (not package manager), related binary . if package does match binary name, declare with bin_name . an example aws cli, package managers awscli , binary itself aws . workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n name: awscli\n bin_name: aws " });
this.add({id:495, 
title:"Connecting to a VPN during a build", 
body:" connecting vpn build to connect vpn build, make sure step establishing connection, set openvpn server. you require vpn connection build, able connect server, git clone repository access private api. to connect vpn, need to: make sure local network address space does clash with bitrise virtual machines' address space cause error with vpn. install configure required vpn components. connect vpn. you configure connect vpn workflow - before use connection, course. for example, require connection access repository, git clone step. ssh sessions when choose vpn tool setup\/configuration, careful not to restart or abort existing ssh sessions! the bitrise.io workers abort build ssh connection build’s control\/master machine virtual terminates! " });
this.add({id:496, 
title:"Accessing a repository via VPN", 
body:" accessing repository vpn if repository app accessed vpn, things mind all: during builds, vpn connection established cloning repository virtual machines: practice, means step establishing placed git clone step workflow . when adding new app, need workaround: use dummy repository accessed vpn process app. let’s workaround! create repository accessible vpn connection. add new app, using repository source. make sure private app! there need register webhook . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select general . at basic settings section, click edit . in pop-up window, paste new repository url. click save . place step steps establishing vpn connection any access repository workflow. and you’re done. for different methods establishing vpn connection, look example configurations. " });
this.add({id:497, 
title:"Example VPN configurations", 
body:" example vpn configurations in section, present example configurations connecting vpn build: using openvpn server . using strongswan vpn . using cisco vpn . " });
this.add({id:498, 
title:"Using the Connect to OpenVPN Server Step", 
body:" using connect openvpn server step to use connect openvpn server step, need build openvpn server advance, encode certificate files private key. set openvpn server . encode following base64: ca certificate client certificate client private key you base64 encode files with following command: $ base64 <filepath> open app bitrise workflow tab. register encoded certificates key secrets . we recommend using following keys default inputs vpn step: ca certificate: $vpn_ca_crt_base64 client certificate: $vpn_client_crt_base64 private key: vpn_client_key_base64 add connect openvpn server step workflow. add step any steps require vpn connection. add previously created secrets respective inputs: base64 encoded ca certificate base64 encoded client certificate base64 encoded client private key if created secrets with recommended keys, change inputs. fill required inputs. host : open vpn server ip hostname port : openvpn server port number protocol : openvpn server protocol " });
this.add({id:499, 
title:"Using Strongswan VPN", 
body:" using strongswan vpn this example script save repository run there, just copy paste content script step bitrise configuration ( bitrise.yml \/ workflow). the script uses strongswan vpn connect vpn. it works macos linux. once run successfully, any subsequent bitrise step access devices services connection. #!\/usr\/bin\/env bash\nset -e\n\necho \"wan ip\"\n# this prints servers internet ip adress log, useful debugging\ncurl http:\/\/httpbin.org\/ip\n\ncase \"$ostype\" in\n linux*)\n echo \"configuring linux\"\n\n # variables\n etc_dir=\/etc\n etc_sudo='sudo' sudo needed linux strongswan configuration\n\n install strongswan\n \"installing strongswan...\"\n sudo apt-get install -y strongswan\n\n ;;\n darwin*)\n mac os\"\n\n etc_dir=\/usr\/local\/etc\n etc_sudo='' not os using homebrew\n openssl...\"\n manually openssl first save time, installing directly compiles source instead\n brew openssl\n *)\n \"unknown operative system: $ostype, exiting\"\n exit 1\n ;;\nesac\n\n\n# method rendering template string file (when run, returns input with $variables replaced env)\nrender_template() {\n eval \"echo \\\"$(cat $1)\\\"\"\n}\n\n# create temporary directory hold files\ntemp_dir=\/tmp\/vpn-config\nmkdir $temp_dir\n\n# ipsec config file, see examples https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ikev1examples https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ikev2examples\necho \"downloading ipsec.conf...\"\nwget https:\/\/www.example.com\/ipsec.conf.template -o $temp_dir\/ipsec.conf.template\n# credentials documentation https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ipsecsecrets\necho ipsec.secrets...\"\nwget https:\/\/www.example.com\/ipsec.secrets.template $temp_dir\/ipsec.secrets.template\n# in cases need download certificate, certificate chain, vpn endpoint\necho server.crt...\"\nwget https:\/\/www.example.com\/server.crt $temp_dir\/server.crt\n\necho \"rendering templates\"\nrender_template $temp_dir\/ipsec.conf.template > $temp_dir\/ipsec.conf\nrender_template $temp_dir\/ipsec.secrets.template $temp_dir\/ipsec.secrets\n\necho configuration\"\n$etc_sudo cp $temp_dir\/ipsec.conf $etc_dir\/ipsec.conf\n$etc_sudo $temp_dir\/ipsec.secrets $etc_dir\/ipsec.secrets\n$etc_sudo $temp_dir\/server.crt $etc_dir\/ipsec.d\/ocspcerts\/server.crt\n\n# start ipsec service\necho \"starting ipsec\"\nsudo start\n\n# we're sleeping commands, mostly problems otherwise\nsleep 1\n\n# output helpful status log\necho \"status statusall\n\nsleep switch myconnection connection ipsec.conf\necho \"initiating connection\"\nsudo myconnection\n\nsleep 1\n\ncase el capitan, `sudo up` command consistently fails succeeds restart service\n \"restarting ipsec\"\n restart\n\n sleep 1\n\n connection\"\n myconnection\n\n step apply routing traffic trough (that is, remote range 0.0.0.0\/0)\n capitan getting dns configuration interface. also ipv6 causes issues. so we're manually turning forcing new configuration.\n \"disabling settings\"\n fetch main interface\n main_interface=$(networksetup -listnetworkserviceorder | awk -f'\\\\) ' '\/\\(1\\)\/ {print $2}')\n completely disable ipv6\n networksetup -setv6off \"$main_interface\"\n 10.0.0.1 server\n -setdnsservers \"$main_interface\" 10.0.0.1\n *) ;;\nesac\n\n# your running. any following steps bitrise workflow access devices 🎉\n " });
this.add({id:500, 
title:"Using Cisco VPN", 
body:" using cisco vpn you use cisco vpn connect step: connects with cisco vpn provided vpn3000 concentrator, juniper\/netscreen, ios pix using vpnc. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add cisco vpn connect step start workflow. provide vpn client settings credentials required step by: using existing vpnc configuration file: vpnc.conf using command line options input step. the options specified precedence configuration file! for information setting vpnc, check vpnc homepage vpnc manual . " });
this.add({id:496, 
title:"Accessing a repository via VPN", 
body:" accessing repository vpn if repository app accessed vpn, things mind all: during builds, vpn connection established cloning repository virtual machines: practice, means step establishing placed git clone step workflow . when adding new app, need workaround: use dummy repository accessed vpn process app. let’s workaround! create repository accessible vpn connection. add new app, using repository source. make sure private app! there need register webhook . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select general . at basic settings section, click edit . in pop-up window, paste new repository url. click save . place step steps establishing vpn connection any access repository workflow. and you’re done. for different methods establishing vpn connection, look example configurations. " });
this.add({id:497, 
title:"Example VPN configurations", 
body:" example vpn configurations in section, present example configurations connecting vpn build: using openvpn server . using strongswan vpn . using cisco vpn . " });
this.add({id:498, 
title:"Using the Connect to OpenVPN Server Step", 
body:" using connect openvpn server step to use connect openvpn server step, need build openvpn server advance, encode certificate files private key. set openvpn server . encode following base64: ca certificate client certificate client private key you base64 encode files with following command: $ base64 <filepath> open app bitrise workflow tab. register encoded certificates key secrets . we recommend using following keys default inputs vpn step: ca certificate: $vpn_ca_crt_base64 client certificate: $vpn_client_crt_base64 private key: vpn_client_key_base64 add connect openvpn server step workflow. add step any steps require vpn connection. add previously created secrets respective inputs: base64 encoded ca certificate base64 encoded client certificate base64 encoded client private key if created secrets with recommended keys, change inputs. fill required inputs. host : open vpn server ip hostname port : openvpn server port number protocol : openvpn server protocol " });
this.add({id:499, 
title:"Using Strongswan VPN", 
body:" using strongswan vpn this example script save repository run there, just copy paste content script step bitrise configuration ( bitrise.yml \/ workflow). the script uses strongswan vpn connect vpn. it works macos linux. once run successfully, any subsequent bitrise step access devices services connection. #!\/usr\/bin\/env bash\nset -e\n\necho \"wan ip\"\n# this prints servers internet ip adress log, useful debugging\ncurl http:\/\/httpbin.org\/ip\n\ncase \"$ostype\" in\n linux*)\n echo \"configuring linux\"\n\n # variables\n etc_dir=\/etc\n etc_sudo='sudo' sudo needed linux strongswan configuration\n\n install strongswan\n \"installing strongswan...\"\n sudo apt-get install -y strongswan\n\n ;;\n darwin*)\n mac os\"\n\n etc_dir=\/usr\/local\/etc\n etc_sudo='' not os using homebrew\n openssl...\"\n manually openssl first save time, installing directly compiles source instead\n brew openssl\n *)\n \"unknown operative system: $ostype, exiting\"\n exit 1\n ;;\nesac\n\n\n# method rendering template string file (when run, returns input with $variables replaced env)\nrender_template() {\n eval \"echo \\\"$(cat $1)\\\"\"\n}\n\n# create temporary directory hold files\ntemp_dir=\/tmp\/vpn-config\nmkdir $temp_dir\n\n# ipsec config file, see examples https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ikev1examples https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ikev2examples\necho \"downloading ipsec.conf...\"\nwget https:\/\/www.example.com\/ipsec.conf.template -o $temp_dir\/ipsec.conf.template\n# credentials documentation https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ipsecsecrets\necho ipsec.secrets...\"\nwget https:\/\/www.example.com\/ipsec.secrets.template $temp_dir\/ipsec.secrets.template\n# in cases need download certificate, certificate chain, vpn endpoint\necho server.crt...\"\nwget https:\/\/www.example.com\/server.crt $temp_dir\/server.crt\n\necho \"rendering templates\"\nrender_template $temp_dir\/ipsec.conf.template > $temp_dir\/ipsec.conf\nrender_template $temp_dir\/ipsec.secrets.template $temp_dir\/ipsec.secrets\n\necho configuration\"\n$etc_sudo cp $temp_dir\/ipsec.conf $etc_dir\/ipsec.conf\n$etc_sudo $temp_dir\/ipsec.secrets $etc_dir\/ipsec.secrets\n$etc_sudo $temp_dir\/server.crt $etc_dir\/ipsec.d\/ocspcerts\/server.crt\n\n# start ipsec service\necho \"starting ipsec\"\nsudo start\n\n# we're sleeping commands, mostly problems otherwise\nsleep 1\n\n# output helpful status log\necho \"status statusall\n\nsleep switch myconnection connection ipsec.conf\necho \"initiating connection\"\nsudo myconnection\n\nsleep 1\n\ncase el capitan, `sudo up` command consistently fails succeeds restart service\n \"restarting ipsec\"\n restart\n\n sleep 1\n\n connection\"\n myconnection\n\n step apply routing traffic trough (that is, remote range 0.0.0.0\/0)\n capitan getting dns configuration interface. also ipv6 causes issues. so we're manually turning forcing new configuration.\n \"disabling settings\"\n fetch main interface\n main_interface=$(networksetup -listnetworkserviceorder | awk -f'\\\\) ' '\/\\(1\\)\/ {print $2}')\n completely disable ipv6\n networksetup -setv6off \"$main_interface\"\n 10.0.0.1 server\n -setdnsservers \"$main_interface\" 10.0.0.1\n *) ;;\nesac\n\n# your running. any following steps bitrise workflow access devices 🎉\n " });
this.add({id:500, 
title:"Using Cisco VPN", 
body:" using cisco vpn you use cisco vpn connect step: connects with cisco vpn provided vpn3000 concentrator, juniper\/netscreen, ios pix using vpnc. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add cisco vpn connect step start workflow. provide vpn client settings credentials required step by: using existing vpnc configuration file: vpnc.conf using command line options input step. the options specified precedence configuration file! for information setting vpnc, check vpnc homepage vpnc manual . " });
this.add({id:498, 
title:"Using the Connect to OpenVPN Server Step", 
body:" using connect openvpn server step to use connect openvpn server step, need build openvpn server advance, encode certificate files private key. set openvpn server . encode following base64: ca certificate client certificate client private key you base64 encode files with following command: $ base64 <filepath> open app bitrise workflow tab. register encoded certificates key secrets . we recommend using following keys default inputs vpn step: ca certificate: $vpn_ca_crt_base64 client certificate: $vpn_client_crt_base64 private key: vpn_client_key_base64 add connect openvpn server step workflow. add step any steps require vpn connection. add previously created secrets respective inputs: base64 encoded ca certificate base64 encoded client certificate base64 encoded client private key if created secrets with recommended keys, change inputs. fill required inputs. host : open vpn server ip hostname port : openvpn server port number protocol : openvpn server protocol " });
this.add({id:499, 
title:"Using Strongswan VPN", 
body:" using strongswan vpn this example script save repository run there, just copy paste content script step bitrise configuration ( bitrise.yml \/ workflow). the script uses strongswan vpn connect vpn. it works macos linux. once run successfully, any subsequent bitrise step access devices services connection. #!\/usr\/bin\/env bash\nset -e\n\necho \"wan ip\"\n# this prints servers internet ip adress log, useful debugging\ncurl http:\/\/httpbin.org\/ip\n\ncase \"$ostype\" in\n linux*)\n echo \"configuring linux\"\n\n # variables\n etc_dir=\/etc\n etc_sudo='sudo' sudo needed linux strongswan configuration\n\n install strongswan\n \"installing strongswan...\"\n sudo apt-get install -y strongswan\n\n ;;\n darwin*)\n mac os\"\n\n etc_dir=\/usr\/local\/etc\n etc_sudo='' not os using homebrew\n openssl...\"\n manually openssl first save time, installing directly compiles source instead\n brew openssl\n *)\n \"unknown operative system: $ostype, exiting\"\n exit 1\n ;;\nesac\n\n\n# method rendering template string file (when run, returns input with $variables replaced env)\nrender_template() {\n eval \"echo \\\"$(cat $1)\\\"\"\n}\n\n# create temporary directory hold files\ntemp_dir=\/tmp\/vpn-config\nmkdir $temp_dir\n\n# ipsec config file, see examples https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ikev1examples https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ikev2examples\necho \"downloading ipsec.conf...\"\nwget https:\/\/www.example.com\/ipsec.conf.template -o $temp_dir\/ipsec.conf.template\n# credentials documentation https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/ipsecsecrets\necho ipsec.secrets...\"\nwget https:\/\/www.example.com\/ipsec.secrets.template $temp_dir\/ipsec.secrets.template\n# in cases need download certificate, certificate chain, vpn endpoint\necho server.crt...\"\nwget https:\/\/www.example.com\/server.crt $temp_dir\/server.crt\n\necho \"rendering templates\"\nrender_template $temp_dir\/ipsec.conf.template > $temp_dir\/ipsec.conf\nrender_template $temp_dir\/ipsec.secrets.template $temp_dir\/ipsec.secrets\n\necho configuration\"\n$etc_sudo cp $temp_dir\/ipsec.conf $etc_dir\/ipsec.conf\n$etc_sudo $temp_dir\/ipsec.secrets $etc_dir\/ipsec.secrets\n$etc_sudo $temp_dir\/server.crt $etc_dir\/ipsec.d\/ocspcerts\/server.crt\n\n# start ipsec service\necho \"starting ipsec\"\nsudo start\n\n# we're sleeping commands, mostly problems otherwise\nsleep 1\n\n# output helpful status log\necho \"status statusall\n\nsleep switch myconnection connection ipsec.conf\necho \"initiating connection\"\nsudo myconnection\n\nsleep 1\n\ncase el capitan, `sudo up` command consistently fails succeeds restart service\n \"restarting ipsec\"\n restart\n\n sleep 1\n\n connection\"\n myconnection\n\n step apply routing traffic trough (that is, remote range 0.0.0.0\/0)\n capitan getting dns configuration interface. also ipv6 causes issues. so we're manually turning forcing new configuration.\n \"disabling settings\"\n fetch main interface\n main_interface=$(networksetup -listnetworkserviceorder | awk -f'\\\\) ' '\/\\(1\\)\/ {print $2}')\n completely disable ipv6\n networksetup -setv6off \"$main_interface\"\n 10.0.0.1 server\n -setdnsservers \"$main_interface\" 10.0.0.1\n *) ;;\nesac\n\n# your running. any following steps bitrise workflow access devices 🎉\n " });
this.add({id:500, 
title:"Using Cisco VPN", 
body:" using cisco vpn you use cisco vpn connect step: connects with cisco vpn provided vpn3000 concentrator, juniper\/netscreen, ios pix using vpnc. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add cisco vpn connect step start workflow. provide vpn client settings credentials required step by: using existing vpnc configuration file: vpnc.conf using command line options input step. the options specified precedence configuration file! for information setting vpnc, check vpnc homepage vpnc manual . " });
this.add({id:501, 
title:"Finding a specific build", 
body:" finding specific build if app multiple builds, search specific main page using variety options, like build number commit message. build retention 200 days on builds page app, builds 200 days. the limit applies searching specific builds page. this limitation applies api calls: get\/apps\/{app-slug}\/builds endpoint related endpoints return builds 200 days. however, methods build older than 200 days: if know exact build url, access build. you use get\/apps\/{app-slug}\/archived-builds api endpoint: listing the archived builds of an app . if app multiple builds bitrise.io , search specific using variety options. to so: open app bitrise. on main page app, search options list builds. you options: in search build number commit message field, enter build number commit message build. choose filter status dropdown menu builds with specific status. choose filter branch dropdown menu builds ran specific branch. choose filter workflows dropdown menu builds ran with specific workflows. choose filter triggers dropdown menu builds triggered trigger options: pushes, pull requests, tags. " });
this.add({id:502, 
title:"Build numbering and app versioning", 
body:" build numbering app versioning all bitrise builds build number. the first app is, default, number 1, gets incremented with build. you change manually. all bitrise builds build number. the first app is, default, number 1, gets incremented with build. you build’s website, $bitrise_build_number environment variable. this variable used any step script need bitrise build number reason. you care app’s versioning automatically, using bitrise. we steps you: setting up app versioning automatically on bitrise" });
this.add({id:503, 
title:"Adding the SSH key to the machine user", 
body:" adding ssh key machine user in order bitrise able use machine user access repository, add ssh key app bitrise. negative build numbers the build number 0 positive integer. negative numbers accepted. you can, however, set any used. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . scroll next build number . this number automatically incremented run build set manually. to modify number, click edit . " });
this.add({id:504, 
title:"Setting up app versioning automatically on Bitrise", 
body:" setting app versioning automatically bitrise track version app git repository modifying file containing essential information (for example, info.plist file ios apps build.gradle file androidmanifest.xml file android apps). bitrise steps you. these steps insert build number specified respective files: change android versioncode versionname android apps. set xcode project build number ios apps. both steps accept numbers (integers and\/or numeric strings) environment variables relevant inputs. by default, use $bitrise_build_number environment variable default value build number. " });
this.add({id:505, 
title:"Setting the versionCode and the versionName of an Android app", 
body:" setting versioncode versionname android app for android app, setting used internal version number, determine build app recent than build. the versionname setting string used version number shown users. for in-depth information android versioning, check android developer guide subject . version information manifest file in guide, we’re setting version information build.gradle file. this recommended method: set directly androidmanifest.xml file aware any version info set manifest build overwritten build.gradle file’s settings build. to configure android versioning: add change android versioncode versionname step workflow. set path build.gradle file path build.gradle file input. add value new versioncode input. the default value $bitrise_build_number environment variable. add value new versionname input. " });
this.add({id:506, 
title:"Setting the CFBundleVersion and CFBundleShortVersionString of an iOS app", 
body:" setting cfbundleversion cfbundleshortversionstring ios app for ios app, value cfbundleversion key (“bundle version” xcode) build number app value cfbundleshortversionstring key (“bundle versions string, short” xcode) version number app. for in-depth information ios versioning, including functions cfbundleversion cfbundleshortversionstring keys, check apple technical note ; look summary important keys . setting ios versioning apps using xcode 13+ to set ios versioning bitrise using xcode 13+, update following xcode: set generate info.plist file no , project targets build settings tab. make sure necessary keys defined info.plist file. add set xcode project build number step workflow. set file path info.plist file project path, scheme target input. add value build number input. this sets cfbundleversion key specified value info.plist file. the default value $bitrise_build_number environment value. optionally, add value version number input. this set cfbundleshortversionstring key specified value info.plist file. this input required. " });
this.add({id:507, 
title:"Offsetting the build version", 
body:" offsetting build version you offset app’s build version numbers handled tracking different way app: need setting value added number. the fixed integer environment variable. to offset version number bitrise build time triggered, use $bitrise_build_number environment variable: for android apps, versioncode offset input change android versioncode versionname step set $bitrise_build_number value. the value variable added specified versioncode input. for ios apps, build number offset input set xcode project build number step set $bitrise_build_number value. the value variable added specified build number input. offsetting android app's version let’s say app run fifth build bitrise. you wish offset build number 6 builds starting use the following configuration used: - version code: $bitrise_build_number\n- code offset: 6\n- name: 1.0.5 the value $bitrise_build_number (which equals 5 example) added version code offset value. as such, android:versionname value set 1.0.5 (11), indicating it’s 11th build version app. offsetting ios app's version let’s say app run fifth build bitrise. you wish offset build number 6 builds starting use the following configuration used: - build number: $bitrise_build_number\n- number offset: 6\n- version 1.1 the value $bitrise_build_number (which equals 5 example) added build number offset value. as such, cfbundleshortversionstring set 1.1 (11), indicating it’s 11th build version app. " });
this.add({id:503, 
title:"Adding the SSH key to the machine user", 
body:" adding ssh key machine user in order bitrise able use machine user access repository, add ssh key app bitrise. negative build numbers the build number 0 positive integer. negative numbers accepted. you can, however, set any used. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select builds . scroll next build number . this number automatically incremented run build set manually. to modify number, click edit . " });
this.add({id:504, 
title:"Setting up app versioning automatically on Bitrise", 
body:" setting app versioning automatically bitrise track version app git repository modifying file containing essential information (for example, info.plist file ios apps build.gradle file androidmanifest.xml file android apps). bitrise steps you. these steps insert build number specified respective files: change android versioncode versionname android apps. set xcode project build number ios apps. both steps accept numbers (integers and\/or numeric strings) environment variables relevant inputs. by default, use $bitrise_build_number environment variable default value build number. " });
this.add({id:505, 
title:"Setting the versionCode and the versionName of an Android app", 
body:" setting versioncode versionname android app for android app, setting used internal version number, determine build app recent than build. the versionname setting string used version number shown users. for in-depth information android versioning, check android developer guide subject . version information manifest file in guide, we’re setting version information build.gradle file. this recommended method: set directly androidmanifest.xml file aware any version info set manifest build overwritten build.gradle file’s settings build. to configure android versioning: add change android versioncode versionname step workflow. set path build.gradle file path build.gradle file input. add value new versioncode input. the default value $bitrise_build_number environment variable. add value new versionname input. " });
this.add({id:506, 
title:"Setting the CFBundleVersion and CFBundleShortVersionString of an iOS app", 
body:" setting cfbundleversion cfbundleshortversionstring ios app for ios app, value cfbundleversion key (“bundle version” xcode) build number app value cfbundleshortversionstring key (“bundle versions string, short” xcode) version number app. for in-depth information ios versioning, including functions cfbundleversion cfbundleshortversionstring keys, check apple technical note ; look summary important keys . setting ios versioning apps using xcode 13+ to set ios versioning bitrise using xcode 13+, update following xcode: set generate info.plist file no , project targets build settings tab. make sure necessary keys defined info.plist file. add set xcode project build number step workflow. set file path info.plist file project path, scheme target input. add value build number input. this sets cfbundleversion key specified value info.plist file. the default value $bitrise_build_number environment value. optionally, add value version number input. this set cfbundleshortversionstring key specified value info.plist file. this input required. " });
this.add({id:507, 
title:"Offsetting the build version", 
body:" offsetting build version you offset app’s build version numbers handled tracking different way app: need setting value added number. the fixed integer environment variable. to offset version number bitrise build time triggered, use $bitrise_build_number environment variable: for android apps, versioncode offset input change android versioncode versionname step set $bitrise_build_number value. the value variable added specified versioncode input. for ios apps, build number offset input set xcode project build number step set $bitrise_build_number value. the value variable added specified build number input. offsetting android app's version let’s say app run fifth build bitrise. you wish offset build number 6 builds starting use the following configuration used: - version code: $bitrise_build_number\n- code offset: 6\n- name: 1.0.5 the value $bitrise_build_number (which equals 5 example) added version code offset value. as such, android:versionname value set 1.0.5 (11), indicating it’s 11th build version app. offsetting ios app's version let’s say app run fifth build bitrise. you wish offset build number 6 builds starting use the following configuration used: - build number: $bitrise_build_number\n- number offset: 6\n- version 1.1 the value $bitrise_build_number (which equals 5 example) added build number offset value. as such, cfbundleshortversionstring set 1.1 (11), indicating it’s 11th build version app. " });
this.add({id:508, 
title:"Build data and troubleshooting", 
body:" build data troubleshooting " });
this.add({id:509, 
title:"Build logs", 
body:" build logs on bitrise, build logs easily accessible: viewed website entirety downloaded view device. build logs allow users analyze builds went wrong - right! on bitrise, build easily accessible: viewed website entirety downloaded view device. build retention 200 days on builds page app, builds 200 days. the limit applies searching specific builds page. this limitation applies api calls: get\/apps\/{app-slug}\/builds endpoint related endpoints return builds 200 days. however, methods build older than 200 days: if know exact build url, access build. you use get\/apps\/{app-slug}\/archived-builds api endpoint: listing the archived builds of an app . " });
this.add({id:510, 
title:"Finding a build log", 
body:" finding build log when run build, build log generated automatically. every log, with unique url. the url contains slug: hexadecimal identifier specific build. assisting bitrise support when bitrise support asks build logs, best thing send url. find app dashboard, select it. on app's main page, select build want check out. make sure log tab selected. on log tab, see steps workflow status. by default, failed expanded. expand any step's info clicking downward arrow right step. this relevant build log. " });
this.add({id:511, 
title:"The build log page", 
body:" the build log page the build log page shows steps build, status. by default, failed expanded, with error message highlighted convenient troubleshooting. expanding step allows see: the start time step's run. the step id. this how bitrise.yml configuration file identifies step. for information, see step reference\/id format . the current version step. underneath number, check release notes if build didn't run with latest step, click update open workflow editor update step different version. under step resources , check step's documentation integrations page, source code issue tracker github. to view build log's contents full, single file, download log . " });
this.add({id:512, 
title:"Following a build log live", 
body:" following build log live you check log build live - is, running. what’s more, follow happening. that means progresses, automatically scroll new sections appear. to so: start build. go build’s page. scroll log. click follow . to stop following, just need manually navigate log. you restart following any time. " });
this.add({id:513, 
title:"Downloading a build log", 
body:" downloading build log if need send build logs people access app bitrise, want store archives, simply download log file bitrise. log security please note build log contain sensitive information! make sure check contents downloading file sending anyone. we recommend using secrets make sure sensitive appears build logs. find app dashboard, select it. on app's main page, select build want check out. open logs dropdown menu click download logs button. " });
this.add({id:514, 
title:"Deleting a build log", 
body:" deleting build log if necessary, delete logs any build bitrise. it handy if, example, want new team members see potentially sensitive information displayed previous logs. not team members authorized delete logs: with admin owner role team it. deletion final be aware undo deleting log. once delete it, way recover log file. find app dashboard, select it. on app's main page, select build want check out. open logs dropdown menu click delete logs button. in pop-up window, click delete logs . " });
this.add({id:515, 
title:"Remote access", 
body:" remote access remote access allows users connect build’s virtual machines ssh screenshare app, build's build details page. remote access allows users connect build’s virtual machines ssh screenshare app. a failed build rebuilt with remote enabled make troubleshooting lot easier - example, logs don’t provide information error. you rebuild standalone builds pipeline builds with remote access. authorization users testers\/qa roles app cannot use remote access. there ways use remote access build machines: ssh : available linux\/docker based macos machines. screenshare : available macos machines. it uses vnc system. with method, access build machine remotely 10 minutes finished. if like extend availability remote access, so adding simple custom script step failed step. check extending the availability of remote access information. build time when using remote access, 10 minutes added overall build time. " });
this.add({id:516, 
title:"Remote access with SSH", 
body:" remote access with ssh to access bitrise build machine with ssh, need command line interface correct password: open app bitrise. on main page app, build want re-run with remote access click it. on rebuild button, click downward arrow open dropdown menu. select rebuild with remote access . this starts new build access remotely. in ssh section, command run command line interface. and done! you able access virtual machine build running. " });
this.add({id:517, 
title:"Remote access with screenshare", 
body:" remote access with screenshare to access bitrise build machine with screenshare app, need correct username, password, address, vnc app: macos remote access with screenshare available workflows run macos-based stack . if workflow's stack (or absence workflow-specific stacks, app's default stack) linux-based one, won't see screenshare instructions all. open app bitrise. on main page app, build want re-run with remote access click it. on rebuild button, click downward arrow open dropdown menu. select rebuild with remote access . this starts new build access remotely. under screenshare option, required information: address username password open vnc screenshare application. the simplest option using default screen sharing application macos. fill required fields with information screenshare option. and done! you able access virtual machine build running. " });
this.add({id:518, 
title:"Finding your files on the VM", 
body:" finding files vm once successfully logged bitrise virtual machine ran build, dive files see what’s happening real time. after finished cloning app vm, access following location: \/users\/vagrant\/git " });
this.add({id:519, 
title:"Extending the availability of remote access", 
body:" extending availability remote access remote access available build running 10 minutes finished. if enough, there’s simple workaround make sure remote longer time. add script step causes build fail. toggle run previous step failed option ensure script step runs. add command let build “sleep” time specified seconds: sleep 5400 this example lets build run 90 minutes. it than time limit, course. that’s it. while build running, look virtual machine possible issues caused fail. " });
this.add({id:520, 
title:"Debugging your build on your own machine", 
body:" debugging build machine if build fails bitrise, recommend try run locally. to debug: use clean git clone, machine with bitrise cli. if build fails bitrise, recommend try run locally, machine. to this, following: do clean git clone project’s online repository. run build machine with bitrise cli. this helps eliminate, things, common issue: uncommitted gitignored files working directory haven’t committed git repository online available bitrise clones running build. other possible issues include: code signing files present local machine uploaded bitrise. a difference version tool(s) used build. android projects if can’t reproduce issue locally, want delete $home\/.gradle (hidden) directory, clear gradle caches. (quick terminal \/ command line command: rm -rf $home\/.gradle ). run docker clean git clone if project uses android\/linux environment, download use exact environment build running bitrise.io . ideally, first clean git clone run docker there, so files .gitignore won’t affect build, build run way bitrise.io . " });
this.add({id:521, 
title:"Testing with a full clean git clone", 
body:" testing with clean git clone open terminal \/ command line interface machine. type in: cd \/tmp clone repository with: git clone repourl .\/quick-repo-test --branch branch-you-want-to-test : git clone https:\/\/github.com\/bitrise-io\/bitrise.git .\/quick-repo-test --branch master type cd .\/quick-repo-test. run commands want test, build project, open project file directory. " });
this.add({id:522, 
title:"Testing with the Bitrise CLI", 
body:" testing with bitrise cli after doing clean git clone, run build locally, using bitrise cli . install bitrise cli . download app’s bitrise.yml file bitrise.io . run build with: bitrise run <workflow-name> (for example, bitrise run primary ). this help reproducing issues cases, allows attempt debug machine. if build succeeds conditions fails bitrise, contact support! " });
this.add({id:523, 
title:"GitHub Checks with the Bitrise GitHub App", 
body:" github checks with bitrise app bitrise checks github app provides extended version classic status checks sends github. github app integration if use bitrise github app connect workspace account organization, don't need described section: checks automatically work provide status updates. you can, however, continue use oauth connection apps github checks with app. the bitrise github app provides, things, extended version classic build status checks sends github. this includes summary check status. you view click details link pull request github. it unfolds detailed build summary status github app attaches checks tab github. there different check statuses: success. failed. action required (in case manual pull request approval). to start using bitrise checks, need perform separate actions: install bitrise checks : install github app repository. this necessary github.com users. enterprise server users set integration proceed enable bitrise checks. enable bitrise checks : turn feature bitrise website run first build able select checks branch protection rules. " });
this.add({id:524, 
title:"Installing Bitrise Checks", 
body:" installing bitrise checks to use bitrise checks github.com user, need install github app. if workspace owns bitrise app github app connected granted access app's repository, don't need install enable checks: just start using it. github.com users if github enterprise server user, don't need procedure. to enable bitrise checks, to: install github enterprise server integration . enable github checks bitrise . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. click install bitrise checks app github repository link toggle. don’t toggle switch just yet, first need install bitrise checks. this link github's bitrise checks installation page. on install bitrise checks page, select user github organization want add bitrise checks to. select option install bitrise checks to: all repositories : applies current future repositories. only select repositories : select repositories need. with this, authorize bitrise checks act behalf; example, check repos access to, use github display results. click install authorize . in github prompt, provide password. if goes well, land bitrise checks page github. you see blue note top-left corner bitrise checks successfully installed github account. " });
this.add({id:525, 
title:"Enabling GitHub Checks on Bitrise", 
body:" enabling github checks bitrise once bitrise checks installed github, need enable github checks app’s page bitrise . enabling github checks limited please note workspace owners app admins enable toggle app settings page app. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. scroll toggle github checks switch. can't toggle switch? if can't toggle switch, check can't enable github checks . trigger build. you so automatically manually. if trigger build manually, provide specific commit hash this build necessary perform first bitrise check. once finished check, select checks branch protection rules. and you’re done! now any pull request open app github validated with bitrise checks build automatically started (if pull request trigger properly set bitrise). you easily app’s page bitrise. if click build summary view details bitrise checks link checks tab, you’ll quickly app’s build page. " });
this.add({id:526, 
title:"Can't enable GitHub Checks", 
body:" can't enable github checks there main reasons able toggle switch enable github checks: you toggle switch unless install bitrise checks first. once it’s done, ahead right enable it. if renamed moved github repository app added bitrise installed checks it. the repository’s url obviously changed. github checks switch work url github bitrise fully match (no redirect allowed). so case, manually update repository url app . " });
this.add({id:527, 
title:"Switching to Bitrise Checks from previous CI checks", 
body:" switching bitrise checks previous ci checks if using status checks pull requests prior merging, ci\/bitrise\/... check system. to able use bitrise checks, manually switch ci\/bitrise\/... bitrise access detailed checks. let’s see how! go settings tab repository. click branches menu. under require status checks pass merging , see ci\/bitrise\/... selected checks system. select bitrise instead ci\/bitrise\/... . merge pull request. " });
this.add({id:528, 
title:"Disabling GitHub Checks", 
body:" disabling github checks you easily disable github checks bitrise toggle enable github checks switch left settings page app. if decide uninstall bitrise checks github account, click uninstall button install github apps page. " });
this.add({id:529, 
title:"GitHub Checks test summary", 
body:" github checks test summary if app’s repository contains any ui unit tests, run tests using appropriate testing steps workflow, add deploy bitrise.io step, test results displayed test reports page see github checks, too. for example, android app, use virtual unit testing android step able see test results github checks. " });
this.add({id:530, 
title:"Step by Step error report", 
body:" step error report if ci build runs, github checks' test summary displays steps' successful failed tests separate tabs left sidebar. click step, detailed report comes number listed with actionable error report. the available bitrise tab. please note github checks' test summary print detailed information following steps: xcode test ios android unit test ios device testing virtual device testing android flutter test you export test results generated any step deploy bitrise.io step ways: we strongly recommend using export test results test reports add-on step: step locates test results based inputs. you configure custom script step creates exports necessary files. " });
this.add({id:531, 
title:"Checking the test results of a failed Step", 
body:" checking test results failed step if build failed tests, how access github checks: click bitrise checks dropdown. click step view error report specific step. you click steps build summary. the view details bitrise checks link takes build page bitrise. " });
this.add({id:532, 
title:"Re-running a build using GitHub checks", 
body:" re-running build using github checks role requirement to re-run build using github checks, github account connected bitrise , need developer role app's team. if conditions met, re-run checks fail error. for complete list user roles role cheatsheets, check  user roles app teams . if like re-run build using github checks: open pull request github like re-run checks. open checks tab. click re-run checks . " });
this.add({id:533, 
title:"Meercode", 
body:" meercode the meercode add-on was sunset february 1, 2023. check bitrise insights free alternative monitor build, test, credit data. meercode deprecation notice the meercode add-on was sunset february 1, 2023. check bitrise insights free alternative monitor build, test, credit data. " });
this.add({id:534, 
title:"Integrating Meercode with Bitrise", 
body:" integrating meercode with bitrise to monitor bitrise builds with meercode: an admin app’s team enable meercode add-on app. once add-on enabled, team members app authorize account. integrating meercode with personal access token previously, integrate meercode using bitrise personal access token meercode’s website. this method longer works! to monitor builds with meercode, need add-on. enabling meercode app please note users with admin role app's team enable add-on app. read user roles: user roles on app teams" });
this.add({id:535, 
title:"Enabling the add-on as an admin", 
body:" enabling add-on admin to enable add-on specific app: log bitrise account. on dashboard, app need. click app settings . on left, select add-ons menu options. below meercode , click enable add-on button. in pop-up window, see access rights add-on needs. click enable add-on grant rights. " });
this.add({id:536, 
title:"Authorizing the add-on as a user", 
body:" authorizing add-on user after admin enables meercode add-on, user app’s team authorize add-on account. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. next meercode , click open add-on button. on page, see access rights add-on needs. click authorize add-on grant rights. " });
this.add({id:537, 
title:"Revoking authorization on Meercode", 
body:" revoking authorization meercode every user app’s team revoke token meercode add-on app. go security tab personal account. scroll authorized add-ons . click revoke revoke access token meercode. once you’ve revoked token, won’t access add-on any more, unless re-authorize add-on. " });
this.add({id:538, 
title:"Disabling Meercode", 
body:" disabling meercode only workspace admin disable meercode add-on app’s members. here how: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. click disable add-on meercode confirm pop-up window. once it’s done, access add-on any more, unless enabled admin. " });
this.add({id:539, 
title:"Accessing build data and insights with Meercode", 
body:" accessing build data insights with meercode to monitor builds: log meercode account. open dashboard tab left menu see overview running completed builds. on page, see builds progress. you monitor current duration estimated completion time. below that, completed builds listed cards. on card, see completion status information build 10 runs. the share button top-right corner allows create public links view dashboard. these secret securely shared with team members. to access build insights meercode: open insights tab access reports summarized historical build data. use filters page limit results given date range, provider organization. " });
this.add({id:509, 
title:"Build logs", 
body:" build logs on bitrise, build logs easily accessible: viewed website entirety downloaded view device. build logs allow users analyze builds went wrong - right! on bitrise, build easily accessible: viewed website entirety downloaded view device. build retention 200 days on builds page app, builds 200 days. the limit applies searching specific builds page. this limitation applies api calls: get\/apps\/{app-slug}\/builds endpoint related endpoints return builds 200 days. however, methods build older than 200 days: if know exact build url, access build. you use get\/apps\/{app-slug}\/archived-builds api endpoint: listing the archived builds of an app . " });
this.add({id:510, 
title:"Finding a build log", 
body:" finding build log when run build, build log generated automatically. every log, with unique url. the url contains slug: hexadecimal identifier specific build. assisting bitrise support when bitrise support asks build logs, best thing send url. find app dashboard, select it. on app's main page, select build want check out. make sure log tab selected. on log tab, see steps workflow status. by default, failed expanded. expand any step's info clicking downward arrow right step. this relevant build log. " });
this.add({id:511, 
title:"The build log page", 
body:" the build log page the build log page shows steps build, status. by default, failed expanded, with error message highlighted convenient troubleshooting. expanding step allows see: the start time step's run. the step id. this how bitrise.yml configuration file identifies step. for information, see step reference\/id format . the current version step. underneath number, check release notes if build didn't run with latest step, click update open workflow editor update step different version. under step resources , check step's documentation integrations page, source code issue tracker github. to view build log's contents full, single file, download log . " });
this.add({id:512, 
title:"Following a build log live", 
body:" following build log live you check log build live - is, running. what’s more, follow happening. that means progresses, automatically scroll new sections appear. to so: start build. go build’s page. scroll log. click follow . to stop following, just need manually navigate log. you restart following any time. " });
this.add({id:513, 
title:"Downloading a build log", 
body:" downloading build log if need send build logs people access app bitrise, want store archives, simply download log file bitrise. log security please note build log contain sensitive information! make sure check contents downloading file sending anyone. we recommend using secrets make sure sensitive appears build logs. find app dashboard, select it. on app's main page, select build want check out. open logs dropdown menu click download logs button. " });
this.add({id:514, 
title:"Deleting a build log", 
body:" deleting build log if necessary, delete logs any build bitrise. it handy if, example, want new team members see potentially sensitive information displayed previous logs. not team members authorized delete logs: with admin owner role team it. deletion final be aware undo deleting log. once delete it, way recover log file. find app dashboard, select it. on app's main page, select build want check out. open logs dropdown menu click delete logs button. in pop-up window, click delete logs . " });
this.add({id:510, 
title:"Finding a build log", 
body:" finding build log when run build, build log generated automatically. every log, with unique url. the url contains slug: hexadecimal identifier specific build. assisting bitrise support when bitrise support asks build logs, best thing send url. find app dashboard, select it. on app's main page, select build want check out. make sure log tab selected. on log tab, see steps workflow status. by default, failed expanded. expand any step's info clicking downward arrow right step. this relevant build log. " });
this.add({id:511, 
title:"The build log page", 
body:" the build log page the build log page shows steps build, status. by default, failed expanded, with error message highlighted convenient troubleshooting. expanding step allows see: the start time step's run. the step id. this how bitrise.yml configuration file identifies step. for information, see step reference\/id format . the current version step. underneath number, check release notes if build didn't run with latest step, click update open workflow editor update step different version. under step resources , check step's documentation integrations page, source code issue tracker github. to view build log's contents full, single file, download log . " });
this.add({id:512, 
title:"Following a build log live", 
body:" following build log live you check log build live - is, running. what’s more, follow happening. that means progresses, automatically scroll new sections appear. to so: start build. go build’s page. scroll log. click follow . to stop following, just need manually navigate log. you restart following any time. " });
this.add({id:513, 
title:"Downloading a build log", 
body:" downloading build log if need send build logs people access app bitrise, want store archives, simply download log file bitrise. log security please note build log contain sensitive information! make sure check contents downloading file sending anyone. we recommend using secrets make sure sensitive appears build logs. find app dashboard, select it. on app's main page, select build want check out. open logs dropdown menu click download logs button. " });
this.add({id:514, 
title:"Deleting a build log", 
body:" deleting build log if necessary, delete logs any build bitrise. it handy if, example, want new team members see potentially sensitive information displayed previous logs. not team members authorized delete logs: with admin owner role team it. deletion final be aware undo deleting log. once delete it, way recover log file. find app dashboard, select it. on app's main page, select build want check out. open logs dropdown menu click delete logs button. in pop-up window, click delete logs . " });
this.add({id:515, 
title:"Remote access", 
body:" remote access remote access allows users connect build’s virtual machines ssh screenshare app, build's build details page. remote access allows users connect build’s virtual machines ssh screenshare app. a failed build rebuilt with remote enabled make troubleshooting lot easier - example, logs don’t provide information error. you rebuild standalone builds pipeline builds with remote access. authorization users testers\/qa roles app cannot use remote access. there ways use remote access build machines: ssh : available linux\/docker based macos machines. screenshare : available macos machines. it uses vnc system. with method, access build machine remotely 10 minutes finished. if like extend availability remote access, so adding simple custom script step failed step. check extending the availability of remote access information. build time when using remote access, 10 minutes added overall build time. " });
this.add({id:516, 
title:"Remote access with SSH", 
body:" remote access with ssh to access bitrise build machine with ssh, need command line interface correct password: open app bitrise. on main page app, build want re-run with remote access click it. on rebuild button, click downward arrow open dropdown menu. select rebuild with remote access . this starts new build access remotely. in ssh section, command run command line interface. and done! you able access virtual machine build running. " });
this.add({id:517, 
title:"Remote access with screenshare", 
body:" remote access with screenshare to access bitrise build machine with screenshare app, need correct username, password, address, vnc app: macos remote access with screenshare available workflows run macos-based stack . if workflow's stack (or absence workflow-specific stacks, app's default stack) linux-based one, won't see screenshare instructions all. open app bitrise. on main page app, build want re-run with remote access click it. on rebuild button, click downward arrow open dropdown menu. select rebuild with remote access . this starts new build access remotely. under screenshare option, required information: address username password open vnc screenshare application. the simplest option using default screen sharing application macos. fill required fields with information screenshare option. and done! you able access virtual machine build running. " });
this.add({id:518, 
title:"Finding your files on the VM", 
body:" finding files vm once successfully logged bitrise virtual machine ran build, dive files see what’s happening real time. after finished cloning app vm, access following location: \/users\/vagrant\/git " });
this.add({id:519, 
title:"Extending the availability of remote access", 
body:" extending availability remote access remote access available build running 10 minutes finished. if enough, there’s simple workaround make sure remote longer time. add script step causes build fail. toggle run previous step failed option ensure script step runs. add command let build “sleep” time specified seconds: sleep 5400 this example lets build run 90 minutes. it than time limit, course. that’s it. while build running, look virtual machine possible issues caused fail. " });
this.add({id:516, 
title:"Remote access with SSH", 
body:" remote access with ssh to access bitrise build machine with ssh, need command line interface correct password: open app bitrise. on main page app, build want re-run with remote access click it. on rebuild button, click downward arrow open dropdown menu. select rebuild with remote access . this starts new build access remotely. in ssh section, command run command line interface. and done! you able access virtual machine build running. " });
this.add({id:517, 
title:"Remote access with screenshare", 
body:" remote access with screenshare to access bitrise build machine with screenshare app, need correct username, password, address, vnc app: macos remote access with screenshare available workflows run macos-based stack . if workflow's stack (or absence workflow-specific stacks, app's default stack) linux-based one, won't see screenshare instructions all. open app bitrise. on main page app, build want re-run with remote access click it. on rebuild button, click downward arrow open dropdown menu. select rebuild with remote access . this starts new build access remotely. under screenshare option, required information: address username password open vnc screenshare application. the simplest option using default screen sharing application macos. fill required fields with information screenshare option. and done! you able access virtual machine build running. " });
this.add({id:518, 
title:"Finding your files on the VM", 
body:" finding files vm once successfully logged bitrise virtual machine ran build, dive files see what’s happening real time. after finished cloning app vm, access following location: \/users\/vagrant\/git " });
this.add({id:519, 
title:"Extending the availability of remote access", 
body:" extending availability remote access remote access available build running 10 minutes finished. if enough, there’s simple workaround make sure remote longer time. add script step causes build fail. toggle run previous step failed option ensure script step runs. add command let build “sleep” time specified seconds: sleep 5400 this example lets build run 90 minutes. it than time limit, course. that’s it. while build running, look virtual machine possible issues caused fail. " });
this.add({id:520, 
title:"Debugging your build on your own machine", 
body:" debugging build machine if build fails bitrise, recommend try run locally. to debug: use clean git clone, machine with bitrise cli. if build fails bitrise, recommend try run locally, machine. to this, following: do clean git clone project’s online repository. run build machine with bitrise cli. this helps eliminate, things, common issue: uncommitted gitignored files working directory haven’t committed git repository online available bitrise clones running build. other possible issues include: code signing files present local machine uploaded bitrise. a difference version tool(s) used build. android projects if can’t reproduce issue locally, want delete $home\/.gradle (hidden) directory, clear gradle caches. (quick terminal \/ command line command: rm -rf $home\/.gradle ). run docker clean git clone if project uses android\/linux environment, download use exact environment build running bitrise.io . ideally, first clean git clone run docker there, so files .gitignore won’t affect build, build run way bitrise.io . " });
this.add({id:521, 
title:"Testing with a full clean git clone", 
body:" testing with clean git clone open terminal \/ command line interface machine. type in: cd \/tmp clone repository with: git clone repourl .\/quick-repo-test --branch branch-you-want-to-test : git clone https:\/\/github.com\/bitrise-io\/bitrise.git .\/quick-repo-test --branch master type cd .\/quick-repo-test. run commands want test, build project, open project file directory. " });
this.add({id:522, 
title:"Testing with the Bitrise CLI", 
body:" testing with bitrise cli after doing clean git clone, run build locally, using bitrise cli . install bitrise cli . download app’s bitrise.yml file bitrise.io . run build with: bitrise run <workflow-name> (for example, bitrise run primary ). this help reproducing issues cases, allows attempt debug machine. if build succeeds conditions fails bitrise, contact support! " });
this.add({id:521, 
title:"Testing with a full clean git clone", 
body:" testing with clean git clone open terminal \/ command line interface machine. type in: cd \/tmp clone repository with: git clone repourl .\/quick-repo-test --branch branch-you-want-to-test : git clone https:\/\/github.com\/bitrise-io\/bitrise.git .\/quick-repo-test --branch master type cd .\/quick-repo-test. run commands want test, build project, open project file directory. " });
this.add({id:522, 
title:"Testing with the Bitrise CLI", 
body:" testing with bitrise cli after doing clean git clone, run build locally, using bitrise cli . install bitrise cli . download app’s bitrise.yml file bitrise.io . run build with: bitrise run <workflow-name> (for example, bitrise run primary ). this help reproducing issues cases, allows attempt debug machine. if build succeeds conditions fails bitrise, contact support! " });
this.add({id:523, 
title:"GitHub Checks with the Bitrise GitHub App", 
body:" github checks with bitrise app bitrise checks github app provides extended version classic status checks sends github. github app integration if use bitrise github app connect workspace account organization, don't need described section: checks automatically work provide status updates. you can, however, continue use oauth connection apps github checks with app. the bitrise github app provides, things, extended version classic build status checks sends github. this includes summary check status. you view click details link pull request github. it unfolds detailed build summary status github app attaches checks tab github. there different check statuses: success. failed. action required (in case manual pull request approval). to start using bitrise checks, need perform separate actions: install bitrise checks : install github app repository. this necessary github.com users. enterprise server users set integration proceed enable bitrise checks. enable bitrise checks : turn feature bitrise website run first build able select checks branch protection rules. " });
this.add({id:524, 
title:"Installing Bitrise Checks", 
body:" installing bitrise checks to use bitrise checks github.com user, need install github app. if workspace owns bitrise app github app connected granted access app's repository, don't need install enable checks: just start using it. github.com users if github enterprise server user, don't need procedure. to enable bitrise checks, to: install github enterprise server integration . enable github checks bitrise . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. click install bitrise checks app github repository link toggle. don’t toggle switch just yet, first need install bitrise checks. this link github's bitrise checks installation page. on install bitrise checks page, select user github organization want add bitrise checks to. select option install bitrise checks to: all repositories : applies current future repositories. only select repositories : select repositories need. with this, authorize bitrise checks act behalf; example, check repos access to, use github display results. click install authorize . in github prompt, provide password. if goes well, land bitrise checks page github. you see blue note top-left corner bitrise checks successfully installed github account. " });
this.add({id:525, 
title:"Enabling GitHub Checks on Bitrise", 
body:" enabling github checks bitrise once bitrise checks installed github, need enable github checks app’s page bitrise . enabling github checks limited please note workspace owners app admins enable toggle app settings page app. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. scroll toggle github checks switch. can't toggle switch? if can't toggle switch, check can't enable github checks . trigger build. you so automatically manually. if trigger build manually, provide specific commit hash this build necessary perform first bitrise check. once finished check, select checks branch protection rules. and you’re done! now any pull request open app github validated with bitrise checks build automatically started (if pull request trigger properly set bitrise). you easily app’s page bitrise. if click build summary view details bitrise checks link checks tab, you’ll quickly app’s build page. " });
this.add({id:526, 
title:"Can't enable GitHub Checks", 
body:" can't enable github checks there main reasons able toggle switch enable github checks: you toggle switch unless install bitrise checks first. once it’s done, ahead right enable it. if renamed moved github repository app added bitrise installed checks it. the repository’s url obviously changed. github checks switch work url github bitrise fully match (no redirect allowed). so case, manually update repository url app . " });
this.add({id:527, 
title:"Switching to Bitrise Checks from previous CI checks", 
body:" switching bitrise checks previous ci checks if using status checks pull requests prior merging, ci\/bitrise\/... check system. to able use bitrise checks, manually switch ci\/bitrise\/... bitrise access detailed checks. let’s see how! go settings tab repository. click branches menu. under require status checks pass merging , see ci\/bitrise\/... selected checks system. select bitrise instead ci\/bitrise\/... . merge pull request. " });
this.add({id:528, 
title:"Disabling GitHub Checks", 
body:" disabling github checks you easily disable github checks bitrise toggle enable github checks switch left settings page app. if decide uninstall bitrise checks github account, click uninstall button install github apps page. " });
this.add({id:529, 
title:"GitHub Checks test summary", 
body:" github checks test summary if app’s repository contains any ui unit tests, run tests using appropriate testing steps workflow, add deploy bitrise.io step, test results displayed test reports page see github checks, too. for example, android app, use virtual unit testing android step able see test results github checks. " });
this.add({id:530, 
title:"Step by Step error report", 
body:" step error report if ci build runs, github checks' test summary displays steps' successful failed tests separate tabs left sidebar. click step, detailed report comes number listed with actionable error report. the available bitrise tab. please note github checks' test summary print detailed information following steps: xcode test ios android unit test ios device testing virtual device testing android flutter test you export test results generated any step deploy bitrise.io step ways: we strongly recommend using export test results test reports add-on step: step locates test results based inputs. you configure custom script step creates exports necessary files. " });
this.add({id:531, 
title:"Checking the test results of a failed Step", 
body:" checking test results failed step if build failed tests, how access github checks: click bitrise checks dropdown. click step view error report specific step. you click steps build summary. the view details bitrise checks link takes build page bitrise. " });
this.add({id:532, 
title:"Re-running a build using GitHub checks", 
body:" re-running build using github checks role requirement to re-run build using github checks, github account connected bitrise , need developer role app's team. if conditions met, re-run checks fail error. for complete list user roles role cheatsheets, check  user roles app teams . if like re-run build using github checks: open pull request github like re-run checks. open checks tab. click re-run checks . " });
this.add({id:524, 
title:"Installing Bitrise Checks", 
body:" installing bitrise checks to use bitrise checks github.com user, need install github app. if workspace owns bitrise app github app connected granted access app's repository, don't need install enable checks: just start using it. github.com users if github enterprise server user, don't need procedure. to enable bitrise checks, to: install github enterprise server integration . enable github checks bitrise . open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. click install bitrise checks app github repository link toggle. don’t toggle switch just yet, first need install bitrise checks. this link github's bitrise checks installation page. on install bitrise checks page, select user github organization want add bitrise checks to. select option install bitrise checks to: all repositories : applies current future repositories. only select repositories : select repositories need. with this, authorize bitrise checks act behalf; example, check repos access to, use github display results. click install authorize . in github prompt, provide password. if goes well, land bitrise checks page github. you see blue note top-left corner bitrise checks successfully installed github account. " });
this.add({id:525, 
title:"Enabling GitHub Checks on Bitrise", 
body:" enabling github checks bitrise once bitrise checks installed github, need enable github checks app’s page bitrise . enabling github checks limited please note workspace owners app admins enable toggle app settings page app. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select integrations menu options. scroll toggle github checks switch. can't toggle switch? if can't toggle switch, check can't enable github checks . trigger build. you so automatically manually. if trigger build manually, provide specific commit hash this build necessary perform first bitrise check. once finished check, select checks branch protection rules. and you’re done! now any pull request open app github validated with bitrise checks build automatically started (if pull request trigger properly set bitrise). you easily app’s page bitrise. if click build summary view details bitrise checks link checks tab, you’ll quickly app’s build page. " });
this.add({id:526, 
title:"Can't enable GitHub Checks", 
body:" can't enable github checks there main reasons able toggle switch enable github checks: you toggle switch unless install bitrise checks first. once it’s done, ahead right enable it. if renamed moved github repository app added bitrise installed checks it. the repository’s url obviously changed. github checks switch work url github bitrise fully match (no redirect allowed). so case, manually update repository url app . " });
this.add({id:527, 
title:"Switching to Bitrise Checks from previous CI checks", 
body:" switching bitrise checks previous ci checks if using status checks pull requests prior merging, ci\/bitrise\/... check system. to able use bitrise checks, manually switch ci\/bitrise\/... bitrise access detailed checks. let’s see how! go settings tab repository. click branches menu. under require status checks pass merging , see ci\/bitrise\/... selected checks system. select bitrise instead ci\/bitrise\/... . merge pull request. " });
this.add({id:528, 
title:"Disabling GitHub Checks", 
body:" disabling github checks you easily disable github checks bitrise toggle enable github checks switch left settings page app. if decide uninstall bitrise checks github account, click uninstall button install github apps page. " });
this.add({id:529, 
title:"GitHub Checks test summary", 
body:" github checks test summary if app’s repository contains any ui unit tests, run tests using appropriate testing steps workflow, add deploy bitrise.io step, test results displayed test reports page see github checks, too. for example, android app, use virtual unit testing android step able see test results github checks. " });
this.add({id:530, 
title:"Step by Step error report", 
body:" step error report if ci build runs, github checks' test summary displays steps' successful failed tests separate tabs left sidebar. click step, detailed report comes number listed with actionable error report. the available bitrise tab. please note github checks' test summary print detailed information following steps: xcode test ios android unit test ios device testing virtual device testing android flutter test you export test results generated any step deploy bitrise.io step ways: we strongly recommend using export test results test reports add-on step: step locates test results based inputs. you configure custom script step creates exports necessary files. " });
this.add({id:531, 
title:"Checking the test results of a failed Step", 
body:" checking test results failed step if build failed tests, how access github checks: click bitrise checks dropdown. click step view error report specific step. you click steps build summary. the view details bitrise checks link takes build page bitrise. " });
this.add({id:532, 
title:"Re-running a build using GitHub checks", 
body:" re-running build using github checks role requirement to re-run build using github checks, github account connected bitrise , need developer role app's team. if conditions met, re-run checks fail error. for complete list user roles role cheatsheets, check  user roles app teams . if like re-run build using github checks: open pull request github like re-run checks. open checks tab. click re-run checks . " });
this.add({id:530, 
title:"Step by Step error report", 
body:" step error report if ci build runs, github checks' test summary displays steps' successful failed tests separate tabs left sidebar. click step, detailed report comes number listed with actionable error report. the available bitrise tab. please note github checks' test summary print detailed information following steps: xcode test ios android unit test ios device testing virtual device testing android flutter test you export test results generated any step deploy bitrise.io step ways: we strongly recommend using export test results test reports add-on step: step locates test results based inputs. you configure custom script step creates exports necessary files. " });
this.add({id:531, 
title:"Checking the test results of a failed Step", 
body:" checking test results failed step if build failed tests, how access github checks: click bitrise checks dropdown. click step view error report specific step. you click steps build summary. the view details bitrise checks link takes build page bitrise. " });
this.add({id:532, 
title:"Re-running a build using GitHub checks", 
body:" re-running build using github checks role requirement to re-run build using github checks, github account connected bitrise , need developer role app's team. if conditions met, re-run checks fail error. for complete list user roles role cheatsheets, check  user roles app teams . if like re-run build using github checks: open pull request github like re-run checks. open checks tab. click re-run checks . " });
this.add({id:533, 
title:"Meercode", 
body:" meercode the meercode add-on was sunset february 1, 2023. check bitrise insights free alternative monitor build, test, credit data. meercode deprecation notice the meercode add-on was sunset february 1, 2023. check bitrise insights free alternative monitor build, test, credit data. " });
this.add({id:534, 
title:"Integrating Meercode with Bitrise", 
body:" integrating meercode with bitrise to monitor bitrise builds with meercode: an admin app’s team enable meercode add-on app. once add-on enabled, team members app authorize account. integrating meercode with personal access token previously, integrate meercode using bitrise personal access token meercode’s website. this method longer works! to monitor builds with meercode, need add-on. enabling meercode app please note users with admin role app's team enable add-on app. read user roles: user roles on app teams" });
this.add({id:535, 
title:"Enabling the add-on as an admin", 
body:" enabling add-on admin to enable add-on specific app: log bitrise account. on dashboard, app need. click app settings . on left, select add-ons menu options. below meercode , click enable add-on button. in pop-up window, see access rights add-on needs. click enable add-on grant rights. " });
this.add({id:536, 
title:"Authorizing the add-on as a user", 
body:" authorizing add-on user after admin enables meercode add-on, user app’s team authorize add-on account. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. next meercode , click open add-on button. on page, see access rights add-on needs. click authorize add-on grant rights. " });
this.add({id:537, 
title:"Revoking authorization on Meercode", 
body:" revoking authorization meercode every user app’s team revoke token meercode add-on app. go security tab personal account. scroll authorized add-ons . click revoke revoke access token meercode. once you’ve revoked token, won’t access add-on any more, unless re-authorize add-on. " });
this.add({id:538, 
title:"Disabling Meercode", 
body:" disabling meercode only workspace admin disable meercode add-on app’s members. here how: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. click disable add-on meercode confirm pop-up window. once it’s done, access add-on any more, unless enabled admin. " });
this.add({id:539, 
title:"Accessing build data and insights with Meercode", 
body:" accessing build data insights with meercode to monitor builds: log meercode account. open dashboard tab left menu see overview running completed builds. on page, see builds progress. you monitor current duration estimated completion time. below that, completed builds listed cards. on card, see completion status information build 10 runs. the share button top-right corner allows create public links view dashboard. these secret securely shared with team members. to access build insights meercode: open insights tab access reports summarized historical build data. use filters page limit results given date range, provider organization. " });
this.add({id:534, 
title:"Integrating Meercode with Bitrise", 
body:" integrating meercode with bitrise to monitor bitrise builds with meercode: an admin app’s team enable meercode add-on app. once add-on enabled, team members app authorize account. integrating meercode with personal access token previously, integrate meercode using bitrise personal access token meercode’s website. this method longer works! to monitor builds with meercode, need add-on. enabling meercode app please note users with admin role app's team enable add-on app. read user roles: user roles on app teams" });
this.add({id:535, 
title:"Enabling the add-on as an admin", 
body:" enabling add-on admin to enable add-on specific app: log bitrise account. on dashboard, app need. click app settings . on left, select add-ons menu options. below meercode , click enable add-on button. in pop-up window, see access rights add-on needs. click enable add-on grant rights. " });
this.add({id:536, 
title:"Authorizing the add-on as a user", 
body:" authorizing add-on user after admin enables meercode add-on, user app’s team authorize add-on account. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. next meercode , click open add-on button. on page, see access rights add-on needs. click authorize add-on grant rights. " });
this.add({id:537, 
title:"Revoking authorization on Meercode", 
body:" revoking authorization meercode every user app’s team revoke token meercode add-on app. go security tab personal account. scroll authorized add-ons . click revoke revoke access token meercode. once you’ve revoked token, won’t access add-on any more, unless re-authorize add-on. " });
this.add({id:538, 
title:"Disabling Meercode", 
body:" disabling meercode only workspace admin disable meercode add-on app’s members. here how: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. click disable add-on meercode confirm pop-up window. once it’s done, access add-on any more, unless enabled admin. " });
this.add({id:535, 
title:"Enabling the add-on as an admin", 
body:" enabling add-on admin to enable add-on specific app: log bitrise account. on dashboard, app need. click app settings . on left, select add-ons menu options. below meercode , click enable add-on button. in pop-up window, see access rights add-on needs. click enable add-on grant rights. " });
this.add({id:536, 
title:"Authorizing the add-on as a user", 
body:" authorizing add-on user after admin enables meercode add-on, user app’s team authorize add-on account. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. next meercode , click open add-on button. on page, see access rights add-on needs. click authorize add-on grant rights. " });
this.add({id:537, 
title:"Revoking authorization on Meercode", 
body:" revoking authorization meercode every user app’s team revoke token meercode add-on app. go security tab personal account. scroll authorized add-ons . click revoke revoke access token meercode. once you’ve revoked token, won’t access add-on any more, unless re-authorize add-on. " });
this.add({id:538, 
title:"Disabling Meercode", 
body:" disabling meercode only workspace admin disable meercode add-on app’s members. here how: open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select add-ons menu options. click disable add-on meercode confirm pop-up window. once it’s done, access add-on any more, unless enabled admin. " });
this.add({id:539, 
title:"Accessing build data and insights with Meercode", 
body:" accessing build data insights with meercode to monitor builds: log meercode account. open dashboard tab left menu see overview running completed builds. on page, see builds progress. you monitor current duration estimated completion time. below that, completed builds listed cards. on card, see completion status information build 10 runs. the share button top-right corner allows create public links view dashboard. these secret securely shared with team members. to access build insights meercode: open insights tab access reports summarized historical build data. use filters page limit results given date range, provider organization. " });
this.add({id:540, 
title:"Code signing", 
body:" code signing during bitrise build, digitally sign app regardless platform. dedicated steps android ios code signing procedures. code signing process digitally app , means guaranteeing code altered signing. it provides security deployment, identifies author. to deploy mobile apps online store, google play app store, code signing absolutely crucial. on bitrise, tried make easy convenient possible. " });
this.add({id:541, 
title:"iOS code signing", 
body:" ios code signing every ios app, native cross-platform, needs code signing . at minimum, files required: a provisioning profile. a signing certificate. these files apple's process obtained with apple developer account. on bitrise, help manage assets: the steps support automatic code signing asset management , automatically download provisioning profiles fix common issues set api key apple id connection . for manual code signing asset management , manually upload code signing certificate provisioning profile bitrise add certificate profile installer step with build step. " });
this.add({id:542, 
title:"Android code signing", 
body:" android code signing android code signing handled dedicated step, studio, gradle configuration. to sign android app, need keystore file requires google play developer account, api access. " });
this.add({id:543, 
title:"Android code signing", 
body:" android code signing before distribute android app google play store , apk aab file digitally signed. you use dedicated bitrise step perform code signing with gradle configuration. before distribute app google play store , apk file digitally signed. you specify code signing configuration project android studio manually gradle configuration. use android sign step bitrise workflow editor apk signed automatically. " });
this.add({id:544, 
title:"Android code signing using the Android Sign Step", 
body:" android code signing using sign step you create signed apk using the  android sign  step bitrise workflow. this step configured run uploaded keystore file the code signing tab workflow editor. you create signed apk using the  android sign   step bitrise workflow . this step configured run uploaded keystore file bitrise. the  android sign  step required signing configured project’s build.gradle file. if so, running the  android build step (or the  gradle runner  step) signs output (apk aab) automatically. nevertheless, recommend use the  android sign  step sign project easy secure way. jarsign apksigner apks signed with jarsigner apksigner . for apks, wish use apksigner sign project, the android sign step first set enables apksigner input true leave the apk signature scheme input automatic. this way apksigner checks apk’s minimum target sdk versions chooses required schemes. it signs project with v1 scheme supported version low schemes newer systems. please note aab files signed with jarsigner. the step uses jarsigner detects file ending with  .aab upload keystore file bitrise . add android sign step workflow builds apk aab file. bitrise uses environment variables sets inputs respective fields the  android sign  step. once step runs, produces signed apk aab. the aab used deploy steps, example,  google play deploy  step the  deploy to bitrise.io  step. the latter deploys apk\/aab artifacts  tab. you also use ship deploy app once built apk\/aab file. downloading keystore file you can download keystore file to project directory using the  file downloader  step: - file-downloader:\n inputs:\n source: $bitriseio_android_keystore_url\n destination: \"$home\/keystores\/my_keystore.jks\" #native android# if step requires keystore file, make sure include after file downloader step. after step,  my_keystore.jks  will available at  $home\/keystores\/my_keystore.jks . " });
this.add({id:545, 
title:"Android code signing with Android Studio", 
body:" android code signing with studio you specify code signing configuration project android studio running bitrise build. you need keystore file, key alias password. you specify code signing configuration project android studio . you need keystore file, key alias password - ready start procedure! open android studio. go project navigator . select project open module settings . from modules , select module. on signing tab, signing information. in example, used following values: name: release key alias: myandroidkey key password: *** store file: \/path\/to\/my\/keystore.jks store password: *** once filled signing information, signingconfigs block created module’s build.gradle file. on bitrise, just need build app, with android build gradle runner step. " });
this.add({id:546, 
title:"Android code signing in Gradle", 
body:" android code signing gradle you manually specify code signing configuration gradle so app gets signed build process bitrise. you manually specify code signing configuration gradle so app gets signed build process. open module-level build.gradle file. add signingconfigs codeblock code define following entries specific project: storefiled storepassword keyalias keypassword attach signing config build type. build app bitrise. for information, check how configure gradle sign app . signing configuration build.gradle file in example, keystore path locally bitrise.io ensure build use keystore file. android {\n \/\/ make sure signingconfigs defined buildtypes.\n { \n \t release keyalias 'myandroidkey' keypassword '***' storefile file(\"\/path\/to\/my\/keystore.jks\") storepassword } \n\n buildtypes use signing config build type\n signingconfig signingconfigs.release\n ...\n }\n ... using environment variables build.gradle file you avoid having keystore path locally bitrise.io using configuration values environment variables keystore path ( storefile ) keystore password. you use system.getenv(\"env_key\") file access environment variables build.gradle file. make sure define environment variables use build.gradle file bitrise.io well. if keystore path $home\/keystores\/my_keystore.jks , build.gradle file look like this: android { \n signingconfigs \t release keyalias 'myandroidkey' keypassword '***' storefile file(system.getenv(\"home\") + \"\/keystores\/my_keystore.jks\")\n storepassword } ... you download keystore file using file downloader step , using $home\/keystores\/my_keystore.jks destination path. if use environment variables keypassword storepassword code signing tab, build.gradle look like this: android {\n signingconfigs release keyalias system.getenv(\"bitriseio_android_keystore_alias\")\n keypassword system.getenv(\"bitriseio_android_keystore_private_key_password\")\n storefile file(system.getenv(\"home\") + \"\/keystores\/my_keystore.jks\")\n storepassword system.getenv(\"bitriseio_android_keystore_password\")\n }\n \n buildtypes \/\/ use signing config build type\n signingconfig signingconfigs.release\n ...\n ... " });
this.add({id:547, 
title:"Downloading a keystore file from Bitrise during a build", 
body:" downloading keystore file bitrise build you define location keystore file android app build.gradle file. if keystore file itself missing location, use downloading steps download bitrise defined location. a keystore file required android code signing. you define location app build.gradle file: android code signing in gradle . you upload keystore file bitrise use file downloader step download keystore file bitrise location defined build.gradle file. the android sign step if use android sign step sign app, don't need download keystore file. the file: android code signing using the android sign step . add file downloader step workflow. the added before any requires keystore file, gradle runner . fill following input fields: download source url : set generated keystore url upload file bitrise ). download destination path : set location keystore file relative path. this path defined build.gradle file (for example, $home\/keystores\/project_release.keystore ). add gradle runner step right file downloading step. with said, successfully added steps download keystore file location specified build.gradle file, need android sign step workflow. our gradle runner step sign assemble project. " });
this.add({id:548, 
title:"iOS code signing", 
body:" ios code signing to install ios app new device distribute app store, need provide code signing files. the projects requires certificates issued apple provisioning profile file(s) matching project. to install ios app new device distribute app app store , need provide code signing files. the ios projects requires: signing certificates issued apple. provisioning profile file(s) matching project (team id, bundle so on). setting ios code signing bitrise methods how works when use automatically managed provisioning profiles (recommended) you need upload code signing certificate(s) bitrise establish apple service connection (either app store connect api key apple id). bitrise download, create renew provisioning profile(s) handle id test device registration automatically. this recommended option apps. with option, managing provisioning profiles seamless it's easier set workflows. manually managed provisioning profiles you need upload code signing certificate(s) provisioning profile(s) bitrise updated with ios project. choose option if: you connect app store connect api key apple id bitrise. you store handle code signing files unique way. you wish use code signing files multiple apple developer accounts. you prefer option using account with apple developer enterprise program. in case id-based authentication supported. this certain limitations: example, needs renewed 30 days. " });
this.add({id:549, 
title:"Collecting and exporting code signing files with codesigndoc", 
body:" collecting exporting code signing files with codesigndoc the open source codesigndoc tool runs clean xcode archive mac, analyzes generated archive file. it collects code signing settings used process, prints list required files. you search for, export upload files using codesigndoc. the open source codesigndoc tool runs clean xcode archive mac, analyzes generated archive file. it collects code signing settings used process, prints list required files. you search for, export upload files using codesigndoc . if project contains uitest targets, codesigndoc scan those, too. it runs xcodebuild build-for-testing action create test-runner.app , exports necessary code signing files. " });
this.add({id:550, 
title:"Collecting and uploading the files with codesigndoc", 
body:" collecting uploading files with codesigndoc you use codesigndoc for: xcode projects. the app does native ios app: use tool with app built third-party framework, flutter, .xcodeproj .xcworkspace file. you install latest version codesigndoc with simple one-liner manually download install specific version want use: in example, we’ll use one-liners. open terminal . go project’s folder. enter appropriate one-liner command, depending project type. for xcode project: bash -l -c \"$(curl -sfl https:\/\/raw.githubusercontent.com\/bitrise-io\/codesigndoc\/master\/_scripts\/install_wrap-xcode.sh)\" the tool automatically scan project look .xcodeproj .xcworkspace file rest. if scanner does files, open finder.app drag-and-drop project’s .xcodeproj .xcworkspace file command line terminal. once code signing files collected, codesigndoc ask wish upload files bitrise: do want upload provisioning profiles certificates bitrise? [yes\/no] : if wish upload files with codesigndoc , type yes press enter . provide bitrise access token: please copy personal access token bitrise.\n(to acquire personal access token user, sign with user bitrise.io,\ngo account settings page, select security tab left side.) : personal access tokens select bitrise project target collected files: fetching application list bitrise...\nselect app want upload provisioning profiles\nplease select list:\n that’s all, done! automatic code signing asset management for automatic code signing asset management, recommend use building steps : xcode archive export ios . export ios tvos xcode archive . xcode build testing ios . you install run codesigndoc manually. for information, check tool’s readme ! " });
this.add({id:551, 
title:"Scanning for UITest targets", 
body:" scanning uitest targets if xcode project uitest targets, use codesigndoc export necessary code signing files generate .xctestrun file. you need want run ui tests real devices with help bitrise - example, ios device testing step. make sure scheme valid uitest target enabled. open terminal . use one-liner launch scanner export required code signing files: bash -l -c \"$(curl -sfl https:\/\/raw.githubusercontent.com\/bitrise-tools\/codesigndoc\/master\/_scripts\/install_wrap-xcode-uitests.sh)\" this command runs xcodebuild build-for-testing action create uitest runner .app file, exports necessary code signing files. upload files bitrise with codesigndoc. " });
this.add({id:552, 
title:"Troubleshooting the UITest scanner", 
body:" troubleshooting uitest scanner if uitest scanner desired scheme, follow steps: make sure scheme valid running uitest. it contain uitest target enabled run. refresh project settings: select generic ios device target scheme xcode. clean project: ⌘ cmd + ↑ shift k . run build testing: ⌘ cmd + ↑ shift u . " });
this.add({id:553, 
title:"Manually installing and using codesigndoc", 
body:" manually installing using codesigndoc with manual install, specify version codesigndoc want use. unlike with one-liners used above, install does automatically run scan command folder use in: merely installs tool. check available versions releases page codesigndoc tool. download release want running curl command: note: replace versionnumber with actual number codesigndoc version want. curl -sfl https:\/\/github.com\/bitrise-io\/codesigndoc\/releases\/download\/versionnumber\/codesigndoc-darwin-x86_64 > .\/codesigndoc make downloaded binary executable: chmod +x .\/codesigndoc run scan command any time wish: ## xcode scanner\n.\/codesigndoc scan xcode\n\n## project scanner ui test targets\n.\/codesigndoc xcodeuitests\n " });
this.add({id:554, 
title:"Best practices of using codesigndoc", 
body:" best practices using codesigndoc you accurate result run codesigndoc state repository\/code available clean git clone , state code build server checks (for example, files mac .gitignore , so exists mac repository git clone new mac). so, best results, recommend to: do clean git clone repository (into new directory) mac. run codesigndoc directory (not usually work project). we recommend generating ipa local machine first, run codesigndoc . the reason xcode download update profiles background ipa export. if run codesigndoc exported ipa xcode, codesigndoc able collect files. " });
this.add({id:555, 
title:"iOS code signing with automatic provisioning", 
body:" ios code signing with automatic provisioning automatic code signing means automatically managing provisioning profiles available apple developer portal account. if set form authentication account, bitrise download install profile app build process. on bitrise, we're aiming make ios code signing simple possible you. as such, we've best automate lot process. several steps built-in option automatic code signing management make configuration lot streamlined. automatic code signing context means automatically managing provisioning profiles available apple developer portal account. if set form authentication account, bitrise download install profile app build process. to use feature, need to: upload code signing certificates bitrise. connect apple developer portal account bitrise apple id app store connect api . use steps support automatically managing code signing assets. " });
this.add({id:556, 
title:"Uploading iOS code signing certificates to Bitrise", 
body:" uploading ios code signing certificates bitrise all ios code signing methods require export upload certificates bitrise. generating code signing files if don't necessary code signing files ready, generate new files: generating ios code signing files to upload certificates bitrise, first need export files .p12 file format. once successfully exported files, bitrise. you options: via api . uploading manually. this guide focuses option. upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. to export certificates upload bitrise workflow editor: make sure .p12 certificates exported ready. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu option. click add .p12 file add certificate. in dialog box, drag drop file select code signing certificate section, click section select file want upload. certificate password if certificate protected password, need set password here, too. when done, click continue . check summary okay, click add certificate . " });
this.add({id:557, 
title:"Apple services authentication for automatic provisioning", 
body:" apple services authentication automatic provisioning to advantage bitrise steps offer built-in, automated ios code signing options, need set apple service authentication . for steps, options. apple services authentication options ios code signing authentication method how works when use api key authentication (recommended) you connect app store connect account bitrise using api key. we recommend using option unless account with apple developer enterprise program. if receive option create api key request access greyed out, need contact account holder accept license agreement with apple use authentication. apple id authentication you connect apple id bitrise. if two-factor authentication enabled account, provide app-specific password process. your expires 30 days refresh connection. you use solution if: you access api key any reason. using account with apple developer enterprise program. you consider using manual provisioning . " });
this.add({id:558, 
title:"Configuring the Steps for automatic provisioning", 
body:" configuring steps automatic provisioning there ways handle automatic provisioning bitrise: using official xcode steps manage code signing files build app. using manage ios code signing step. table 22, “ describes use cases methods. to able configure necessary steps, check either: using the xcode stepsusing the manage ios code signing step don't use certificate profile installer step if use automatic provisioning, need certificate profile installer step. steps with automatic provisioning options steps how work when use xcode steps: xcode archive export ios export ios tvos xcode archive xcode build testing ios these steps set code signing xcode project automatically with nearly zero configuration. we recommend using steps scenarios. manage ios code signing step this step set code signing xcode project running build. you use dedicated step if: you building app script fastlane. you cross-platform project. for example, react native, flutter, ionic cordova. you building macos app. " });
this.add({id:559, 
title:"Using the Xcode Steps", 
body:" using xcode steps you use any xcode steps with built-in automatic management code signing assets. set connection apple services. you choose api key authentication apple id authentication . we generally recommend api key authentication. add any following steps workflow, depending need: xcode archive export ios : builds xcode app exports ipa type choose. export ios tvos xcode archive : exports ipa existing archive. xcode build testing ios : builds xcode app with build-for-testing action. set automatic code signing method input apple service authentication type set up. for example, chose api key authentication, choose api-key option. yaml example setting code signing method in example, xcode archive export ios step set use api key authentication. - xcode-archive@4: \n inputs: automatic_code_signing: api-key in cases, default values inputs sufficient set apple connection correctly. " });
this.add({id:560, 
title:"Using the Manage iOS Code Signing Step", 
body:" using manage ios code signing step use dedicated step automatically managing code signing assets use xcode steps build ios app, cross-platform app. add manage ios code signing step any dependency installer workflow, run cocoapods install carthage . set automatic code signing input apple service connection want use. you choose api key authentication apple id authentication . if use apple id authentication, enter team the developer portal team id input. make sure not modify xcode project step. for example, don't change bundle id. add step builds archives app, fastlane step. " });
this.add({id:561, 
title:"iOS code signing with manual provisioning", 
body:" ios code signing with manual provisioning to manage code signing files manually, need upload .p12 certificates app's provisioning profiles bitrise. there multiple ways this. to manage code signing files manually, need upload .p12 certificates app's provisioning profiles bitrise. you need upload developer certificate development type provisioning profile! that necessary xcode steps able test build apps properly. generating code signing files if don't necessary code signing files ready, generate new files: generating ios code signing files to upload code signing files bitrise, first need export .p12 file format. once successfully exported files, bitrise. you options: via api . uploading manually bitrise. this guide focuses option. to manually upload code signing files bitrise: make sure .p12 certificates provisioning profiles exported ready. check exporting ios code signing files information. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu. add files: to add certificate, click add .p12 file button. in dialog box, upload file and, required, provide password certificate. to add provisioning profiles, click add profile(s) button. in dialog box, upload file(s). make sure certificate profile installer step app’s workflow . you check workflow tab workflow editor . please note steps before steps archive export app (for example, xcode archive & export ios ) workflow. " });
this.add({id:562, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:563, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:564, 
title:"Signing an IPA with multiple code signing identities", 
body:" signing ipa with multiple code signing identities you create multiple ipa files with different code signing identities single bitrise build. just need make sure required available use export ios tvos xcode archive step. overview ios code signing asset management for comprehensive overview steps available code signing asset management, visit ios code signing page . you create multiple ipa files with different code signing identities single bitrise build. during development ios app need multiple types distributions different purposes, internal testing deployment app store. the good news does require setting separate workflows bitrise.io . in example we’ll setting workflow create signed ipa files: with development with app-store export method. advanced configuration options the procedure lists bare minimum requirements configure steps export xcode archives. check step workflow editor step's step.yml github see potential configuration options, including limited overriding bitrise-managed automatic code signing recompiling bitcode, using specific .plist file configure exporting. workflow editor bitrise.yml make sure necessary code signing files available build. make sure xcode archive & export ios step workflow. in list input variables, navigate distribution method select development dropdown menu. set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . add export ios tvos xcode archive step workflow. this reuses archive generated xcode archive export ios step does second export archive. set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization. apple-id use apple id authorization. in list input variables, navigate distribution method select app-store dropdown menu. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input development . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development add export-xcarchive step workflow. this reuses archive generated xcode-archive step does second export archive. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development\n export-xcarchive:\n set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization. apple-id use apple id authorization. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development\n export-xcarchive:\n set distribution_method input app-store . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development\n export-xcarchive:\n app-store\n and you’re done! feel free add multiple export ios tvos xcode archive steps workflows create multiple different signed .ipa files necessary. " });
this.add({id:565, 
title:"iOS code signing for Ionic and Cordova projects", 
body:" ios code signing ionic cordova projects bitrise supports manual automatic provisioning ios code signing ionic cordova apps well. naturally, bitrise supports ios applications built with ionic cordova . however, code signing process slightly different compared native xcode project. bitrise supports manual automatic provisioning ionic cordova apps - again, processes somewhat different. " });
this.add({id:566, 
title:"Ionic\/Cordova code signing with manual code signing asset management", 
body:" ionic\/cordova code signing with manual asset management generate native xcode project locally ionic cordova calling cordova platform add ios ionic cordova platform add ios . upload files bitrise.io . make sure certificate profile installer step workflow. add generate cordova build configuration step workflow. it come certificate profile installer step. fill required inputs step. please note code signing identity provisioning profile required inputs ios apps marked such. build configuration : set debug release . code sign identity : enter developer distribution identity. provisioning profile : enter appropriate provisioning profile. packaging type : controls type build generated xcode. set code signing need. add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. this step come generate cordova build configuration step workflow. run build! " });
this.add({id:567, 
title:"Ionic\/Cordova code signing with automatic code signing asset management", 
body:" ionic\/cordova code signing with automatic asset management make sure .p12 signing certificates uploaded bitrise.io . add cordova prepare ionic prepare step workflow. these steps platform rm platform add commands. add manage ios code signing step workflow. if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. the step export: the project’s development team. the installed codesign identity’s name. the installed provisioning profile. one code signing step if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. select apple service connection method (based apple service set bitrise ) distribution method . add generate cordova build configuration step workflow. configure step use code signing settings exported manage ios code signing step: development distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: development code_sign_identity: iphone developer\n configuration: debug\n production distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: app-store code_sign_identity: iphone developer\n configuration: release\n add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. set should remove platforms prepare step? false . this crucial: ensures step remove re-add platform native projects generated cordova prepare ionic prepare step. run build! " });
this.add({id:568, 
title:"Protecting your code signing files", 
body:" protecting code signing files you set code signing files protected mode: means downloaded bitrise.io account. your builds able use protected files reveal way overwrite them: delete upload new ones instead. you set code signing files protected mode: means downloaded bitrise.io account. your builds able use protected files reveal way overwrite them: delete upload new ones instead. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu. locate file wish make protected open dropdown menu clicking ellipsis button right. select make protected option. a dialog box warn change irreversible confirm it. you need separately save changes. once done, option file’s dropdown menu delete . " });
this.add({id:569, 
title:"Generating iOS code signing files", 
body:" generating ios code signing files you generate ios code signing files with xcode apple developer portal. you’ll need kinds files sign app: certificates provisioning profiles. the certificates - development distribution guarantee you, named developer, built code, member developer program, apple issued with certificate so. to certificate, need generate certificate signing request with keychain access send apple. this create public\/private key pair don’t already. apple verify information, certificate you. provisioning process preparing configuring app launch devices use services. development provisioning profiles holds device identifiers (uuid) eligible run app. distribution include app store allow distribute store. ad-hoc good distributing testers. " });
this.add({id:570, 
title:"Generating a code signing certificate with Xcode", 
body:" generating code signing certificate with xcode first add apple id accounts preferences xcode. if with this, skip selecting apple id . start xcode. select xcode > preferences navigation bar. at window select accounts . click + lower left corner select add apple id… a dialog appear. add apple id password, select sign . if don’t account create apple id selecting create apple id . select apple id team right bar, click view details… . a dialog appear see code signing identities provisioning profiles. under signing identities locate ios development ios distribution profiles. if created see create button them. simply select xcode issue download code signing identities you. when click reset code signing identities if code signing identities issued, see reset button them. you issue new certificates with it, xcode generate download, note invalidate previous certificate, so you’ve lost files know doing! " });
this.add({id:571, 
title:"Generating a code signing certificate manually", 
body:" generating code signing certificate manually open keychain access app macos. select keychain access > certificate assistant > request certificate from authority… fill user’s email address common name select saved disk . click continue save generated certsigningrequest file locally. go https:\/\/developer.apple.com log account. select certificates, ids & profiles left sidebar. go certificates click + button right corner. select ios app development click continue . on page see instructions creating certsigningrequest file. click continue . upload created certsigningrequest form click continue . it generate code signing certificate you. download certificate double click install it. once installed added keychain access app. " });
this.add({id:572, 
title:"Generating a provisioning profile with Xcode", 
body:" generating provisioning profile with xcode xcode automatically generate app id project, matches unique bundle project. an used identify apps. it explicit identifier wildcard match multiple ones. xcode create team provisioning profile project automatically, so start deploying device automatically. if hit any issues make sure device eligible, example doesn’t match deployment target error. also app connected correct team. to generate provisioning profile using xcode: select project file xcode’s navigator. go signing section team select correct team. build project xcode. to download provisioning profile xcode: start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team, select download manual profiles . go ~\/library\/mobiledevice\/provisioning profiles\/ profiles there. " });
this.add({id:573, 
title:"Generating a provisioning profile manually", 
body:" generating provisioning profile manually to generate provisioning profile manually, need working apple developer account, set app id project. " });
this.add({id:574, 
title:"Setting up an App ID", 
body:" setting app id if haven’t created app id project, https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate identifiers > app ids . in app id description add recognizable app id. select explicit app id add bundle identifier field. select any additional app services need. click continue . " });
this.add({id:575, 
title:"Generating a provisioning profile", 
body:" generating provisioning profile go https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate provisioning profiles > all . select + right corner. for development select correct project type development , distribution select correct distribution click continue. select app id like use. select certificates wish include provisioning profile. these able build with profile; click continue . select devices like use with profile click continue. name provisioning profile click continue . your profile generated. you download device double click install mac. " });
this.add({id:576, 
title:"Exporting iOS code signing files manually", 
body:" exporting ios code signing files manually you export ios code signing certificates provisioning profiles manually, using xcode. you export ios code signing certificates provisioning profiles manually, using xcode. " });
this.add({id:577, 
title:"Exporting iOS code signing certificates with Xcode", 
body:" exporting ios code signing certificates with xcode start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team right bar, click view details... . a dialog appear see code signing identities provisioning profiles. select certificates choose export pop-up menu. enter filename save as dialog. you set password verification store securely, it’s necessary. xcode export requested certificate .p12 format. " });
this.add({id:578, 
title:"Exporting iOS code signing certificates manually", 
body:" exporting ios code signing certificates manually start keychain access. on left sidebar select login left select my certificates . this list installed certificates associated private key. select like export choose export pop-up menu. enter filename save as dialog. you set password verification store securely, it’s necessary. keychain access export requested certificate .p12 format. " });
this.add({id:579, 
title:"Exporting iOS provisioning profiles with Xcode", 
body:" exporting ios provisioning profiles with xcode start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team right bar, click view details... . a dialog appear see code signing identities provisioning profiles. locate profile looking provisioning profiles. if don’t installed system, click download button it. choose show finder pop-up menu, installed provisioning profile you. " });
this.add({id:580, 
title:"Exporting iOS provisioning profiles manually", 
body:" exporting ios provisioning profiles manually go https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate provisioning profiles > all. find provisioning profile looking list use search filter. click selected provisioning profile, expand details. if status invalid, click edit button save again. click download button download double click install macos. " });
this.add({id:581, 
title:"Troubleshooting iOS code signing", 
body:" troubleshooting ios code signing ios code signing complicated, with potential issues. we've collected common issues solutions. ios code signing complicated, with potential issues. we've collected common issues solutions. let’s look make sure works! " });
this.add({id:582, 
title:"Code signing and clean virtual machines", 
body:" code signing clean virtual machines every bitrise build uses clean virtual machine with leftover files configuration previous builds. while likely necessary code signing (certificates provisioning profiles) available local case machines. they contain any relevant project, make sure: you choose right code signing asset management option upload provisioning profiles bitrise. from steps download files virtual machine runtime. you upload necessary signing certificates code signing tab. you connected bitrise account apple developer portal. (this step needed use certificate profile installer step.) apple developer portal. if suspect error related code signing, certainly problem with three. when trying build ios app bitrise, strongly recommend generating .ipa file locally, machine first. fails, fail too. verbose logs if getting any issues, make sure enable verbose log input code signing asset management building step information nature issue. " });
this.add({id:583, 
title:"iOS code signing Steps fail", 
body:" ios code signing steps fail our ios code signing steps manage provisioning profiles you: download apple developer portal install you. here’s steps fail: before trying use step, generate .ipa file locally - with export method want bitrise ensure profiles uploaded apple developer portal. make sure bitrise account connected apple developer portal admin role team. " });
this.add({id:584, 
title:"File count limit on provisioning profiles", 
body:" file count limit provisioning profiles the maximum number provisioning profiles .p12 certificates upload code signing tab bitrise 30. if you’ve reached limit wish use more, tips how provisioning profiles: use step with automatic provisioning, xcode archive export ios , export ios tvos xcode archive , xcode build testing ios , manage ios code signing . these steps require code signing identities (certificates with .p12 extension) uploaded bitrise. you download provisioning profiles apple developer portal on-the-fly build connected apple developer account bitrise . you create .zip file containing required certificates\/profiles. in case, don’t need upload any certificates\/profiles bitrise. during build download update certificate\/profile related inputs certificate profile installer step match path certificate\/profile build machine. note certificate profile installer step supports local paths urls certificates profiles. you host profiles certificates yourself, add url pointing given certificate\/profile workflow. also note multiple urls specified certificate profile inputs. make sure separate with pipe ( | ) character. " });
this.add({id:585, 
title:"Could not install the app on a device", 
body:" could install app device to install ios apps given device, either: export ipa file with development export method, with device’s udid registered provisioning profile used export. export ipa file with ad-hoc export method install app public page generated deploy bitrise.io step. if can't install app given device: check device udid included app’s provisioning profile. if use manual provisioning, check provisioning profile uploaded bitrise. check logs see xcode archive & export ios step used provisioning profile with device’s udid it. " });
this.add({id:543, 
title:"Android code signing", 
body:" android code signing before distribute android app google play store , apk aab file digitally signed. you use dedicated bitrise step perform code signing with gradle configuration. before distribute app google play store , apk file digitally signed. you specify code signing configuration project android studio manually gradle configuration. use android sign step bitrise workflow editor apk signed automatically. " });
this.add({id:544, 
title:"Android code signing using the Android Sign Step", 
body:" android code signing using sign step you create signed apk using the  android sign  step bitrise workflow. this step configured run uploaded keystore file the code signing tab workflow editor. you create signed apk using the  android sign   step bitrise workflow . this step configured run uploaded keystore file bitrise. the  android sign  step required signing configured project’s build.gradle file. if so, running the  android build step (or the  gradle runner  step) signs output (apk aab) automatically. nevertheless, recommend use the  android sign  step sign project easy secure way. jarsign apksigner apks signed with jarsigner apksigner . for apks, wish use apksigner sign project, the android sign step first set enables apksigner input true leave the apk signature scheme input automatic. this way apksigner checks apk’s minimum target sdk versions chooses required schemes. it signs project with v1 scheme supported version low schemes newer systems. please note aab files signed with jarsigner. the step uses jarsigner detects file ending with  .aab upload keystore file bitrise . add android sign step workflow builds apk aab file. bitrise uses environment variables sets inputs respective fields the  android sign  step. once step runs, produces signed apk aab. the aab used deploy steps, example,  google play deploy  step the  deploy to bitrise.io  step. the latter deploys apk\/aab artifacts  tab. you also use ship deploy app once built apk\/aab file. downloading keystore file you can download keystore file to project directory using the  file downloader  step: - file-downloader:\n inputs:\n source: $bitriseio_android_keystore_url\n destination: \"$home\/keystores\/my_keystore.jks\" #native android# if step requires keystore file, make sure include after file downloader step. after step,  my_keystore.jks  will available at  $home\/keystores\/my_keystore.jks . " });
this.add({id:545, 
title:"Android code signing with Android Studio", 
body:" android code signing with studio you specify code signing configuration project android studio running bitrise build. you need keystore file, key alias password. you specify code signing configuration project android studio . you need keystore file, key alias password - ready start procedure! open android studio. go project navigator . select project open module settings . from modules , select module. on signing tab, signing information. in example, used following values: name: release key alias: myandroidkey key password: *** store file: \/path\/to\/my\/keystore.jks store password: *** once filled signing information, signingconfigs block created module’s build.gradle file. on bitrise, just need build app, with android build gradle runner step. " });
this.add({id:546, 
title:"Android code signing in Gradle", 
body:" android code signing gradle you manually specify code signing configuration gradle so app gets signed build process bitrise. you manually specify code signing configuration gradle so app gets signed build process. open module-level build.gradle file. add signingconfigs codeblock code define following entries specific project: storefiled storepassword keyalias keypassword attach signing config build type. build app bitrise. for information, check how configure gradle sign app . signing configuration build.gradle file in example, keystore path locally bitrise.io ensure build use keystore file. android {\n \/\/ make sure signingconfigs defined buildtypes.\n { \n \t release keyalias 'myandroidkey' keypassword '***' storefile file(\"\/path\/to\/my\/keystore.jks\") storepassword } \n\n buildtypes use signing config build type\n signingconfig signingconfigs.release\n ...\n }\n ... using environment variables build.gradle file you avoid having keystore path locally bitrise.io using configuration values environment variables keystore path ( storefile ) keystore password. you use system.getenv(\"env_key\") file access environment variables build.gradle file. make sure define environment variables use build.gradle file bitrise.io well. if keystore path $home\/keystores\/my_keystore.jks , build.gradle file look like this: android { \n signingconfigs \t release keyalias 'myandroidkey' keypassword '***' storefile file(system.getenv(\"home\") + \"\/keystores\/my_keystore.jks\")\n storepassword } ... you download keystore file using file downloader step , using $home\/keystores\/my_keystore.jks destination path. if use environment variables keypassword storepassword code signing tab, build.gradle look like this: android {\n signingconfigs release keyalias system.getenv(\"bitriseio_android_keystore_alias\")\n keypassword system.getenv(\"bitriseio_android_keystore_private_key_password\")\n storefile file(system.getenv(\"home\") + \"\/keystores\/my_keystore.jks\")\n storepassword system.getenv(\"bitriseio_android_keystore_password\")\n }\n \n buildtypes \/\/ use signing config build type\n signingconfig signingconfigs.release\n ...\n ... " });
this.add({id:547, 
title:"Downloading a keystore file from Bitrise during a build", 
body:" downloading keystore file bitrise build you define location keystore file android app build.gradle file. if keystore file itself missing location, use downloading steps download bitrise defined location. a keystore file required android code signing. you define location app build.gradle file: android code signing in gradle . you upload keystore file bitrise use file downloader step download keystore file bitrise location defined build.gradle file. the android sign step if use android sign step sign app, don't need download keystore file. the file: android code signing using the android sign step . add file downloader step workflow. the added before any requires keystore file, gradle runner . fill following input fields: download source url : set generated keystore url upload file bitrise ). download destination path : set location keystore file relative path. this path defined build.gradle file (for example, $home\/keystores\/project_release.keystore ). add gradle runner step right file downloading step. with said, successfully added steps download keystore file location specified build.gradle file, need android sign step workflow. our gradle runner step sign assemble project. " });
this.add({id:544, 
title:"Android code signing using the Android Sign Step", 
body:" android code signing using sign step you create signed apk using the  android sign  step bitrise workflow. this step configured run uploaded keystore file the code signing tab workflow editor. you create signed apk using the  android sign   step bitrise workflow . this step configured run uploaded keystore file bitrise. the  android sign  step required signing configured project’s build.gradle file. if so, running the  android build step (or the  gradle runner  step) signs output (apk aab) automatically. nevertheless, recommend use the  android sign  step sign project easy secure way. jarsign apksigner apks signed with jarsigner apksigner . for apks, wish use apksigner sign project, the android sign step first set enables apksigner input true leave the apk signature scheme input automatic. this way apksigner checks apk’s minimum target sdk versions chooses required schemes. it signs project with v1 scheme supported version low schemes newer systems. please note aab files signed with jarsigner. the step uses jarsigner detects file ending with  .aab upload keystore file bitrise . add android sign step workflow builds apk aab file. bitrise uses environment variables sets inputs respective fields the  android sign  step. once step runs, produces signed apk aab. the aab used deploy steps, example,  google play deploy  step the  deploy to bitrise.io  step. the latter deploys apk\/aab artifacts  tab. you also use ship deploy app once built apk\/aab file. downloading keystore file you can download keystore file to project directory using the  file downloader  step: - file-downloader:\n inputs:\n source: $bitriseio_android_keystore_url\n destination: \"$home\/keystores\/my_keystore.jks\" #native android# if step requires keystore file, make sure include after file downloader step. after step,  my_keystore.jks  will available at  $home\/keystores\/my_keystore.jks . " });
this.add({id:545, 
title:"Android code signing with Android Studio", 
body:" android code signing with studio you specify code signing configuration project android studio running bitrise build. you need keystore file, key alias password. you specify code signing configuration project android studio . you need keystore file, key alias password - ready start procedure! open android studio. go project navigator . select project open module settings . from modules , select module. on signing tab, signing information. in example, used following values: name: release key alias: myandroidkey key password: *** store file: \/path\/to\/my\/keystore.jks store password: *** once filled signing information, signingconfigs block created module’s build.gradle file. on bitrise, just need build app, with android build gradle runner step. " });
this.add({id:546, 
title:"Android code signing in Gradle", 
body:" android code signing gradle you manually specify code signing configuration gradle so app gets signed build process bitrise. you manually specify code signing configuration gradle so app gets signed build process. open module-level build.gradle file. add signingconfigs codeblock code define following entries specific project: storefiled storepassword keyalias keypassword attach signing config build type. build app bitrise. for information, check how configure gradle sign app . signing configuration build.gradle file in example, keystore path locally bitrise.io ensure build use keystore file. android {\n \/\/ make sure signingconfigs defined buildtypes.\n { \n \t release keyalias 'myandroidkey' keypassword '***' storefile file(\"\/path\/to\/my\/keystore.jks\") storepassword } \n\n buildtypes use signing config build type\n signingconfig signingconfigs.release\n ...\n }\n ... using environment variables build.gradle file you avoid having keystore path locally bitrise.io using configuration values environment variables keystore path ( storefile ) keystore password. you use system.getenv(\"env_key\") file access environment variables build.gradle file. make sure define environment variables use build.gradle file bitrise.io well. if keystore path $home\/keystores\/my_keystore.jks , build.gradle file look like this: android { \n signingconfigs \t release keyalias 'myandroidkey' keypassword '***' storefile file(system.getenv(\"home\") + \"\/keystores\/my_keystore.jks\")\n storepassword } ... you download keystore file using file downloader step , using $home\/keystores\/my_keystore.jks destination path. if use environment variables keypassword storepassword code signing tab, build.gradle look like this: android {\n signingconfigs release keyalias system.getenv(\"bitriseio_android_keystore_alias\")\n keypassword system.getenv(\"bitriseio_android_keystore_private_key_password\")\n storefile file(system.getenv(\"home\") + \"\/keystores\/my_keystore.jks\")\n storepassword system.getenv(\"bitriseio_android_keystore_password\")\n }\n \n buildtypes \/\/ use signing config build type\n signingconfig signingconfigs.release\n ...\n ... " });
this.add({id:547, 
title:"Downloading a keystore file from Bitrise during a build", 
body:" downloading keystore file bitrise build you define location keystore file android app build.gradle file. if keystore file itself missing location, use downloading steps download bitrise defined location. a keystore file required android code signing. you define location app build.gradle file: android code signing in gradle . you upload keystore file bitrise use file downloader step download keystore file bitrise location defined build.gradle file. the android sign step if use android sign step sign app, don't need download keystore file. the file: android code signing using the android sign step . add file downloader step workflow. the added before any requires keystore file, gradle runner . fill following input fields: download source url : set generated keystore url upload file bitrise ). download destination path : set location keystore file relative path. this path defined build.gradle file (for example, $home\/keystores\/project_release.keystore ). add gradle runner step right file downloading step. with said, successfully added steps download keystore file location specified build.gradle file, need android sign step workflow. our gradle runner step sign assemble project. " });
this.add({id:548, 
title:"iOS code signing", 
body:" ios code signing to install ios app new device distribute app store, need provide code signing files. the projects requires certificates issued apple provisioning profile file(s) matching project. to install ios app new device distribute app app store , need provide code signing files. the ios projects requires: signing certificates issued apple. provisioning profile file(s) matching project (team id, bundle so on). setting ios code signing bitrise methods how works when use automatically managed provisioning profiles (recommended) you need upload code signing certificate(s) bitrise establish apple service connection (either app store connect api key apple id). bitrise download, create renew provisioning profile(s) handle id test device registration automatically. this recommended option apps. with option, managing provisioning profiles seamless it's easier set workflows. manually managed provisioning profiles you need upload code signing certificate(s) provisioning profile(s) bitrise updated with ios project. choose option if: you connect app store connect api key apple id bitrise. you store handle code signing files unique way. you wish use code signing files multiple apple developer accounts. you prefer option using account with apple developer enterprise program. in case id-based authentication supported. this certain limitations: example, needs renewed 30 days. " });
this.add({id:549, 
title:"Collecting and exporting code signing files with codesigndoc", 
body:" collecting exporting code signing files with codesigndoc the open source codesigndoc tool runs clean xcode archive mac, analyzes generated archive file. it collects code signing settings used process, prints list required files. you search for, export upload files using codesigndoc. the open source codesigndoc tool runs clean xcode archive mac, analyzes generated archive file. it collects code signing settings used process, prints list required files. you search for, export upload files using codesigndoc . if project contains uitest targets, codesigndoc scan those, too. it runs xcodebuild build-for-testing action create test-runner.app , exports necessary code signing files. " });
this.add({id:550, 
title:"Collecting and uploading the files with codesigndoc", 
body:" collecting uploading files with codesigndoc you use codesigndoc for: xcode projects. the app does native ios app: use tool with app built third-party framework, flutter, .xcodeproj .xcworkspace file. you install latest version codesigndoc with simple one-liner manually download install specific version want use: in example, we’ll use one-liners. open terminal . go project’s folder. enter appropriate one-liner command, depending project type. for xcode project: bash -l -c \"$(curl -sfl https:\/\/raw.githubusercontent.com\/bitrise-io\/codesigndoc\/master\/_scripts\/install_wrap-xcode.sh)\" the tool automatically scan project look .xcodeproj .xcworkspace file rest. if scanner does files, open finder.app drag-and-drop project’s .xcodeproj .xcworkspace file command line terminal. once code signing files collected, codesigndoc ask wish upload files bitrise: do want upload provisioning profiles certificates bitrise? [yes\/no] : if wish upload files with codesigndoc , type yes press enter . provide bitrise access token: please copy personal access token bitrise.\n(to acquire personal access token user, sign with user bitrise.io,\ngo account settings page, select security tab left side.) : personal access tokens select bitrise project target collected files: fetching application list bitrise...\nselect app want upload provisioning profiles\nplease select list:\n that’s all, done! automatic code signing asset management for automatic code signing asset management, recommend use building steps : xcode archive export ios . export ios tvos xcode archive . xcode build testing ios . you install run codesigndoc manually. for information, check tool’s readme ! " });
this.add({id:551, 
title:"Scanning for UITest targets", 
body:" scanning uitest targets if xcode project uitest targets, use codesigndoc export necessary code signing files generate .xctestrun file. you need want run ui tests real devices with help bitrise - example, ios device testing step. make sure scheme valid uitest target enabled. open terminal . use one-liner launch scanner export required code signing files: bash -l -c \"$(curl -sfl https:\/\/raw.githubusercontent.com\/bitrise-tools\/codesigndoc\/master\/_scripts\/install_wrap-xcode-uitests.sh)\" this command runs xcodebuild build-for-testing action create uitest runner .app file, exports necessary code signing files. upload files bitrise with codesigndoc. " });
this.add({id:552, 
title:"Troubleshooting the UITest scanner", 
body:" troubleshooting uitest scanner if uitest scanner desired scheme, follow steps: make sure scheme valid running uitest. it contain uitest target enabled run. refresh project settings: select generic ios device target scheme xcode. clean project: ⌘ cmd + ↑ shift k . run build testing: ⌘ cmd + ↑ shift u . " });
this.add({id:553, 
title:"Manually installing and using codesigndoc", 
body:" manually installing using codesigndoc with manual install, specify version codesigndoc want use. unlike with one-liners used above, install does automatically run scan command folder use in: merely installs tool. check available versions releases page codesigndoc tool. download release want running curl command: note: replace versionnumber with actual number codesigndoc version want. curl -sfl https:\/\/github.com\/bitrise-io\/codesigndoc\/releases\/download\/versionnumber\/codesigndoc-darwin-x86_64 > .\/codesigndoc make downloaded binary executable: chmod +x .\/codesigndoc run scan command any time wish: ## xcode scanner\n.\/codesigndoc scan xcode\n\n## project scanner ui test targets\n.\/codesigndoc xcodeuitests\n " });
this.add({id:554, 
title:"Best practices of using codesigndoc", 
body:" best practices using codesigndoc you accurate result run codesigndoc state repository\/code available clean git clone , state code build server checks (for example, files mac .gitignore , so exists mac repository git clone new mac). so, best results, recommend to: do clean git clone repository (into new directory) mac. run codesigndoc directory (not usually work project). we recommend generating ipa local machine first, run codesigndoc . the reason xcode download update profiles background ipa export. if run codesigndoc exported ipa xcode, codesigndoc able collect files. " });
this.add({id:555, 
title:"iOS code signing with automatic provisioning", 
body:" ios code signing with automatic provisioning automatic code signing means automatically managing provisioning profiles available apple developer portal account. if set form authentication account, bitrise download install profile app build process. on bitrise, we're aiming make ios code signing simple possible you. as such, we've best automate lot process. several steps built-in option automatic code signing management make configuration lot streamlined. automatic code signing context means automatically managing provisioning profiles available apple developer portal account. if set form authentication account, bitrise download install profile app build process. to use feature, need to: upload code signing certificates bitrise. connect apple developer portal account bitrise apple id app store connect api . use steps support automatically managing code signing assets. " });
this.add({id:556, 
title:"Uploading iOS code signing certificates to Bitrise", 
body:" uploading ios code signing certificates bitrise all ios code signing methods require export upload certificates bitrise. generating code signing files if don't necessary code signing files ready, generate new files: generating ios code signing files to upload certificates bitrise, first need export files .p12 file format. once successfully exported files, bitrise. you options: via api . uploading manually. this guide focuses option. upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. to export certificates upload bitrise workflow editor: make sure .p12 certificates exported ready. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu option. click add .p12 file add certificate. in dialog box, drag drop file select code signing certificate section, click section select file want upload. certificate password if certificate protected password, need set password here, too. when done, click continue . check summary okay, click add certificate . " });
this.add({id:557, 
title:"Apple services authentication for automatic provisioning", 
body:" apple services authentication automatic provisioning to advantage bitrise steps offer built-in, automated ios code signing options, need set apple service authentication . for steps, options. apple services authentication options ios code signing authentication method how works when use api key authentication (recommended) you connect app store connect account bitrise using api key. we recommend using option unless account with apple developer enterprise program. if receive option create api key request access greyed out, need contact account holder accept license agreement with apple use authentication. apple id authentication you connect apple id bitrise. if two-factor authentication enabled account, provide app-specific password process. your expires 30 days refresh connection. you use solution if: you access api key any reason. using account with apple developer enterprise program. you consider using manual provisioning . " });
this.add({id:558, 
title:"Configuring the Steps for automatic provisioning", 
body:" configuring steps automatic provisioning there ways handle automatic provisioning bitrise: using official xcode steps manage code signing files build app. using manage ios code signing step. table 22, “ describes use cases methods. to able configure necessary steps, check either: using the xcode stepsusing the manage ios code signing step don't use certificate profile installer step if use automatic provisioning, need certificate profile installer step. steps with automatic provisioning options steps how work when use xcode steps: xcode archive export ios export ios tvos xcode archive xcode build testing ios these steps set code signing xcode project automatically with nearly zero configuration. we recommend using steps scenarios. manage ios code signing step this step set code signing xcode project running build. you use dedicated step if: you building app script fastlane. you cross-platform project. for example, react native, flutter, ionic cordova. you building macos app. " });
this.add({id:559, 
title:"Using the Xcode Steps", 
body:" using xcode steps you use any xcode steps with built-in automatic management code signing assets. set connection apple services. you choose api key authentication apple id authentication . we generally recommend api key authentication. add any following steps workflow, depending need: xcode archive export ios : builds xcode app exports ipa type choose. export ios tvos xcode archive : exports ipa existing archive. xcode build testing ios : builds xcode app with build-for-testing action. set automatic code signing method input apple service authentication type set up. for example, chose api key authentication, choose api-key option. yaml example setting code signing method in example, xcode archive export ios step set use api key authentication. - xcode-archive@4: \n inputs: automatic_code_signing: api-key in cases, default values inputs sufficient set apple connection correctly. " });
this.add({id:560, 
title:"Using the Manage iOS Code Signing Step", 
body:" using manage ios code signing step use dedicated step automatically managing code signing assets use xcode steps build ios app, cross-platform app. add manage ios code signing step any dependency installer workflow, run cocoapods install carthage . set automatic code signing input apple service connection want use. you choose api key authentication apple id authentication . if use apple id authentication, enter team the developer portal team id input. make sure not modify xcode project step. for example, don't change bundle id. add step builds archives app, fastlane step. " });
this.add({id:561, 
title:"iOS code signing with manual provisioning", 
body:" ios code signing with manual provisioning to manage code signing files manually, need upload .p12 certificates app's provisioning profiles bitrise. there multiple ways this. to manage code signing files manually, need upload .p12 certificates app's provisioning profiles bitrise. you need upload developer certificate development type provisioning profile! that necessary xcode steps able test build apps properly. generating code signing files if don't necessary code signing files ready, generate new files: generating ios code signing files to upload code signing files bitrise, first need export .p12 file format. once successfully exported files, bitrise. you options: via api . uploading manually bitrise. this guide focuses option. to manually upload code signing files bitrise: make sure .p12 certificates provisioning profiles exported ready. check exporting ios code signing files information. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu. add files: to add certificate, click add .p12 file button. in dialog box, upload file and, required, provide password certificate. to add provisioning profiles, click add profile(s) button. in dialog box, upload file(s). make sure certificate profile installer step app’s workflow . you check workflow tab workflow editor . please note steps before steps archive export app (for example, xcode archive & export ios ) workflow. " });
this.add({id:562, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:563, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:564, 
title:"Signing an IPA with multiple code signing identities", 
body:" signing ipa with multiple code signing identities you create multiple ipa files with different code signing identities single bitrise build. just need make sure required available use export ios tvos xcode archive step. overview ios code signing asset management for comprehensive overview steps available code signing asset management, visit ios code signing page . you create multiple ipa files with different code signing identities single bitrise build. during development ios app need multiple types distributions different purposes, internal testing deployment app store. the good news does require setting separate workflows bitrise.io . in example we’ll setting workflow create signed ipa files: with development with app-store export method. advanced configuration options the procedure lists bare minimum requirements configure steps export xcode archives. check step workflow editor step's step.yml github see potential configuration options, including limited overriding bitrise-managed automatic code signing recompiling bitcode, using specific .plist file configure exporting. workflow editor bitrise.yml make sure necessary code signing files available build. make sure xcode archive & export ios step workflow. in list input variables, navigate distribution method select development dropdown menu. set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . add export ios tvos xcode archive step workflow. this reuses archive generated xcode archive export ios step does second export archive. set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization. apple-id use apple id authorization. in list input variables, navigate distribution method select app-store dropdown menu. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input development . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development add export-xcarchive step workflow. this reuses archive generated xcode-archive step does second export archive. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development\n export-xcarchive:\n set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization. apple-id use apple id authorization. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development\n export-xcarchive:\n set distribution_method input app-store . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development\n export-xcarchive:\n app-store\n and you’re done! feel free add multiple export ios tvos xcode archive steps workflows create multiple different signed .ipa files necessary. " });
this.add({id:565, 
title:"iOS code signing for Ionic and Cordova projects", 
body:" ios code signing ionic cordova projects bitrise supports manual automatic provisioning ios code signing ionic cordova apps well. naturally, bitrise supports ios applications built with ionic cordova . however, code signing process slightly different compared native xcode project. bitrise supports manual automatic provisioning ionic cordova apps - again, processes somewhat different. " });
this.add({id:566, 
title:"Ionic\/Cordova code signing with manual code signing asset management", 
body:" ionic\/cordova code signing with manual asset management generate native xcode project locally ionic cordova calling cordova platform add ios ionic cordova platform add ios . upload files bitrise.io . make sure certificate profile installer step workflow. add generate cordova build configuration step workflow. it come certificate profile installer step. fill required inputs step. please note code signing identity provisioning profile required inputs ios apps marked such. build configuration : set debug release . code sign identity : enter developer distribution identity. provisioning profile : enter appropriate provisioning profile. packaging type : controls type build generated xcode. set code signing need. add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. this step come generate cordova build configuration step workflow. run build! " });
this.add({id:567, 
title:"Ionic\/Cordova code signing with automatic code signing asset management", 
body:" ionic\/cordova code signing with automatic asset management make sure .p12 signing certificates uploaded bitrise.io . add cordova prepare ionic prepare step workflow. these steps platform rm platform add commands. add manage ios code signing step workflow. if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. the step export: the project’s development team. the installed codesign identity’s name. the installed provisioning profile. one code signing step if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. select apple service connection method (based apple service set bitrise ) distribution method . add generate cordova build configuration step workflow. configure step use code signing settings exported manage ios code signing step: development distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: development code_sign_identity: iphone developer\n configuration: debug\n production distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: app-store code_sign_identity: iphone developer\n configuration: release\n add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. set should remove platforms prepare step? false . this crucial: ensures step remove re-add platform native projects generated cordova prepare ionic prepare step. run build! " });
this.add({id:568, 
title:"Protecting your code signing files", 
body:" protecting code signing files you set code signing files protected mode: means downloaded bitrise.io account. your builds able use protected files reveal way overwrite them: delete upload new ones instead. you set code signing files protected mode: means downloaded bitrise.io account. your builds able use protected files reveal way overwrite them: delete upload new ones instead. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu. locate file wish make protected open dropdown menu clicking ellipsis button right. select make protected option. a dialog box warn change irreversible confirm it. you need separately save changes. once done, option file’s dropdown menu delete . " });
this.add({id:569, 
title:"Generating iOS code signing files", 
body:" generating ios code signing files you generate ios code signing files with xcode apple developer portal. you’ll need kinds files sign app: certificates provisioning profiles. the certificates - development distribution guarantee you, named developer, built code, member developer program, apple issued with certificate so. to certificate, need generate certificate signing request with keychain access send apple. this create public\/private key pair don’t already. apple verify information, certificate you. provisioning process preparing configuring app launch devices use services. development provisioning profiles holds device identifiers (uuid) eligible run app. distribution include app store allow distribute store. ad-hoc good distributing testers. " });
this.add({id:570, 
title:"Generating a code signing certificate with Xcode", 
body:" generating code signing certificate with xcode first add apple id accounts preferences xcode. if with this, skip selecting apple id . start xcode. select xcode > preferences navigation bar. at window select accounts . click + lower left corner select add apple id… a dialog appear. add apple id password, select sign . if don’t account create apple id selecting create apple id . select apple id team right bar, click view details… . a dialog appear see code signing identities provisioning profiles. under signing identities locate ios development ios distribution profiles. if created see create button them. simply select xcode issue download code signing identities you. when click reset code signing identities if code signing identities issued, see reset button them. you issue new certificates with it, xcode generate download, note invalidate previous certificate, so you’ve lost files know doing! " });
this.add({id:571, 
title:"Generating a code signing certificate manually", 
body:" generating code signing certificate manually open keychain access app macos. select keychain access > certificate assistant > request certificate from authority… fill user’s email address common name select saved disk . click continue save generated certsigningrequest file locally. go https:\/\/developer.apple.com log account. select certificates, ids & profiles left sidebar. go certificates click + button right corner. select ios app development click continue . on page see instructions creating certsigningrequest file. click continue . upload created certsigningrequest form click continue . it generate code signing certificate you. download certificate double click install it. once installed added keychain access app. " });
this.add({id:572, 
title:"Generating a provisioning profile with Xcode", 
body:" generating provisioning profile with xcode xcode automatically generate app id project, matches unique bundle project. an used identify apps. it explicit identifier wildcard match multiple ones. xcode create team provisioning profile project automatically, so start deploying device automatically. if hit any issues make sure device eligible, example doesn’t match deployment target error. also app connected correct team. to generate provisioning profile using xcode: select project file xcode’s navigator. go signing section team select correct team. build project xcode. to download provisioning profile xcode: start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team, select download manual profiles . go ~\/library\/mobiledevice\/provisioning profiles\/ profiles there. " });
this.add({id:573, 
title:"Generating a provisioning profile manually", 
body:" generating provisioning profile manually to generate provisioning profile manually, need working apple developer account, set app id project. " });
this.add({id:574, 
title:"Setting up an App ID", 
body:" setting app id if haven’t created app id project, https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate identifiers > app ids . in app id description add recognizable app id. select explicit app id add bundle identifier field. select any additional app services need. click continue . " });
this.add({id:575, 
title:"Generating a provisioning profile", 
body:" generating provisioning profile go https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate provisioning profiles > all . select + right corner. for development select correct project type development , distribution select correct distribution click continue. select app id like use. select certificates wish include provisioning profile. these able build with profile; click continue . select devices like use with profile click continue. name provisioning profile click continue . your profile generated. you download device double click install mac. " });
this.add({id:576, 
title:"Exporting iOS code signing files manually", 
body:" exporting ios code signing files manually you export ios code signing certificates provisioning profiles manually, using xcode. you export ios code signing certificates provisioning profiles manually, using xcode. " });
this.add({id:577, 
title:"Exporting iOS code signing certificates with Xcode", 
body:" exporting ios code signing certificates with xcode start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team right bar, click view details... . a dialog appear see code signing identities provisioning profiles. select certificates choose export pop-up menu. enter filename save as dialog. you set password verification store securely, it’s necessary. xcode export requested certificate .p12 format. " });
this.add({id:578, 
title:"Exporting iOS code signing certificates manually", 
body:" exporting ios code signing certificates manually start keychain access. on left sidebar select login left select my certificates . this list installed certificates associated private key. select like export choose export pop-up menu. enter filename save as dialog. you set password verification store securely, it’s necessary. keychain access export requested certificate .p12 format. " });
this.add({id:579, 
title:"Exporting iOS provisioning profiles with Xcode", 
body:" exporting ios provisioning profiles with xcode start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team right bar, click view details... . a dialog appear see code signing identities provisioning profiles. locate profile looking provisioning profiles. if don’t installed system, click download button it. choose show finder pop-up menu, installed provisioning profile you. " });
this.add({id:580, 
title:"Exporting iOS provisioning profiles manually", 
body:" exporting ios provisioning profiles manually go https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate provisioning profiles > all. find provisioning profile looking list use search filter. click selected provisioning profile, expand details. if status invalid, click edit button save again. click download button download double click install macos. " });
this.add({id:581, 
title:"Troubleshooting iOS code signing", 
body:" troubleshooting ios code signing ios code signing complicated, with potential issues. we've collected common issues solutions. ios code signing complicated, with potential issues. we've collected common issues solutions. let’s look make sure works! " });
this.add({id:582, 
title:"Code signing and clean virtual machines", 
body:" code signing clean virtual machines every bitrise build uses clean virtual machine with leftover files configuration previous builds. while likely necessary code signing (certificates provisioning profiles) available local case machines. they contain any relevant project, make sure: you choose right code signing asset management option upload provisioning profiles bitrise. from steps download files virtual machine runtime. you upload necessary signing certificates code signing tab. you connected bitrise account apple developer portal. (this step needed use certificate profile installer step.) apple developer portal. if suspect error related code signing, certainly problem with three. when trying build ios app bitrise, strongly recommend generating .ipa file locally, machine first. fails, fail too. verbose logs if getting any issues, make sure enable verbose log input code signing asset management building step information nature issue. " });
this.add({id:583, 
title:"iOS code signing Steps fail", 
body:" ios code signing steps fail our ios code signing steps manage provisioning profiles you: download apple developer portal install you. here’s steps fail: before trying use step, generate .ipa file locally - with export method want bitrise ensure profiles uploaded apple developer portal. make sure bitrise account connected apple developer portal admin role team. " });
this.add({id:584, 
title:"File count limit on provisioning profiles", 
body:" file count limit provisioning profiles the maximum number provisioning profiles .p12 certificates upload code signing tab bitrise 30. if you’ve reached limit wish use more, tips how provisioning profiles: use step with automatic provisioning, xcode archive export ios , export ios tvos xcode archive , xcode build testing ios , manage ios code signing . these steps require code signing identities (certificates with .p12 extension) uploaded bitrise. you download provisioning profiles apple developer portal on-the-fly build connected apple developer account bitrise . you create .zip file containing required certificates\/profiles. in case, don’t need upload any certificates\/profiles bitrise. during build download update certificate\/profile related inputs certificate profile installer step match path certificate\/profile build machine. note certificate profile installer step supports local paths urls certificates profiles. you host profiles certificates yourself, add url pointing given certificate\/profile workflow. also note multiple urls specified certificate profile inputs. make sure separate with pipe ( | ) character. " });
this.add({id:585, 
title:"Could not install the app on a device", 
body:" could install app device to install ios apps given device, either: export ipa file with development export method, with device’s udid registered provisioning profile used export. export ipa file with ad-hoc export method install app public page generated deploy bitrise.io step. if can't install app given device: check device udid included app’s provisioning profile. if use manual provisioning, check provisioning profile uploaded bitrise. check logs see xcode archive & export ios step used provisioning profile with device’s udid it. " });
this.add({id:549, 
title:"Collecting and exporting code signing files with codesigndoc", 
body:" collecting exporting code signing files with codesigndoc the open source codesigndoc tool runs clean xcode archive mac, analyzes generated archive file. it collects code signing settings used process, prints list required files. you search for, export upload files using codesigndoc. the open source codesigndoc tool runs clean xcode archive mac, analyzes generated archive file. it collects code signing settings used process, prints list required files. you search for, export upload files using codesigndoc . if project contains uitest targets, codesigndoc scan those, too. it runs xcodebuild build-for-testing action create test-runner.app , exports necessary code signing files. " });
this.add({id:550, 
title:"Collecting and uploading the files with codesigndoc", 
body:" collecting uploading files with codesigndoc you use codesigndoc for: xcode projects. the app does native ios app: use tool with app built third-party framework, flutter, .xcodeproj .xcworkspace file. you install latest version codesigndoc with simple one-liner manually download install specific version want use: in example, we’ll use one-liners. open terminal . go project’s folder. enter appropriate one-liner command, depending project type. for xcode project: bash -l -c \"$(curl -sfl https:\/\/raw.githubusercontent.com\/bitrise-io\/codesigndoc\/master\/_scripts\/install_wrap-xcode.sh)\" the tool automatically scan project look .xcodeproj .xcworkspace file rest. if scanner does files, open finder.app drag-and-drop project’s .xcodeproj .xcworkspace file command line terminal. once code signing files collected, codesigndoc ask wish upload files bitrise: do want upload provisioning profiles certificates bitrise? [yes\/no] : if wish upload files with codesigndoc , type yes press enter . provide bitrise access token: please copy personal access token bitrise.\n(to acquire personal access token user, sign with user bitrise.io,\ngo account settings page, select security tab left side.) : personal access tokens select bitrise project target collected files: fetching application list bitrise...\nselect app want upload provisioning profiles\nplease select list:\n that’s all, done! automatic code signing asset management for automatic code signing asset management, recommend use building steps : xcode archive export ios . export ios tvos xcode archive . xcode build testing ios . you install run codesigndoc manually. for information, check tool’s readme ! " });
this.add({id:551, 
title:"Scanning for UITest targets", 
body:" scanning uitest targets if xcode project uitest targets, use codesigndoc export necessary code signing files generate .xctestrun file. you need want run ui tests real devices with help bitrise - example, ios device testing step. make sure scheme valid uitest target enabled. open terminal . use one-liner launch scanner export required code signing files: bash -l -c \"$(curl -sfl https:\/\/raw.githubusercontent.com\/bitrise-tools\/codesigndoc\/master\/_scripts\/install_wrap-xcode-uitests.sh)\" this command runs xcodebuild build-for-testing action create uitest runner .app file, exports necessary code signing files. upload files bitrise with codesigndoc. " });
this.add({id:552, 
title:"Troubleshooting the UITest scanner", 
body:" troubleshooting uitest scanner if uitest scanner desired scheme, follow steps: make sure scheme valid running uitest. it contain uitest target enabled run. refresh project settings: select generic ios device target scheme xcode. clean project: ⌘ cmd + ↑ shift k . run build testing: ⌘ cmd + ↑ shift u . " });
this.add({id:553, 
title:"Manually installing and using codesigndoc", 
body:" manually installing using codesigndoc with manual install, specify version codesigndoc want use. unlike with one-liners used above, install does automatically run scan command folder use in: merely installs tool. check available versions releases page codesigndoc tool. download release want running curl command: note: replace versionnumber with actual number codesigndoc version want. curl -sfl https:\/\/github.com\/bitrise-io\/codesigndoc\/releases\/download\/versionnumber\/codesigndoc-darwin-x86_64 > .\/codesigndoc make downloaded binary executable: chmod +x .\/codesigndoc run scan command any time wish: ## xcode scanner\n.\/codesigndoc scan xcode\n\n## project scanner ui test targets\n.\/codesigndoc xcodeuitests\n " });
this.add({id:554, 
title:"Best practices of using codesigndoc", 
body:" best practices using codesigndoc you accurate result run codesigndoc state repository\/code available clean git clone , state code build server checks (for example, files mac .gitignore , so exists mac repository git clone new mac). so, best results, recommend to: do clean git clone repository (into new directory) mac. run codesigndoc directory (not usually work project). we recommend generating ipa local machine first, run codesigndoc . the reason xcode download update profiles background ipa export. if run codesigndoc exported ipa xcode, codesigndoc able collect files. " });
this.add({id:550, 
title:"Collecting and uploading the files with codesigndoc", 
body:" collecting uploading files with codesigndoc you use codesigndoc for: xcode projects. the app does native ios app: use tool with app built third-party framework, flutter, .xcodeproj .xcworkspace file. you install latest version codesigndoc with simple one-liner manually download install specific version want use: in example, we’ll use one-liners. open terminal . go project’s folder. enter appropriate one-liner command, depending project type. for xcode project: bash -l -c \"$(curl -sfl https:\/\/raw.githubusercontent.com\/bitrise-io\/codesigndoc\/master\/_scripts\/install_wrap-xcode.sh)\" the tool automatically scan project look .xcodeproj .xcworkspace file rest. if scanner does files, open finder.app drag-and-drop project’s .xcodeproj .xcworkspace file command line terminal. once code signing files collected, codesigndoc ask wish upload files bitrise: do want upload provisioning profiles certificates bitrise? [yes\/no] : if wish upload files with codesigndoc , type yes press enter . provide bitrise access token: please copy personal access token bitrise.\n(to acquire personal access token user, sign with user bitrise.io,\ngo account settings page, select security tab left side.) : personal access tokens select bitrise project target collected files: fetching application list bitrise...\nselect app want upload provisioning profiles\nplease select list:\n that’s all, done! automatic code signing asset management for automatic code signing asset management, recommend use building steps : xcode archive export ios . export ios tvos xcode archive . xcode build testing ios . you install run codesigndoc manually. for information, check tool’s readme ! " });
this.add({id:551, 
title:"Scanning for UITest targets", 
body:" scanning uitest targets if xcode project uitest targets, use codesigndoc export necessary code signing files generate .xctestrun file. you need want run ui tests real devices with help bitrise - example, ios device testing step. make sure scheme valid uitest target enabled. open terminal . use one-liner launch scanner export required code signing files: bash -l -c \"$(curl -sfl https:\/\/raw.githubusercontent.com\/bitrise-tools\/codesigndoc\/master\/_scripts\/install_wrap-xcode-uitests.sh)\" this command runs xcodebuild build-for-testing action create uitest runner .app file, exports necessary code signing files. upload files bitrise with codesigndoc. " });
this.add({id:552, 
title:"Troubleshooting the UITest scanner", 
body:" troubleshooting uitest scanner if uitest scanner desired scheme, follow steps: make sure scheme valid running uitest. it contain uitest target enabled run. refresh project settings: select generic ios device target scheme xcode. clean project: ⌘ cmd + ↑ shift k . run build testing: ⌘ cmd + ↑ shift u . " });
this.add({id:553, 
title:"Manually installing and using codesigndoc", 
body:" manually installing using codesigndoc with manual install, specify version codesigndoc want use. unlike with one-liners used above, install does automatically run scan command folder use in: merely installs tool. check available versions releases page codesigndoc tool. download release want running curl command: note: replace versionnumber with actual number codesigndoc version want. curl -sfl https:\/\/github.com\/bitrise-io\/codesigndoc\/releases\/download\/versionnumber\/codesigndoc-darwin-x86_64 > .\/codesigndoc make downloaded binary executable: chmod +x .\/codesigndoc run scan command any time wish: ## xcode scanner\n.\/codesigndoc scan xcode\n\n## project scanner ui test targets\n.\/codesigndoc xcodeuitests\n " });
this.add({id:554, 
title:"Best practices of using codesigndoc", 
body:" best practices using codesigndoc you accurate result run codesigndoc state repository\/code available clean git clone , state code build server checks (for example, files mac .gitignore , so exists mac repository git clone new mac). so, best results, recommend to: do clean git clone repository (into new directory) mac. run codesigndoc directory (not usually work project). we recommend generating ipa local machine first, run codesigndoc . the reason xcode download update profiles background ipa export. if run codesigndoc exported ipa xcode, codesigndoc able collect files. " });
this.add({id:555, 
title:"iOS code signing with automatic provisioning", 
body:" ios code signing with automatic provisioning automatic code signing means automatically managing provisioning profiles available apple developer portal account. if set form authentication account, bitrise download install profile app build process. on bitrise, we're aiming make ios code signing simple possible you. as such, we've best automate lot process. several steps built-in option automatic code signing management make configuration lot streamlined. automatic code signing context means automatically managing provisioning profiles available apple developer portal account. if set form authentication account, bitrise download install profile app build process. to use feature, need to: upload code signing certificates bitrise. connect apple developer portal account bitrise apple id app store connect api . use steps support automatically managing code signing assets. " });
this.add({id:556, 
title:"Uploading iOS code signing certificates to Bitrise", 
body:" uploading ios code signing certificates bitrise all ios code signing methods require export upload certificates bitrise. generating code signing files if don't necessary code signing files ready, generate new files: generating ios code signing files to upload certificates bitrise, first need export files .p12 file format. once successfully exported files, bitrise. you options: via api . uploading manually. this guide focuses option. upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. to export certificates upload bitrise workflow editor: make sure .p12 certificates exported ready. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu option. click add .p12 file add certificate. in dialog box, drag drop file select code signing certificate section, click section select file want upload. certificate password if certificate protected password, need set password here, too. when done, click continue . check summary okay, click add certificate . " });
this.add({id:557, 
title:"Apple services authentication for automatic provisioning", 
body:" apple services authentication automatic provisioning to advantage bitrise steps offer built-in, automated ios code signing options, need set apple service authentication . for steps, options. apple services authentication options ios code signing authentication method how works when use api key authentication (recommended) you connect app store connect account bitrise using api key. we recommend using option unless account with apple developer enterprise program. if receive option create api key request access greyed out, need contact account holder accept license agreement with apple use authentication. apple id authentication you connect apple id bitrise. if two-factor authentication enabled account, provide app-specific password process. your expires 30 days refresh connection. you use solution if: you access api key any reason. using account with apple developer enterprise program. you consider using manual provisioning . " });
this.add({id:558, 
title:"Configuring the Steps for automatic provisioning", 
body:" configuring steps automatic provisioning there ways handle automatic provisioning bitrise: using official xcode steps manage code signing files build app. using manage ios code signing step. table 22, “ describes use cases methods. to able configure necessary steps, check either: using the xcode stepsusing the manage ios code signing step don't use certificate profile installer step if use automatic provisioning, need certificate profile installer step. steps with automatic provisioning options steps how work when use xcode steps: xcode archive export ios export ios tvos xcode archive xcode build testing ios these steps set code signing xcode project automatically with nearly zero configuration. we recommend using steps scenarios. manage ios code signing step this step set code signing xcode project running build. you use dedicated step if: you building app script fastlane. you cross-platform project. for example, react native, flutter, ionic cordova. you building macos app. " });
this.add({id:559, 
title:"Using the Xcode Steps", 
body:" using xcode steps you use any xcode steps with built-in automatic management code signing assets. set connection apple services. you choose api key authentication apple id authentication . we generally recommend api key authentication. add any following steps workflow, depending need: xcode archive export ios : builds xcode app exports ipa type choose. export ios tvos xcode archive : exports ipa existing archive. xcode build testing ios : builds xcode app with build-for-testing action. set automatic code signing method input apple service authentication type set up. for example, chose api key authentication, choose api-key option. yaml example setting code signing method in example, xcode archive export ios step set use api key authentication. - xcode-archive@4: \n inputs: automatic_code_signing: api-key in cases, default values inputs sufficient set apple connection correctly. " });
this.add({id:560, 
title:"Using the Manage iOS Code Signing Step", 
body:" using manage ios code signing step use dedicated step automatically managing code signing assets use xcode steps build ios app, cross-platform app. add manage ios code signing step any dependency installer workflow, run cocoapods install carthage . set automatic code signing input apple service connection want use. you choose api key authentication apple id authentication . if use apple id authentication, enter team the developer portal team id input. make sure not modify xcode project step. for example, don't change bundle id. add step builds archives app, fastlane step. " });
this.add({id:556, 
title:"Uploading iOS code signing certificates to Bitrise", 
body:" uploading ios code signing certificates bitrise all ios code signing methods require export upload certificates bitrise. generating code signing files if don't necessary code signing files ready, generate new files: generating ios code signing files to upload certificates bitrise, first need export files .p12 file format. once successfully exported files, bitrise. you options: via api . uploading manually. this guide focuses option. upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. to export certificates upload bitrise workflow editor: make sure .p12 certificates exported ready. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu option. click add .p12 file add certificate. in dialog box, drag drop file select code signing certificate section, click section select file want upload. certificate password if certificate protected password, need set password here, too. when done, click continue . check summary okay, click add certificate . " });
this.add({id:557, 
title:"Apple services authentication for automatic provisioning", 
body:" apple services authentication automatic provisioning to advantage bitrise steps offer built-in, automated ios code signing options, need set apple service authentication . for steps, options. apple services authentication options ios code signing authentication method how works when use api key authentication (recommended) you connect app store connect account bitrise using api key. we recommend using option unless account with apple developer enterprise program. if receive option create api key request access greyed out, need contact account holder accept license agreement with apple use authentication. apple id authentication you connect apple id bitrise. if two-factor authentication enabled account, provide app-specific password process. your expires 30 days refresh connection. you use solution if: you access api key any reason. using account with apple developer enterprise program. you consider using manual provisioning . " });
this.add({id:558, 
title:"Configuring the Steps for automatic provisioning", 
body:" configuring steps automatic provisioning there ways handle automatic provisioning bitrise: using official xcode steps manage code signing files build app. using manage ios code signing step. table 22, “ describes use cases methods. to able configure necessary steps, check either: using the xcode stepsusing the manage ios code signing step don't use certificate profile installer step if use automatic provisioning, need certificate profile installer step. steps with automatic provisioning options steps how work when use xcode steps: xcode archive export ios export ios tvos xcode archive xcode build testing ios these steps set code signing xcode project automatically with nearly zero configuration. we recommend using steps scenarios. manage ios code signing step this step set code signing xcode project running build. you use dedicated step if: you building app script fastlane. you cross-platform project. for example, react native, flutter, ionic cordova. you building macos app. " });
this.add({id:559, 
title:"Using the Xcode Steps", 
body:" using xcode steps you use any xcode steps with built-in automatic management code signing assets. set connection apple services. you choose api key authentication apple id authentication . we generally recommend api key authentication. add any following steps workflow, depending need: xcode archive export ios : builds xcode app exports ipa type choose. export ios tvos xcode archive : exports ipa existing archive. xcode build testing ios : builds xcode app with build-for-testing action. set automatic code signing method input apple service authentication type set up. for example, chose api key authentication, choose api-key option. yaml example setting code signing method in example, xcode archive export ios step set use api key authentication. - xcode-archive@4: \n inputs: automatic_code_signing: api-key in cases, default values inputs sufficient set apple connection correctly. " });
this.add({id:560, 
title:"Using the Manage iOS Code Signing Step", 
body:" using manage ios code signing step use dedicated step automatically managing code signing assets use xcode steps build ios app, cross-platform app. add manage ios code signing step any dependency installer workflow, run cocoapods install carthage . set automatic code signing input apple service connection want use. you choose api key authentication apple id authentication . if use apple id authentication, enter team the developer portal team id input. make sure not modify xcode project step. for example, don't change bundle id. add step builds archives app, fastlane step. " });
this.add({id:561, 
title:"iOS code signing with manual provisioning", 
body:" ios code signing with manual provisioning to manage code signing files manually, need upload .p12 certificates app's provisioning profiles bitrise. there multiple ways this. to manage code signing files manually, need upload .p12 certificates app's provisioning profiles bitrise. you need upload developer certificate development type provisioning profile! that necessary xcode steps able test build apps properly. generating code signing files if don't necessary code signing files ready, generate new files: generating ios code signing files to upload code signing files bitrise, first need export .p12 file format. once successfully exported files, bitrise. you options: via api . uploading manually bitrise. this guide focuses option. to manually upload code signing files bitrise: make sure .p12 certificates provisioning profiles exported ready. check exporting ios code signing files information. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu. add files: to add certificate, click add .p12 file button. in dialog box, upload file and, required, provide password certificate. to add provisioning profiles, click add profile(s) button. in dialog box, upload file(s). make sure certificate profile installer step app’s workflow . you check workflow tab workflow editor . please note steps before steps archive export app (for example, xcode archive & export ios ) workflow. " });
this.add({id:562, 
title:"Creating a signed IPA for Xcode projects", 
body:" creating signed ipa xcode projects you easily create signed ipa file xcode project with bitrise apple connection set correctly code signing files available builds. overview ios code signing bitrise for comprehensive overview steps available code signing asset management, visit ios code signing page . you easily create signed ipa file xcode project with bitrise. you set apple service connection bitrise. your code signing files managed correctly . you set relevant inputs xcode archive export ios step . upload distribution and development signing certificates we strongly recommend uploading both development distribution signing certificates project. if don't uploaded certificate, steps with automatic provisioning options generate fly time start build. this eventually lead reaching maximum number certificates, blocking starting new builds. if you’re set, proceed setting ipa export workflow . workflow editor bitrise.yml make sure necessary code signing files collected uploaded . make sure xcode archive & export ios step workflow. set distribution method input step. the options are: auto-detect - please note option deprecated removed. we recommend using it. app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . save workflow, start new build. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input correct value. the available options are: app-store : choose want deploy app app store. requires distribution certificate store provisioning profile. ad-hoc : choose want deploy app ad-hoc testers. requires distribution certificate ad hoc provisioning profile. enterprise : choose apple enterprise account want use distribute app. development : choose internal testing. requires developer certificate development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development that’s all. xcode automatically select right signing files based project’s bundle id team settings, export method set. " });
this.add({id:563, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:563, 
title:"Signing an IPA file with a different team’s code signing file", 
body:" signing ipa file with different team’s code signing you want sign ipa file with different team’s code signing files. for example: if use company’s code signing files internal builds, client’s used app store distribution. if use apple id automatic code signing belongs multiple teams, the developer portal team export input specify used asset management. to so: make sure right code signing files new development team uploaded bitrise. set the developer portal team use export option (in addition distribution method ). set distribution method . " });
this.add({id:564, 
title:"Signing an IPA with multiple code signing identities", 
body:" signing ipa with multiple code signing identities you create multiple ipa files with different code signing identities single bitrise build. just need make sure required available use export ios tvos xcode archive step. overview ios code signing asset management for comprehensive overview steps available code signing asset management, visit ios code signing page . you create multiple ipa files with different code signing identities single bitrise build. during development ios app need multiple types distributions different purposes, internal testing deployment app store. the good news does require setting separate workflows bitrise.io . in example we’ll setting workflow create signed ipa files: with development with app-store export method. advanced configuration options the procedure lists bare minimum requirements configure steps export xcode archives. check step workflow editor step's step.yml github see potential configuration options, including limited overriding bitrise-managed automatic code signing recompiling bitcode, using specific .plist file configure exporting. workflow editor bitrise.yml make sure necessary code signing files available build. make sure xcode archive & export ios step workflow. in list input variables, navigate distribution method select development dropdown menu. set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . add export ios tvos xcode archive step workflow. this reuses archive generated xcode archive export ios step does second export archive. set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization. apple-id use apple id authorization. in list input variables, navigate distribution method select app-store dropdown menu. make sure necessary code signing files available build. open bitrise.yml file app. make sure xcode-archive step workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n set distribution_method input development . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n distribution_method: development set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development add export-xcarchive step workflow. this reuses archive generated xcode-archive step does second export archive. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development\n export-xcarchive:\n set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization. apple-id use apple id authorization. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development\n export-xcarchive:\n set distribution_method input app-store . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n automatic_code_signing: api-key\n distribution_method: development\n export-xcarchive:\n app-store\n and you’re done! feel free add multiple export ios tvos xcode archive steps workflows create multiple different signed .ipa files necessary. " });
this.add({id:565, 
title:"iOS code signing for Ionic and Cordova projects", 
body:" ios code signing ionic cordova projects bitrise supports manual automatic provisioning ios code signing ionic cordova apps well. naturally, bitrise supports ios applications built with ionic cordova . however, code signing process slightly different compared native xcode project. bitrise supports manual automatic provisioning ionic cordova apps - again, processes somewhat different. " });
this.add({id:566, 
title:"Ionic\/Cordova code signing with manual code signing asset management", 
body:" ionic\/cordova code signing with manual asset management generate native xcode project locally ionic cordova calling cordova platform add ios ionic cordova platform add ios . upload files bitrise.io . make sure certificate profile installer step workflow. add generate cordova build configuration step workflow. it come certificate profile installer step. fill required inputs step. please note code signing identity provisioning profile required inputs ios apps marked such. build configuration : set debug release . code sign identity : enter developer distribution identity. provisioning profile : enter appropriate provisioning profile. packaging type : controls type build generated xcode. set code signing need. add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. this step come generate cordova build configuration step workflow. run build! " });
this.add({id:567, 
title:"Ionic\/Cordova code signing with automatic code signing asset management", 
body:" ionic\/cordova code signing with automatic asset management make sure .p12 signing certificates uploaded bitrise.io . add cordova prepare ionic prepare step workflow. these steps platform rm platform add commands. add manage ios code signing step workflow. if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. the step export: the project’s development team. the installed codesign identity’s name. the installed provisioning profile. one code signing step if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. select apple service connection method (based apple service set bitrise ) distribution method . add generate cordova build configuration step workflow. configure step use code signing settings exported manage ios code signing step: development distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: development code_sign_identity: iphone developer\n configuration: debug\n production distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: app-store code_sign_identity: iphone developer\n configuration: release\n add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. set should remove platforms prepare step? false . this crucial: ensures step remove re-add platform native projects generated cordova prepare ionic prepare step. run build! " });
this.add({id:566, 
title:"Ionic\/Cordova code signing with manual code signing asset management", 
body:" ionic\/cordova code signing with manual asset management generate native xcode project locally ionic cordova calling cordova platform add ios ionic cordova platform add ios . upload files bitrise.io . make sure certificate profile installer step workflow. add generate cordova build configuration step workflow. it come certificate profile installer step. fill required inputs step. please note code signing identity provisioning profile required inputs ios apps marked such. build configuration : set debug release . code sign identity : enter developer distribution identity. provisioning profile : enter appropriate provisioning profile. packaging type : controls type build generated xcode. set code signing need. add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. this step come generate cordova build configuration step workflow. run build! " });
this.add({id:567, 
title:"Ionic\/Cordova code signing with automatic code signing asset management", 
body:" ionic\/cordova code signing with automatic asset management make sure .p12 signing certificates uploaded bitrise.io . add cordova prepare ionic prepare step workflow. these steps platform rm platform add commands. add manage ios code signing step workflow. if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. the step export: the project’s development team. the installed codesign identity’s name. the installed provisioning profile. one code signing step if certificate profile installer manage ios code signing steps workflow, build encounter unexpected issues. select apple service connection method (based apple service set bitrise ) distribution method . add generate cordova build configuration step workflow. configure step use code signing settings exported manage ios code signing step: development distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: development code_sign_identity: iphone developer\n configuration: debug\n production distribution example : - generate-cordova-build-configuration:\n inputs:\n development_team: $bitrise_developer_team \n package_type: app-store code_sign_identity: iphone developer\n configuration: release\n add cordova archive ionic archive step workflow. fill required inputs. the platform input needs set to: device . the build command configuration input match build configuration input generate cordova build configuration step. set should remove platforms prepare step? false . this crucial: ensures step remove re-add platform native projects generated cordova prepare ionic prepare step. run build! " });
this.add({id:568, 
title:"Protecting your code signing files", 
body:" protecting code signing files you set code signing files protected mode: means downloaded bitrise.io account. your builds able use protected files reveal way overwrite them: delete upload new ones instead. you set code signing files protected mode: means downloaded bitrise.io account. your builds able use protected files reveal way overwrite them: delete upload new ones instead. open app bitrise with user admin role app . on main page app, click app settings icon: . on left, select code signing menu. locate file wish make protected open dropdown menu clicking ellipsis button right. select make protected option. a dialog box warn change irreversible confirm it. you need separately save changes. once done, option file’s dropdown menu delete . " });
this.add({id:569, 
title:"Generating iOS code signing files", 
body:" generating ios code signing files you generate ios code signing files with xcode apple developer portal. you’ll need kinds files sign app: certificates provisioning profiles. the certificates - development distribution guarantee you, named developer, built code, member developer program, apple issued with certificate so. to certificate, need generate certificate signing request with keychain access send apple. this create public\/private key pair don’t already. apple verify information, certificate you. provisioning process preparing configuring app launch devices use services. development provisioning profiles holds device identifiers (uuid) eligible run app. distribution include app store allow distribute store. ad-hoc good distributing testers. " });
this.add({id:570, 
title:"Generating a code signing certificate with Xcode", 
body:" generating code signing certificate with xcode first add apple id accounts preferences xcode. if with this, skip selecting apple id . start xcode. select xcode > preferences navigation bar. at window select accounts . click + lower left corner select add apple id… a dialog appear. add apple id password, select sign . if don’t account create apple id selecting create apple id . select apple id team right bar, click view details… . a dialog appear see code signing identities provisioning profiles. under signing identities locate ios development ios distribution profiles. if created see create button them. simply select xcode issue download code signing identities you. when click reset code signing identities if code signing identities issued, see reset button them. you issue new certificates with it, xcode generate download, note invalidate previous certificate, so you’ve lost files know doing! " });
this.add({id:571, 
title:"Generating a code signing certificate manually", 
body:" generating code signing certificate manually open keychain access app macos. select keychain access > certificate assistant > request certificate from authority… fill user’s email address common name select saved disk . click continue save generated certsigningrequest file locally. go https:\/\/developer.apple.com log account. select certificates, ids & profiles left sidebar. go certificates click + button right corner. select ios app development click continue . on page see instructions creating certsigningrequest file. click continue . upload created certsigningrequest form click continue . it generate code signing certificate you. download certificate double click install it. once installed added keychain access app. " });
this.add({id:572, 
title:"Generating a provisioning profile with Xcode", 
body:" generating provisioning profile with xcode xcode automatically generate app id project, matches unique bundle project. an used identify apps. it explicit identifier wildcard match multiple ones. xcode create team provisioning profile project automatically, so start deploying device automatically. if hit any issues make sure device eligible, example doesn’t match deployment target error. also app connected correct team. to generate provisioning profile using xcode: select project file xcode’s navigator. go signing section team select correct team. build project xcode. to download provisioning profile xcode: start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team, select download manual profiles . go ~\/library\/mobiledevice\/provisioning profiles\/ profiles there. " });
this.add({id:573, 
title:"Generating a provisioning profile manually", 
body:" generating provisioning profile manually to generate provisioning profile manually, need working apple developer account, set app id project. " });
this.add({id:574, 
title:"Setting up an App ID", 
body:" setting app id if haven’t created app id project, https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate identifiers > app ids . in app id description add recognizable app id. select explicit app id add bundle identifier field. select any additional app services need. click continue . " });
this.add({id:575, 
title:"Generating a provisioning profile", 
body:" generating provisioning profile go https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate provisioning profiles > all . select + right corner. for development select correct project type development , distribution select correct distribution click continue. select app id like use. select certificates wish include provisioning profile. these able build with profile; click continue . select devices like use with profile click continue. name provisioning profile click continue . your profile generated. you download device double click install mac. " });
this.add({id:570, 
title:"Generating a code signing certificate with Xcode", 
body:" generating code signing certificate with xcode first add apple id accounts preferences xcode. if with this, skip selecting apple id . start xcode. select xcode > preferences navigation bar. at window select accounts . click + lower left corner select add apple id… a dialog appear. add apple id password, select sign . if don’t account create apple id selecting create apple id . select apple id team right bar, click view details… . a dialog appear see code signing identities provisioning profiles. under signing identities locate ios development ios distribution profiles. if created see create button them. simply select xcode issue download code signing identities you. when click reset code signing identities if code signing identities issued, see reset button them. you issue new certificates with it, xcode generate download, note invalidate previous certificate, so you’ve lost files know doing! " });
this.add({id:571, 
title:"Generating a code signing certificate manually", 
body:" generating code signing certificate manually open keychain access app macos. select keychain access > certificate assistant > request certificate from authority… fill user’s email address common name select saved disk . click continue save generated certsigningrequest file locally. go https:\/\/developer.apple.com log account. select certificates, ids & profiles left sidebar. go certificates click + button right corner. select ios app development click continue . on page see instructions creating certsigningrequest file. click continue . upload created certsigningrequest form click continue . it generate code signing certificate you. download certificate double click install it. once installed added keychain access app. " });
this.add({id:572, 
title:"Generating a provisioning profile with Xcode", 
body:" generating provisioning profile with xcode xcode automatically generate app id project, matches unique bundle project. an used identify apps. it explicit identifier wildcard match multiple ones. xcode create team provisioning profile project automatically, so start deploying device automatically. if hit any issues make sure device eligible, example doesn’t match deployment target error. also app connected correct team. to generate provisioning profile using xcode: select project file xcode’s navigator. go signing section team select correct team. build project xcode. to download provisioning profile xcode: start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team, select download manual profiles . go ~\/library\/mobiledevice\/provisioning profiles\/ profiles there. " });
this.add({id:573, 
title:"Generating a provisioning profile manually", 
body:" generating provisioning profile manually to generate provisioning profile manually, need working apple developer account, set app id project. " });
this.add({id:574, 
title:"Setting up an App ID", 
body:" setting app id if haven’t created app id project, https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate identifiers > app ids . in app id description add recognizable app id. select explicit app id add bundle identifier field. select any additional app services need. click continue . " });
this.add({id:575, 
title:"Generating a provisioning profile", 
body:" generating provisioning profile go https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate provisioning profiles > all . select + right corner. for development select correct project type development , distribution select correct distribution click continue. select app id like use. select certificates wish include provisioning profile. these able build with profile; click continue . select devices like use with profile click continue. name provisioning profile click continue . your profile generated. you download device double click install mac. " });
this.add({id:576, 
title:"Exporting iOS code signing files manually", 
body:" exporting ios code signing files manually you export ios code signing certificates provisioning profiles manually, using xcode. you export ios code signing certificates provisioning profiles manually, using xcode. " });
this.add({id:577, 
title:"Exporting iOS code signing certificates with Xcode", 
body:" exporting ios code signing certificates with xcode start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team right bar, click view details... . a dialog appear see code signing identities provisioning profiles. select certificates choose export pop-up menu. enter filename save as dialog. you set password verification store securely, it’s necessary. xcode export requested certificate .p12 format. " });
this.add({id:578, 
title:"Exporting iOS code signing certificates manually", 
body:" exporting ios code signing certificates manually start keychain access. on left sidebar select login left select my certificates . this list installed certificates associated private key. select like export choose export pop-up menu. enter filename save as dialog. you set password verification store securely, it’s necessary. keychain access export requested certificate .p12 format. " });
this.add({id:579, 
title:"Exporting iOS provisioning profiles with Xcode", 
body:" exporting ios provisioning profiles with xcode start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team right bar, click view details... . a dialog appear see code signing identities provisioning profiles. locate profile looking provisioning profiles. if don’t installed system, click download button it. choose show finder pop-up menu, installed provisioning profile you. " });
this.add({id:580, 
title:"Exporting iOS provisioning profiles manually", 
body:" exporting ios provisioning profiles manually go https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate provisioning profiles > all. find provisioning profile looking list use search filter. click selected provisioning profile, expand details. if status invalid, click edit button save again. click download button download double click install macos. " });
this.add({id:577, 
title:"Exporting iOS code signing certificates with Xcode", 
body:" exporting ios code signing certificates with xcode start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team right bar, click view details... . a dialog appear see code signing identities provisioning profiles. select certificates choose export pop-up menu. enter filename save as dialog. you set password verification store securely, it’s necessary. xcode export requested certificate .p12 format. " });
this.add({id:578, 
title:"Exporting iOS code signing certificates manually", 
body:" exporting ios code signing certificates manually start keychain access. on left sidebar select login left select my certificates . this list installed certificates associated private key. select like export choose export pop-up menu. enter filename save as dialog. you set password verification store securely, it’s necessary. keychain access export requested certificate .p12 format. " });
this.add({id:579, 
title:"Exporting iOS provisioning profiles with Xcode", 
body:" exporting ios provisioning profiles with xcode start xcode. select xcode > preferences navigation bar. at window select accounts . select apple id team right bar, click view details... . a dialog appear see code signing identities provisioning profiles. locate profile looking provisioning profiles. if don’t installed system, click download button it. choose show finder pop-up menu, installed provisioning profile you. " });
this.add({id:580, 
title:"Exporting iOS provisioning profiles manually", 
body:" exporting ios provisioning profiles manually go https:\/\/developer.apple.com log in. select certificates, identifiers & profiles left sidebar. navigate provisioning profiles > all. find provisioning profile looking list use search filter. click selected provisioning profile, expand details. if status invalid, click edit button save again. click download button download double click install macos. " });
this.add({id:581, 
title:"Troubleshooting iOS code signing", 
body:" troubleshooting ios code signing ios code signing complicated, with potential issues. we've collected common issues solutions. ios code signing complicated, with potential issues. we've collected common issues solutions. let’s look make sure works! " });
this.add({id:582, 
title:"Code signing and clean virtual machines", 
body:" code signing clean virtual machines every bitrise build uses clean virtual machine with leftover files configuration previous builds. while likely necessary code signing (certificates provisioning profiles) available local case machines. they contain any relevant project, make sure: you choose right code signing asset management option upload provisioning profiles bitrise. from steps download files virtual machine runtime. you upload necessary signing certificates code signing tab. you connected bitrise account apple developer portal. (this step needed use certificate profile installer step.) apple developer portal. if suspect error related code signing, certainly problem with three. when trying build ios app bitrise, strongly recommend generating .ipa file locally, machine first. fails, fail too. verbose logs if getting any issues, make sure enable verbose log input code signing asset management building step information nature issue. " });
this.add({id:583, 
title:"iOS code signing Steps fail", 
body:" ios code signing steps fail our ios code signing steps manage provisioning profiles you: download apple developer portal install you. here’s steps fail: before trying use step, generate .ipa file locally - with export method want bitrise ensure profiles uploaded apple developer portal. make sure bitrise account connected apple developer portal admin role team. " });
this.add({id:584, 
title:"File count limit on provisioning profiles", 
body:" file count limit provisioning profiles the maximum number provisioning profiles .p12 certificates upload code signing tab bitrise 30. if you’ve reached limit wish use more, tips how provisioning profiles: use step with automatic provisioning, xcode archive export ios , export ios tvos xcode archive , xcode build testing ios , manage ios code signing . these steps require code signing identities (certificates with .p12 extension) uploaded bitrise. you download provisioning profiles apple developer portal on-the-fly build connected apple developer account bitrise . you create .zip file containing required certificates\/profiles. in case, don’t need upload any certificates\/profiles bitrise. during build download update certificate\/profile related inputs certificate profile installer step match path certificate\/profile build machine. note certificate profile installer step supports local paths urls certificates profiles. you host profiles certificates yourself, add url pointing given certificate\/profile workflow. also note multiple urls specified certificate profile inputs. make sure separate with pipe ( | ) character. " });
this.add({id:585, 
title:"Could not install the app on a device", 
body:" could install app device to install ios apps given device, either: export ipa file with development export method, with device’s udid registered provisioning profile used export. export ipa file with ad-hoc export method install app public page generated deploy bitrise.io step. if can't install app given device: check device udid included app’s provisioning profile. if use manual provisioning, check provisioning profile uploaded bitrise. check logs see xcode archive & export ios step used provisioning profile with device’s udid it. " });
this.add({id:582, 
title:"Code signing and clean virtual machines", 
body:" code signing clean virtual machines every bitrise build uses clean virtual machine with leftover files configuration previous builds. while likely necessary code signing (certificates provisioning profiles) available local case machines. they contain any relevant project, make sure: you choose right code signing asset management option upload provisioning profiles bitrise. from steps download files virtual machine runtime. you upload necessary signing certificates code signing tab. you connected bitrise account apple developer portal. (this step needed use certificate profile installer step.) apple developer portal. if suspect error related code signing, certainly problem with three. when trying build ios app bitrise, strongly recommend generating .ipa file locally, machine first. fails, fail too. verbose logs if getting any issues, make sure enable verbose log input code signing asset management building step information nature issue. " });
this.add({id:583, 
title:"iOS code signing Steps fail", 
body:" ios code signing steps fail our ios code signing steps manage provisioning profiles you: download apple developer portal install you. here’s steps fail: before trying use step, generate .ipa file locally - with export method want bitrise ensure profiles uploaded apple developer portal. make sure bitrise account connected apple developer portal admin role team. " });
this.add({id:584, 
title:"File count limit on provisioning profiles", 
body:" file count limit provisioning profiles the maximum number provisioning profiles .p12 certificates upload code signing tab bitrise 30. if you’ve reached limit wish use more, tips how provisioning profiles: use step with automatic provisioning, xcode archive export ios , export ios tvos xcode archive , xcode build testing ios , manage ios code signing . these steps require code signing identities (certificates with .p12 extension) uploaded bitrise. you download provisioning profiles apple developer portal on-the-fly build connected apple developer account bitrise . you create .zip file containing required certificates\/profiles. in case, don’t need upload any certificates\/profiles bitrise. during build download update certificate\/profile related inputs certificate profile installer step match path certificate\/profile build machine. note certificate profile installer step supports local paths urls certificates profiles. you host profiles certificates yourself, add url pointing given certificate\/profile workflow. also note multiple urls specified certificate profile inputs. make sure separate with pipe ( | ) character. " });
this.add({id:585, 
title:"Could not install the app on a device", 
body:" could install app device to install ios apps given device, either: export ipa file with development export method, with device’s udid registered provisioning profile used export. export ipa file with ad-hoc export method install app public page generated deploy bitrise.io step. if can't install app given device: check device udid included app’s provisioning profile. if use manual provisioning, check provisioning profile uploaded bitrise. check logs see xcode archive & export ios step used provisioning profile with device’s udid it. " });
this.add({id:586, 
title:"Testing", 
body:" testing bitrise number dedicated steps help with running tests, use custom script need step library. testing app major continuous integration process. bitrise number dedicated steps help with running tests, use custom script steps need step library. check testing steps ios, android, multiplatform apps: xcode tests flutter android lint, review test app bitrise, regardless frameworks tools use. " });
this.add({id:587, 
title:"iOS testing", 
body:" ios testing run ui unit tests with xcode using xcode test ios step. with step, don't need code signing easily export test results test reports add-on. build ios app testing with xcode build testing ios step. the step uses build-for-testing action xcodebuild build test targets exports resulting bundle. you use bundle, example, perform device testing with firebase. build ios app simulator with xcode build simulator step. the step builds .app file install ios simulator. this requires code signing, simple way provide testable app testers. you easily run multiple tests parallel with pipelines: currently supported use cases for the ios platform . " });
this.add({id:588, 
title:"Android testing", 
body:" android testing run unit tests android apps with android unit test step. you configure step run tests certain modules variants, pass additional arguments gradle task running tests. the export test results test reports add-on. run instrumented tests using android build ui testing android instrumented test steps. the steps generate export apk test run instrumented tests using adb . you easily run multiple tests parallel with pipelines: currently supported use cases for the android platform . " });
this.add({id:589, 
title:"Flutter testing", 
body:" flutter testing run unit ui tests flutter apps with flutter test step. the step simply runs flutter test command app: configure run specific tests find. you export results test reports add-on. perform static code analysis with dart analyzer : flutter analyze step runs flutter analyze command with required fail severity additional parameters wish append it. " });
this.add({id:590, 
title:"React Native testing", 
body:" react native testing run unit ui tests react native apps npm test yarn test . the steps run tests script scripts object package. perform end-to-end testing with detox , gray box end-to-end tests automation library mobile apps built with react native. " });
this.add({id:591, 
title:"Device testing with Firebase", 
body:" device testing with firebase bitrise offers convenient device testing solution with firebase test labs. you don't need account, any complex configuration: just build ios android apps run dedicated steps runs tests export reports add-on. the solution works multiplatform apps, flutter react native apps. device testing ios : build test bundle .xcodeproj .xcworkspace file run device tests real devices firebase. device testing android : build apk run robo-, instrumented-, gameloop tests with device testing step. device testing multiplatform apps : learn how configure multiplatform apps device tests with firebase. " });
this.add({id:592, 
title:"Test Reports", 
body:" test reports the test reports add-on offers convenient way view analyze test results. you break results cases, state screenshots artifacts add-on. set test reports add-on apps using supported testing steps deploy bitrise.io step. export test results any testing step using custom script step dedicated export test results test reports add-on step. " });
this.add({id:593, 
title:"Test Reports", 
body:" test reports you run ui tests unit bitrise. view test reports, access add-ons section build details page. test reports allows view test results convenient way. use testing steps , test results deployed directory. from there, test reports process display way that’s easy read analyze. " });
this.add({id:594, 
title:"Test reports overview", 
body:" test reports overview you run ui tests unit bitrise with test reports, view results different test types page. to able use test reports, need make sure test results end correct directory format. from directory, deploy bitrise.io step exports results add-on. there ways make sure test results end correct location appropriate format: using dedicated testing steps automatically export results. with steps, need step deploy bitrise.io step workflow run build. using export test results test reports add-on step. using custom script step. exporting results any testing step both second method allows export test results any step. read details exporting to test reports from any step guide. test reports read display test results formats: you use test reports with testing steps default. these run tests defined repository store output environment variable. the deploy bitrise.io step rest: read results send test reports. the steps are: xcode test ios . android unit test . ios device testing . virtual device testing android . flutter test . with steps, don't worry format location test results. all need make sure include deploy bitrise.io step end workflow. testing guides check testing guides read how use steps bitrise: running android unit testsdevice testing for androiddevice testing for iosrunning unit and ui tests for ios appsgetting started with flutter apps" });
this.add({id:595, 
title:"Configuring Test Reports", 
body:" configuring test reports test reports doesn’t require any sort complicated configuration. all need tests repository, steps workflow. deploy bitrise.io version the deploy bitrise.io step version 1.4.1 newer - older versions step not support test reports. we recommend using 1.5.0 higher best experience. add tests app’s repository. add appropriate testing steps workflow. for example, android project, use android unit test step run android unit tests. make sure deploy bitrise.io step workflow. run build. and that’s it! once build finished, able view test reports. " });
this.add({id:596, 
title:"Checking test results", 
body:" checking test results test reports display important information tests ran test summary tab. you see tests ran, duration, results. click tabs individual details. to access result particular test: find app dashboard, select it. on app's main page, select build want check out. go the  tests tab. you see failed tests tests tab itself. if failed tests, click view test reports button. on test summary tab, test want check. alternatively, bar, click tab set check out.to filter tests based results, open menu right, all default. click test cases see details. ui tests grouped according device unit test cases. you find: the total number tests ran, ratio successful failed tests. the duration individual test (both unit tests ui tests). in case ui tests, orientation locale device. you check, depending test type: individual test cases performance data videos screenshots test artifacts logs as noted above, depends test type, too: unit tests, won’t see screenshots videos, course. " });
this.add({id:597, 
title:"Downloading files", 
body:" downloading files every file downloaded test reports: includes screenshots, videos, apk ipa files. open test set. on left menu, click tab contains files. for example,  test artifacts . click  download  next file name. if want download files available tab, click  download all files . " });
this.add({id:598, 
title:"Exporting to Test Reports from any Step", 
body:" exporting test reports any step you export test reports any step using export test results reports add-on step. alternatively, configure script files. test reports allows view test results convenient way. by default, steps support test reports add-on: xcode test ios android unit test ios device testing virtual device testing android flutter test to export test results generated any step deploy bitrise.io step, options: we recommend using export test results test reports add-on step : step locates test results based inputs. however, export screenshots images. you configure custom script step creates exports necessary files. if need screenshots images, export test results images script step. " });
this.add({id:599, 
title:"Using the Export test results to the Test reports add-on Step", 
body:" using export test results test reports add-on step you use the  export test results test reports add-on   step make sure test results appear test reports add-on, use steps don’t automatically export results. with correct configuration, step finds test results app’s repository, puts export directory. screenshots images the step export test results, .xcresult junit xml format. if test results .xcresult file, screenshots generated test included exported test reports add-on. if use junit xml format, need export screenshots images using script step: exporting screenshots and other images to test reports . in case, test results exported using script step. you export screenshots test results separate steps! go app’s page bitrise.io . go workflows open workflow editor. from workflow menu, select workflow use run tests. add export test results test reports add-on step after testing step. in the test input, set test run. the results test reports add-on. in path custom test results reside input, set path test results found. we recommend setting folder here, set specific filepath. the default value source directory app . example patterns: if app’s root directory app: app\/build\/test-results\/testdemodebugunittest\/ if test results app folder root directory: .\/app\/build\/test-results\/testdemodebugunittest\/ in test result search pattern input, set pattern matches test result file. this search pattern used file folder path was set path custom test results reside input. if than match, step export first match with warning logs. set specific filepath previous input, just * here. example patterns: matching files base path: * matching files given directory base path: *\/build\/test-results\/testdemodebugunittest\/* in step’s test result directory input, make sure path correct. do not modify input’s value: folder deploy bitrise.io step look test results export them. it set $bitrise_test_result_dir env var. make sure deploy bitrise.io step workflow . " });
this.add({id:600, 
title:"Using custom scripts to export test results", 
body:" using custom scripts export test results you use scripts script step export test results. you just need make sure that: your test results junit xml format . you place results $bitrise_test_result_dir , environment variable pointing correct path. the results test run sub-directory. you place test-info.json file sub-directory correspond test run. the test-info.json file the test-info.json file test run defined it. each test-info.json file. the value test-name appear test run test reports page. \/\/ test name ... { \"test-name\":\"my first test\" } here’s example script export test results: #!\/bin\/env bash\nset -ex\n\n# creating sub-directory test run bitrise_test_result_dir:\n\ntest_run_dir=\"$bitrise_test_result_dir\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# exporting junit xml report:\n\ncp \"my\/test\/report\/xml\/file\/path.xml\" \"$test_run_dir\/unittest.xml\"\n\n# test-info.json file with defined:\n\necho '{\"test-name\":\"my test run name\"}' >> \"$test_run_dir\/test-info.json\"\n if goes well, able see test results test reports page. " });
this.add({id:601, 
title:"Exporting screenshots and other images to Test Reports", 
body:" exporting screenshots images test reports the  export test results test reports add-on step export test result files deploy bitrise.io step supports formats results: the .xcresult file ios apps. a junit xml file any app. if tests produce .xcresult file, screenshots generated test run result. as such, exported test reports add-on. if use junit xml format want export screenshots images, use export test results test reports add-on step. you need use custom script export result screenshots. the script step, test-info.json file with necessary information test runs: using custom scripts to export test results . to export screenshots with results, script place images $bitrise_test_result_dir folder. folder structure the image files $bitrise_test_result_dir folder. they can't nested folder $bitrise_test_result_dir . script export image #!\/bin\/env bash\nset -ex\n\n# creating sub-directory test run bitrise_test_result_dir:\n\ntest_run_dir=\"$bitrise_test_result_dir\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# copying image:\n\ncp \"my\/test\/screenshots\/screenshot.png\" \"$test_run_dir\/screenshot.png\" associating images with test runs you associate image with specific test run placing directory run. in case, appear suits given " });
this.add({id:602, 
title:"Running unit and UI tests for iOS apps", 
body:" running unit ui tests ios apps you need steps run xcode tests view results: test ios, deploy bitrise.io. you run unit ui tests ios apps bitrise with dedicated step . the step runs test targets defined xcode project exports results direct download test reports add-on . to run xcode tests bitrise, need steps view results: xcode test ios . deploy bitrise.io . code signing files running xcode tests deploying results bitrise require any code signing files. so don’t worry just yet! the xcode test ios step runs tests, exports test results, .xcresult file, test attachments, log xcodebuild test command. xcode test results html you view xcode test results rich html format, using generate xcode test report html step: viewing xcode test results in rich html format . to run tests using step: workflow editor bitrise.yml make sure install app's dependencies workflow. add xcode test ios step workflow. make sure project path input points correct location. the input asks path .xcodeproj, .xcworkspace , package.swift file. in cases, don't need change input: adding new app, project scanner automatically finds relevant file stores location environment variable default value input. make sure scheme input points scheme want use build app. the default value environment variable stores scheme set initial configuration app. if wish use different scheme, type input field. shared scheme the scheme shared xcode scheme! configure device destination device destination specifier input: input takes comma-separated key-value pairs. for example, wish build app test iphone 14 with latest available os: platform=ios,name=iphone 14 plus,os=latest the input sets -destination option xcodebuild . read possible options: how i run unit tests command line? optionally, set specific test plan test plan input. the input sets -testplan option test action xcodebuild . if leave empty, test plan specified xcode scheme used. add deploy bitrise.io step end workflow able access test results outputs artifacts tab test reports add-on. make sure install app's dependencies workflow. add xcode-test step workflow. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs: make sure project_path input points correct location. the input asks path .xcodeproj, .xcworkspace , package.swift file. in cases, don't need change input: adding new app, project scanner automatically finds relevant file stores location environment variable default value input. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n make sure scheme input points scheme want use build app. the default value environment variable stores scheme set initial configuration app. if wish use different scheme, type input field. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: test shared scheme the scheme shared xcode scheme! configure device destination destination input: input takes comma-separated key-value pairs. for example, wish build app test iphone 14 with latest available os: your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: test\n destination: platform=ios simulator,name=iphone 14 plus,os=latest the input sets -destination option xcodebuild . read possible options: how i run unit tests command line? optionally, set specific test plan test_plan input. the input sets -testplan option test action xcodebuild . if leave empty, test plan specified xcode scheme used. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: test\n destination: platform=ios simulator,name=iphone 11 plus,os=latest\n test_plan: my_plan add deploy-to-bitrise-io step end workflow able access test results outputs artifacts tab test reports add-on. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: test\n destination: platform=ios simulator,name=iphone 11 plus,os=latest\n test_plan: my_plan\n deploy-to-bitrise-io: headless mode from xcode 9 onwards, tests run headless mode default: means simulator background only. to change it, step’s debug input group set run simulator headless mode input’s value . however, with option, tests time. - xcode-test:\n inputs:\n headless_mode: 'no' using xcpretty the xcpretty output tool does support parallel tests. if tests enabled project, step’s xcodebuild log formatting input group set log formatter input’s value xcodebuild xcbeautify . - xcode-test:\n inputs:\n log_formatter: xcbeautify " });
this.add({id:603, 
title:"Rerunning failed tests (Not available in Xcode 13)", 
body:" rerunning failed tests (not available xcode 13) the should retry test failure? (not available xcode 13+) input test repetition section xcode test ios step allows automatically rerun all tests, just failed ones. if set input yes , step run xcodebuild time case test failure. from xcode 13 above, feature available anymore. use test repetitions mode (available xcode 13+) input with retry_on_failure option selected. this allows rerun failed test\/s instead running tests. you test repetition feature with xcode test ios step version 3.0.0 above. " });
this.add({id:604, 
title:"Test Repetitions", 
body:" test repetitions xcode’s test repetition modes available with xcode test ios step stacks running xcode 13 bitrise. with test repetitions, run any type tests multiple times various ways retry failure, failure max repetitions. the xcode test ios step’s test repetitions mode (available xcode 13+) input offers following options: none : the tests won’t repeat. until_failure : repeats test fails maximum repetition. the default number runs three. retry_on_failure : failed tests run succeed repetition number specify. the default test repetitions three. up_until_maximum_repetitions : reruns tests maximum test repetition reached regardless outcomes. please note options available xcode test ios version 3.0.0 above. with maximum test repetitions (available xcode 13+) input specify maximum number test repetitions. please note add greater than test repetition mode (available xcode 13+) input set than none . enable relaunch tests each repetition (available xcode 13+) input launch tests completely new process repetition. " });
this.add({id:605, 
title:"Installing an .ipa file", 
body:" installing .ipa file you install .ipa files public page artifacts tab build. you install .ipa files generated bitrise build test devices ways: using public install page . the public install page generated url distributed users access provisioned registered test devices. downloading file artifacts tab build's page bitrise. installing .ipa file test device consist phases: initiating compatibility check, installing configuration profile device, finishing with app device. in tutorial we’re describing: how install app registered test device bitrise account (for subscribed wishes check current version app). how install app test device registered bitrise (for users). installing .ipa file artifacts tab installing .ipa file artifacts tab possible bitrise users. " });
this.add({id:606, 
title:"Prepping for installation", 
body:" prepping installation before installing app any test device, app’s developer complete couple steps build share with anyone: the device, app installed, registered test device developer’s apple account. the device included provisioning profile app. the device meets minimum os requirements app. please note test device registered apple developer portal, developer manually add list, re-build app so .ipa file contains device\/s installed on. we recommend register test device bitrise well. which browser i use with public install page? anyone wishes install app test device make sure public page opened native safari session with non-incognito mode. " });
this.add({id:607, 
title:"Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS", 
body:" installing .ipa file bitrise's public install page ipad with ipados if using ipad running ipados, make sure open bitrise public install page mobile mode. when open public install page .ipa file, bitrise checks device stored embedded provisioning profile not. this check complete visit mobile mode instead desktop version. we suggest switch temporarily. you easily switch mobile mode temporarily tap ᴀa icon left corner safari address bar show mobile website option. " });
this.add({id:608, 
title:"Installing an .ipa file on test devices from the public install page", 
body:" installing .ipa file test devices public install page the public install page convenient way sharing latest version app with team members any stakeholders wish check out. includes important details build filename, size, code, minimum sdk version, number. you configure deploy bitrise.io step send email users with link public install page. this shared anyone. during flow, use native, non-incognito safari session instead any in-app browser type. if follow link notification email got bitrise, public install page automatically open native session. would download app? if wish download app manually upload else, button artifacts page build. please note downloading app does mean install test device. " });
this.add({id:609, 
title:"Installing an app on a test device without a Bitrise account", 
body:" installing app test device bitrise account long tap link received bitrise. to open native safari, open link . it brings public install page native safari session. if copy link email, make sure paste tap link click check device compatibility with app yellow message box. if see message, likely using browser so switch safari. tap allow pop-up install configuration profile device. this makes device’s udid available bitrise compatibility check. a pop-up confirms configuration profile downloaded, installed settings app. tap close . tap home button home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install again. wait profile installed. once profile installed, you’re directed public install page. as see, install button available. tap it! tap ok pop-up. as final confirmation, tap install press home button. now you’re installing app test device. wait till app installs test device’s home screen. check app you’ve successfully installed test device. " });
this.add({id:610, 
title:"Installing an app on a test device not registered to Bitrise", 
body:" installing app test device registered bitrise if you’re accessing public install page test device displays message, you’ll register bitrise steps different flow. please note add test device bitrise account. tap click start device registration process. tap allow download configuration profile. when configuration profile downloaded, tap close . tap home button settings app test device’s home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install install profile pop-up. wait profile installation complete. you automatically redirected register test device page. your device’s udid gets populated automatically. you change device here. tap register device . you land public install page install button available. tap it! tap ok prompt. to install app test device, tap install . then press home button follow installment app. if went well, installed app test device’s home page. " });
this.add({id:611, 
title:"Installing an app on a test device not registered to Bitrise", 
body:" installing app test device registered bitrise if you’re accessing public install page test device displays message, you’ll register bitrise steps different flow. please note add test device bitrise account. tap click start device registration process. tap allow download configuration profile. when configuration profile downloaded, tap close . tap home button settings app test device’s home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install install profile pop-up. wait profile installation complete. you automatically redirected register test device page. your device’s udid gets populated automatically. you change device here. tap register device . you land public install page install button available. tap it! tap ok prompt. to install app test device, tap install . then press home button follow installment app. if went well, installed app test device’s home page. " });
this.add({id:612, 
title:"Installing an .ipa file on test devices from the Artifacts tab", 
body:" installing .ipa file test devices artifacts tab you install .ipa file artifacts tab app's build. this provides secure way compared public install page requires log bitrise account, making viable external testers. to install .ipa file artifacts tab: open app bitrise. select build with .ipa file like install. go artifacts tab. click download .ipa file. click install , install app ios device section. " });
this.add({id:613, 
title:"Registering test devices for iOS apps", 
body:" registering test devices ios apps you register test device easily opening safari ios accessing test devices page profile. with browsers, manually using register button. you multiple options register test devices bitrise.io : open safari ios device access test devices tab profile settings page . manually register device test devices tab profile settings page . after registering device bitrise, make sure register apple developer portal well. we recommend using xcode archive & export ios step can: register available test devices app . register selection test devices, defined text file contains list udids . apple developer portal device limit there limit registrable devices apple developer portal, so make sure check list available test devices app use xcode archive & export ios step register devices! " });
this.add({id:614, 
title:"Register an iOS device using Safari", 
body:" register ios device using safari the comfortable way register ios test device bitrise.io open bitrise.io with safari. this way open device’s settings create temporary profile unique device identifier (udid). don’t look manually copy\/paste it. clear cache when trying install app public page, clear cache: click link appearing if synced settings old device, need clear cache register new device line. the link redirects profile settings page follow procedure described below. read installing app public install page deploying ios app bitrise.io guide. open safari non-incognito mode ios device log bitrise.io . go profile . tap account settings . tap test devices left. tap register device . in pop-up window, tap allow so bitrise.io configuration profile. tap install install profile dialog appears. enter devices’s passcode. tap install install profile again. now see udid ios device register device dialog. tap register device . register test device apple developer portal with correct provisioning profile added device use auto provisioning step with enabling profile generation. if test devices , see registered device: you delete registered device any time click remove button. " });
this.add({id:615, 
title:"Register a test device manually", 
body:" register test device manually on bitrise.io, open account selector menu right select profile settings . on menu left side, select test devices . click register device manually . in register device dialog, title field identifier field with device’s udid. click register devices . you udid plug device computer, open itunes. under summary , see serial number. if click it, reveal device’s udid paste identifier field test devices . register test device apple developer portal with correct provisioning profile added device use auto provisioning step with enabling profile generation. now see registered test device registered test devices section. you remove registered device any time click orange x icon. " });
this.add({id:616, 
title:"Checking the available test devices for an app", 
body:" checking available test devices app for any bitrise app , check registered test devices available app settings page. this aggregated list registered test devices associated with users access app, regardless role. you use any run tests app. you download list registered devices .json file. open app bitrise with user admin role app . on main page app, click app settings icon: . on menu left side, select test devices . optionally, download entire list .json file: click download json button. " });
this.add({id:617, 
title:"Registering devices on the Apple Developer Portal with the Xcode Archive Step", 
body:" registering devices apple developer portal with xcode archive step the xcode archive & export ios step allows automatically register test devices apple developer portal. by default, registers registered bitrise account configure specific selection devices. apple developer portal limit please note apple developer portal limit devices registered testing purposes, typically set 100 account. devices with xcode archive & export ios step count limit remove registered devices year. " });
this.add({id:618, 
title:"Registering all devices on the Apple Developer Portal", 
body:" registering devices apple developer portal workflow editor bitrise.yml register devices bitrise. register using ios device . register manually profile settings page . open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add xcode archive & export ios step workflow. in automatic code signing input group, set register test devices apple developer portal input yes . register devices bitrise. register using ios device . register manually profile settings page . in bitrise.yml file, add xcode-archive step workflow. your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n set register_test_devices input yes . your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n register_test_devices: 'yes'\n " });
this.add({id:619, 
title:"Registering a selection of devices on the Apple Developer Portal", 
body:" registering selection devices apple developer portal workflow editor bitrise.yml get udid devices want register: checking the available test devices for an app . create .txt file add udids devices want register comma-separated list: 00000000-0000000000000001,00000000-0000000000000002,00000000-0000000000000003 make sure bitrise access file workflow: you commit repository. you upload generic file storage use file downloader step access . you dynamically generate file build. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add xcode archive & export ios step workflow. in automatic code signing input group, set register test devices apple developer portal input yes . in input group, add path .txt file containing udids path file containing devices registered input. devices registered bitrise this input takes priority devices registered bitrise account. get udid devices want register: checking the available test devices for an app . create .txt file add udids devices want register comma-separated list: 00000000-0000000000000001,00000000-0000000000000002,00000000-0000000000000003 make sure bitrise access file workflow: you commit repository. you upload generic file storage use file downloader step access . you dynamically generate file build. in bitrise.yml file, add xcode-archive step workflow. your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n set register_test_devices input yes . your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n register_test_devices: 'yes'\n set path .txt file containing udids test_device_list_path input. devices registered bitrise this input takes priority devices registered bitrise account. your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n register_test_devices: 'yes'\n test_device_list_path: path\/to\/the\/file\n " });
this.add({id:620, 
title:"Device testing for iOS", 
body:" device testing ios with bitrise’s ios device testing solution, run tests physical devices having set register devices. with bitrise’s ios device testing solution, run ui tests apps physical devices having set register devices: just need use dedicated steps set device type(s) want test app . there limits using step, than overall build time limit. it works ios apps developed frameworks, flutter react native. our device testing solution based firebase test lab : uses real, production devices running google data center test app. the flashed with updated apis customizable locale settings. you resulting logs, videos screenshots bitrise. for ios apps, firebase test lab runs xctest tests. find list available devices . limitations you limited overall build time. also note single contain one  ios device testing  step, performing type test. this bitrise sends build slug firebase test lab. sending results a  build exists error. " });
this.add({id:621, 
title:"Running device tests with Firebase for iOS apps", 
body:" running device tests with firebase ios apps to run device tests ios apps with firebase test lab solution, need add steps workflow: xcode build testing ios . ios device testing . multiplatform apps the step run device tests ios apps built with frameworks, flutter react native. you just need make sure xcode build testing ios step access app's .xcodeproj .xcworkspace file. the xcode build testing ios step performs xcodebuild command’s build-for-testing action: builds tests defined ios app’s xcode scheme . the step exports .zip file contains test directory (by default, it’s debug-iphoneos ) xctestrun file. to use step, need code signing files test app. you choose using automatic provisioning manual provisioning. the ios device testing step takes path .zip file - exported environment variable input run tests export test results bitrise. automatic vs manual code signing asset management the xcode build testing ios step manage code signing assets having manually provisioning profiles. this requires select relevant inputs (see below) upload right certificates code signing tab. this automatic code signing asset management method. if decide chose manual code signing asset management , add certificate profile installer step xcode build testing ios step. the care code signing asset management latter builds project. make sure automatic code signing method input xcode build testing ios step set . the instructions steps setting automatic code signing asset management bitrise with xcode build testing ios step. workflow editor bitrise.yml add xcode build testing ios step workflow. build testing this guide mentions important inputs setting app device testing. for information step, see xcode build testing ios . in scheme input, set xcode scheme want use. by default, value input $bitrise_scheme environment variable stored app created. in build configuration input, add xcode build configuration want use. if configuration specified, xcode project's default build used. set destination option xcodebuild device destination specifier input step. the default value generic\/platform=ios : means tests run any ios device. set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . add ios device testing step workflow.the come xcode build testing ios step. api setting inputs the inputs related test api ( test api's base url api token changed graphical ui. you attempt modify values. in test devices input field, specify devices want test app. find list available devices . you add multiple devices input, following format: deviceid,version,language,orientation make sure deploy bitrise.io step workflow, with version 1.4.1 newer. with older versions step, won’t able check results test reports page! start build . add xcode-build-for-test step workflow. build testing this guide mentions important inputs setting app device testing. for information step, see xcode build testing ios . my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n in scheme input, set xcode scheme want use. by default, value input $bitrise_scheme environment variable stored app created. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n in configuration input, add xcode build configuration want use. if configuration specified, xcode project's default build used. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n set destination option xcodebuild destination input step. the default value generic\/platform=ios : means tests run any ios device. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n automatic_code_signing: api-key\n add virtual-device-testing-for-ios step workflow. the come xcode-build-for-test step. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n automatic_code_signing: api-key\n virtual-device-testing-for-ios:\n in test_devices input field, specify devices want test app. find list available devices . you add multiple devices input, following format: deviceid,version,language,orientation my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n automatic_code_signing: api-key\n virtual-device-testing-for-ios:\n test_devices: 'iphone8,14.7,en,portrait\n make sure deploy-to-bitrise-io step workflow, with version 1.4.1 newer. with older versions step, won’t able check results test reports page! fmy-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n test_plan: test\n automatic_code_signing: api-key\n project_path: $bitrise_project_path\n virtual-device-testing-for-ios:\n test_devices: 'iphone8,14.7,en,portrait'\n deploy-to-bitrise-io: {} start build . if goes well, able view results build artifacts test reports add-on . " });
this.add({id:622, 
title:"Checking test results", 
body:" checking test results test reports display important information tests ran test summary tab. you see tests ran, duration, results. click tabs individual details. to access result particular test: find app dashboard, select it. on app's main page, select build want check out. go the  tests tab. you see failed tests tests tab itself. if failed tests, click view test reports button. on test summary tab, test want check. alternatively, bar, click tab set check out.to filter tests based results, open menu right, all default. click test cases see details. ui tests grouped according device unit test cases. you find: the total number tests ran, ratio successful failed tests. the duration individual test (both unit tests ui tests). in case ui tests, orientation locale device. you check, depending test type: individual test cases performance data videos screenshots test artifacts logs as noted above, depends test type, too: unit tests, won’t see screenshots videos, course. " });
this.add({id:623, 
title:"Running Android unit tests", 
body:" running android unit tests you perform unit tests using android unit test step, view results reports add-on. unit tests useful want verify individual code blocks, catch bugs prevent crashes early possible. on bitrise, run android unit easily with android unit test step . the step finds runs unit tests included specified module variant android project. the step export results directly test reports add-on . running multiple tests parallel you run multiple unit tests parallel, different devices shards, using pipelines feature: currently supported use cases for the android platform . to run unit tests: workflow editor bitrise.yml make sure included unit tests android project. add android unit test step workflow . make sure project location input points root directory android project. the root directory build.gradle file exists. if configured android project automatically adding app bitrise, don't change default value. in module variant inputs, set module variant want test. leave inputs blank test modules and\/or variants. you check available modules variants project project window android studio . in options input group, pass additional gradle arguments build task additional gradle arguments input. if custom output directories configured test results tests project, configure step look correct location exporting them: the local unit test html result directory pattern input sets directory html test results. the local unit test xml result directory pattern input sets directory xml test results. both directories zipped exported bitrise_deploy_dir . this ensures test results viewed, example, test reports add-on. if don't custom output directories configured, need change inputs: default values work. add deploy bitrise.io step workflow able view test results test reports add-on . make sure included unit tests android project. add android-unit-test step workflow. my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n make sure project_location input points root directory android project. the root directory build.gradle file exists. if configured android project automatically adding app bitrise, don't change default value. my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n project_location: $bitrise_source_dir\n in module variant inputs, set module variant want test. if don't step test modules and\/or variants. you check available modules variants project project window android studio . my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n module: app\n variant: debug\n project_location: $bitrise_source_dir\n in arguments input, pass additional gradle arguments build task. my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n module: app\n variant: debug\n arguments: --task\n project_location: $bitrise_source_dir\n if custom output directories configured test results tests project, configure step look correct location exporting them: the report_path_pattern input sets directory html test results. the result_path_pattern input sets directory xml test results. my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n module: app\n variant: debug\n arguments: --task\n report_path_pattern: '*build\/reports\/tests'\n result_path_pattern: '*build\/test-results'\n project_location: $bitrise_source_dir\n both directories zipped exported bitrise_deploy_dir . this ensures test results viewed, example, test reports add-on. if don't custom output directories configured, need change inputs: default values work. add deploy-to-bitrise-io step workflow able view test results test reports add-on . my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n module: app\n variant: debug\n arguments: --task\n report_path_pattern: '*build\/reports\/tests'\n result_path_pattern: '*build\/test-results'\n project_location: $bitrise_source_dir\n deploy-to-bitrise-io: " });
this.add({id:624, 
title:"Device testing for Android", 
body:" device testing android with bitrise’s android virtual device testing solution, run ui tests emulators having set register devices. with bitrise’s android virtual device testing solution, run ui tests emulators having set register devices. limitations the maximum duration virtual device testing 30 minutes. a single build contain one  virtual device testing  step performing type test ( instrumentation ,  robo  or  gameloop ). our device testing solution based firebase test lab . you resulting logs, videos screenshots bitrise.   " });
this.add({id:625, 
title:"Running tests", 
body:" running tests with bitrise, choose 3 different test types: robo (default test type bitrise). instrumentation. gameloop. if want read difference test types, look at  firebase’s documentation. there small difference configuring workflow for robo and instrumentation tests, so let’s see separately! " });
this.add({id:626, 
title:"Running robo tests", 
body:" running robo tests workflow editor bitrise.yml open workflow want use the workflow editor. add the  android build  step workflow export apk. the step stores apk path env var . you need env var later. add the  debug  task the  variant  step input field. add  virtual device testing android  step the  android build  step. set the  apk path  input field. set test type input robo . add type test device the  test devices  input field. if choosing different device than default, input format of  deviceid , version , language , orientation  separated with , . find list available devices  . start build and  check test results . in bitrise.yml file, workflow want use create new one. add the  android-build  step workflow. the step stores apk path env var . you need env var later. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n set variant input debug . my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n add virtual-device-testing-for-android step. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n set the  app_path  input field: default, value $bitrise_apk_path env var. this var exported android-build step. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n app_path: $bitrise_apk_path\n set test_type input robo . my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n test_type: robo\n app_path: $bitrise_apk_path\n add type test device the  test_devices  input field. your input format device id , version , language , orientation  separated with   , . supported models you check supported device models running gcloud firebase test android models list --filter=virtualgcloud --filter=virtual command google cloud cli. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n test_type: robo\n app_path: $bitrise_apk_path\n test_devices: 'nexus9,24,en,portrait'\n start build and check test results. " });
this.add({id:627, 
title:"Setting user input with Robo directives for successful robo tests", 
body:" setting user input with robo directives successful robo tests if app needs specific user interaction successful robo test, use the robo directives input field set necessary inputs. for example, certain ui elements accessible testing required inputs (username email address) populated log in. click the virtual device testing android step workflow. click the robo test section. find the robo directives input field set required user input directives. provide comma-separated list key-value pairs, the key is android resource target ui element, the value is text string. edittext fields supported webview elements. for example, use following parameter custom login: username_resource,username,enter_text\npassword_resource,password,enter_text\nloginbtn_resource,,single_click one directive line, parameters separated with , character. for example: resourcename,inputtext,actiontype. based input provide, successfully run robo test (even pages accessible with specific user input) check results the test reports page. the be, example: screenshots. recorded video. logs. files. here screenshot successful robo test, test got way to my application by populating the email and password fields first with pre-defined directives the robo directives. " });
this.add({id:628, 
title:"Running instrumentation tests", 
body:" running instrumentation tests workflow editor bitrise.yml open workflow want use editor. add the  android build ui testing  step workflow. to export apk test apk, set following input fields the  android build ui testing  step. project location : root directory android project. module : set module wish build. variant : set variant wish build (usually  debug ). the step outputs be  bitrise_apk_path  (which path generated apk filtering) and  bitrise_test_apk_path  (which path generated test apk filtering). add  virtual device testing android step right the  android build ui testing  step. set the  test type  input instrumentation . our  android build ui testing  step exports apk test paths automatically set the  apk path  and test apk path  input fields the  virtual device testing android  step. add type test device the  test devices  input field. if choosing different device than default, input format device id , version , language , orientation  separated with   , . start build and check test results. in bitrise.yml file, workflow want use create new one. add the  android-build-for-ui-testing  step workflow. my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n to export apk test apk, set following input fields the  android build ui testing  step. project_location : root directory android project. module : set module wish build. variant : set variant wish build (usually debug). my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n project_location: $bitrise_source_dir\n the step outputs be  bitrise_apk_path  (which path generated apk filtering) and  bitrise_test_apk_path  (which path generated test apk filtering). add virtual-device-testing-for-android step right the  android build ui testing  step. my-workflow:\n steps:\n - git-clone@8: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n project_location: $bitrise_source_dir\n virtual-device-testing-for-android:\n set the  test_type input to  instrumentation . our  android-build-for-ui-testing  step exports apk test paths automatically set the  app_path  and test_apk_path  input fields the  virtual-device-testing-for-android  step. my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n apk_path_pattern: '*\/build\/outputs\/apk\/*.apk'\n arguments: arg\n project_location: $bitrise_source_dir\n virtual-device-testing-for-android:\n test_type: instrumentation\n app_path: $bitrise_apk_path\n test_apk_path: $bitrise_test_apk_path\n add type test device the  test_devices  input field. your input format device id , version , language , orientation  separated with   , . my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n apk_path_pattern: '*\/build\/outputs\/apk\/*.apk'\n arguments: arg\n project_location: $bitrise_source_dir\n virtual-device-testing-for-android:\n test_devices: 'nexus9,24,en,portrait'\n test_type: instrumentation\n test_apk_path: $bitrise_test_apk_path\n app_path: $bitrise_apk_path\n start build and check test results. " });
this.add({id:629, 
title:"Checking test results", 
body:" checking test results test reports display important information tests ran test summary tab. you see tests ran, duration, results. click tabs individual details. to access result particular test: find app dashboard, select it. on app's main page, select build want check out. go the  tests tab. you see failed tests tests tab itself. if failed tests, click view test reports button. on test summary tab, test want check. alternatively, bar, click tab set check out.to filter tests based results, open menu right, all default. click test cases see details. ui tests grouped according device unit test cases. you find: the total number tests ran, ratio successful failed tests. the duration individual test (both unit tests ui tests). in case ui tests, orientation locale device. you check, depending test type: individual test cases performance data videos screenshots test artifacts logs as noted above, depends test type, too: unit tests, won’t see screenshots videos, course. " });
this.add({id:630, 
title:"Running tests in the Visual Studio App Center", 
body:" running tests visual studio app center upload schedule tests visual studio app center apps using upload step. upload schedule tests visual studio app center apps. the following testing frameworks available: appium. espresso. calabash. xcuitest. in workflow editor, add app center upload schedule tests step workflow. the step multiple required inputs. you value inputs setting test visual studio app center. log app center. prepare test upload . create app center project. navigate test runs tab start new test run : select devices want test app on. configure test run: choose series, language framework. on submit tab required input step upload schedule test section. click done . on bitrise, open workflow editor required inputs step. you need to: get api token. set target app. set test framework - see available options. add device selection slug. add test series. set locale (for example, en_us ) test run. set path application file, .ipa .apk. set path test directory. use appropriate directory chosen framework. " });
this.add({id:631, 
title:"Running Detox tests on Bitrise", 
body:" running detox tests bitrise detox gray box end-to-end tests automation library mobile apps built with react native. if native app bitrise, run tests. detox gray box end-to-end tests automation library mobile apps built with react native. it supports ios android apps. if native app bitrise, run tests. " });
this.add({id:632, 
title:"Before you start", 
body:" before start running detox requires: a mac with macos (el capitan 10.11 newer version). xcode 8.3 newer version with command line tools. a working react native app. install set detox project . you need install homebrew, node.js applesimutils, detox command line tools. add project create run tests locally. if android app, through  guide  after initial setup process. once done, test detox-configured project bitrise. " });
this.add({id:633, 
title:"Running a Detox test", 
body:" running detox test create a release device configuration package.json file detox section, separate detox configuration file. for information setting configuration, check documentation: project setup . example: \"detox\": {\n \"configurations\": \"ios.sim.debug\": \"binarypath\": \"ios\/build\/build\/products\/debug-iphonesimulator\/sampleprojectreactnative.app\",\n \"build\": \"xcodebuild -project ios\/sampleprojectreactnative.xcodeproj -scheme sampleprojectreactnative -configuration debug -sdk iphonesimulator -deriveddatapath ios\/build -usenewbuildsystem=no\",\n \"type\": \"ios.simulator\",\n \"name\": \"iphone 8\"\n },\n \"ios.sim.release\": \"ios\/build\/build\/products\/release-iphonesimulator\/sampleprojectreactnative.app\",\n release }\n }, on  bitrise.io , project open workflow editor. switch workflow want use. add a  run npm command  step workflow. install detox cli react native using npm command with arguments run input: install -g detox-cli\ninstall react-native-cli install test runner. for example, sample app uses mocha , installed with yarn step. to install yarn dependencies, just set the yarn command run input’s value install . add script step install necessary utilities run detox. #!\/bin\/bash\n \n# applesimutils collection utils apple simulators\nbrew tap wix\/brew\nbrew install applesimutils\n building testing release device configuration\ndetox build --configuration ios.sim.release\ndetox test ios.sim.release --cleanup you can, course, commands separate script steps, sake modularity. run build. if build fails, check example bitrise.yml file: ---\nworkflows:\n primary:\n steps:\n - activate-ssh-key: {}\n git-clone:\n inputs:\n clone_depth: ''\n title: git clone repo\n yarn@0.0.8:\n command: install\n npm@1.0.1:\n install -g detox-cli\n install detox cli\n script@1.1.5:\n content: |-\n #!\/bin\/bash\n brew tap wix\/brew\n applesimutils\n \n detox build --configuration ios.sim.release\n test ios.sim.release --cleanup\n build test release app\n deploy-to-bitrise-io@1.3.18: {}\ntroubleshootin " });
this.add({id:634, 
title:"Troubleshooting Detox tests", 
body:" troubleshooting detox tests if run issues with using detox bitrise, recommend trying rebuild entire package running test. to so, run following command bitrise build: npm rebuild detox if detox tests fail hang, contact support! " });
this.add({id:635, 
title:"Measuring your code coverage with Codecov", 
body:" measuring code coverage with codecov codecov leading code coverage solution ci\/cd pipelines, delivering metrics right workflow. it integrates directly with bitrise provide valuable insights quality order allow users ship healthier risk. codecov provides features make test coverage available actionable speed development process deliver high-quality applications. some features include: coverage changes overlaid with source code, making easier identify needed test areas. multi-language support so use codecov right box. summary coverage information directly workflow so add update tests quickly effectively. status checks block underperforming pull requests merged. seamless coverage report merging workflows upload multiple reports jobs. custom coverage information based groupings using codecov flags .   " });
this.add({id:636, 
title:"Integrating Codecov with Bitrise", 
body:" integrating codecov with bitrise in order start using codecov, generating coverage reports with preferred tool (for example, xcode gradle). create account https:\/\/codecov.io . go repository’s settings tab codecov copy repository upload token. add codecov step workflow bitrise. make sure add steps test collect coverage. add codecov upload token secret variable, codecov_token , set expose pull requests option true . click add new . click save start new build coverage metrics. additional options the codecov step wraps codecov bash uploader. you add additional options step listed our arguments documentation. " });
this.add({id:637, 
title:"Viewing your coverage reports on Codecov", 
body:" viewing coverage reports codecov to view coverage codecov, following: view url supplied the codecov step bitrise. go  https:\/\/codecov.io  navigate directly applicable pull request commit. click links provided codecov available code host’s status checks pull request comment. " });
this.add({id:638, 
title:"What's next?", 
body:" what's next? now code coverage reports, level with following suggestions: set non-blocking status checks developers habit thinking code coverage. start working code coverage setting status checks increase overall coverage pull request. isolate coverage reports different types tests parts with flags measure matters. already using flags don’t want run entire test suite with bitrise ci run? try carryforward flags measure changes. " });
this.add({id:593, 
title:"Test Reports", 
body:" test reports you run ui tests unit bitrise. view test reports, access add-ons section build details page. test reports allows view test results convenient way. use testing steps , test results deployed directory. from there, test reports process display way that’s easy read analyze. " });
this.add({id:594, 
title:"Test reports overview", 
body:" test reports overview you run ui tests unit bitrise with test reports, view results different test types page. to able use test reports, need make sure test results end correct directory format. from directory, deploy bitrise.io step exports results add-on. there ways make sure test results end correct location appropriate format: using dedicated testing steps automatically export results. with steps, need step deploy bitrise.io step workflow run build. using export test results test reports add-on step. using custom script step. exporting results any testing step both second method allows export test results any step. read details exporting to test reports from any step guide. test reports read display test results formats: you use test reports with testing steps default. these run tests defined repository store output environment variable. the deploy bitrise.io step rest: read results send test reports. the steps are: xcode test ios . android unit test . ios device testing . virtual device testing android . flutter test . with steps, don't worry format location test results. all need make sure include deploy bitrise.io step end workflow. testing guides check testing guides read how use steps bitrise: running android unit testsdevice testing for androiddevice testing for iosrunning unit and ui tests for ios appsgetting started with flutter apps" });
this.add({id:595, 
title:"Configuring Test Reports", 
body:" configuring test reports test reports doesn’t require any sort complicated configuration. all need tests repository, steps workflow. deploy bitrise.io version the deploy bitrise.io step version 1.4.1 newer - older versions step not support test reports. we recommend using 1.5.0 higher best experience. add tests app’s repository. add appropriate testing steps workflow. for example, android project, use android unit test step run android unit tests. make sure deploy bitrise.io step workflow. run build. and that’s it! once build finished, able view test reports. " });
this.add({id:596, 
title:"Checking test results", 
body:" checking test results test reports display important information tests ran test summary tab. you see tests ran, duration, results. click tabs individual details. to access result particular test: find app dashboard, select it. on app's main page, select build want check out. go the  tests tab. you see failed tests tests tab itself. if failed tests, click view test reports button. on test summary tab, test want check. alternatively, bar, click tab set check out.to filter tests based results, open menu right, all default. click test cases see details. ui tests grouped according device unit test cases. you find: the total number tests ran, ratio successful failed tests. the duration individual test (both unit tests ui tests). in case ui tests, orientation locale device. you check, depending test type: individual test cases performance data videos screenshots test artifacts logs as noted above, depends test type, too: unit tests, won’t see screenshots videos, course. " });
this.add({id:597, 
title:"Downloading files", 
body:" downloading files every file downloaded test reports: includes screenshots, videos, apk ipa files. open test set. on left menu, click tab contains files. for example,  test artifacts . click  download  next file name. if want download files available tab, click  download all files . " });
this.add({id:594, 
title:"Test reports overview", 
body:" test reports overview you run ui tests unit bitrise with test reports, view results different test types page. to able use test reports, need make sure test results end correct directory format. from directory, deploy bitrise.io step exports results add-on. there ways make sure test results end correct location appropriate format: using dedicated testing steps automatically export results. with steps, need step deploy bitrise.io step workflow run build. using export test results test reports add-on step. using custom script step. exporting results any testing step both second method allows export test results any step. read details exporting to test reports from any step guide. test reports read display test results formats: you use test reports with testing steps default. these run tests defined repository store output environment variable. the deploy bitrise.io step rest: read results send test reports. the steps are: xcode test ios . android unit test . ios device testing . virtual device testing android . flutter test . with steps, don't worry format location test results. all need make sure include deploy bitrise.io step end workflow. testing guides check testing guides read how use steps bitrise: running android unit testsdevice testing for androiddevice testing for iosrunning unit and ui tests for ios appsgetting started with flutter apps" });
this.add({id:595, 
title:"Configuring Test Reports", 
body:" configuring test reports test reports doesn’t require any sort complicated configuration. all need tests repository, steps workflow. deploy bitrise.io version the deploy bitrise.io step version 1.4.1 newer - older versions step not support test reports. we recommend using 1.5.0 higher best experience. add tests app’s repository. add appropriate testing steps workflow. for example, android project, use android unit test step run android unit tests. make sure deploy bitrise.io step workflow. run build. and that’s it! once build finished, able view test reports. " });
this.add({id:596, 
title:"Checking test results", 
body:" checking test results test reports display important information tests ran test summary tab. you see tests ran, duration, results. click tabs individual details. to access result particular test: find app dashboard, select it. on app's main page, select build want check out. go the  tests tab. you see failed tests tests tab itself. if failed tests, click view test reports button. on test summary tab, test want check. alternatively, bar, click tab set check out.to filter tests based results, open menu right, all default. click test cases see details. ui tests grouped according device unit test cases. you find: the total number tests ran, ratio successful failed tests. the duration individual test (both unit tests ui tests). in case ui tests, orientation locale device. you check, depending test type: individual test cases performance data videos screenshots test artifacts logs as noted above, depends test type, too: unit tests, won’t see screenshots videos, course. " });
this.add({id:597, 
title:"Downloading files", 
body:" downloading files every file downloaded test reports: includes screenshots, videos, apk ipa files. open test set. on left menu, click tab contains files. for example,  test artifacts . click  download  next file name. if want download files available tab, click  download all files . " });
this.add({id:598, 
title:"Exporting to Test Reports from any Step", 
body:" exporting test reports any step you export test reports any step using export test results reports add-on step. alternatively, configure script files. test reports allows view test results convenient way. by default, steps support test reports add-on: xcode test ios android unit test ios device testing virtual device testing android flutter test to export test results generated any step deploy bitrise.io step, options: we recommend using export test results test reports add-on step : step locates test results based inputs. however, export screenshots images. you configure custom script step creates exports necessary files. if need screenshots images, export test results images script step. " });
this.add({id:599, 
title:"Using the Export test results to the Test reports add-on Step", 
body:" using export test results test reports add-on step you use the  export test results test reports add-on   step make sure test results appear test reports add-on, use steps don’t automatically export results. with correct configuration, step finds test results app’s repository, puts export directory. screenshots images the step export test results, .xcresult junit xml format. if test results .xcresult file, screenshots generated test included exported test reports add-on. if use junit xml format, need export screenshots images using script step: exporting screenshots and other images to test reports . in case, test results exported using script step. you export screenshots test results separate steps! go app’s page bitrise.io . go workflows open workflow editor. from workflow menu, select workflow use run tests. add export test results test reports add-on step after testing step. in the test input, set test run. the results test reports add-on. in path custom test results reside input, set path test results found. we recommend setting folder here, set specific filepath. the default value source directory app . example patterns: if app’s root directory app: app\/build\/test-results\/testdemodebugunittest\/ if test results app folder root directory: .\/app\/build\/test-results\/testdemodebugunittest\/ in test result search pattern input, set pattern matches test result file. this search pattern used file folder path was set path custom test results reside input. if than match, step export first match with warning logs. set specific filepath previous input, just * here. example patterns: matching files base path: * matching files given directory base path: *\/build\/test-results\/testdemodebugunittest\/* in step’s test result directory input, make sure path correct. do not modify input’s value: folder deploy bitrise.io step look test results export them. it set $bitrise_test_result_dir env var. make sure deploy bitrise.io step workflow . " });
this.add({id:600, 
title:"Using custom scripts to export test results", 
body:" using custom scripts export test results you use scripts script step export test results. you just need make sure that: your test results junit xml format . you place results $bitrise_test_result_dir , environment variable pointing correct path. the results test run sub-directory. you place test-info.json file sub-directory correspond test run. the test-info.json file the test-info.json file test run defined it. each test-info.json file. the value test-name appear test run test reports page. \/\/ test name ... { \"test-name\":\"my first test\" } here’s example script export test results: #!\/bin\/env bash\nset -ex\n\n# creating sub-directory test run bitrise_test_result_dir:\n\ntest_run_dir=\"$bitrise_test_result_dir\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# exporting junit xml report:\n\ncp \"my\/test\/report\/xml\/file\/path.xml\" \"$test_run_dir\/unittest.xml\"\n\n# test-info.json file with defined:\n\necho '{\"test-name\":\"my test run name\"}' >> \"$test_run_dir\/test-info.json\"\n if goes well, able see test results test reports page. " });
this.add({id:601, 
title:"Exporting screenshots and other images to Test Reports", 
body:" exporting screenshots images test reports the  export test results test reports add-on step export test result files deploy bitrise.io step supports formats results: the .xcresult file ios apps. a junit xml file any app. if tests produce .xcresult file, screenshots generated test run result. as such, exported test reports add-on. if use junit xml format want export screenshots images, use export test results test reports add-on step. you need use custom script export result screenshots. the script step, test-info.json file with necessary information test runs: using custom scripts to export test results . to export screenshots with results, script place images $bitrise_test_result_dir folder. folder structure the image files $bitrise_test_result_dir folder. they can't nested folder $bitrise_test_result_dir . script export image #!\/bin\/env bash\nset -ex\n\n# creating sub-directory test run bitrise_test_result_dir:\n\ntest_run_dir=\"$bitrise_test_result_dir\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# copying image:\n\ncp \"my\/test\/screenshots\/screenshot.png\" \"$test_run_dir\/screenshot.png\" associating images with test runs you associate image with specific test run placing directory run. in case, appear suits given " });
this.add({id:599, 
title:"Using the Export test results to the Test reports add-on Step", 
body:" using export test results test reports add-on step you use the  export test results test reports add-on   step make sure test results appear test reports add-on, use steps don’t automatically export results. with correct configuration, step finds test results app’s repository, puts export directory. screenshots images the step export test results, .xcresult junit xml format. if test results .xcresult file, screenshots generated test included exported test reports add-on. if use junit xml format, need export screenshots images using script step: exporting screenshots and other images to test reports . in case, test results exported using script step. you export screenshots test results separate steps! go app’s page bitrise.io . go workflows open workflow editor. from workflow menu, select workflow use run tests. add export test results test reports add-on step after testing step. in the test input, set test run. the results test reports add-on. in path custom test results reside input, set path test results found. we recommend setting folder here, set specific filepath. the default value source directory app . example patterns: if app’s root directory app: app\/build\/test-results\/testdemodebugunittest\/ if test results app folder root directory: .\/app\/build\/test-results\/testdemodebugunittest\/ in test result search pattern input, set pattern matches test result file. this search pattern used file folder path was set path custom test results reside input. if than match, step export first match with warning logs. set specific filepath previous input, just * here. example patterns: matching files base path: * matching files given directory base path: *\/build\/test-results\/testdemodebugunittest\/* in step’s test result directory input, make sure path correct. do not modify input’s value: folder deploy bitrise.io step look test results export them. it set $bitrise_test_result_dir env var. make sure deploy bitrise.io step workflow . " });
this.add({id:600, 
title:"Using custom scripts to export test results", 
body:" using custom scripts export test results you use scripts script step export test results. you just need make sure that: your test results junit xml format . you place results $bitrise_test_result_dir , environment variable pointing correct path. the results test run sub-directory. you place test-info.json file sub-directory correspond test run. the test-info.json file the test-info.json file test run defined it. each test-info.json file. the value test-name appear test run test reports page. \/\/ test name ... { \"test-name\":\"my first test\" } here’s example script export test results: #!\/bin\/env bash\nset -ex\n\n# creating sub-directory test run bitrise_test_result_dir:\n\ntest_run_dir=\"$bitrise_test_result_dir\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# exporting junit xml report:\n\ncp \"my\/test\/report\/xml\/file\/path.xml\" \"$test_run_dir\/unittest.xml\"\n\n# test-info.json file with defined:\n\necho '{\"test-name\":\"my test run name\"}' >> \"$test_run_dir\/test-info.json\"\n if goes well, able see test results test reports page. " });
this.add({id:601, 
title:"Exporting screenshots and other images to Test Reports", 
body:" exporting screenshots images test reports the  export test results test reports add-on step export test result files deploy bitrise.io step supports formats results: the .xcresult file ios apps. a junit xml file any app. if tests produce .xcresult file, screenshots generated test run result. as such, exported test reports add-on. if use junit xml format want export screenshots images, use export test results test reports add-on step. you need use custom script export result screenshots. the script step, test-info.json file with necessary information test runs: using custom scripts to export test results . to export screenshots with results, script place images $bitrise_test_result_dir folder. folder structure the image files $bitrise_test_result_dir folder. they can't nested folder $bitrise_test_result_dir . script export image #!\/bin\/env bash\nset -ex\n\n# creating sub-directory test run bitrise_test_result_dir:\n\ntest_run_dir=\"$bitrise_test_result_dir\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# copying image:\n\ncp \"my\/test\/screenshots\/screenshot.png\" \"$test_run_dir\/screenshot.png\" associating images with test runs you associate image with specific test run placing directory run. in case, appear suits given " });
this.add({id:602, 
title:"Running unit and UI tests for iOS apps", 
body:" running unit ui tests ios apps you need steps run xcode tests view results: test ios, deploy bitrise.io. you run unit ui tests ios apps bitrise with dedicated step . the step runs test targets defined xcode project exports results direct download test reports add-on . to run xcode tests bitrise, need steps view results: xcode test ios . deploy bitrise.io . code signing files running xcode tests deploying results bitrise require any code signing files. so don’t worry just yet! the xcode test ios step runs tests, exports test results, .xcresult file, test attachments, log xcodebuild test command. xcode test results html you view xcode test results rich html format, using generate xcode test report html step: viewing xcode test results in rich html format . to run tests using step: workflow editor bitrise.yml make sure install app's dependencies workflow. add xcode test ios step workflow. make sure project path input points correct location. the input asks path .xcodeproj, .xcworkspace , package.swift file. in cases, don't need change input: adding new app, project scanner automatically finds relevant file stores location environment variable default value input. make sure scheme input points scheme want use build app. the default value environment variable stores scheme set initial configuration app. if wish use different scheme, type input field. shared scheme the scheme shared xcode scheme! configure device destination device destination specifier input: input takes comma-separated key-value pairs. for example, wish build app test iphone 14 with latest available os: platform=ios,name=iphone 14 plus,os=latest the input sets -destination option xcodebuild . read possible options: how i run unit tests command line? optionally, set specific test plan test plan input. the input sets -testplan option test action xcodebuild . if leave empty, test plan specified xcode scheme used. add deploy bitrise.io step end workflow able access test results outputs artifacts tab test reports add-on. make sure install app's dependencies workflow. add xcode-test step workflow. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs: make sure project_path input points correct location. the input asks path .xcodeproj, .xcworkspace , package.swift file. in cases, don't need change input: adding new app, project scanner automatically finds relevant file stores location environment variable default value input. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n make sure scheme input points scheme want use build app. the default value environment variable stores scheme set initial configuration app. if wish use different scheme, type input field. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: test shared scheme the scheme shared xcode scheme! configure device destination destination input: input takes comma-separated key-value pairs. for example, wish build app test iphone 14 with latest available os: your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: test\n destination: platform=ios simulator,name=iphone 14 plus,os=latest the input sets -destination option xcodebuild . read possible options: how i run unit tests command line? optionally, set specific test plan test_plan input. the input sets -testplan option test action xcodebuild . if leave empty, test plan specified xcode scheme used. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: test\n destination: platform=ios simulator,name=iphone 11 plus,os=latest\n test_plan: my_plan add deploy-to-bitrise-io step end workflow able access test results outputs artifacts tab test reports add-on. your-workflow:\n steps:\n - activate-ssh-key: {}\n git-clone: xcode-test:\n inputs:\n project_path: \"$bitrise_project_path\"\n scheme: test\n destination: platform=ios simulator,name=iphone 11 plus,os=latest\n test_plan: my_plan\n deploy-to-bitrise-io: headless mode from xcode 9 onwards, tests run headless mode default: means simulator background only. to change it, step’s debug input group set run simulator headless mode input’s value . however, with option, tests time. - xcode-test:\n inputs:\n headless_mode: 'no' using xcpretty the xcpretty output tool does support parallel tests. if tests enabled project, step’s xcodebuild log formatting input group set log formatter input’s value xcodebuild xcbeautify . - xcode-test:\n inputs:\n log_formatter: xcbeautify " });
this.add({id:603, 
title:"Rerunning failed tests (Not available in Xcode 13)", 
body:" rerunning failed tests (not available xcode 13) the should retry test failure? (not available xcode 13+) input test repetition section xcode test ios step allows automatically rerun all tests, just failed ones. if set input yes , step run xcodebuild time case test failure. from xcode 13 above, feature available anymore. use test repetitions mode (available xcode 13+) input with retry_on_failure option selected. this allows rerun failed test\/s instead running tests. you test repetition feature with xcode test ios step version 3.0.0 above. " });
this.add({id:604, 
title:"Test Repetitions", 
body:" test repetitions xcode’s test repetition modes available with xcode test ios step stacks running xcode 13 bitrise. with test repetitions, run any type tests multiple times various ways retry failure, failure max repetitions. the xcode test ios step’s test repetitions mode (available xcode 13+) input offers following options: none : the tests won’t repeat. until_failure : repeats test fails maximum repetition. the default number runs three. retry_on_failure : failed tests run succeed repetition number specify. the default test repetitions three. up_until_maximum_repetitions : reruns tests maximum test repetition reached regardless outcomes. please note options available xcode test ios version 3.0.0 above. with maximum test repetitions (available xcode 13+) input specify maximum number test repetitions. please note add greater than test repetition mode (available xcode 13+) input set than none . enable relaunch tests each repetition (available xcode 13+) input launch tests completely new process repetition. " });
this.add({id:603, 
title:"Rerunning failed tests (Not available in Xcode 13)", 
body:" rerunning failed tests (not available xcode 13) the should retry test failure? (not available xcode 13+) input test repetition section xcode test ios step allows automatically rerun all tests, just failed ones. if set input yes , step run xcodebuild time case test failure. from xcode 13 above, feature available anymore. use test repetitions mode (available xcode 13+) input with retry_on_failure option selected. this allows rerun failed test\/s instead running tests. you test repetition feature with xcode test ios step version 3.0.0 above. " });
this.add({id:604, 
title:"Test Repetitions", 
body:" test repetitions xcode’s test repetition modes available with xcode test ios step stacks running xcode 13 bitrise. with test repetitions, run any type tests multiple times various ways retry failure, failure max repetitions. the xcode test ios step’s test repetitions mode (available xcode 13+) input offers following options: none : the tests won’t repeat. until_failure : repeats test fails maximum repetition. the default number runs three. retry_on_failure : failed tests run succeed repetition number specify. the default test repetitions three. up_until_maximum_repetitions : reruns tests maximum test repetition reached regardless outcomes. please note options available xcode test ios version 3.0.0 above. with maximum test repetitions (available xcode 13+) input specify maximum number test repetitions. please note add greater than test repetition mode (available xcode 13+) input set than none . enable relaunch tests each repetition (available xcode 13+) input launch tests completely new process repetition. " });
this.add({id:605, 
title:"Installing an .ipa file", 
body:" installing .ipa file you install .ipa files public page artifacts tab build. you install .ipa files generated bitrise build test devices ways: using public install page . the public install page generated url distributed users access provisioned registered test devices. downloading file artifacts tab build's page bitrise. installing .ipa file test device consist phases: initiating compatibility check, installing configuration profile device, finishing with app device. in tutorial we’re describing: how install app registered test device bitrise account (for subscribed wishes check current version app). how install app test device registered bitrise (for users). installing .ipa file artifacts tab installing .ipa file artifacts tab possible bitrise users. " });
this.add({id:606, 
title:"Prepping for installation", 
body:" prepping installation before installing app any test device, app’s developer complete couple steps build share with anyone: the device, app installed, registered test device developer’s apple account. the device included provisioning profile app. the device meets minimum os requirements app. please note test device registered apple developer portal, developer manually add list, re-build app so .ipa file contains device\/s installed on. we recommend register test device bitrise well. which browser i use with public install page? anyone wishes install app test device make sure public page opened native safari session with non-incognito mode. " });
this.add({id:607, 
title:"Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS", 
body:" installing .ipa file bitrise's public install page ipad with ipados if using ipad running ipados, make sure open bitrise public install page mobile mode. when open public install page .ipa file, bitrise checks device stored embedded provisioning profile not. this check complete visit mobile mode instead desktop version. we suggest switch temporarily. you easily switch mobile mode temporarily tap ᴀa icon left corner safari address bar show mobile website option. " });
this.add({id:608, 
title:"Installing an .ipa file on test devices from the public install page", 
body:" installing .ipa file test devices public install page the public install page convenient way sharing latest version app with team members any stakeholders wish check out. includes important details build filename, size, code, minimum sdk version, number. you configure deploy bitrise.io step send email users with link public install page. this shared anyone. during flow, use native, non-incognito safari session instead any in-app browser type. if follow link notification email got bitrise, public install page automatically open native session. would download app? if wish download app manually upload else, button artifacts page build. please note downloading app does mean install test device. " });
this.add({id:609, 
title:"Installing an app on a test device without a Bitrise account", 
body:" installing app test device bitrise account long tap link received bitrise. to open native safari, open link . it brings public install page native safari session. if copy link email, make sure paste tap link click check device compatibility with app yellow message box. if see message, likely using browser so switch safari. tap allow pop-up install configuration profile device. this makes device’s udid available bitrise compatibility check. a pop-up confirms configuration profile downloaded, installed settings app. tap close . tap home button home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install again. wait profile installed. once profile installed, you’re directed public install page. as see, install button available. tap it! tap ok pop-up. as final confirmation, tap install press home button. now you’re installing app test device. wait till app installs test device’s home screen. check app you’ve successfully installed test device. " });
this.add({id:610, 
title:"Installing an app on a test device not registered to Bitrise", 
body:" installing app test device registered bitrise if you’re accessing public install page test device displays message, you’ll register bitrise steps different flow. please note add test device bitrise account. tap click start device registration process. tap allow download configuration profile. when configuration profile downloaded, tap close . tap home button settings app test device’s home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install install profile pop-up. wait profile installation complete. you automatically redirected register test device page. your device’s udid gets populated automatically. you change device here. tap register device . you land public install page install button available. tap it! tap ok prompt. to install app test device, tap install . then press home button follow installment app. if went well, installed app test device’s home page. " });
this.add({id:611, 
title:"Installing an app on a test device not registered to Bitrise", 
body:" installing app test device registered bitrise if you’re accessing public install page test device displays message, you’ll register bitrise steps different flow. please note add test device bitrise account. tap click start device registration process. tap allow download configuration profile. when configuration profile downloaded, tap close . tap home button settings app test device’s home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install install profile pop-up. wait profile installation complete. you automatically redirected register test device page. your device’s udid gets populated automatically. you change device here. tap register device . you land public install page install button available. tap it! tap ok prompt. to install app test device, tap install . then press home button follow installment app. if went well, installed app test device’s home page. " });
this.add({id:612, 
title:"Installing an .ipa file on test devices from the Artifacts tab", 
body:" installing .ipa file test devices artifacts tab you install .ipa file artifacts tab app's build. this provides secure way compared public install page requires log bitrise account, making viable external testers. to install .ipa file artifacts tab: open app bitrise. select build with .ipa file like install. go artifacts tab. click download .ipa file. click install , install app ios device section. " });
this.add({id:606, 
title:"Prepping for installation", 
body:" prepping installation before installing app any test device, app’s developer complete couple steps build share with anyone: the device, app installed, registered test device developer’s apple account. the device included provisioning profile app. the device meets minimum os requirements app. please note test device registered apple developer portal, developer manually add list, re-build app so .ipa file contains device\/s installed on. we recommend register test device bitrise well. which browser i use with public install page? anyone wishes install app test device make sure public page opened native safari session with non-incognito mode. " });
this.add({id:607, 
title:"Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS", 
body:" installing .ipa file bitrise's public install page ipad with ipados if using ipad running ipados, make sure open bitrise public install page mobile mode. when open public install page .ipa file, bitrise checks device stored embedded provisioning profile not. this check complete visit mobile mode instead desktop version. we suggest switch temporarily. you easily switch mobile mode temporarily tap ᴀa icon left corner safari address bar show mobile website option. " });
this.add({id:607, 
title:"Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS", 
body:" installing .ipa file bitrise's public install page ipad with ipados if using ipad running ipados, make sure open bitrise public install page mobile mode. when open public install page .ipa file, bitrise checks device stored embedded provisioning profile not. this check complete visit mobile mode instead desktop version. we suggest switch temporarily. you easily switch mobile mode temporarily tap ᴀa icon left corner safari address bar show mobile website option. " });
this.add({id:608, 
title:"Installing an .ipa file on test devices from the public install page", 
body:" installing .ipa file test devices public install page the public install page convenient way sharing latest version app with team members any stakeholders wish check out. includes important details build filename, size, code, minimum sdk version, number. you configure deploy bitrise.io step send email users with link public install page. this shared anyone. during flow, use native, non-incognito safari session instead any in-app browser type. if follow link notification email got bitrise, public install page automatically open native session. would download app? if wish download app manually upload else, button artifacts page build. please note downloading app does mean install test device. " });
this.add({id:609, 
title:"Installing an app on a test device without a Bitrise account", 
body:" installing app test device bitrise account long tap link received bitrise. to open native safari, open link . it brings public install page native safari session. if copy link email, make sure paste tap link click check device compatibility with app yellow message box. if see message, likely using browser so switch safari. tap allow pop-up install configuration profile device. this makes device’s udid available bitrise compatibility check. a pop-up confirms configuration profile downloaded, installed settings app. tap close . tap home button home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install again. wait profile installed. once profile installed, you’re directed public install page. as see, install button available. tap it! tap ok pop-up. as final confirmation, tap install press home button. now you’re installing app test device. wait till app installs test device’s home screen. check app you’ve successfully installed test device. " });
this.add({id:610, 
title:"Installing an app on a test device not registered to Bitrise", 
body:" installing app test device registered bitrise if you’re accessing public install page test device displays message, you’ll register bitrise steps different flow. please note add test device bitrise account. tap click start device registration process. tap allow download configuration profile. when configuration profile downloaded, tap close . tap home button settings app test device’s home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install install profile pop-up. wait profile installation complete. you automatically redirected register test device page. your device’s udid gets populated automatically. you change device here. tap register device . you land public install page install button available. tap it! tap ok prompt. to install app test device, tap install . then press home button follow installment app. if went well, installed app test device’s home page. " });
this.add({id:611, 
title:"Installing an app on a test device not registered to Bitrise", 
body:" installing app test device registered bitrise if you’re accessing public install page test device displays message, you’ll register bitrise steps different flow. please note add test device bitrise account. tap click start device registration process. tap allow download configuration profile. when configuration profile downloaded, tap close . tap home button settings app test device’s home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install install profile pop-up. wait profile installation complete. you automatically redirected register test device page. your device’s udid gets populated automatically. you change device here. tap register device . you land public install page install button available. tap it! tap ok prompt. to install app test device, tap install . then press home button follow installment app. if went well, installed app test device’s home page. " });
this.add({id:609, 
title:"Installing an app on a test device without a Bitrise account", 
body:" installing app test device bitrise account long tap link received bitrise. to open native safari, open link . it brings public install page native safari session. if copy link email, make sure paste tap link click check device compatibility with app yellow message box. if see message, likely using browser so switch safari. tap allow pop-up install configuration profile device. this makes device’s udid available bitrise compatibility check. a pop-up confirms configuration profile downloaded, installed settings app. tap close . tap home button home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install again. wait profile installed. once profile installed, you’re directed public install page. as see, install button available. tap it! tap ok pop-up. as final confirmation, tap install press home button. now you’re installing app test device. wait till app installs test device’s home screen. check app you’ve successfully installed test device. " });
this.add({id:610, 
title:"Installing an app on a test device not registered to Bitrise", 
body:" installing app test device registered bitrise if you’re accessing public install page test device displays message, you’ll register bitrise steps different flow. please note add test device bitrise account. tap click start device registration process. tap allow download configuration profile. when configuration profile downloaded, tap close . tap home button settings app test device’s home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install install profile pop-up. wait profile installation complete. you automatically redirected register test device page. your device’s udid gets populated automatically. you change device here. tap register device . you land public install page install button available. tap it! tap ok prompt. to install app test device, tap install . then press home button follow installment app. if went well, installed app test device’s home page. " });
this.add({id:610, 
title:"Installing an app on a test device not registered to Bitrise", 
body:" installing app test device registered bitrise if you’re accessing public install page test device displays message, you’ll register bitrise steps different flow. please note add test device bitrise account. tap click start device registration process. tap allow download configuration profile. when configuration profile downloaded, tap close . tap home button settings app test device’s home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install install profile pop-up. wait profile installation complete. you automatically redirected register test device page. your device’s udid gets populated automatically. you change device here. tap register device . you land public install page install button available. tap it! tap ok prompt. to install app test device, tap install . then press home button follow installment app. if went well, installed app test device’s home page. " });
this.add({id:611, 
title:"Installing an app on a test device not registered to Bitrise", 
body:" installing app test device registered bitrise if you’re accessing public install page test device displays message, you’ll register bitrise steps different flow. please note add test device bitrise account. tap click start device registration process. tap allow download configuration profile. when configuration profile downloaded, tap close . tap home button settings app test device’s home screen. open settings . you downloaded profile settings . tap profile downloaded menu item left install profile. tap install . type device’s passcode enter passcode pop-up. tap install install profile pop-up. wait profile installation complete. you automatically redirected register test device page. your device’s udid gets populated automatically. you change device here. tap register device . you land public install page install button available. tap it! tap ok prompt. to install app test device, tap install . then press home button follow installment app. if went well, installed app test device’s home page. " });
this.add({id:612, 
title:"Installing an .ipa file on test devices from the Artifacts tab", 
body:" installing .ipa file test devices artifacts tab you install .ipa file artifacts tab app's build. this provides secure way compared public install page requires log bitrise account, making viable external testers. to install .ipa file artifacts tab: open app bitrise. select build with .ipa file like install. go artifacts tab. click download .ipa file. click install , install app ios device section. " });
this.add({id:613, 
title:"Registering test devices for iOS apps", 
body:" registering test devices ios apps you register test device easily opening safari ios accessing test devices page profile. with browsers, manually using register button. you multiple options register test devices bitrise.io : open safari ios device access test devices tab profile settings page . manually register device test devices tab profile settings page . after registering device bitrise, make sure register apple developer portal well. we recommend using xcode archive & export ios step can: register available test devices app . register selection test devices, defined text file contains list udids . apple developer portal device limit there limit registrable devices apple developer portal, so make sure check list available test devices app use xcode archive & export ios step register devices! " });
this.add({id:614, 
title:"Register an iOS device using Safari", 
body:" register ios device using safari the comfortable way register ios test device bitrise.io open bitrise.io with safari. this way open device’s settings create temporary profile unique device identifier (udid). don’t look manually copy\/paste it. clear cache when trying install app public page, clear cache: click link appearing if synced settings old device, need clear cache register new device line. the link redirects profile settings page follow procedure described below. read installing app public install page deploying ios app bitrise.io guide. open safari non-incognito mode ios device log bitrise.io . go profile . tap account settings . tap test devices left. tap register device . in pop-up window, tap allow so bitrise.io configuration profile. tap install install profile dialog appears. enter devices’s passcode. tap install install profile again. now see udid ios device register device dialog. tap register device . register test device apple developer portal with correct provisioning profile added device use auto provisioning step with enabling profile generation. if test devices , see registered device: you delete registered device any time click remove button. " });
this.add({id:615, 
title:"Register a test device manually", 
body:" register test device manually on bitrise.io, open account selector menu right select profile settings . on menu left side, select test devices . click register device manually . in register device dialog, title field identifier field with device’s udid. click register devices . you udid plug device computer, open itunes. under summary , see serial number. if click it, reveal device’s udid paste identifier field test devices . register test device apple developer portal with correct provisioning profile added device use auto provisioning step with enabling profile generation. now see registered test device registered test devices section. you remove registered device any time click orange x icon. " });
this.add({id:616, 
title:"Checking the available test devices for an app", 
body:" checking available test devices app for any bitrise app , check registered test devices available app settings page. this aggregated list registered test devices associated with users access app, regardless role. you use any run tests app. you download list registered devices .json file. open app bitrise with user admin role app . on main page app, click app settings icon: . on menu left side, select test devices . optionally, download entire list .json file: click download json button. " });
this.add({id:617, 
title:"Registering devices on the Apple Developer Portal with the Xcode Archive Step", 
body:" registering devices apple developer portal with xcode archive step the xcode archive & export ios step allows automatically register test devices apple developer portal. by default, registers registered bitrise account configure specific selection devices. apple developer portal limit please note apple developer portal limit devices registered testing purposes, typically set 100 account. devices with xcode archive & export ios step count limit remove registered devices year. " });
this.add({id:618, 
title:"Registering all devices on the Apple Developer Portal", 
body:" registering devices apple developer portal workflow editor bitrise.yml register devices bitrise. register using ios device . register manually profile settings page . open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add xcode archive & export ios step workflow. in automatic code signing input group, set register test devices apple developer portal input yes . register devices bitrise. register using ios device . register manually profile settings page . in bitrise.yml file, add xcode-archive step workflow. your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n set register_test_devices input yes . your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n register_test_devices: 'yes'\n " });
this.add({id:619, 
title:"Registering a selection of devices on the Apple Developer Portal", 
body:" registering selection devices apple developer portal workflow editor bitrise.yml get udid devices want register: checking the available test devices for an app . create .txt file add udids devices want register comma-separated list: 00000000-0000000000000001,00000000-0000000000000002,00000000-0000000000000003 make sure bitrise access file workflow: you commit repository. you upload generic file storage use file downloader step access . you dynamically generate file build. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add xcode archive & export ios step workflow. in automatic code signing input group, set register test devices apple developer portal input yes . in input group, add path .txt file containing udids path file containing devices registered input. devices registered bitrise this input takes priority devices registered bitrise account. get udid devices want register: checking the available test devices for an app . create .txt file add udids devices want register comma-separated list: 00000000-0000000000000001,00000000-0000000000000002,00000000-0000000000000003 make sure bitrise access file workflow: you commit repository. you upload generic file storage use file downloader step access . you dynamically generate file build. in bitrise.yml file, add xcode-archive step workflow. your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n set register_test_devices input yes . your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n register_test_devices: 'yes'\n set path .txt file containing udids test_device_list_path input. devices registered bitrise this input takes priority devices registered bitrise account. your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n register_test_devices: 'yes'\n test_device_list_path: path\/to\/the\/file\n " });
this.add({id:614, 
title:"Register an iOS device using Safari", 
body:" register ios device using safari the comfortable way register ios test device bitrise.io open bitrise.io with safari. this way open device’s settings create temporary profile unique device identifier (udid). don’t look manually copy\/paste it. clear cache when trying install app public page, clear cache: click link appearing if synced settings old device, need clear cache register new device line. the link redirects profile settings page follow procedure described below. read installing app public install page deploying ios app bitrise.io guide. open safari non-incognito mode ios device log bitrise.io . go profile . tap account settings . tap test devices left. tap register device . in pop-up window, tap allow so bitrise.io configuration profile. tap install install profile dialog appears. enter devices’s passcode. tap install install profile again. now see udid ios device register device dialog. tap register device . register test device apple developer portal with correct provisioning profile added device use auto provisioning step with enabling profile generation. if test devices , see registered device: you delete registered device any time click remove button. " });
this.add({id:615, 
title:"Register a test device manually", 
body:" register test device manually on bitrise.io, open account selector menu right select profile settings . on menu left side, select test devices . click register device manually . in register device dialog, title field identifier field with device’s udid. click register devices . you udid plug device computer, open itunes. under summary , see serial number. if click it, reveal device’s udid paste identifier field test devices . register test device apple developer portal with correct provisioning profile added device use auto provisioning step with enabling profile generation. now see registered test device registered test devices section. you remove registered device any time click orange x icon. " });
this.add({id:616, 
title:"Checking the available test devices for an app", 
body:" checking available test devices app for any bitrise app , check registered test devices available app settings page. this aggregated list registered test devices associated with users access app, regardless role. you use any run tests app. you download list registered devices .json file. open app bitrise with user admin role app . on main page app, click app settings icon: . on menu left side, select test devices . optionally, download entire list .json file: click download json button. " });
this.add({id:617, 
title:"Registering devices on the Apple Developer Portal with the Xcode Archive Step", 
body:" registering devices apple developer portal with xcode archive step the xcode archive & export ios step allows automatically register test devices apple developer portal. by default, registers registered bitrise account configure specific selection devices. apple developer portal limit please note apple developer portal limit devices registered testing purposes, typically set 100 account. devices with xcode archive & export ios step count limit remove registered devices year. " });
this.add({id:618, 
title:"Registering all devices on the Apple Developer Portal", 
body:" registering devices apple developer portal workflow editor bitrise.yml register devices bitrise. register using ios device . register manually profile settings page . open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add xcode archive & export ios step workflow. in automatic code signing input group, set register test devices apple developer portal input yes . register devices bitrise. register using ios device . register manually profile settings page . in bitrise.yml file, add xcode-archive step workflow. your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n set register_test_devices input yes . your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n register_test_devices: 'yes'\n " });
this.add({id:619, 
title:"Registering a selection of devices on the Apple Developer Portal", 
body:" registering selection devices apple developer portal workflow editor bitrise.yml get udid devices want register: checking the available test devices for an app . create .txt file add udids devices want register comma-separated list: 00000000-0000000000000001,00000000-0000000000000002,00000000-0000000000000003 make sure bitrise access file workflow: you commit repository. you upload generic file storage use file downloader step access . you dynamically generate file build. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add xcode archive & export ios step workflow. in automatic code signing input group, set register test devices apple developer portal input yes . in input group, add path .txt file containing udids path file containing devices registered input. devices registered bitrise this input takes priority devices registered bitrise account. get udid devices want register: checking the available test devices for an app . create .txt file add udids devices want register comma-separated list: 00000000-0000000000000001,00000000-0000000000000002,00000000-0000000000000003 make sure bitrise access file workflow: you commit repository. you upload generic file storage use file downloader step access . you dynamically generate file build. in bitrise.yml file, add xcode-archive step workflow. your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n set register_test_devices input yes . your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n register_test_devices: 'yes'\n set path .txt file containing udids test_device_list_path input. devices registered bitrise this input takes priority devices registered bitrise account. your-workflow:\n steps:\n - git-clone: {}\n xcode-archive:\n inputs:\n register_test_devices: 'yes'\n test_device_list_path: path\/to\/the\/file\n " });
this.add({id:620, 
title:"Device testing for iOS", 
body:" device testing ios with bitrise’s ios device testing solution, run tests physical devices having set register devices. with bitrise’s ios device testing solution, run ui tests apps physical devices having set register devices: just need use dedicated steps set device type(s) want test app . there limits using step, than overall build time limit. it works ios apps developed frameworks, flutter react native. our device testing solution based firebase test lab : uses real, production devices running google data center test app. the flashed with updated apis customizable locale settings. you resulting logs, videos screenshots bitrise. for ios apps, firebase test lab runs xctest tests. find list available devices . limitations you limited overall build time. also note single contain one  ios device testing  step, performing type test. this bitrise sends build slug firebase test lab. sending results a  build exists error. " });
this.add({id:621, 
title:"Running device tests with Firebase for iOS apps", 
body:" running device tests with firebase ios apps to run device tests ios apps with firebase test lab solution, need add steps workflow: xcode build testing ios . ios device testing . multiplatform apps the step run device tests ios apps built with frameworks, flutter react native. you just need make sure xcode build testing ios step access app's .xcodeproj .xcworkspace file. the xcode build testing ios step performs xcodebuild command’s build-for-testing action: builds tests defined ios app’s xcode scheme . the step exports .zip file contains test directory (by default, it’s debug-iphoneos ) xctestrun file. to use step, need code signing files test app. you choose using automatic provisioning manual provisioning. the ios device testing step takes path .zip file - exported environment variable input run tests export test results bitrise. automatic vs manual code signing asset management the xcode build testing ios step manage code signing assets having manually provisioning profiles. this requires select relevant inputs (see below) upload right certificates code signing tab. this automatic code signing asset management method. if decide chose manual code signing asset management , add certificate profile installer step xcode build testing ios step. the care code signing asset management latter builds project. make sure automatic code signing method input xcode build testing ios step set . the instructions steps setting automatic code signing asset management bitrise with xcode build testing ios step. workflow editor bitrise.yml add xcode build testing ios step workflow. build testing this guide mentions important inputs setting app device testing. for information step, see xcode build testing ios . in scheme input, set xcode scheme want use. by default, value input $bitrise_scheme environment variable stored app created. in build configuration input, add xcode build configuration want use. if configuration specified, xcode project's default build used. set destination option xcodebuild device destination specifier input step. the default value generic\/platform=ios : means tests run any ios device. set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . add ios device testing step workflow.the come xcode build testing ios step. api setting inputs the inputs related test api ( test api's base url api token changed graphical ui. you attempt modify values. in test devices input field, specify devices want test app. find list available devices . you add multiple devices input, following format: deviceid,version,language,orientation make sure deploy bitrise.io step workflow, with version 1.4.1 newer. with older versions step, won’t able check results test reports page! start build . add xcode-build-for-test step workflow. build testing this guide mentions important inputs setting app device testing. for information step, see xcode build testing ios . my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n in scheme input, set xcode scheme want use. by default, value input $bitrise_scheme environment variable stored app created. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n in configuration input, add xcode build configuration want use. if configuration specified, xcode project's default build used. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n set destination option xcodebuild destination input step. the default value generic\/platform=ios : means tests run any ios device. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n automatic_code_signing: api-key\n add virtual-device-testing-for-ios step workflow. the come xcode-build-for-test step. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n automatic_code_signing: api-key\n virtual-device-testing-for-ios:\n in test_devices input field, specify devices want test app. find list available devices . you add multiple devices input, following format: deviceid,version,language,orientation my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n automatic_code_signing: api-key\n virtual-device-testing-for-ios:\n test_devices: 'iphone8,14.7,en,portrait\n make sure deploy-to-bitrise-io step workflow, with version 1.4.1 newer. with older versions step, won’t able check results test reports page! fmy-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n test_plan: test\n automatic_code_signing: api-key\n project_path: $bitrise_project_path\n virtual-device-testing-for-ios:\n test_devices: 'iphone8,14.7,en,portrait'\n deploy-to-bitrise-io: {} start build . if goes well, able view results build artifacts test reports add-on . " });
this.add({id:622, 
title:"Checking test results", 
body:" checking test results test reports display important information tests ran test summary tab. you see tests ran, duration, results. click tabs individual details. to access result particular test: find app dashboard, select it. on app's main page, select build want check out. go the  tests tab. you see failed tests tests tab itself. if failed tests, click view test reports button. on test summary tab, test want check. alternatively, bar, click tab set check out.to filter tests based results, open menu right, all default. click test cases see details. ui tests grouped according device unit test cases. you find: the total number tests ran, ratio successful failed tests. the duration individual test (both unit tests ui tests). in case ui tests, orientation locale device. you check, depending test type: individual test cases performance data videos screenshots test artifacts logs as noted above, depends test type, too: unit tests, won’t see screenshots videos, course. " });
this.add({id:621, 
title:"Running device tests with Firebase for iOS apps", 
body:" running device tests with firebase ios apps to run device tests ios apps with firebase test lab solution, need add steps workflow: xcode build testing ios . ios device testing . multiplatform apps the step run device tests ios apps built with frameworks, flutter react native. you just need make sure xcode build testing ios step access app's .xcodeproj .xcworkspace file. the xcode build testing ios step performs xcodebuild command’s build-for-testing action: builds tests defined ios app’s xcode scheme . the step exports .zip file contains test directory (by default, it’s debug-iphoneos ) xctestrun file. to use step, need code signing files test app. you choose using automatic provisioning manual provisioning. the ios device testing step takes path .zip file - exported environment variable input run tests export test results bitrise. automatic vs manual code signing asset management the xcode build testing ios step manage code signing assets having manually provisioning profiles. this requires select relevant inputs (see below) upload right certificates code signing tab. this automatic code signing asset management method. if decide chose manual code signing asset management , add certificate profile installer step xcode build testing ios step. the care code signing asset management latter builds project. make sure automatic code signing method input xcode build testing ios step set . the instructions steps setting automatic code signing asset management bitrise with xcode build testing ios step. workflow editor bitrise.yml add xcode build testing ios step workflow. build testing this guide mentions important inputs setting app device testing. for information step, see xcode build testing ios . in scheme input, set xcode scheme want use. by default, value input $bitrise_scheme environment variable stored app created. in build configuration input, add xcode build configuration want use. if configuration specified, xcode project's default build used. set destination option xcodebuild device destination specifier input step. the default value generic\/platform=ios : means tests run any ios device. set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . add ios device testing step workflow.the come xcode build testing ios step. api setting inputs the inputs related test api ( test api's base url api token changed graphical ui. you attempt modify values. in test devices input field, specify devices want test app. find list available devices . you add multiple devices input, following format: deviceid,version,language,orientation make sure deploy bitrise.io step workflow, with version 1.4.1 newer. with older versions step, won’t able check results test reports page! start build . add xcode-build-for-test step workflow. build testing this guide mentions important inputs setting app device testing. for information step, see xcode build testing ios . my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n in scheme input, set xcode scheme want use. by default, value input $bitrise_scheme environment variable stored app created. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n in configuration input, add xcode build configuration want use. if configuration specified, xcode project's default build used. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n set destination option xcodebuild destination input step. the default value generic\/platform=ios : means tests run any ios device. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n set automatic_code_signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n automatic_code_signing: api-key\n add virtual-device-testing-for-ios step workflow. the come xcode-build-for-test step. my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n automatic_code_signing: api-key\n virtual-device-testing-for-ios:\n in test_devices input field, specify devices want test app. find list available devices . you add multiple devices input, following format: deviceid,version,language,orientation my-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n automatic_code_signing: api-key\n virtual-device-testing-for-ios:\n test_devices: 'iphone8,14.7,en,portrait\n make sure deploy-to-bitrise-io step workflow, with version 1.4.1 newer. with older versions step, won’t able check results test reports page! fmy-workflow:\n steps:\n - git-clone: {}\n xcode-build-for-test:\n inputs:\n scheme: $bitrise_scheme\n configuration: debug\n destination: generic\/platform=ios\n test_plan: test\n automatic_code_signing: api-key\n project_path: $bitrise_project_path\n virtual-device-testing-for-ios:\n test_devices: 'iphone8,14.7,en,portrait'\n deploy-to-bitrise-io: {} start build . if goes well, able view results build artifacts test reports add-on . " });
this.add({id:622, 
title:"Checking test results", 
body:" checking test results test reports display important information tests ran test summary tab. you see tests ran, duration, results. click tabs individual details. to access result particular test: find app dashboard, select it. on app's main page, select build want check out. go the  tests tab. you see failed tests tests tab itself. if failed tests, click view test reports button. on test summary tab, test want check. alternatively, bar, click tab set check out.to filter tests based results, open menu right, all default. click test cases see details. ui tests grouped according device unit test cases. you find: the total number tests ran, ratio successful failed tests. the duration individual test (both unit tests ui tests). in case ui tests, orientation locale device. you check, depending test type: individual test cases performance data videos screenshots test artifacts logs as noted above, depends test type, too: unit tests, won’t see screenshots videos, course. " });
this.add({id:623, 
title:"Running Android unit tests", 
body:" running android unit tests you perform unit tests using android unit test step, view results reports add-on. unit tests useful want verify individual code blocks, catch bugs prevent crashes early possible. on bitrise, run android unit easily with android unit test step . the step finds runs unit tests included specified module variant android project. the step export results directly test reports add-on . running multiple tests parallel you run multiple unit tests parallel, different devices shards, using pipelines feature: currently supported use cases for the android platform . to run unit tests: workflow editor bitrise.yml make sure included unit tests android project. add android unit test step workflow . make sure project location input points root directory android project. the root directory build.gradle file exists. if configured android project automatically adding app bitrise, don't change default value. in module variant inputs, set module variant want test. leave inputs blank test modules and\/or variants. you check available modules variants project project window android studio . in options input group, pass additional gradle arguments build task additional gradle arguments input. if custom output directories configured test results tests project, configure step look correct location exporting them: the local unit test html result directory pattern input sets directory html test results. the local unit test xml result directory pattern input sets directory xml test results. both directories zipped exported bitrise_deploy_dir . this ensures test results viewed, example, test reports add-on. if don't custom output directories configured, need change inputs: default values work. add deploy bitrise.io step workflow able view test results test reports add-on . make sure included unit tests android project. add android-unit-test step workflow. my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n make sure project_location input points root directory android project. the root directory build.gradle file exists. if configured android project automatically adding app bitrise, don't change default value. my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n project_location: $bitrise_source_dir\n in module variant inputs, set module variant want test. if don't step test modules and\/or variants. you check available modules variants project project window android studio . my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n module: app\n variant: debug\n project_location: $bitrise_source_dir\n in arguments input, pass additional gradle arguments build task. my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n module: app\n variant: debug\n arguments: --task\n project_location: $bitrise_source_dir\n if custom output directories configured test results tests project, configure step look correct location exporting them: the report_path_pattern input sets directory html test results. the result_path_pattern input sets directory xml test results. my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n module: app\n variant: debug\n arguments: --task\n report_path_pattern: '*build\/reports\/tests'\n result_path_pattern: '*build\/test-results'\n project_location: $bitrise_source_dir\n both directories zipped exported bitrise_deploy_dir . this ensures test results viewed, example, test reports add-on. if don't custom output directories configured, need change inputs: default values work. add deploy-to-bitrise-io step workflow able view test results test reports add-on . my-workflow:\n steps:\n - git-clone: {}\n android-unit-test:\n inputs:\n module: app\n variant: debug\n arguments: --task\n report_path_pattern: '*build\/reports\/tests'\n result_path_pattern: '*build\/test-results'\n project_location: $bitrise_source_dir\n deploy-to-bitrise-io: " });
this.add({id:624, 
title:"Device testing for Android", 
body:" device testing android with bitrise’s android virtual device testing solution, run ui tests emulators having set register devices. with bitrise’s android virtual device testing solution, run ui tests emulators having set register devices. limitations the maximum duration virtual device testing 30 minutes. a single build contain one  virtual device testing  step performing type test ( instrumentation ,  robo  or  gameloop ). our device testing solution based firebase test lab . you resulting logs, videos screenshots bitrise.   " });
this.add({id:625, 
title:"Running tests", 
body:" running tests with bitrise, choose 3 different test types: robo (default test type bitrise). instrumentation. gameloop. if want read difference test types, look at  firebase’s documentation. there small difference configuring workflow for robo and instrumentation tests, so let’s see separately! " });
this.add({id:626, 
title:"Running robo tests", 
body:" running robo tests workflow editor bitrise.yml open workflow want use the workflow editor. add the  android build  step workflow export apk. the step stores apk path env var . you need env var later. add the  debug  task the  variant  step input field. add  virtual device testing android  step the  android build  step. set the  apk path  input field. set test type input robo . add type test device the  test devices  input field. if choosing different device than default, input format of  deviceid , version , language , orientation  separated with , . find list available devices  . start build and  check test results . in bitrise.yml file, workflow want use create new one. add the  android-build  step workflow. the step stores apk path env var . you need env var later. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n set variant input debug . my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n add virtual-device-testing-for-android step. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n set the  app_path  input field: default, value $bitrise_apk_path env var. this var exported android-build step. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n app_path: $bitrise_apk_path\n set test_type input robo . my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n test_type: robo\n app_path: $bitrise_apk_path\n add type test device the  test_devices  input field. your input format device id , version , language , orientation  separated with   , . supported models you check supported device models running gcloud firebase test android models list --filter=virtualgcloud --filter=virtual command google cloud cli. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n test_type: robo\n app_path: $bitrise_apk_path\n test_devices: 'nexus9,24,en,portrait'\n start build and check test results. " });
this.add({id:627, 
title:"Setting user input with Robo directives for successful robo tests", 
body:" setting user input with robo directives successful robo tests if app needs specific user interaction successful robo test, use the robo directives input field set necessary inputs. for example, certain ui elements accessible testing required inputs (username email address) populated log in. click the virtual device testing android step workflow. click the robo test section. find the robo directives input field set required user input directives. provide comma-separated list key-value pairs, the key is android resource target ui element, the value is text string. edittext fields supported webview elements. for example, use following parameter custom login: username_resource,username,enter_text\npassword_resource,password,enter_text\nloginbtn_resource,,single_click one directive line, parameters separated with , character. for example: resourcename,inputtext,actiontype. based input provide, successfully run robo test (even pages accessible with specific user input) check results the test reports page. the be, example: screenshots. recorded video. logs. files. here screenshot successful robo test, test got way to my application by populating the email and password fields first with pre-defined directives the robo directives. " });
this.add({id:628, 
title:"Running instrumentation tests", 
body:" running instrumentation tests workflow editor bitrise.yml open workflow want use editor. add the  android build ui testing  step workflow. to export apk test apk, set following input fields the  android build ui testing  step. project location : root directory android project. module : set module wish build. variant : set variant wish build (usually  debug ). the step outputs be  bitrise_apk_path  (which path generated apk filtering) and  bitrise_test_apk_path  (which path generated test apk filtering). add  virtual device testing android step right the  android build ui testing  step. set the  test type  input instrumentation . our  android build ui testing  step exports apk test paths automatically set the  apk path  and test apk path  input fields the  virtual device testing android  step. add type test device the  test devices  input field. if choosing different device than default, input format device id , version , language , orientation  separated with   , . start build and check test results. in bitrise.yml file, workflow want use create new one. add the  android-build-for-ui-testing  step workflow. my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n to export apk test apk, set following input fields the  android build ui testing  step. project_location : root directory android project. module : set module wish build. variant : set variant wish build (usually debug). my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n project_location: $bitrise_source_dir\n the step outputs be  bitrise_apk_path  (which path generated apk filtering) and  bitrise_test_apk_path  (which path generated test apk filtering). add virtual-device-testing-for-android step right the  android build ui testing  step. my-workflow:\n steps:\n - git-clone@8: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n project_location: $bitrise_source_dir\n virtual-device-testing-for-android:\n set the  test_type input to  instrumentation . our  android-build-for-ui-testing  step exports apk test paths automatically set the  app_path  and test_apk_path  input fields the  virtual-device-testing-for-android  step. my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n apk_path_pattern: '*\/build\/outputs\/apk\/*.apk'\n arguments: arg\n project_location: $bitrise_source_dir\n virtual-device-testing-for-android:\n test_type: instrumentation\n app_path: $bitrise_apk_path\n test_apk_path: $bitrise_test_apk_path\n add type test device the  test_devices  input field. your input format device id , version , language , orientation  separated with   , . my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n apk_path_pattern: '*\/build\/outputs\/apk\/*.apk'\n arguments: arg\n project_location: $bitrise_source_dir\n virtual-device-testing-for-android:\n test_devices: 'nexus9,24,en,portrait'\n test_type: instrumentation\n test_apk_path: $bitrise_test_apk_path\n app_path: $bitrise_apk_path\n start build and check test results. " });
this.add({id:629, 
title:"Checking test results", 
body:" checking test results test reports display important information tests ran test summary tab. you see tests ran, duration, results. click tabs individual details. to access result particular test: find app dashboard, select it. on app's main page, select build want check out. go the  tests tab. you see failed tests tests tab itself. if failed tests, click view test reports button. on test summary tab, test want check. alternatively, bar, click tab set check out.to filter tests based results, open menu right, all default. click test cases see details. ui tests grouped according device unit test cases. you find: the total number tests ran, ratio successful failed tests. the duration individual test (both unit tests ui tests). in case ui tests, orientation locale device. you check, depending test type: individual test cases performance data videos screenshots test artifacts logs as noted above, depends test type, too: unit tests, won’t see screenshots videos, course. " });
this.add({id:625, 
title:"Running tests", 
body:" running tests with bitrise, choose 3 different test types: robo (default test type bitrise). instrumentation. gameloop. if want read difference test types, look at  firebase’s documentation. there small difference configuring workflow for robo and instrumentation tests, so let’s see separately! " });
this.add({id:626, 
title:"Running robo tests", 
body:" running robo tests workflow editor bitrise.yml open workflow want use the workflow editor. add the  android build  step workflow export apk. the step stores apk path env var . you need env var later. add the  debug  task the  variant  step input field. add  virtual device testing android  step the  android build  step. set the  apk path  input field. set test type input robo . add type test device the  test devices  input field. if choosing different device than default, input format of  deviceid , version , language , orientation  separated with , . find list available devices  . start build and  check test results . in bitrise.yml file, workflow want use create new one. add the  android-build  step workflow. the step stores apk path env var . you need env var later. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n set variant input debug . my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n add virtual-device-testing-for-android step. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n set the  app_path  input field: default, value $bitrise_apk_path env var. this var exported android-build step. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n app_path: $bitrise_apk_path\n set test_type input robo . my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n test_type: robo\n app_path: $bitrise_apk_path\n add type test device the  test_devices  input field. your input format device id , version , language , orientation  separated with   , . supported models you check supported device models running gcloud firebase test android models list --filter=virtualgcloud --filter=virtual command google cloud cli. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n test_type: robo\n app_path: $bitrise_apk_path\n test_devices: 'nexus9,24,en,portrait'\n start build and check test results. " });
this.add({id:627, 
title:"Setting user input with Robo directives for successful robo tests", 
body:" setting user input with robo directives successful robo tests if app needs specific user interaction successful robo test, use the robo directives input field set necessary inputs. for example, certain ui elements accessible testing required inputs (username email address) populated log in. click the virtual device testing android step workflow. click the robo test section. find the robo directives input field set required user input directives. provide comma-separated list key-value pairs, the key is android resource target ui element, the value is text string. edittext fields supported webview elements. for example, use following parameter custom login: username_resource,username,enter_text\npassword_resource,password,enter_text\nloginbtn_resource,,single_click one directive line, parameters separated with , character. for example: resourcename,inputtext,actiontype. based input provide, successfully run robo test (even pages accessible with specific user input) check results the test reports page. the be, example: screenshots. recorded video. logs. files. here screenshot successful robo test, test got way to my application by populating the email and password fields first with pre-defined directives the robo directives. " });
this.add({id:626, 
title:"Running robo tests", 
body:" running robo tests workflow editor bitrise.yml open workflow want use the workflow editor. add the  android build  step workflow export apk. the step stores apk path env var . you need env var later. add the  debug  task the  variant  step input field. add  virtual device testing android  step the  android build  step. set the  apk path  input field. set test type input robo . add type test device the  test devices  input field. if choosing different device than default, input format of  deviceid , version , language , orientation  separated with , . find list available devices  . start build and  check test results . in bitrise.yml file, workflow want use create new one. add the  android-build  step workflow. the step stores apk path env var . you need env var later. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n set variant input debug . my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n add virtual-device-testing-for-android step. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n set the  app_path  input field: default, value $bitrise_apk_path env var. this var exported android-build step. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n app_path: $bitrise_apk_path\n set test_type input robo . my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n test_type: robo\n app_path: $bitrise_apk_path\n add type test device the  test_devices  input field. your input format device id , version , language , orientation  separated with   , . supported models you check supported device models running gcloud firebase test android models list --filter=virtualgcloud --filter=virtual command google cloud cli. my-workflow:\n steps:\n - git-clone: {}\n android-build:\n inputs:\n variant: debug\n virtual-device-testing-for-android:\n test_type: robo\n app_path: $bitrise_apk_path\n test_devices: 'nexus9,24,en,portrait'\n start build and check test results. " });
this.add({id:627, 
title:"Setting user input with Robo directives for successful robo tests", 
body:" setting user input with robo directives successful robo tests if app needs specific user interaction successful robo test, use the robo directives input field set necessary inputs. for example, certain ui elements accessible testing required inputs (username email address) populated log in. click the virtual device testing android step workflow. click the robo test section. find the robo directives input field set required user input directives. provide comma-separated list key-value pairs, the key is android resource target ui element, the value is text string. edittext fields supported webview elements. for example, use following parameter custom login: username_resource,username,enter_text\npassword_resource,password,enter_text\nloginbtn_resource,,single_click one directive line, parameters separated with , character. for example: resourcename,inputtext,actiontype. based input provide, successfully run robo test (even pages accessible with specific user input) check results the test reports page. the be, example: screenshots. recorded video. logs. files. here screenshot successful robo test, test got way to my application by populating the email and password fields first with pre-defined directives the robo directives. " });
this.add({id:627, 
title:"Setting user input with Robo directives for successful robo tests", 
body:" setting user input with robo directives successful robo tests if app needs specific user interaction successful robo test, use the robo directives input field set necessary inputs. for example, certain ui elements accessible testing required inputs (username email address) populated log in. click the virtual device testing android step workflow. click the robo test section. find the robo directives input field set required user input directives. provide comma-separated list key-value pairs, the key is android resource target ui element, the value is text string. edittext fields supported webview elements. for example, use following parameter custom login: username_resource,username,enter_text\npassword_resource,password,enter_text\nloginbtn_resource,,single_click one directive line, parameters separated with , character. for example: resourcename,inputtext,actiontype. based input provide, successfully run robo test (even pages accessible with specific user input) check results the test reports page. the be, example: screenshots. recorded video. logs. files. here screenshot successful robo test, test got way to my application by populating the email and password fields first with pre-defined directives the robo directives. " });
this.add({id:628, 
title:"Running instrumentation tests", 
body:" running instrumentation tests workflow editor bitrise.yml open workflow want use editor. add the  android build ui testing  step workflow. to export apk test apk, set following input fields the  android build ui testing  step. project location : root directory android project. module : set module wish build. variant : set variant wish build (usually  debug ). the step outputs be  bitrise_apk_path  (which path generated apk filtering) and  bitrise_test_apk_path  (which path generated test apk filtering). add  virtual device testing android step right the  android build ui testing  step. set the  test type  input instrumentation . our  android build ui testing  step exports apk test paths automatically set the  apk path  and test apk path  input fields the  virtual device testing android  step. add type test device the  test devices  input field. if choosing different device than default, input format device id , version , language , orientation  separated with   , . start build and check test results. in bitrise.yml file, workflow want use create new one. add the  android-build-for-ui-testing  step workflow. my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n to export apk test apk, set following input fields the  android build ui testing  step. project_location : root directory android project. module : set module wish build. variant : set variant wish build (usually debug). my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n project_location: $bitrise_source_dir\n the step outputs be  bitrise_apk_path  (which path generated apk filtering) and  bitrise_test_apk_path  (which path generated test apk filtering). add virtual-device-testing-for-android step right the  android build ui testing  step. my-workflow:\n steps:\n - git-clone@8: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n project_location: $bitrise_source_dir\n virtual-device-testing-for-android:\n set the  test_type input to  instrumentation . our  android-build-for-ui-testing  step exports apk test paths automatically set the  app_path  and test_apk_path  input fields the  virtual-device-testing-for-android  step. my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n apk_path_pattern: '*\/build\/outputs\/apk\/*.apk'\n arguments: arg\n project_location: $bitrise_source_dir\n virtual-device-testing-for-android:\n test_type: instrumentation\n app_path: $bitrise_apk_path\n test_apk_path: $bitrise_test_apk_path\n add type test device the  test_devices  input field. your input format device id , version , language , orientation  separated with   , . my-workflow:\n steps:\n - git-clone: {}\n android-build-for-ui-testing:\n inputs:\n module: module\n variant: variant\n apk_path_pattern: '*\/build\/outputs\/apk\/*.apk'\n arguments: arg\n project_location: $bitrise_source_dir\n virtual-device-testing-for-android:\n test_devices: 'nexus9,24,en,portrait'\n test_type: instrumentation\n test_apk_path: $bitrise_test_apk_path\n app_path: $bitrise_apk_path\n start build and check test results. " });
this.add({id:629, 
title:"Checking test results", 
body:" checking test results test reports display important information tests ran test summary tab. you see tests ran, duration, results. click tabs individual details. to access result particular test: find app dashboard, select it. on app's main page, select build want check out. go the  tests tab. you see failed tests tests tab itself. if failed tests, click view test reports button. on test summary tab, test want check. alternatively, bar, click tab set check out.to filter tests based results, open menu right, all default. click test cases see details. ui tests grouped according device unit test cases. you find: the total number tests ran, ratio successful failed tests. the duration individual test (both unit tests ui tests). in case ui tests, orientation locale device. you check, depending test type: individual test cases performance data videos screenshots test artifacts logs as noted above, depends test type, too: unit tests, won’t see screenshots videos, course. " });
this.add({id:630, 
title:"Running tests in the Visual Studio App Center", 
body:" running tests visual studio app center upload schedule tests visual studio app center apps using upload step. upload schedule tests visual studio app center apps. the following testing frameworks available: appium. espresso. calabash. xcuitest. in workflow editor, add app center upload schedule tests step workflow. the step multiple required inputs. you value inputs setting test visual studio app center. log app center. prepare test upload . create app center project. navigate test runs tab start new test run : select devices want test app on. configure test run: choose series, language framework. on submit tab required input step upload schedule test section. click done . on bitrise, open workflow editor required inputs step. you need to: get api token. set target app. set test framework - see available options. add device selection slug. add test series. set locale (for example, en_us ) test run. set path application file, .ipa .apk. set path test directory. use appropriate directory chosen framework. " });
this.add({id:631, 
title:"Running Detox tests on Bitrise", 
body:" running detox tests bitrise detox gray box end-to-end tests automation library mobile apps built with react native. if native app bitrise, run tests. detox gray box end-to-end tests automation library mobile apps built with react native. it supports ios android apps. if native app bitrise, run tests. " });
this.add({id:632, 
title:"Before you start", 
body:" before start running detox requires: a mac with macos (el capitan 10.11 newer version). xcode 8.3 newer version with command line tools. a working react native app. install set detox project . you need install homebrew, node.js applesimutils, detox command line tools. add project create run tests locally. if android app, through  guide  after initial setup process. once done, test detox-configured project bitrise. " });
this.add({id:633, 
title:"Running a Detox test", 
body:" running detox test create a release device configuration package.json file detox section, separate detox configuration file. for information setting configuration, check documentation: project setup . example: \"detox\": {\n \"configurations\": \"ios.sim.debug\": \"binarypath\": \"ios\/build\/build\/products\/debug-iphonesimulator\/sampleprojectreactnative.app\",\n \"build\": \"xcodebuild -project ios\/sampleprojectreactnative.xcodeproj -scheme sampleprojectreactnative -configuration debug -sdk iphonesimulator -deriveddatapath ios\/build -usenewbuildsystem=no\",\n \"type\": \"ios.simulator\",\n \"name\": \"iphone 8\"\n },\n \"ios.sim.release\": \"ios\/build\/build\/products\/release-iphonesimulator\/sampleprojectreactnative.app\",\n release }\n }, on  bitrise.io , project open workflow editor. switch workflow want use. add a  run npm command  step workflow. install detox cli react native using npm command with arguments run input: install -g detox-cli\ninstall react-native-cli install test runner. for example, sample app uses mocha , installed with yarn step. to install yarn dependencies, just set the yarn command run input’s value install . add script step install necessary utilities run detox. #!\/bin\/bash\n \n# applesimutils collection utils apple simulators\nbrew tap wix\/brew\nbrew install applesimutils\n building testing release device configuration\ndetox build --configuration ios.sim.release\ndetox test ios.sim.release --cleanup you can, course, commands separate script steps, sake modularity. run build. if build fails, check example bitrise.yml file: ---\nworkflows:\n primary:\n steps:\n - activate-ssh-key: {}\n git-clone:\n inputs:\n clone_depth: ''\n title: git clone repo\n yarn@0.0.8:\n command: install\n npm@1.0.1:\n install -g detox-cli\n install detox cli\n script@1.1.5:\n content: |-\n #!\/bin\/bash\n brew tap wix\/brew\n applesimutils\n \n detox build --configuration ios.sim.release\n test ios.sim.release --cleanup\n build test release app\n deploy-to-bitrise-io@1.3.18: {}\ntroubleshootin " });
this.add({id:634, 
title:"Troubleshooting Detox tests", 
body:" troubleshooting detox tests if run issues with using detox bitrise, recommend trying rebuild entire package running test. to so, run following command bitrise build: npm rebuild detox if detox tests fail hang, contact support! " });
this.add({id:632, 
title:"Before you start", 
body:" before start running detox requires: a mac with macos (el capitan 10.11 newer version). xcode 8.3 newer version with command line tools. a working react native app. install set detox project . you need install homebrew, node.js applesimutils, detox command line tools. add project create run tests locally. if android app, through  guide  after initial setup process. once done, test detox-configured project bitrise. " });
this.add({id:633, 
title:"Running a Detox test", 
body:" running detox test create a release device configuration package.json file detox section, separate detox configuration file. for information setting configuration, check documentation: project setup . example: \"detox\": {\n \"configurations\": \"ios.sim.debug\": \"binarypath\": \"ios\/build\/build\/products\/debug-iphonesimulator\/sampleprojectreactnative.app\",\n \"build\": \"xcodebuild -project ios\/sampleprojectreactnative.xcodeproj -scheme sampleprojectreactnative -configuration debug -sdk iphonesimulator -deriveddatapath ios\/build -usenewbuildsystem=no\",\n \"type\": \"ios.simulator\",\n \"name\": \"iphone 8\"\n },\n \"ios.sim.release\": \"ios\/build\/build\/products\/release-iphonesimulator\/sampleprojectreactnative.app\",\n release }\n }, on  bitrise.io , project open workflow editor. switch workflow want use. add a  run npm command  step workflow. install detox cli react native using npm command with arguments run input: install -g detox-cli\ninstall react-native-cli install test runner. for example, sample app uses mocha , installed with yarn step. to install yarn dependencies, just set the yarn command run input’s value install . add script step install necessary utilities run detox. #!\/bin\/bash\n \n# applesimutils collection utils apple simulators\nbrew tap wix\/brew\nbrew install applesimutils\n building testing release device configuration\ndetox build --configuration ios.sim.release\ndetox test ios.sim.release --cleanup you can, course, commands separate script steps, sake modularity. run build. if build fails, check example bitrise.yml file: ---\nworkflows:\n primary:\n steps:\n - activate-ssh-key: {}\n git-clone:\n inputs:\n clone_depth: ''\n title: git clone repo\n yarn@0.0.8:\n command: install\n npm@1.0.1:\n install -g detox-cli\n install detox cli\n script@1.1.5:\n content: |-\n #!\/bin\/bash\n brew tap wix\/brew\n applesimutils\n \n detox build --configuration ios.sim.release\n test ios.sim.release --cleanup\n build test release app\n deploy-to-bitrise-io@1.3.18: {}\ntroubleshootin " });
this.add({id:634, 
title:"Troubleshooting Detox tests", 
body:" troubleshooting detox tests if run issues with using detox bitrise, recommend trying rebuild entire package running test. to so, run following command bitrise build: npm rebuild detox if detox tests fail hang, contact support! " });
this.add({id:635, 
title:"Measuring your code coverage with Codecov", 
body:" measuring code coverage with codecov codecov leading code coverage solution ci\/cd pipelines, delivering metrics right workflow. it integrates directly with bitrise provide valuable insights quality order allow users ship healthier risk. codecov provides features make test coverage available actionable speed development process deliver high-quality applications. some features include: coverage changes overlaid with source code, making easier identify needed test areas. multi-language support so use codecov right box. summary coverage information directly workflow so add update tests quickly effectively. status checks block underperforming pull requests merged. seamless coverage report merging workflows upload multiple reports jobs. custom coverage information based groupings using codecov flags .   " });
this.add({id:636, 
title:"Integrating Codecov with Bitrise", 
body:" integrating codecov with bitrise in order start using codecov, generating coverage reports with preferred tool (for example, xcode gradle). create account https:\/\/codecov.io . go repository’s settings tab codecov copy repository upload token. add codecov step workflow bitrise. make sure add steps test collect coverage. add codecov upload token secret variable, codecov_token , set expose pull requests option true . click add new . click save start new build coverage metrics. additional options the codecov step wraps codecov bash uploader. you add additional options step listed our arguments documentation. " });
this.add({id:637, 
title:"Viewing your coverage reports on Codecov", 
body:" viewing coverage reports codecov to view coverage codecov, following: view url supplied the codecov step bitrise. go  https:\/\/codecov.io  navigate directly applicable pull request commit. click links provided codecov available code host’s status checks pull request comment. " });
this.add({id:638, 
title:"What's next?", 
body:" what's next? now code coverage reports, level with following suggestions: set non-blocking status checks developers habit thinking code coverage. start working code coverage setting status checks increase overall coverage pull request. isolate coverage reports different types tests parts with flags measure matters. already using flags don’t want run entire test suite with bitrise ci run? try carryforward flags measure changes. " });
this.add({id:636, 
title:"Integrating Codecov with Bitrise", 
body:" integrating codecov with bitrise in order start using codecov, generating coverage reports with preferred tool (for example, xcode gradle). create account https:\/\/codecov.io . go repository’s settings tab codecov copy repository upload token. add codecov step workflow bitrise. make sure add steps test collect coverage. add codecov upload token secret variable, codecov_token , set expose pull requests option true . click add new . click save start new build coverage metrics. additional options the codecov step wraps codecov bash uploader. you add additional options step listed our arguments documentation. " });
this.add({id:637, 
title:"Viewing your coverage reports on Codecov", 
body:" viewing coverage reports codecov to view coverage codecov, following: view url supplied the codecov step bitrise. go  https:\/\/codecov.io  navigate directly applicable pull request commit. click links provided codecov available code host’s status checks pull request comment. " });
this.add({id:638, 
title:"What's next?", 
body:" what's next? now code coverage reports, level with following suggestions: set non-blocking status checks developers habit thinking code coverage. start working code coverage setting status checks increase overall coverage pull request. isolate coverage reports different types tests parts with flags measure matters. already using flags don’t want run entire test suite with bitrise ci run? try carryforward flags measure changes. " });
this.add({id:639, 
title:"Deploying", 
body:" deploying deploy apps simulators, test devices, app stores with help bitrise. you use steps ship, dedicated deployment solution. release management this section deploying apps bitrise steps. for granular fully customisable app release process, recommend using release management . deploying app bitrise means generating installable binary either: install test devices. upload bitrise.io. deploy simulator. upload online stores. " });
this.add({id:640, 
title:"Deploying Android apps", 
body:" deploying android apps deploying android apps means deploying apk aab file online store. any deployment solutions covered sections cover developed with frameworks, react native flutter, produce files. deploying android apps generally requires google service account upload bitrise. " });
this.add({id:641, 
title:"Deploying iOS apps", 
body:" deploying ios apps deploying android apps means installing ipa file test devices deploying online store. any deployment solutions covered sections cover developed with frameworks, react native flutter, produce files. deploying android apps generally requires apple service connection bitrise. " });
this.add({id:642, 
title:"Android deployment", 
body:" android deployment deploy android apps bitrise.io, testing, google play store, release. deploy android apps bitrise.io, testing, google play store, release. learn api, keystore files apk flavors. we recommend checking ship, deployment solution aims save lot headache publishing apps: deploying with ship . " });
this.add({id:643, 
title:"Deploying Android apps to Bitrise and Google Play", 
body:" deploying android apps bitrise google play you deploy android apps bitrise google play using dedicated steps correctly configuring project console. this guide describes how add android project bitrise.io deploy apk aab built project google play store . you need new service account created google play console so bitrise authenticate with deploy build. the invited user appropriate permission. to set project first time: register google play developer account . if google play developer account, deployed app store, skip setting up google play api access . go setting up google play deployment for the first time . " });
this.add({id:644, 
title:"Setting up Google Play API access", 
body:" setting google play api access grant google play api access project creating service account granting necessary user permissions account. turn google play developer api project: enable api . create service account google cloud platform: create service accounts . create new json key service account: create delete service account keys . instant download when click create end process, service account json key automatically downloaded. make sure save access download again! invite service account user users & permissions page google play console grant necessary permissions able access release apps play: use service account . check google play developer api guide need information process. you successfully prepared google play console project. a services credential account created authorized manage releases. " });
this.add({id:645, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:646, 
title:"Deploying an Android app to bitrise.io", 
body:" deploying android app bitrise.io in section, we'll how deploy android app bitrise.io . deploying bitrise.io means build artifacts generated available download finished. you use test app devices, example. to deploy app bitrise.io : workflow editor bitrise.yml make sure workflow contains android build step build app. optionally, build app with gradle runner step. this requires bit configuration allows extensive customization. add deploy bitrise.io step workflow. notifying users you use notify: user roles notify: emails inputs step set notifications deploy. click input names reveal information how configure them. optionally, set enable public page app? input step true so step enables public install page app. run build. open bitrise.yml file app. make sure workflow contains android-build step build app. workflows:\n example-workflow:\n steps:\n - android-build@1:\n optionally, build app with gradle-runner step. this requires bit configuration allows extensive customization. set module and\/or variant input tell step build. in example, we're building debug variant android project. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} add deploy-to-bitrise-io step workflow. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} notifying users you use notify_user_groups notify_email_list inputs step set notifications deploy: the notify_user_groups input allows send notifications based access roles granted users. for example, set input notify with admin developer role. set multiple roles separated comma: - notify_user_groups: admins, testers . the notify_email_list input accepts secrets, secret contain comma-separated lists email addresses. optionally, set enable public page app? input step true so step enables public install page app. run build. the deploy bitrise.io step deploy app. you share generated binary with team members using build’s url. a bitrise.yml deploying android app bitrise in example, we're building debug variant android app, deploy bitrise.io, as. " });
this.add({id:647, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:648, 
title:"Deploying apps to Huawei AppGallery", 
body:" deploying apps huawei appgallery you deploy android apps huawei appgallery verified bitrise step called deploy app gallery. the used any apk file build bitrise. you deploy android apps huawei appgallery verified bitrise step called deploy huawei app gallery . the step used deploy any apk file build bitrise. the step need: the app id app. the client id api client. the key generated api client. to successfully deploy app huawei appgallery, need workflow that: builds signs apk aab file. includes deploy huawei app gallery step deploy app. to configure deploying with deploy huawei app gallery step : manually upload first apk app huawei appgallery using website interface connect. create team-level api client appgallery connect . open workflow editor bitrise. go workflow want use deploying app. add deploy huawei app gallery step steps build sign apk. open config input group. fill required inputs. file path : if used step automatically exports bitrise_apk_path environment variable building apk, leave unchanged. the android build step step, example. file : the unique apk file. this used uploading appgallery connect. app id : the identified app information section appgallery connect. client id : the api client id generated appgallery connect. key : the key generated with api client appgallery connect. take look following bitrise.yml file see example configuration uses deploy huawei appgallery step deploy app. workflows:\n deploy:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone@4: {}\n cache-pull@2: install-missing-android-tools@2:\n inputs:\n gradlew_path: \"$project_location\/gradlew\"\n gradle-runner@1.9:\n gradle_file: \"$gradle_build_file_path\"\n gradle_task: assemblerelease\n \"$gradlew_path\"\n sign-apk@1.7: deploy-to-bitrise-io@1: cache-push@2: appgallery-deploy@0:\n huawei_client_id: 'xxx'\n huawei_client_secret: \"$client_secret\"\n huawei_app_id: 'yyy' run build! if goes well, see app huawei appgallery. " });
this.add({id:649, 
title:"Generate and deploy multiple flavor APKs in a single Workflow", 
body:" generate deploy multiple flavor apks single workflow you generate, code sign deploy multiple flavor (multi-flavor) apks\/aabs workflow using gradle runner step. you generate, code sign deploy multiple flavor (multi-flavor) apks\/aabs workflow using gradle runner step . flavor means enhancing app’s core code with features resulting different versions app (just mention common examples: free\/paid, demo\/full). check official android studio guide build types, flavors variants info! in tutorial, need settings android sign google play deploy steps - so eyes peeled! " });
this.add({id:650, 
title:"Generating multi-flavor APKs", 
body:" generating multi-flavor apks to generate apk files different flavors: open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. insert gradle runner step android testing steps. android build step build variant so workflow, advise replace with gradle runner step. click config section step. specify assemble gradle tasks adding build variants’ task names gradle task run step input field - task names build variants want workflow. each exactly variant listed build variant window android studio! make sure separate with space, need comma ! in image, see order steps deploy workflow gradle task run step input with build variants: assembledemo assemblefull (for apks) bundledemo bundlefull (for aabs) gradle runner generates $bitrise_apk_path_list \/ $bitrise_aab_path_list environment variable output contains apks\/aabs built all build variants defined above. we need later. " });
this.add({id:651, 
title:"Signing and deploying multi-flavor APKs", 
body:" signing deploying multi-flavor apks open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add android sign step after gradle runner step it’s missing workflow . set app file path input $bitrise_apk_path_list $bitrise_aab_path_list depending app format built previous gradle runner step. this make sure apks aabs code signed with keystore file uploaded code signing tab. the step export $bitrise_signed_apk_path_list $bitrise_signed_aab_path_list environment variable output contains path signed app files build variant. make sure set following input fields android sign step: keystore url keystore password keystore alias add google play deploy step after android sign step. set $bitrise_signed_apk_path $bitrise_signed_aab_path environment variable apk app bundle file path step input field so google play deploy step release build variants app store. " });
this.add({id:652, 
title:"Generating and deploying Android app bundles", 
body:" generating deploying android app bundles creating android app bundle with bitrise generating apk. you tweak step inputs compile (.aab) file code, bundle signed deployed google play store. creating android app bundle with bitrise generating apk. all tweaking step inputs compile android app bundle (.aab) file code, bundle signed deployed google play store. step versions supporting bundle creation the following steps indicated version newer - older versions not support bundle creation. android build 0.10.0 newer gradle runner 1.9.0 newer android sign 1.3.0 newer deploy google play 1.6.0 newer " });
this.add({id:653, 
title:"Generating an Android App Bundle file", 
body:" generating android app bundle file you create android app bundle with gradle runner step with android build step. " });
this.add({id:654, 
title:"Using the Gradle Runner Step", 
body:" using gradle runner step workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. insert gradle runner step android unit test android lint steps workflow . click config section gradle runner . in gradle task run input field, set, example, bundlerelease bundledebug create bundle project. apk aab workflow if wish generate android app bundle apk workflow, specify additional task gradle task run input field: set value bundlerelease assemblerelease generate release versions. open bitrise.yml file app. insert gradle-runner step android-unit-test android-lint steps workflow . my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: gradle-runner: in gradle_task input gradle-runner , set, example, bundlerelease bundledebug create bundle project. my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: gradle-runner:\n inputs:\n gradle_task: bundlerelease apk aab workflow if wish generate android app bundle apk workflow, specify additional task gradle_task input field: set value bundlerelease assemblerelease generate release versions. this way step generate android app bundle instead apk. " });
this.add({id:655, 
title:"Using the Android Build Step", 
body:" using android build step you generate android app bundle app with android build step well: workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add android build step android unit test android lint steps workflow. provide root directory android project project location input field. go build type select aab build type. apk aab workflow if wish generate apk android app bundle workflow, add android build steps configure build android app bundle apk. open bitrise.yml file app. add android-build step android-unit-test android-lint steps workflow. my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: android-build:\n provide root directory android project project_location input field. set value build-type input aab . my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: android-build:\n inputs:\n build-type: aab apk aab workflow if wish generate apk android app bundle workflow, add android-build steps configure build android app bundle apk. " });
this.add({id:656, 
title:"Signing an Android App bundle", 
body:" signing android app bundle signing android app bundle file works way signing apk: convenient method upload keystore files bitrise use android sign step: workflow editor bitrise.yml upload keystore file bitrise. open workflow editor, add android sign step after build step. make sure keystore password , key alias key password input fields filled out. default input values if uploaded keystore file filled required credentials, android sign step's keystore url , keystore password , keystore alias , private key password inputs populated automatically! make sure app file path input field displays output env var build step you've using. for example, android build exports $bitrise_apk_path $bitrise_aab_path env var points apk and\/or aab file step generated. by default, input vars. further configuration options check available configuration options android sign step workflow editor. you can: enable disable memory page alignment with page alignment input. use apksigner instead default jarsigner with enables apksigner input. enforce specific signature scheme with apk signature scheme input. upload keystore file bitrise. in app's bitrise.yml file, add sign-apk step after build step - example, android-build - workflow . sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@1:\n inputs:\n make sure keystore_url , keystore_password , keystore_alias inputs point correct location. sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@:\n inputs:\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n default input values if uploaded keystore file bitrise filled required credentials, set inputs all: default values, defined step's step.yml configuration file, point keystore file necessary credentials. make sure android_app input field displays output env var build step you've using. for example, android-build exports $bitrise_apk_path $bitrise_aab_path env var points apk and\/or aab file step generated. by default, input vars. the step look binary sign locations provided input. sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@1:\n inputs:\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n android_app: \"$bitrise_apk_path\\\\n$bitrise_aab_path\"\n further configuration options check available configuration options android-sign step step.yml file . you can: enable disable memory page alignment with page_align input. use apksigner instead default jarsigner with use_apk_signer input. enforce specific signature scheme with signer_scheme input. and done! if like read android code signing, check guide . " });
this.add({id:657, 
title:"Deploying your Android App Bundle to Google Play", 
body:" deploying android app bundle google play deploying aab file isn't significantly different deploying apk google play. if want check bundle prior app store distribution, add deploy bitrise.io step gradle runner \/ android build steps. it uploads bundle artifacts tab build’s page. " });
this.add({id:658, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:659, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:660, 
title:"Exporting a universal APK from an AAB", 
body:" exporting universal apk aab with bitrise's export universal apk step export universal app bundle, sign with keystore (or debug keystore), deploy test device releasing app google play store. you test android app device generated artifact app bundle ( .aab ). with export universal apk step export universal apk app bundle, sign with keystore (or debug keystore), deploy test device releasing app google play store. configuring step super simple: workflow editor bitrise.yml insert export universal apk step android build step workflow . make sure android app bundle path input's value output variable ( bitrise_aab_path ) previous build step. using different build step if don't use android build step build aab file, make sure input points output used. you use environment variable, direct local path url. make sure keystore url input points android keystore file. we recommend uploading file bitrise using default env var: $bitriseio_android_keystore_url . you can, however, use local path url input value here. provide credentials keystore alias keystore password inputs. if uploaded keystore file bitrise, default value inputs need changed. in bundletool version input, override default bundletool version need specific make sure use correct version . run workflow. in app's bitrise.yml file, insert bitrise-step-export-universal-apk step android-build step. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n make sure aab_path input's value output variable ( $bitrise_aab_path ) previous build step. using different build step if don't use android-build step build aab file, make sure input points output used. you use environment variable, direct local path url. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n make sure keystore_url input points android keystore file. we recommend uploading file bitrise using default env var: $bitriseio_android_keystore_url . you can, however, use local path url input value here. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n keystore_url: \"$bitriseio_android_keystore_url\"\n provide credentials keystore_alias keystore_password inputs. if uploaded keystore file bitrise, default value inputs need changed. otherwise store credentials secret use secrets input values. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n in bundletool_version input, override default bundletool version need specific make sure use correct version . my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n bundletool_version: 1.8.1\n run workflow. the export universal apk step exports apk $bitrise_apk_path environment variable steps pick up. if deploy bitrise.io step included workflow, ship add-on deploy apk you. " });
this.add({id:661, 
title:"iOS deployment", 
body:" ios deployment to use bitrise deploy ios app any platform, need code signing files you'll archive xcode project export signed ipa file. once built app ran unit tests ui it, it’s time deploy it. to deploy ios app any platform, need: code signing files. to archive xcode project export signed ipa file. our guides delve specifics basic requirements how use steps deploy app exact way want to! we recommend checking ship, deployment solution aims save lot headache publishing apps: deploying with ship" });
this.add({id:662, 
title:"Deploying an iOS app to Bitrise.io", 
body:" deploying ios app bitrise.io deploy app bitrise able download ipa file install devices specified app’s development type provisioning profile. this way, internal testers easily test app. deploy app bitrise able download ipa file install devices specified app’s development type provisioning profile. this way, internal testers easily test app. clear cache when trying install app public page, clear cache: click link appearing if synced settings old device, need clear cache register new device line. the link redirects profile settings page follow procedure described guide. developer certificate development profile to deploy ios app bitrise.io , need developer type certificate development provisioning profile. even want deploy app store, required: used create .xcodearchive file provided code process exporting ipa file. generate ipa file machine once. upload necessary code signing files bitrise. if want internal testers test app, register test devices . make sure xcode archive export ios step workflow . set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step development . you use export methods, too, deploy bitrise want install app specified devices internal testers, development sufficient. make sure deploy bitrise.io step workflow. by default, value enable public page app? input set true . this way, build runs, public install page available with long random url shared others registered bitrise. sent users email. the notify: user roles notify: emails inputs determine users email. start build. when build finished, app’s builds page click latest build. click artifacts tab ipa file. you public install url here. click expand-arrow icon ipa file reveal details toggle page. make sure that’s toggled so you’re able send link non-bitrise users. to install app public page, use native safari browser ios device. you click installation link you’re browsing third-party app. for information, check installing an .ipa file on test devices from the artifacts tab and that’s it! the file installed devices included app’s provisioning profile. remember: installation link accessed ios device’s safari browser! " });
this.add({id:663, 
title:"Deploying an iOS app for external testing", 
body:" deploying ios app external testing before deploying app app store, want release external testers test devices outside development environment. if use testflight, exporting ipa file with app-store export method. before deploying app app store, want release external testers test devices outside development environment. if use testflight, exporting ipa file with ad-hoc export method. using testflight if wish invite external testers using testflight, cannot use ad-hoc export method. you need ipa with app-store export method. generate ipa file machine once. upload necessary code signing files bitrise. for ad-hoc export method, need distribution type certificate ad hoc provisioning profile. only upload profile use manual provisioning: ios code signing with manual provisioning . make sure xcode archive & export ios step workflow . set distribution method input step ad-hoc . set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . make sure deploy bitrise.io step workflow. start build. when build finished, app’s builds page click latest build. click artifacts tab ipa file distribute. " });
this.add({id:664, 
title:"Deploying an iOS app to App Store Connect", 
body:" deploying ios app app store connect you deploy bitrise app app store connect invite testers testflight release store. you deploy app app store connect to: invite testers testflight. release app app store. on bitrise, simply just upload binary app store connect submit review. " });
this.add({id:665, 
title:"Deploy to App Store Connect Steps", 
body:" deploy app store connect steps to deploy app app store connect, steps: deploy app store connect deploy app store connect - application loader deploy app store connect - application loader simple: simply pushes .ipa .pkg binary file app store connect. with step , submit app review app store, example. with deploy app store connect step, can: submit app app store review. you upload apps different platforms (ios, os x, appletvos). tell bitrise want upload screenshots app’s metadata with binary. " });
this.add({id:666, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:667, 
title:"Deploying an iOS app for simulators", 
body:" deploying ios app simulators you build deploy ios app simulator, browser, example, use testing. you build deploy ios application simulator, browser, example. on bitrise, dedicated step build simulator: xcode build simulator step runs xcodebuild command with ios simulator destination generates .app file. the .app file run any simulator. on bitrise, step upload app appetize.io: appetize.io deploy step. with step, deploy app so run browser. to build app simulator, need code signing files! " });
this.add({id:668, 
title:"Building an iOS app for a simulator", 
body:" building ios app simulator you build ios app tvos simulator platform. to this, you'll need xcode build simulator step. the step creates .app file install any macos device send to, example, testers. this requires code signing all, so easy way create distributable version ios app. the step creates .xctestrun file use run tests. both .app file .xctestrun file accessed subsequent steps referring output variable, downloaded build artifact . to build app simulator: workflow editor bitrise.yml make sure install necessary dependencies workflow. we dedicated steps different dependency managers, including: carthage cocoapods homebrew add xcode build simulator step workflow step(s) installing dependencies. make sure project path input points .xcodeproj .xcworkspace file. the input sets -project -workspace option xcodebuild command. in cases, app automatically configured project scanner process adding app , default value does need changed. in scheme input, set xcode scheme want use build app. the input sets -scheme option xcodebuild command. the default value environment variable created adding app performing first-time configuration. if need use different scheme, type here. build configuration by default, step use build configuration specified scheme. however, override different configuration: add desired configuration input. this input optional need don't want use build configuration specified selected scheme. you create new build configurations xcode project any time: adding build configuration file project . configure simulator run destinations: device model : set device want test app on. exactly appears xcode's device selection interface . for example, iphone 14 pro . os version : set required os version appears xcode's device selection interface. for example, ios 16.2 . platform : select ios tvos . optionally, set code signing allowed input yes . this allows code signing files installed build. in cases, don't need code signing app built simulator. it required certain test cases third-party dependencies. to set signing, see ios code signing . to access app build artifact, add deploy bitrise.io step end workflow. by default, don't modify step's configuration. make sure install necessary dependencies workflow. we dedicated steps different dependency managers, including: carthage cocoapods homebrew add xcode-build-for-simulator step workflow step(s) installing dependencies. workflows: \n primary:\n steps:\n - cocoapods-install\n xcode-build-for-simulator:\n inputs: make sure project_path input points .xcodeproj .xcworkspace file. the input sets -project -workspace option xcodebuild command. in cases, app automatically configured project scanner process adding app , default value does need changed. - xcode-build-for-simulator:\n inputs:\n project_path: $bitrise_project_path\n in scheme input, set xcode scheme want use build app. the input sets -scheme option xcodebuild command. the default value environment variable created adding app performing first-time configuration. if need use different scheme, make sure type scheme correctly. - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n project_path: $bitrise_project_path\n build configuration by default, step use build configuration specified scheme. however, override different configuration: add desired configuration input. this input optional need don't want use build configuration specified selected scheme. you create new build configurations xcode project any time: adding build configuration file project . configure simulator run destinations: simulator_device : set device want test app on. exactly appears xcode's device selection interface . for example, iphone 14 pro . simulator_os_version : set required os version appears xcode's device selection interface. for example, ios 16.2 . simulator_platform : select ios tvos . - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n project_path: $bitrise_project_path\n optionally, set code_signing_allowed input yes . this allows code signing files installed build. in cases, don't need code signing app built simulator. it required certain test cases third-party dependencies. to set signing, see ios code signing . - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n code_signing_allowed: 'yes'\n project_path: $bitrise_project_path\n to access app build artifact, add deploy-to-bitrise-io step end workflow. by default, don't modify step's configuration. primary:\n steps:\n - generate-cordova-build-configuration@0: {}\n xcode-build-for-test@2: xcode-test@4: xcode-build-for-simulator@0.12:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n configuration: debug\n code_signing_allowed: 'no'\n project_path: $bitrise_project_path\n deploy-to-bitrise-io\n " });
this.add({id:669, 
title:"Deploying the app to Appetize.io", 
body:" deploying app appetize.io an .app file built with xcode build simulator step works with just any simulator. but want easily quickly integrate simulator allows run app browser, recommend using appetize.io deploy step. it uploads app appetize.io provides public url use browser. request appetize.io api token. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add configure xcode build simulator step workflow. add appetize.io deploy step workflow. add appetize.io api token appetize.io token input. enter path .app file application path input. the easiest solution use bitrise_app_dir_path_list environment variable output xcode build simulator step. optionally, enable verbose logging efficient debugging. the appetize.io deploy step produce output: appetize_app_url environment variable. public url access app. enjoy showing off! " });
this.add({id:670, 
title:"Deploying with Ship", 
body:" deploying with ship ship deployment solution aims save users lot headache. with ship, complete control app’s distribution, version history, important metadata - manage place. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. ship deployment solution aims save users lot headache. with ship, complete control app’s distribution, version history, important metadata - manage place. deployment with ship includes automatic re-sign artifact generation store previous versions too. the app’s metadata, marketing copy, screenshots edited spot non-developer people manage it. ship language as right now, ship supports english locale. no language submissions supported. you lot things with ship: view build versions app. view edit details given build version, including description, screenshots, important parameters, app size supported device types. send app directly testers with link public install page. deploy given build version app store connect and\/or google play console, set publishing. switch platforms version history page case cross-platform projects. " });
this.add({id:671, 
title:"Getting started with Ship", 
body:" getting started with ship to start using ship, you'll need build app export generated binary ship. you expose workflow builds make sure include deploy bitrise.io step it. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. to start using ship, you'll need build app export generated binary ship. you options open ship bitrise: on add-ons tab app: option takes ship’s home page. from builds page: option takes build’s ship page. when first logging in, single build version available publish. but don’t worry, fixed quickly. step versions compatible with ship please note deploy bitrise.io step version 1.9.0 higher xcode archive & export ios step ios apps version 2.6.0 higher - older versions steps support ship. to able deploy app with ship: in workflows , need step builds app. by default, xcode archive & export ios , gradle runner android build automatically supported. the workflow correct version deploy bitrise.io step builds app. the deploy bitrise.io step export relevant file: apk file android apps .xcarchive file ios apps. if use xcode archive & export ios , gradle runner android build steps, don’t change default configuration deploy bitrise.io step export relevant files. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . once successfully built app, able start using ship. " });
this.add({id:672, 
title:"Configuring an app for publishing with Ship", 
body:" configuring app publishing with ship to publish app ship, need build binary with workflow exposed settings properly configured. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. to publish app ship, need to: build app exposed workflow : exposing a workflow's artifacts to ship . make sure bitrise necessary code signing files . configure publishing settings page. ios android apps set settings settings page; cross-platform app, ios android settings configured. " });
this.add({id:673, 
title:"Exposing a Workflow's artifacts to Ship", 
body:" exposing workflow's artifacts ship exposing workflow’s artifacts means products workflow available ship: example, produces apk, publish using ship. by default, workflows exposed contain correct version deploy bitrise.io step . if happy with that, just leave field is. if, however, add workflow here, exposed. to expose workflow’s artifacts ship: go app’s ship page. click settings right corner. go general tab. in expose artifacts from selected workflow ship text box, add workflows need. be aware app cross-platform, two text boxes: ios android. separate different workflow names with comma (for example, build, deploy, release_build_android ) . scroll page click save . " });
this.add({id:674, 
title:"Code signing files", 
body:" code signing files code signing files required publish app any online store, install test devices. on settings page, choose different code signing files. you upload files - ios provisioning profiles certificates, android keystore service account json code signing tab bitrise app: ios code signing . android code signing . " });
this.add({id:675, 
title:"Installing an app on a test device with Ship", 
body:" installing app test device with ship you install app ship, using public page option, logging ship device itself there. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. to install app device using ship, options: send public install page link qr code takes scanned testers stakeholders. log ship device install directly there. " });
this.add({id:676, 
title:"Accessing the public install page in Ship", 
body:" accessing public install page ship to send public install page link qr code stakeholders: artifact types the public install page available type artifacts. for ios, it’s available app signed with debug, development ad-hoc type provisioning profile. for android, it’s available workflow builds apk not split universal split. aabs, public install page link. make sure deploy bitrise.io step workflow builds installable file. make sure enable public page app? input step set true . log ship. expose workflow run build bitrise. go ship. open details page app’s chosen build version. on right, public install page link qr code. copy need send stakeholders (by email, example). " });
this.add({id:677, 
title:"Installing directly from Ship", 
body:" installing directly ship to install app registered device directly ship: build app bitrise. log ship supported device. click devices tab given device registered. read guide how register devices bitrise. under app, click install button. " });
this.add({id:678, 
title:"Publishing an app to a store with Ship", 
body:" publishing app store with ship ship supports publishing apple's app store google play. to successfully publish stores, need build app bitrise, make sure access code signing files, configure ship. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. ship supports publishing apple's app store google play. to successfully publish stores, need build app bitrise, make sure access code signing files, configure ship. " });
this.add({id:679, 
title:"Publishing an iOS app to the App Store with Ship", 
body:" publishing ios app app store with ship to able publish ios app app store connect (formerly known itunes connect) with ship, to: build app. choose provisioning profiles code signing identities used. set app specific password. set apple developer account email. set app sku: unique id app internal tracking. it’s visible customers. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . make sure you've configured xcode archive & export ios step correctly: distribution method input set app store built with release configuration. make sure deploy bitrise.io step workflow . open app’s ship page click settings right corner. go general tab. go ios settings section. expose workflow creates ipa file want publish, run bitrise. in ios settings section, select code signing files want use. make sure choose files appropriate export method used create .ipa file. for example, was exported using app-store method, choose app store provisioning profile distribution certificate (code signing identity). enter apple developer account email app specific password able publish app store. enter app sku . go details page click publish . " });
this.add({id:680, 
title:"Publishing an Android app to Google Play with Ship", 
body:" publishing android app google play with ship to configure publishing android app google play console ship, to: choose android keystore files service account json file. set track want use release app. once configured publishing app, set options time, want change them. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . open app’s ship page click settings right corner. go android settings section. expose workflow creates apk want publish. make sure exposed workflow includes android build gradle runner step, deploy bitrise.io step. build release version app with exposed workflow. depending step use, options: make sure android build step’s variant input field contains release (for example release demorelease ). make sure gradle runner step’s gradle task run input field contains release (for example, assemblerelease assembledemorelease ) enter track want use publish google play console. if android app contains multiple modules, enter exact module module . choose appropriate keystore file service account json file. head version history page select version wish publish. if app multiple flavors, filter right flavor publishing. fill details page click publish. " });
this.add({id:681, 
title:"Publishing status and logs", 
body:" publishing status logs once clicked publish ship, process starts according configured settings. you view status active publishing details page app. to view logs any publishing process, activity tab. from there, download logs clicking download build log troubleshoot any errors failed publish. " });
this.add({id:682, 
title:"Using Ship for apps built with cross-platform frameworks", 
body:" using ship apps built with cross-platform frameworks you use ship any binary build bitrise: just need make sure ends bitrise_deploy_dir directory so deploy bitrise.io step it. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. by default, ship works with android build, gradle runner xcode archive & export ios steps . the output steps automatically exported deploy bitrise.io step ship. however, apps built with cross-platform frameworks, react native flutter, use steps workflows . but don’t worry: use steps supported default build app deploy with ship. all need make sure right files end place. " });
this.add({id:683, 
title:"Publishing iOS apps built with cross-platform frameworks", 
body:" publishing ios apps built with cross-platform frameworks you use ship publish android app built with, example, flutter react native don't xcode archive & export ios step. the deploy bitrise.io step looks .xcarchive.zip file export ship case ios app. if want use xcode archive & export ios step, just need make sure that: there step exposed workflow exports .xcarchive.zip file app. that is, step use needs create xcode archive package zip file. this step exports .xcarchive.zip file bitrise_deploy_dir directory. " });
this.add({id:684, 
title:"Publishing Android apps built with cross-platform frameworks", 
body:" publishing android apps built with cross-platform frameworks you use ship publish android app built with, example, flutter react native don't android build gradle runner steps. the deploy bitrise.io step looks apk aab file bitrise_deploy_dir directory. if want use android build gradle runner steps, just need make sure that: there step exposed workflow exports apk aab file app. this step exports apk aab file bitrise_deploy_dir directory. " });
this.add({id:685, 
title:"App details in Ship", 
body:" app details ship on app details page ship, update important information so info available online stores publish to. the purpose app's details page update important information app - example, make sure relevant appears online store choice. the details include: a description app. screenshots feature graphics app, arranged different supported devices. metadata version number, size, code, sdk version, so on. the exact parameters depend type app. this automatically exported ship deploy bitrise.io step . " });
this.add({id:686, 
title:"Adding screenshots or feature graphics", 
body:" adding screenshots feature graphics you add screenshots app published. once added screenshots graphics build version app, automatically subsequent versions. if want display different screenshots, modify it, leave alone. to add screenshots feature graphics app details page: open details page ship app’s chosen build version. go screenshots feature graphic , depending want upload. drag drop file or click browse files select ones wish upload. once done, click save right corner. " });
this.add({id:687, 
title:"Updating the app's descriptions", 
body:" updating app's descriptions you update app’s description, textual details way. the types text fields available depend type app. open details page ship app’s chosen build version. go field want edit click content field. edit content. click save right details tab. " });
this.add({id:688, 
title:"Ship notifications", 
body:" ship notifications ship send emails different events: new build version available, successful publishing, failed publishing. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. ship send emails different events: a new build version app available ship. ship successfully published app. ship failed publish app. these notifications sent any number different email addresses. when new address added list, ship sends confirmation address: confirmation, work. " });
this.add({id:689, 
title:"Adding a new email address in Ship", 
body:" adding new email address ship to add new email address notification list app: open app’s ship page. click settings. go notifications tab. in input field email notifications , type email address. click add . the address appear list below, with pending status. an email sent address: recipient click confirm notifications email start receiving notifications. " });
this.add({id:690, 
title:"Configuring notifications in Ship", 
body:" configuring notifications ship you pick choose ship events want notify different people. for example, it’s possible send notifications failed publishing event bothered things well! and course email addresses. open app’s ship page. click settings. go notifications tab. use toggles different event types. hit save notifications set. " });
this.add({id:691, 
title:"Deploying apps to Applivery", 
body:" deploying apps applivery applivery mobile app distribution platform ios android provides powerful management simplify delivery testers employees, with focus easy-to-use experience. applivery mobile app distribution platform ios android provides powerful management simplify delivery testers employees, with focus easy-to-use experience. applivery features better manage in-development production-ready apps help speed development, feedback deliver applications. some features are: single multi app customized stores with seamless user experience non-technical users. multi-track fully customized app distribution with multiple security configurations including sso, non-registered users, password protected unlisted apps. automatic forced in-app updates. feedback bug reporting. combined with bitrise, cover entire development life cycle, testing building delivery feedback. " });
this.add({id:692, 
title:"Deploying your app to Applivery", 
body:" deploying app applivery add applivery ios deploy applivery android deploy step workflow . make sure add step steps build app . get applivery app token link bitrise app with app. read how app token . open app bitrise click workflows tab open workflow editor. go secrets tab. click add new type applivery_app_token key input field. paste applivery app token value input field click save . " });
this.add({id:693, 
title:"Configuring the Applivery Step", 
body:" configuring applivery step there optional parameters customize better deeper integration: input variables type description file path file app’s binary file. by default gets $bitrise_ipa_path $bitrise_apk_path. app token string applivery app token. by default gets $applivery_app_token secret var. changelog string additional build\/release notes changelog attached deploy. notify collaborators? boolean automatically notify project collaborators vía emai. notify employees? boolean automatically notify project employees vía emai. notification message string notification message sent with email notification. tags string comma-separated list tags easily identify build multitrack app distribution version string human readable version better identification build. upload certificates boolean download code signing files bitrise code signing & files tab upload applivery. " });
this.add({id:694, 
title:"Distribution with Applivery", 
body:" distribution with applivery applivery provides multiple different ways app distribution customized app stores (public private) distribution pages (public, private, unlisted, password-protected shareable installation links). it enables multitrack delivery based information gathered bitrise workflows, github branches, tags labels. " });
this.add({id:695, 
title:"Deploying apps to DeployGate from Bitrise", 
body:" deploying apps deploygate bitrise deploygate mobile app distribution platform ios android, delivering in-development ios\/android apps dev team, members, employees, qa testing team organization testers outside company. deploygate mobile app distribution platform ios android, delivering in-development ios\/android apps dev team, members, employees, qa testing team organization testers outside company. deploygate features accelerate app development cycle including qa testing improvement with beta tester’s feedbacks. deploygate offers: real-time app distribution with automatic version control, requiring accounts testers flexible user account management with granular access control git-like multi-track distribution allows individual version\/user\/device management app with deploygate bitrise, quickly build fully automated in-house dogfooding environment team. to see details, visit deploygate features . to upload app deploygate, add deploygate upload step bitrise workflow . this step added builds app's binary uploaded. you need set required parameters below: input variables description api key set upload user’s deploygate api key account settings. if want upload apps organization account, use organization’s api key. upload account shown activity timeline. owner name app owner’s account deploygate. you use username organization name. app file path app’s binary file (ipa\/apk) uploaded. for default setting, use $bitrise_apk_path android $bitrise_ipa_path ios you set optional variables using advanced features below: input variables description short message summary update shown deploygate. you use $bitrise_git_message want commit message, pull request title, message specified triggered build manually. distribution key you make multiple public install links (we called distribution page) different version app binary app. by specifying distribution page’s hash, page updated simultaneously. the “xxxx” portion distributed url like https:\/\/deploygate.com\/distributions\/xxxx distribution name specify updated distribution page. if exists, new page created. possible usage includes creating pages git branch name. (for example $bitrise_git_branch) release note message new release distribution page. this message notified page’s testers disable notify(ios only) there deploygate client app ios platform. by default, use email notifications release updates. if don’t need notification, set option true these options based deploygate api . for details, read references deploygate.com . you use deploygate's distribution page (shareable link) feature generate landing page app installation app’s specific version. when upload app deploygate, automatically assigns sequential number (we calling **revision number** ) uploaded build. on distribution page, choose specific revision app distribute group testers. this feature handy distributing multiple tester groups different purposes qas, dog fooding, test marketing. you generate distribution page upload app bitrise with deploygate upload step. please refer optional variables above. " });
this.add({id:696, 
title:"Deploying your app to Appaloosa", 
body:" deploying app appaloosa appaloosa helps distribute mobile apps privately, collect feedback analyse deployment’s efficiency. use dedicated step deploy with bitrise. would like beta test deploy app 1 thousands users? appaloosa helps distribute mobile apps privately, collect feedback analyse deployment’s efficiency. check out! appaloosa simple secure enterprise app store. they help mobile & digital teams build, test deploy apps privately. you manage apps android, ios windows phone, place. appaloosa provides native app store increase users’ engagement. they receive push notification update able test use latest version mobile apps. appaloosa gives great insight efficiency deployment with download usage stats feedbacks ratings users. they entreprise ready with ldap, oauth, saml active directory integrations restful api. get touch details. plus mobile apps targeted groups users distributed collaborators. to deploy app appaloosa, simply add appaloosa step app’s workflow . if don’t account appaloosa, created go. as registered user simply need store id api key . as unregistered user , email address enough. optionally provide description , screenshot urls (up 5) and, registered, group ids . with bitrise appaloosa, focus mobile app development care rest! " });
this.add({id:697, 
title:"Deploying to TestFairy with Bitrise", 
body:" deploying testfairy with bitrise testfairy deployment service gives plenty insights app. you deploy with bitrise using dedicated step. if looking deployment service gives lots insights application, testfairy great service check out. when testing apps crowd, know exactly was tested went wrong client side. testfairy solves problem providing video happened mobile device, including detailed internal metrics cpu, memory, gps, network, logs, crash reports, lot more. to insights ios need integrate ios sdk app . to deploy app testfairy platform just simply need add testfairy step app’s workflow (on bitrise.io ). the required parameter add api key testfairy. to navigate account preferences testfairy key api key menu. email notifications auto update you enable disable email notifications set tester groups like notify. there’s option make users upgrade latest build enabling auto update step, start recording video length it. there’s need do, simply work awesome app ensure automatically deployed testfairy time update code. " });
this.add({id:642, 
title:"Android deployment", 
body:" android deployment deploy android apps bitrise.io, testing, google play store, release. deploy android apps bitrise.io, testing, google play store, release. learn api, keystore files apk flavors. we recommend checking ship, deployment solution aims save lot headache publishing apps: deploying with ship . " });
this.add({id:643, 
title:"Deploying Android apps to Bitrise and Google Play", 
body:" deploying android apps bitrise google play you deploy android apps bitrise google play using dedicated steps correctly configuring project console. this guide describes how add android project bitrise.io deploy apk aab built project google play store . you need new service account created google play console so bitrise authenticate with deploy build. the invited user appropriate permission. to set project first time: register google play developer account . if google play developer account, deployed app store, skip setting up google play api access . go setting up google play deployment for the first time . " });
this.add({id:644, 
title:"Setting up Google Play API access", 
body:" setting google play api access grant google play api access project creating service account granting necessary user permissions account. turn google play developer api project: enable api . create service account google cloud platform: create service accounts . create new json key service account: create delete service account keys . instant download when click create end process, service account json key automatically downloaded. make sure save access download again! invite service account user users & permissions page google play console grant necessary permissions able access release apps play: use service account . check google play developer api guide need information process. you successfully prepared google play console project. a services credential account created authorized manage releases. " });
this.add({id:645, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:646, 
title:"Deploying an Android app to bitrise.io", 
body:" deploying android app bitrise.io in section, we'll how deploy android app bitrise.io . deploying bitrise.io means build artifacts generated available download finished. you use test app devices, example. to deploy app bitrise.io : workflow editor bitrise.yml make sure workflow contains android build step build app. optionally, build app with gradle runner step. this requires bit configuration allows extensive customization. add deploy bitrise.io step workflow. notifying users you use notify: user roles notify: emails inputs step set notifications deploy. click input names reveal information how configure them. optionally, set enable public page app? input step true so step enables public install page app. run build. open bitrise.yml file app. make sure workflow contains android-build step build app. workflows:\n example-workflow:\n steps:\n - android-build@1:\n optionally, build app with gradle-runner step. this requires bit configuration allows extensive customization. set module and\/or variant input tell step build. in example, we're building debug variant android project. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} add deploy-to-bitrise-io step workflow. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} notifying users you use notify_user_groups notify_email_list inputs step set notifications deploy: the notify_user_groups input allows send notifications based access roles granted users. for example, set input notify with admin developer role. set multiple roles separated comma: - notify_user_groups: admins, testers . the notify_email_list input accepts secrets, secret contain comma-separated lists email addresses. optionally, set enable public page app? input step true so step enables public install page app. run build. the deploy bitrise.io step deploy app. you share generated binary with team members using build’s url. a bitrise.yml deploying android app bitrise in example, we're building debug variant android app, deploy bitrise.io, as. " });
this.add({id:647, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:648, 
title:"Deploying apps to Huawei AppGallery", 
body:" deploying apps huawei appgallery you deploy android apps huawei appgallery verified bitrise step called deploy app gallery. the used any apk file build bitrise. you deploy android apps huawei appgallery verified bitrise step called deploy huawei app gallery . the step used deploy any apk file build bitrise. the step need: the app id app. the client id api client. the key generated api client. to successfully deploy app huawei appgallery, need workflow that: builds signs apk aab file. includes deploy huawei app gallery step deploy app. to configure deploying with deploy huawei app gallery step : manually upload first apk app huawei appgallery using website interface connect. create team-level api client appgallery connect . open workflow editor bitrise. go workflow want use deploying app. add deploy huawei app gallery step steps build sign apk. open config input group. fill required inputs. file path : if used step automatically exports bitrise_apk_path environment variable building apk, leave unchanged. the android build step step, example. file : the unique apk file. this used uploading appgallery connect. app id : the identified app information section appgallery connect. client id : the api client id generated appgallery connect. key : the key generated with api client appgallery connect. take look following bitrise.yml file see example configuration uses deploy huawei appgallery step deploy app. workflows:\n deploy:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone@4: {}\n cache-pull@2: install-missing-android-tools@2:\n inputs:\n gradlew_path: \"$project_location\/gradlew\"\n gradle-runner@1.9:\n gradle_file: \"$gradle_build_file_path\"\n gradle_task: assemblerelease\n \"$gradlew_path\"\n sign-apk@1.7: deploy-to-bitrise-io@1: cache-push@2: appgallery-deploy@0:\n huawei_client_id: 'xxx'\n huawei_client_secret: \"$client_secret\"\n huawei_app_id: 'yyy' run build! if goes well, see app huawei appgallery. " });
this.add({id:649, 
title:"Generate and deploy multiple flavor APKs in a single Workflow", 
body:" generate deploy multiple flavor apks single workflow you generate, code sign deploy multiple flavor (multi-flavor) apks\/aabs workflow using gradle runner step. you generate, code sign deploy multiple flavor (multi-flavor) apks\/aabs workflow using gradle runner step . flavor means enhancing app’s core code with features resulting different versions app (just mention common examples: free\/paid, demo\/full). check official android studio guide build types, flavors variants info! in tutorial, need settings android sign google play deploy steps - so eyes peeled! " });
this.add({id:650, 
title:"Generating multi-flavor APKs", 
body:" generating multi-flavor apks to generate apk files different flavors: open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. insert gradle runner step android testing steps. android build step build variant so workflow, advise replace with gradle runner step. click config section step. specify assemble gradle tasks adding build variants’ task names gradle task run step input field - task names build variants want workflow. each exactly variant listed build variant window android studio! make sure separate with space, need comma ! in image, see order steps deploy workflow gradle task run step input with build variants: assembledemo assemblefull (for apks) bundledemo bundlefull (for aabs) gradle runner generates $bitrise_apk_path_list \/ $bitrise_aab_path_list environment variable output contains apks\/aabs built all build variants defined above. we need later. " });
this.add({id:651, 
title:"Signing and deploying multi-flavor APKs", 
body:" signing deploying multi-flavor apks open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add android sign step after gradle runner step it’s missing workflow . set app file path input $bitrise_apk_path_list $bitrise_aab_path_list depending app format built previous gradle runner step. this make sure apks aabs code signed with keystore file uploaded code signing tab. the step export $bitrise_signed_apk_path_list $bitrise_signed_aab_path_list environment variable output contains path signed app files build variant. make sure set following input fields android sign step: keystore url keystore password keystore alias add google play deploy step after android sign step. set $bitrise_signed_apk_path $bitrise_signed_aab_path environment variable apk app bundle file path step input field so google play deploy step release build variants app store. " });
this.add({id:652, 
title:"Generating and deploying Android app bundles", 
body:" generating deploying android app bundles creating android app bundle with bitrise generating apk. you tweak step inputs compile (.aab) file code, bundle signed deployed google play store. creating android app bundle with bitrise generating apk. all tweaking step inputs compile android app bundle (.aab) file code, bundle signed deployed google play store. step versions supporting bundle creation the following steps indicated version newer - older versions not support bundle creation. android build 0.10.0 newer gradle runner 1.9.0 newer android sign 1.3.0 newer deploy google play 1.6.0 newer " });
this.add({id:653, 
title:"Generating an Android App Bundle file", 
body:" generating android app bundle file you create android app bundle with gradle runner step with android build step. " });
this.add({id:654, 
title:"Using the Gradle Runner Step", 
body:" using gradle runner step workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. insert gradle runner step android unit test android lint steps workflow . click config section gradle runner . in gradle task run input field, set, example, bundlerelease bundledebug create bundle project. apk aab workflow if wish generate android app bundle apk workflow, specify additional task gradle task run input field: set value bundlerelease assemblerelease generate release versions. open bitrise.yml file app. insert gradle-runner step android-unit-test android-lint steps workflow . my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: gradle-runner: in gradle_task input gradle-runner , set, example, bundlerelease bundledebug create bundle project. my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: gradle-runner:\n inputs:\n gradle_task: bundlerelease apk aab workflow if wish generate android app bundle apk workflow, specify additional task gradle_task input field: set value bundlerelease assemblerelease generate release versions. this way step generate android app bundle instead apk. " });
this.add({id:655, 
title:"Using the Android Build Step", 
body:" using android build step you generate android app bundle app with android build step well: workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add android build step android unit test android lint steps workflow. provide root directory android project project location input field. go build type select aab build type. apk aab workflow if wish generate apk android app bundle workflow, add android build steps configure build android app bundle apk. open bitrise.yml file app. add android-build step android-unit-test android-lint steps workflow. my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: android-build:\n provide root directory android project project_location input field. set value build-type input aab . my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: android-build:\n inputs:\n build-type: aab apk aab workflow if wish generate apk android app bundle workflow, add android-build steps configure build android app bundle apk. " });
this.add({id:656, 
title:"Signing an Android App bundle", 
body:" signing android app bundle signing android app bundle file works way signing apk: convenient method upload keystore files bitrise use android sign step: workflow editor bitrise.yml upload keystore file bitrise. open workflow editor, add android sign step after build step. make sure keystore password , key alias key password input fields filled out. default input values if uploaded keystore file filled required credentials, android sign step's keystore url , keystore password , keystore alias , private key password inputs populated automatically! make sure app file path input field displays output env var build step you've using. for example, android build exports $bitrise_apk_path $bitrise_aab_path env var points apk and\/or aab file step generated. by default, input vars. further configuration options check available configuration options android sign step workflow editor. you can: enable disable memory page alignment with page alignment input. use apksigner instead default jarsigner with enables apksigner input. enforce specific signature scheme with apk signature scheme input. upload keystore file bitrise. in app's bitrise.yml file, add sign-apk step after build step - example, android-build - workflow . sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@1:\n inputs:\n make sure keystore_url , keystore_password , keystore_alias inputs point correct location. sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@:\n inputs:\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n default input values if uploaded keystore file bitrise filled required credentials, set inputs all: default values, defined step's step.yml configuration file, point keystore file necessary credentials. make sure android_app input field displays output env var build step you've using. for example, android-build exports $bitrise_apk_path $bitrise_aab_path env var points apk and\/or aab file step generated. by default, input vars. the step look binary sign locations provided input. sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@1:\n inputs:\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n android_app: \"$bitrise_apk_path\\\\n$bitrise_aab_path\"\n further configuration options check available configuration options android-sign step step.yml file . you can: enable disable memory page alignment with page_align input. use apksigner instead default jarsigner with use_apk_signer input. enforce specific signature scheme with signer_scheme input. and done! if like read android code signing, check guide . " });
this.add({id:657, 
title:"Deploying your Android App Bundle to Google Play", 
body:" deploying android app bundle google play deploying aab file isn't significantly different deploying apk google play. if want check bundle prior app store distribution, add deploy bitrise.io step gradle runner \/ android build steps. it uploads bundle artifacts tab build’s page. " });
this.add({id:658, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:659, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:660, 
title:"Exporting a universal APK from an AAB", 
body:" exporting universal apk aab with bitrise's export universal apk step export universal app bundle, sign with keystore (or debug keystore), deploy test device releasing app google play store. you test android app device generated artifact app bundle ( .aab ). with export universal apk step export universal apk app bundle, sign with keystore (or debug keystore), deploy test device releasing app google play store. configuring step super simple: workflow editor bitrise.yml insert export universal apk step android build step workflow . make sure android app bundle path input's value output variable ( bitrise_aab_path ) previous build step. using different build step if don't use android build step build aab file, make sure input points output used. you use environment variable, direct local path url. make sure keystore url input points android keystore file. we recommend uploading file bitrise using default env var: $bitriseio_android_keystore_url . you can, however, use local path url input value here. provide credentials keystore alias keystore password inputs. if uploaded keystore file bitrise, default value inputs need changed. in bundletool version input, override default bundletool version need specific make sure use correct version . run workflow. in app's bitrise.yml file, insert bitrise-step-export-universal-apk step android-build step. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n make sure aab_path input's value output variable ( $bitrise_aab_path ) previous build step. using different build step if don't use android-build step build aab file, make sure input points output used. you use environment variable, direct local path url. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n make sure keystore_url input points android keystore file. we recommend uploading file bitrise using default env var: $bitriseio_android_keystore_url . you can, however, use local path url input value here. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n keystore_url: \"$bitriseio_android_keystore_url\"\n provide credentials keystore_alias keystore_password inputs. if uploaded keystore file bitrise, default value inputs need changed. otherwise store credentials secret use secrets input values. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n in bundletool_version input, override default bundletool version need specific make sure use correct version . my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n bundletool_version: 1.8.1\n run workflow. the export universal apk step exports apk $bitrise_apk_path environment variable steps pick up. if deploy bitrise.io step included workflow, ship add-on deploy apk you. " });
this.add({id:643, 
title:"Deploying Android apps to Bitrise and Google Play", 
body:" deploying android apps bitrise google play you deploy android apps bitrise google play using dedicated steps correctly configuring project console. this guide describes how add android project bitrise.io deploy apk aab built project google play store . you need new service account created google play console so bitrise authenticate with deploy build. the invited user appropriate permission. to set project first time: register google play developer account . if google play developer account, deployed app store, skip setting up google play api access . go setting up google play deployment for the first time . " });
this.add({id:644, 
title:"Setting up Google Play API access", 
body:" setting google play api access grant google play api access project creating service account granting necessary user permissions account. turn google play developer api project: enable api . create service account google cloud platform: create service accounts . create new json key service account: create delete service account keys . instant download when click create end process, service account json key automatically downloaded. make sure save access download again! invite service account user users & permissions page google play console grant necessary permissions able access release apps play: use service account . check google play developer api guide need information process. you successfully prepared google play console project. a services credential account created authorized manage releases. " });
this.add({id:645, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:646, 
title:"Deploying an Android app to bitrise.io", 
body:" deploying android app bitrise.io in section, we'll how deploy android app bitrise.io . deploying bitrise.io means build artifacts generated available download finished. you use test app devices, example. to deploy app bitrise.io : workflow editor bitrise.yml make sure workflow contains android build step build app. optionally, build app with gradle runner step. this requires bit configuration allows extensive customization. add deploy bitrise.io step workflow. notifying users you use notify: user roles notify: emails inputs step set notifications deploy. click input names reveal information how configure them. optionally, set enable public page app? input step true so step enables public install page app. run build. open bitrise.yml file app. make sure workflow contains android-build step build app. workflows:\n example-workflow:\n steps:\n - android-build@1:\n optionally, build app with gradle-runner step. this requires bit configuration allows extensive customization. set module and\/or variant input tell step build. in example, we're building debug variant android project. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} add deploy-to-bitrise-io step workflow. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} notifying users you use notify_user_groups notify_email_list inputs step set notifications deploy: the notify_user_groups input allows send notifications based access roles granted users. for example, set input notify with admin developer role. set multiple roles separated comma: - notify_user_groups: admins, testers . the notify_email_list input accepts secrets, secret contain comma-separated lists email addresses. optionally, set enable public page app? input step true so step enables public install page app. run build. the deploy bitrise.io step deploy app. you share generated binary with team members using build’s url. a bitrise.yml deploying android app bitrise in example, we're building debug variant android app, deploy bitrise.io, as. " });
this.add({id:647, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:644, 
title:"Setting up Google Play API access", 
body:" setting google play api access grant google play api access project creating service account granting necessary user permissions account. turn google play developer api project: enable api . create service account google cloud platform: create service accounts . create new json key service account: create delete service account keys . instant download when click create end process, service account json key automatically downloaded. make sure save access download again! invite service account user users & permissions page google play console grant necessary permissions able access release apps play: use service account . check google play developer api guide need information process. you successfully prepared google play console project. a services credential account created authorized manage releases. " });
this.add({id:645, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:646, 
title:"Deploying an Android app to bitrise.io", 
body:" deploying android app bitrise.io in section, we'll how deploy android app bitrise.io . deploying bitrise.io means build artifacts generated available download finished. you use test app devices, example. to deploy app bitrise.io : workflow editor bitrise.yml make sure workflow contains android build step build app. optionally, build app with gradle runner step. this requires bit configuration allows extensive customization. add deploy bitrise.io step workflow. notifying users you use notify: user roles notify: emails inputs step set notifications deploy. click input names reveal information how configure them. optionally, set enable public page app? input step true so step enables public install page app. run build. open bitrise.yml file app. make sure workflow contains android-build step build app. workflows:\n example-workflow:\n steps:\n - android-build@1:\n optionally, build app with gradle-runner step. this requires bit configuration allows extensive customization. set module and\/or variant input tell step build. in example, we're building debug variant android project. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} add deploy-to-bitrise-io step workflow. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n variant: debug\n deploy-to-bitrise-io: {} notifying users you use notify_user_groups notify_email_list inputs step set notifications deploy: the notify_user_groups input allows send notifications based access roles granted users. for example, set input notify with admin developer role. set multiple roles separated comma: - notify_user_groups: admins, testers . the notify_email_list input accepts secrets, secret contain comma-separated lists email addresses. optionally, set enable public page app? input step true so step enables public install page app. run build. the deploy bitrise.io step deploy app. you share generated binary with team members using build’s url. a bitrise.yml deploying android app bitrise in example, we're building debug variant android app, deploy bitrise.io, as. " });
this.add({id:647, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:648, 
title:"Deploying apps to Huawei AppGallery", 
body:" deploying apps huawei appgallery you deploy android apps huawei appgallery verified bitrise step called deploy app gallery. the used any apk file build bitrise. you deploy android apps huawei appgallery verified bitrise step called deploy huawei app gallery . the step used deploy any apk file build bitrise. the step need: the app id app. the client id api client. the key generated api client. to successfully deploy app huawei appgallery, need workflow that: builds signs apk aab file. includes deploy huawei app gallery step deploy app. to configure deploying with deploy huawei app gallery step : manually upload first apk app huawei appgallery using website interface connect. create team-level api client appgallery connect . open workflow editor bitrise. go workflow want use deploying app. add deploy huawei app gallery step steps build sign apk. open config input group. fill required inputs. file path : if used step automatically exports bitrise_apk_path environment variable building apk, leave unchanged. the android build step step, example. file : the unique apk file. this used uploading appgallery connect. app id : the identified app information section appgallery connect. client id : the api client id generated appgallery connect. key : the key generated with api client appgallery connect. take look following bitrise.yml file see example configuration uses deploy huawei appgallery step deploy app. workflows:\n deploy:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone@4: {}\n cache-pull@2: install-missing-android-tools@2:\n inputs:\n gradlew_path: \"$project_location\/gradlew\"\n gradle-runner@1.9:\n gradle_file: \"$gradle_build_file_path\"\n gradle_task: assemblerelease\n \"$gradlew_path\"\n sign-apk@1.7: deploy-to-bitrise-io@1: cache-push@2: appgallery-deploy@0:\n huawei_client_id: 'xxx'\n huawei_client_secret: \"$client_secret\"\n huawei_app_id: 'yyy' run build! if goes well, see app huawei appgallery. " });
this.add({id:649, 
title:"Generate and deploy multiple flavor APKs in a single Workflow", 
body:" generate deploy multiple flavor apks single workflow you generate, code sign deploy multiple flavor (multi-flavor) apks\/aabs workflow using gradle runner step. you generate, code sign deploy multiple flavor (multi-flavor) apks\/aabs workflow using gradle runner step . flavor means enhancing app’s core code with features resulting different versions app (just mention common examples: free\/paid, demo\/full). check official android studio guide build types, flavors variants info! in tutorial, need settings android sign google play deploy steps - so eyes peeled! " });
this.add({id:650, 
title:"Generating multi-flavor APKs", 
body:" generating multi-flavor apks to generate apk files different flavors: open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. insert gradle runner step android testing steps. android build step build variant so workflow, advise replace with gradle runner step. click config section step. specify assemble gradle tasks adding build variants’ task names gradle task run step input field - task names build variants want workflow. each exactly variant listed build variant window android studio! make sure separate with space, need comma ! in image, see order steps deploy workflow gradle task run step input with build variants: assembledemo assemblefull (for apks) bundledemo bundlefull (for aabs) gradle runner generates $bitrise_apk_path_list \/ $bitrise_aab_path_list environment variable output contains apks\/aabs built all build variants defined above. we need later. " });
this.add({id:651, 
title:"Signing and deploying multi-flavor APKs", 
body:" signing deploying multi-flavor apks open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add android sign step after gradle runner step it’s missing workflow . set app file path input $bitrise_apk_path_list $bitrise_aab_path_list depending app format built previous gradle runner step. this make sure apks aabs code signed with keystore file uploaded code signing tab. the step export $bitrise_signed_apk_path_list $bitrise_signed_aab_path_list environment variable output contains path signed app files build variant. make sure set following input fields android sign step: keystore url keystore password keystore alias add google play deploy step after android sign step. set $bitrise_signed_apk_path $bitrise_signed_aab_path environment variable apk app bundle file path step input field so google play deploy step release build variants app store. " });
this.add({id:650, 
title:"Generating multi-flavor APKs", 
body:" generating multi-flavor apks to generate apk files different flavors: open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. insert gradle runner step android testing steps. android build step build variant so workflow, advise replace with gradle runner step. click config section step. specify assemble gradle tasks adding build variants’ task names gradle task run step input field - task names build variants want workflow. each exactly variant listed build variant window android studio! make sure separate with space, need comma ! in image, see order steps deploy workflow gradle task run step input with build variants: assembledemo assemblefull (for apks) bundledemo bundlefull (for aabs) gradle runner generates $bitrise_apk_path_list \/ $bitrise_aab_path_list environment variable output contains apks\/aabs built all build variants defined above. we need later. " });
this.add({id:651, 
title:"Signing and deploying multi-flavor APKs", 
body:" signing deploying multi-flavor apks open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add android sign step after gradle runner step it’s missing workflow . set app file path input $bitrise_apk_path_list $bitrise_aab_path_list depending app format built previous gradle runner step. this make sure apks aabs code signed with keystore file uploaded code signing tab. the step export $bitrise_signed_apk_path_list $bitrise_signed_aab_path_list environment variable output contains path signed app files build variant. make sure set following input fields android sign step: keystore url keystore password keystore alias add google play deploy step after android sign step. set $bitrise_signed_apk_path $bitrise_signed_aab_path environment variable apk app bundle file path step input field so google play deploy step release build variants app store. " });
this.add({id:652, 
title:"Generating and deploying Android app bundles", 
body:" generating deploying android app bundles creating android app bundle with bitrise generating apk. you tweak step inputs compile (.aab) file code, bundle signed deployed google play store. creating android app bundle with bitrise generating apk. all tweaking step inputs compile android app bundle (.aab) file code, bundle signed deployed google play store. step versions supporting bundle creation the following steps indicated version newer - older versions not support bundle creation. android build 0.10.0 newer gradle runner 1.9.0 newer android sign 1.3.0 newer deploy google play 1.6.0 newer " });
this.add({id:653, 
title:"Generating an Android App Bundle file", 
body:" generating android app bundle file you create android app bundle with gradle runner step with android build step. " });
this.add({id:654, 
title:"Using the Gradle Runner Step", 
body:" using gradle runner step workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. insert gradle runner step android unit test android lint steps workflow . click config section gradle runner . in gradle task run input field, set, example, bundlerelease bundledebug create bundle project. apk aab workflow if wish generate android app bundle apk workflow, specify additional task gradle task run input field: set value bundlerelease assemblerelease generate release versions. open bitrise.yml file app. insert gradle-runner step android-unit-test android-lint steps workflow . my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: gradle-runner: in gradle_task input gradle-runner , set, example, bundlerelease bundledebug create bundle project. my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: gradle-runner:\n inputs:\n gradle_task: bundlerelease apk aab workflow if wish generate android app bundle apk workflow, specify additional task gradle_task input field: set value bundlerelease assemblerelease generate release versions. this way step generate android app bundle instead apk. " });
this.add({id:655, 
title:"Using the Android Build Step", 
body:" using android build step you generate android app bundle app with android build step well: workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add android build step android unit test android lint steps workflow. provide root directory android project project location input field. go build type select aab build type. apk aab workflow if wish generate apk android app bundle workflow, add android build steps configure build android app bundle apk. open bitrise.yml file app. add android-build step android-unit-test android-lint steps workflow. my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: android-build:\n provide root directory android project project_location input field. set value build-type input aab . my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: android-build:\n inputs:\n build-type: aab apk aab workflow if wish generate apk android app bundle workflow, add android-build steps configure build android app bundle apk. " });
this.add({id:656, 
title:"Signing an Android App bundle", 
body:" signing android app bundle signing android app bundle file works way signing apk: convenient method upload keystore files bitrise use android sign step: workflow editor bitrise.yml upload keystore file bitrise. open workflow editor, add android sign step after build step. make sure keystore password , key alias key password input fields filled out. default input values if uploaded keystore file filled required credentials, android sign step's keystore url , keystore password , keystore alias , private key password inputs populated automatically! make sure app file path input field displays output env var build step you've using. for example, android build exports $bitrise_apk_path $bitrise_aab_path env var points apk and\/or aab file step generated. by default, input vars. further configuration options check available configuration options android sign step workflow editor. you can: enable disable memory page alignment with page alignment input. use apksigner instead default jarsigner with enables apksigner input. enforce specific signature scheme with apk signature scheme input. upload keystore file bitrise. in app's bitrise.yml file, add sign-apk step after build step - example, android-build - workflow . sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@1:\n inputs:\n make sure keystore_url , keystore_password , keystore_alias inputs point correct location. sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@:\n inputs:\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n default input values if uploaded keystore file bitrise filled required credentials, set inputs all: default values, defined step's step.yml configuration file, point keystore file necessary credentials. make sure android_app input field displays output env var build step you've using. for example, android-build exports $bitrise_apk_path $bitrise_aab_path env var points apk and\/or aab file step generated. by default, input vars. the step look binary sign locations provided input. sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@1:\n inputs:\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n android_app: \"$bitrise_apk_path\\\\n$bitrise_aab_path\"\n further configuration options check available configuration options android-sign step step.yml file . you can: enable disable memory page alignment with page_align input. use apksigner instead default jarsigner with use_apk_signer input. enforce specific signature scheme with signer_scheme input. and done! if like read android code signing, check guide . " });
this.add({id:657, 
title:"Deploying your Android App Bundle to Google Play", 
body:" deploying android app bundle google play deploying aab file isn't significantly different deploying apk google play. if want check bundle prior app store distribution, add deploy bitrise.io step gradle runner \/ android build steps. it uploads bundle artifacts tab build’s page. " });
this.add({id:658, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:659, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:653, 
title:"Generating an Android App Bundle file", 
body:" generating android app bundle file you create android app bundle with gradle runner step with android build step. " });
this.add({id:654, 
title:"Using the Gradle Runner Step", 
body:" using gradle runner step workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. insert gradle runner step android unit test android lint steps workflow . click config section gradle runner . in gradle task run input field, set, example, bundlerelease bundledebug create bundle project. apk aab workflow if wish generate android app bundle apk workflow, specify additional task gradle task run input field: set value bundlerelease assemblerelease generate release versions. open bitrise.yml file app. insert gradle-runner step android-unit-test android-lint steps workflow . my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: gradle-runner: in gradle_task input gradle-runner , set, example, bundlerelease bundledebug create bundle project. my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: gradle-runner:\n inputs:\n gradle_task: bundlerelease apk aab workflow if wish generate android app bundle apk workflow, specify additional task gradle_task input field: set value bundlerelease assemblerelease generate release versions. this way step generate android app bundle instead apk. " });
this.add({id:655, 
title:"Using the Android Build Step", 
body:" using android build step you generate android app bundle app with android build step well: workflow editor bitrise.yml open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add android build step android unit test android lint steps workflow. provide root directory android project project location input field. go build type select aab build type. apk aab workflow if wish generate apk android app bundle workflow, add android build steps configure build android app bundle apk. open bitrise.yml file app. add android-build step android-unit-test android-lint steps workflow. my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: android-build:\n provide root directory android project project_location input field. set value build-type input aab . my-workflow:\n steps:\n - activate-ssh-key:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone: {}\n install-missing-android-tools: android-lint: android-unit-test: android-build:\n inputs:\n build-type: aab apk aab workflow if wish generate apk android app bundle workflow, add android-build steps configure build android app bundle apk. " });
this.add({id:656, 
title:"Signing an Android App bundle", 
body:" signing android app bundle signing android app bundle file works way signing apk: convenient method upload keystore files bitrise use android sign step: workflow editor bitrise.yml upload keystore file bitrise. open workflow editor, add android sign step after build step. make sure keystore password , key alias key password input fields filled out. default input values if uploaded keystore file filled required credentials, android sign step's keystore url , keystore password , keystore alias , private key password inputs populated automatically! make sure app file path input field displays output env var build step you've using. for example, android build exports $bitrise_apk_path $bitrise_aab_path env var points apk and\/or aab file step generated. by default, input vars. further configuration options check available configuration options android sign step workflow editor. you can: enable disable memory page alignment with page alignment input. use apksigner instead default jarsigner with enables apksigner input. enforce specific signature scheme with apk signature scheme input. upload keystore file bitrise. in app's bitrise.yml file, add sign-apk step after build step - example, android-build - workflow . sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@1:\n inputs:\n make sure keystore_url , keystore_password , keystore_alias inputs point correct location. sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@:\n inputs:\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n default input values if uploaded keystore file bitrise filled required credentials, set inputs all: default values, defined step's step.yml configuration file, point keystore file necessary credentials. make sure android_app input field displays output env var build step you've using. for example, android-build exports $bitrise_apk_path $bitrise_aab_path env var points apk and\/or aab file step generated. by default, input vars. the step look binary sign locations provided input. sign-android-workflow:\n steps:\n - android-build: {}\n sign-apk@1:\n inputs:\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n android_app: \"$bitrise_apk_path\\\\n$bitrise_aab_path\"\n further configuration options check available configuration options android-sign step step.yml file . you can: enable disable memory page alignment with page_align input. use apksigner instead default jarsigner with use_apk_signer input. enforce specific signature scheme with signer_scheme input. and done! if like read android code signing, check guide . " });
this.add({id:657, 
title:"Deploying your Android App Bundle to Google Play", 
body:" deploying android app bundle google play deploying aab file isn't significantly different deploying apk google play. if want check bundle prior app store distribution, add deploy bitrise.io step gradle runner \/ android build steps. it uploads bundle artifacts tab build’s page. " });
this.add({id:658, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:659, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:658, 
title:"Setting up Google Play deployment for the first time", 
body:" setting google play deployment first time deploying google play publishes app google's online store. when first time, requires bit work than simply deploying bitrise.io . once necessary configurations place, simple. when configuring google play deployment first time, need link developer account api project, set access, upload service json key bitrise. upload first aab apk manually google play using google play console . link google play developer console api project. set api access clients using service account : please note create service account google developer console, choose json key type . grant necessary rights service account with google play console . go settings , users & permissions , invite new user . due way google play publisher api works, grant following permissions service account: access level: view app information. release management: manage production releases, manage testing track releases. store presence: edit store listing, pricing & distribution. as optional step, add translations store listing: translate & localize app . connect google service account bitrise . " });
this.add({id:659, 
title:"Deploying to Google Play", 
body:" deploying google play deploying google play requires signed apk aab file google play deploy step . workflow editor bitrise.yml if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app settings page, select code signing . on android tab, uploaded service account json key copy secret env var name. for example, bitriseio_service_account_json_key_url . open workflow add google play deploy step it. in service account json key file path input, paste environment variable copied. direct path service account json key file if don't want upload service account json key bitrise, add file path right step’s input field local remote too: for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. in track input, add track want deploy apk (for example, alpha\/beta\/rollout\/production any custom set). if you're trying deploy app first time, make sure google play configuration set correctly uploaded service account json key bitrise . uploading service account json key file we recommend uploading service account json key bitrise mandatory: store provide direct link it. open app's bitrise.yml file add google-play-deploy step it. deploy-workflow:\n steps: \n - google-play-deploy: inputs: in service_account_json_key_path input, need provide path service account json key file. if uploaded file bitrise, env var storing download url generic file storage workflow editor. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\" if didn't upload service account json key bitrise, set direct path input. the file point local remote location. for remote json key file provide any download location value, example, https:\/\/url\/to\/key.json . for local json key file provide path url value, example, file:\/\/path\/to\/key.json . in package input, add package app. deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp in track input, add track want deploy app binary (for example, alpha\/beta\/rollout\/production any custom set). deploy-workflow:\n steps: \n - google-play-deploy: inputs: service_account_json_key_path: \"$bitriseio_service_account_json_key_url\"\n package_name: myapp\n track: alpha that’s all! start schedule build share url with external testers distribute app store choice! " });
this.add({id:660, 
title:"Exporting a universal APK from an AAB", 
body:" exporting universal apk aab with bitrise's export universal apk step export universal app bundle, sign with keystore (or debug keystore), deploy test device releasing app google play store. you test android app device generated artifact app bundle ( .aab ). with export universal apk step export universal apk app bundle, sign with keystore (or debug keystore), deploy test device releasing app google play store. configuring step super simple: workflow editor bitrise.yml insert export universal apk step android build step workflow . make sure android app bundle path input's value output variable ( bitrise_aab_path ) previous build step. using different build step if don't use android build step build aab file, make sure input points output used. you use environment variable, direct local path url. make sure keystore url input points android keystore file. we recommend uploading file bitrise using default env var: $bitriseio_android_keystore_url . you can, however, use local path url input value here. provide credentials keystore alias keystore password inputs. if uploaded keystore file bitrise, default value inputs need changed. in bundletool version input, override default bundletool version need specific make sure use correct version . run workflow. in app's bitrise.yml file, insert bitrise-step-export-universal-apk step android-build step. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n make sure aab_path input's value output variable ( $bitrise_aab_path ) previous build step. using different build step if don't use android-build step build aab file, make sure input points output used. you use environment variable, direct local path url. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n make sure keystore_url input points android keystore file. we recommend uploading file bitrise using default env var: $bitriseio_android_keystore_url . you can, however, use local path url input value here. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n keystore_url: \"$bitriseio_android_keystore_url\"\n provide credentials keystore_alias keystore_password inputs. if uploaded keystore file bitrise, default value inputs need changed. otherwise store credentials secret use secrets input values. my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n in bundletool_version input, override default bundletool version need specific make sure use correct version . my-workflow:\n steps:\n - android-build: {}\n bitrise-step-export-universal-apk:\n inputs:\n aab_path: \"$bitrise_aab_path\"\n keystore_url: \"$bitriseio_android_keystore_url\"\n keystore_password: \"$bitriseio_android_keystore_password\"\n keystore_alias: \"$bitriseio_android_keystore_alias\"\n bundletool_version: 1.8.1\n run workflow. the export universal apk step exports apk $bitrise_apk_path environment variable steps pick up. if deploy bitrise.io step included workflow, ship add-on deploy apk you. " });
this.add({id:661, 
title:"iOS deployment", 
body:" ios deployment to use bitrise deploy ios app any platform, need code signing files you'll archive xcode project export signed ipa file. once built app ran unit tests ui it, it’s time deploy it. to deploy ios app any platform, need: code signing files. to archive xcode project export signed ipa file. our guides delve specifics basic requirements how use steps deploy app exact way want to! we recommend checking ship, deployment solution aims save lot headache publishing apps: deploying with ship" });
this.add({id:662, 
title:"Deploying an iOS app to Bitrise.io", 
body:" deploying ios app bitrise.io deploy app bitrise able download ipa file install devices specified app’s development type provisioning profile. this way, internal testers easily test app. deploy app bitrise able download ipa file install devices specified app’s development type provisioning profile. this way, internal testers easily test app. clear cache when trying install app public page, clear cache: click link appearing if synced settings old device, need clear cache register new device line. the link redirects profile settings page follow procedure described guide. developer certificate development profile to deploy ios app bitrise.io , need developer type certificate development provisioning profile. even want deploy app store, required: used create .xcodearchive file provided code process exporting ipa file. generate ipa file machine once. upload necessary code signing files bitrise. if want internal testers test app, register test devices . make sure xcode archive export ios step workflow . set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step development . you use export methods, too, deploy bitrise want install app specified devices internal testers, development sufficient. make sure deploy bitrise.io step workflow. by default, value enable public page app? input set true . this way, build runs, public install page available with long random url shared others registered bitrise. sent users email. the notify: user roles notify: emails inputs determine users email. start build. when build finished, app’s builds page click latest build. click artifacts tab ipa file. you public install url here. click expand-arrow icon ipa file reveal details toggle page. make sure that’s toggled so you’re able send link non-bitrise users. to install app public page, use native safari browser ios device. you click installation link you’re browsing third-party app. for information, check installing an .ipa file on test devices from the artifacts tab and that’s it! the file installed devices included app’s provisioning profile. remember: installation link accessed ios device’s safari browser! " });
this.add({id:663, 
title:"Deploying an iOS app for external testing", 
body:" deploying ios app external testing before deploying app app store, want release external testers test devices outside development environment. if use testflight, exporting ipa file with app-store export method. before deploying app app store, want release external testers test devices outside development environment. if use testflight, exporting ipa file with ad-hoc export method. using testflight if wish invite external testers using testflight, cannot use ad-hoc export method. you need ipa with app-store export method. generate ipa file machine once. upload necessary code signing files bitrise. for ad-hoc export method, need distribution type certificate ad hoc provisioning profile. only upload profile use manual provisioning: ios code signing with manual provisioning . make sure xcode archive & export ios step workflow . set distribution method input step ad-hoc . set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . make sure deploy bitrise.io step workflow. start build. when build finished, app’s builds page click latest build. click artifacts tab ipa file distribute. " });
this.add({id:664, 
title:"Deploying an iOS app to App Store Connect", 
body:" deploying ios app app store connect you deploy bitrise app app store connect invite testers testflight release store. you deploy app app store connect to: invite testers testflight. release app app store. on bitrise, simply just upload binary app store connect submit review. " });
this.add({id:665, 
title:"Deploy to App Store Connect Steps", 
body:" deploy app store connect steps to deploy app app store connect, steps: deploy app store connect deploy app store connect - application loader deploy app store connect - application loader simple: simply pushes .ipa .pkg binary file app store connect. with step , submit app review app store, example. with deploy app store connect step, can: submit app app store review. you upload apps different platforms (ios, os x, appletvos). tell bitrise want upload screenshots app’s metadata with binary. " });
this.add({id:666, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:667, 
title:"Deploying an iOS app for simulators", 
body:" deploying ios app simulators you build deploy ios app simulator, browser, example, use testing. you build deploy ios application simulator, browser, example. on bitrise, dedicated step build simulator: xcode build simulator step runs xcodebuild command with ios simulator destination generates .app file. the .app file run any simulator. on bitrise, step upload app appetize.io: appetize.io deploy step. with step, deploy app so run browser. to build app simulator, need code signing files! " });
this.add({id:668, 
title:"Building an iOS app for a simulator", 
body:" building ios app simulator you build ios app tvos simulator platform. to this, you'll need xcode build simulator step. the step creates .app file install any macos device send to, example, testers. this requires code signing all, so easy way create distributable version ios app. the step creates .xctestrun file use run tests. both .app file .xctestrun file accessed subsequent steps referring output variable, downloaded build artifact . to build app simulator: workflow editor bitrise.yml make sure install necessary dependencies workflow. we dedicated steps different dependency managers, including: carthage cocoapods homebrew add xcode build simulator step workflow step(s) installing dependencies. make sure project path input points .xcodeproj .xcworkspace file. the input sets -project -workspace option xcodebuild command. in cases, app automatically configured project scanner process adding app , default value does need changed. in scheme input, set xcode scheme want use build app. the input sets -scheme option xcodebuild command. the default value environment variable created adding app performing first-time configuration. if need use different scheme, type here. build configuration by default, step use build configuration specified scheme. however, override different configuration: add desired configuration input. this input optional need don't want use build configuration specified selected scheme. you create new build configurations xcode project any time: adding build configuration file project . configure simulator run destinations: device model : set device want test app on. exactly appears xcode's device selection interface . for example, iphone 14 pro . os version : set required os version appears xcode's device selection interface. for example, ios 16.2 . platform : select ios tvos . optionally, set code signing allowed input yes . this allows code signing files installed build. in cases, don't need code signing app built simulator. it required certain test cases third-party dependencies. to set signing, see ios code signing . to access app build artifact, add deploy bitrise.io step end workflow. by default, don't modify step's configuration. make sure install necessary dependencies workflow. we dedicated steps different dependency managers, including: carthage cocoapods homebrew add xcode-build-for-simulator step workflow step(s) installing dependencies. workflows: \n primary:\n steps:\n - cocoapods-install\n xcode-build-for-simulator:\n inputs: make sure project_path input points .xcodeproj .xcworkspace file. the input sets -project -workspace option xcodebuild command. in cases, app automatically configured project scanner process adding app , default value does need changed. - xcode-build-for-simulator:\n inputs:\n project_path: $bitrise_project_path\n in scheme input, set xcode scheme want use build app. the input sets -scheme option xcodebuild command. the default value environment variable created adding app performing first-time configuration. if need use different scheme, make sure type scheme correctly. - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n project_path: $bitrise_project_path\n build configuration by default, step use build configuration specified scheme. however, override different configuration: add desired configuration input. this input optional need don't want use build configuration specified selected scheme. you create new build configurations xcode project any time: adding build configuration file project . configure simulator run destinations: simulator_device : set device want test app on. exactly appears xcode's device selection interface . for example, iphone 14 pro . simulator_os_version : set required os version appears xcode's device selection interface. for example, ios 16.2 . simulator_platform : select ios tvos . - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n project_path: $bitrise_project_path\n optionally, set code_signing_allowed input yes . this allows code signing files installed build. in cases, don't need code signing app built simulator. it required certain test cases third-party dependencies. to set signing, see ios code signing . - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n code_signing_allowed: 'yes'\n project_path: $bitrise_project_path\n to access app build artifact, add deploy-to-bitrise-io step end workflow. by default, don't modify step's configuration. primary:\n steps:\n - generate-cordova-build-configuration@0: {}\n xcode-build-for-test@2: xcode-test@4: xcode-build-for-simulator@0.12:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n configuration: debug\n code_signing_allowed: 'no'\n project_path: $bitrise_project_path\n deploy-to-bitrise-io\n " });
this.add({id:669, 
title:"Deploying the app to Appetize.io", 
body:" deploying app appetize.io an .app file built with xcode build simulator step works with just any simulator. but want easily quickly integrate simulator allows run app browser, recommend using appetize.io deploy step. it uploads app appetize.io provides public url use browser. request appetize.io api token. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add configure xcode build simulator step workflow. add appetize.io deploy step workflow. add appetize.io api token appetize.io token input. enter path .app file application path input. the easiest solution use bitrise_app_dir_path_list environment variable output xcode build simulator step. optionally, enable verbose logging efficient debugging. the appetize.io deploy step produce output: appetize_app_url environment variable. public url access app. enjoy showing off! " });
this.add({id:662, 
title:"Deploying an iOS app to Bitrise.io", 
body:" deploying ios app bitrise.io deploy app bitrise able download ipa file install devices specified app’s development type provisioning profile. this way, internal testers easily test app. deploy app bitrise able download ipa file install devices specified app’s development type provisioning profile. this way, internal testers easily test app. clear cache when trying install app public page, clear cache: click link appearing if synced settings old device, need clear cache register new device line. the link redirects profile settings page follow procedure described guide. developer certificate development profile to deploy ios app bitrise.io , need developer type certificate development provisioning profile. even want deploy app store, required: used create .xcodearchive file provided code process exporting ipa file. generate ipa file machine once. upload necessary code signing files bitrise. if want internal testers test app, register test devices . make sure xcode archive export ios step workflow . set automatic code signing input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step development . you use export methods, too, deploy bitrise want install app specified devices internal testers, development sufficient. make sure deploy bitrise.io step workflow. by default, value enable public page app? input set true . this way, build runs, public install page available with long random url shared others registered bitrise. sent users email. the notify: user roles notify: emails inputs determine users email. start build. when build finished, app’s builds page click latest build. click artifacts tab ipa file. you public install url here. click expand-arrow icon ipa file reveal details toggle page. make sure that’s toggled so you’re able send link non-bitrise users. to install app public page, use native safari browser ios device. you click installation link you’re browsing third-party app. for information, check installing an .ipa file on test devices from the artifacts tab and that’s it! the file installed devices included app’s provisioning profile. remember: installation link accessed ios device’s safari browser! " });
this.add({id:663, 
title:"Deploying an iOS app for external testing", 
body:" deploying ios app external testing before deploying app app store, want release external testers test devices outside development environment. if use testflight, exporting ipa file with app-store export method. before deploying app app store, want release external testers test devices outside development environment. if use testflight, exporting ipa file with ad-hoc export method. using testflight if wish invite external testers using testflight, cannot use ad-hoc export method. you need ipa with app-store export method. generate ipa file machine once. upload necessary code signing files bitrise. for ad-hoc export method, need distribution type certificate ad hoc provisioning profile. only upload profile use manual provisioning: ios code signing with manual provisioning . make sure xcode archive & export ios step workflow . set distribution method input step ad-hoc . set automatic code signing method input apple service connection want use code signing. the available options are: don’t automatic code signing. api-key use api key authorization . apple-id use apple id authorization . make sure deploy bitrise.io step workflow. start build. when build finished, app’s builds page click latest build. click artifacts tab ipa file distribute. " });
this.add({id:664, 
title:"Deploying an iOS app to App Store Connect", 
body:" deploying ios app app store connect you deploy bitrise app app store connect invite testers testflight release store. you deploy app app store connect to: invite testers testflight. release app app store. on bitrise, simply just upload binary app store connect submit review. " });
this.add({id:665, 
title:"Deploy to App Store Connect Steps", 
body:" deploy app store connect steps to deploy app app store connect, steps: deploy app store connect deploy app store connect - application loader deploy app store connect - application loader simple: simply pushes .ipa .pkg binary file app store connect. with step , submit app review app store, example. with deploy app store connect step, can: submit app app store review. you upload apps different platforms (ios, os x, appletvos). tell bitrise want upload screenshots app’s metadata with binary. " });
this.add({id:666, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:665, 
title:"Deploy to App Store Connect Steps", 
body:" deploy app store connect steps to deploy app app store connect, steps: deploy app store connect deploy app store connect - application loader deploy app store connect - application loader simple: simply pushes .ipa .pkg binary file app store connect. with step , submit app review app store, example. with deploy app store connect step, can: submit app app store review. you upload apps different platforms (ios, os x, appletvos). tell bitrise want upload screenshots app’s metadata with binary. " });
this.add({id:666, 
title:"Deploying the app to App Store Connect", 
body:" deploying app app store connect keep mind time want push app app store connect, unique build version number: increment deploying. make sure working connection apple developer account . generate ipa file machine once. upload necessary code signing files bitrise. to deploy app app store connect, need distribution type certificate provisioning profile. make sure xcode archive & export ios step workflow. set automatic code signing input apple service connection want use code signing. the available options are: don’t use automatic code signing, exclusively step inputs apple service authentication. api-key use api key authorization . apple-id use apple id authorization . set distribution method input step app-store . the step store path exported .ipa file $bitrise_ipa_path environment variable. add deploy app store connect step workflow. fill required inputs. either app’s apple id bundle required input. one provided. if set submit review true , step wait submission processed app store connect submit given version app review. the default value skip app version update input no . change incremented app version number way. if use app store connect account linked multiple teams, provide team id name! start build. if goes well, app submitted app store distribute testflight store! " });
this.add({id:667, 
title:"Deploying an iOS app for simulators", 
body:" deploying ios app simulators you build deploy ios app simulator, browser, example, use testing. you build deploy ios application simulator, browser, example. on bitrise, dedicated step build simulator: xcode build simulator step runs xcodebuild command with ios simulator destination generates .app file. the .app file run any simulator. on bitrise, step upload app appetize.io: appetize.io deploy step. with step, deploy app so run browser. to build app simulator, need code signing files! " });
this.add({id:668, 
title:"Building an iOS app for a simulator", 
body:" building ios app simulator you build ios app tvos simulator platform. to this, you'll need xcode build simulator step. the step creates .app file install any macos device send to, example, testers. this requires code signing all, so easy way create distributable version ios app. the step creates .xctestrun file use run tests. both .app file .xctestrun file accessed subsequent steps referring output variable, downloaded build artifact . to build app simulator: workflow editor bitrise.yml make sure install necessary dependencies workflow. we dedicated steps different dependency managers, including: carthage cocoapods homebrew add xcode build simulator step workflow step(s) installing dependencies. make sure project path input points .xcodeproj .xcworkspace file. the input sets -project -workspace option xcodebuild command. in cases, app automatically configured project scanner process adding app , default value does need changed. in scheme input, set xcode scheme want use build app. the input sets -scheme option xcodebuild command. the default value environment variable created adding app performing first-time configuration. if need use different scheme, type here. build configuration by default, step use build configuration specified scheme. however, override different configuration: add desired configuration input. this input optional need don't want use build configuration specified selected scheme. you create new build configurations xcode project any time: adding build configuration file project . configure simulator run destinations: device model : set device want test app on. exactly appears xcode's device selection interface . for example, iphone 14 pro . os version : set required os version appears xcode's device selection interface. for example, ios 16.2 . platform : select ios tvos . optionally, set code signing allowed input yes . this allows code signing files installed build. in cases, don't need code signing app built simulator. it required certain test cases third-party dependencies. to set signing, see ios code signing . to access app build artifact, add deploy bitrise.io step end workflow. by default, don't modify step's configuration. make sure install necessary dependencies workflow. we dedicated steps different dependency managers, including: carthage cocoapods homebrew add xcode-build-for-simulator step workflow step(s) installing dependencies. workflows: \n primary:\n steps:\n - cocoapods-install\n xcode-build-for-simulator:\n inputs: make sure project_path input points .xcodeproj .xcworkspace file. the input sets -project -workspace option xcodebuild command. in cases, app automatically configured project scanner process adding app , default value does need changed. - xcode-build-for-simulator:\n inputs:\n project_path: $bitrise_project_path\n in scheme input, set xcode scheme want use build app. the input sets -scheme option xcodebuild command. the default value environment variable created adding app performing first-time configuration. if need use different scheme, make sure type scheme correctly. - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n project_path: $bitrise_project_path\n build configuration by default, step use build configuration specified scheme. however, override different configuration: add desired configuration input. this input optional need don't want use build configuration specified selected scheme. you create new build configurations xcode project any time: adding build configuration file project . configure simulator run destinations: simulator_device : set device want test app on. exactly appears xcode's device selection interface . for example, iphone 14 pro . simulator_os_version : set required os version appears xcode's device selection interface. for example, ios 16.2 . simulator_platform : select ios tvos . - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n project_path: $bitrise_project_path\n optionally, set code_signing_allowed input yes . this allows code signing files installed build. in cases, don't need code signing app built simulator. it required certain test cases third-party dependencies. to set signing, see ios code signing . - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n code_signing_allowed: 'yes'\n project_path: $bitrise_project_path\n to access app build artifact, add deploy-to-bitrise-io step end workflow. by default, don't modify step's configuration. primary:\n steps:\n - generate-cordova-build-configuration@0: {}\n xcode-build-for-test@2: xcode-test@4: xcode-build-for-simulator@0.12:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n configuration: debug\n code_signing_allowed: 'no'\n project_path: $bitrise_project_path\n deploy-to-bitrise-io\n " });
this.add({id:669, 
title:"Deploying the app to Appetize.io", 
body:" deploying app appetize.io an .app file built with xcode build simulator step works with just any simulator. but want easily quickly integrate simulator allows run app browser, recommend using appetize.io deploy step. it uploads app appetize.io provides public url use browser. request appetize.io api token. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add configure xcode build simulator step workflow. add appetize.io deploy step workflow. add appetize.io api token appetize.io token input. enter path .app file application path input. the easiest solution use bitrise_app_dir_path_list environment variable output xcode build simulator step. optionally, enable verbose logging efficient debugging. the appetize.io deploy step produce output: appetize_app_url environment variable. public url access app. enjoy showing off! " });
this.add({id:668, 
title:"Building an iOS app for a simulator", 
body:" building ios app simulator you build ios app tvos simulator platform. to this, you'll need xcode build simulator step. the step creates .app file install any macos device send to, example, testers. this requires code signing all, so easy way create distributable version ios app. the step creates .xctestrun file use run tests. both .app file .xctestrun file accessed subsequent steps referring output variable, downloaded build artifact . to build app simulator: workflow editor bitrise.yml make sure install necessary dependencies workflow. we dedicated steps different dependency managers, including: carthage cocoapods homebrew add xcode build simulator step workflow step(s) installing dependencies. make sure project path input points .xcodeproj .xcworkspace file. the input sets -project -workspace option xcodebuild command. in cases, app automatically configured project scanner process adding app , default value does need changed. in scheme input, set xcode scheme want use build app. the input sets -scheme option xcodebuild command. the default value environment variable created adding app performing first-time configuration. if need use different scheme, type here. build configuration by default, step use build configuration specified scheme. however, override different configuration: add desired configuration input. this input optional need don't want use build configuration specified selected scheme. you create new build configurations xcode project any time: adding build configuration file project . configure simulator run destinations: device model : set device want test app on. exactly appears xcode's device selection interface . for example, iphone 14 pro . os version : set required os version appears xcode's device selection interface. for example, ios 16.2 . platform : select ios tvos . optionally, set code signing allowed input yes . this allows code signing files installed build. in cases, don't need code signing app built simulator. it required certain test cases third-party dependencies. to set signing, see ios code signing . to access app build artifact, add deploy bitrise.io step end workflow. by default, don't modify step's configuration. make sure install necessary dependencies workflow. we dedicated steps different dependency managers, including: carthage cocoapods homebrew add xcode-build-for-simulator step workflow step(s) installing dependencies. workflows: \n primary:\n steps:\n - cocoapods-install\n xcode-build-for-simulator:\n inputs: make sure project_path input points .xcodeproj .xcworkspace file. the input sets -project -workspace option xcodebuild command. in cases, app automatically configured project scanner process adding app , default value does need changed. - xcode-build-for-simulator:\n inputs:\n project_path: $bitrise_project_path\n in scheme input, set xcode scheme want use build app. the input sets -scheme option xcodebuild command. the default value environment variable created adding app performing first-time configuration. if need use different scheme, make sure type scheme correctly. - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n project_path: $bitrise_project_path\n build configuration by default, step use build configuration specified scheme. however, override different configuration: add desired configuration input. this input optional need don't want use build configuration specified selected scheme. you create new build configurations xcode project any time: adding build configuration file project . configure simulator run destinations: simulator_device : set device want test app on. exactly appears xcode's device selection interface . for example, iphone 14 pro . simulator_os_version : set required os version appears xcode's device selection interface. for example, ios 16.2 . simulator_platform : select ios tvos . - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n project_path: $bitrise_project_path\n optionally, set code_signing_allowed input yes . this allows code signing files installed build. in cases, don't need code signing app built simulator. it required certain test cases third-party dependencies. to set signing, see ios code signing . - xcode-build-for-simulator:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n code_signing_allowed: 'yes'\n project_path: $bitrise_project_path\n to access app build artifact, add deploy-to-bitrise-io step end workflow. by default, don't modify step's configuration. primary:\n steps:\n - generate-cordova-build-configuration@0: {}\n xcode-build-for-test@2: xcode-test@4: xcode-build-for-simulator@0.12:\n inputs:\n scheme: $bitrise_scheme\n simulator_device: iphone 14 plus\n simulator_os_version: '16.2'\n simulator_platform: ios\n configuration: debug\n code_signing_allowed: 'no'\n project_path: $bitrise_project_path\n deploy-to-bitrise-io\n " });
this.add({id:669, 
title:"Deploying the app to Appetize.io", 
body:" deploying app appetize.io an .app file built with xcode build simulator step works with just any simulator. but want easily quickly integrate simulator allows run app browser, recommend using appetize.io deploy step. it uploads app appetize.io provides public url use browser. request appetize.io api token. open app bitrise . click workflows button main page. on workflows & pipelines page, workflow need click row open editor. add configure xcode build simulator step workflow. add appetize.io deploy step workflow. add appetize.io api token appetize.io token input. enter path .app file application path input. the easiest solution use bitrise_app_dir_path_list environment variable output xcode build simulator step. optionally, enable verbose logging efficient debugging. the appetize.io deploy step produce output: appetize_app_url environment variable. public url access app. enjoy showing off! " });
this.add({id:670, 
title:"Deploying with Ship", 
body:" deploying with ship ship deployment solution aims save users lot headache. with ship, complete control app’s distribution, version history, important metadata - manage place. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. ship deployment solution aims save users lot headache. with ship, complete control app’s distribution, version history, important metadata - manage place. deployment with ship includes automatic re-sign artifact generation store previous versions too. the app’s metadata, marketing copy, screenshots edited spot non-developer people manage it. ship language as right now, ship supports english locale. no language submissions supported. you lot things with ship: view build versions app. view edit details given build version, including description, screenshots, important parameters, app size supported device types. send app directly testers with link public install page. deploy given build version app store connect and\/or google play console, set publishing. switch platforms version history page case cross-platform projects. " });
this.add({id:671, 
title:"Getting started with Ship", 
body:" getting started with ship to start using ship, you'll need build app export generated binary ship. you expose workflow builds make sure include deploy bitrise.io step it. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. to start using ship, you'll need build app export generated binary ship. you options open ship bitrise: on add-ons tab app: option takes ship’s home page. from builds page: option takes build’s ship page. when first logging in, single build version available publish. but don’t worry, fixed quickly. step versions compatible with ship please note deploy bitrise.io step version 1.9.0 higher xcode archive & export ios step ios apps version 2.6.0 higher - older versions steps support ship. to able deploy app with ship: in workflows , need step builds app. by default, xcode archive & export ios , gradle runner android build automatically supported. the workflow correct version deploy bitrise.io step builds app. the deploy bitrise.io step export relevant file: apk file android apps .xcarchive file ios apps. if use xcode archive & export ios , gradle runner android build steps, don’t change default configuration deploy bitrise.io step export relevant files. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . once successfully built app, able start using ship. " });
this.add({id:672, 
title:"Configuring an app for publishing with Ship", 
body:" configuring app publishing with ship to publish app ship, need build binary with workflow exposed settings properly configured. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. to publish app ship, need to: build app exposed workflow : exposing a workflow's artifacts to ship . make sure bitrise necessary code signing files . configure publishing settings page. ios android apps set settings settings page; cross-platform app, ios android settings configured. " });
this.add({id:673, 
title:"Exposing a Workflow's artifacts to Ship", 
body:" exposing workflow's artifacts ship exposing workflow’s artifacts means products workflow available ship: example, produces apk, publish using ship. by default, workflows exposed contain correct version deploy bitrise.io step . if happy with that, just leave field is. if, however, add workflow here, exposed. to expose workflow’s artifacts ship: go app’s ship page. click settings right corner. go general tab. in expose artifacts from selected workflow ship text box, add workflows need. be aware app cross-platform, two text boxes: ios android. separate different workflow names with comma (for example, build, deploy, release_build_android ) . scroll page click save . " });
this.add({id:674, 
title:"Code signing files", 
body:" code signing files code signing files required publish app any online store, install test devices. on settings page, choose different code signing files. you upload files - ios provisioning profiles certificates, android keystore service account json code signing tab bitrise app: ios code signing . android code signing . " });
this.add({id:675, 
title:"Installing an app on a test device with Ship", 
body:" installing app test device with ship you install app ship, using public page option, logging ship device itself there. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. to install app device using ship, options: send public install page link qr code takes scanned testers stakeholders. log ship device install directly there. " });
this.add({id:676, 
title:"Accessing the public install page in Ship", 
body:" accessing public install page ship to send public install page link qr code stakeholders: artifact types the public install page available type artifacts. for ios, it’s available app signed with debug, development ad-hoc type provisioning profile. for android, it’s available workflow builds apk not split universal split. aabs, public install page link. make sure deploy bitrise.io step workflow builds installable file. make sure enable public page app? input step set true . log ship. expose workflow run build bitrise. go ship. open details page app’s chosen build version. on right, public install page link qr code. copy need send stakeholders (by email, example). " });
this.add({id:677, 
title:"Installing directly from Ship", 
body:" installing directly ship to install app registered device directly ship: build app bitrise. log ship supported device. click devices tab given device registered. read guide how register devices bitrise. under app, click install button. " });
this.add({id:678, 
title:"Publishing an app to a store with Ship", 
body:" publishing app store with ship ship supports publishing apple's app store google play. to successfully publish stores, need build app bitrise, make sure access code signing files, configure ship. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. ship supports publishing apple's app store google play. to successfully publish stores, need build app bitrise, make sure access code signing files, configure ship. " });
this.add({id:679, 
title:"Publishing an iOS app to the App Store with Ship", 
body:" publishing ios app app store with ship to able publish ios app app store connect (formerly known itunes connect) with ship, to: build app. choose provisioning profiles code signing identities used. set app specific password. set apple developer account email. set app sku: unique id app internal tracking. it’s visible customers. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . make sure you've configured xcode archive & export ios step correctly: distribution method input set app store built with release configuration. make sure deploy bitrise.io step workflow . open app’s ship page click settings right corner. go general tab. go ios settings section. expose workflow creates ipa file want publish, run bitrise. in ios settings section, select code signing files want use. make sure choose files appropriate export method used create .ipa file. for example, was exported using app-store method, choose app store provisioning profile distribution certificate (code signing identity). enter apple developer account email app specific password able publish app store. enter app sku . go details page click publish . " });
this.add({id:680, 
title:"Publishing an Android app to Google Play with Ship", 
body:" publishing android app google play with ship to configure publishing android app google play console ship, to: choose android keystore files service account json file. set track want use release app. once configured publishing app, set options time, want change them. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . open app’s ship page click settings right corner. go android settings section. expose workflow creates apk want publish. make sure exposed workflow includes android build gradle runner step, deploy bitrise.io step. build release version app with exposed workflow. depending step use, options: make sure android build step’s variant input field contains release (for example release demorelease ). make sure gradle runner step’s gradle task run input field contains release (for example, assemblerelease assembledemorelease ) enter track want use publish google play console. if android app contains multiple modules, enter exact module module . choose appropriate keystore file service account json file. head version history page select version wish publish. if app multiple flavors, filter right flavor publishing. fill details page click publish. " });
this.add({id:681, 
title:"Publishing status and logs", 
body:" publishing status logs once clicked publish ship, process starts according configured settings. you view status active publishing details page app. to view logs any publishing process, activity tab. from there, download logs clicking download build log troubleshoot any errors failed publish. " });
this.add({id:682, 
title:"Using Ship for apps built with cross-platform frameworks", 
body:" using ship apps built with cross-platform frameworks you use ship any binary build bitrise: just need make sure ends bitrise_deploy_dir directory so deploy bitrise.io step it. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. by default, ship works with android build, gradle runner xcode archive & export ios steps . the output steps automatically exported deploy bitrise.io step ship. however, apps built with cross-platform frameworks, react native flutter, use steps workflows . but don’t worry: use steps supported default build app deploy with ship. all need make sure right files end place. " });
this.add({id:683, 
title:"Publishing iOS apps built with cross-platform frameworks", 
body:" publishing ios apps built with cross-platform frameworks you use ship publish android app built with, example, flutter react native don't xcode archive & export ios step. the deploy bitrise.io step looks .xcarchive.zip file export ship case ios app. if want use xcode archive & export ios step, just need make sure that: there step exposed workflow exports .xcarchive.zip file app. that is, step use needs create xcode archive package zip file. this step exports .xcarchive.zip file bitrise_deploy_dir directory. " });
this.add({id:684, 
title:"Publishing Android apps built with cross-platform frameworks", 
body:" publishing android apps built with cross-platform frameworks you use ship publish android app built with, example, flutter react native don't android build gradle runner steps. the deploy bitrise.io step looks apk aab file bitrise_deploy_dir directory. if want use android build gradle runner steps, just need make sure that: there step exposed workflow exports apk aab file app. this step exports apk aab file bitrise_deploy_dir directory. " });
this.add({id:685, 
title:"App details in Ship", 
body:" app details ship on app details page ship, update important information so info available online stores publish to. the purpose app's details page update important information app - example, make sure relevant appears online store choice. the details include: a description app. screenshots feature graphics app, arranged different supported devices. metadata version number, size, code, sdk version, so on. the exact parameters depend type app. this automatically exported ship deploy bitrise.io step . " });
this.add({id:686, 
title:"Adding screenshots or feature graphics", 
body:" adding screenshots feature graphics you add screenshots app published. once added screenshots graphics build version app, automatically subsequent versions. if want display different screenshots, modify it, leave alone. to add screenshots feature graphics app details page: open details page ship app’s chosen build version. go screenshots feature graphic , depending want upload. drag drop file or click browse files select ones wish upload. once done, click save right corner. " });
this.add({id:687, 
title:"Updating the app's descriptions", 
body:" updating app's descriptions you update app’s description, textual details way. the types text fields available depend type app. open details page ship app’s chosen build version. go field want edit click content field. edit content. click save right details tab. " });
this.add({id:688, 
title:"Ship notifications", 
body:" ship notifications ship send emails different events: new build version available, successful publishing, failed publishing. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. ship send emails different events: a new build version app available ship. ship successfully published app. ship failed publish app. these notifications sent any number different email addresses. when new address added list, ship sends confirmation address: confirmation, work. " });
this.add({id:689, 
title:"Adding a new email address in Ship", 
body:" adding new email address ship to add new email address notification list app: open app’s ship page. click settings. go notifications tab. in input field email notifications , type email address. click add . the address appear list below, with pending status. an email sent address: recipient click confirm notifications email start receiving notifications. " });
this.add({id:690, 
title:"Configuring notifications in Ship", 
body:" configuring notifications ship you pick choose ship events want notify different people. for example, it’s possible send notifications failed publishing event bothered things well! and course email addresses. open app’s ship page. click settings. go notifications tab. use toggles different event types. hit save notifications set. " });
this.add({id:671, 
title:"Getting started with Ship", 
body:" getting started with ship to start using ship, you'll need build app export generated binary ship. you expose workflow builds make sure include deploy bitrise.io step it. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. to start using ship, you'll need build app export generated binary ship. you options open ship bitrise: on add-ons tab app: option takes ship’s home page. from builds page: option takes build’s ship page. when first logging in, single build version available publish. but don’t worry, fixed quickly. step versions compatible with ship please note deploy bitrise.io step version 1.9.0 higher xcode archive & export ios step ios apps version 2.6.0 higher - older versions steps support ship. to able deploy app with ship: in workflows , need step builds app. by default, xcode archive & export ios , gradle runner android build automatically supported. the workflow correct version deploy bitrise.io step builds app. the deploy bitrise.io step export relevant file: apk file android apps .xcarchive file ios apps. if use xcode archive & export ios , gradle runner android build steps, don’t change default configuration deploy bitrise.io step export relevant files. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . once successfully built app, able start using ship. " });
this.add({id:672, 
title:"Configuring an app for publishing with Ship", 
body:" configuring app publishing with ship to publish app ship, need build binary with workflow exposed settings properly configured. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. to publish app ship, need to: build app exposed workflow : exposing a workflow's artifacts to ship . make sure bitrise necessary code signing files . configure publishing settings page. ios android apps set settings settings page; cross-platform app, ios android settings configured. " });
this.add({id:673, 
title:"Exposing a Workflow's artifacts to Ship", 
body:" exposing workflow's artifacts ship exposing workflow’s artifacts means products workflow available ship: example, produces apk, publish using ship. by default, workflows exposed contain correct version deploy bitrise.io step . if happy with that, just leave field is. if, however, add workflow here, exposed. to expose workflow’s artifacts ship: go app’s ship page. click settings right corner. go general tab. in expose artifacts from selected workflow ship text box, add workflows need. be aware app cross-platform, two text boxes: ios android. separate different workflow names with comma (for example, build, deploy, release_build_android ) . scroll page click save . " });
this.add({id:674, 
title:"Code signing files", 
body:" code signing files code signing files required publish app any online store, install test devices. on settings page, choose different code signing files. you upload files - ios provisioning profiles certificates, android keystore service account json code signing tab bitrise app: ios code signing . android code signing . " });
this.add({id:673, 
title:"Exposing a Workflow's artifacts to Ship", 
body:" exposing workflow's artifacts ship exposing workflow’s artifacts means products workflow available ship: example, produces apk, publish using ship. by default, workflows exposed contain correct version deploy bitrise.io step . if happy with that, just leave field is. if, however, add workflow here, exposed. to expose workflow’s artifacts ship: go app’s ship page. click settings right corner. go general tab. in expose artifacts from selected workflow ship text box, add workflows need. be aware app cross-platform, two text boxes: ios android. separate different workflow names with comma (for example, build, deploy, release_build_android ) . scroll page click save . " });
this.add({id:674, 
title:"Code signing files", 
body:" code signing files code signing files required publish app any online store, install test devices. on settings page, choose different code signing files. you upload files - ios provisioning profiles certificates, android keystore service account json code signing tab bitrise app: ios code signing . android code signing . " });
this.add({id:675, 
title:"Installing an app on a test device with Ship", 
body:" installing app test device with ship you install app ship, using public page option, logging ship device itself there. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. to install app device using ship, options: send public install page link qr code takes scanned testers stakeholders. log ship device install directly there. " });
this.add({id:676, 
title:"Accessing the public install page in Ship", 
body:" accessing public install page ship to send public install page link qr code stakeholders: artifact types the public install page available type artifacts. for ios, it’s available app signed with debug, development ad-hoc type provisioning profile. for android, it’s available workflow builds apk not split universal split. aabs, public install page link. make sure deploy bitrise.io step workflow builds installable file. make sure enable public page app? input step set true . log ship. expose workflow run build bitrise. go ship. open details page app’s chosen build version. on right, public install page link qr code. copy need send stakeholders (by email, example). " });
this.add({id:677, 
title:"Installing directly from Ship", 
body:" installing directly ship to install app registered device directly ship: build app bitrise. log ship supported device. click devices tab given device registered. read guide how register devices bitrise. under app, click install button. " });
this.add({id:676, 
title:"Accessing the public install page in Ship", 
body:" accessing public install page ship to send public install page link qr code stakeholders: artifact types the public install page available type artifacts. for ios, it’s available app signed with debug, development ad-hoc type provisioning profile. for android, it’s available workflow builds apk not split universal split. aabs, public install page link. make sure deploy bitrise.io step workflow builds installable file. make sure enable public page app? input step set true . log ship. expose workflow run build bitrise. go ship. open details page app’s chosen build version. on right, public install page link qr code. copy need send stakeholders (by email, example). " });
this.add({id:677, 
title:"Installing directly from Ship", 
body:" installing directly ship to install app registered device directly ship: build app bitrise. log ship supported device. click devices tab given device registered. read guide how register devices bitrise. under app, click install button. " });
this.add({id:678, 
title:"Publishing an app to a store with Ship", 
body:" publishing app store with ship ship supports publishing apple's app store google play. to successfully publish stores, need build app bitrise, make sure access code signing files, configure ship. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. ship supports publishing apple's app store google play. to successfully publish stores, need build app bitrise, make sure access code signing files, configure ship. " });
this.add({id:679, 
title:"Publishing an iOS app to the App Store with Ship", 
body:" publishing ios app app store with ship to able publish ios app app store connect (formerly known itunes connect) with ship, to: build app. choose provisioning profiles code signing identities used. set app specific password. set apple developer account email. set app sku: unique id app internal tracking. it’s visible customers. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . make sure you've configured xcode archive & export ios step correctly: distribution method input set app store built with release configuration. make sure deploy bitrise.io step workflow . open app’s ship page click settings right corner. go general tab. go ios settings section. expose workflow creates ipa file want publish, run bitrise. in ios settings section, select code signing files want use. make sure choose files appropriate export method used create .ipa file. for example, was exported using app-store method, choose app store provisioning profile distribution certificate (code signing identity). enter apple developer account email app specific password able publish app store. enter app sku . go details page click publish . " });
this.add({id:680, 
title:"Publishing an Android app to Google Play with Ship", 
body:" publishing android app google play with ship to configure publishing android app google play console ship, to: choose android keystore files service account json file. set track want use release app. once configured publishing app, set options time, want change them. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . open app’s ship page click settings right corner. go android settings section. expose workflow creates apk want publish. make sure exposed workflow includes android build gradle runner step, deploy bitrise.io step. build release version app with exposed workflow. depending step use, options: make sure android build step’s variant input field contains release (for example release demorelease ). make sure gradle runner step’s gradle task run input field contains release (for example, assemblerelease assembledemorelease ) enter track want use publish google play console. if android app contains multiple modules, enter exact module module . choose appropriate keystore file service account json file. head version history page select version wish publish. if app multiple flavors, filter right flavor publishing. fill details page click publish. " });
this.add({id:681, 
title:"Publishing status and logs", 
body:" publishing status logs once clicked publish ship, process starts according configured settings. you view status active publishing details page app. to view logs any publishing process, activity tab. from there, download logs clicking download build log troubleshoot any errors failed publish. " });
this.add({id:679, 
title:"Publishing an iOS app to the App Store with Ship", 
body:" publishing ios app app store with ship to able publish ios app app store connect (formerly known itunes connect) with ship, to: build app. choose provisioning profiles code signing identities used. set app specific password. set apple developer account email. set app sku: unique id app internal tracking. it’s visible customers. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . make sure you've configured xcode archive & export ios step correctly: distribution method input set app store built with release configuration. make sure deploy bitrise.io step workflow . open app’s ship page click settings right corner. go general tab. go ios settings section. expose workflow creates ipa file want publish, run bitrise. in ios settings section, select code signing files want use. make sure choose files appropriate export method used create .ipa file. for example, was exported using app-store method, choose app store provisioning profile distribution certificate (code signing identity). enter apple developer account email app specific password able publish app store. enter app sku . go details page click publish . " });
this.add({id:680, 
title:"Publishing an Android app to Google Play with Ship", 
body:" publishing android app google play with ship to configure publishing android app google play console ship, to: choose android keystore files service account json file. set track want use release app. once configured publishing app, set options time, want change them. using ship with different build steps by default, xcode archive & export ios , gradle runner , android build automatically supported with ship. if want build app with any step, so - just requires little extra configuration . open app’s ship page click settings right corner. go android settings section. expose workflow creates apk want publish. make sure exposed workflow includes android build gradle runner step, deploy bitrise.io step. build release version app with exposed workflow. depending step use, options: make sure android build step’s variant input field contains release (for example release demorelease ). make sure gradle runner step’s gradle task run input field contains release (for example, assemblerelease assembledemorelease ) enter track want use publish google play console. if android app contains multiple modules, enter exact module module . choose appropriate keystore file service account json file. head version history page select version wish publish. if app multiple flavors, filter right flavor publishing. fill details page click publish. " });
this.add({id:681, 
title:"Publishing status and logs", 
body:" publishing status logs once clicked publish ship, process starts according configured settings. you view status active publishing details page app. to view logs any publishing process, activity tab. from there, download logs clicking download build log troubleshoot any errors failed publish. " });
this.add({id:682, 
title:"Using Ship for apps built with cross-platform frameworks", 
body:" using ship apps built with cross-platform frameworks you use ship any binary build bitrise: just need make sure ends bitrise_deploy_dir directory so deploy bitrise.io step it. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. by default, ship works with android build, gradle runner xcode archive & export ios steps . the output steps automatically exported deploy bitrise.io step ship. however, apps built with cross-platform frameworks, react native flutter, use steps workflows . but don’t worry: use steps supported default build app deploy with ship. all need make sure right files end place. " });
this.add({id:683, 
title:"Publishing iOS apps built with cross-platform frameworks", 
body:" publishing ios apps built with cross-platform frameworks you use ship publish android app built with, example, flutter react native don't xcode archive & export ios step. the deploy bitrise.io step looks .xcarchive.zip file export ship case ios app. if want use xcode archive & export ios step, just need make sure that: there step exposed workflow exports .xcarchive.zip file app. that is, step use needs create xcode archive package zip file. this step exports .xcarchive.zip file bitrise_deploy_dir directory. " });
this.add({id:684, 
title:"Publishing Android apps built with cross-platform frameworks", 
body:" publishing android apps built with cross-platform frameworks you use ship publish android app built with, example, flutter react native don't android build gradle runner steps. the deploy bitrise.io step looks apk aab file bitrise_deploy_dir directory. if want use android build gradle runner steps, just need make sure that: there step exposed workflow exports apk aab file app. this step exports apk aab file bitrise_deploy_dir directory. " });
this.add({id:683, 
title:"Publishing iOS apps built with cross-platform frameworks", 
body:" publishing ios apps built with cross-platform frameworks you use ship publish android app built with, example, flutter react native don't xcode archive & export ios step. the deploy bitrise.io step looks .xcarchive.zip file export ship case ios app. if want use xcode archive & export ios step, just need make sure that: there step exposed workflow exports .xcarchive.zip file app. that is, step use needs create xcode archive package zip file. this step exports .xcarchive.zip file bitrise_deploy_dir directory. " });
this.add({id:684, 
title:"Publishing Android apps built with cross-platform frameworks", 
body:" publishing android apps built with cross-platform frameworks you use ship publish android app built with, example, flutter react native don't android build gradle runner steps. the deploy bitrise.io step looks apk aab file bitrise_deploy_dir directory. if want use android build gradle runner steps, just need make sure that: there step exposed workflow exports apk aab file app. this step exports apk aab file bitrise_deploy_dir directory. " });
this.add({id:685, 
title:"App details in Ship", 
body:" app details ship on app details page ship, update important information so info available online stores publish to. the purpose app's details page update important information app - example, make sure relevant appears online store choice. the details include: a description app. screenshots feature graphics app, arranged different supported devices. metadata version number, size, code, sdk version, so on. the exact parameters depend type app. this automatically exported ship deploy bitrise.io step . " });
this.add({id:686, 
title:"Adding screenshots or feature graphics", 
body:" adding screenshots feature graphics you add screenshots app published. once added screenshots graphics build version app, automatically subsequent versions. if want display different screenshots, modify it, leave alone. to add screenshots feature graphics app details page: open details page ship app’s chosen build version. go screenshots feature graphic , depending want upload. drag drop file or click browse files select ones wish upload. once done, click save right corner. " });
this.add({id:687, 
title:"Updating the app's descriptions", 
body:" updating app's descriptions you update app’s description, textual details way. the types text fields available depend type app. open details page ship app’s chosen build version. go field want edit click content field. edit content. click save right details tab. " });
this.add({id:686, 
title:"Adding screenshots or feature graphics", 
body:" adding screenshots feature graphics you add screenshots app published. once added screenshots graphics build version app, automatically subsequent versions. if want display different screenshots, modify it, leave alone. to add screenshots feature graphics app details page: open details page ship app’s chosen build version. go screenshots feature graphic , depending want upload. drag drop file or click browse files select ones wish upload. once done, click save right corner. " });
this.add({id:687, 
title:"Updating the app's descriptions", 
body:" updating app's descriptions you update app’s description, textual details way. the types text fields available depend type app. open details page ship app’s chosen build version. go field want edit click content field. edit content. click save right details tab. " });
this.add({id:688, 
title:"Ship notifications", 
body:" ship notifications ship send emails different events: new build version available, successful publishing, failed publishing. ship deprecated the ship add-on deprecated eventually removed. we strongly recommend using release management instead. ship send emails different events: a new build version app available ship. ship successfully published app. ship failed publish app. these notifications sent any number different email addresses. when new address added list, ship sends confirmation address: confirmation, work. " });
this.add({id:689, 
title:"Adding a new email address in Ship", 
body:" adding new email address ship to add new email address notification list app: open app’s ship page. click settings. go notifications tab. in input field email notifications , type email address. click add . the address appear list below, with pending status. an email sent address: recipient click confirm notifications email start receiving notifications. " });
this.add({id:690, 
title:"Configuring notifications in Ship", 
body:" configuring notifications ship you pick choose ship events want notify different people. for example, it’s possible send notifications failed publishing event bothered things well! and course email addresses. open app’s ship page. click settings. go notifications tab. use toggles different event types. hit save notifications set. " });
this.add({id:689, 
title:"Adding a new email address in Ship", 
body:" adding new email address ship to add new email address notification list app: open app’s ship page. click settings. go notifications tab. in input field email notifications , type email address. click add . the address appear list below, with pending status. an email sent address: recipient click confirm notifications email start receiving notifications. " });
this.add({id:690, 
title:"Configuring notifications in Ship", 
body:" configuring notifications ship you pick choose ship events want notify different people. for example, it’s possible send notifications failed publishing event bothered things well! and course email addresses. open app’s ship page. click settings. go notifications tab. use toggles different event types. hit save notifications set. " });
this.add({id:691, 
title:"Deploying apps to Applivery", 
body:" deploying apps applivery applivery mobile app distribution platform ios android provides powerful management simplify delivery testers employees, with focus easy-to-use experience. applivery mobile app distribution platform ios android provides powerful management simplify delivery testers employees, with focus easy-to-use experience. applivery features better manage in-development production-ready apps help speed development, feedback deliver applications. some features are: single multi app customized stores with seamless user experience non-technical users. multi-track fully customized app distribution with multiple security configurations including sso, non-registered users, password protected unlisted apps. automatic forced in-app updates. feedback bug reporting. combined with bitrise, cover entire development life cycle, testing building delivery feedback. " });
this.add({id:692, 
title:"Deploying your app to Applivery", 
body:" deploying app applivery add applivery ios deploy applivery android deploy step workflow . make sure add step steps build app . get applivery app token link bitrise app with app. read how app token . open app bitrise click workflows tab open workflow editor. go secrets tab. click add new type applivery_app_token key input field. paste applivery app token value input field click save . " });
this.add({id:693, 
title:"Configuring the Applivery Step", 
body:" configuring applivery step there optional parameters customize better deeper integration: input variables type description file path file app’s binary file. by default gets $bitrise_ipa_path $bitrise_apk_path. app token string applivery app token. by default gets $applivery_app_token secret var. changelog string additional build\/release notes changelog attached deploy. notify collaborators? boolean automatically notify project collaborators vía emai. notify employees? boolean automatically notify project employees vía emai. notification message string notification message sent with email notification. tags string comma-separated list tags easily identify build multitrack app distribution version string human readable version better identification build. upload certificates boolean download code signing files bitrise code signing & files tab upload applivery. " });
this.add({id:694, 
title:"Distribution with Applivery", 
body:" distribution with applivery applivery provides multiple different ways app distribution customized app stores (public private) distribution pages (public, private, unlisted, password-protected shareable installation links). it enables multitrack delivery based information gathered bitrise workflows, github branches, tags labels. " });
this.add({id:695, 
title:"Deploying apps to DeployGate from Bitrise", 
body:" deploying apps deploygate bitrise deploygate mobile app distribution platform ios android, delivering in-development ios\/android apps dev team, members, employees, qa testing team organization testers outside company. deploygate mobile app distribution platform ios android, delivering in-development ios\/android apps dev team, members, employees, qa testing team organization testers outside company. deploygate features accelerate app development cycle including qa testing improvement with beta tester’s feedbacks. deploygate offers: real-time app distribution with automatic version control, requiring accounts testers flexible user account management with granular access control git-like multi-track distribution allows individual version\/user\/device management app with deploygate bitrise, quickly build fully automated in-house dogfooding environment team. to see details, visit deploygate features . to upload app deploygate, add deploygate upload step bitrise workflow . this step added builds app's binary uploaded. you need set required parameters below: input variables description api key set upload user’s deploygate api key account settings. if want upload apps organization account, use organization’s api key. upload account shown activity timeline. owner name app owner’s account deploygate. you use username organization name. app file path app’s binary file (ipa\/apk) uploaded. for default setting, use $bitrise_apk_path android $bitrise_ipa_path ios you set optional variables using advanced features below: input variables description short message summary update shown deploygate. you use $bitrise_git_message want commit message, pull request title, message specified triggered build manually. distribution key you make multiple public install links (we called distribution page) different version app binary app. by specifying distribution page’s hash, page updated simultaneously. the “xxxx” portion distributed url like https:\/\/deploygate.com\/distributions\/xxxx distribution name specify updated distribution page. if exists, new page created. possible usage includes creating pages git branch name. (for example $bitrise_git_branch) release note message new release distribution page. this message notified page’s testers disable notify(ios only) there deploygate client app ios platform. by default, use email notifications release updates. if don’t need notification, set option true these options based deploygate api . for details, read references deploygate.com . you use deploygate's distribution page (shareable link) feature generate landing page app installation app’s specific version. when upload app deploygate, automatically assigns sequential number (we calling **revision number** ) uploaded build. on distribution page, choose specific revision app distribute group testers. this feature handy distributing multiple tester groups different purposes qas, dog fooding, test marketing. you generate distribution page upload app bitrise with deploygate upload step. please refer optional variables above. " });
this.add({id:696, 
title:"Deploying your app to Appaloosa", 
body:" deploying app appaloosa appaloosa helps distribute mobile apps privately, collect feedback analyse deployment’s efficiency. use dedicated step deploy with bitrise. would like beta test deploy app 1 thousands users? appaloosa helps distribute mobile apps privately, collect feedback analyse deployment’s efficiency. check out! appaloosa simple secure enterprise app store. they help mobile & digital teams build, test deploy apps privately. you manage apps android, ios windows phone, place. appaloosa provides native app store increase users’ engagement. they receive push notification update able test use latest version mobile apps. appaloosa gives great insight efficiency deployment with download usage stats feedbacks ratings users. they entreprise ready with ldap, oauth, saml active directory integrations restful api. get touch details. plus mobile apps targeted groups users distributed collaborators. to deploy app appaloosa, simply add appaloosa step app’s workflow . if don’t account appaloosa, created go. as registered user simply need store id api key . as unregistered user , email address enough. optionally provide description , screenshot urls (up 5) and, registered, group ids . with bitrise appaloosa, focus mobile app development care rest! " });
this.add({id:697, 
title:"Deploying to TestFairy with Bitrise", 
body:" deploying testfairy with bitrise testfairy deployment service gives plenty insights app. you deploy with bitrise using dedicated step. if looking deployment service gives lots insights application, testfairy great service check out. when testing apps crowd, know exactly was tested went wrong client side. testfairy solves problem providing video happened mobile device, including detailed internal metrics cpu, memory, gps, network, logs, crash reports, lot more. to insights ios need integrate ios sdk app . to deploy app testfairy platform just simply need add testfairy step app’s workflow (on bitrise.io ). the required parameter add api key testfairy. to navigate account preferences testfairy key api key menu. email notifications auto update you enable disable email notifications set tester groups like notify. there’s option make users upgrade latest build enabling auto update step, start recording video length it. there’s need do, simply work awesome app ensure automatically deployed testfairy time update code. " });
this.add({id:698, 
title:"Insights", 
body:" insights insights monitoring tool allows track metrics detailing performance bitrise builds. insights monitoring tool allows track metrics detailing performance bitrise builds. track app -, workflow -, step -level use data optimize builds. with insights tool, targeting main areas: stability: which errors highest impact builds? velocity: which area focus improve speed builds? usage: which steps workflows time builds? " });
this.add({id:699, 
title:"How Insights works", 
body:" how insights works every workspace insights instance. tracks metrics apps belonging workspace. for workspace app, view following types metrics: build stats: app's page, check aggregated metrics builds, including detailed data pipelines, workflows steps. test stats: look detailed metrics test cases app, including data individual runs. build minutes machine type: track how time spent building app different machine types . credits spent: credits spent app, build, workflow. you create personalized dashboards categorize charts view place. insights helps track bottlenecks: shows builds tests longest time cost highest credits. " });
this.add({id:700, 
title:"Git Insights and remote caching", 
body:" git insights remote caching insights provides data git operations bitrise app's repository remote build cache feature. " });
this.add({id:701, 
title:"Getting started with Insights", 
body:" getting started with insights the insights overview page offers aggregated app-level metrics check ci\/cd health app. compare values point time charts quickly assess any negative trends need immediate attention. insights constantly tracks performance apps workspaces . you aggregated build data apps , detailed metrics app, categorize see fit using dashboards. insights allows view bottlenecks: shows workflows tests time cost highest credits. to workspace's insights page: log bitrise account. in right corner, open account selector dropdown menu select workspace. on header, click insights . this takes overview page selected workspace. " });
this.add({id:702, 
title:"The Overview page", 
body:" the overview page on overview , see aggregated build data selected workspace. you app-level form charts cover selected timeframe . you switch workspaces any time: right corner, open account selector dropdown menu select workspace. " });
this.add({id:703, 
title:"Accessing the build metrics", 
body:" accessing build metrics you detailed build metrics workspace specific app ways: simply select builds left, choose specific metric overview page workspace. we'll second method: open overview page workspace. find metric need. for example, build failure rate . click view details . if than app workspace, details page see aggregated metrics apps workspace default. from leftmost dropdown menu, select app need. optionally, dig deeper adding filters using add filter button view specific data. you filter for: pipelines: metrics builds ran with specific pipeline app. stages: metric builds ran with specific stage pipeline. workflows: metrics builds ran with specific workflow app. branches: metrics builds specific branch. machine types: metrics builds ran specific machine type. stacks: metrics builds ran specific stack. scroll see individual builds, data, including steps ran with. for available build metrics, check available metrics in insights . " });
this.add({id:704, 
title:"Accessing the testing metrics of an app", 
body:" accessing testing metrics app insights allows track testing metrics, right level individual modules. to this, need step exports results deploy bitrise.io step. the following steps automatically, any need additional configuration: xcode test ios android unit test ios device testing virtual device testing android flutter test if use any steps run tests, check metrics insights: open insights. on left, select tests . from leftmost dropdown menu, select app need. optionally, dig deeper using filters view specific testing data. you filter for: test suites test cases modules branches scroll see individual test cases. for available test metrics, check available metrics in insights . " });
this.add({id:705, 
title:"Bottlenecks", 
body:" bottlenecks the bottlenecks section helps understand save time credits. we workflows tests longest cost highest to access bottlenecks page, simply select bottlenecks left. the bottlenecks divided basic categories use metrics: builds , tests , credits . each category metrics: failing workflows\/failing tests : failing workflows test cases highest impact time credits used builds. build time\/run time : workflows with increasing build times, test cases run times. usage\/flakiness : workflows consumed highest resources (either time credits), test cases with flaky runs. " });
this.add({id:706, 
title:"Viewing data from a specific timeframe", 
body:" viewing data specific timeframe by default, insights pages display metrics weekly basis 12 weeks. modify timeframe opening respective dropdown menu right page, selecting options need. " });
this.add({id:707, 
title:"The Dashboards page", 
body:" the dashboards page you use insights dashboards page categorize charts workspace so view place. you combine charts builds, tests, credits tab single dashboard, dashboards want. " });
this.add({id:708, 
title:"Creating a new dashboard", 
body:" creating new dashboard you create new dashboard dashboards page clicking add dashboard button ( ) clicking create dashboard button. we focus method guide: open insights. on left, select dashboards . click create dashboard open create dashboard window. add dashboard dashboard filed optionally add description description field. select default view granularity time range. you change options later. click create . " });
this.add({id:709, 
title:"Accessing a dashboard", 
body:" accessing dashboard to access dashboard: open insights. on left, select dashboards . click dashboard arrow icon (\" \") open specific dashboard. from here, see charts previously added dashboard. for information, check adding a chart to a dashboard . " });
this.add({id:710, 
title:"Adding a chart to a dashboard", 
body:" adding chart dashboard you add any chart builds , tests , credits tabs dashboard: open insights. select builds , tests , credits tab left. search metric want add dashboard. click add dashboard ( ) button it. insert chart field. select dashboard want place chart using dropdown menu. click add . that's it! from able see chart dashboard page. removing chart dashboard you remove chart dashboard using edit mode. for information, check editing a dashboard . " });
this.add({id:711, 
title:"Editing a dashboard", 
body:" editing dashboard once created dashboard, edit see fit. among things, default time range delete charts longer need. to so, use edit mode : open insights. on left, select dashboards . access dashboard like edit. click \" \" icon, click edit mode . in edit mode, change dashboard's general settings clicking settings button. you change previously added charts remove using icons them. click save finish editing dashboard. " });
this.add({id:712, 
title:"Creating alerts", 
body:" creating alerts you create alerts metrics like eye trigger specific threshold reached. push alert notifications slack channels, email addresses, teams channels. to learn alerts: configuring alerts in insights . " });
this.add({id:713, 
title:"Available metrics in Insights", 
body:" available metrics insights there numerous available metrics insights, build success rate, number builds, median time successful etc. insights allows track main categories metrics. these metrics bitrise builds require integration: use ci insights, metrics: build metrics. test metrics. utilization. in addition, insights provide data for: remote build caching . git operations: git insights . " });
this.add({id:714, 
title:"Build metrics", 
body:" build metrics you access build metrics charts overview page selecting builds left. the build metrics available app -, pipeline , stage , workflow -, step level well: top build time (p90): the 90th percentile build times successful builds. in words, 100 builds, slowest took long. this metric calculated based pipelines' run time don't any filters selected. typical build time (p50): the median time successful build. in words, 100 builds, 50th slowest build took long. this metric calculated based pipelines' run don't any filters selected. failure rate: the rate failed builds, given workflow failed. for example, times ten, failure 60%. this metric calculated based pipelines' don't any filters selected. build count: the total number builds started app workflow, based filters timeframe set. total duration: the total duration builds app workflow, based filters timeframe set. " });
this.add({id:715, 
title:"Test metrics", 
body:" test metrics access testing metrics opening main insights page selecting tests left. similarly basic build metrics, apply filters test runs: filter individual suites, cases, modules, branches app's repository. top duration (p90): the 90th percentile test suite case duration. if filter specific case, top duration (p90) shows 90th percentile duration specific test case. otherwise, suite(s) app workflow, based filters timeframe set. means 100 successful executions, slowest took time finish. typical duration (p50): the median (50th percentile) test suite case duration. if filter specific case, typical duration (p50) shows 50th percentile duration specific test case. otherwise, suite(s) app workflow, based filters timeframe set. means 100 successful executions, slowest took time finish. failure rate: test failure rate shows how frequently test suite case fails. for example, performed 100 times, 10 failed, that's 10% rate. if filter specific case, failure rate shows failure rate specific test case. otherwise, suite(s) app workflow based filters timeframe set. total duration: the total duration tests app workflow, based filters timeframe set. test runs : the total number test runs. flaky runs : the number test runs produce inconsistent results despite changes code. " });
this.add({id:716, 
title:"Utilization metrics", 
body:" utilization metrics availability the utilization data described available users custom enterprise plan. on plans, see credit usage. access utilization metrics opening main insights page selecting utilization left. the utilization page shows resources used bitrise builds, enabling efficient tracking costs. by default, page shows metrics based billing cycle. this helps track commitments spending cycle having any calculations own. the how time remains current you change default frame reference dropdown menu right corner. the utilization page shows overall infrastructure utilization. this metric aggregates utilization, including build minutes, cache storage, artifacts storage network egress. the compares aggregate total commitment, displaying monetary value percentage value. credit usage : insights tracks credits used app and, need it, workflow given app. build minutes : track how time spent building different machine types, enabling efficient tracking computing resource consumption. you set filters data multiple levels: build minutes app, pipeline, stage, workflow. cache storage : this relevant use remote build cache feature. it shows how storage space cache archives up. artifacts storage : it shows how storage space generated artifacts up. network egress : data transfer build cache external networks clients retrieve artifacts. this includes data downloaded local development environment any ci than bitrise. " });
this.add({id:717, 
title:"Test stats in Insights", 
body:" test stats insights with insights pro, track metrics test case time, allowing analyze historical performance case. insights pro test stats insights available with pro. request pro access ! insights integrates with bitrise test reporting provide historic performance tracking tests. stats enables locate poorly performing tests stability problems. as this, track number test order measure improvement ensure skipped failing don't slip through. " });
this.add({id:718, 
title:"Setting up access to test stats", 
body:" setting access test stats to able view test stats insights, need steps workflow : a testing step runs test cases. the deploy bitrise.io step. we testing steps automatically export results deploy bitrise.io step: use any steps access insights, don't need configure test stats. the are: xcode test ios android unit test ios device testing virtual device testing android flutter test if use any step, just need make sure test results end $bitrise_test_result_dir , automatically exposed environment variable pointing correct path. " });
this.add({id:719, 
title:"Accessing the test stats dashboard", 
body:" accessing test stats dashboard to test stats dashboard: log bitrise account. in right corner, open account selector dropdown menu select workspace. on header, click insights . this takes insights dashboard selected workspace. click test stats tab. " });
this.add({id:720, 
title:"Filtering test stats", 
body:" filtering test stats in right dashboard, filter time range test case properties. filtering test case properties means able filter for: status : filter passed, failed, skipped, inconclusive test stats. branch : filter test stats specific set branches. module : filter test stats particular module package. test suite : filter test stats particular set suite. " });
this.add({id:721, 
title:"Test counts and test summary", 
body:" test counts test summary on test stats dashboard, see number tests previously selected time range, broken status tests. the possible statuses are: passed failed skipped error you use graph track performance test cases time, making easy spot any changes coverage. below test count graph, summary widget shows individual case previously selected time range. you sort cases locate troublesome tests. we support sorting via: total run time : how time credits spent executing test case. runs : total number executions test case. re-runs : number times test case required re-run pass. it indicator flakiness. success rate : percentage completed test runs passed. it doesn't include aborted runs. typical duration : 50th percentile (median) run time test case. slowest duration : 95th percentile run time test case. for test case, recent history chart indicate performance. clicking case takes test page. tips flaky android tests if experiencing flaky android tests, check guide knowledge base article . " });
this.add({id:722, 
title:"Test case history", 
body:" test case history insights tracks metrics test case time, allowing analyze historical performance case. on test case history page, see aggregated statistics particular case. these stats displayed summary widget dashboard. to test case performance detail, look at: duration trend : shows historical performance test case. the chart 50th percentile (median) 95th performance, allowing see getting better worse time how consistency varies. success rate trend : success rate trends percentage successful runs test case time. latest tests : timeline shows history recent runs particular test case, detailed information run. on latest tests chart, hover any run see details. status : status test run, indicated color. repetition : number re-runs test case required. duration : how long test run took. test suite : parent suite test case. branch : git branch containing code test ran against. build number : bitrise build number test ran on. click any test runs bitrise build log ran test. " });
this.add({id:701, 
title:"Getting started with Insights", 
body:" getting started with insights the insights overview page offers aggregated app-level metrics check ci\/cd health app. compare values point time charts quickly assess any negative trends need immediate attention. insights constantly tracks performance apps workspaces . you aggregated build data apps , detailed metrics app, categorize see fit using dashboards. insights allows view bottlenecks: shows workflows tests time cost highest credits. to workspace's insights page: log bitrise account. in right corner, open account selector dropdown menu select workspace. on header, click insights . this takes overview page selected workspace. " });
this.add({id:702, 
title:"The Overview page", 
body:" the overview page on overview , see aggregated build data selected workspace. you app-level form charts cover selected timeframe . you switch workspaces any time: right corner, open account selector dropdown menu select workspace. " });
this.add({id:703, 
title:"Accessing the build metrics", 
body:" accessing build metrics you detailed build metrics workspace specific app ways: simply select builds left, choose specific metric overview page workspace. we'll second method: open overview page workspace. find metric need. for example, build failure rate . click view details . if than app workspace, details page see aggregated metrics apps workspace default. from leftmost dropdown menu, select app need. optionally, dig deeper adding filters using add filter button view specific data. you filter for: pipelines: metrics builds ran with specific pipeline app. stages: metric builds ran with specific stage pipeline. workflows: metrics builds ran with specific workflow app. branches: metrics builds specific branch. machine types: metrics builds ran specific machine type. stacks: metrics builds ran specific stack. scroll see individual builds, data, including steps ran with. for available build metrics, check available metrics in insights . " });
this.add({id:704, 
title:"Accessing the testing metrics of an app", 
body:" accessing testing metrics app insights allows track testing metrics, right level individual modules. to this, need step exports results deploy bitrise.io step. the following steps automatically, any need additional configuration: xcode test ios android unit test ios device testing virtual device testing android flutter test if use any steps run tests, check metrics insights: open insights. on left, select tests . from leftmost dropdown menu, select app need. optionally, dig deeper using filters view specific testing data. you filter for: test suites test cases modules branches scroll see individual test cases. for available test metrics, check available metrics in insights . " });
this.add({id:705, 
title:"Bottlenecks", 
body:" bottlenecks the bottlenecks section helps understand save time credits. we workflows tests longest cost highest to access bottlenecks page, simply select bottlenecks left. the bottlenecks divided basic categories use metrics: builds , tests , credits . each category metrics: failing workflows\/failing tests : failing workflows test cases highest impact time credits used builds. build time\/run time : workflows with increasing build times, test cases run times. usage\/flakiness : workflows consumed highest resources (either time credits), test cases with flaky runs. " });
this.add({id:706, 
title:"Viewing data from a specific timeframe", 
body:" viewing data specific timeframe by default, insights pages display metrics weekly basis 12 weeks. modify timeframe opening respective dropdown menu right page, selecting options need. " });
this.add({id:707, 
title:"The Dashboards page", 
body:" the dashboards page you use insights dashboards page categorize charts workspace so view place. you combine charts builds, tests, credits tab single dashboard, dashboards want. " });
this.add({id:708, 
title:"Creating a new dashboard", 
body:" creating new dashboard you create new dashboard dashboards page clicking add dashboard button ( ) clicking create dashboard button. we focus method guide: open insights. on left, select dashboards . click create dashboard open create dashboard window. add dashboard dashboard filed optionally add description description field. select default view granularity time range. you change options later. click create . " });
this.add({id:709, 
title:"Accessing a dashboard", 
body:" accessing dashboard to access dashboard: open insights. on left, select dashboards . click dashboard arrow icon (\" \") open specific dashboard. from here, see charts previously added dashboard. for information, check adding a chart to a dashboard . " });
this.add({id:710, 
title:"Adding a chart to a dashboard", 
body:" adding chart dashboard you add any chart builds , tests , credits tabs dashboard: open insights. select builds , tests , credits tab left. search metric want add dashboard. click add dashboard ( ) button it. insert chart field. select dashboard want place chart using dropdown menu. click add . that's it! from able see chart dashboard page. removing chart dashboard you remove chart dashboard using edit mode. for information, check editing a dashboard . " });
this.add({id:711, 
title:"Editing a dashboard", 
body:" editing dashboard once created dashboard, edit see fit. among things, default time range delete charts longer need. to so, use edit mode : open insights. on left, select dashboards . access dashboard like edit. click \" \" icon, click edit mode . in edit mode, change dashboard's general settings clicking settings button. you change previously added charts remove using icons them. click save finish editing dashboard. " });
this.add({id:712, 
title:"Creating alerts", 
body:" creating alerts you create alerts metrics like eye trigger specific threshold reached. push alert notifications slack channels, email addresses, teams channels. to learn alerts: configuring alerts in insights . " });
this.add({id:706, 
title:"Viewing data from a specific timeframe", 
body:" viewing data specific timeframe by default, insights pages display metrics weekly basis 12 weeks. modify timeframe opening respective dropdown menu right page, selecting options need. " });
this.add({id:707, 
title:"The Dashboards page", 
body:" the dashboards page you use insights dashboards page categorize charts workspace so view place. you combine charts builds, tests, credits tab single dashboard, dashboards want. " });
this.add({id:708, 
title:"Creating a new dashboard", 
body:" creating new dashboard you create new dashboard dashboards page clicking add dashboard button ( ) clicking create dashboard button. we focus method guide: open insights. on left, select dashboards . click create dashboard open create dashboard window. add dashboard dashboard filed optionally add description description field. select default view granularity time range. you change options later. click create . " });
this.add({id:709, 
title:"Accessing a dashboard", 
body:" accessing dashboard to access dashboard: open insights. on left, select dashboards . click dashboard arrow icon (\" \") open specific dashboard. from here, see charts previously added dashboard. for information, check adding a chart to a dashboard . " });
this.add({id:710, 
title:"Adding a chart to a dashboard", 
body:" adding chart dashboard you add any chart builds , tests , credits tabs dashboard: open insights. select builds , tests , credits tab left. search metric want add dashboard. click add dashboard ( ) button it. insert chart field. select dashboard want place chart using dropdown menu. click add . that's it! from able see chart dashboard page. removing chart dashboard you remove chart dashboard using edit mode. for information, check editing a dashboard . " });
this.add({id:711, 
title:"Editing a dashboard", 
body:" editing dashboard once created dashboard, edit see fit. among things, default time range delete charts longer need. to so, use edit mode : open insights. on left, select dashboards . access dashboard like edit. click \" \" icon, click edit mode . in edit mode, change dashboard's general settings clicking settings button. you change previously added charts remove using icons them. click save finish editing dashboard. " });
this.add({id:708, 
title:"Creating a new dashboard", 
body:" creating new dashboard you create new dashboard dashboards page clicking add dashboard button ( ) clicking create dashboard button. we focus method guide: open insights. on left, select dashboards . click create dashboard open create dashboard window. add dashboard dashboard filed optionally add description description field. select default view granularity time range. you change options later. click create . " });
this.add({id:709, 
title:"Accessing a dashboard", 
body:" accessing dashboard to access dashboard: open insights. on left, select dashboards . click dashboard arrow icon (\" \") open specific dashboard. from here, see charts previously added dashboard. for information, check adding a chart to a dashboard . " });
this.add({id:710, 
title:"Adding a chart to a dashboard", 
body:" adding chart dashboard you add any chart builds , tests , credits tabs dashboard: open insights. select builds , tests , credits tab left. search metric want add dashboard. click add dashboard ( ) button it. insert chart field. select dashboard want place chart using dropdown menu. click add . that's it! from able see chart dashboard page. removing chart dashboard you remove chart dashboard using edit mode. for information, check editing a dashboard . " });
this.add({id:711, 
title:"Editing a dashboard", 
body:" editing dashboard once created dashboard, edit see fit. among things, default time range delete charts longer need. to so, use edit mode : open insights. on left, select dashboards . access dashboard like edit. click \" \" icon, click edit mode . in edit mode, change dashboard's general settings clicking settings button. you change previously added charts remove using icons them. click save finish editing dashboard. " });
this.add({id:712, 
title:"Creating alerts", 
body:" creating alerts you create alerts metrics like eye trigger specific threshold reached. push alert notifications slack channels, email addresses, teams channels. to learn alerts: configuring alerts in insights . " });
this.add({id:713, 
title:"Available metrics in Insights", 
body:" available metrics insights there numerous available metrics insights, build success rate, number builds, median time successful etc. insights allows track main categories metrics. these metrics bitrise builds require integration: use ci insights, metrics: build metrics. test metrics. utilization. in addition, insights provide data for: remote build caching . git operations: git insights . " });
this.add({id:714, 
title:"Build metrics", 
body:" build metrics you access build metrics charts overview page selecting builds left. the build metrics available app -, pipeline , stage , workflow -, step level well: top build time (p90): the 90th percentile build times successful builds. in words, 100 builds, slowest took long. this metric calculated based pipelines' run time don't any filters selected. typical build time (p50): the median time successful build. in words, 100 builds, 50th slowest build took long. this metric calculated based pipelines' run don't any filters selected. failure rate: the rate failed builds, given workflow failed. for example, times ten, failure 60%. this metric calculated based pipelines' don't any filters selected. build count: the total number builds started app workflow, based filters timeframe set. total duration: the total duration builds app workflow, based filters timeframe set. " });
this.add({id:715, 
title:"Test metrics", 
body:" test metrics access testing metrics opening main insights page selecting tests left. similarly basic build metrics, apply filters test runs: filter individual suites, cases, modules, branches app's repository. top duration (p90): the 90th percentile test suite case duration. if filter specific case, top duration (p90) shows 90th percentile duration specific test case. otherwise, suite(s) app workflow, based filters timeframe set. means 100 successful executions, slowest took time finish. typical duration (p50): the median (50th percentile) test suite case duration. if filter specific case, typical duration (p50) shows 50th percentile duration specific test case. otherwise, suite(s) app workflow, based filters timeframe set. means 100 successful executions, slowest took time finish. failure rate: test failure rate shows how frequently test suite case fails. for example, performed 100 times, 10 failed, that's 10% rate. if filter specific case, failure rate shows failure rate specific test case. otherwise, suite(s) app workflow based filters timeframe set. total duration: the total duration tests app workflow, based filters timeframe set. test runs : the total number test runs. flaky runs : the number test runs produce inconsistent results despite changes code. " });
this.add({id:716, 
title:"Utilization metrics", 
body:" utilization metrics availability the utilization data described available users custom enterprise plan. on plans, see credit usage. access utilization metrics opening main insights page selecting utilization left. the utilization page shows resources used bitrise builds, enabling efficient tracking costs. by default, page shows metrics based billing cycle. this helps track commitments spending cycle having any calculations own. the how time remains current you change default frame reference dropdown menu right corner. the utilization page shows overall infrastructure utilization. this metric aggregates utilization, including build minutes, cache storage, artifacts storage network egress. the compares aggregate total commitment, displaying monetary value percentage value. credit usage : insights tracks credits used app and, need it, workflow given app. build minutes : track how time spent building different machine types, enabling efficient tracking computing resource consumption. you set filters data multiple levels: build minutes app, pipeline, stage, workflow. cache storage : this relevant use remote build cache feature. it shows how storage space cache archives up. artifacts storage : it shows how storage space generated artifacts up. network egress : data transfer build cache external networks clients retrieve artifacts. this includes data downloaded local development environment any ci than bitrise. " });
this.add({id:717, 
title:"Test stats in Insights", 
body:" test stats insights with insights pro, track metrics test case time, allowing analyze historical performance case. insights pro test stats insights available with pro. request pro access ! insights integrates with bitrise test reporting provide historic performance tracking tests. stats enables locate poorly performing tests stability problems. as this, track number test order measure improvement ensure skipped failing don't slip through. " });
this.add({id:718, 
title:"Setting up access to test stats", 
body:" setting access test stats to able view test stats insights, need steps workflow : a testing step runs test cases. the deploy bitrise.io step. we testing steps automatically export results deploy bitrise.io step: use any steps access insights, don't need configure test stats. the are: xcode test ios android unit test ios device testing virtual device testing android flutter test if use any step, just need make sure test results end $bitrise_test_result_dir , automatically exposed environment variable pointing correct path. " });
this.add({id:719, 
title:"Accessing the test stats dashboard", 
body:" accessing test stats dashboard to test stats dashboard: log bitrise account. in right corner, open account selector dropdown menu select workspace. on header, click insights . this takes insights dashboard selected workspace. click test stats tab. " });
this.add({id:720, 
title:"Filtering test stats", 
body:" filtering test stats in right dashboard, filter time range test case properties. filtering test case properties means able filter for: status : filter passed, failed, skipped, inconclusive test stats. branch : filter test stats specific set branches. module : filter test stats particular module package. test suite : filter test stats particular set suite. " });
this.add({id:721, 
title:"Test counts and test summary", 
body:" test counts test summary on test stats dashboard, see number tests previously selected time range, broken status tests. the possible statuses are: passed failed skipped error you use graph track performance test cases time, making easy spot any changes coverage. below test count graph, summary widget shows individual case previously selected time range. you sort cases locate troublesome tests. we support sorting via: total run time : how time credits spent executing test case. runs : total number executions test case. re-runs : number times test case required re-run pass. it indicator flakiness. success rate : percentage completed test runs passed. it doesn't include aborted runs. typical duration : 50th percentile (median) run time test case. slowest duration : 95th percentile run time test case. for test case, recent history chart indicate performance. clicking case takes test page. tips flaky android tests if experiencing flaky android tests, check guide knowledge base article . " });
this.add({id:722, 
title:"Test case history", 
body:" test case history insights tracks metrics test case time, allowing analyze historical performance case. on test case history page, see aggregated statistics particular case. these stats displayed summary widget dashboard. to test case performance detail, look at: duration trend : shows historical performance test case. the chart 50th percentile (median) 95th performance, allowing see getting better worse time how consistency varies. success rate trend : success rate trends percentage successful runs test case time. latest tests : timeline shows history recent runs particular test case, detailed information run. on latest tests chart, hover any run see details. status : status test run, indicated color. repetition : number re-runs test case required. duration : how long test run took. test suite : parent suite test case. branch : git branch containing code test ran against. build number : bitrise build number test ran on. click any test runs bitrise build log ran test. " });
this.add({id:718, 
title:"Setting up access to test stats", 
body:" setting access test stats to able view test stats insights, need steps workflow : a testing step runs test cases. the deploy bitrise.io step. we testing steps automatically export results deploy bitrise.io step: use any steps access insights, don't need configure test stats. the are: xcode test ios android unit test ios device testing virtual device testing android flutter test if use any step, just need make sure test results end $bitrise_test_result_dir , automatically exposed environment variable pointing correct path. " });
this.add({id:719, 
title:"Accessing the test stats dashboard", 
body:" accessing test stats dashboard to test stats dashboard: log bitrise account. in right corner, open account selector dropdown menu select workspace. on header, click insights . this takes insights dashboard selected workspace. click test stats tab. " });
this.add({id:720, 
title:"Filtering test stats", 
body:" filtering test stats in right dashboard, filter time range test case properties. filtering test case properties means able filter for: status : filter passed, failed, skipped, inconclusive test stats. branch : filter test stats specific set branches. module : filter test stats particular module package. test suite : filter test stats particular set suite. " });
this.add({id:721, 
title:"Test counts and test summary", 
body:" test counts test summary on test stats dashboard, see number tests previously selected time range, broken status tests. the possible statuses are: passed failed skipped error you use graph track performance test cases time, making easy spot any changes coverage. below test count graph, summary widget shows individual case previously selected time range. you sort cases locate troublesome tests. we support sorting via: total run time : how time credits spent executing test case. runs : total number executions test case. re-runs : number times test case required re-run pass. it indicator flakiness. success rate : percentage completed test runs passed. it doesn't include aborted runs. typical duration : 50th percentile (median) run time test case. slowest duration : 95th percentile run time test case. for test case, recent history chart indicate performance. clicking case takes test page. tips flaky android tests if experiencing flaky android tests, check guide knowledge base article . " });
this.add({id:722, 
title:"Test case history", 
body:" test case history insights tracks metrics test case time, allowing analyze historical performance case. on test case history page, see aggregated statistics particular case. these stats displayed summary widget dashboard. to test case performance detail, look at: duration trend : shows historical performance test case. the chart 50th percentile (median) 95th performance, allowing see getting better worse time how consistency varies. success rate trend : success rate trends percentage successful runs test case time. latest tests : timeline shows history recent runs particular test case, detailed information run. on latest tests chart, hover any run see details. status : status test run, indicated color. repetition : number re-runs test case required. duration : how long test run took. test suite : parent suite test case. branch : git branch containing code test ran against. build number : bitrise build number test ran on. click any test runs bitrise build log ran test. " });
this.add({id:723, 
title:"Bitrise CLI", 
body:" bitrise cli the bitrise cli bitrise's open source runner. used run builds bitrise.io . you install run builds locally. the bitrise cli bitrise's open source runner. used run builds bitrise.io install run builds locally. to use cli locally, don't need bitrise account. you just install cli. in section documentation, you'll learn how install update cli, run builds manage secrets locally, set use offline workflow editor. " });
this.add({id:724, 
title:"Installing and updating the Bitrise CLI", 
body:" installing updating bitrise cli installing bitrise cli super simple. it distributed single binary macos linux acquire ways. all need download make executable. " });
this.add({id:725, 
title:"Installing the Bitrise CLI with curl", 
body:" installing bitrise cli with curl run following command bash shell: curl -fl https:\/\/github.com\/bitrise-io\/bitrise\/releases\/latest\/download\/bitrise-$(uname -s)-$(uname -m) > \/usr\/local\/bin\/bitrise you check latest release bitrise cli releases page. make downloaded binary executable: chmod +x \/usr\/local\/bin\/bitrise run bitrise setup . this verify required bitrise run installed available. if skip this, cli perform setup first time bitrise run . " });
this.add({id:726, 
title:"Installing the Bitrise CLI with Homebrew", 
body:" installing bitrise cli with homebrew if homebrew package manager installed mac, use install bitrise cli. open terminal app mac run: brew update && install bitrise\n run bitrise setup . this verify required bitrise run installed available. if skip this, cli perform setup first time bitrise run . " });
this.add({id:727, 
title:"Updating the Bitrise CLI", 
body:" updating bitrise cli updating bitrise cli easy, doesn’t matter installed with homebrew github release. simply run bitrise update - that’s it! the cli checks updates day notifies soon new version. " });
this.add({id:728, 
title:"Adding a new app from a CLI", 
body:" adding new app cli you register bitrise app command line interface start building. create bitrise.yml file advance use that, project scanner scan generate you. you easily register new bitrise app any command line interface: process guided simple follow. and it’s fast: if, example, bitrise.yml file want use app, wait project scanner detect app type generate bitrise.yml file. just plug existing file good go! adding app with api you use bitrise api add new app: adding and managing apps before try adding new app bitrise cli, make sure things order: you need bitrise account, with connected git provider. your project local git repository machine remote provider. if want use ssh key access repository, remote repository url ssh ! for example, git@github.com:example-user\/example.git . you create bitrise.yml advance able add app creation process. this optional: project scanner generate process, just like website! this procedure guides adding app bitrise access with ssh key. requires app’s remote repository url, git@github.com:example-user\/example.git . you can, course, use https url access remote repository, too: case, set ssh key app. we recommend using urls public apps (open source projects). go create new app cli page. you reach page dashboard : click add new app button right, select add new app cli . set account app, privacy app. copy curl command there. open command line interface. change directory project’s location. paste curl command hit enter . select repository url: choose ssh option. this prompt comes local repository’s remote ssh url. if repository https url, won’t see prompt. remote url: git@github.com:example-user\/example.git\n\n? select repository url::\n https:\/\/github.com\/example-user\/example.git\n > ssh:\/\/git@github.com:example-user\/example.git\n register ssh key. specify how bitrise able access source code: \n > automatic\n add ssh you select automatic registration choose add own. if choose automatic, bitrise automatically generate key pair. need use additional private repositories submodules, i option prompted follow instructions. not, select no, auto-add ssh option: adds public repository. if choose add own, provide path ssh key file: enter manually, drag drop file, input path. decide bitrise.yml file want upload. ? what bitrise.yml want upload? \n > run scanner generate new bitrise.yml\n use current directory specify manually you scanner generate based project files provide file. if repository contains bitrise.yml file, path automatically filled in. select branch want use. the default option current active branch. the current branch is: master (tracking: origin master),\n \n? do want run scanner branch?\n > yes\n no\n if select no , prompted check branch wish use, hit enter so scanner start. once scanner done, detect app’s type switch manual configuration. manual configuration means select app (ios, android, react native, flutter, so on) provide path relevant file. for example, config.xml case ionic app. in guide, we’ll proceed with automatic detection. select stack want use. if scanner detects project type, stack automatically recommended change cli want to. performed manual configuration described above, choose stack, too. finish process with setting webhooks code signing files. you decide skip webhook registration it’s required automatically trigger builds bitrise. for information: webhooks you upload code signing files: depending app’s type, asked want ios files and\/or android keystore file. any time website. for information: code signing and that’s it! you done: url new app printed out, view dashboard . " });
this.add({id:729, 
title:"Initializing a Bitrise project locally", 
body:" initializing bitrise project locally you use bitrise init plugin initialize new bitrise app computer, adding online. when add new app bitrise, detect type project generate basic bitrise.yml file you, with workflows appropriate project type. with bitrise cli, make work computer: install bitrise cli computer. make sure $gopath\/bin added $path computer. by default, go workspace $home\/go\/bin . installing go if don't go installed computer, bitrise init automatically install you. start bitrise init plugin: bitrise init wait plugin runs available scanners determine project type. depending detected project type, scanner asks input. follow instructions. for example, with ios project, asks user specify export method: select: ipa export method\nplease select list:\n[1] : app-store\n[2] ad-hoc\n[3] enterprise\n[4] development\n(type option's number, hit enter) based scanner outputs, plugin generates bitrise configuration, with bitrise.yml file. in automatically generated workflows, required input valid value. the plugin generates bitrise.secrets.yml file. you store secrets file. " });
this.add({id:730, 
title:"Installing and upgrading the offline Workflow Editor", 
body:" installing upgrading offline workflow editor bitrise workflow editor designed way run offline mac\/pc having log bitrise.io . the workflow editor open source, repository . you join discussion workflow editor . " });
this.add({id:731, 
title:"Installing the offline Workflow Editor to your computer", 
body:" installing offline workflow editor install bitrise cli . make sure go installed local computer. run bitrise setup install offline workflow editor bitrise plugins. running bitrise setup checks bitrise core tools, os x plugins toolkits installed local machine. if not, command automatically install them. " });
this.add({id:732, 
title:"Starting the offline Workflow Editor", 
body:" starting offline workflow editor cd directory bitrise.yml . run bitrise :workflow-editor command start offline session. here overall look feel: " });
this.add({id:733, 
title:"Upgrading Workflow Editor version", 
body:" upgrading workflow editor version you upgrade latest version workflow editor running bitrise plugin update workflow-editor command. " });
this.add({id:734, 
title:"Running your first local build with the CLI", 
body:" running first local build with cli run bitrise build locally with cli bitrise.yml file. to so, use bitrise run command correct yaml configuration. to run bitrise build locally, need to: install bitrise cli . a build configuration: is, bitrise.yml file. if use bitrise.io , download app’s bitrise.yml there: open workflow editor app bitrise.io , bitrise.yml section. if want create bitrise.yml yourself, simply create bitrise.yml file root project. you use base content bitrise.yml : \nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\napp:\n envs:\n - my_name: my name\n\nworkflows:\n test:\n steps:\n script@1.1.3:\n inputs:\n content: echo \"hello ${my_name}!\" this defines environment variable with workflow called test . to run build: open terminal cli app. go directory saved bitrise.yml file. run bitrise run with workflow defined file. bitrise run test that’s it: first build running with bitrise cli. " });
this.add({id:735, 
title:"Managing Secrets locally", 
body:" managing secrets locally when run build locally, with bitrise cli, secrets read .bitrise.secrets.yml file, expected directory bitrise.yml is, run bitrise run command. when run build locally, with bitrise cli, secrets read .bitrise.secrets.yml file, expected directory bitrise.yml is, run bitrise run command. if want store secrets else, specify location file with --inventory flag bitrise run command. for example: . bitrise run my-workflow --inventory \/path\/to\/secrets.yml make sure gitignore secrets file as best practice, make sure .bitrise.secrets.yml added .gitignore , so committed repository! the best gitignore starts with .bitrise , adding line: .bitrise* .gitignore file. the secrets yaml file include root envs: item list secret environment variables. envs:\n- secret_env_one: first secret value\n- secret_env_two: second value the secrets defined .bitrise.secrets.yml file used just like any environment variable. format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n content: |\n #!\/bin\/bash\n echo \"secret_env_one: ${secret_env_one}\"\n \"secret_env_two: ${secret_env_two}\" you just bitrise run test directory, script step print values specified secrets file: secret_env_one: first secret value\nsecret_env_two: second value as secrets first environment variables processed execute bitrise run command, use secrets bitrise.yml . " });
this.add({id:724, 
title:"Installing and updating the Bitrise CLI", 
body:" installing updating bitrise cli installing bitrise cli super simple. it distributed single binary macos linux acquire ways. all need download make executable. " });
this.add({id:725, 
title:"Installing the Bitrise CLI with curl", 
body:" installing bitrise cli with curl run following command bash shell: curl -fl https:\/\/github.com\/bitrise-io\/bitrise\/releases\/latest\/download\/bitrise-$(uname -s)-$(uname -m) > \/usr\/local\/bin\/bitrise you check latest release bitrise cli releases page. make downloaded binary executable: chmod +x \/usr\/local\/bin\/bitrise run bitrise setup . this verify required bitrise run installed available. if skip this, cli perform setup first time bitrise run . " });
this.add({id:726, 
title:"Installing the Bitrise CLI with Homebrew", 
body:" installing bitrise cli with homebrew if homebrew package manager installed mac, use install bitrise cli. open terminal app mac run: brew update && install bitrise\n run bitrise setup . this verify required bitrise run installed available. if skip this, cli perform setup first time bitrise run . " });
this.add({id:727, 
title:"Updating the Bitrise CLI", 
body:" updating bitrise cli updating bitrise cli easy, doesn’t matter installed with homebrew github release. simply run bitrise update - that’s it! the cli checks updates day notifies soon new version. " });
this.add({id:725, 
title:"Installing the Bitrise CLI with curl", 
body:" installing bitrise cli with curl run following command bash shell: curl -fl https:\/\/github.com\/bitrise-io\/bitrise\/releases\/latest\/download\/bitrise-$(uname -s)-$(uname -m) > \/usr\/local\/bin\/bitrise you check latest release bitrise cli releases page. make downloaded binary executable: chmod +x \/usr\/local\/bin\/bitrise run bitrise setup . this verify required bitrise run installed available. if skip this, cli perform setup first time bitrise run . " });
this.add({id:726, 
title:"Installing the Bitrise CLI with Homebrew", 
body:" installing bitrise cli with homebrew if homebrew package manager installed mac, use install bitrise cli. open terminal app mac run: brew update && install bitrise\n run bitrise setup . this verify required bitrise run installed available. if skip this, cli perform setup first time bitrise run . " });
this.add({id:727, 
title:"Updating the Bitrise CLI", 
body:" updating bitrise cli updating bitrise cli easy, doesn’t matter installed with homebrew github release. simply run bitrise update - that’s it! the cli checks updates day notifies soon new version. " });
this.add({id:728, 
title:"Adding a new app from a CLI", 
body:" adding new app cli you register bitrise app command line interface start building. create bitrise.yml file advance use that, project scanner scan generate you. you easily register new bitrise app any command line interface: process guided simple follow. and it’s fast: if, example, bitrise.yml file want use app, wait project scanner detect app type generate bitrise.yml file. just plug existing file good go! adding app with api you use bitrise api add new app: adding and managing apps before try adding new app bitrise cli, make sure things order: you need bitrise account, with connected git provider. your project local git repository machine remote provider. if want use ssh key access repository, remote repository url ssh ! for example, git@github.com:example-user\/example.git . you create bitrise.yml advance able add app creation process. this optional: project scanner generate process, just like website! this procedure guides adding app bitrise access with ssh key. requires app’s remote repository url, git@github.com:example-user\/example.git . you can, course, use https url access remote repository, too: case, set ssh key app. we recommend using urls public apps (open source projects). go create new app cli page. you reach page dashboard : click add new app button right, select add new app cli . set account app, privacy app. copy curl command there. open command line interface. change directory project’s location. paste curl command hit enter . select repository url: choose ssh option. this prompt comes local repository’s remote ssh url. if repository https url, won’t see prompt. remote url: git@github.com:example-user\/example.git\n\n? select repository url::\n https:\/\/github.com\/example-user\/example.git\n > ssh:\/\/git@github.com:example-user\/example.git\n register ssh key. specify how bitrise able access source code: \n > automatic\n add ssh you select automatic registration choose add own. if choose automatic, bitrise automatically generate key pair. need use additional private repositories submodules, i option prompted follow instructions. not, select no, auto-add ssh option: adds public repository. if choose add own, provide path ssh key file: enter manually, drag drop file, input path. decide bitrise.yml file want upload. ? what bitrise.yml want upload? \n > run scanner generate new bitrise.yml\n use current directory specify manually you scanner generate based project files provide file. if repository contains bitrise.yml file, path automatically filled in. select branch want use. the default option current active branch. the current branch is: master (tracking: origin master),\n \n? do want run scanner branch?\n > yes\n no\n if select no , prompted check branch wish use, hit enter so scanner start. once scanner done, detect app’s type switch manual configuration. manual configuration means select app (ios, android, react native, flutter, so on) provide path relevant file. for example, config.xml case ionic app. in guide, we’ll proceed with automatic detection. select stack want use. if scanner detects project type, stack automatically recommended change cli want to. performed manual configuration described above, choose stack, too. finish process with setting webhooks code signing files. you decide skip webhook registration it’s required automatically trigger builds bitrise. for information: webhooks you upload code signing files: depending app’s type, asked want ios files and\/or android keystore file. any time website. for information: code signing and that’s it! you done: url new app printed out, view dashboard . " });
this.add({id:729, 
title:"Initializing a Bitrise project locally", 
body:" initializing bitrise project locally you use bitrise init plugin initialize new bitrise app computer, adding online. when add new app bitrise, detect type project generate basic bitrise.yml file you, with workflows appropriate project type. with bitrise cli, make work computer: install bitrise cli computer. make sure $gopath\/bin added $path computer. by default, go workspace $home\/go\/bin . installing go if don't go installed computer, bitrise init automatically install you. start bitrise init plugin: bitrise init wait plugin runs available scanners determine project type. depending detected project type, scanner asks input. follow instructions. for example, with ios project, asks user specify export method: select: ipa export method\nplease select list:\n[1] : app-store\n[2] ad-hoc\n[3] enterprise\n[4] development\n(type option's number, hit enter) based scanner outputs, plugin generates bitrise configuration, with bitrise.yml file. in automatically generated workflows, required input valid value. the plugin generates bitrise.secrets.yml file. you store secrets file. " });
this.add({id:730, 
title:"Installing and upgrading the offline Workflow Editor", 
body:" installing upgrading offline workflow editor bitrise workflow editor designed way run offline mac\/pc having log bitrise.io . the workflow editor open source, repository . you join discussion workflow editor . " });
this.add({id:731, 
title:"Installing the offline Workflow Editor to your computer", 
body:" installing offline workflow editor install bitrise cli . make sure go installed local computer. run bitrise setup install offline workflow editor bitrise plugins. running bitrise setup checks bitrise core tools, os x plugins toolkits installed local machine. if not, command automatically install them. " });
this.add({id:732, 
title:"Starting the offline Workflow Editor", 
body:" starting offline workflow editor cd directory bitrise.yml . run bitrise :workflow-editor command start offline session. here overall look feel: " });
this.add({id:733, 
title:"Upgrading Workflow Editor version", 
body:" upgrading workflow editor version you upgrade latest version workflow editor running bitrise plugin update workflow-editor command. " });
this.add({id:731, 
title:"Installing the offline Workflow Editor to your computer", 
body:" installing offline workflow editor install bitrise cli . make sure go installed local computer. run bitrise setup install offline workflow editor bitrise plugins. running bitrise setup checks bitrise core tools, os x plugins toolkits installed local machine. if not, command automatically install them. " });
this.add({id:732, 
title:"Starting the offline Workflow Editor", 
body:" starting offline workflow editor cd directory bitrise.yml . run bitrise :workflow-editor command start offline session. here overall look feel: " });
this.add({id:733, 
title:"Upgrading Workflow Editor version", 
body:" upgrading workflow editor version you upgrade latest version workflow editor running bitrise plugin update workflow-editor command. " });
this.add({id:734, 
title:"Running your first local build with the CLI", 
body:" running first local build with cli run bitrise build locally with cli bitrise.yml file. to so, use bitrise run command correct yaml configuration. to run bitrise build locally, need to: install bitrise cli . a build configuration: is, bitrise.yml file. if use bitrise.io , download app’s bitrise.yml there: open workflow editor app bitrise.io , bitrise.yml section. if want create bitrise.yml yourself, simply create bitrise.yml file root project. you use base content bitrise.yml : \nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\napp:\n envs:\n - my_name: my name\n\nworkflows:\n test:\n steps:\n script@1.1.3:\n inputs:\n content: echo \"hello ${my_name}!\" this defines environment variable with workflow called test . to run build: open terminal cli app. go directory saved bitrise.yml file. run bitrise run with workflow defined file. bitrise run test that’s it: first build running with bitrise cli. " });
this.add({id:735, 
title:"Managing Secrets locally", 
body:" managing secrets locally when run build locally, with bitrise cli, secrets read .bitrise.secrets.yml file, expected directory bitrise.yml is, run bitrise run command. when run build locally, with bitrise cli, secrets read .bitrise.secrets.yml file, expected directory bitrise.yml is, run bitrise run command. if want store secrets else, specify location file with --inventory flag bitrise run command. for example: . bitrise run my-workflow --inventory \/path\/to\/secrets.yml make sure gitignore secrets file as best practice, make sure .bitrise.secrets.yml added .gitignore , so committed repository! the best gitignore starts with .bitrise , adding line: .bitrise* .gitignore file. the secrets yaml file include root envs: item list secret environment variables. envs:\n- secret_env_one: first secret value\n- secret_env_two: second value the secrets defined .bitrise.secrets.yml file used just like any environment variable. format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n content: |\n #!\/bin\/bash\n echo \"secret_env_one: ${secret_env_one}\"\n \"secret_env_two: ${secret_env_two}\" you just bitrise run test directory, script step print values specified secrets file: secret_env_one: first secret value\nsecret_env_two: second value as secrets first environment variables processed execute bitrise run command, use secrets bitrise.yml . " });
this.add({id:736, 
title:"API", 
body:" api the bitrise api allows build deep, custom integrations with preferred tools processes create efficient development pipelines. the bitrise api allows build deep, custom integrations with preferred tools processes create efficient development pipelines. the api provides with control - access features data available bitrise website cli. by using api, gain ability fully customize bitrise’s functionality fit process. the api work-in-progress the api work-in-progress: add new endpoints possibly update existing ones future. you track progress api: join discussion ! follow notified new endpoints changes, announce there. feel free contribute! if want request new api feature endpoint, so! the bitrise api’s host is: https:\/\/api.bitrise.io\/ every endpoint root versioned. the version included url right host: example, https:\/\/api.bitrise.io\/v0.1\/me endpoint user account. right version, v0.1 . there’s long term compatibility promise v0.1 , try best break unless to. once we’re happy with v0.1 we’ll “freeze” v1.0 , we’ll provide long term support. " });
this.add({id:737, 
title:"Authenticating with the Bitrise API", 
body:" authenticating with bitrise api you need create personal access token authenticate with bitrise api. the needed endpoints. the current api supports types authentication: user-generated personal access tokens . workspace api tokens. every api endpoint requires authentication, “root” url ( https:\/\/api.bitrise.io ). create personal access token workspace api token . save secure way. add authorization header with access token api calls. for example, following retrieves list apps workspace access to: curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps' -h 'authorization: <access-token>'\n 'accept: application\/json' " });
this.add({id:738, 
title:"Pagination of API calls", 
body:" pagination api calls with bitrise api, use pagination iterate list items responses certain endpoints. you configure properties pagination. when endpoint returns list items, single response. you’ll iterate pages retrieve items. the response endpoints include paging object, with total_item_count page_item_limit properties. if “next” page available, it’ll include “anchor” item. for example, response app slug first page. {\n \"data\": [ ... ],\n \"paging\": \"total_item_count\": 3,\n \"page_item_limit\": 2,\n \"next\": \"518e869d56f2adfd\"\n }\n}\n the property paging object the property paging object included there’s page available. if property inside paging means there’s page retrieve. limit number response pages with limit parameter: https:\/\/api.bitrise.io\/v0.1\/me\/apps?limit=10 this sets page_item_limit property 10. the default (and maximum) value parameter 50. iterate response items: call endpoint any pagination parameters. from response process paging object. if paging object includes item, exact endpoint with additional next= query parameter, pass value got response parameter. iterating registered apps call https:\/\/api.bitrise.io\/v0.1\/me\/apps . process items ( data property). check paging (root) property. if there’s property inside paging , endpoint again, with query parameter example: https:\/\/api.bitrise.io\/v0.1\/me\/apps?next=nextvalue , nextvalue value property got previous response. repeat paging object does include property, means page received was one. " });
this.add({id:739, 
title:"Adding and managing apps", 
body:" adding managing apps you add new apps bitrise with api: app , generate ssh keys, set app’s initial configuration. you add new apps bitrise with api: app , generate ssh keys, set app’s initial configuration. in addition, list apps belonging, example, single user specific workspace . " });
this.add({id:740, 
title:"Adding a new app with the API", 
body:" adding new app with api endpoints used adding new app with bitrise api endpoints function required role app's team post \/apps\/register add new app. n\/a post \/apps\/{app-slug}\/register-ssh-key add ssh key specific app. owner admin post \/apps\/{app-slug}\/finish save application end add process. n\/a post \/apps\/{app-slug}\/bitrise.yml upload new bitrise.yml application. owner admin apps with https git urls the procedure examples aimed adding private app with ssh git url. if want add https url, skip key. register app calling register endpoint setting required parameters. you need set git provider, repository url, slug appears owner repository. add workspace app: legacy naming conventions, organization_slug parameter. curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n \"provider\": \"github\",\n \"is_public\": false,\n \"organization_slug\": \"$org_slug\"\n \"repo_url\": \"git@github.com:api_demo\/example-repository.git\",\n \"type\": \"git\",\n \"git_repo_slug\": \"example-repository\",\n \"git_owner\": \"api_demo\"\n }' changing app by default, register app, inherit git repository. if like add app with different name, append \"title\" parameter post request using following syntax: curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n ...\n \"title\": \"string\"\n }'\n you change app creating it, sending patch request calling apps endpoint. for information, see managing existing app . once done, register-ssh-key endpoint set ssh keys created so bitrise clone repository running build. you need provide private public ssh key. please note wish copy key manually, escape line breaks with \\n . you set want automatically register public key git provider: is_register_key_into_provider_service parameter true false. curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/register-ssh-key' -d \\\n'{\n \"auth_ssh_private_key\": \"your-private-ssh-key\",\n \"auth_ssh_public_key\": \"your-public-ssh-key\",\n \"is_register_key_into_provider_service\": false\n }' finish app registration process calling finish endpoint. this endpoint allows configure apps: set project type, stack build run (this vary based app), initial configuration settings. you set environment variables, immediately specify workspace owner application. please note mode parameter set value manual . curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/finish' -d \\\n'{\n \"project_type\": \"ios\",\n \"stack_id\": \"osx-xcode-13.2.x\",\n \"config\": \"default-ios-config\",\n \"mode\": \"manual\",\n \"envs\": {\n \"env1\": \"val1\",\n \"env2\": \"val2\"\n },\n \"organization_slug\": \"e1ec3dea540bcf21\"\n }'\n " });
this.add({id:741, 
title:"Managing an existing app", 
body:" managing existing app endpoints related managing existing app with bitrise api endpoints function required role app's team get \/apps get list apps. any get \/apps\/{app-slug} get specific app. any get \/apps\/{app-slug}\/bitrise.yml get bitrise.yml specific app. owner admin get \/apps\/{app-slug}\/branches list branches app’s repository. any get \/organizations\/{org-slug}\/apps get list apps workspace. any get \/users\/{user-slug}\/apps get list apps user. any patch \/apps\/{app-slug} update existing app's parameters owner admin the response any get request regarding apps contain app slug, project type, git provider, repository’s owner url: {\n \"data\": [\n \"slug\": \"eeeeefffff00000\",\n \"title\": \"sample-app\",\n \"project_type\": \"android\",\n \"provider\": \"github\",\n \"repo_owner\": \"example-user\",\n \"repo_url\": \"git@github.com:example-user\/sample-app.git\",\n \"repo_slug\": \"android-gradle-kotlin-dsl\",\n \"is_disabled\": false,\n \"status\": -1,\n \"is_public\": \"owner\": \"account_type\": \"organization\",\n \"name\": \"test org\",\n \"fffffeeeee00000\"\n },\n \"avatar_url\": null\n you download existing bitrise.yml file any app: response contain yaml configuration. would like change title default git branch existing app? you update app's parameters calling patch method the  apps  endpoint. required role you admin owner role app's team update existing parameters using bitrise api. for complete list user roles role cheatsheets, check  user roles app teams . the required parameter is: slug the optional parameters are: apple_credential_user_id : the new apple credential user id (recommendation: use ui set this) apple_credential_user_slug : the new apple credential user slug (recommendation: use ui set this) default_branch : the new default branch application. is_public : the new value application publicly visible. repository_url : the new repository url application. services_credential_user_id : the new service credential user id (recommendation: use ui set this). title : the new title application. changing default branch existing app request: curl -x 'patch' 'https:\/\/api.bitrise.io\/v0.1\/apps\/the-app-slug' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\"default_branch\": \"main\", \"title\": \"example_app_title_3\"}' " });
this.add({id:742, 
title:"Managing app access roles for Workspace groups", 
body:" managing app access roles workspace groups you grant workspace groups access application teams bitrise. it means members group able work app role assigned group . list groups granted given role app's team using get \/apps\/{app-slug}\/roles\/{role-name} endpoint. the role-name parameter takes possible values: admin manager : equivalent developer role bitrise.io. member : equivalent tester\/qa bitrise.io. in example, we're querying list workspace groups granted admin role specific app: curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'authorization: access-token' grant access existing workspace groups using put \/apps\/{app-slug}\/roles\/{role-name} endpoint. this endpoint requires groups object contains slugs groups granted access with specified role. specify groups this endpoint replaces previous groups specified role app's team. if, example, grant alpha beta admin team, access app afterwards. if group - let's delta previously removed. getting group slugs to group slugs workspace, use get \/organizations\/{org-slug}\/groups endpoint. in following example, we'll granting groups admin access: curl -x 'put' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'content-type: -d '{\n \"groups\": [\n \"group-slug-1\", \"group-slug-2\"\n ]\n}' " });
this.add({id:743, 
title:"Deleting an app using the API", 
body:" deleting app using api deletion final be aware undo deleting app. once delete it, way recover you delete apps with bitrise api. the required parameter app slug want delete: curl -x delete -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/the-app-slug' " });
this.add({id:744, 
title:"Uploading a new bitrise.yml file", 
body:" uploading new bitrise.yml file required role you admin owner role app's team upload new bitrise.yml file. for complete list user roles role cheatsheets, check user roles on app teams . the bitrise.yml file contains configuration builds. you modify current api posting yaml configuration. in example, are: creating bitrise.yml with format version 11. setting bitrise step library default source. setting stack xcode 14. setting bitrise_project_path environment variable point build.gradle file. adding script step. creating trigger map triggers primary workflow code pushed any branch app's repository. curl --fail -x post -h \"authorization: $access_token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/$app_slug\/bitrise.yml\" -d \\\n'{\n \"app_config_datastore_yaml\": {\n \"format_version\": 11,\n \"default_step_lib_source\": \"https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\",\n \"meta\": \"bitrise.io\": \"stack\": \"osx-xcode-14.0.x\"\n }\n },\n \"app\": \"envs\": [\n \"bitrise_project_path\": \"build.gradle\",\n \"opts\": \"is_expand\": false\n ]\n \"workflows\": \"primary\": \"steps\": \"script@1\": {}\n \"trigger_map\": \"push_branch\": \"*\",\n \"workflow\": \"primary\"\n }\n}' by calling endpoint, replace app’s current bitrise.yml file. you can, course, modify uploaded bitrise.yml api website itself. " });
this.add({id:745, 
title:"Changing the location of the app's bitrise.yml file", 
body:" changing location app's bitrise.yml file the app's bitrise.yml configuration file stored places: on bitrise.io. this default setting apps. in app's repository. this way control versioning maintenance config file. you use graphical workflow editor bitrise.io modify configuration need commit changes repository. you change location file using api. admin access required both endpoints related location bitrise.yml file require admin level access app. with get\/apps\/{app-slug}\/bitrise.yml\/config endpoint, location file. location means calling endpoint tells file stored bitrise.io repository. the takes parameters returns values response: \"location\": \"bitrise.io\" \"location\": \"repository\" curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/bitrise.yml\/config' -h 'accept: application\/json' 'authorization: access-token' with put\/apps\/{app-slug}\/bitrise.yml\/config endpoint, change location file: is, tell bitrise look config file bitrise.io repository. this endpoint takes values json object: \"location\": \"bitrise.io\" store config file bitrise.io. \"location\": \"repository\" store config file repository. commit config file repository please note changing location repository merely tells bitrise look bitrise.yml file app's repository. if does exist repository, endpoint won't return error able run builds bitrise config file. curl -x 'put' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/bitrise.yml\/config' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"location\": \"bitrise.io\"\n}' " });
this.add({id:746, 
title:"Changing machine types in all apps at the same time", 
body:" changing machine types apps time endpoints used migrate machine types endpoints function required role patch \/user\/{user-slug}\/apps\/machine_types migrate specified machine type apps owned user. n\/a patch \/organizations\/{org-slug}\/apps\/machine_types migrate specified machine type apps owned workspace. workspace owner the bitrise api provides endpoints allow switch machine type apps owned user workspace . the endpoints parse bitrise.yml file app, look occurrences specified machine type, replace with type. for example, switch m1 medium large apps endpoint. both endpoints parameters: from_machine : the machine type want switch from. to_machine : the machine type want switch to. you list available machine types here: build machine types . if endpoints don't machine type specified from_machine parameter, return 200 response, with migrated_apps object. default workflow-specific stacks the endpoints change machine types default stacks workflow-specific stacks. migrating apps owned user m1 medium machines large machines: curl -x 'patch' \\\n 'https:\/\/api.bitrise.io\/v0.1\/user\/user-slug\/apps\/machine_types' -h 'accept: application\/json' 'authorization: personal-access-token' 'content-type: -d '{\n \"from_machine\": \"g2-m1.4core\",\n \"to_machine\": \"g2-m1.8core\"\n}' migrating apps owned workspace m1 max medium machines large machines: curl -x 'patch' \\\n 'https:\/\/api.bitrise.io\/v0.1\/organizations\/workspace-slug\/apps\/machine_types' -h 'accept: application\/json' 'authorization: personal-access-token' 'content-type: -d '{\n \"from_machine\": \"g2-m1-max.5core\",\n \"to_machine\": \"g2-m1-max.10core\"\n}' successful respose {\n \"message\": \"the migration was successful.\",\n \"migrated_apps\": [\n \"android-sample (8f41200-e5a5eee17)\",\n \"sample-swift-project (c291b04-784ca8773)\",\n ]\n} " });
this.add({id:747, 
title:"Managing app notifications", 
body:" managing app notifications you change email notification settings apps api any time with patch\/apps\/{app-slug}\/update-email-notifications endpoint. the endpoint takes parameters: on_failure : email notification settings failed builds. on_success : email notification settings successful builds. both parameters possible values: : always send notification. the default value failed builds. : never send notification. change : send notification build status changes compared previous build branch. the default value successful builds. for example, wish receive notification failed build previous was successful, need set value on_failure parameter change (replace app-slug example with app's slug access-token personal access token ): curl -x 'patch' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/update-email-notifications' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"on_failure\": \"change\",\n}' " });
this.add({id:748, 
title:"Triggering and aborting builds", 
body:" triggering aborting builds you use bitrise api trigger abort builds apps. define parameters build: example, branch, tag git commit use. custom environment variables defined well. endpoints related triggering aborting builds with api endpoints function required role app's team post \/apps\/{app-slug}\/builds trigger new build. owner, admin, developer post \/apps\/{app-slug}\/builds\/{build-slug}\/abort abort specific build. owner, admin, developer you trigger abort builds with bitrise api. define parameters build: example, branch, tag git commit use. custom environment variables defined well. " });
this.add({id:749, 
title:"Triggering a new build with the API", 
body:" triggering new build with api to trigger new build with bitrise api, \/apps\/{app-slug}\/builds endpoint. you need specify app slug build parameter json object: a git tag commit hash a branch a workflow id you valid build trigger set map app's bitrise.yml file. required role you developer, admin, owner role app's team trigger new build using api. for complete list user roles role cheatsheets, check user roles on app teams . the json object contain hook_info object with type key bitrise value key. here’s minimal sample json body specifies main value branch parameter: {\n \"hook_info\": \"type\": \"bitrise\",\n },\n \"build_params\": \"branch\": \"main\"\n }\n} and here’s curl request syntax triggering build main branch: curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"build_params\": {\n \"branch\": \"main\"\n },\n \"hook_info\": \"type\": \"bitrise\"\n }\n}'\n interactive curl configurator you interactive curl configurator clicking start\/schedule build button app’s bitrise.io page switching advanced mode popup. at popup curl call, based parameters specify popup. in previous example, passed json payload string: precise, object serialized string. you pass object (for example, want javascript). to so, include root payload element or, alternatively, set json object value payload post parameter. here’s jquery example using payload parameter: $.post(\"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/\", {\n \"payload\":{\n \"hook_info\":{\n \"type\":\"bitrise\",\n },\n \"build_params\":{\n \"branch\":\"main\"\n }\n }\n}) you specify different build parameters triggering build. the set build_params object. " });
this.add({id:750, 
title:"Setting a branch, commit or tag to build", 
body:" setting branch, commit tag build you set git-specific parameters call. the branch parameter specifies source branch built. this git commit or, case pull request build, request. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n\t\"hook_info\": {\n\t\t\"type\": \"bitrise\"\n\t},\n\t\"build_params\": {\n\t\t\"branch\": \"main\"\n\t}\n }' you build specific git commit tag: just need set hash tag build_params object. you set commit message build with commit_message parameter. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"commit_hash\": \"0000ffffeeeee\",\n \"commit_message\": \"testing\"\n }\n}'\n parameter priority the git clone step following parameter priority: commit_hash tag branch if provide multiple parameters, parameter with lower priority ignored. the ignored parameters logged. they available steps visible build’s details & add-ons page git clone step use specific parameter checkout. " });
this.add({id:751, 
title:"Setting parameters for pull request builds", 
body:" setting parameters pull request builds for pull request build, use branch_dest parameter set destination target branch pull request. the pr merged that, bitrise build app based how code look like merging. this happens automatically triggered webhook, example. the branch_repo_owner branch_dest_repo_owner parameters used identify owners repositories, unambiguously branches involved pull request. pull request builds forks if specify branch_repo_owner branch_dest_repo_owner parameters, api assume pull request builds coming fork. as such, hold pending manual approval: approving pull request builds . to identify pr itself, use pull_request_id parameter: takes integer; example, number pr github. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"commit_hash\": \"fffff000000eeeeee\",\n \"pull_request_id\": 1\n }\n}' if git provider supports it, use pull_request_merge_branch parameter build pre-merged state branch pr. another alternative pull_request_head_branch parameter: special git ref point source pr. if want trigger build pr opened fork repository, use pull_request_repository_url parameter. the value url fork. " });
this.add({id:752, 
title:"Skipping Git status reports", 
body:" skipping git status reports if webhook set up, bitrise send status reports git provider builds. however, disabled api: use skip_git_status_report parameter. if set true , build status report sent. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"skip_git_status_report\": true\n }\n}'\n " });
this.add({id:753, 
title:"Specifying Environment Variables", 
body:" specifying environment variables you define additional environment variables (env vars) build. these additional variables handled with priority secrets app env vars , means overwrite env vars defined build configuration (for example, app vars), secrets . define additional env vars with environments parameter. this parameter array objects , item array include mapped_to property. this contain: the key env var. the value env var. replacing env var names by default, env var names inside values replaced triggered build actual value target environment. this behavior disabled setting is_expand flag false . \"environments\":[\n {\"mapped_to\":\"api_test_env\",\"value\":\"this test value\",\"is_expand\":true},\n {\"mapped_to\":\"help_env\",\"value\":\"$home variable contains user's home directory path\",\"is_expand\":false},\n] " });
this.add({id:754, 
title:"Setting a Workflow for the build", 
body:" setting workflow build by default, workflow triggered build selected based content build_params app’s trigger map . this how webhooks select workflow build automatically, based trigger map. with api, overwrite selection specify exactly workflow want use. add workflow_id parameter build_params specify workflow want use specific build. here’s example deploy workflow: curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\": {\n \"type\": \"bitrise\"\n },\n \"build_params\": \"branch\": \"main\",\n \"workflow_id\": \"primary\"\n }\n}' " });
this.add({id:755, 
title:"Aborting a build", 
body:" aborting build you abort running builds, set reason aborting, specify email notifications sent build. required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . to simply abort build, \/apps\/app-slug\/builds\/build-slug\/abort endpoint. it requires parameters: the app slug. the build slug. the build abort parameters body. this left don't want set any specific abort: -d \"{}\" . curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d \"{}\" you set reason aborting build using abort_reason parameter. this parameter takes string app’s build page. curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d '{\"abort_reason\": \"aborted reason\"}'\n normally, aborted builds count failed builds. use abort_with_success parameter abort build count successful one. the status report sent git provider bitrise.io displayed cancelled . curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d '{\"abort_with_success\": true}' depending app settings, bitrise send email notifications team members build aborted. if want notifications, set skip_notifications parameter true . curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d '{\"skip_notifications\": true}' " });
this.add({id:756, 
title:"Incoming and outgoing webhooks", 
body:" incoming outgoing webhooks both incoming outgoing webhooks set with bitrise api. they important automatic build triggering reporting events services. both incoming outgoing webhooks set with bitrise api. they important automatic build triggering reporting build events services. endpoints related incoming outgoing webhooks endpoints function required role app's team post \/apps\/{app-slug}\/register-webhook register incoming webhook specific application. owner admin get \/apps\/{app-slug}\/outgoing-webhooks list outgoing webhooks app. owner admin post \/apps\/{app-slug}\/outgoing-webhooks create outgoing webhook app. owner admin put \/apps\/{app-slug}\/outgoing-webhooks\/{app-webhook-slug} update outgoing webhook app. owner admin delete \/apps\/{app-slug}\/outgoing-webhooks\/{app-webhook-slug} delete outgoing webhook app. owner admin " });
this.add({id:757, 
title:"Registering an incoming webhook with the API", 
body:" registering incoming webhook with api incoming webhooks enable users set automatic triggers apps bitrise: example, bitrise webhook registered github automatically trigger build code pushed repository. required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . to set webhook, connect bitrise account git provider : allows bitrise register webhook automatically. register webhook calling register-webhook endpoint with existing app slug: curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/register-webhook' this register webhook git provider app. afterwards, set automatic triggers website trigger map app’s bitrise.yml file. " });
this.add({id:758, 
title:"Creating outgoing webhooks with the API", 
body:" creating outgoing webhooks with api outgoing webhooks enable integration with services: specifically, used notify services. currently, build event notifications supported. there supported events: triggering finishing build. build status reports notifying git provider build status does require outgoing webhooks. to set outgoing webhook application, need specify app itself creation parameters: the webhook url: service want integrate with bitrise. the events trigger webhook. currently, takes possible values: build . required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . you set custom headers specifying key\/value pair request. a new outgoing webhook with url 'example.webhook.com' request: curl -x post \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/outgoing-webhooks\" -h \"accept: application\/json\" \"authorization: access-token\" \"content-type: -d \"{ \\\"events\\\": [ \\\"build\\\" ], \\\"url\\\": \\\"example.webhook.com\\\", \\\"headers\\\": { \\\"key\\\": \\\"value\\\" }}\"\n response: {\n \"slug\": \"01d72arnh4kr7kmw3dg3nbkxrk\",\n \"url\": \"example.webhook.com\",\n \"events\": [\n \"build\"\n ],\n \"headers\": \"key\": \"value\"\n },\n \"registered_by_addon\":false,\n \"created_at\": \"2019-03-28t14:20:22.436825z\",\n \"updated_at\": \"2019-03-28t14:20:22.436825z\"\n} " });
this.add({id:759, 
title:"Modifying and deleting outgoing webhooks with the API", 
body:" modifying deleting outgoing webhooks with api to modify existing webhook, need specify mandatory parameters request. in words, want change url, request contain valid value events parameter. required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . modifying outgoing webhook request: curl -x put \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/outgoing-webhooks\/webhook-slug\" -h \"accept: application\/json\" \"authorization: access-token\" \"content-type: -d\" { \\\"events\\\": [ \\\"all\\\" ], \\\"headers\\\": \\\"modified\\\": \\\"1212\\\" }, \\\"url\\\": \\\"example2.webhook.com\\\"}\" response: {\n \"data\": \"slug\": \"webhook-slug\",\n \"url\": \"example2.webhook.com\",\n \"events\": [\n \"all\"\n ],\n \"headers\": \"modified\": \"1212\"\n },\n \"registered_by_addon\": false,\n \"created_at\": \"2019-03-28t14:20:22.436825z\",\n \"updated_at\": \"2019-03-28t14:20:22.436825z\"\n }\n} to delete outgoing webhook, need provide app slug webhook request: curl -x delete \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/outgoing-webhooks\/webhook-slug\" -h \"accept: application\/json\" \"authorization: access-token\" " });
this.add({id:760, 
title:"Managing iOS code signing files", 
body:" managing ios code signing files you upload, update, list, delete ios code signing files with bitrise api: separate endpoints certificates provisioning profiles. this guide describes how manage ios code signing files with bitrise api. if you’d like learn ui, check ios code signing you upload, update, list, delete ios code signing files with api. in guide how order use endpoints. endpoints related ios provisioning profiles endpoints function required role app's team post\/apps\/{app-slug}\/provisioning-profiles create provisioning file owner admin post\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug}\/uploaded confirm upload process owner admin patch\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug} update uploaded provisioning file owner admin get\/apps\/{app-slug}\/provisioning-profiles get list uploaded provisioning files owner admin get\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug} retrieve data specific provisioning file owner admin delete\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug} delete uploaded provisioning file owner admin endpoints related ios code signing certificates endpoints function required role app's team post\/apps\/{app-slug}\/build-certificates create build certificate owner admin post\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug}\/uploaded confirm upload process owner admin patch\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug} update uploaded build certificate owner admin get\/apps\/{app-slug}\/build-certificates get list uploaded build certificate owner admin get\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug} retrieve data specific build certificate owner admin delete\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug} delete uploaded build certificate owner admin " });
this.add({id:761, 
title:"Uploading an iOS code signing file", 
body:" uploading ios code signing file required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . you upload ios code signing file (either .p12 certificate provisioning profile) bitrise app choice. this process does not create new file: uploads existing (created downloaded apple developer portal) aws url. it functionally uploading files website: ios code signing with manual provisioning . to upload ios code signing file api: call post method provisioning-profiles build-certificates endpoint create temporary pre-signed upload url expires minutes. the requires existing code signing file (certificate provisioning profile) parameters: upload_file_name : the filepath existing code signing file. for example, \/path\/to\/sample.p12 . upload_file_size : the size file bytes. \/\/ calling endpoint create temporary upload url\ncurl -x post -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles' -d '{\"upload_file_name\":\"sample.provisionprofile\",\"upload_file_size\":2047}' \/\/ the successful response: need \"upload_url\" \"slug\".\n{\n \"data\":{\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe6w\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"upload_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaioc7n256g7j2w2tq%2f20180216%2fus-west-2%2fs3%2faws4_request&x-amz-date=20180216t124240z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e\"\n }\n} the response first contains upload_url parameter. you need use upload_file_name parameter upload file aws with curl call. curl -t sample.provisionprofile 'https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaioc7n256g7j2w2tq%2f20180216%2fus-west-2%2fs3%2faws4_request&x-amz-date=20180216t124240z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e' confirm file upload with post uploaded endpoint: use slug response first post call. this sets processed flag file true . this flag can't changed afterwards! curl -x post -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles\/file-slug\/uploaded' " });
this.add({id:762, 
title:"Updating an uploaded iOS code signing file", 
body:" updating uploaded ios code signing file you perform minor updates uploaded ios code signing file using patch method. if you’ve uploaded file bitrise , visually check any changes code signing & files tab. required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . for example, make provisioning profile protected, set is_protected flag provisioning profiles true . curl -x patch -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles\/provisioning-profile-slug -d '{\"is_protected\":true}'\n for build certificate set attributes modify password too: curl -x patch -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/build-certificates\/build-certificate-slug -d '{\"certificate_password\":\"s0m3-v3ry-s3cr3t-str1ng\"}'\n be careful setting attributes you set is_protected , is_exposed processed attributes files you've uploaded: once is_protected flag set true, changed anymore. when value is_protected true, is_expose flag set value. once processed flag set true, value changed anymore. " });
this.add({id:763, 
title:"Getting a specific iOS code signing file's data", 
body:" getting specific ios code signing file's data required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . retrieve specific ios code signing file’s data with get method provisioning-profiles build-certificates endpoints. the returned data includes, things, file's name, size, download url, current status. the required parameters are: app slug file slug retrieving provisioning profile's data request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles\/provisioning-profile-slug' response: {\n \"data\": \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe6w\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"download_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/prov_profile_documents\/uploads\/80144\/original\/sample.provisionprofile?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaioc7n256g7j2w2tq%2f20180322%2fus-west-2%2fs3%2faws4_request&x-amz-date=20180322t091652z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=6dd7bb3db72aafb2d434da7b1a8f80a82a3a7a0276e84620137ed64de5025ab2\"\n }\n} availability download_url note download_url generated provisioning profile’s is_protected attribute false. " });
this.add({id:764, 
title:"Listing the iOS code signing files of an app", 
body:" listing ios code signing files app required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . wondering how ios code signing files belong app? get list using get method provisioning-profiles build-certificates endpoints. the required parameter is: app slug optional parameters are: next: slug first file response (as string) limit: max number elements page (as integer) default 50. getting provisioning profiles app request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles' response: {\n \"data\": [\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe6w\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false\n },\n \"upload_file_name\":\"sample2.provisionprofile\",\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe5t\",\n \"processed\":true,\n \"is_protected\":true\n }\n ],\n \"paging\": \"page_item_limit\": 50,\n \"total_item_count\": 2\n }\n}\n " });
this.add({id:765, 
title:"Managing files in Generic File Storage", 
body:" managing files generic file storage you upload, delete, update, list any project files generic file storage bitrise. access api workflow editor. you upload, delete, update, list any project files generic file storage section bitrise. endpoints related generic file storage endpoints function required role app's team post\/apps\/{app-slug}\/generic-project-files create generic project file owner admin post\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug}\/uploaded confirm upload process owner admin patch\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug} update uploaded project file owner admin get\/apps\/{app-slug}\/generic-project-files get list uploaded project files owner admin get\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug} retrieve data specific project file owner admin delete\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug} delete uploaded project file owner admin " });
this.add({id:766, 
title:"Creating and uploading files to the Generic File Storage", 
body:" creating uploading files generic file storage required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . you add new files application store generic file storage section code signing tab. when calling relevant api endpoint, new temporary pre-signed upload url created use file generic file storage . (please note pre-signed url time-limited expires 10 minutes.) you'll need to: call post method generic-project-files endpoint. this creates temporary pre-signed upload url. the required parameters are: slug : app slug bitrise app. you opening copying url main page, calling get \/apps endpoint finding app list. upload_file_name : file, including file extension. for example, myfile.txt . the file folder command run. upload_file_size : size file bytes. on macos, running stat -f%z <filename> command. user_env_key : add any user env key. upload file aws using pre-signed upload url. confirm file upload. this sets processed flag true means file available bitrise. this flag can't changed afterwards! creating uploading file creating temporary pre-signed upload url: curl -x post \"https:\/\/api.bitrise.io\/v0.1\/apps\/583806e34b4ff0ff\/generic-project-files\" -h \"accept: application\/json\" \"authorization: 0fgs4dsnxg9sywp3xh9alkbuz7bc01zyjrj3ruhdwssadw7nuqbmhobviwzk76dxrj6md4axk16pfwj-i6a-ua\" \"content-type: -d \"{ \\\"upload_file_name\\\": \\\"test-file\\\", \\\"upload_file_size\\\": 4865, \\\"user_env_key\\\": \\\"test-file\\\"}\" response: {\n \"data\": \"upload_file_name\": \"test-file\",\n \"upload_file_size\": 4865,\n \"slug\": \"01d7f228e7n8q8wqjkjm8fv3xm\",\n \"processed\": false,\n \"is_expose\": true,\n \"is_protected\": \"upload_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/test-file?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190402%2fus-west-2%2fs3%2faws4_request&x-amz-date=20190402t125827z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\",\n \"user_env_key\": \"exposed_meta_datastore\": null\n }\n} uploading file aws: curl -t test-file.md \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/test-file?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190402%2fus-west-2%2fs3%2faws4_request&x-amz-date=20190402t125827z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\" confirming file upload: curl -x post -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-files\/generic-project-files-slug\/uploaded' response: {\n \"data\": \"upload_file_name\": \"test-file\",\n \"upload_file_size\": 4865,\n \"slug\": \"01d7f228e7n8q8wqjkjm8fv3xm\",\n \"processed\": true,\n \"is_expose\": \"is_protected\": false,\n \"user_env_key\": \"exposed_meta_datastore\": null\n }\n} " });
this.add({id:767, 
title:"Updating an uploaded file", 
body:" updating uploaded file required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . you perform minor updates uploaded file using patch method generic-project-files endpoint. if you’ve uploaded file bitrise , visually check changes generic file storage . the required parameters are: app slug generic project file slug generic project file attributes wish modify for example, make uploaded file protected, set is_protected flag file true . curl -x patch -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-file\/generic-project-file-slug -d '{\"is_protected\":true}' be careful setting attributes you set is_protected , is_exposed processed attributes files you've uploaded: once is_protected flag set true, changed anymore. when value is_protected true, is_expose flag set value. once processed flag set true, value changed anymore. " });
this.add({id:768, 
title:"Retrieving a specific file's data", 
body:" retrieving specific file's data required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . retrieve specific file’s data generic file storage with get method generic-project-files endpoint. the returned data includes, things, file's name, size, download url, current status. the required parameters are: app slug generic project file slug retrieving file request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-files\/generic-project-file-slug' response: {\n \"data\": \"upload_file_name\": \"test-file\",\n \"upload_file_size\": 4865,\n \"slug\": \"01d7f228e7n8q8wqjkjm8fv3xm\",\n \"processed\": true,\n \"is_expose\": \"is_protected\": false,\n \"download_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/test-file?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190402%2fus-west-2%2fs3%2faws4_request&x-amz-date=20190402t132712z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=241be52184b63867262360743931c546c166a99719787ce417e3be11bc12bbed\",\n \"user_env_key\": \"exposed_meta_datastore\": null\n }\n}\n availability download_url note download_url generated provisioning profile’s is_protected attribute false. " });
this.add({id:769, 
title:"Listing the uploaded files of an app", 
body:" listing uploaded files app required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . get list app's files uploaded generic file storage using get method. please note maximum number files 50 . the required parameter is: app slug optional parameters are: next: slug first file response (as string) limit: max number elements page (as integer) listing apps request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-files'\n response: {\n \"data\": [\n \"upload_file_name\": \"realmtasks.jks\",\n \"upload_file_size\": 2068,\n \"slug\": \"a37f6a0ff582f4ea\",\n \"processed\": true,\n \"is_expose\": \"is_protected\": false,\n \"user_env_key\": \"android_keystore\",\n \"exposed_meta_datastore\": null\n },\n \"test-file\",\n 4865,\n \"01d7f228e7n8q8wqjkjm8fv3xm\",\n }\n ],\n \"paging\": \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} as see, example response shows list files specific app. files uploaded android keystore section generic file storage shown. this fact android keystore files specific generic project represented separate ui field files. " });
this.add({id:770, 
title:"Deleting a file from the Generic File Storage", 
body:" deleting file generic file storage you delete uploaded file generic file storage using delete method. required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . the required parameters are: app slug generic project file slug curl -x delete “https:\/\/api.bitrise.io\/v0.1\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug}” -h “authorization:{authorization-token}” " });
this.add({id:771, 
title:"Managing build artifacts", 
body:" managing build artifacts you list, retrieve, update, delete any build artifacts with bitrise api. if add deploy bitrise.io step workflow , build run, access artifacts build's artifacts tab bitrise.io. artifact retention 365 days artifacts older than 365 days permanently deleted. you manage generated artifacts with bitrise api. build retention 200 days on builds page app, builds 200 days. the limit applies searching specific builds page. this limitation applies api calls: get\/apps\/{app-slug}\/builds endpoint related endpoints return builds 200 days. however, methods build older than 200 days: if know exact build url, access build. you use get\/apps\/{app-slug}\/archived-builds api endpoint: listing the archived builds of an app . endpoints related managing build artifacts with api endpoint function required role app's team get\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts listing build artifacts any get\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts\/{artifact-slug} retrieving data specific build artifact any patch\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts\/{artifact-slug} updating build artifact owner, admin, developer delete\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts\/{artifact-slug} deleting build artifact owner, admin, developer " });
this.add({id:772, 
title:"Listing build artifacts", 
body:" listing build artifacts required role you tester\/qa, developer, admin, owner role app's team list build artifacts using api. for complete list user roles role cheatsheets, check user roles on app teams . to able use build artifact endpoints, first list artifacts belong app’s build. the response with slug need later. the required parameters are: app slug build slug you use generated build artifact slug\/s response output with endpoints slug required parameter. listing artifacts app request: curl -x get \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\" -h \"accept: application\/json\" \"authorization: the-access-token\" response: {\n \"data\": [\n \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"file_size_bytes\": 1574799\n },\n \"app-debug.apk\",\n \"54ae701761c4f956\",\n 1574793\n }\n ],\n \"paging\": \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} " });
this.add({id:773, 
title:"Retrieving a specific build artifact's data", 
body:" retrieving specific build artifact's data required role you tester\/qa, developer, admin, owner role app's team retrive specific build's artifact data using api. for complete list user roles role cheatsheets, check user roles on app teams . you retrieve detailed data specific build's artifacts with endpoint. the response shows filename, artifact type, download url, file size. the required parameters are: app slug build slug artifact slug retrieving data specific artifact request: curl -x get \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/92e0b6ecae87b832\" -h \"accept: application\/json\" \"authorization: the-access-token\" response: {\n \"data\": \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626902\/another_app-debug.apk?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190426%2fus-east-1%2fs3%2faws4_request&x-amz-date=20190426t131627z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=9f1af26787f34b5cf0cbc18b2372313607b1e3c0203a9ce7e42da884a6ddf70f\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"public_install_page_url\": \"https:\/\/www.bitrise.io\/artifact\/7626902\/p\/8e5b2c62abe28fecef09b271de767920\",\n \"file_size_bytes\": 1574799\n }\n} by default, value is_public_page_enabled input set true . this way public_install_page_url available view basic information artifact url. you download using url response output. " });
this.add({id:774, 
title:"Disabling the public install page of an artifact", 
body:" disabling public install page artifact required role you developer, admin, owner role app's team disable public install page artifact using api. for complete list user roles role cheatsheets, check user roles on app teams . you update is_public_page_enabled parameter apk ipa files. please note parameter’s value set true default so disable with endpoint. the required parameters are: app slug build slug artifact slug disabling public install page apk file request: curl -x patch \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -h \"accept: application\/json\" \"authorization: the-access-token\" \"content-type: -d \"{ \\\"is_public_page_enabled\\\": false}\"\n response: {\n \"data\": \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626904\/app-debug.apk?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190503%2fus-east-1%2fs3%2faws4_request&x-amz-date=20190503t082800z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=7251fcbc0574ffac60b3f1d4a8c398658e49f0b86fb3cfec1500bde125738abc\",\n \"is_public_page_enabled\": false,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n} if check build’s artifacts tab, see public install page toggle disabled. " });
this.add({id:775, 
title:"Deleting a build artifact", 
body:" deleting build artifact required role you developer, admin, owner role app's team delete build artifact using api. for complete list user roles role cheatsheets, check user roles on app teams . you delete app’s specific build artifact. the required parameters are: app slug build slug artifact slug deleting apk file request: curl -x delete \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -h \"accept: application\/json\" \"authorization: the-access-token\" response: {\n \"data\": \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": null,\n \"is_public_page_enabled\": true,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n}\n " });
this.add({id:776, 
title:"API reference", 
body:" api reference a list descriptions bitrise api endpoints. https:\/\/api-docs.bitrise.io\/docs\/swagger.json " });
this.add({id:737, 
title:"Authenticating with the Bitrise API", 
body:" authenticating with bitrise api you need create personal access token authenticate with bitrise api. the needed endpoints. the current api supports types authentication: user-generated personal access tokens . workspace api tokens. every api endpoint requires authentication, “root” url ( https:\/\/api.bitrise.io ). create personal access token workspace api token . save secure way. add authorization header with access token api calls. for example, following retrieves list apps workspace access to: curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps' -h 'authorization: <access-token>'\n 'accept: application\/json' " });
this.add({id:738, 
title:"Pagination of API calls", 
body:" pagination api calls with bitrise api, use pagination iterate list items responses certain endpoints. you configure properties pagination. when endpoint returns list items, single response. you’ll iterate pages retrieve items. the response endpoints include paging object, with total_item_count page_item_limit properties. if “next” page available, it’ll include “anchor” item. for example, response app slug first page. {\n \"data\": [ ... ],\n \"paging\": \"total_item_count\": 3,\n \"page_item_limit\": 2,\n \"next\": \"518e869d56f2adfd\"\n }\n}\n the property paging object the property paging object included there’s page available. if property inside paging means there’s page retrieve. limit number response pages with limit parameter: https:\/\/api.bitrise.io\/v0.1\/me\/apps?limit=10 this sets page_item_limit property 10. the default (and maximum) value parameter 50. iterate response items: call endpoint any pagination parameters. from response process paging object. if paging object includes item, exact endpoint with additional next= query parameter, pass value got response parameter. iterating registered apps call https:\/\/api.bitrise.io\/v0.1\/me\/apps . process items ( data property). check paging (root) property. if there’s property inside paging , endpoint again, with query parameter example: https:\/\/api.bitrise.io\/v0.1\/me\/apps?next=nextvalue , nextvalue value property got previous response. repeat paging object does include property, means page received was one. " });
this.add({id:739, 
title:"Adding and managing apps", 
body:" adding managing apps you add new apps bitrise with api: app , generate ssh keys, set app’s initial configuration. you add new apps bitrise with api: app , generate ssh keys, set app’s initial configuration. in addition, list apps belonging, example, single user specific workspace . " });
this.add({id:740, 
title:"Adding a new app with the API", 
body:" adding new app with api endpoints used adding new app with bitrise api endpoints function required role app's team post \/apps\/register add new app. n\/a post \/apps\/{app-slug}\/register-ssh-key add ssh key specific app. owner admin post \/apps\/{app-slug}\/finish save application end add process. n\/a post \/apps\/{app-slug}\/bitrise.yml upload new bitrise.yml application. owner admin apps with https git urls the procedure examples aimed adding private app with ssh git url. if want add https url, skip key. register app calling register endpoint setting required parameters. you need set git provider, repository url, slug appears owner repository. add workspace app: legacy naming conventions, organization_slug parameter. curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n \"provider\": \"github\",\n \"is_public\": false,\n \"organization_slug\": \"$org_slug\"\n \"repo_url\": \"git@github.com:api_demo\/example-repository.git\",\n \"type\": \"git\",\n \"git_repo_slug\": \"example-repository\",\n \"git_owner\": \"api_demo\"\n }' changing app by default, register app, inherit git repository. if like add app with different name, append \"title\" parameter post request using following syntax: curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n ...\n \"title\": \"string\"\n }'\n you change app creating it, sending patch request calling apps endpoint. for information, see managing existing app . once done, register-ssh-key endpoint set ssh keys created so bitrise clone repository running build. you need provide private public ssh key. please note wish copy key manually, escape line breaks with \\n . you set want automatically register public key git provider: is_register_key_into_provider_service parameter true false. curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/register-ssh-key' -d \\\n'{\n \"auth_ssh_private_key\": \"your-private-ssh-key\",\n \"auth_ssh_public_key\": \"your-public-ssh-key\",\n \"is_register_key_into_provider_service\": false\n }' finish app registration process calling finish endpoint. this endpoint allows configure apps: set project type, stack build run (this vary based app), initial configuration settings. you set environment variables, immediately specify workspace owner application. please note mode parameter set value manual . curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/finish' -d \\\n'{\n \"project_type\": \"ios\",\n \"stack_id\": \"osx-xcode-13.2.x\",\n \"config\": \"default-ios-config\",\n \"mode\": \"manual\",\n \"envs\": {\n \"env1\": \"val1\",\n \"env2\": \"val2\"\n },\n \"organization_slug\": \"e1ec3dea540bcf21\"\n }'\n " });
this.add({id:741, 
title:"Managing an existing app", 
body:" managing existing app endpoints related managing existing app with bitrise api endpoints function required role app's team get \/apps get list apps. any get \/apps\/{app-slug} get specific app. any get \/apps\/{app-slug}\/bitrise.yml get bitrise.yml specific app. owner admin get \/apps\/{app-slug}\/branches list branches app’s repository. any get \/organizations\/{org-slug}\/apps get list apps workspace. any get \/users\/{user-slug}\/apps get list apps user. any patch \/apps\/{app-slug} update existing app's parameters owner admin the response any get request regarding apps contain app slug, project type, git provider, repository’s owner url: {\n \"data\": [\n \"slug\": \"eeeeefffff00000\",\n \"title\": \"sample-app\",\n \"project_type\": \"android\",\n \"provider\": \"github\",\n \"repo_owner\": \"example-user\",\n \"repo_url\": \"git@github.com:example-user\/sample-app.git\",\n \"repo_slug\": \"android-gradle-kotlin-dsl\",\n \"is_disabled\": false,\n \"status\": -1,\n \"is_public\": \"owner\": \"account_type\": \"organization\",\n \"name\": \"test org\",\n \"fffffeeeee00000\"\n },\n \"avatar_url\": null\n you download existing bitrise.yml file any app: response contain yaml configuration. would like change title default git branch existing app? you update app's parameters calling patch method the  apps  endpoint. required role you admin owner role app's team update existing parameters using bitrise api. for complete list user roles role cheatsheets, check  user roles app teams . the required parameter is: slug the optional parameters are: apple_credential_user_id : the new apple credential user id (recommendation: use ui set this) apple_credential_user_slug : the new apple credential user slug (recommendation: use ui set this) default_branch : the new default branch application. is_public : the new value application publicly visible. repository_url : the new repository url application. services_credential_user_id : the new service credential user id (recommendation: use ui set this). title : the new title application. changing default branch existing app request: curl -x 'patch' 'https:\/\/api.bitrise.io\/v0.1\/apps\/the-app-slug' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\"default_branch\": \"main\", \"title\": \"example_app_title_3\"}' " });
this.add({id:742, 
title:"Managing app access roles for Workspace groups", 
body:" managing app access roles workspace groups you grant workspace groups access application teams bitrise. it means members group able work app role assigned group . list groups granted given role app's team using get \/apps\/{app-slug}\/roles\/{role-name} endpoint. the role-name parameter takes possible values: admin manager : equivalent developer role bitrise.io. member : equivalent tester\/qa bitrise.io. in example, we're querying list workspace groups granted admin role specific app: curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'authorization: access-token' grant access existing workspace groups using put \/apps\/{app-slug}\/roles\/{role-name} endpoint. this endpoint requires groups object contains slugs groups granted access with specified role. specify groups this endpoint replaces previous groups specified role app's team. if, example, grant alpha beta admin team, access app afterwards. if group - let's delta previously removed. getting group slugs to group slugs workspace, use get \/organizations\/{org-slug}\/groups endpoint. in following example, we'll granting groups admin access: curl -x 'put' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'content-type: -d '{\n \"groups\": [\n \"group-slug-1\", \"group-slug-2\"\n ]\n}' " });
this.add({id:743, 
title:"Deleting an app using the API", 
body:" deleting app using api deletion final be aware undo deleting app. once delete it, way recover you delete apps with bitrise api. the required parameter app slug want delete: curl -x delete -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/the-app-slug' " });
this.add({id:744, 
title:"Uploading a new bitrise.yml file", 
body:" uploading new bitrise.yml file required role you admin owner role app's team upload new bitrise.yml file. for complete list user roles role cheatsheets, check user roles on app teams . the bitrise.yml file contains configuration builds. you modify current api posting yaml configuration. in example, are: creating bitrise.yml with format version 11. setting bitrise step library default source. setting stack xcode 14. setting bitrise_project_path environment variable point build.gradle file. adding script step. creating trigger map triggers primary workflow code pushed any branch app's repository. curl --fail -x post -h \"authorization: $access_token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/$app_slug\/bitrise.yml\" -d \\\n'{\n \"app_config_datastore_yaml\": {\n \"format_version\": 11,\n \"default_step_lib_source\": \"https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\",\n \"meta\": \"bitrise.io\": \"stack\": \"osx-xcode-14.0.x\"\n }\n },\n \"app\": \"envs\": [\n \"bitrise_project_path\": \"build.gradle\",\n \"opts\": \"is_expand\": false\n ]\n \"workflows\": \"primary\": \"steps\": \"script@1\": {}\n \"trigger_map\": \"push_branch\": \"*\",\n \"workflow\": \"primary\"\n }\n}' by calling endpoint, replace app’s current bitrise.yml file. you can, course, modify uploaded bitrise.yml api website itself. " });
this.add({id:745, 
title:"Changing the location of the app's bitrise.yml file", 
body:" changing location app's bitrise.yml file the app's bitrise.yml configuration file stored places: on bitrise.io. this default setting apps. in app's repository. this way control versioning maintenance config file. you use graphical workflow editor bitrise.io modify configuration need commit changes repository. you change location file using api. admin access required both endpoints related location bitrise.yml file require admin level access app. with get\/apps\/{app-slug}\/bitrise.yml\/config endpoint, location file. location means calling endpoint tells file stored bitrise.io repository. the takes parameters returns values response: \"location\": \"bitrise.io\" \"location\": \"repository\" curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/bitrise.yml\/config' -h 'accept: application\/json' 'authorization: access-token' with put\/apps\/{app-slug}\/bitrise.yml\/config endpoint, change location file: is, tell bitrise look config file bitrise.io repository. this endpoint takes values json object: \"location\": \"bitrise.io\" store config file bitrise.io. \"location\": \"repository\" store config file repository. commit config file repository please note changing location repository merely tells bitrise look bitrise.yml file app's repository. if does exist repository, endpoint won't return error able run builds bitrise config file. curl -x 'put' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/bitrise.yml\/config' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"location\": \"bitrise.io\"\n}' " });
this.add({id:746, 
title:"Changing machine types in all apps at the same time", 
body:" changing machine types apps time endpoints used migrate machine types endpoints function required role patch \/user\/{user-slug}\/apps\/machine_types migrate specified machine type apps owned user. n\/a patch \/organizations\/{org-slug}\/apps\/machine_types migrate specified machine type apps owned workspace. workspace owner the bitrise api provides endpoints allow switch machine type apps owned user workspace . the endpoints parse bitrise.yml file app, look occurrences specified machine type, replace with type. for example, switch m1 medium large apps endpoint. both endpoints parameters: from_machine : the machine type want switch from. to_machine : the machine type want switch to. you list available machine types here: build machine types . if endpoints don't machine type specified from_machine parameter, return 200 response, with migrated_apps object. default workflow-specific stacks the endpoints change machine types default stacks workflow-specific stacks. migrating apps owned user m1 medium machines large machines: curl -x 'patch' \\\n 'https:\/\/api.bitrise.io\/v0.1\/user\/user-slug\/apps\/machine_types' -h 'accept: application\/json' 'authorization: personal-access-token' 'content-type: -d '{\n \"from_machine\": \"g2-m1.4core\",\n \"to_machine\": \"g2-m1.8core\"\n}' migrating apps owned workspace m1 max medium machines large machines: curl -x 'patch' \\\n 'https:\/\/api.bitrise.io\/v0.1\/organizations\/workspace-slug\/apps\/machine_types' -h 'accept: application\/json' 'authorization: personal-access-token' 'content-type: -d '{\n \"from_machine\": \"g2-m1-max.5core\",\n \"to_machine\": \"g2-m1-max.10core\"\n}' successful respose {\n \"message\": \"the migration was successful.\",\n \"migrated_apps\": [\n \"android-sample (8f41200-e5a5eee17)\",\n \"sample-swift-project (c291b04-784ca8773)\",\n ]\n} " });
this.add({id:747, 
title:"Managing app notifications", 
body:" managing app notifications you change email notification settings apps api any time with patch\/apps\/{app-slug}\/update-email-notifications endpoint. the endpoint takes parameters: on_failure : email notification settings failed builds. on_success : email notification settings successful builds. both parameters possible values: : always send notification. the default value failed builds. : never send notification. change : send notification build status changes compared previous build branch. the default value successful builds. for example, wish receive notification failed build previous was successful, need set value on_failure parameter change (replace app-slug example with app's slug access-token personal access token ): curl -x 'patch' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/update-email-notifications' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"on_failure\": \"change\",\n}' " });
this.add({id:740, 
title:"Adding a new app with the API", 
body:" adding new app with api endpoints used adding new app with bitrise api endpoints function required role app's team post \/apps\/register add new app. n\/a post \/apps\/{app-slug}\/register-ssh-key add ssh key specific app. owner admin post \/apps\/{app-slug}\/finish save application end add process. n\/a post \/apps\/{app-slug}\/bitrise.yml upload new bitrise.yml application. owner admin apps with https git urls the procedure examples aimed adding private app with ssh git url. if want add https url, skip key. register app calling register endpoint setting required parameters. you need set git provider, repository url, slug appears owner repository. add workspace app: legacy naming conventions, organization_slug parameter. curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n \"provider\": \"github\",\n \"is_public\": false,\n \"organization_slug\": \"$org_slug\"\n \"repo_url\": \"git@github.com:api_demo\/example-repository.git\",\n \"type\": \"git\",\n \"git_repo_slug\": \"example-repository\",\n \"git_owner\": \"api_demo\"\n }' changing app by default, register app, inherit git repository. if like add app with different name, append \"title\" parameter post request using following syntax: curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n ...\n \"title\": \"string\"\n }'\n you change app creating it, sending patch request calling apps endpoint. for information, see managing existing app . once done, register-ssh-key endpoint set ssh keys created so bitrise clone repository running build. you need provide private public ssh key. please note wish copy key manually, escape line breaks with \\n . you set want automatically register public key git provider: is_register_key_into_provider_service parameter true false. curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/register-ssh-key' -d \\\n'{\n \"auth_ssh_private_key\": \"your-private-ssh-key\",\n \"auth_ssh_public_key\": \"your-public-ssh-key\",\n \"is_register_key_into_provider_service\": false\n }' finish app registration process calling finish endpoint. this endpoint allows configure apps: set project type, stack build run (this vary based app), initial configuration settings. you set environment variables, immediately specify workspace owner application. please note mode parameter set value manual . curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/finish' -d \\\n'{\n \"project_type\": \"ios\",\n \"stack_id\": \"osx-xcode-13.2.x\",\n \"config\": \"default-ios-config\",\n \"mode\": \"manual\",\n \"envs\": {\n \"env1\": \"val1\",\n \"env2\": \"val2\"\n },\n \"organization_slug\": \"e1ec3dea540bcf21\"\n }'\n " });
this.add({id:741, 
title:"Managing an existing app", 
body:" managing existing app endpoints related managing existing app with bitrise api endpoints function required role app's team get \/apps get list apps. any get \/apps\/{app-slug} get specific app. any get \/apps\/{app-slug}\/bitrise.yml get bitrise.yml specific app. owner admin get \/apps\/{app-slug}\/branches list branches app’s repository. any get \/organizations\/{org-slug}\/apps get list apps workspace. any get \/users\/{user-slug}\/apps get list apps user. any patch \/apps\/{app-slug} update existing app's parameters owner admin the response any get request regarding apps contain app slug, project type, git provider, repository’s owner url: {\n \"data\": [\n \"slug\": \"eeeeefffff00000\",\n \"title\": \"sample-app\",\n \"project_type\": \"android\",\n \"provider\": \"github\",\n \"repo_owner\": \"example-user\",\n \"repo_url\": \"git@github.com:example-user\/sample-app.git\",\n \"repo_slug\": \"android-gradle-kotlin-dsl\",\n \"is_disabled\": false,\n \"status\": -1,\n \"is_public\": \"owner\": \"account_type\": \"organization\",\n \"name\": \"test org\",\n \"fffffeeeee00000\"\n },\n \"avatar_url\": null\n you download existing bitrise.yml file any app: response contain yaml configuration. would like change title default git branch existing app? you update app's parameters calling patch method the  apps  endpoint. required role you admin owner role app's team update existing parameters using bitrise api. for complete list user roles role cheatsheets, check  user roles app teams . the required parameter is: slug the optional parameters are: apple_credential_user_id : the new apple credential user id (recommendation: use ui set this) apple_credential_user_slug : the new apple credential user slug (recommendation: use ui set this) default_branch : the new default branch application. is_public : the new value application publicly visible. repository_url : the new repository url application. services_credential_user_id : the new service credential user id (recommendation: use ui set this). title : the new title application. changing default branch existing app request: curl -x 'patch' 'https:\/\/api.bitrise.io\/v0.1\/apps\/the-app-slug' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\"default_branch\": \"main\", \"title\": \"example_app_title_3\"}' " });
this.add({id:742, 
title:"Managing app access roles for Workspace groups", 
body:" managing app access roles workspace groups you grant workspace groups access application teams bitrise. it means members group able work app role assigned group . list groups granted given role app's team using get \/apps\/{app-slug}\/roles\/{role-name} endpoint. the role-name parameter takes possible values: admin manager : equivalent developer role bitrise.io. member : equivalent tester\/qa bitrise.io. in example, we're querying list workspace groups granted admin role specific app: curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'authorization: access-token' grant access existing workspace groups using put \/apps\/{app-slug}\/roles\/{role-name} endpoint. this endpoint requires groups object contains slugs groups granted access with specified role. specify groups this endpoint replaces previous groups specified role app's team. if, example, grant alpha beta admin team, access app afterwards. if group - let's delta previously removed. getting group slugs to group slugs workspace, use get \/organizations\/{org-slug}\/groups endpoint. in following example, we'll granting groups admin access: curl -x 'put' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/roles\/admin' -h 'accept: application\/json' 'content-type: -d '{\n \"groups\": [\n \"group-slug-1\", \"group-slug-2\"\n ]\n}' " });
this.add({id:743, 
title:"Deleting an app using the API", 
body:" deleting app using api deletion final be aware undo deleting app. once delete it, way recover you delete apps with bitrise api. the required parameter app slug want delete: curl -x delete -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/the-app-slug' " });
this.add({id:744, 
title:"Uploading a new bitrise.yml file", 
body:" uploading new bitrise.yml file required role you admin owner role app's team upload new bitrise.yml file. for complete list user roles role cheatsheets, check user roles on app teams . the bitrise.yml file contains configuration builds. you modify current api posting yaml configuration. in example, are: creating bitrise.yml with format version 11. setting bitrise step library default source. setting stack xcode 14. setting bitrise_project_path environment variable point build.gradle file. adding script step. creating trigger map triggers primary workflow code pushed any branch app's repository. curl --fail -x post -h \"authorization: $access_token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/$app_slug\/bitrise.yml\" -d \\\n'{\n \"app_config_datastore_yaml\": {\n \"format_version\": 11,\n \"default_step_lib_source\": \"https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\",\n \"meta\": \"bitrise.io\": \"stack\": \"osx-xcode-14.0.x\"\n }\n },\n \"app\": \"envs\": [\n \"bitrise_project_path\": \"build.gradle\",\n \"opts\": \"is_expand\": false\n ]\n \"workflows\": \"primary\": \"steps\": \"script@1\": {}\n \"trigger_map\": \"push_branch\": \"*\",\n \"workflow\": \"primary\"\n }\n}' by calling endpoint, replace app’s current bitrise.yml file. you can, course, modify uploaded bitrise.yml api website itself. " });
this.add({id:745, 
title:"Changing the location of the app's bitrise.yml file", 
body:" changing location app's bitrise.yml file the app's bitrise.yml configuration file stored places: on bitrise.io. this default setting apps. in app's repository. this way control versioning maintenance config file. you use graphical workflow editor bitrise.io modify configuration need commit changes repository. you change location file using api. admin access required both endpoints related location bitrise.yml file require admin level access app. with get\/apps\/{app-slug}\/bitrise.yml\/config endpoint, location file. location means calling endpoint tells file stored bitrise.io repository. the takes parameters returns values response: \"location\": \"bitrise.io\" \"location\": \"repository\" curl -x 'get' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/bitrise.yml\/config' -h 'accept: application\/json' 'authorization: access-token' with put\/apps\/{app-slug}\/bitrise.yml\/config endpoint, change location file: is, tell bitrise look config file bitrise.io repository. this endpoint takes values json object: \"location\": \"bitrise.io\" store config file bitrise.io. \"location\": \"repository\" store config file repository. commit config file repository please note changing location repository merely tells bitrise look bitrise.yml file app's repository. if does exist repository, endpoint won't return error able run builds bitrise config file. curl -x 'put' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/bitrise.yml\/config' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"location\": \"bitrise.io\"\n}' " });
this.add({id:746, 
title:"Changing machine types in all apps at the same time", 
body:" changing machine types apps time endpoints used migrate machine types endpoints function required role patch \/user\/{user-slug}\/apps\/machine_types migrate specified machine type apps owned user. n\/a patch \/organizations\/{org-slug}\/apps\/machine_types migrate specified machine type apps owned workspace. workspace owner the bitrise api provides endpoints allow switch machine type apps owned user workspace . the endpoints parse bitrise.yml file app, look occurrences specified machine type, replace with type. for example, switch m1 medium large apps endpoint. both endpoints parameters: from_machine : the machine type want switch from. to_machine : the machine type want switch to. you list available machine types here: build machine types . if endpoints don't machine type specified from_machine parameter, return 200 response, with migrated_apps object. default workflow-specific stacks the endpoints change machine types default stacks workflow-specific stacks. migrating apps owned user m1 medium machines large machines: curl -x 'patch' \\\n 'https:\/\/api.bitrise.io\/v0.1\/user\/user-slug\/apps\/machine_types' -h 'accept: application\/json' 'authorization: personal-access-token' 'content-type: -d '{\n \"from_machine\": \"g2-m1.4core\",\n \"to_machine\": \"g2-m1.8core\"\n}' migrating apps owned workspace m1 max medium machines large machines: curl -x 'patch' \\\n 'https:\/\/api.bitrise.io\/v0.1\/organizations\/workspace-slug\/apps\/machine_types' -h 'accept: application\/json' 'authorization: personal-access-token' 'content-type: -d '{\n \"from_machine\": \"g2-m1-max.5core\",\n \"to_machine\": \"g2-m1-max.10core\"\n}' successful respose {\n \"message\": \"the migration was successful.\",\n \"migrated_apps\": [\n \"android-sample (8f41200-e5a5eee17)\",\n \"sample-swift-project (c291b04-784ca8773)\",\n ]\n} " });
this.add({id:747, 
title:"Managing app notifications", 
body:" managing app notifications you change email notification settings apps api any time with patch\/apps\/{app-slug}\/update-email-notifications endpoint. the endpoint takes parameters: on_failure : email notification settings failed builds. on_success : email notification settings successful builds. both parameters possible values: : always send notification. the default value failed builds. : never send notification. change : send notification build status changes compared previous build branch. the default value successful builds. for example, wish receive notification failed build previous was successful, need set value on_failure parameter change (replace app-slug example with app's slug access-token personal access token ): curl -x 'patch' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/update-email-notifications' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"on_failure\": \"change\",\n}' " });
this.add({id:748, 
title:"Triggering and aborting builds", 
body:" triggering aborting builds you use bitrise api trigger abort builds apps. define parameters build: example, branch, tag git commit use. custom environment variables defined well. endpoints related triggering aborting builds with api endpoints function required role app's team post \/apps\/{app-slug}\/builds trigger new build. owner, admin, developer post \/apps\/{app-slug}\/builds\/{build-slug}\/abort abort specific build. owner, admin, developer you trigger abort builds with bitrise api. define parameters build: example, branch, tag git commit use. custom environment variables defined well. " });
this.add({id:749, 
title:"Triggering a new build with the API", 
body:" triggering new build with api to trigger new build with bitrise api, \/apps\/{app-slug}\/builds endpoint. you need specify app slug build parameter json object: a git tag commit hash a branch a workflow id you valid build trigger set map app's bitrise.yml file. required role you developer, admin, owner role app's team trigger new build using api. for complete list user roles role cheatsheets, check user roles on app teams . the json object contain hook_info object with type key bitrise value key. here’s minimal sample json body specifies main value branch parameter: {\n \"hook_info\": \"type\": \"bitrise\",\n },\n \"build_params\": \"branch\": \"main\"\n }\n} and here’s curl request syntax triggering build main branch: curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"build_params\": {\n \"branch\": \"main\"\n },\n \"hook_info\": \"type\": \"bitrise\"\n }\n}'\n interactive curl configurator you interactive curl configurator clicking start\/schedule build button app’s bitrise.io page switching advanced mode popup. at popup curl call, based parameters specify popup. in previous example, passed json payload string: precise, object serialized string. you pass object (for example, want javascript). to so, include root payload element or, alternatively, set json object value payload post parameter. here’s jquery example using payload parameter: $.post(\"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/\", {\n \"payload\":{\n \"hook_info\":{\n \"type\":\"bitrise\",\n },\n \"build_params\":{\n \"branch\":\"main\"\n }\n }\n}) you specify different build parameters triggering build. the set build_params object. " });
this.add({id:750, 
title:"Setting a branch, commit or tag to build", 
body:" setting branch, commit tag build you set git-specific parameters call. the branch parameter specifies source branch built. this git commit or, case pull request build, request. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n\t\"hook_info\": {\n\t\t\"type\": \"bitrise\"\n\t},\n\t\"build_params\": {\n\t\t\"branch\": \"main\"\n\t}\n }' you build specific git commit tag: just need set hash tag build_params object. you set commit message build with commit_message parameter. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"commit_hash\": \"0000ffffeeeee\",\n \"commit_message\": \"testing\"\n }\n}'\n parameter priority the git clone step following parameter priority: commit_hash tag branch if provide multiple parameters, parameter with lower priority ignored. the ignored parameters logged. they available steps visible build’s details & add-ons page git clone step use specific parameter checkout. " });
this.add({id:751, 
title:"Setting parameters for pull request builds", 
body:" setting parameters pull request builds for pull request build, use branch_dest parameter set destination target branch pull request. the pr merged that, bitrise build app based how code look like merging. this happens automatically triggered webhook, example. the branch_repo_owner branch_dest_repo_owner parameters used identify owners repositories, unambiguously branches involved pull request. pull request builds forks if specify branch_repo_owner branch_dest_repo_owner parameters, api assume pull request builds coming fork. as such, hold pending manual approval: approving pull request builds . to identify pr itself, use pull_request_id parameter: takes integer; example, number pr github. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"commit_hash\": \"fffff000000eeeeee\",\n \"pull_request_id\": 1\n }\n}' if git provider supports it, use pull_request_merge_branch parameter build pre-merged state branch pr. another alternative pull_request_head_branch parameter: special git ref point source pr. if want trigger build pr opened fork repository, use pull_request_repository_url parameter. the value url fork. " });
this.add({id:752, 
title:"Skipping Git status reports", 
body:" skipping git status reports if webhook set up, bitrise send status reports git provider builds. however, disabled api: use skip_git_status_report parameter. if set true , build status report sent. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"skip_git_status_report\": true\n }\n}'\n " });
this.add({id:753, 
title:"Specifying Environment Variables", 
body:" specifying environment variables you define additional environment variables (env vars) build. these additional variables handled with priority secrets app env vars , means overwrite env vars defined build configuration (for example, app vars), secrets . define additional env vars with environments parameter. this parameter array objects , item array include mapped_to property. this contain: the key env var. the value env var. replacing env var names by default, env var names inside values replaced triggered build actual value target environment. this behavior disabled setting is_expand flag false . \"environments\":[\n {\"mapped_to\":\"api_test_env\",\"value\":\"this test value\",\"is_expand\":true},\n {\"mapped_to\":\"help_env\",\"value\":\"$home variable contains user's home directory path\",\"is_expand\":false},\n] " });
this.add({id:754, 
title:"Setting a Workflow for the build", 
body:" setting workflow build by default, workflow triggered build selected based content build_params app’s trigger map . this how webhooks select workflow build automatically, based trigger map. with api, overwrite selection specify exactly workflow want use. add workflow_id parameter build_params specify workflow want use specific build. here’s example deploy workflow: curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\": {\n \"type\": \"bitrise\"\n },\n \"build_params\": \"branch\": \"main\",\n \"workflow_id\": \"primary\"\n }\n}' " });
this.add({id:755, 
title:"Aborting a build", 
body:" aborting build you abort running builds, set reason aborting, specify email notifications sent build. required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . to simply abort build, \/apps\/app-slug\/builds\/build-slug\/abort endpoint. it requires parameters: the app slug. the build slug. the build abort parameters body. this left don't want set any specific abort: -d \"{}\" . curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d \"{}\" you set reason aborting build using abort_reason parameter. this parameter takes string app’s build page. curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d '{\"abort_reason\": \"aborted reason\"}'\n normally, aborted builds count failed builds. use abort_with_success parameter abort build count successful one. the status report sent git provider bitrise.io displayed cancelled . curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d '{\"abort_with_success\": true}' depending app settings, bitrise send email notifications team members build aborted. if want notifications, set skip_notifications parameter true . curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d '{\"skip_notifications\": true}' " });
this.add({id:749, 
title:"Triggering a new build with the API", 
body:" triggering new build with api to trigger new build with bitrise api, \/apps\/{app-slug}\/builds endpoint. you need specify app slug build parameter json object: a git tag commit hash a branch a workflow id you valid build trigger set map app's bitrise.yml file. required role you developer, admin, owner role app's team trigger new build using api. for complete list user roles role cheatsheets, check user roles on app teams . the json object contain hook_info object with type key bitrise value key. here’s minimal sample json body specifies main value branch parameter: {\n \"hook_info\": \"type\": \"bitrise\",\n },\n \"build_params\": \"branch\": \"main\"\n }\n} and here’s curl request syntax triggering build main branch: curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"build_params\": {\n \"branch\": \"main\"\n },\n \"hook_info\": \"type\": \"bitrise\"\n }\n}'\n interactive curl configurator you interactive curl configurator clicking start\/schedule build button app’s bitrise.io page switching advanced mode popup. at popup curl call, based parameters specify popup. in previous example, passed json payload string: precise, object serialized string. you pass object (for example, want javascript). to so, include root payload element or, alternatively, set json object value payload post parameter. here’s jquery example using payload parameter: $.post(\"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/\", {\n \"payload\":{\n \"hook_info\":{\n \"type\":\"bitrise\",\n },\n \"build_params\":{\n \"branch\":\"main\"\n }\n }\n}) you specify different build parameters triggering build. the set build_params object. " });
this.add({id:750, 
title:"Setting a branch, commit or tag to build", 
body:" setting branch, commit tag build you set git-specific parameters call. the branch parameter specifies source branch built. this git commit or, case pull request build, request. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n\t\"hook_info\": {\n\t\t\"type\": \"bitrise\"\n\t},\n\t\"build_params\": {\n\t\t\"branch\": \"main\"\n\t}\n }' you build specific git commit tag: just need set hash tag build_params object. you set commit message build with commit_message parameter. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"commit_hash\": \"0000ffffeeeee\",\n \"commit_message\": \"testing\"\n }\n}'\n parameter priority the git clone step following parameter priority: commit_hash tag branch if provide multiple parameters, parameter with lower priority ignored. the ignored parameters logged. they available steps visible build’s details & add-ons page git clone step use specific parameter checkout. " });
this.add({id:751, 
title:"Setting parameters for pull request builds", 
body:" setting parameters pull request builds for pull request build, use branch_dest parameter set destination target branch pull request. the pr merged that, bitrise build app based how code look like merging. this happens automatically triggered webhook, example. the branch_repo_owner branch_dest_repo_owner parameters used identify owners repositories, unambiguously branches involved pull request. pull request builds forks if specify branch_repo_owner branch_dest_repo_owner parameters, api assume pull request builds coming fork. as such, hold pending manual approval: approving pull request builds . to identify pr itself, use pull_request_id parameter: takes integer; example, number pr github. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"commit_hash\": \"fffff000000eeeeee\",\n \"pull_request_id\": 1\n }\n}' if git provider supports it, use pull_request_merge_branch parameter build pre-merged state branch pr. another alternative pull_request_head_branch parameter: special git ref point source pr. if want trigger build pr opened fork repository, use pull_request_repository_url parameter. the value url fork. " });
this.add({id:752, 
title:"Skipping Git status reports", 
body:" skipping git status reports if webhook set up, bitrise send status reports git provider builds. however, disabled api: use skip_git_status_report parameter. if set true , build status report sent. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"skip_git_status_report\": true\n }\n}'\n " });
this.add({id:753, 
title:"Specifying Environment Variables", 
body:" specifying environment variables you define additional environment variables (env vars) build. these additional variables handled with priority secrets app env vars , means overwrite env vars defined build configuration (for example, app vars), secrets . define additional env vars with environments parameter. this parameter array objects , item array include mapped_to property. this contain: the key env var. the value env var. replacing env var names by default, env var names inside values replaced triggered build actual value target environment. this behavior disabled setting is_expand flag false . \"environments\":[\n {\"mapped_to\":\"api_test_env\",\"value\":\"this test value\",\"is_expand\":true},\n {\"mapped_to\":\"help_env\",\"value\":\"$home variable contains user's home directory path\",\"is_expand\":false},\n] " });
this.add({id:754, 
title:"Setting a Workflow for the build", 
body:" setting workflow build by default, workflow triggered build selected based content build_params app’s trigger map . this how webhooks select workflow build automatically, based trigger map. with api, overwrite selection specify exactly workflow want use. add workflow_id parameter build_params specify workflow want use specific build. here’s example deploy workflow: curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\": {\n \"type\": \"bitrise\"\n },\n \"build_params\": \"branch\": \"main\",\n \"workflow_id\": \"primary\"\n }\n}' " });
this.add({id:750, 
title:"Setting a branch, commit or tag to build", 
body:" setting branch, commit tag build you set git-specific parameters call. the branch parameter specifies source branch built. this git commit or, case pull request build, request. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n\t\"hook_info\": {\n\t\t\"type\": \"bitrise\"\n\t},\n\t\"build_params\": {\n\t\t\"branch\": \"main\"\n\t}\n }' you build specific git commit tag: just need set hash tag build_params object. you set commit message build with commit_message parameter. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"commit_hash\": \"0000ffffeeeee\",\n \"commit_message\": \"testing\"\n }\n}'\n parameter priority the git clone step following parameter priority: commit_hash tag branch if provide multiple parameters, parameter with lower priority ignored. the ignored parameters logged. they available steps visible build’s details & add-ons page git clone step use specific parameter checkout. " });
this.add({id:751, 
title:"Setting parameters for pull request builds", 
body:" setting parameters pull request builds for pull request build, use branch_dest parameter set destination target branch pull request. the pr merged that, bitrise build app based how code look like merging. this happens automatically triggered webhook, example. the branch_repo_owner branch_dest_repo_owner parameters used identify owners repositories, unambiguously branches involved pull request. pull request builds forks if specify branch_repo_owner branch_dest_repo_owner parameters, api assume pull request builds coming fork. as such, hold pending manual approval: approving pull request builds . to identify pr itself, use pull_request_id parameter: takes integer; example, number pr github. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"commit_hash\": \"fffff000000eeeeee\",\n \"pull_request_id\": 1\n }\n}' if git provider supports it, use pull_request_merge_branch parameter build pre-merged state branch pr. another alternative pull_request_head_branch parameter: special git ref point source pr. if want trigger build pr opened fork repository, use pull_request_repository_url parameter. the value url fork. " });
this.add({id:752, 
title:"Skipping Git status reports", 
body:" skipping git status reports if webhook set up, bitrise send status reports git provider builds. however, disabled api: use skip_git_status_report parameter. if set true , build status report sent. curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"skip_git_status_report\": true\n }\n}'\n " });
this.add({id:753, 
title:"Specifying Environment Variables", 
body:" specifying environment variables you define additional environment variables (env vars) build. these additional variables handled with priority secrets app env vars , means overwrite env vars defined build configuration (for example, app vars), secrets . define additional env vars with environments parameter. this parameter array objects , item array include mapped_to property. this contain: the key env var. the value env var. replacing env var names by default, env var names inside values replaced triggered build actual value target environment. this behavior disabled setting is_expand flag false . \"environments\":[\n {\"mapped_to\":\"api_test_env\",\"value\":\"this test value\",\"is_expand\":true},\n {\"mapped_to\":\"help_env\",\"value\":\"$home variable contains user's home directory path\",\"is_expand\":false},\n] " });
this.add({id:754, 
title:"Setting a Workflow for the build", 
body:" setting workflow build by default, workflow triggered build selected based content build_params app’s trigger map . this how webhooks select workflow build automatically, based trigger map. with api, overwrite selection specify exactly workflow want use. add workflow_id parameter build_params specify workflow want use specific build. here’s example deploy workflow: curl -x 'post' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds' -h 'accept: application\/json' 'authorization: access-token' 'content-type: -d '{\n \"hook_info\": {\n \"type\": \"bitrise\"\n },\n \"build_params\": \"branch\": \"main\",\n \"workflow_id\": \"primary\"\n }\n}' " });
this.add({id:755, 
title:"Aborting a build", 
body:" aborting build you abort running builds, set reason aborting, specify email notifications sent build. required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . to simply abort build, \/apps\/app-slug\/builds\/build-slug\/abort endpoint. it requires parameters: the app slug. the build slug. the build abort parameters body. this left don't want set any specific abort: -d \"{}\" . curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d \"{}\" you set reason aborting build using abort_reason parameter. this parameter takes string app’s build page. curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d '{\"abort_reason\": \"aborted reason\"}'\n normally, aborted builds count failed builds. use abort_with_success parameter abort build count successful one. the status report sent git provider bitrise.io displayed cancelled . curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d '{\"abort_with_success\": true}' depending app settings, bitrise send email notifications team members build aborted. if want notifications, set skip_notifications parameter true . curl -x post -h \"authorization: access-token\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/builds\/build-slug\/abort\" -d '{\"skip_notifications\": true}' " });
this.add({id:756, 
title:"Incoming and outgoing webhooks", 
body:" incoming outgoing webhooks both incoming outgoing webhooks set with bitrise api. they important automatic build triggering reporting events services. both incoming outgoing webhooks set with bitrise api. they important automatic build triggering reporting build events services. endpoints related incoming outgoing webhooks endpoints function required role app's team post \/apps\/{app-slug}\/register-webhook register incoming webhook specific application. owner admin get \/apps\/{app-slug}\/outgoing-webhooks list outgoing webhooks app. owner admin post \/apps\/{app-slug}\/outgoing-webhooks create outgoing webhook app. owner admin put \/apps\/{app-slug}\/outgoing-webhooks\/{app-webhook-slug} update outgoing webhook app. owner admin delete \/apps\/{app-slug}\/outgoing-webhooks\/{app-webhook-slug} delete outgoing webhook app. owner admin " });
this.add({id:757, 
title:"Registering an incoming webhook with the API", 
body:" registering incoming webhook with api incoming webhooks enable users set automatic triggers apps bitrise: example, bitrise webhook registered github automatically trigger build code pushed repository. required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . to set webhook, connect bitrise account git provider : allows bitrise register webhook automatically. register webhook calling register-webhook endpoint with existing app slug: curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/register-webhook' this register webhook git provider app. afterwards, set automatic triggers website trigger map app’s bitrise.yml file. " });
this.add({id:758, 
title:"Creating outgoing webhooks with the API", 
body:" creating outgoing webhooks with api outgoing webhooks enable integration with services: specifically, used notify services. currently, build event notifications supported. there supported events: triggering finishing build. build status reports notifying git provider build status does require outgoing webhooks. to set outgoing webhook application, need specify app itself creation parameters: the webhook url: service want integrate with bitrise. the events trigger webhook. currently, takes possible values: build . required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . you set custom headers specifying key\/value pair request. a new outgoing webhook with url 'example.webhook.com' request: curl -x post \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/outgoing-webhooks\" -h \"accept: application\/json\" \"authorization: access-token\" \"content-type: -d \"{ \\\"events\\\": [ \\\"build\\\" ], \\\"url\\\": \\\"example.webhook.com\\\", \\\"headers\\\": { \\\"key\\\": \\\"value\\\" }}\"\n response: {\n \"slug\": \"01d72arnh4kr7kmw3dg3nbkxrk\",\n \"url\": \"example.webhook.com\",\n \"events\": [\n \"build\"\n ],\n \"headers\": \"key\": \"value\"\n },\n \"registered_by_addon\":false,\n \"created_at\": \"2019-03-28t14:20:22.436825z\",\n \"updated_at\": \"2019-03-28t14:20:22.436825z\"\n} " });
this.add({id:759, 
title:"Modifying and deleting outgoing webhooks with the API", 
body:" modifying deleting outgoing webhooks with api to modify existing webhook, need specify mandatory parameters request. in words, want change url, request contain valid value events parameter. required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . modifying outgoing webhook request: curl -x put \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/outgoing-webhooks\/webhook-slug\" -h \"accept: application\/json\" \"authorization: access-token\" \"content-type: -d\" { \\\"events\\\": [ \\\"all\\\" ], \\\"headers\\\": \\\"modified\\\": \\\"1212\\\" }, \\\"url\\\": \\\"example2.webhook.com\\\"}\" response: {\n \"data\": \"slug\": \"webhook-slug\",\n \"url\": \"example2.webhook.com\",\n \"events\": [\n \"all\"\n ],\n \"headers\": \"modified\": \"1212\"\n },\n \"registered_by_addon\": false,\n \"created_at\": \"2019-03-28t14:20:22.436825z\",\n \"updated_at\": \"2019-03-28t14:20:22.436825z\"\n }\n} to delete outgoing webhook, need provide app slug webhook request: curl -x delete \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/outgoing-webhooks\/webhook-slug\" -h \"accept: application\/json\" \"authorization: access-token\" " });
this.add({id:757, 
title:"Registering an incoming webhook with the API", 
body:" registering incoming webhook with api incoming webhooks enable users set automatic triggers apps bitrise: example, bitrise webhook registered github automatically trigger build code pushed repository. required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . to set webhook, connect bitrise account git provider : allows bitrise register webhook automatically. register webhook calling register-webhook endpoint with existing app slug: curl -x post -h 'authorization: access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/register-webhook' this register webhook git provider app. afterwards, set automatic triggers website trigger map app’s bitrise.yml file. " });
this.add({id:758, 
title:"Creating outgoing webhooks with the API", 
body:" creating outgoing webhooks with api outgoing webhooks enable integration with services: specifically, used notify services. currently, build event notifications supported. there supported events: triggering finishing build. build status reports notifying git provider build status does require outgoing webhooks. to set outgoing webhook application, need specify app itself creation parameters: the webhook url: service want integrate with bitrise. the events trigger webhook. currently, takes possible values: build . required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . you set custom headers specifying key\/value pair request. a new outgoing webhook with url 'example.webhook.com' request: curl -x post \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/outgoing-webhooks\" -h \"accept: application\/json\" \"authorization: access-token\" \"content-type: -d \"{ \\\"events\\\": [ \\\"build\\\" ], \\\"url\\\": \\\"example.webhook.com\\\", \\\"headers\\\": { \\\"key\\\": \\\"value\\\" }}\"\n response: {\n \"slug\": \"01d72arnh4kr7kmw3dg3nbkxrk\",\n \"url\": \"example.webhook.com\",\n \"events\": [\n \"build\"\n ],\n \"headers\": \"key\": \"value\"\n },\n \"registered_by_addon\":false,\n \"created_at\": \"2019-03-28t14:20:22.436825z\",\n \"updated_at\": \"2019-03-28t14:20:22.436825z\"\n} " });
this.add({id:759, 
title:"Modifying and deleting outgoing webhooks with the API", 
body:" modifying deleting outgoing webhooks with api to modify existing webhook, need specify mandatory parameters request. in words, want change url, request contain valid value events parameter. required role you admin owner role app's team manage incoming outgoing webhooks using api. for complete list user roles role cheatsheets, check user roles on app teams . modifying outgoing webhook request: curl -x put \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/outgoing-webhooks\/webhook-slug\" -h \"accept: application\/json\" \"authorization: access-token\" \"content-type: -d\" { \\\"events\\\": [ \\\"all\\\" ], \\\"headers\\\": \\\"modified\\\": \\\"1212\\\" }, \\\"url\\\": \\\"example2.webhook.com\\\"}\" response: {\n \"data\": \"slug\": \"webhook-slug\",\n \"url\": \"example2.webhook.com\",\n \"events\": [\n \"all\"\n ],\n \"headers\": \"modified\": \"1212\"\n },\n \"registered_by_addon\": false,\n \"created_at\": \"2019-03-28t14:20:22.436825z\",\n \"updated_at\": \"2019-03-28t14:20:22.436825z\"\n }\n} to delete outgoing webhook, need provide app slug webhook request: curl -x delete \"https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/outgoing-webhooks\/webhook-slug\" -h \"accept: application\/json\" \"authorization: access-token\" " });
this.add({id:760, 
title:"Managing iOS code signing files", 
body:" managing ios code signing files you upload, update, list, delete ios code signing files with bitrise api: separate endpoints certificates provisioning profiles. this guide describes how manage ios code signing files with bitrise api. if you’d like learn ui, check ios code signing you upload, update, list, delete ios code signing files with api. in guide how order use endpoints. endpoints related ios provisioning profiles endpoints function required role app's team post\/apps\/{app-slug}\/provisioning-profiles create provisioning file owner admin post\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug}\/uploaded confirm upload process owner admin patch\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug} update uploaded provisioning file owner admin get\/apps\/{app-slug}\/provisioning-profiles get list uploaded provisioning files owner admin get\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug} retrieve data specific provisioning file owner admin delete\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug} delete uploaded provisioning file owner admin endpoints related ios code signing certificates endpoints function required role app's team post\/apps\/{app-slug}\/build-certificates create build certificate owner admin post\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug}\/uploaded confirm upload process owner admin patch\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug} update uploaded build certificate owner admin get\/apps\/{app-slug}\/build-certificates get list uploaded build certificate owner admin get\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug} retrieve data specific build certificate owner admin delete\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug} delete uploaded build certificate owner admin " });
this.add({id:761, 
title:"Uploading an iOS code signing file", 
body:" uploading ios code signing file required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . you upload ios code signing file (either .p12 certificate provisioning profile) bitrise app choice. this process does not create new file: uploads existing (created downloaded apple developer portal) aws url. it functionally uploading files website: ios code signing with manual provisioning . to upload ios code signing file api: call post method provisioning-profiles build-certificates endpoint create temporary pre-signed upload url expires minutes. the requires existing code signing file (certificate provisioning profile) parameters: upload_file_name : the filepath existing code signing file. for example, \/path\/to\/sample.p12 . upload_file_size : the size file bytes. \/\/ calling endpoint create temporary upload url\ncurl -x post -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles' -d '{\"upload_file_name\":\"sample.provisionprofile\",\"upload_file_size\":2047}' \/\/ the successful response: need \"upload_url\" \"slug\".\n{\n \"data\":{\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe6w\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"upload_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaioc7n256g7j2w2tq%2f20180216%2fus-west-2%2fs3%2faws4_request&x-amz-date=20180216t124240z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e\"\n }\n} the response first contains upload_url parameter. you need use upload_file_name parameter upload file aws with curl call. curl -t sample.provisionprofile 'https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaioc7n256g7j2w2tq%2f20180216%2fus-west-2%2fs3%2faws4_request&x-amz-date=20180216t124240z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e' confirm file upload with post uploaded endpoint: use slug response first post call. this sets processed flag file true . this flag can't changed afterwards! curl -x post -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles\/file-slug\/uploaded' " });
this.add({id:762, 
title:"Updating an uploaded iOS code signing file", 
body:" updating uploaded ios code signing file you perform minor updates uploaded ios code signing file using patch method. if you’ve uploaded file bitrise , visually check any changes code signing & files tab. required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . for example, make provisioning profile protected, set is_protected flag provisioning profiles true . curl -x patch -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles\/provisioning-profile-slug -d '{\"is_protected\":true}'\n for build certificate set attributes modify password too: curl -x patch -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/build-certificates\/build-certificate-slug -d '{\"certificate_password\":\"s0m3-v3ry-s3cr3t-str1ng\"}'\n be careful setting attributes you set is_protected , is_exposed processed attributes files you've uploaded: once is_protected flag set true, changed anymore. when value is_protected true, is_expose flag set value. once processed flag set true, value changed anymore. " });
this.add({id:763, 
title:"Getting a specific iOS code signing file's data", 
body:" getting specific ios code signing file's data required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . retrieve specific ios code signing file’s data with get method provisioning-profiles build-certificates endpoints. the returned data includes, things, file's name, size, download url, current status. the required parameters are: app slug file slug retrieving provisioning profile's data request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles\/provisioning-profile-slug' response: {\n \"data\": \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe6w\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"download_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/prov_profile_documents\/uploads\/80144\/original\/sample.provisionprofile?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaioc7n256g7j2w2tq%2f20180322%2fus-west-2%2fs3%2faws4_request&x-amz-date=20180322t091652z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=6dd7bb3db72aafb2d434da7b1a8f80a82a3a7a0276e84620137ed64de5025ab2\"\n }\n} availability download_url note download_url generated provisioning profile’s is_protected attribute false. " });
this.add({id:764, 
title:"Listing the iOS code signing files of an app", 
body:" listing ios code signing files app required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . wondering how ios code signing files belong app? get list using get method provisioning-profiles build-certificates endpoints. the required parameter is: app slug optional parameters are: next: slug first file response (as string) limit: max number elements page (as integer) default 50. getting provisioning profiles app request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles' response: {\n \"data\": [\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe6w\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false\n },\n \"upload_file_name\":\"sample2.provisionprofile\",\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe5t\",\n \"processed\":true,\n \"is_protected\":true\n }\n ],\n \"paging\": \"page_item_limit\": 50,\n \"total_item_count\": 2\n }\n}\n " });
this.add({id:761, 
title:"Uploading an iOS code signing file", 
body:" uploading ios code signing file required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . you upload ios code signing file (either .p12 certificate provisioning profile) bitrise app choice. this process does not create new file: uploads existing (created downloaded apple developer portal) aws url. it functionally uploading files website: ios code signing with manual provisioning . to upload ios code signing file api: call post method provisioning-profiles build-certificates endpoint create temporary pre-signed upload url expires minutes. the requires existing code signing file (certificate provisioning profile) parameters: upload_file_name : the filepath existing code signing file. for example, \/path\/to\/sample.p12 . upload_file_size : the size file bytes. \/\/ calling endpoint create temporary upload url\ncurl -x post -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles' -d '{\"upload_file_name\":\"sample.provisionprofile\",\"upload_file_size\":2047}' \/\/ the successful response: need \"upload_url\" \"slug\".\n{\n \"data\":{\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe6w\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"upload_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaioc7n256g7j2w2tq%2f20180216%2fus-west-2%2fs3%2faws4_request&x-amz-date=20180216t124240z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e\"\n }\n} the response first contains upload_url parameter. you need use upload_file_name parameter upload file aws with curl call. curl -t sample.provisionprofile 'https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaioc7n256g7j2w2tq%2f20180216%2fus-west-2%2fs3%2faws4_request&x-amz-date=20180216t124240z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e' confirm file upload with post uploaded endpoint: use slug response first post call. this sets processed flag file true . this flag can't changed afterwards! curl -x post -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles\/file-slug\/uploaded' " });
this.add({id:762, 
title:"Updating an uploaded iOS code signing file", 
body:" updating uploaded ios code signing file you perform minor updates uploaded ios code signing file using patch method. if you’ve uploaded file bitrise , visually check any changes code signing & files tab. required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . for example, make provisioning profile protected, set is_protected flag provisioning profiles true . curl -x patch -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles\/provisioning-profile-slug -d '{\"is_protected\":true}'\n for build certificate set attributes modify password too: curl -x patch -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/build-certificates\/build-certificate-slug -d '{\"certificate_password\":\"s0m3-v3ry-s3cr3t-str1ng\"}'\n be careful setting attributes you set is_protected , is_exposed processed attributes files you've uploaded: once is_protected flag set true, changed anymore. when value is_protected true, is_expose flag set value. once processed flag set true, value changed anymore. " });
this.add({id:763, 
title:"Getting a specific iOS code signing file's data", 
body:" getting specific ios code signing file's data required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . retrieve specific ios code signing file’s data with get method provisioning-profiles build-certificates endpoints. the returned data includes, things, file's name, size, download url, current status. the required parameters are: app slug file slug retrieving provisioning profile's data request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles\/provisioning-profile-slug' response: {\n \"data\": \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe6w\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"download_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/prov_profile_documents\/uploads\/80144\/original\/sample.provisionprofile?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaioc7n256g7j2w2tq%2f20180322%2fus-west-2%2fs3%2faws4_request&x-amz-date=20180322t091652z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=6dd7bb3db72aafb2d434da7b1a8f80a82a3a7a0276e84620137ed64de5025ab2\"\n }\n} availability download_url note download_url generated provisioning profile’s is_protected attribute false. " });
this.add({id:764, 
title:"Listing the iOS code signing files of an app", 
body:" listing ios code signing files app required role you admin owner role app's team manage ios code signing files using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . wondering how ios code signing files belong app? get list using get method provisioning-profiles build-certificates endpoints. the required parameter is: app slug optional parameters are: next: slug first file response (as string) limit: max number elements page (as integer) default 50. getting provisioning profiles app request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/provisioning-profiles' response: {\n \"data\": [\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe6w\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false\n },\n \"upload_file_name\":\"sample2.provisionprofile\",\n \"slug\":\"01c6fa6p6hrqt5pq8rmmvvxe5t\",\n \"processed\":true,\n \"is_protected\":true\n }\n ],\n \"paging\": \"page_item_limit\": 50,\n \"total_item_count\": 2\n }\n}\n " });
this.add({id:765, 
title:"Managing files in Generic File Storage", 
body:" managing files generic file storage you upload, delete, update, list any project files generic file storage bitrise. access api workflow editor. you upload, delete, update, list any project files generic file storage section bitrise. endpoints related generic file storage endpoints function required role app's team post\/apps\/{app-slug}\/generic-project-files create generic project file owner admin post\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug}\/uploaded confirm upload process owner admin patch\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug} update uploaded project file owner admin get\/apps\/{app-slug}\/generic-project-files get list uploaded project files owner admin get\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug} retrieve data specific project file owner admin delete\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug} delete uploaded project file owner admin " });
this.add({id:766, 
title:"Creating and uploading files to the Generic File Storage", 
body:" creating uploading files generic file storage required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . you add new files application store generic file storage section code signing tab. when calling relevant api endpoint, new temporary pre-signed upload url created use file generic file storage . (please note pre-signed url time-limited expires 10 minutes.) you'll need to: call post method generic-project-files endpoint. this creates temporary pre-signed upload url. the required parameters are: slug : app slug bitrise app. you opening copying url main page, calling get \/apps endpoint finding app list. upload_file_name : file, including file extension. for example, myfile.txt . the file folder command run. upload_file_size : size file bytes. on macos, running stat -f%z <filename> command. user_env_key : add any user env key. upload file aws using pre-signed upload url. confirm file upload. this sets processed flag true means file available bitrise. this flag can't changed afterwards! creating uploading file creating temporary pre-signed upload url: curl -x post \"https:\/\/api.bitrise.io\/v0.1\/apps\/583806e34b4ff0ff\/generic-project-files\" -h \"accept: application\/json\" \"authorization: 0fgs4dsnxg9sywp3xh9alkbuz7bc01zyjrj3ruhdwssadw7nuqbmhobviwzk76dxrj6md4axk16pfwj-i6a-ua\" \"content-type: -d \"{ \\\"upload_file_name\\\": \\\"test-file\\\", \\\"upload_file_size\\\": 4865, \\\"user_env_key\\\": \\\"test-file\\\"}\" response: {\n \"data\": \"upload_file_name\": \"test-file\",\n \"upload_file_size\": 4865,\n \"slug\": \"01d7f228e7n8q8wqjkjm8fv3xm\",\n \"processed\": false,\n \"is_expose\": true,\n \"is_protected\": \"upload_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/test-file?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190402%2fus-west-2%2fs3%2faws4_request&x-amz-date=20190402t125827z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\",\n \"user_env_key\": \"exposed_meta_datastore\": null\n }\n} uploading file aws: curl -t test-file.md \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/test-file?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190402%2fus-west-2%2fs3%2faws4_request&x-amz-date=20190402t125827z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\" confirming file upload: curl -x post -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-files\/generic-project-files-slug\/uploaded' response: {\n \"data\": \"upload_file_name\": \"test-file\",\n \"upload_file_size\": 4865,\n \"slug\": \"01d7f228e7n8q8wqjkjm8fv3xm\",\n \"processed\": true,\n \"is_expose\": \"is_protected\": false,\n \"user_env_key\": \"exposed_meta_datastore\": null\n }\n} " });
this.add({id:767, 
title:"Updating an uploaded file", 
body:" updating uploaded file required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . you perform minor updates uploaded file using patch method generic-project-files endpoint. if you’ve uploaded file bitrise , visually check changes generic file storage . the required parameters are: app slug generic project file slug generic project file attributes wish modify for example, make uploaded file protected, set is_protected flag file true . curl -x patch -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-file\/generic-project-file-slug -d '{\"is_protected\":true}' be careful setting attributes you set is_protected , is_exposed processed attributes files you've uploaded: once is_protected flag set true, changed anymore. when value is_protected true, is_expose flag set value. once processed flag set true, value changed anymore. " });
this.add({id:768, 
title:"Retrieving a specific file's data", 
body:" retrieving specific file's data required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . retrieve specific file’s data generic file storage with get method generic-project-files endpoint. the returned data includes, things, file's name, size, download url, current status. the required parameters are: app slug generic project file slug retrieving file request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-files\/generic-project-file-slug' response: {\n \"data\": \"upload_file_name\": \"test-file\",\n \"upload_file_size\": 4865,\n \"slug\": \"01d7f228e7n8q8wqjkjm8fv3xm\",\n \"processed\": true,\n \"is_expose\": \"is_protected\": false,\n \"download_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/test-file?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190402%2fus-west-2%2fs3%2faws4_request&x-amz-date=20190402t132712z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=241be52184b63867262360743931c546c166a99719787ce417e3be11bc12bbed\",\n \"user_env_key\": \"exposed_meta_datastore\": null\n }\n}\n availability download_url note download_url generated provisioning profile’s is_protected attribute false. " });
this.add({id:769, 
title:"Listing the uploaded files of an app", 
body:" listing uploaded files app required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . get list app's files uploaded generic file storage using get method. please note maximum number files 50 . the required parameter is: app slug optional parameters are: next: slug first file response (as string) limit: max number elements page (as integer) listing apps request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-files'\n response: {\n \"data\": [\n \"upload_file_name\": \"realmtasks.jks\",\n \"upload_file_size\": 2068,\n \"slug\": \"a37f6a0ff582f4ea\",\n \"processed\": true,\n \"is_expose\": \"is_protected\": false,\n \"user_env_key\": \"android_keystore\",\n \"exposed_meta_datastore\": null\n },\n \"test-file\",\n 4865,\n \"01d7f228e7n8q8wqjkjm8fv3xm\",\n }\n ],\n \"paging\": \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} as see, example response shows list files specific app. files uploaded android keystore section generic file storage shown. this fact android keystore files specific generic project represented separate ui field files. " });
this.add({id:770, 
title:"Deleting a file from the Generic File Storage", 
body:" deleting file generic file storage you delete uploaded file generic file storage using delete method. required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . the required parameters are: app slug generic project file slug curl -x delete “https:\/\/api.bitrise.io\/v0.1\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug}” -h “authorization:{authorization-token}” " });
this.add({id:766, 
title:"Creating and uploading files to the Generic File Storage", 
body:" creating uploading files generic file storage required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . you add new files application store generic file storage section code signing tab. when calling relevant api endpoint, new temporary pre-signed upload url created use file generic file storage . (please note pre-signed url time-limited expires 10 minutes.) you'll need to: call post method generic-project-files endpoint. this creates temporary pre-signed upload url. the required parameters are: slug : app slug bitrise app. you opening copying url main page, calling get \/apps endpoint finding app list. upload_file_name : file, including file extension. for example, myfile.txt . the file folder command run. upload_file_size : size file bytes. on macos, running stat -f%z <filename> command. user_env_key : add any user env key. upload file aws using pre-signed upload url. confirm file upload. this sets processed flag true means file available bitrise. this flag can't changed afterwards! creating uploading file creating temporary pre-signed upload url: curl -x post \"https:\/\/api.bitrise.io\/v0.1\/apps\/583806e34b4ff0ff\/generic-project-files\" -h \"accept: application\/json\" \"authorization: 0fgs4dsnxg9sywp3xh9alkbuz7bc01zyjrj3ruhdwssadw7nuqbmhobviwzk76dxrj6md4axk16pfwj-i6a-ua\" \"content-type: -d \"{ \\\"upload_file_name\\\": \\\"test-file\\\", \\\"upload_file_size\\\": 4865, \\\"user_env_key\\\": \\\"test-file\\\"}\" response: {\n \"data\": \"upload_file_name\": \"test-file\",\n \"upload_file_size\": 4865,\n \"slug\": \"01d7f228e7n8q8wqjkjm8fv3xm\",\n \"processed\": false,\n \"is_expose\": true,\n \"is_protected\": \"upload_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/test-file?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190402%2fus-west-2%2fs3%2faws4_request&x-amz-date=20190402t125827z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\",\n \"user_env_key\": \"exposed_meta_datastore\": null\n }\n} uploading file aws: curl -t test-file.md \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/test-file?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190402%2fus-west-2%2fs3%2faws4_request&x-amz-date=20190402t125827z&x-amz-expires=600&x-amz-signedheaders=content-length%3bhost&x-amz-signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\" confirming file upload: curl -x post -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-files\/generic-project-files-slug\/uploaded' response: {\n \"data\": \"upload_file_name\": \"test-file\",\n \"upload_file_size\": 4865,\n \"slug\": \"01d7f228e7n8q8wqjkjm8fv3xm\",\n \"processed\": true,\n \"is_expose\": \"is_protected\": false,\n \"user_env_key\": \"exposed_meta_datastore\": null\n }\n} " });
this.add({id:767, 
title:"Updating an uploaded file", 
body:" updating uploaded file required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . you perform minor updates uploaded file using patch method generic-project-files endpoint. if you’ve uploaded file bitrise , visually check changes generic file storage . the required parameters are: app slug generic project file slug generic project file attributes wish modify for example, make uploaded file protected, set is_protected flag file true . curl -x patch -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-file\/generic-project-file-slug -d '{\"is_protected\":true}' be careful setting attributes you set is_protected , is_exposed processed attributes files you've uploaded: once is_protected flag set true, changed anymore. when value is_protected true, is_expose flag set value. once processed flag set true, value changed anymore. " });
this.add({id:768, 
title:"Retrieving a specific file's data", 
body:" retrieving specific file's data required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . retrieve specific file’s data generic file storage with get method generic-project-files endpoint. the returned data includes, things, file's name, size, download url, current status. the required parameters are: app slug generic project file slug retrieving file request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-files\/generic-project-file-slug' response: {\n \"data\": \"upload_file_name\": \"test-file\",\n \"upload_file_size\": 4865,\n \"slug\": \"01d7f228e7n8q8wqjkjm8fv3xm\",\n \"processed\": true,\n \"is_expose\": \"is_protected\": false,\n \"download_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/test-file?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190402%2fus-west-2%2fs3%2faws4_request&x-amz-date=20190402t132712z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=241be52184b63867262360743931c546c166a99719787ce417e3be11bc12bbed\",\n \"user_env_key\": \"exposed_meta_datastore\": null\n }\n}\n availability download_url note download_url generated provisioning profile’s is_protected attribute false. " });
this.add({id:769, 
title:"Listing the uploaded files of an app", 
body:" listing uploaded files app required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . get list app's files uploaded generic file storage using get method. please note maximum number files 50 . the required parameter is: app slug optional parameters are: next: slug first file response (as string) limit: max number elements page (as integer) listing apps request: curl -x get -h 'authorization: the-access-token' 'https:\/\/api.bitrise.io\/v0.1\/apps\/app-slug\/generic-project-files'\n response: {\n \"data\": [\n \"upload_file_name\": \"realmtasks.jks\",\n \"upload_file_size\": 2068,\n \"slug\": \"a37f6a0ff582f4ea\",\n \"processed\": true,\n \"is_expose\": \"is_protected\": false,\n \"user_env_key\": \"android_keystore\",\n \"exposed_meta_datastore\": null\n },\n \"test-file\",\n 4865,\n \"01d7f228e7n8q8wqjkjm8fv3xm\",\n }\n ],\n \"paging\": \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} as see, example response shows list files specific app. files uploaded android keystore section generic file storage shown. this fact android keystore files specific generic project represented separate ui field files. " });
this.add({id:770, 
title:"Deleting a file from the Generic File Storage", 
body:" deleting file generic file storage you delete uploaded file generic file storage using delete method. required role you admin owner role app's team manage files generic file storage using bitrise api. for complete list user roles role cheatsheets, check user roles on app teams . the required parameters are: app slug generic project file slug curl -x delete “https:\/\/api.bitrise.io\/v0.1\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug}” -h “authorization:{authorization-token}” " });
this.add({id:771, 
title:"Managing build artifacts", 
body:" managing build artifacts you list, retrieve, update, delete any build artifacts with bitrise api. if add deploy bitrise.io step workflow , build run, access artifacts build's artifacts tab bitrise.io. artifact retention 365 days artifacts older than 365 days permanently deleted. you manage generated artifacts with bitrise api. build retention 200 days on builds page app, builds 200 days. the limit applies searching specific builds page. this limitation applies api calls: get\/apps\/{app-slug}\/builds endpoint related endpoints return builds 200 days. however, methods build older than 200 days: if know exact build url, access build. you use get\/apps\/{app-slug}\/archived-builds api endpoint: listing the archived builds of an app . endpoints related managing build artifacts with api endpoint function required role app's team get\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts listing build artifacts any get\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts\/{artifact-slug} retrieving data specific build artifact any patch\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts\/{artifact-slug} updating build artifact owner, admin, developer delete\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts\/{artifact-slug} deleting build artifact owner, admin, developer " });
this.add({id:772, 
title:"Listing build artifacts", 
body:" listing build artifacts required role you tester\/qa, developer, admin, owner role app's team list build artifacts using api. for complete list user roles role cheatsheets, check user roles on app teams . to able use build artifact endpoints, first list artifacts belong app’s build. the response with slug need later. the required parameters are: app slug build slug you use generated build artifact slug\/s response output with endpoints slug required parameter. listing artifacts app request: curl -x get \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\" -h \"accept: application\/json\" \"authorization: the-access-token\" response: {\n \"data\": [\n \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"file_size_bytes\": 1574799\n },\n \"app-debug.apk\",\n \"54ae701761c4f956\",\n 1574793\n }\n ],\n \"paging\": \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} " });
this.add({id:773, 
title:"Retrieving a specific build artifact's data", 
body:" retrieving specific build artifact's data required role you tester\/qa, developer, admin, owner role app's team retrive specific build's artifact data using api. for complete list user roles role cheatsheets, check user roles on app teams . you retrieve detailed data specific build's artifacts with endpoint. the response shows filename, artifact type, download url, file size. the required parameters are: app slug build slug artifact slug retrieving data specific artifact request: curl -x get \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/92e0b6ecae87b832\" -h \"accept: application\/json\" \"authorization: the-access-token\" response: {\n \"data\": \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626902\/another_app-debug.apk?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190426%2fus-east-1%2fs3%2faws4_request&x-amz-date=20190426t131627z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=9f1af26787f34b5cf0cbc18b2372313607b1e3c0203a9ce7e42da884a6ddf70f\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"public_install_page_url\": \"https:\/\/www.bitrise.io\/artifact\/7626902\/p\/8e5b2c62abe28fecef09b271de767920\",\n \"file_size_bytes\": 1574799\n }\n} by default, value is_public_page_enabled input set true . this way public_install_page_url available view basic information artifact url. you download using url response output. " });
this.add({id:774, 
title:"Disabling the public install page of an artifact", 
body:" disabling public install page artifact required role you developer, admin, owner role app's team disable public install page artifact using api. for complete list user roles role cheatsheets, check user roles on app teams . you update is_public_page_enabled parameter apk ipa files. please note parameter’s value set true default so disable with endpoint. the required parameters are: app slug build slug artifact slug disabling public install page apk file request: curl -x patch \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -h \"accept: application\/json\" \"authorization: the-access-token\" \"content-type: -d \"{ \\\"is_public_page_enabled\\\": false}\"\n response: {\n \"data\": \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626904\/app-debug.apk?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190503%2fus-east-1%2fs3%2faws4_request&x-amz-date=20190503t082800z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=7251fcbc0574ffac60b3f1d4a8c398658e49f0b86fb3cfec1500bde125738abc\",\n \"is_public_page_enabled\": false,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n} if check build’s artifacts tab, see public install page toggle disabled. " });
this.add({id:775, 
title:"Deleting a build artifact", 
body:" deleting build artifact required role you developer, admin, owner role app's team delete build artifact using api. for complete list user roles role cheatsheets, check user roles on app teams . you delete app’s specific build artifact. the required parameters are: app slug build slug artifact slug deleting apk file request: curl -x delete \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -h \"accept: application\/json\" \"authorization: the-access-token\" response: {\n \"data\": \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": null,\n \"is_public_page_enabled\": true,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n}\n " });
this.add({id:772, 
title:"Listing build artifacts", 
body:" listing build artifacts required role you tester\/qa, developer, admin, owner role app's team list build artifacts using api. for complete list user roles role cheatsheets, check user roles on app teams . to able use build artifact endpoints, first list artifacts belong app’s build. the response with slug need later. the required parameters are: app slug build slug you use generated build artifact slug\/s response output with endpoints slug required parameter. listing artifacts app request: curl -x get \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\" -h \"accept: application\/json\" \"authorization: the-access-token\" response: {\n \"data\": [\n \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"file_size_bytes\": 1574799\n },\n \"app-debug.apk\",\n \"54ae701761c4f956\",\n 1574793\n }\n ],\n \"paging\": \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} " });
this.add({id:773, 
title:"Retrieving a specific build artifact's data", 
body:" retrieving specific build artifact's data required role you tester\/qa, developer, admin, owner role app's team retrive specific build's artifact data using api. for complete list user roles role cheatsheets, check user roles on app teams . you retrieve detailed data specific build's artifacts with endpoint. the response shows filename, artifact type, download url, file size. the required parameters are: app slug build slug artifact slug retrieving data specific artifact request: curl -x get \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/92e0b6ecae87b832\" -h \"accept: application\/json\" \"authorization: the-access-token\" response: {\n \"data\": \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626902\/another_app-debug.apk?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190426%2fus-east-1%2fs3%2faws4_request&x-amz-date=20190426t131627z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=9f1af26787f34b5cf0cbc18b2372313607b1e3c0203a9ce7e42da884a6ddf70f\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"public_install_page_url\": \"https:\/\/www.bitrise.io\/artifact\/7626902\/p\/8e5b2c62abe28fecef09b271de767920\",\n \"file_size_bytes\": 1574799\n }\n} by default, value is_public_page_enabled input set true . this way public_install_page_url available view basic information artifact url. you download using url response output. " });
this.add({id:774, 
title:"Disabling the public install page of an artifact", 
body:" disabling public install page artifact required role you developer, admin, owner role app's team disable public install page artifact using api. for complete list user roles role cheatsheets, check user roles on app teams . you update is_public_page_enabled parameter apk ipa files. please note parameter’s value set true default so disable with endpoint. the required parameters are: app slug build slug artifact slug disabling public install page apk file request: curl -x patch \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -h \"accept: application\/json\" \"authorization: the-access-token\" \"content-type: -d \"{ \\\"is_public_page_enabled\\\": false}\"\n response: {\n \"data\": \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626904\/app-debug.apk?x-amz-algorithm=aws4-hmac-sha256&x-amz-content-sha256=unsigned-payload&x-amz-credential=akiaiv2yzwmvcnwnr2ha%2f20190503%2fus-east-1%2fs3%2faws4_request&x-amz-date=20190503t082800z&x-amz-expires=600&x-amz-signedheaders=host&x-amz-signature=7251fcbc0574ffac60b3f1d4a8c398658e49f0b86fb3cfec1500bde125738abc\",\n \"is_public_page_enabled\": false,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n} if check build’s artifacts tab, see public install page toggle disabled. " });
this.add({id:775, 
title:"Deleting a build artifact", 
body:" deleting build artifact required role you developer, admin, owner role app's team delete build artifact using api. for complete list user roles role cheatsheets, check user roles on app teams . you delete app’s specific build artifact. the required parameters are: app slug build slug artifact slug deleting apk file request: curl -x delete \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -h \"accept: application\/json\" \"authorization: the-access-token\" response: {\n \"data\": \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": null,\n \"is_public_page_enabled\": true,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n}\n " });
this.add({id:776, 
title:"API reference", 
body:" api reference a list descriptions bitrise api endpoints. https:\/\/api-docs.bitrise.io\/docs\/swagger.json " });
this.add({id:777, 
title:"References", 
body:" references references help understand create basic advanced bitrise configurations just graphical ui yaml mode, too. this section reference bitrise configuration: goal help understand create basic advanced configurations just graphical ui yaml mode, too. " });
this.add({id:778, 
title:"Basics of bitrise.yml", 
body:" basics bitrise.yml the bitrise.yml file heart bitrise configuration. the cli needs able run builds, locally website. the bitrise.yml file heart bitrise configuration. the bitrise cli needs file able run bitrise builds, locally website. a bare minimal bitrise.yml simple as: format_version: 11 the configuration valid does include execute with run . a minimal configuration bitrise run : format_version: 5\nworkflows:\n test: the configuration executed with bitrise run test . the bitrise cli won’t any errors, there’s declared do. let’s continue with example executes single script step run with bitrise run test . format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\napp:\n envs:\n - my_name: my name\nworkflows:\n test:\n steps:\n script@1.1.5:\n inputs:\n content: echo \"hello ${my_name}!\" a quick walk sample configuration: format_version : declares minimum bitrise cli format version. get cli’s supported highest version with bitrise version --full . format version number the format version number determines bitrise cli versions able run configuration. for example, set format_version 11 means bitrise cli versions don’t support format version 11 higher won’t able run configuration. this important use features available older bitrise cli versions. default_step_lib_source : specifies source use defined step. project_type : defines source project’s type (for example, android , ios , flutter ). app - envs : specifies environment variables (env var) available build, workflow step. workflows : collection separate build configurations run with bitrise run workflowid . in example workflow test , perform with bitrise run test . if you’d second workflow called main , run bitrise run test bitrise run main . steps : lists steps executed workflow run. in example test workflow includes single script step. if multiple steps declared, performed one. script@1.1.5 : step (reference) perform. this reference does steplib source declaration, means default_step_lib_source used steplib source. inputs : specifies step inputs. multiple inputs a step inputs. specify input bitrise.yml want set overwrite. content : input want set. in example, specified content script step. echo \"hello ${my_name}!\" : value specified content input. bitrise.yml size limitation if edit workflow bitrise.io (either workflow editor bitrise.yml tab) bitrise.yml exceeds size limitation, ui display following warning trying save changes: error saving! saving app config: validation failed: app config validation 784: unexpected token 'argument list long - bin\/bitrise this total, combined size bitrise.yml bitrise.secrets.yml file exceed 400kb. " });
this.add({id:779, 
title:"Customizing the bitrise.yml config", 
body:" customizing bitrise.yml config any tool edit bitrise.yml add custom properties it. this way special notes env vars, try new configurations workflow bitrise.yml . all add meta field namespace label with key value right place. any tool edit bitrise.yml add custom properties it. this way special notes env vars , try new configurations workflow bitrise.yml . all add meta field namespace label with key value right place. use following format add custom values configuration: key: \"value\",\nopts: {\n title: \"my env var\"\n description: \"description var.\"\n summary: \"summary ...\n meta: custom_namespace_id_1: key1: \"value1\",\n key2: \"value2\",\n }\n custom_namespace_id_2: }\n} using version workflow editor you fork workflow editor use version it. then meta : example, let's say want eye environment variables (env var), know was modified who. app:\n envs:\n - asxas: \"`zx`zx\"\n opts:\n is_expand: false\n meta:\n audit: # used audited workflow editor imaginary tool: works like wfe saves modifier modification date, displays it\n last_modified_at: 2018.09.12.\n last_modifier: jane doe adding background color environment variable you use meta add background color env var tool: meta: {\n my_fancy_new_workflow_editor: env_var_background_color: \"red\"\n }\n } you see meta action bitrise.io well. for example, select different stack workflow than default stack. just click editor ui pick type workflow\/s stacks & machines tab. this way test how workflow runs new stack. if head bitrise.yml tab, bitrise.io meta added deploy workflow: workflows:\n deploy:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone@4: {}\n script@1:\n title: do with script step\n deploy-to-bitrise-io@1: meta:\n bitrise.io:\n stack: osx-xcode-12.1.x\n since meta interpreted bitrise.io locally bitrise cli, categorized bitrise.io namespace (where stack key osx-xcode-12.1.x value). the workflow editor validates saved variable throws error syntax error, with meta added, content fully ignored workflow editor validation process. " });
this.add({id:780, 
title:"Workflow reference", 
body:" workflow reference all bitrise.yml properties you complete list available properties bitrise.yml format specification \/ reference docs cli. a workflow collection steps , environment variables , configurations single bitrise run command. the requirement workflow id. as example, configuration declared with id test . format_version: 1.3.1\nworkflows:\n test:\n you define multiple workflows run specific workflow with bitrise run workflowid . defining workflows: format_version: 1.3.1\nworkflows:\n first:\n second: list available workflows bitrise.yml file: bitrise run or, alternatively: bitrise workflows to add steps workflow simply include steps: add step(s). format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script:\n title: first step\n second step you define workflow-specific parameters environment variables. a workflow’s variables used workflow executed, available step workflow: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n envs:\n - env_var_one: first value\n env_var_two: second value you chain workflows run multiple and\/or specific workflow. format_version: 1.3.1\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n send-notifications:\n steps:\n # send notifications\n\n setup:\n setup steps run\n\n test:\n before_run:\n - setup\n envs:\n is_test: \"true\"\n test ci:\n test\n after_run:\n send-notifications\n\n deploy:\n steps deploy\n send-notifications\n based example, run: bitrise run send-notifications : steps send-notifications workflow executed. bitrise run setup : steps setup workflow executed. bitrise run test : first steps setup workflow executed, steps declared test workflow. bitrise run ci : execute steps workflows following order: setup test ci (the ci workflow doesn’t any steps, that’s issue. it just means step executed build continue with chain). send-notifications bitrise run deploy : execute steps workflows following order: setup test deploy send-notifications this means define setup test project setup test workflows once, reuse workflows. there’s need duplicate steps the bitrise cli supports small notation, called utility workflow: workflow id starts with underscore character, example, _setup . a utility workflow can't executed directly with bitrise run command: referenced with before_run after_run properties. you utility workflows end workflow list run bitrise run bitrise workflows : the following workflows available:\n * ci\n deploy\n\nyou run selected workflow with:\n$ bitrise workflow-id\n\nthe utility defined:\n _send-notifications\n _setup\n _test\n " });
this.add({id:781, 
title:"Steps reference", 
body:" steps reference a step encapsulates build task: code perform task, inputs parameters define outputs task generates. a step encapsulates build task: code perform task, inputs parameters define outputs task generates. for example git clone step performs git clone specified repository, with inputs, branch commit clone. from technical perspective, step semver versioned repository includes code interface definition step. the step interface definition defined step.yml file step. it includes: the dependencies step. the inputs outputs step. the title description step. properties issue tracker support url, certain filter properties. to include steps workflow , reference bitrise.yml file app. to so, need correct reference format step. in configuration file, specify input values inputs defined step's interface definition. " });
this.add({id:782, 
title:"Step reference\/ID format", 
body:" step reference\/id format to refer step bitrise.yml file, need include id. optionally, specify steplib source version, too. a step reference contain components: the steplib source: library step repositories, official bitrise step library . the step id: id step.yml definition. the step version: numerical version want include. use following syntax reference step: <step_lib_source>::<step-id>@<version>: from components step id required. for example: - script: this written as: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git::script@1: if version defined, latest step used. if steplib source defined, default_step_lib_source used. we recommend pinning major version step referencing it. in example above, script@1 means major version 1 script step pinned: run with latest available minor patch versions step. for example, version 1.2, 1.2.2 pinning major 1 means use 1.2.2. " });
this.add({id:783, 
title:"Special Step sources", 
body:" special step sources there special step sources: git:: path:: when use sources, step won’t identified library id data specify. " });
this.add({id:784, 
title:"The git:: source", 
body:" the git:: source the git:: source repository step git hosting provider. the script step’s github source is: https:\/\/github.com\/bitrise-io\/steps-script . to reference script step directly git reference, use git:: source, step’s git clone url, branch tag repository. to reference 1.1.3 version tag script step’s repository: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: in general, use step version library, that, instead using git:: source type. features like local step caching, network alternative download urls supported steps shared steplib. but type referencing allows certain things can’t steplib. for example, git:: source type used not-yet-published work-in-progress states step. if develop step, use git:: source type test step publish steplib. to reference soon-to-be-released branch repository you're developing step: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@soon-to-be-released: " });
this.add({id:785, 
title:"The path:: source", 
body:" the path:: source the path:: source specifies local path step's repository, requires version information. both absolute relative paths supported. a folder containing bitrise.yml file. - path::\/path\/to\/my\/step:\n\n- path::.\/relative\/path: this useful step development. it used want include build steps app’s source code. " });
this.add({id:786, 
title:"Step data in the bitrise.yml file", 
body:" step data bitrise.yml file the step data information specify bitrise.yml file parameters step want change, compared step’s default definition. the step data information specify bitrise.yml file parameters step want change, compared step’s default definition. to see step’s raw interface definition check step library. the step definitions steplib’s steps directory . if don’t specify any input step property bitrise.yml configuration, step (reference\/id), run with default values defined step’s developer interface definition. let’s see example with single script step, executed run bitrise run test : format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n specify inputs step with inputs: list property. an input consists key value : indentation indentation yaml format important! you use two- four-space indentation, can’t tabs indent! format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n inputs:\n content: \"echo 'hello world!'\" if step doesn’t any required inputs don’t specify input. you values want to. step input values string \/ text values passed step environment variables. the value multiline too, using standard yaml format: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n content: |\n #!\/bin\/bash\n set -ex\n var_to_print='hello world!'\n echo \"${var_to_print}\" if use multiline value, like above, indent value with spaces, compared key! force step run previous fails setting is_always_run property true : format_version: 1.3.1\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n is_always_run: true\n inputs:\n content: \"puts 'hello ruby!'\"\n runner_bin: ruby\n use title property add descriptive title step: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n title: print hello ruby\n is_always_run: true\n inputs:\n content: \"puts 'hello ruby!'\"\n runner_bin: ruby " });
this.add({id:787, 
title:"Step properties", 
body:" step properties step properties provide important data step, project type, source code dependencies requires. a step’s inputs outputs defined properties. step properties provide important data step, project type, source code dependencies requires. a step’s inputs outputs defined step properties. let’s look properties! title , summary description : metadata, comments, tools gui. meta properties permanent comments these meta properties used permanent comments. standard yml comments preserved normalized, converted json generated transformed. are. website : official website step \/ service. source_code_url : url step’s source code viewed. support_url : url step’s support \/ issue tracker. published_at : auto-generated share - steplib publish date step’s version source : auto-generated share git clone information. asset_urls : auto-generated share step assets (steplib specific), like icon image. host_os_tags : supported operating systems. currently unused, reserved future use. project_type_tags : project type tags step specific. example: ios android . completely optional, used search filtering step lists. type_tags : generic type tags related step. example: utility , test notification . similar project_type_tags , property completely optional, used search filtering step lists. deps : specifies required dependencies step. to declare dependency, specify package manager dependency wish install. inputs : inputs (environments) step. outputs : outputs (environments) step. " });
this.add({id:788, 
title:"Step inputs reference", 
body:" step inputs reference step inputs environment items tell bitrise cli how run given step. the defined step.yml file step setting inputs property.. step inputs environment items tell bitrise cli how run given step. the inputs step defined step.yml file step setting inputs property.. step inputs syntax environment property. it consists main parts: key: value pair opts field. inputs:\n- my_key_for_the_env: \"default value\" \n opts: title: an example env var item is_dont_change_value: false category: my_key_for_the_env : key input (required). default value : default value input. you don’t provide value. opts : optional properties. " });
this.add({id:789, 
title:"Step input properties", 
body:" step input properties the available properties step inputs: title , summary description : metadata, comments, tools gui. meta properties permanent comments these meta properties used permanent comments. standard yml comments preserved normalized, converted json generated transformed. are. is_expand : set true false . the default value true so bitrise cli expands environment variables (env vars) passing step. that means step input's value env var, pass variable's if set false , cli pass env var's key string. skip_if_empty : set true false . if set true , input used value empty. category : used categorize input. inputs with category appear grouped menu website ui, sake convenience. value_options : list available values. is_required : set true false . if set true , step requires non-empty value set input. is_dont_change_value : set true false . if set true , value input changed and\/or hidden uis. mainly used debug inputs “ connection ” inputs (set outputs steps, connect step with one). is_template : set true false . if set true , input’s value evaulated go template. is_sensitive : marking input sensitive means accept secret environment variable value. it frequently used information passwords, api keys, tokens, any marked sensitive. " });
this.add({id:790, 
title:"Using template expressions for Step inputs", 
body:" using template expressions step inputs if need step use certain value circumstances, template expressions inputs. template evaluated uses input. they written go’s template language . set is_template property step.yml file project use template expressions. open step.yml file project. find step wish use template expression. add opts field content step. add is_template property opts set value true . add template expression step’s content . checking bitrise cli ci mode - script:\n title: template example\n inputs:\n content: |-\n {{if .isci}}\n echo \"ci mode\"\n {{else}}\n \"not ci {{end}}\n opts:\n is_template: true " });
this.add({id:791, 
title:"Step outputs reference", 
body:" step outputs reference step outputs environment items result running given step. you check default workflow editor bitrise.io step.yml file step. step outputs environment items result running given step. for example, deploy bitrise.io step generates output envs default: $bitrise_public_install_page_url bitrise_public_install_page_url_map you check default outputs step workflow editor bitrise.io step.yml file step. step outputs defined step.yml file project setting outputs attribute. they syntax environment property. it consists main parts: key: value pair opts field. the key value required, opts field optional. - my_key_for_the_env: value env\n opts:\n title: an example env var item\n is_dont_change_value: false\n category: my_key_for_the_env : the key environment item (required). value env : the value item (required). opts : optional attributes. the default outputs step changed user bitrise.yml file project: changed step.yml file. however, export output custom environment variable . this useful, example, step twice workflow wish use generated output steps: workflows:\n primary:\n steps:\n - gradle-runner:\n outputs:\n bitrise_apk_path: alias_apk_path\n in example, value bitrise_apk_path environment variable exported alias_apk_path key. " });
this.add({id:792, 
title:"Available Environment Variables", 
body:" available environment variables environment variables (env vars) consist key value, optional attributes. they defined level apps, workflows steps. environment variables (env vars) consist key value. they include optional attributes. defined level apps , workflows steps . you set env vars selection exposed automatically bitrise cli bitrise.io . env vars exposed bitrise cli available everywhere, run build computer. env vars exposed bitrise.io available builds running bitrise.io virtual machines. pipeline env vars exposed bitrise.io available pipeline builds running bitrise.io virtual machines. in addition, plenty bitrise steps export output variables. these variables available subsequent build. you step configuration step: in workflow editor, check output properties section step. in step.yml step, outputs . release management passes number env vars bitrise builds: table 35, “ . environment variables set availability order. this order available build progresses: availability order of environment variables . step outputs exposed env vars steps expose step outputs env vars. for example, builds binary var. as basically any bitrise way, won't list environment variables related git cloning process: table 36, “ . env vars exposed bitrise cli env var key description $bitrise_triggered_workflow_id the id workflow was triggered . this env var exposed regardless workflow was triggered manually automatically. $bitrise_triggered_workflow_title the title workflow was triggered. this env var exposed regardless triggered manually automatically. $bitrise_build_status the current status build. available options are: 0: successful. 1: failed. a successful current status means none previous steps build failed. $bitrise_source_dir path base working directory. by default, it’s directory bitrise runs, unless provide different value. this overwritten build, change subsequent steps build. $bitrise_deploy_dir path directory stores artifacts files deployment. it’s temporary created bitrise cli default, overwritten starting cli. the deploy bitrise.io step looks build artifacts - ipa apk app -, test results, files directory. $bitrise_test_result_dir root directory test results created bitrise cli. test placed accessed test reports add-on . $ci indicates bitrise cli running continuous integration mode. the possible values are: true false $pr indicates bitrise cli running pr (pull request) mode. running pull request mode means builds code state was merged. the possible values are: true false env vars exposed bitrise.io env var key description $bitrise_build_number build number build bitrise.io . $bitrise_app_title the title app bitrise.io . you change any time settings tab app. $bitrise_app_url the url app bitrise.io . this git repository url! an app url following format: app.bitrise.io\/app-slug\/ for example: https:\/\/app.bitrise.io\/app\/31e481ce08e0xfd9. $bitrise_app_slug the slug uniquely identifies app bitrise.io . it’s app url, too. $bitrise_build_url the url build bitrise.io . $bitrise_build_slug the slug uniquely identifies build bitrise.io . it’s build url, too. for example, let’s look build url: https:\/\/app.bitrise.io\/build\/d75abbebxfc9ca4e. the slug d65abbebxfc9ca4e example. $bitrise_build_trigger_timestamp the date time build was triggered. $git_repository_url the url git repository hosts app. this changed settings tab app. it ssh https format. $bitrise_git_branch the git branch built bitrise. for example, main . $bitriseio_git_branch_dest used with builds triggered pull requests: destination\/target branch request build. for example, pull request wants merge content branch main . in case, env var’s value main . $bitrise_git_tag if build triggered git tag, env var stores tag used. $bitrise_git_commit the commit hash git triggered build, applicable. $bitrise_git_message the commit message, pull request title, message specified triggered build manually. $bitriseio_git_repository_owner the owner git repository app. $bitriseio_git_repository_slug the slug git repository app. $bitrise_pull_request the id pull request triggered build. $bitriseio_pull_request_repository_url the url repository pull request triggered build sent. $bitriseio_pull_request_merge_branch the pre-merge branch - git hosting provider supports provides pre-merged state pull request special merge branch. $bitriseio_pull_request_head_branch the pull request head branch, git hosting provider supports provides this. this special git ref point source request. $github_pr_is_draft for apps hosted github only: set true build triggered draft pull request . $bitrise_provision_url the url apple provisioning profiles uploaded bitrise.io . if than provisioning profile uploaded app, pipe character ( | ) separates urls list. this relevant ios apps cross-platform with versions. $bitrise_certificate_url the url apple certificates uploaded bitrise.io . if than certificate uploaded app, pipe character ( | ) separates urls list. this relevant ios apps cross-platform with versions. $bitrise_certificate_passphrase the passphrase set uploaded apple certificates app’s code signing & files tab. if than certificate with passphrase, pipe character ( | ) separates phrases list. this relevant ios apps cross-platform with versions. $bitrise_io indicates build running bitrise.io environment. value set true bitrise starts build. pipeline env vars exposed bitrise.io env var key description $bitriseio_pipeline_id the id running pipeline build. this env var exposed regardless was triggered manually automatically. $bitriseio_pipeline_title the running pipeline build. this env var exposed regardless was triggered manually automatically. $bitriseio_finished_stages the status previously finished stages workflows build. please note value env var change future! $bitriseio_pipeline_build_status the current status pipeline build. value env var be: succeeded , succeeded_with_abort , failed , aborted . while pipeline running, env var's status based previously finished stages. $bitriseio_pipeline_build_url the url pipeline build. environment variables passed builds release management env var key description rm_release_candidate_version the version binary (apk\/aab ipa file) generated release candidate build. rm_release_candidate_download_url the download url binary (apk\/aab ipa file) generated release candidate build. rm_release_candidate_slug unique identifier binary (apk\/aab ipa file) generated release candidate build. rm_release_version the release (for google play releases) version app store release management. rm_release_candidate_build_slug the build slug was selected release candidate release. env vars exposed git clone repository step env var key description $git_clone_commit_hash the hash commit build uses (the cloned commit). $git_clone_commit_message_subject the subject commit message cloned commit. $git_clone_commit_message_body the body (content) commit message cloned commit. $git_clone_commit_count the commit count cloned commit. this env var influenced clone_depth step input. for information, check git clone step description . $git_clone_commit_author_name the author cloned commit. $git_clone_commit_author_email the email author cloned commit. $git_clone_commit_commiter_name the committer cloned commit. $git_clone_commit_commiter_email the email committer cloned commit. " });
this.add({id:793, 
title:"Bitrise tools", 
body:" bitrise tools a list open source tools used maintained bitrise team. here list open source tools maintained bitrise team. bitrise tools name type description link bitrise cli cli the bitrise cli used bitrise.io run builds. you use builds locally. https:\/\/github.com\/bitrise-io\/bitrise stepman cli tool the step collection manager used managing library. https:\/\/github.com\/bitrise-io\/stepman envman cli tool the environment variable manager used bitrise cli isolate manage environment variables build. it used independently bitrise cli. https:\/\/github.com\/bitrise-io\/envman init cli core plugin use plugin so project scanner detect type locally generate bitrise configuration. https:\/\/github.com\/bitrise-io\/bitrise-plugins-init.git step cli core plugin use plugin list, retrieve step information create steps. https:\/\/github.com\/bitrise-io\/bitrise-plugins-step workflow-editor cli core plugin use plugin configure builds’ bitrise.yml config locally with offline workflow editor. https:\/\/github.com\/bitrise-io\/bitrise-workflow-editor.git bitrise-plugin-io cli core plugin use plugin manage apps bitrise.io right terminal \/ command line. https:\/\/github.com\/bitrise-io\/bitrise-plugins-io bitrise webhooks webhook processor this bitrise webhooks processor transforms various incoming webhooks (for example, github, bitbucket, slack) bitrise.io ’s build trigger api format, calls start build. https:\/\/github.com\/bitrise-io\/bitrise-webhooks " });
this.add({id:778, 
title:"Basics of bitrise.yml", 
body:" basics bitrise.yml the bitrise.yml file heart bitrise configuration. the cli needs able run builds, locally website. the bitrise.yml file heart bitrise configuration. the bitrise cli needs file able run bitrise builds, locally website. a bare minimal bitrise.yml simple as: format_version: 11 the configuration valid does include execute with run . a minimal configuration bitrise run : format_version: 5\nworkflows:\n test: the configuration executed with bitrise run test . the bitrise cli won’t any errors, there’s declared do. let’s continue with example executes single script step run with bitrise run test . format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\napp:\n envs:\n - my_name: my name\nworkflows:\n test:\n steps:\n script@1.1.5:\n inputs:\n content: echo \"hello ${my_name}!\" a quick walk sample configuration: format_version : declares minimum bitrise cli format version. get cli’s supported highest version with bitrise version --full . format version number the format version number determines bitrise cli versions able run configuration. for example, set format_version 11 means bitrise cli versions don’t support format version 11 higher won’t able run configuration. this important use features available older bitrise cli versions. default_step_lib_source : specifies source use defined step. project_type : defines source project’s type (for example, android , ios , flutter ). app - envs : specifies environment variables (env var) available build, workflow step. workflows : collection separate build configurations run with bitrise run workflowid . in example workflow test , perform with bitrise run test . if you’d second workflow called main , run bitrise run test bitrise run main . steps : lists steps executed workflow run. in example test workflow includes single script step. if multiple steps declared, performed one. script@1.1.5 : step (reference) perform. this reference does steplib source declaration, means default_step_lib_source used steplib source. inputs : specifies step inputs. multiple inputs a step inputs. specify input bitrise.yml want set overwrite. content : input want set. in example, specified content script step. echo \"hello ${my_name}!\" : value specified content input. bitrise.yml size limitation if edit workflow bitrise.io (either workflow editor bitrise.yml tab) bitrise.yml exceeds size limitation, ui display following warning trying save changes: error saving! saving app config: validation failed: app config validation 784: unexpected token 'argument list long - bin\/bitrise this total, combined size bitrise.yml bitrise.secrets.yml file exceed 400kb. " });
this.add({id:779, 
title:"Customizing the bitrise.yml config", 
body:" customizing bitrise.yml config any tool edit bitrise.yml add custom properties it. this way special notes env vars, try new configurations workflow bitrise.yml . all add meta field namespace label with key value right place. any tool edit bitrise.yml add custom properties it. this way special notes env vars , try new configurations workflow bitrise.yml . all add meta field namespace label with key value right place. use following format add custom values configuration: key: \"value\",\nopts: {\n title: \"my env var\"\n description: \"description var.\"\n summary: \"summary ...\n meta: custom_namespace_id_1: key1: \"value1\",\n key2: \"value2\",\n }\n custom_namespace_id_2: }\n} using version workflow editor you fork workflow editor use version it. then meta : example, let's say want eye environment variables (env var), know was modified who. app:\n envs:\n - asxas: \"`zx`zx\"\n opts:\n is_expand: false\n meta:\n audit: # used audited workflow editor imaginary tool: works like wfe saves modifier modification date, displays it\n last_modified_at: 2018.09.12.\n last_modifier: jane doe adding background color environment variable you use meta add background color env var tool: meta: {\n my_fancy_new_workflow_editor: env_var_background_color: \"red\"\n }\n } you see meta action bitrise.io well. for example, select different stack workflow than default stack. just click editor ui pick type workflow\/s stacks & machines tab. this way test how workflow runs new stack. if head bitrise.yml tab, bitrise.io meta added deploy workflow: workflows:\n deploy:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"ssh_rsa_private_key\" | ne \"\"}}'\n git-clone@4: {}\n script@1:\n title: do with script step\n deploy-to-bitrise-io@1: meta:\n bitrise.io:\n stack: osx-xcode-12.1.x\n since meta interpreted bitrise.io locally bitrise cli, categorized bitrise.io namespace (where stack key osx-xcode-12.1.x value). the workflow editor validates saved variable throws error syntax error, with meta added, content fully ignored workflow editor validation process. " });
this.add({id:780, 
title:"Workflow reference", 
body:" workflow reference all bitrise.yml properties you complete list available properties bitrise.yml format specification \/ reference docs cli. a workflow collection steps , environment variables , configurations single bitrise run command. the requirement workflow id. as example, configuration declared with id test . format_version: 1.3.1\nworkflows:\n test:\n you define multiple workflows run specific workflow with bitrise run workflowid . defining workflows: format_version: 1.3.1\nworkflows:\n first:\n second: list available workflows bitrise.yml file: bitrise run or, alternatively: bitrise workflows to add steps workflow simply include steps: add step(s). format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script:\n title: first step\n second step you define workflow-specific parameters environment variables. a workflow’s variables used workflow executed, available step workflow: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n envs:\n - env_var_one: first value\n env_var_two: second value you chain workflows run multiple and\/or specific workflow. format_version: 1.3.1\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n send-notifications:\n steps:\n # send notifications\n\n setup:\n setup steps run\n\n test:\n before_run:\n - setup\n envs:\n is_test: \"true\"\n test ci:\n test\n after_run:\n send-notifications\n\n deploy:\n steps deploy\n send-notifications\n based example, run: bitrise run send-notifications : steps send-notifications workflow executed. bitrise run setup : steps setup workflow executed. bitrise run test : first steps setup workflow executed, steps declared test workflow. bitrise run ci : execute steps workflows following order: setup test ci (the ci workflow doesn’t any steps, that’s issue. it just means step executed build continue with chain). send-notifications bitrise run deploy : execute steps workflows following order: setup test deploy send-notifications this means define setup test project setup test workflows once, reuse workflows. there’s need duplicate steps the bitrise cli supports small notation, called utility workflow: workflow id starts with underscore character, example, _setup . a utility workflow can't executed directly with bitrise run command: referenced with before_run after_run properties. you utility workflows end workflow list run bitrise run bitrise workflows : the following workflows available:\n * ci\n deploy\n\nyou run selected workflow with:\n$ bitrise workflow-id\n\nthe utility defined:\n _send-notifications\n _setup\n _test\n " });
this.add({id:781, 
title:"Steps reference", 
body:" steps reference a step encapsulates build task: code perform task, inputs parameters define outputs task generates. a step encapsulates build task: code perform task, inputs parameters define outputs task generates. for example git clone step performs git clone specified repository, with inputs, branch commit clone. from technical perspective, step semver versioned repository includes code interface definition step. the step interface definition defined step.yml file step. it includes: the dependencies step. the inputs outputs step. the title description step. properties issue tracker support url, certain filter properties. to include steps workflow , reference bitrise.yml file app. to so, need correct reference format step. in configuration file, specify input values inputs defined step's interface definition. " });
this.add({id:782, 
title:"Step reference\/ID format", 
body:" step reference\/id format to refer step bitrise.yml file, need include id. optionally, specify steplib source version, too. a step reference contain components: the steplib source: library step repositories, official bitrise step library . the step id: id step.yml definition. the step version: numerical version want include. use following syntax reference step: <step_lib_source>::<step-id>@<version>: from components step id required. for example: - script: this written as: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git::script@1: if version defined, latest step used. if steplib source defined, default_step_lib_source used. we recommend pinning major version step referencing it. in example above, script@1 means major version 1 script step pinned: run with latest available minor patch versions step. for example, version 1.2, 1.2.2 pinning major 1 means use 1.2.2. " });
this.add({id:783, 
title:"Special Step sources", 
body:" special step sources there special step sources: git:: path:: when use sources, step won’t identified library id data specify. " });
this.add({id:784, 
title:"The git:: source", 
body:" the git:: source the git:: source repository step git hosting provider. the script step’s github source is: https:\/\/github.com\/bitrise-io\/steps-script . to reference script step directly git reference, use git:: source, step’s git clone url, branch tag repository. to reference 1.1.3 version tag script step’s repository: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: in general, use step version library, that, instead using git:: source type. features like local step caching, network alternative download urls supported steps shared steplib. but type referencing allows certain things can’t steplib. for example, git:: source type used not-yet-published work-in-progress states step. if develop step, use git:: source type test step publish steplib. to reference soon-to-be-released branch repository you're developing step: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@soon-to-be-released: " });
this.add({id:785, 
title:"The path:: source", 
body:" the path:: source the path:: source specifies local path step's repository, requires version information. both absolute relative paths supported. a folder containing bitrise.yml file. - path::\/path\/to\/my\/step:\n\n- path::.\/relative\/path: this useful step development. it used want include build steps app’s source code. " });
this.add({id:786, 
title:"Step data in the bitrise.yml file", 
body:" step data bitrise.yml file the step data information specify bitrise.yml file parameters step want change, compared step’s default definition. the step data information specify bitrise.yml file parameters step want change, compared step’s default definition. to see step’s raw interface definition check step library. the step definitions steplib’s steps directory . if don’t specify any input step property bitrise.yml configuration, step (reference\/id), run with default values defined step’s developer interface definition. let’s see example with single script step, executed run bitrise run test : format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n specify inputs step with inputs: list property. an input consists key value : indentation indentation yaml format important! you use two- four-space indentation, can’t tabs indent! format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n inputs:\n content: \"echo 'hello world!'\" if step doesn’t any required inputs don’t specify input. you values want to. step input values string \/ text values passed step environment variables. the value multiline too, using standard yaml format: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n content: |\n #!\/bin\/bash\n set -ex\n var_to_print='hello world!'\n echo \"${var_to_print}\" if use multiline value, like above, indent value with spaces, compared key! force step run previous fails setting is_always_run property true : format_version: 1.3.1\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n is_always_run: true\n inputs:\n content: \"puts 'hello ruby!'\"\n runner_bin: ruby\n use title property add descriptive title step: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n title: print hello ruby\n is_always_run: true\n inputs:\n content: \"puts 'hello ruby!'\"\n runner_bin: ruby " });
this.add({id:787, 
title:"Step properties", 
body:" step properties step properties provide important data step, project type, source code dependencies requires. a step’s inputs outputs defined properties. step properties provide important data step, project type, source code dependencies requires. a step’s inputs outputs defined step properties. let’s look properties! title , summary description : metadata, comments, tools gui. meta properties permanent comments these meta properties used permanent comments. standard yml comments preserved normalized, converted json generated transformed. are. website : official website step \/ service. source_code_url : url step’s source code viewed. support_url : url step’s support \/ issue tracker. published_at : auto-generated share - steplib publish date step’s version source : auto-generated share git clone information. asset_urls : auto-generated share step assets (steplib specific), like icon image. host_os_tags : supported operating systems. currently unused, reserved future use. project_type_tags : project type tags step specific. example: ios android . completely optional, used search filtering step lists. type_tags : generic type tags related step. example: utility , test notification . similar project_type_tags , property completely optional, used search filtering step lists. deps : specifies required dependencies step. to declare dependency, specify package manager dependency wish install. inputs : inputs (environments) step. outputs : outputs (environments) step. " });
this.add({id:788, 
title:"Step inputs reference", 
body:" step inputs reference step inputs environment items tell bitrise cli how run given step. the defined step.yml file step setting inputs property.. step inputs environment items tell bitrise cli how run given step. the inputs step defined step.yml file step setting inputs property.. step inputs syntax environment property. it consists main parts: key: value pair opts field. inputs:\n- my_key_for_the_env: \"default value\" \n opts: title: an example env var item is_dont_change_value: false category: my_key_for_the_env : key input (required). default value : default value input. you don’t provide value. opts : optional properties. " });
this.add({id:789, 
title:"Step input properties", 
body:" step input properties the available properties step inputs: title , summary description : metadata, comments, tools gui. meta properties permanent comments these meta properties used permanent comments. standard yml comments preserved normalized, converted json generated transformed. are. is_expand : set true false . the default value true so bitrise cli expands environment variables (env vars) passing step. that means step input's value env var, pass variable's if set false , cli pass env var's key string. skip_if_empty : set true false . if set true , input used value empty. category : used categorize input. inputs with category appear grouped menu website ui, sake convenience. value_options : list available values. is_required : set true false . if set true , step requires non-empty value set input. is_dont_change_value : set true false . if set true , value input changed and\/or hidden uis. mainly used debug inputs “ connection ” inputs (set outputs steps, connect step with one). is_template : set true false . if set true , input’s value evaulated go template. is_sensitive : marking input sensitive means accept secret environment variable value. it frequently used information passwords, api keys, tokens, any marked sensitive. " });
this.add({id:790, 
title:"Using template expressions for Step inputs", 
body:" using template expressions step inputs if need step use certain value circumstances, template expressions inputs. template evaluated uses input. they written go’s template language . set is_template property step.yml file project use template expressions. open step.yml file project. find step wish use template expression. add opts field content step. add is_template property opts set value true . add template expression step’s content . checking bitrise cli ci mode - script:\n title: template example\n inputs:\n content: |-\n {{if .isci}}\n echo \"ci mode\"\n {{else}}\n \"not ci {{end}}\n opts:\n is_template: true " });
this.add({id:791, 
title:"Step outputs reference", 
body:" step outputs reference step outputs environment items result running given step. you check default workflow editor bitrise.io step.yml file step. step outputs environment items result running given step. for example, deploy bitrise.io step generates output envs default: $bitrise_public_install_page_url bitrise_public_install_page_url_map you check default outputs step workflow editor bitrise.io step.yml file step. step outputs defined step.yml file project setting outputs attribute. they syntax environment property. it consists main parts: key: value pair opts field. the key value required, opts field optional. - my_key_for_the_env: value env\n opts:\n title: an example env var item\n is_dont_change_value: false\n category: my_key_for_the_env : the key environment item (required). value env : the value item (required). opts : optional attributes. the default outputs step changed user bitrise.yml file project: changed step.yml file. however, export output custom environment variable . this useful, example, step twice workflow wish use generated output steps: workflows:\n primary:\n steps:\n - gradle-runner:\n outputs:\n bitrise_apk_path: alias_apk_path\n in example, value bitrise_apk_path environment variable exported alias_apk_path key. " });
this.add({id:782, 
title:"Step reference\/ID format", 
body:" step reference\/id format to refer step bitrise.yml file, need include id. optionally, specify steplib source version, too. a step reference contain components: the steplib source: library step repositories, official bitrise step library . the step id: id step.yml definition. the step version: numerical version want include. use following syntax reference step: <step_lib_source>::<step-id>@<version>: from components step id required. for example: - script: this written as: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git::script@1: if version defined, latest step used. if steplib source defined, default_step_lib_source used. we recommend pinning major version step referencing it. in example above, script@1 means major version 1 script step pinned: run with latest available minor patch versions step. for example, version 1.2, 1.2.2 pinning major 1 means use 1.2.2. " });
this.add({id:783, 
title:"Special Step sources", 
body:" special step sources there special step sources: git:: path:: when use sources, step won’t identified library id data specify. " });
this.add({id:784, 
title:"The git:: source", 
body:" the git:: source the git:: source repository step git hosting provider. the script step’s github source is: https:\/\/github.com\/bitrise-io\/steps-script . to reference script step directly git reference, use git:: source, step’s git clone url, branch tag repository. to reference 1.1.3 version tag script step’s repository: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: in general, use step version library, that, instead using git:: source type. features like local step caching, network alternative download urls supported steps shared steplib. but type referencing allows certain things can’t steplib. for example, git:: source type used not-yet-published work-in-progress states step. if develop step, use git:: source type test step publish steplib. to reference soon-to-be-released branch repository you're developing step: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@soon-to-be-released: " });
this.add({id:785, 
title:"The path:: source", 
body:" the path:: source the path:: source specifies local path step's repository, requires version information. both absolute relative paths supported. a folder containing bitrise.yml file. - path::\/path\/to\/my\/step:\n\n- path::.\/relative\/path: this useful step development. it used want include build steps app’s source code. " });
this.add({id:783, 
title:"Special Step sources", 
body:" special step sources there special step sources: git:: path:: when use sources, step won’t identified library id data specify. " });
this.add({id:784, 
title:"The git:: source", 
body:" the git:: source the git:: source repository step git hosting provider. the script step’s github source is: https:\/\/github.com\/bitrise-io\/steps-script . to reference script step directly git reference, use git:: source, step’s git clone url, branch tag repository. to reference 1.1.3 version tag script step’s repository: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: in general, use step version library, that, instead using git:: source type. features like local step caching, network alternative download urls supported steps shared steplib. but type referencing allows certain things can’t steplib. for example, git:: source type used not-yet-published work-in-progress states step. if develop step, use git:: source type test step publish steplib. to reference soon-to-be-released branch repository you're developing step: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@soon-to-be-released: " });
this.add({id:785, 
title:"The path:: source", 
body:" the path:: source the path:: source specifies local path step's repository, requires version information. both absolute relative paths supported. a folder containing bitrise.yml file. - path::\/path\/to\/my\/step:\n\n- path::.\/relative\/path: this useful step development. it used want include build steps app’s source code. " });
this.add({id:786, 
title:"Step data in the bitrise.yml file", 
body:" step data bitrise.yml file the step data information specify bitrise.yml file parameters step want change, compared step’s default definition. the step data information specify bitrise.yml file parameters step want change, compared step’s default definition. to see step’s raw interface definition check step library. the step definitions steplib’s steps directory . if don’t specify any input step property bitrise.yml configuration, step (reference\/id), run with default values defined step’s developer interface definition. let’s see example with single script step, executed run bitrise run test : format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n specify inputs step with inputs: list property. an input consists key value : indentation indentation yaml format important! you use two- four-space indentation, can’t tabs indent! format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n inputs:\n content: \"echo 'hello world!'\" if step doesn’t any required inputs don’t specify input. you values want to. step input values string \/ text values passed step environment variables. the value multiline too, using standard yaml format: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n content: |\n #!\/bin\/bash\n set -ex\n var_to_print='hello world!'\n echo \"${var_to_print}\" if use multiline value, like above, indent value with spaces, compared key! force step run previous fails setting is_always_run property true : format_version: 1.3.1\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n is_always_run: true\n inputs:\n content: \"puts 'hello ruby!'\"\n runner_bin: ruby\n use title property add descriptive title step: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n title: print hello ruby\n is_always_run: true\n inputs:\n content: \"puts 'hello ruby!'\"\n runner_bin: ruby " });
this.add({id:787, 
title:"Step properties", 
body:" step properties step properties provide important data step, project type, source code dependencies requires. a step’s inputs outputs defined properties. step properties provide important data step, project type, source code dependencies requires. a step’s inputs outputs defined step properties. let’s look properties! title , summary description : metadata, comments, tools gui. meta properties permanent comments these meta properties used permanent comments. standard yml comments preserved normalized, converted json generated transformed. are. website : official website step \/ service. source_code_url : url step’s source code viewed. support_url : url step’s support \/ issue tracker. published_at : auto-generated share - steplib publish date step’s version source : auto-generated share git clone information. asset_urls : auto-generated share step assets (steplib specific), like icon image. host_os_tags : supported operating systems. currently unused, reserved future use. project_type_tags : project type tags step specific. example: ios android . completely optional, used search filtering step lists. type_tags : generic type tags related step. example: utility , test notification . similar project_type_tags , property completely optional, used search filtering step lists. deps : specifies required dependencies step. to declare dependency, specify package manager dependency wish install. inputs : inputs (environments) step. outputs : outputs (environments) step. " });
this.add({id:788, 
title:"Step inputs reference", 
body:" step inputs reference step inputs environment items tell bitrise cli how run given step. the defined step.yml file step setting inputs property.. step inputs environment items tell bitrise cli how run given step. the inputs step defined step.yml file step setting inputs property.. step inputs syntax environment property. it consists main parts: key: value pair opts field. inputs:\n- my_key_for_the_env: \"default value\" \n opts: title: an example env var item is_dont_change_value: false category: my_key_for_the_env : key input (required). default value : default value input. you don’t provide value. opts : optional properties. " });
this.add({id:789, 
title:"Step input properties", 
body:" step input properties the available properties step inputs: title , summary description : metadata, comments, tools gui. meta properties permanent comments these meta properties used permanent comments. standard yml comments preserved normalized, converted json generated transformed. are. is_expand : set true false . the default value true so bitrise cli expands environment variables (env vars) passing step. that means step input's value env var, pass variable's if set false , cli pass env var's key string. skip_if_empty : set true false . if set true , input used value empty. category : used categorize input. inputs with category appear grouped menu website ui, sake convenience. value_options : list available values. is_required : set true false . if set true , step requires non-empty value set input. is_dont_change_value : set true false . if set true , value input changed and\/or hidden uis. mainly used debug inputs “ connection ” inputs (set outputs steps, connect step with one). is_template : set true false . if set true , input’s value evaulated go template. is_sensitive : marking input sensitive means accept secret environment variable value. it frequently used information passwords, api keys, tokens, any marked sensitive. " });
this.add({id:790, 
title:"Using template expressions for Step inputs", 
body:" using template expressions step inputs if need step use certain value circumstances, template expressions inputs. template evaluated uses input. they written go’s template language . set is_template property step.yml file project use template expressions. open step.yml file project. find step wish use template expression. add opts field content step. add is_template property opts set value true . add template expression step’s content . checking bitrise cli ci mode - script:\n title: template example\n inputs:\n content: |-\n {{if .isci}}\n echo \"ci mode\"\n {{else}}\n \"not ci {{end}}\n opts:\n is_template: true " });
this.add({id:789, 
title:"Step input properties", 
body:" step input properties the available properties step inputs: title , summary description : metadata, comments, tools gui. meta properties permanent comments these meta properties used permanent comments. standard yml comments preserved normalized, converted json generated transformed. are. is_expand : set true false . the default value true so bitrise cli expands environment variables (env vars) passing step. that means step input's value env var, pass variable's if set false , cli pass env var's key string. skip_if_empty : set true false . if set true , input used value empty. category : used categorize input. inputs with category appear grouped menu website ui, sake convenience. value_options : list available values. is_required : set true false . if set true , step requires non-empty value set input. is_dont_change_value : set true false . if set true , value input changed and\/or hidden uis. mainly used debug inputs “ connection ” inputs (set outputs steps, connect step with one). is_template : set true false . if set true , input’s value evaulated go template. is_sensitive : marking input sensitive means accept secret environment variable value. it frequently used information passwords, api keys, tokens, any marked sensitive. " });
this.add({id:790, 
title:"Using template expressions for Step inputs", 
body:" using template expressions step inputs if need step use certain value circumstances, template expressions inputs. template evaluated uses input. they written go’s template language . set is_template property step.yml file project use template expressions. open step.yml file project. find step wish use template expression. add opts field content step. add is_template property opts set value true . add template expression step’s content . checking bitrise cli ci mode - script:\n title: template example\n inputs:\n content: |-\n {{if .isci}}\n echo \"ci mode\"\n {{else}}\n \"not ci {{end}}\n opts:\n is_template: true " });
this.add({id:791, 
title:"Step outputs reference", 
body:" step outputs reference step outputs environment items result running given step. you check default workflow editor bitrise.io step.yml file step. step outputs environment items result running given step. for example, deploy bitrise.io step generates output envs default: $bitrise_public_install_page_url bitrise_public_install_page_url_map you check default outputs step workflow editor bitrise.io step.yml file step. step outputs defined step.yml file project setting outputs attribute. they syntax environment property. it consists main parts: key: value pair opts field. the key value required, opts field optional. - my_key_for_the_env: value env\n opts:\n title: an example env var item\n is_dont_change_value: false\n category: my_key_for_the_env : the key environment item (required). value env : the value item (required). opts : optional attributes. the default outputs step changed user bitrise.yml file project: changed step.yml file. however, export output custom environment variable . this useful, example, step twice workflow wish use generated output steps: workflows:\n primary:\n steps:\n - gradle-runner:\n outputs:\n bitrise_apk_path: alias_apk_path\n in example, value bitrise_apk_path environment variable exported alias_apk_path key. " });
this.add({id:792, 
title:"Available Environment Variables", 
body:" available environment variables environment variables (env vars) consist key value, optional attributes. they defined level apps, workflows steps. environment variables (env vars) consist key value. they include optional attributes. defined level apps , workflows steps . you set env vars selection exposed automatically bitrise cli bitrise.io . env vars exposed bitrise cli available everywhere, run build computer. env vars exposed bitrise.io available builds running bitrise.io virtual machines. pipeline env vars exposed bitrise.io available pipeline builds running bitrise.io virtual machines. in addition, plenty bitrise steps export output variables. these variables available subsequent build. you step configuration step: in workflow editor, check output properties section step. in step.yml step, outputs . release management passes number env vars bitrise builds: table 35, “ . environment variables set availability order. this order available build progresses: availability order of environment variables . step outputs exposed env vars steps expose step outputs env vars. for example, builds binary var. as basically any bitrise way, won't list environment variables related git cloning process: table 36, “ . env vars exposed bitrise cli env var key description $bitrise_triggered_workflow_id the id workflow was triggered . this env var exposed regardless workflow was triggered manually automatically. $bitrise_triggered_workflow_title the title workflow was triggered. this env var exposed regardless triggered manually automatically. $bitrise_build_status the current status build. available options are: 0: successful. 1: failed. a successful current status means none previous steps build failed. $bitrise_source_dir path base working directory. by default, it’s directory bitrise runs, unless provide different value. this overwritten build, change subsequent steps build. $bitrise_deploy_dir path directory stores artifacts files deployment. it’s temporary created bitrise cli default, overwritten starting cli. the deploy bitrise.io step looks build artifacts - ipa apk app -, test results, files directory. $bitrise_test_result_dir root directory test results created bitrise cli. test placed accessed test reports add-on . $ci indicates bitrise cli running continuous integration mode. the possible values are: true false $pr indicates bitrise cli running pr (pull request) mode. running pull request mode means builds code state was merged. the possible values are: true false env vars exposed bitrise.io env var key description $bitrise_build_number build number build bitrise.io . $bitrise_app_title the title app bitrise.io . you change any time settings tab app. $bitrise_app_url the url app bitrise.io . this git repository url! an app url following format: app.bitrise.io\/app-slug\/ for example: https:\/\/app.bitrise.io\/app\/31e481ce08e0xfd9. $bitrise_app_slug the slug uniquely identifies app bitrise.io . it’s app url, too. $bitrise_build_url the url build bitrise.io . $bitrise_build_slug the slug uniquely identifies build bitrise.io . it’s build url, too. for example, let’s look build url: https:\/\/app.bitrise.io\/build\/d75abbebxfc9ca4e. the slug d65abbebxfc9ca4e example. $bitrise_build_trigger_timestamp the date time build was triggered. $git_repository_url the url git repository hosts app. this changed settings tab app. it ssh https format. $bitrise_git_branch the git branch built bitrise. for example, main . $bitriseio_git_branch_dest used with builds triggered pull requests: destination\/target branch request build. for example, pull request wants merge content branch main . in case, env var’s value main . $bitrise_git_tag if build triggered git tag, env var stores tag used. $bitrise_git_commit the commit hash git triggered build, applicable. $bitrise_git_message the commit message, pull request title, message specified triggered build manually. $bitriseio_git_repository_owner the owner git repository app. $bitriseio_git_repository_slug the slug git repository app. $bitrise_pull_request the id pull request triggered build. $bitriseio_pull_request_repository_url the url repository pull request triggered build sent. $bitriseio_pull_request_merge_branch the pre-merge branch - git hosting provider supports provides pre-merged state pull request special merge branch. $bitriseio_pull_request_head_branch the pull request head branch, git hosting provider supports provides this. this special git ref point source request. $github_pr_is_draft for apps hosted github only: set true build triggered draft pull request . $bitrise_provision_url the url apple provisioning profiles uploaded bitrise.io . if than provisioning profile uploaded app, pipe character ( | ) separates urls list. this relevant ios apps cross-platform with versions. $bitrise_certificate_url the url apple certificates uploaded bitrise.io . if than certificate uploaded app, pipe character ( | ) separates urls list. this relevant ios apps cross-platform with versions. $bitrise_certificate_passphrase the passphrase set uploaded apple certificates app’s code signing & files tab. if than certificate with passphrase, pipe character ( | ) separates phrases list. this relevant ios apps cross-platform with versions. $bitrise_io indicates build running bitrise.io environment. value set true bitrise starts build. pipeline env vars exposed bitrise.io env var key description $bitriseio_pipeline_id the id running pipeline build. this env var exposed regardless was triggered manually automatically. $bitriseio_pipeline_title the running pipeline build. this env var exposed regardless was triggered manually automatically. $bitriseio_finished_stages the status previously finished stages workflows build. please note value env var change future! $bitriseio_pipeline_build_status the current status pipeline build. value env var be: succeeded , succeeded_with_abort , failed , aborted . while pipeline running, env var's status based previously finished stages. $bitriseio_pipeline_build_url the url pipeline build. environment variables passed builds release management env var key description rm_release_candidate_version the version binary (apk\/aab ipa file) generated release candidate build. rm_release_candidate_download_url the download url binary (apk\/aab ipa file) generated release candidate build. rm_release_candidate_slug unique identifier binary (apk\/aab ipa file) generated release candidate build. rm_release_version the release (for google play releases) version app store release management. rm_release_candidate_build_slug the build slug was selected release candidate release. env vars exposed git clone repository step env var key description $git_clone_commit_hash the hash commit build uses (the cloned commit). $git_clone_commit_message_subject the subject commit message cloned commit. $git_clone_commit_message_body the body (content) commit message cloned commit. $git_clone_commit_count the commit count cloned commit. this env var influenced clone_depth step input. for information, check git clone step description . $git_clone_commit_author_name the author cloned commit. $git_clone_commit_author_email the email author cloned commit. $git_clone_commit_commiter_name the committer cloned commit. $git_clone_commit_commiter_email the email committer cloned commit. " });
this.add({id:793, 
title:"Bitrise tools", 
body:" bitrise tools a list open source tools used maintained bitrise team. here list open source tools maintained bitrise team. bitrise tools name type description link bitrise cli cli the bitrise cli used bitrise.io run builds. you use builds locally. https:\/\/github.com\/bitrise-io\/bitrise stepman cli tool the step collection manager used managing library. https:\/\/github.com\/bitrise-io\/stepman envman cli tool the environment variable manager used bitrise cli isolate manage environment variables build. it used independently bitrise cli. https:\/\/github.com\/bitrise-io\/envman init cli core plugin use plugin so project scanner detect type locally generate bitrise configuration. https:\/\/github.com\/bitrise-io\/bitrise-plugins-init.git step cli core plugin use plugin list, retrieve step information create steps. https:\/\/github.com\/bitrise-io\/bitrise-plugins-step workflow-editor cli core plugin use plugin configure builds’ bitrise.yml config locally with offline workflow editor. https:\/\/github.com\/bitrise-io\/bitrise-workflow-editor.git bitrise-plugin-io cli core plugin use plugin manage apps bitrise.io right terminal \/ command line. https:\/\/github.com\/bitrise-io\/bitrise-plugins-io bitrise webhooks webhook processor this bitrise webhooks processor transforms various incoming webhooks (for example, github, bitbucket, slack) bitrise.io ’s build trigger api format, calls start build. https:\/\/github.com\/bitrise-io\/bitrise-webhooks " });
this.add({id:794, 
title:"Teams plan FAQ", 
body:" teams plan faq as efforts introduce credit-based model, we’re offering new teams plan. you sign free trial, subscribe here’s need know it! " });
this.add({id:795, 
title:"How to sign up for the trial?", 
body:" how sign trial? signing free trial the free trial available new accounts create first workspace. find the  workspace  input field, add name. click  create workspace . once you’re with setting workspace, trial start automatically. " });
this.add({id:796, 
title:"If I sign up for a trial, when will it end?", 
body:" if i sign trial, end? you 30 days try teams plan. " });
this.add({id:797, 
title:"Can I sign up for the full Teams plan during the trial?", 
body:" can i sign teams plan trial? yes, the owner of workspace. just click select plan banner ready. alternatively, plan & billing section workspace settings view available plans. " });
this.add({id:798, 
title:"What features does the Teams plan have?", 
body:" what features does teams plan have? switching teams plan credit-based hobby numerous benefits, including: unlimited private apps. unlimited team members management features. multiple machines types choose from. add-ons, test reports . " });
this.add({id:799, 
title:"How many credits do I get in the trial?", 
body:" how credits i trial? a new user total 7500 credits available. " });
this.add({id:800, 
title:"Where can I see how many credits I used up?", 
body:" where i see how credits used up? you see number credits consumed insights. navigate insights tab, credits left navigation bar. if run credits, request trial extension just going with paid plan. " });
this.add({id:801, 
title:"What if I run out of the trial credits before the trial ends?", 
body:" what i run trial credits ends? we’ve designed trial experience with really high credit allowance. we believe allow try bitrise heart’s content, having worry losing credits build failures. if run credits, request trial extension just going with paid plan. " });
this.add({id:802, 
title:"How do I know when my trial ends?", 
body:" how i know trial ends? you able see trial end date welcome email, bitrise banner, workspace settings . don’t worry miss these. we’ll remind days trial ends with email, ui. " });
this.add({id:803, 
title:"What happens when my trial ends?", 
body:" what happens trial ends? you able see trial end date welcome email, bitrise banner, workspace settings. we’ll remind 5 days ends with email ui. at trial, asked choose plan continue using bitrise. you continue using bitrise free, able choose “hobby” plan end trial access basic capabilities with credit allowance 300 month. " });
this.add({id:804, 
title:"Will I lose my unused credits if I switch to a different plan?", 
body:" will i lose unused credits switch different plan? it depends upgrade higher credit tier downgrade lower tier. if upgrade higher tier end current billing cycle, happens immediately new cycle starts right away. when pay credit tier, calculate cost time remaining previous subtract first charge. for example, subscription fee was 100 usd 30 days decide with exactly 15 you’ll charged price minus 50 upgrading. when downgrading lower credit tier, it’s simple: downgrade happens end current billing cycle. until then, use remaining credits. " });
this.add({id:805, 
title:"How do I use my credits?", 
body:" how i use credits? just trigger build! each build use certain credits minute, depending the type stack you use. " });
this.add({id:806, 
title:"Will a build be aborted if I run out of credits?", 
body:" will build aborted i run credits? no, running builds aborted. you finish build, exceed pay-as-you-go credit limit. " });
this.add({id:807, 
title:"Will unused credits roll over to the next month?", 
body:" will unused credits roll month? no. at start month, you'll receive monthly credit bundle, resetting balance. " });
this.add({id:808, 
title:"How many apps can I have?", 
body:" how apps i have? on teams plan trial, apps want. " });
this.add({id:809, 
title:"Do the different machine types have different credit costs?", 
body:" do different machine types credit costs? yes: powerful machines higher credit cost. check pricing page detailed information, including exact credit cost machine type. " });
this.add({id:810, 
title:"How is the credit cost calculated for minute fractions?", 
body:" how credit cost calculated minute fractions? your build cost calculated based stack choice multiplied number started minutes. for example, using stack costs 2 credits\/minute, build takes 3 minutes 12 seconds complete, cost 8 credits. " });
this.add({id:811, 
title:"How many builds can I run at the same time?", 
body:" how builds i run time? you run 10 builds macos stacks 30 linux parallel. " });
this.add({id:812, 
title:"Is there a time limit for builds?", 
body:" is time limit builds? there hard limit half hours single build. please aware build hangs reason, mean unwanted credit consumption. if wish lower time safety reasons, contact support! " });
this.add({id:813, 
title:"Credit-based Hobby plan FAQ", 
body:" credit-based hobby plan faq if small hobby project needs continous integration service, bitrise’s free hobby plan best bet. here’s need know credit-based plan! " });
this.add({id:814, 
title:"How do I sign up for the free plan?", 
body:" how i sign free plan? after signing bitrise, create a new workspace. if it’s first workspace, automatically granted a free trial teams plan. once over, workspace placed hobby " });
this.add({id:815, 
title:"How do I get credits?", 
body:" how i credits? you certain credits month: monthly credit bundle. " });
this.add({id:816, 
title:"How do I use my credits?", 
body:" how i use credits? just trigger build! each build use certain credits minute, depending type stack use. " });
this.add({id:817, 
title:"What happens if I run out of credits?", 
body:" what happens i run credits? build with confidence: running build aborted. when you’re run credits, we’ll send notifications warn you. once out, won’t able add new apps builds receive monthly credit bundle. " });
this.add({id:818, 
title:"Will a build be aborted if I run out of credits?", 
body:" will build aborted i run credits? no, running builds aborted. you finish build. " });
this.add({id:819, 
title:"How many apps can I have?", 
body:" how apps i have? on credit-based hobby plan, private app public apps. " });
this.add({id:820, 
title:"How much build time do I have?", 
body:" how build time i have? you limit 90 minutes build. " });
this.add({id:821, 
title:"Do the different stacks have different credit costs?", 
body:" do different stacks credit costs? yes. builds cost 2 credits minute macos-based stacks 1 credit linux-based stacks. " });
this.add({id:822, 
title:"How many builds can I run at the same time?", 
body:" how builds i run time? you run 10 builds macos stacks 80 linux parallel. " });
this.add({id:823, 
title:"How many builds can I run at the same time?", 
body:" how builds i run time? you run 10 builds macos stacks 30 linux parallel. " });
this.add({id:824, 
title:"How is the credit cost calculated for minute fractions?", 
body:" how credit cost calculated minute fractions? your build cost calculated based stack choice multiplied number started minutes. for example, using stack costs 2 credits\/minute, build takes 3 minutes 12 seconds complete, cost 8 credits. " });
this.add({id:825, 
title:"404 - Page Not Found", 
body:" 404 - page not found sorry, couldn't page looking for. go home page, check popular content: getting startedbuild numbering and app versioningmanaging an app's bitrise.yml fileenvironment variables" });
this.add({id:826, 
title:"Comparing credit-based and concurrency-based plans", 
body:" comparing credit-based concurrency-based plans up now, bitrise subscriptions concurrency-based. concurrencies dictate how builds run time bitrise: concurrencies have, simultaneous run. to scale up, purchase risk having time-critical stuck queue. as august 2021, longer sign concurrency-based subscription plan new user bitrise. all accounts credit-based accounts: after signing up, run builds using credits. you receive credits month credit bundles, depending plan. for information hobby plan teams plan, latest additions credit-based model, check relevant faqs pricing page: teams plan faqcredit-based hobby plan faq https:\/\/www.bitrise.io\/pricing in article, we’ll significant differences everyday experience different subscription models. first, let’s see quick comparison - dive details below! concurrency-based plans vs credit-based features concurrency-based credit-based build timeout up 90 minutes up hours (3.5 teams plan) concurrency limitations 1-20 5-80 machine type\/compute options the plan defines machine type choose options workflow level resource usage monitoring no monitoring credit overview detailed usage " });
this.add({id:827, 
title:"Machine type selector", 
body:" machine type selector concurrency-based plans : on older, concurrency-based plans, select machine type: subscription itself defined it. if workspaceelite enterprise builds used elite machines. any plan, standard credit-based plans : on credit-based plans, select machine type fits needs best, workflow level manage builds cost-effectively possible. for example, use fastest gen2 elite machines time-critical opt standard with lower priority. credit cost calculation minute fractions your build cost calculated based stack choice multiplied number started minutes. for example, using stack costs 4 credits\/minute, build takes 3 minutes 12 seconds complete, cost 16 credits. " });
this.add({id:828, 
title:"Concurrency limitations", 
body:" concurrency limitations credit-based plans : on credit-based plans, select machine type fits needs best, workflow level manage builds cost-effectively possible. for example, use fastest gen2 elite machines time-critical opt standard with lower priority. credit-based plans : even hobby plan allows 5 concurrent builds. that number goes 30 teams high 80 velocity (on linux machines). if credits, builds wait build finish first. " });
this.add({id:829, 
title:"Build timeout", 
body:" build timeout concurrency-based plans : on old developer org standard\/elite plans, 90 minutes build time, depending number concurrencies. credit-based plans : your build times 90 minutes… hobby plan! on any paid credit-based plan, half hours, possibly choose enterprise-level offerings. " });
this.add({id:830, 
title:"Resource usage", 
body:" resource usage concurrency-based plans : on concurrency-based plans, tracking usage isn’t necessarily crucial: limited constraints plan, available resources. credit-based plans : on teams velocity plans, aware credit usage absolutely critical. our aim make easy possible you: account’s overview tab, see current balance billing date. you check export detailed report any time. " });
this.add({id:831, 
title:"Summary", 
body:" summary to sum up, credit-based plan, can: select machine type workflow level ensure optimal cost-effectiveness builds. build long hours (3.5 teams plan). forget having worry concurrencies. monitor credit usage times. " });
this.add({id:832, 
title:"Optimizing your build times", 
body:" optimizing build times you improve build times with following tips. " });
this.add({id:833, 
title:"Including your dependencies in your repository", 
body:" including dependencies repository including dependencies (like cocoapods) repository speed builds. once git clone repository done, place build. for example, case cocoapods, delete cocoapods install step workflow include pods directory cocoapods generated .xcworkspace file repository. " });
this.add({id:834, 
title:"Using caching", 
body:" using caching the use caching help speed builds: offer build dependency caching, remote specific platforms. efficiency depends size files want cache, number cache. read more: dependencies and caching . " });
this.add({id:835, 
title:"Turning off the Clean build option of Xcode Steps", 
body:" turning clean build option xcode steps all xcode steps bitrise option called do clean xcode build…? . with option, tell step perform full, completely clean build xcode project runs, alternatively, access cache previous steps workflow. setting option speed build reducing compilation time step. however, xcode step - example, xcode archive & export ios - workflow, step clean xcode build. please note option does not mean step access build cache different builds. this relevant xcode steps workflow. " });
this.add({id:837, 
title:"Getting started", 
body:" getting started bitrise powerful complex - getting started easy intuitive! you kick first build minutes signing up. let’s need make happen! " });
this.add({id:838, 
title:"Teams and Organizations", 
body:" teams organizations once set new app, start inviting team members. if developer organization plan, unlimited members! only members app’s view private including logs. for public apps, build logs url build. you create orgs organization plans. organizations allow manage entire teams quickly effectively. " });
this.add({id:838, 
title:"Teams and Organizations", 
body:" teams organizations once set new app, start inviting team members. if developer organization plan, unlimited members! only members app’s view private including logs. for public apps, build logs url build. you create orgs organization plans. organizations allow manage entire teams quickly effectively. " });
this.add({id:839, 
title:"Infrastructure", 
body:" infrastructure " });
this.add({id:840, 
title:"Account management", 
body:" account management " });
this.add({id:841, 
title:"Workspaces and apps", 
body:" workspaces apps " });
this.add({id:842, 
title:"Steps and Workflows", 
body:" steps workflows " });
this.add({id:843, 
title:"Builds", 
body:" builds " });
this.add({id:844, 
title:"Code signing", 
body:" code signing playing sandbox. " });
this.add({id:845, 
title:"Testing", 
body:" testing " });
this.add({id:846, 
title:"Deploying", 
body:" deploying " });
this.add({id:847, 
title:"App monitoring", 
body:" app monitoring " });
this.add({id:848, 
title:"Bitrise CLI", 
body:" bitrise cli the bitrise cli awesome. workflow editor bitrise.yml open workflow editor. open bitrise.yml file. " });
this.add({id:849, 
title:"References", 
body:" references " });
this.add({id:850, 
title:"Bitrise API", 
body:" bitrise api " });
                
                store['en'][2]= {
                'title': "Getting started",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][3]= {
                'title': "Signing up for Bitrise",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-000c8bad-6d7f-0d5d-b401-26d496fba183'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][4]= {
                'title': "Creating your first Workspace",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-45c98b6e-ff48-e720-c001-f3959ff58028'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Creating your first Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][5]= {
                'title': "Adding a new app",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-15a4b450-3823-111b-a88a-98f66ef246cc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][6]= {
                'title': "Webhooks and triggers",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-ddaf0b44-cc2e-e0da-0268-aaa5e0a10ba6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Webhooks and triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][7]= {
                'title': "Builds and Workflows",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-efd02dd1-4217-aaf4-87c0-debd71494d1c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Builds and Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][8]= {
                'title': "Testing and deploying",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-b4be56a8-29cb-9a91-da5a-2221b0e200ed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Testing and deploying"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][9]= {
                'title': "Migrating to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][10]= {
                'title': "Migrating from Jenkins to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][11]= {
                'title': "Why bother migrating?",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-667e8938-1182-cab0-6d2f-d4a5e56ea9ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Why bother migrating?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][12]= {
                'title': "Quick start guide",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ff04124f-6f55-5a7d-b468-5c55365669dc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Quick start guide"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][13]= {
                'title': "Managing builds on Jenkins and on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7934f15-549b-58bf-f0c5-1e944781b1af'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][14]= {
                'title': "Triggering builds on Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-724027fa-4f2e-8a93-b81c-6e451f499d0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Triggering builds on Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][15]= {
                'title': "Environment Variables and Secrets on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-76a85138-0e73-0074-de35-fcbe8daa52cc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Environment Variables and Secrets on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][16]= {
                'title': "Build caching",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ba87f9ed-aa7e-2483-2f6c-bba10440b7bd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Build caching"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][17]= {
                'title': "Jenkins plugins and Bitrise Steps",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-6a237745-542d-ee07-5a7d-4e45c05baa82'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins plugins and Bitrise Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][18]= {
                'title': "Jenkins Pipeline - Bitrise Workflow",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-cc569186-6570-7095-fa0d-f54095328e1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins Pipeline - Bitrise Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][19]= {
                'title': "Dashboards in Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7c0fc15-c40c-9b76-646a-69c062ee0d1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][20]= {
                'title': "Adding a new app to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-12c0dcf2-b371-c0ca-b3e1-1a7bb16d20f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Adding a new app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][21]= {
                'title': "Webhooks on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e417416e-117b-8be4-5a66-82947f9909e8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Webhooks on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][22]= {
                'title': "Jenkinsfile - Bitrise YAML",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e11c9cce-86d1-e1c4-402e-f247d31831b5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkinsfile - Bitrise YAML"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][23]= {
                'title': "Jenkinsfile - Bitrise yml file comparison",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_section-idm4538149097262432741630545355'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkinsfile - Bitrise YAML \/ Jenkinsfile - Bitrise yml file comparison"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][24]= {
                'title': "Master and agent on Jenkins - Bitrise stack",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-a63e34eb-9823-2d3b-66ca-5674a17af82e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Master and agent on Jenkins - Bitrise stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][25]= {
                'title': "People management in Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e3a7646b-85ab-3d84-4508-051898f66080'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ People management in Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][26]= {
                'title': "Integrated SSO management on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-43ffb67c-adae-38a4-5ff8-223b2d9d5614'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Integrated SSO management on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][27]= {
                'title': "Signing up for Bitrise",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][28]= {
                'title': "Signing up with a Git provider",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-0c4bf1b6-9148-2209-65b9-a91c8f504964'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with a Git provider"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][29]= {
                'title': "Signing up with email",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-23ca7daa-ff51-db4e-b4df-7b198463397e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with email"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][30]= {
                'title': "Signing up with SAML SSO",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-5c11279f-1d2d-03b5-a913-33d3c4833915'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][31]= {
                'title': "Creating your first Workspace",
                'href': 'UUID-d2dc0473-cf38-63d8-804f-9ea086df9756.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Creating your first Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][32]= {
                'title': "Adding a new app",
                'href': 'UUID-bb7c5561-43c7-fce8-d0d1-5b426246c350.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][33]= {
                'title': "Getting started with iOS apps",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][34]= {
                'title': "Adding an iOS app to Bitrise",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-c8447cbb-f22a-d58d-c792-57336c023002'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Adding an iOS app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][35]= {
                'title': "Testing your iOS app",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-0711441f-0265-b53a-cbfd-693b90594a9f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Testing your iOS app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][36]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-39fbc767-f894-36b9-67c4-77255dcf2fed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][37]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][38]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][39]= {
                'title': "Getting started with Android apps",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][40]= {
                'title': "Adding an Android app to Bitrise",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-e31ec91e-3920-a5c9-8b02-d326c88f829d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Adding an Android app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][41]= {
                'title': "Managing dependencies for Android apps",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-b68e7eb2-2e20-4f63-a0fc-f4c4d22ce9d5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Managing dependencies for Android apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][42]= {
                'title': "Testing your Android app",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-8502b104-7448-87e8-5937-ab4b1922f01f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Testing your Android app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][43]= {
                'title': "Signing your Android app",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-561185fa-7af1-28f3-b03a-91b15c4bb64e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Signing your Android app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][44]= {
                'title': "Deploying an Android app to bitrise.io",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-b3cbb2a1-2ef0-5e48-9204-a678f1c6ce66'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Deploying an Android app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][45]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][46]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][47]= {
                'title': "Getting started with React Native apps",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][48]= {
                'title': "Adding a React Native app to Bitrise",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-34bd8728-3c12-985d-5378-4f5cf7fa1dee'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Adding a React Native app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][49]= {
                'title': "Installing dependencies for ExpoIonic\/CordovaReact Native apps",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Installing dependencies for ExpoIonic\/CordovaReact Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][50]= {
                'title': "Code signing for React Native apps",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-27a4c90f-0ca6-8eb1-5037-f30a9a8bec00'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][51]= {
                'title': "Signing your Android project",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-4bbce633-6593-eb5d-f462-774e9082d17c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Signing your Android project"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][52]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-39fbc767-f894-36b9-67c4-77255dcf2fed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][53]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][54]= {
                'title': "Testing your React Native app",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-80e2d0d2-2d4c-6ca1-dc61-bc63b35be483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Testing your React Native app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][55]= {
                'title': "Adding React Native test results to Test reports",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_section-idm465596458009603419294209267'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Testing your React Native app \/ Adding React Native test results to Test reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][56]= {
                'title': "Deploying a React Native app",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-55b3dfd0-e7b5-f345-289b-c40a675afa69'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][57]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][58]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][59]= {
                'title': "Deploying your Android project to Google Play",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9519b741-8e19-0363-16c6-97564e46f393'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying your Android project to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][60]= {
                'title': "Getting started with Flutter apps",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][61]= {
                'title': "Adding a Flutter app to Bitrise",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-b94714f9-fc2b-0519-6814-259d1c810a03'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Adding a Flutter app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][62]= {
                'title': "Testing a Flutter app",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-23f96a92-1cf0-0e6a-2a38-2ff0710a654d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Testing a Flutter app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][63]= {
                'title': "Deploying a Flutter app",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-e143401b-b088-8fc3-e605-f33c388816b5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][64]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][65]= {
                'title': "Deploying a Flutter app to App Store Connect",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-4926eaea-cb0b-123f-31d5-b78851c0102f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][66]= {
                'title': "Configuring Team ID for Flutter apps",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_section-idm4605888863720032691594577214'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect \/ Configuring Team ID for Flutter apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][67]= {
                'title': "Configuring Flutter deployment to the App Store on Bitrise",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_section-idm4572704029424032691595191375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect \/ Configuring Flutter deployment to the App Store on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][68]= {
                'title': "Deploying a Flutter app to Google Play",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-2ae8912a-d26b-0305-d961-eccef60bbd0e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][69]= {
                'title': "Additional Flutter content",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-2958ed33-8781-9d0a-154b-11e1f10312db'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Additional Flutter content"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][70]= {
                'title': "Getting started with Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][71]= {
                'title': "Adding an Ionic\/Cordova app to Bitrise",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-aa07dbed-0c75-bdc8-1cd7-1ad012d6879f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Adding an Ionic\/Cordova app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][72]= {
                'title': "Installing dependencies for ExpoIonic\/CordovaReact Native apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Installing dependencies for ExpoIonic\/CordovaReact Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][73]= {
                'title': "Testing Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-73591944-1878-ddc4-069e-5984dc705c76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Testing Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][74]= {
                'title': "Code signing Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-2ce893ed-91b3-084a-02be-b6a657d3736f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][75]= {
                'title': "iOS code signing for Ionic and Cordova projects",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-6ae15f90-c4f1-e899-dcf5-f25bf374bfa5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][76]= {
                'title': "Ionic\/Cordova code signing with manual code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][77]= {
                'title': "Ionic\/Cordova code signing with automatic code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-795d5e81-95ea-08e8-67b3-15c270197945'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][78]= {
                'title': "Android code signing using the Android Sign Step",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-d00c628e-d72b-57d8-f8e6-c0b25e0053bb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ Android code signing using the Android Sign Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][79]= {
                'title': "Deploying Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-371c655a-098e-6415-f8bf-5d5bfa6890c3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][80]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][81]= {
                'title': "Deploying your Android project to Google Play",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9519b741-8e19-0363-16c6-97564e46f393'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your Android project to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][82]= {
                'title': "Deploying your iOS project to the App Store",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-3a513eaf-c36c-0e55-e069-270aae847572'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your iOS project to the App Store"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][83]= {
                'title': "Getting started with Expo apps",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][84]= {
                'title': "Adding an Expo app to Bitrise",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-50683a7a-65e9-a842-0a7a-4a3d5965421d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Adding an Expo app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][85]= {
                'title': "Installing dependencies for ExpoIonic\/CordovaReact Native apps",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Installing dependencies for ExpoIonic\/CordovaReact Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][86]= {
                'title': "Testing your React Native app",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-80e2d0d2-2d4c-6ca1-dc61-bc63b35be483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Testing your React Native app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][87]= {
                'title': "Adding React Native test results to Test reports",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_section-idm465596458009603419294209267'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Testing your React Native app \/ Adding React Native test results to Test reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][88]= {
                'title': "Deploying your Expo app",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-a048b2ff-74a9-437e-e7a8-7cde16d23c4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Deploying your Expo app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][3]= {
                'title': "Signing up for Bitrise",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-000c8bad-6d7f-0d5d-b401-26d496fba183'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][4]= {
                'title': "Creating your first Workspace",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-45c98b6e-ff48-e720-c001-f3959ff58028'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Creating your first Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][5]= {
                'title': "Adding a new app",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-15a4b450-3823-111b-a88a-98f66ef246cc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][6]= {
                'title': "Webhooks and triggers",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-ddaf0b44-cc2e-e0da-0268-aaa5e0a10ba6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Webhooks and triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][7]= {
                'title': "Builds and Workflows",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-efd02dd1-4217-aaf4-87c0-debd71494d1c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Builds and Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][8]= {
                'title': "Testing and deploying",
                'href': 'UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-b4be56a8-29cb-9a91-da5a-2221b0e200ed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Testing and deploying"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][9]= {
                'title': "Migrating to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][10]= {
                'title': "Migrating from Jenkins to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][11]= {
                'title': "Why bother migrating?",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-667e8938-1182-cab0-6d2f-d4a5e56ea9ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Why bother migrating?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][12]= {
                'title': "Quick start guide",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ff04124f-6f55-5a7d-b468-5c55365669dc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Quick start guide"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][13]= {
                'title': "Managing builds on Jenkins and on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7934f15-549b-58bf-f0c5-1e944781b1af'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][14]= {
                'title': "Triggering builds on Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-724027fa-4f2e-8a93-b81c-6e451f499d0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Triggering builds on Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][15]= {
                'title': "Environment Variables and Secrets on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-76a85138-0e73-0074-de35-fcbe8daa52cc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Environment Variables and Secrets on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][16]= {
                'title': "Build caching",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ba87f9ed-aa7e-2483-2f6c-bba10440b7bd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Build caching"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][17]= {
                'title': "Jenkins plugins and Bitrise Steps",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-6a237745-542d-ee07-5a7d-4e45c05baa82'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins plugins and Bitrise Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][18]= {
                'title': "Jenkins Pipeline - Bitrise Workflow",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-cc569186-6570-7095-fa0d-f54095328e1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins Pipeline - Bitrise Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][19]= {
                'title': "Dashboards in Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7c0fc15-c40c-9b76-646a-69c062ee0d1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][20]= {
                'title': "Adding a new app to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-12c0dcf2-b371-c0ca-b3e1-1a7bb16d20f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Adding a new app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][21]= {
                'title': "Webhooks on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e417416e-117b-8be4-5a66-82947f9909e8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Webhooks on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][22]= {
                'title': "Jenkinsfile - Bitrise YAML",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e11c9cce-86d1-e1c4-402e-f247d31831b5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkinsfile - Bitrise YAML"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][23]= {
                'title': "Jenkinsfile - Bitrise yml file comparison",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_section-idm4538149097262432741630545355'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkinsfile - Bitrise YAML \/ Jenkinsfile - Bitrise yml file comparison"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][24]= {
                'title': "Master and agent on Jenkins - Bitrise stack",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-a63e34eb-9823-2d3b-66ca-5674a17af82e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Master and agent on Jenkins - Bitrise stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][25]= {
                'title': "People management in Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e3a7646b-85ab-3d84-4508-051898f66080'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ People management in Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][26]= {
                'title': "Integrated SSO management on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-43ffb67c-adae-38a4-5ff8-223b2d9d5614'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Integrated SSO management on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][10]= {
                'title': "Migrating from Jenkins to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][11]= {
                'title': "Why bother migrating?",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-667e8938-1182-cab0-6d2f-d4a5e56ea9ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Why bother migrating?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][12]= {
                'title': "Quick start guide",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ff04124f-6f55-5a7d-b468-5c55365669dc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Quick start guide"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][13]= {
                'title': "Managing builds on Jenkins and on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7934f15-549b-58bf-f0c5-1e944781b1af'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][14]= {
                'title': "Triggering builds on Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-724027fa-4f2e-8a93-b81c-6e451f499d0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Triggering builds on Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][15]= {
                'title': "Environment Variables and Secrets on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-76a85138-0e73-0074-de35-fcbe8daa52cc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Environment Variables and Secrets on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][16]= {
                'title': "Build caching",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ba87f9ed-aa7e-2483-2f6c-bba10440b7bd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Build caching"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][17]= {
                'title': "Jenkins plugins and Bitrise Steps",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-6a237745-542d-ee07-5a7d-4e45c05baa82'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins plugins and Bitrise Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][18]= {
                'title': "Jenkins Pipeline - Bitrise Workflow",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-cc569186-6570-7095-fa0d-f54095328e1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins Pipeline - Bitrise Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][19]= {
                'title': "Dashboards in Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7c0fc15-c40c-9b76-646a-69c062ee0d1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][20]= {
                'title': "Adding a new app to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-12c0dcf2-b371-c0ca-b3e1-1a7bb16d20f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Adding a new app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][21]= {
                'title': "Webhooks on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e417416e-117b-8be4-5a66-82947f9909e8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Webhooks on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][22]= {
                'title': "Jenkinsfile - Bitrise YAML",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e11c9cce-86d1-e1c4-402e-f247d31831b5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkinsfile - Bitrise YAML"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][23]= {
                'title': "Jenkinsfile - Bitrise yml file comparison",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_section-idm4538149097262432741630545355'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkinsfile - Bitrise YAML \/ Jenkinsfile - Bitrise yml file comparison"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][24]= {
                'title': "Master and agent on Jenkins - Bitrise stack",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-a63e34eb-9823-2d3b-66ca-5674a17af82e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Master and agent on Jenkins - Bitrise stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][25]= {
                'title': "People management in Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e3a7646b-85ab-3d84-4508-051898f66080'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ People management in Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][26]= {
                'title': "Integrated SSO management on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-43ffb67c-adae-38a4-5ff8-223b2d9d5614'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Integrated SSO management on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][11]= {
                'title': "Why bother migrating?",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-667e8938-1182-cab0-6d2f-d4a5e56ea9ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Why bother migrating?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][12]= {
                'title': "Quick start guide",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ff04124f-6f55-5a7d-b468-5c55365669dc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Quick start guide"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][13]= {
                'title': "Managing builds on Jenkins and on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7934f15-549b-58bf-f0c5-1e944781b1af'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][14]= {
                'title': "Triggering builds on Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-724027fa-4f2e-8a93-b81c-6e451f499d0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Triggering builds on Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][15]= {
                'title': "Environment Variables and Secrets on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-76a85138-0e73-0074-de35-fcbe8daa52cc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Environment Variables and Secrets on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][16]= {
                'title': "Build caching",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ba87f9ed-aa7e-2483-2f6c-bba10440b7bd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Build caching"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][14]= {
                'title': "Triggering builds on Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-724027fa-4f2e-8a93-b81c-6e451f499d0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Triggering builds on Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][15]= {
                'title': "Environment Variables and Secrets on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-76a85138-0e73-0074-de35-fcbe8daa52cc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Environment Variables and Secrets on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][16]= {
                'title': "Build caching",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ba87f9ed-aa7e-2483-2f6c-bba10440b7bd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Build caching"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][17]= {
                'title': "Jenkins plugins and Bitrise Steps",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-6a237745-542d-ee07-5a7d-4e45c05baa82'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins plugins and Bitrise Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][18]= {
                'title': "Jenkins Pipeline - Bitrise Workflow",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-cc569186-6570-7095-fa0d-f54095328e1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins Pipeline - Bitrise Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][19]= {
                'title': "Dashboards in Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7c0fc15-c40c-9b76-646a-69c062ee0d1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][20]= {
                'title': "Adding a new app to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-12c0dcf2-b371-c0ca-b3e1-1a7bb16d20f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Adding a new app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][21]= {
                'title': "Webhooks on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e417416e-117b-8be4-5a66-82947f9909e8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Webhooks on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][20]= {
                'title': "Adding a new app to Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-12c0dcf2-b371-c0ca-b3e1-1a7bb16d20f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Adding a new app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][21]= {
                'title': "Webhooks on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e417416e-117b-8be4-5a66-82947f9909e8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Webhooks on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][22]= {
                'title': "Jenkinsfile - Bitrise YAML",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e11c9cce-86d1-e1c4-402e-f247d31831b5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkinsfile - Bitrise YAML"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][23]= {
                'title': "Jenkinsfile - Bitrise yml file comparison",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_section-idm4538149097262432741630545355'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkinsfile - Bitrise YAML \/ Jenkinsfile - Bitrise yml file comparison"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][24]= {
                'title': "Master and agent on Jenkins - Bitrise stack",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-a63e34eb-9823-2d3b-66ca-5674a17af82e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Master and agent on Jenkins - Bitrise stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][25]= {
                'title': "People management in Jenkins and Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e3a7646b-85ab-3d84-4508-051898f66080'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ People management in Jenkins and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][26]= {
                'title': "Integrated SSO management on Bitrise",
                'href': 'UUID-8879f258-0558-f6ee-98e5-5a2506d82df9.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-43ffb67c-adae-38a4-5ff8-223b2d9d5614'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Integrated SSO management on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][27]= {
                'title': "Signing up for Bitrise",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][28]= {
                'title': "Signing up with a Git provider",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-0c4bf1b6-9148-2209-65b9-a91c8f504964'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with a Git provider"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][29]= {
                'title': "Signing up with email",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-23ca7daa-ff51-db4e-b4df-7b198463397e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with email"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][30]= {
                'title': "Signing up with SAML SSO",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-5c11279f-1d2d-03b5-a913-33d3c4833915'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][28]= {
                'title': "Signing up with a Git provider",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-0c4bf1b6-9148-2209-65b9-a91c8f504964'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with a Git provider"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][29]= {
                'title': "Signing up with email",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-23ca7daa-ff51-db4e-b4df-7b198463397e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with email"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][30]= {
                'title': "Signing up with SAML SSO",
                'href': 'UUID-9dc60577-d179-a769-7d72-d59b459e13d1.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-5c11279f-1d2d-03b5-a913-33d3c4833915'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][31]= {
                'title': "Creating your first Workspace",
                'href': 'UUID-d2dc0473-cf38-63d8-804f-9ea086df9756.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Creating your first Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][32]= {
                'title': "Adding a new app",
                'href': 'UUID-bb7c5561-43c7-fce8-d0d1-5b426246c350.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][33]= {
                'title': "Getting started with iOS apps",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][34]= {
                'title': "Adding an iOS app to Bitrise",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-c8447cbb-f22a-d58d-c792-57336c023002'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Adding an iOS app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][35]= {
                'title': "Testing your iOS app",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-0711441f-0265-b53a-cbfd-693b90594a9f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Testing your iOS app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][36]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-39fbc767-f894-36b9-67c4-77255dcf2fed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][37]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][38]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][34]= {
                'title': "Adding an iOS app to Bitrise",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-c8447cbb-f22a-d58d-c792-57336c023002'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Adding an iOS app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][35]= {
                'title': "Testing your iOS app",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-0711441f-0265-b53a-cbfd-693b90594a9f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Testing your iOS app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][36]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-39fbc767-f894-36b9-67c4-77255dcf2fed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][37]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][37]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][38]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-81a6851f-9012-17b1-188b-167cce87cfb9.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][39]= {
                'title': "Getting started with Android apps",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][40]= {
                'title': "Adding an Android app to Bitrise",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-e31ec91e-3920-a5c9-8b02-d326c88f829d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Adding an Android app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][41]= {
                'title': "Managing dependencies for Android apps",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-b68e7eb2-2e20-4f63-a0fc-f4c4d22ce9d5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Managing dependencies for Android apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][42]= {
                'title': "Testing your Android app",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-8502b104-7448-87e8-5937-ab4b1922f01f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Testing your Android app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][43]= {
                'title': "Signing your Android app",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-561185fa-7af1-28f3-b03a-91b15c4bb64e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Signing your Android app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][44]= {
                'title': "Deploying an Android app to bitrise.io",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-b3cbb2a1-2ef0-5e48-9204-a678f1c6ce66'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Deploying an Android app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][45]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][46]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][40]= {
                'title': "Adding an Android app to Bitrise",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-e31ec91e-3920-a5c9-8b02-d326c88f829d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Adding an Android app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][41]= {
                'title': "Managing dependencies for Android apps",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-b68e7eb2-2e20-4f63-a0fc-f4c4d22ce9d5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Managing dependencies for Android apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][42]= {
                'title': "Testing your Android app",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-8502b104-7448-87e8-5937-ab4b1922f01f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Testing your Android app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][43]= {
                'title': "Signing your Android app",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-561185fa-7af1-28f3-b03a-91b15c4bb64e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Signing your Android app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][44]= {
                'title': "Deploying an Android app to bitrise.io",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-b3cbb2a1-2ef0-5e48-9204-a678f1c6ce66'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Deploying an Android app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][45]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][46]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-a4a3c266-19bb-8741-cd56-40fee645d58b.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][47]= {
                'title': "Getting started with React Native apps",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][48]= {
                'title': "Adding a React Native app to Bitrise",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-34bd8728-3c12-985d-5378-4f5cf7fa1dee'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Adding a React Native app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][49]= {
                'title': "Installing dependencies for ExpoIonic\/CordovaReact Native apps",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Installing dependencies for ExpoIonic\/CordovaReact Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][50]= {
                'title': "Code signing for React Native apps",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-27a4c90f-0ca6-8eb1-5037-f30a9a8bec00'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][51]= {
                'title': "Signing your Android project",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-4bbce633-6593-eb5d-f462-774e9082d17c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Signing your Android project"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][52]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-39fbc767-f894-36b9-67c4-77255dcf2fed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][53]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][54]= {
                'title': "Testing your React Native app",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-80e2d0d2-2d4c-6ca1-dc61-bc63b35be483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Testing your React Native app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][55]= {
                'title': "Adding React Native test results to Test reports",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_section-idm465596458009603419294209267'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Testing your React Native app \/ Adding React Native test results to Test reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][56]= {
                'title': "Deploying a React Native app",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-55b3dfd0-e7b5-f345-289b-c40a675afa69'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][57]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][58]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][59]= {
                'title': "Deploying your Android project to Google Play",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9519b741-8e19-0363-16c6-97564e46f393'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying your Android project to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][48]= {
                'title': "Adding a React Native app to Bitrise",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-34bd8728-3c12-985d-5378-4f5cf7fa1dee'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Adding a React Native app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][49]= {
                'title': "Installing dependencies for ExpoIonic\/CordovaReact Native apps",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Installing dependencies for ExpoIonic\/CordovaReact Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][50]= {
                'title': "Code signing for React Native apps",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-27a4c90f-0ca6-8eb1-5037-f30a9a8bec00'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][51]= {
                'title': "Signing your Android project",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-4bbce633-6593-eb5d-f462-774e9082d17c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Signing your Android project"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][52]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-39fbc767-f894-36b9-67c4-77255dcf2fed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][53]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][51]= {
                'title': "Signing your Android project",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-4bbce633-6593-eb5d-f462-774e9082d17c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Signing your Android project"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][52]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-39fbc767-f894-36b9-67c4-77255dcf2fed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][53]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][53]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][54]= {
                'title': "Testing your React Native app",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-80e2d0d2-2d4c-6ca1-dc61-bc63b35be483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Testing your React Native app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][55]= {
                'title': "Adding React Native test results to Test reports",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_section-idm465596458009603419294209267'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Testing your React Native app \/ Adding React Native test results to Test reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][56]= {
                'title': "Deploying a React Native app",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-55b3dfd0-e7b5-f345-289b-c40a675afa69'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][57]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][58]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][59]= {
                'title': "Deploying your Android project to Google Play",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9519b741-8e19-0363-16c6-97564e46f393'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying your Android project to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][57]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][58]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][59]= {
                'title': "Deploying your Android project to Google Play",
                'href': 'UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9519b741-8e19-0363-16c6-97564e46f393'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying your Android project to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][60]= {
                'title': "Getting started with Flutter apps",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][61]= {
                'title': "Adding a Flutter app to Bitrise",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-b94714f9-fc2b-0519-6814-259d1c810a03'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Adding a Flutter app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][62]= {
                'title': "Testing a Flutter app",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-23f96a92-1cf0-0e6a-2a38-2ff0710a654d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Testing a Flutter app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][63]= {
                'title': "Deploying a Flutter app",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-e143401b-b088-8fc3-e605-f33c388816b5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][64]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][65]= {
                'title': "Deploying a Flutter app to App Store Connect",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-4926eaea-cb0b-123f-31d5-b78851c0102f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][66]= {
                'title': "Configuring Team ID for Flutter apps",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_section-idm4605888863720032691594577214'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect \/ Configuring Team ID for Flutter apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][67]= {
                'title': "Configuring Flutter deployment to the App Store on Bitrise",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_section-idm4572704029424032691595191375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect \/ Configuring Flutter deployment to the App Store on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][68]= {
                'title': "Deploying a Flutter app to Google Play",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-2ae8912a-d26b-0305-d961-eccef60bbd0e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][69]= {
                'title': "Additional Flutter content",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-2958ed33-8781-9d0a-154b-11e1f10312db'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Additional Flutter content"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][61]= {
                'title': "Adding a Flutter app to Bitrise",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-b94714f9-fc2b-0519-6814-259d1c810a03'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Adding a Flutter app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][62]= {
                'title': "Testing a Flutter app",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-23f96a92-1cf0-0e6a-2a38-2ff0710a654d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Testing a Flutter app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][63]= {
                'title': "Deploying a Flutter app",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-e143401b-b088-8fc3-e605-f33c388816b5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][64]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][65]= {
                'title': "Deploying a Flutter app to App Store Connect",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-4926eaea-cb0b-123f-31d5-b78851c0102f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][66]= {
                'title': "Configuring Team ID for Flutter apps",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_section-idm4605888863720032691594577214'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect \/ Configuring Team ID for Flutter apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][67]= {
                'title': "Configuring Flutter deployment to the App Store on Bitrise",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_section-idm4572704029424032691595191375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect \/ Configuring Flutter deployment to the App Store on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][68]= {
                'title': "Deploying a Flutter app to Google Play",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-2ae8912a-d26b-0305-d961-eccef60bbd0e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][64]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][65]= {
                'title': "Deploying a Flutter app to App Store Connect",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-4926eaea-cb0b-123f-31d5-b78851c0102f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][66]= {
                'title': "Configuring Team ID for Flutter apps",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_section-idm4605888863720032691594577214'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect \/ Configuring Team ID for Flutter apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][67]= {
                'title': "Configuring Flutter deployment to the App Store on Bitrise",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_section-idm4572704029424032691595191375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect \/ Configuring Flutter deployment to the App Store on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][68]= {
                'title': "Deploying a Flutter app to Google Play",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-2ae8912a-d26b-0305-d961-eccef60bbd0e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][69]= {
                'title': "Additional Flutter content",
                'href': 'UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-2958ed33-8781-9d0a-154b-11e1f10312db'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Additional Flutter content"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][70]= {
                'title': "Getting started with Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][71]= {
                'title': "Adding an Ionic\/Cordova app to Bitrise",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-aa07dbed-0c75-bdc8-1cd7-1ad012d6879f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Adding an Ionic\/Cordova app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][72]= {
                'title': "Installing dependencies for ExpoIonic\/CordovaReact Native apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Installing dependencies for ExpoIonic\/CordovaReact Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][73]= {
                'title': "Testing Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-73591944-1878-ddc4-069e-5984dc705c76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Testing Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][74]= {
                'title': "Code signing Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-2ce893ed-91b3-084a-02be-b6a657d3736f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][75]= {
                'title': "iOS code signing for Ionic and Cordova projects",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-6ae15f90-c4f1-e899-dcf5-f25bf374bfa5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][76]= {
                'title': "Ionic\/Cordova code signing with manual code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][77]= {
                'title': "Ionic\/Cordova code signing with automatic code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-795d5e81-95ea-08e8-67b3-15c270197945'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][78]= {
                'title': "Android code signing using the Android Sign Step",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-d00c628e-d72b-57d8-f8e6-c0b25e0053bb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ Android code signing using the Android Sign Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][79]= {
                'title': "Deploying Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-371c655a-098e-6415-f8bf-5d5bfa6890c3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][80]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][81]= {
                'title': "Deploying your Android project to Google Play",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9519b741-8e19-0363-16c6-97564e46f393'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your Android project to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][82]= {
                'title': "Deploying your iOS project to the App Store",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-3a513eaf-c36c-0e55-e069-270aae847572'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your iOS project to the App Store"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][71]= {
                'title': "Adding an Ionic\/Cordova app to Bitrise",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-aa07dbed-0c75-bdc8-1cd7-1ad012d6879f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Adding an Ionic\/Cordova app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][72]= {
                'title': "Installing dependencies for ExpoIonic\/CordovaReact Native apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Installing dependencies for ExpoIonic\/CordovaReact Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][73]= {
                'title': "Testing Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-73591944-1878-ddc4-069e-5984dc705c76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Testing Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][74]= {
                'title': "Code signing Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-2ce893ed-91b3-084a-02be-b6a657d3736f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][75]= {
                'title': "iOS code signing for Ionic and Cordova projects",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-6ae15f90-c4f1-e899-dcf5-f25bf374bfa5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][76]= {
                'title': "Ionic\/Cordova code signing with manual code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][77]= {
                'title': "Ionic\/Cordova code signing with automatic code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-795d5e81-95ea-08e8-67b3-15c270197945'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][78]= {
                'title': "Android code signing using the Android Sign Step",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-d00c628e-d72b-57d8-f8e6-c0b25e0053bb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ Android code signing using the Android Sign Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][75]= {
                'title': "iOS code signing for Ionic and Cordova projects",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-6ae15f90-c4f1-e899-dcf5-f25bf374bfa5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][76]= {
                'title': "Ionic\/Cordova code signing with manual code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][77]= {
                'title': "Ionic\/Cordova code signing with automatic code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-795d5e81-95ea-08e8-67b3-15c270197945'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][76]= {
                'title': "Ionic\/Cordova code signing with manual code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][77]= {
                'title': "Ionic\/Cordova code signing with automatic code signing asset management",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-795d5e81-95ea-08e8-67b3-15c270197945'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][78]= {
                'title': "Android code signing using the Android Sign Step",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-d00c628e-d72b-57d8-f8e6-c0b25e0053bb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ Android code signing using the Android Sign Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][79]= {
                'title': "Deploying Ionic\/Cordova apps",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-371c655a-098e-6415-f8bf-5d5bfa6890c3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][80]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][81]= {
                'title': "Deploying your Android project to Google Play",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9519b741-8e19-0363-16c6-97564e46f393'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your Android project to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][82]= {
                'title': "Deploying your iOS project to the App Store",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-3a513eaf-c36c-0e55-e069-270aae847572'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your iOS project to the App Store"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][80]= {
                'title': "Deploying a cross-platform app to bitrise.io",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying a cross-platform app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][81]= {
                'title': "Deploying your Android project to Google Play",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9519b741-8e19-0363-16c6-97564e46f393'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your Android project to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][82]= {
                'title': "Deploying your iOS project to the App Store",
                'href': 'UUID-9872034d-c75b-ac41-77c9-2be96702439c.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-3a513eaf-c36c-0e55-e069-270aae847572'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your iOS project to the App Store"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][83]= {
                'title': "Getting started with Expo apps",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][84]= {
                'title': "Adding an Expo app to Bitrise",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-50683a7a-65e9-a842-0a7a-4a3d5965421d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Adding an Expo app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][85]= {
                'title': "Installing dependencies for ExpoIonic\/CordovaReact Native apps",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Installing dependencies for ExpoIonic\/CordovaReact Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][86]= {
                'title': "Testing your React Native app",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-80e2d0d2-2d4c-6ca1-dc61-bc63b35be483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Testing your React Native app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][87]= {
                'title': "Adding React Native test results to Test reports",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_section-idm465596458009603419294209267'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Testing your React Native app \/ Adding React Native test results to Test reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][88]= {
                'title': "Deploying your Expo app",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-a048b2ff-74a9-437e-e7a8-7cde16d23c4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Deploying your Expo app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][84]= {
                'title': "Adding an Expo app to Bitrise",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-50683a7a-65e9-a842-0a7a-4a3d5965421d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Adding an Expo app to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][85]= {
                'title': "Installing dependencies for ExpoIonic\/CordovaReact Native apps",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Installing dependencies for ExpoIonic\/CordovaReact Native apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][86]= {
                'title': "Testing your React Native app",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-80e2d0d2-2d4c-6ca1-dc61-bc63b35be483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Testing your React Native app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][87]= {
                'title': "Adding React Native test results to Test reports",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_section-idm465596458009603419294209267'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Testing your React Native app \/ Adding React Native test results to Test reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][88]= {
                'title': "Deploying your Expo app",
                'href': 'UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-a048b2ff-74a9-437e-e7a8-7cde16d23c4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Deploying your Expo app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][89]= {
                'title': "Infrastructure",
                'href': 'UUID-520baf25-3180-0ceb-91b5-1e0da25382d0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][90]= {
                'title': "Build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][91]= {
                'title': "Configuring network access with IP allowlists",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][92]= {
                'title': "IP address ranges for the Bitrise build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-0b5a9be7-1d03-edc2-cb48-01c84787cb86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for the Bitrise build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][93]= {
                'title': "IP address ranges for Bitrise backend workers",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-4e9b4482-a432-cb19-6e7c-4179abfa2a1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for Bitrise backend workers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][94]= {
                'title': "Document changelog",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-d416f831-09cb-4e0f-a999-0c4f1e488cc8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ Document changelog"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][95]= {
                'title': "Storage space on build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-63958978-8e5e-273a-23bb-604f6cf87d19'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Storage space on build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][96]= {
                'title': "Freeing up storage space on build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-5f2d97d7-206d-13b0-00a1-4e418ab70d24'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Freeing up storage space on build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][97]= {
                'title': "Customizing build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-444af3f2-6532-b0af-1bd1-3890c7c7d536'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Customizing build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][98]= {
                'title': "Build stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][99]= {
                'title': "Stack update policy",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][100]= {
                'title': "Xcode stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-6e6a74f3-394e-e856-d023-91a605a7a7a4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][101]= {
                'title': "State transitions for Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-47333f44-6d2e-e96d-a16d-97024d364372'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][102]= {
                'title': "Edge stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm33419843274790'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Edge stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][103]= {
                'title': "Stable stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4538314896835233748774531328'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Stable stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][104]= {
                'title': "macOS releases",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577530673444833748810917375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ macOS releases"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][105]= {
                'title': "Events not triggering a state transition",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577531424347233748814461386'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Events not triggering a state transition"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][106]= {
                'title': "Simulator runtimes on Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-35d9f2b2-c95d-393a-5941-bf38b7719907'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ Simulator runtimes on Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][107]= {
                'title': "Linux stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-c59a4341-d03f-46e0-abe8-dfd6179f0c98'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Linux stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][108]= {
                'title': "Using the previous version of a stack",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-e7fd5cdc-3021-0f20-4ace-4504874d2c00'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Using the previous version of a stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][109]= {
                'title': "Changelog",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-193d553e-4ee0-2176-d46c-dd156d745f9a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Changelog"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][110]= {
                'title': "Stack deprecation and removal policy",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][111]= {
                'title': "Maintaining Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-23e94c31-5fac-39f7-a73b-ca913b1bcaa8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Maintaining Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][112]= {
                'title': "Deprecating Linux stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-4a6b6f53-2b3b-2469-73ec-cab86ebf7d70'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Deprecating Linux stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][113]= {
                'title': "Preinstalled tools on Bitrise stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-5c6d11d2-5bdc-1c4e-43e3-58c25f7122a9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Preinstalled tools on Bitrise stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][114]= {
                'title': "The Android\/Linux\/Docker environment",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-84990961-9960-b41e-cb22-60f9b5c0aabc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ The Android\/Linux\/Docker environment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][115]= {
                'title': "Managing Java versions",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][116]= {
                'title': "Setting Java version with the Set Java version Step",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-badb376b-bd4e-3edf-be7e-4f827a7822bc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Setting Java version with the Set Java version Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][117]= {
                'title': "Installing a Java version on an Android stack",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-d57c0d6d-9372-a962-d727-92ddb61db2c2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Installing a Java version on an Android stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][118]= {
                'title': "Code security",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][119]= {
                'title': "Source code",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-12fe389e-435f-2d34-8992-34438c715188'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Source code"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][120]= {
                'title': "Code signing and other files",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-da1ab3c5-fb7b-86aa-b821-f2e94d9afc76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Code signing and other files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][121]= {
                'title': "Passwords",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-2ed8d1a3-4482-7e78-5d0c-5b07ab67ce6d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Passwords"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][122]= {
                'title': "Customizable enterprise build platforms",
                'href': 'UUID-49f916c8-22af-0ba9-036c-e9ebc6ea84a9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Customizable enterprise build platforms"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][123]= {
                'title': "Using your own Docker image",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][124]= {
                'title': "Running docker commands with a Script Step",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-14d6acc6-a98a-13d3-634b-017ae06cd24f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][125]= {
                'title': "Running docker hello-world",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-1c93acde-278b-4746-0519-afbc7b4f51b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Running docker hello-world"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][126]= {
                'title': "Building and running a Dockerfile",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-eabad7ca-54f3-0fb2-2562-c4c393d8e72a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Building and running a Dockerfile"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][127]= {
                'title': "Using docker-compose",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5929a02d-0629-5409-3865-9c8087678650'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Using docker-compose"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][128]= {
                'title': "Using a custom Docker image from Docker Hub",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-d60f16ef-29c2-7d9f-8e37-3ecb688ed7cd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Using a custom Docker image from Docker Hub"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][129]= {
                'title': "Setting a custom Docker image in the Workflow Editor",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-071a6877-8628-586d-86a1-0e2aaabef5e1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][130]= {
                'title': "Creating your own image from a Bitrise image",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5a239c0c-f35f-4814-5d5d-c401f7a7ba30'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Creating your own image from a Bitrise image"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][131]= {
                'title': "Using your created Docker image in a build",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-35d8a6d0-81fb-f9ac-7fd1-0baac8b00112'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Using your created Docker image in a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][132]= {
                'title': "Running your build locally in Docker",
                'href': 'UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][133]= {
                'title': "Downloading docker images",
                'href': 'UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9.html#UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9_UUID-b984657e-3245-cf1b-bf25-c376e57357e0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker \/ Downloading docker images"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][134]= {
                'title': "Running the build",
                'href': 'UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9.html#UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9_UUID-f60dcdb5-3d89-b814-5c7a-96927f7d403a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker \/ Running the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][90]= {
                'title': "Build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][91]= {
                'title': "Configuring network access with IP allowlists",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][92]= {
                'title': "IP address ranges for the Bitrise build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-0b5a9be7-1d03-edc2-cb48-01c84787cb86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for the Bitrise build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][93]= {
                'title': "IP address ranges for Bitrise backend workers",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-4e9b4482-a432-cb19-6e7c-4179abfa2a1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for Bitrise backend workers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][94]= {
                'title': "Document changelog",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-d416f831-09cb-4e0f-a999-0c4f1e488cc8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ Document changelog"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][95]= {
                'title': "Storage space on build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-63958978-8e5e-273a-23bb-604f6cf87d19'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Storage space on build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][96]= {
                'title': "Freeing up storage space on build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-5f2d97d7-206d-13b0-00a1-4e418ab70d24'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Freeing up storage space on build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][97]= {
                'title': "Customizing build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-444af3f2-6532-b0af-1bd1-3890c7c7d536'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Customizing build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][91]= {
                'title': "Configuring network access with IP allowlists",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][92]= {
                'title': "IP address ranges for the Bitrise build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-0b5a9be7-1d03-edc2-cb48-01c84787cb86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for the Bitrise build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][93]= {
                'title': "IP address ranges for Bitrise backend workers",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-4e9b4482-a432-cb19-6e7c-4179abfa2a1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for Bitrise backend workers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][94]= {
                'title': "Document changelog",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-d416f831-09cb-4e0f-a999-0c4f1e488cc8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ Document changelog"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][92]= {
                'title': "IP address ranges for the Bitrise build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-0b5a9be7-1d03-edc2-cb48-01c84787cb86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for the Bitrise build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][93]= {
                'title': "IP address ranges for Bitrise backend workers",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-4e9b4482-a432-cb19-6e7c-4179abfa2a1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for Bitrise backend workers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][94]= {
                'title': "Document changelog",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-d416f831-09cb-4e0f-a999-0c4f1e488cc8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ Document changelog"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][95]= {
                'title': "Storage space on build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-63958978-8e5e-273a-23bb-604f6cf87d19'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Storage space on build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][96]= {
                'title': "Freeing up storage space on build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-5f2d97d7-206d-13b0-00a1-4e418ab70d24'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Freeing up storage space on build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][97]= {
                'title': "Customizing build machines",
                'href': 'UUID-9ab7b667-21c5-3904-5a90-5f86a5244657.html#UUID-444af3f2-6532-b0af-1bd1-3890c7c7d536'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Customizing build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][98]= {
                'title': "Build stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][99]= {
                'title': "Stack update policy",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][100]= {
                'title': "Xcode stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-6e6a74f3-394e-e856-d023-91a605a7a7a4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][101]= {
                'title': "State transitions for Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-47333f44-6d2e-e96d-a16d-97024d364372'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][102]= {
                'title': "Edge stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm33419843274790'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Edge stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][103]= {
                'title': "Stable stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4538314896835233748774531328'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Stable stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][104]= {
                'title': "macOS releases",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577530673444833748810917375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ macOS releases"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][105]= {
                'title': "Events not triggering a state transition",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577531424347233748814461386'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Events not triggering a state transition"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][106]= {
                'title': "Simulator runtimes on Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-35d9f2b2-c95d-393a-5941-bf38b7719907'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ Simulator runtimes on Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][107]= {
                'title': "Linux stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-c59a4341-d03f-46e0-abe8-dfd6179f0c98'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Linux stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][108]= {
                'title': "Using the previous version of a stack",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-e7fd5cdc-3021-0f20-4ace-4504874d2c00'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Using the previous version of a stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][109]= {
                'title': "Changelog",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-193d553e-4ee0-2176-d46c-dd156d745f9a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Changelog"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][110]= {
                'title': "Stack deprecation and removal policy",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][111]= {
                'title': "Maintaining Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-23e94c31-5fac-39f7-a73b-ca913b1bcaa8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Maintaining Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][112]= {
                'title': "Deprecating Linux stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-4a6b6f53-2b3b-2469-73ec-cab86ebf7d70'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Deprecating Linux stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][113]= {
                'title': "Preinstalled tools on Bitrise stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-5c6d11d2-5bdc-1c4e-43e3-58c25f7122a9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Preinstalled tools on Bitrise stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][114]= {
                'title': "The Android\/Linux\/Docker environment",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-84990961-9960-b41e-cb22-60f9b5c0aabc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ The Android\/Linux\/Docker environment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][115]= {
                'title': "Managing Java versions",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][116]= {
                'title': "Setting Java version with the Set Java version Step",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-badb376b-bd4e-3edf-be7e-4f827a7822bc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Setting Java version with the Set Java version Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][117]= {
                'title': "Installing a Java version on an Android stack",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-d57c0d6d-9372-a962-d727-92ddb61db2c2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Installing a Java version on an Android stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][99]= {
                'title': "Stack update policy",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][100]= {
                'title': "Xcode stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-6e6a74f3-394e-e856-d023-91a605a7a7a4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][101]= {
                'title': "State transitions for Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-47333f44-6d2e-e96d-a16d-97024d364372'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][102]= {
                'title': "Edge stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm33419843274790'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Edge stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][103]= {
                'title': "Stable stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4538314896835233748774531328'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Stable stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][104]= {
                'title': "macOS releases",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577530673444833748810917375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ macOS releases"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][105]= {
                'title': "Events not triggering a state transition",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577531424347233748814461386'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Events not triggering a state transition"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][106]= {
                'title': "Simulator runtimes on Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-35d9f2b2-c95d-393a-5941-bf38b7719907'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ Simulator runtimes on Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][107]= {
                'title': "Linux stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-c59a4341-d03f-46e0-abe8-dfd6179f0c98'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Linux stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][108]= {
                'title': "Using the previous version of a stack",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-e7fd5cdc-3021-0f20-4ace-4504874d2c00'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Using the previous version of a stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][109]= {
                'title': "Changelog",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-193d553e-4ee0-2176-d46c-dd156d745f9a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Changelog"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][100]= {
                'title': "Xcode stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-6e6a74f3-394e-e856-d023-91a605a7a7a4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][101]= {
                'title': "State transitions for Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-47333f44-6d2e-e96d-a16d-97024d364372'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][102]= {
                'title': "Edge stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm33419843274790'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Edge stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][103]= {
                'title': "Stable stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4538314896835233748774531328'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Stable stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][104]= {
                'title': "macOS releases",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577530673444833748810917375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ macOS releases"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][105]= {
                'title': "Events not triggering a state transition",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577531424347233748814461386'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Events not triggering a state transition"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][106]= {
                'title': "Simulator runtimes on Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-35d9f2b2-c95d-393a-5941-bf38b7719907'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ Simulator runtimes on Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][101]= {
                'title': "State transitions for Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-47333f44-6d2e-e96d-a16d-97024d364372'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][102]= {
                'title': "Edge stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm33419843274790'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Edge stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][103]= {
                'title': "Stable stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4538314896835233748774531328'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Stable stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][104]= {
                'title': "macOS releases",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577530673444833748810917375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ macOS releases"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][105]= {
                'title': "Events not triggering a state transition",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_section-idm4577531424347233748814461386'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks \/ Events not triggering a state transition"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][106]= {
                'title': "Simulator runtimes on Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-35d9f2b2-c95d-393a-5941-bf38b7719907'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ Simulator runtimes on Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][107]= {
                'title': "Linux stack updates",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-c59a4341-d03f-46e0-abe8-dfd6179f0c98'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Linux stack updates"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][108]= {
                'title': "Using the previous version of a stack",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-e7fd5cdc-3021-0f20-4ace-4504874d2c00'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Using the previous version of a stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][109]= {
                'title': "Changelog",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-193d553e-4ee0-2176-d46c-dd156d745f9a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Changelog"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][110]= {
                'title': "Stack deprecation and removal policy",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][111]= {
                'title': "Maintaining Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-23e94c31-5fac-39f7-a73b-ca913b1bcaa8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Maintaining Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][112]= {
                'title': "Deprecating Linux stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-4a6b6f53-2b3b-2469-73ec-cab86ebf7d70'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Deprecating Linux stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][111]= {
                'title': "Maintaining Xcode stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-23e94c31-5fac-39f7-a73b-ca913b1bcaa8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Maintaining Xcode stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][112]= {
                'title': "Deprecating Linux stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-4a6b6f53-2b3b-2469-73ec-cab86ebf7d70'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Deprecating Linux stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][113]= {
                'title': "Preinstalled tools on Bitrise stacks",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-5c6d11d2-5bdc-1c4e-43e3-58c25f7122a9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Preinstalled tools on Bitrise stacks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][114]= {
                'title': "The Android\/Linux\/Docker environment",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-84990961-9960-b41e-cb22-60f9b5c0aabc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ The Android\/Linux\/Docker environment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][115]= {
                'title': "Managing Java versions",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][116]= {
                'title': "Setting Java version with the Set Java version Step",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-badb376b-bd4e-3edf-be7e-4f827a7822bc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Setting Java version with the Set Java version Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][117]= {
                'title': "Installing a Java version on an Android stack",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-d57c0d6d-9372-a962-d727-92ddb61db2c2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Installing a Java version on an Android stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][116]= {
                'title': "Setting Java version with the Set Java version Step",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-badb376b-bd4e-3edf-be7e-4f827a7822bc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Setting Java version with the Set Java version Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][117]= {
                'title': "Installing a Java version on an Android stack",
                'href': 'UUID-c880ed53-1621-1766-4c72-9010310f6227.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-d57c0d6d-9372-a962-d727-92ddb61db2c2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Installing a Java version on an Android stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][118]= {
                'title': "Code security",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][119]= {
                'title': "Source code",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-12fe389e-435f-2d34-8992-34438c715188'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Source code"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][120]= {
                'title': "Code signing and other files",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-da1ab3c5-fb7b-86aa-b821-f2e94d9afc76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Code signing and other files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][121]= {
                'title': "Passwords",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-2ed8d1a3-4482-7e78-5d0c-5b07ab67ce6d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Passwords"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][119]= {
                'title': "Source code",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-12fe389e-435f-2d34-8992-34438c715188'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Source code"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][120]= {
                'title': "Code signing and other files",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-da1ab3c5-fb7b-86aa-b821-f2e94d9afc76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Code signing and other files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][121]= {
                'title': "Passwords",
                'href': 'UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-2ed8d1a3-4482-7e78-5d0c-5b07ab67ce6d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Passwords"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][122]= {
                'title': "Customizable enterprise build platforms",
                'href': 'UUID-49f916c8-22af-0ba9-036c-e9ebc6ea84a9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Customizable enterprise build platforms"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][123]= {
                'title': "Using your own Docker image",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][124]= {
                'title': "Running docker commands with a Script Step",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-14d6acc6-a98a-13d3-634b-017ae06cd24f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][125]= {
                'title': "Running docker hello-world",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-1c93acde-278b-4746-0519-afbc7b4f51b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Running docker hello-world"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][126]= {
                'title': "Building and running a Dockerfile",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-eabad7ca-54f3-0fb2-2562-c4c393d8e72a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Building and running a Dockerfile"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][127]= {
                'title': "Using docker-compose",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5929a02d-0629-5409-3865-9c8087678650'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Using docker-compose"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][128]= {
                'title': "Using a custom Docker image from Docker Hub",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-d60f16ef-29c2-7d9f-8e37-3ecb688ed7cd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Using a custom Docker image from Docker Hub"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][129]= {
                'title': "Setting a custom Docker image in the Workflow Editor",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-071a6877-8628-586d-86a1-0e2aaabef5e1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][130]= {
                'title': "Creating your own image from a Bitrise image",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5a239c0c-f35f-4814-5d5d-c401f7a7ba30'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Creating your own image from a Bitrise image"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][131]= {
                'title': "Using your created Docker image in a build",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-35d8a6d0-81fb-f9ac-7fd1-0baac8b00112'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Using your created Docker image in a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][124]= {
                'title': "Running docker commands with a Script Step",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-14d6acc6-a98a-13d3-634b-017ae06cd24f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][125]= {
                'title': "Running docker hello-world",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-1c93acde-278b-4746-0519-afbc7b4f51b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Running docker hello-world"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][126]= {
                'title': "Building and running a Dockerfile",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-eabad7ca-54f3-0fb2-2562-c4c393d8e72a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Building and running a Dockerfile"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][127]= {
                'title': "Using docker-compose",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5929a02d-0629-5409-3865-9c8087678650'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Using docker-compose"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][125]= {
                'title': "Running docker hello-world",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-1c93acde-278b-4746-0519-afbc7b4f51b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Running docker hello-world"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][126]= {
                'title': "Building and running a Dockerfile",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-eabad7ca-54f3-0fb2-2562-c4c393d8e72a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Building and running a Dockerfile"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][127]= {
                'title': "Using docker-compose",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5929a02d-0629-5409-3865-9c8087678650'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Using docker-compose"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][128]= {
                'title': "Using a custom Docker image from Docker Hub",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-d60f16ef-29c2-7d9f-8e37-3ecb688ed7cd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Using a custom Docker image from Docker Hub"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][129]= {
                'title': "Setting a custom Docker image in the Workflow Editor",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-071a6877-8628-586d-86a1-0e2aaabef5e1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][130]= {
                'title': "Creating your own image from a Bitrise image",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5a239c0c-f35f-4814-5d5d-c401f7a7ba30'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Creating your own image from a Bitrise image"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][131]= {
                'title': "Using your created Docker image in a build",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-35d8a6d0-81fb-f9ac-7fd1-0baac8b00112'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Using your created Docker image in a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][130]= {
                'title': "Creating your own image from a Bitrise image",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5a239c0c-f35f-4814-5d5d-c401f7a7ba30'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Creating your own image from a Bitrise image"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][131]= {
                'title': "Using your created Docker image in a build",
                'href': 'UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-35d8a6d0-81fb-f9ac-7fd1-0baac8b00112'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Using your created Docker image in a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][132]= {
                'title': "Running your build locally in Docker",
                'href': 'UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][133]= {
                'title': "Downloading docker images",
                'href': 'UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9.html#UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9_UUID-b984657e-3245-cf1b-bf25-c376e57357e0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker \/ Downloading docker images"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][134]= {
                'title': "Running the build",
                'href': 'UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9.html#UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9_UUID-f60dcdb5-3d89-b814-5c7a-96927f7d403a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker \/ Running the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][133]= {
                'title': "Downloading docker images",
                'href': 'UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9.html#UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9_UUID-b984657e-3245-cf1b-bf25-c376e57357e0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker \/ Downloading docker images"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][134]= {
                'title': "Running the build",
                'href': 'UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9.html#UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9_UUID-f60dcdb5-3d89-b814-5c7a-96927f7d403a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker \/ Running the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][135]= {
                'title': "Accounts",
                'href': 'UUID-86714967-7e3d-c756-42f9-9ac1db7edb4a.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][136]= {
                'title': "Connecting to services",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][137]= {
                'title': "Configuring repository access",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][138]= {
                'title': "GitHub App integration",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-9b9bb1dc-6f46-48a7-1ae2-3fe37743c196'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][139]= {
                'title': "Connecting via the GitHub App integration",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-3f55ef21-294f-35cc-a06c-4a2ddd2e1e96'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][140]= {
                'title': "Connecting a GitHub App from the Workspace settings page",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm4538921578953634325792894016'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App from the Workspace settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][141]= {
                'title': "Connecting a GitHub App when adding a new app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm454327137887043432579273919'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App when adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][142]= {
                'title': "Connecting a Git provider with OAuth when adding an app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-c2dcd807-1fbb-598c-337b-191a001cac48'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth when adding an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][143]= {
                'title': "Connecting a Git provider with OAuth from the Account settings page",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-cddd967e-b15c-c8a4-512f-0341b9dd0dd9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth from the Account settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][144]= {
                'title': "Disconnecting a Git provider account",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5a575981-21f7-5a6d-9158-dacef5fd2f1a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Disconnecting a Git provider account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][145]= {
                'title': "Switching from OAuth connection to the GitHub App",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5b08de6e-edc1-243f-2224-b570f6e75ce0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Switching from OAuth connection to the GitHub App"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][146]= {
                'title': "Connecting self-hosted GitLab instances",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][147]= {
                'title': "Configuring the GitLab connection",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-db15d281-c206-d8b4-4f7f-7ab552d22ef3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Configuring the GitLab connection"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][148]= {
                'title': "Adding a new app from a self-hosted GitLab repository",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-94da6a55-9bb3-2b9d-7ba0-4a49b090c67b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Adding a new app from a self-hosted GitLab repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][149]= {
                'title': "Apple services connection",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][150]= {
                'title': "Apple two-factor authentication requirements",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-be4e8549-b5d4-fd4b-b57a-ad7b60ac7345'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple two-factor authentication requirements"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][151]= {
                'title': "Steps that require connecting to your Apple Developer account",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-fcc514ce-8e9f-6ecd-873b-8d6563626375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Steps that require connecting to your Apple Developer account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][152]= {
                'title': "Apple service permissions",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-436e7843-75b0-a960-ac94-8c9f33f30845'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][153]= {
                'title': "Required access with API key authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-ff3e9819-e373-9ac8-b842-97019ffabd28'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with API key authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][154]= {
                'title': "Required access with Apple ID authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-c5a1e0f7-8ef6-f86a-d14a-0952aa4c2df6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with Apple ID authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][155]= {
                'title': "Connecting to an Apple service with API key",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][156]= {
                'title': "Adding API key authentication data on Bitrise",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-c9346b39-eb25-93ad-bb5f-6536d9cb1ae3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Adding API key authentication data on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][157]= {
                'title': "Assigning API key authentication to your app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-dd8c7216-7e0a-6a21-0098-e2f1e8ddb9d3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Assigning API key authentication to your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][158]= {
                'title': "Connecting to an Apple service with Apple ID",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][159]= {
                'title': "Adding Apple ID authentication data on Bitrise",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-c2607cb6-918c-9a4b-389a-703458ebf025'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Adding Apple ID authentication data on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][160]= {
                'title': "Assigning Apple ID authentication to your app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-232a3d0e-df26-cad6-f9ec-1e325e2e38e4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Assigning Apple ID authentication to your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][161]= {
                'title': "Connecting to an Apple Service with Step inputs",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][162]= {
                'title': "Authenticating in a Step with API key",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-6f89125d-5856-f5ad-990e-cd07541ba6b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with API key"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][163]= {
                'title': "Authenticating in a Step with Apple ID and password",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-5dee6cba-c181-51db-4357-2c75fe1cd747'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with Apple ID and password"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][164]= {
                'title': "Steps requiring Apple authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][165]= {
                'title': "Manage iOS Code Signing Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4618610415088032697980211686'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Manage iOS Code Signing Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][166]= {
                'title': "Xcode Archive & Export for iOS Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm454201435860163289156011673'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Xcode Archive & Export for iOS Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][167]= {
                'title': "Export iOS and tvOS Xcode archive Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4532740788804832891634785239'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Export iOS and tvOS Xcode archive Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][168]= {
                'title': "Xcode Build for testing for iOS Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4563449047667232891644051336'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Xcode Build for testing for iOS Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][169]= {
                'title': "Deploy to App Store Connect with Deliver Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4618610604204832697982140374'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Deploy to App Store Connect with Deliver Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][170]= {
                'title': "Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4605888543691232697984719197'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][171]= {
                'title': "fastlane Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4598684810756832697985898836'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ fastlane Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][172]= {
                'title': "SAML SSO in Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][173]= {
                'title': "Navigating to the Single Sign-On page of Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-4cde1227-4e4d-ef8b-5cba-5518473d80ab'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Navigating to the Single Sign-On page of Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][174]= {
                'title': "Authorizing SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-139b962c-b2c6-db40-2cf8-2b0556a07c8e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Authorizing SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][175]= {
                'title': "Joining a SAML SSO Workspace as a new member",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-4be0cb1b-b1d0-0c10-6835-2599fe26f7e3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Joining a SAML SSO Workspace as a new member"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][176]= {
                'title': "Checking SAML SSO statuses on Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-497623fd-7d49-277a-f6c0-03b852f4be1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Checking SAML SSO statuses on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][177]= {
                'title': "Enforcing SAML SSO on a Workspace",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-e09eab0d-af5c-93d9-f413-bb1a9cdc468f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Enforcing SAML SSO on a Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][178]= {
                'title': "Adding a new user to a Workspace with enforced SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-495ca1ae-c5e8-f16d-579d-f580e1a85e9e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Adding a new user to a Workspace with enforced SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][179]= {
                'title': "Logging in via SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-a8ffc63e-7ab0-b63e-96d8-938f8c6adfc6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Logging in via SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][180]= {
                'title': "Disabling a Workspace's SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-c8a280f3-ccbe-f1fd-117b-c0976054bec0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Disabling a Workspace's SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][181]= {
                'title': "Disabling a Workspace member's SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-8bf98ced-2a6d-fd4f-4fae-5fc5bbd49512'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Disabling a Workspace member's SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][182]= {
                'title': "Updating SAML SSO configuration",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-0db7d33a-756c-e10c-dc08-b345e19f09a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Updating SAML SSO configuration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][183]= {
                'title': "Setting up Google SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][184]= {
                'title': "Getting configuration information from Google Workspace and Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-de5e723b-c807-4ddf-2972-9c3a6e06566e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Getting configuration information from Google Workspace and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][185]= {
                'title': "Enabling Bitrise app for a group or an organizational unit",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-70891c9c-c28f-4c32-1d5a-f7b22cb9d74b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Enabling Bitrise app for a group or an organizational unit"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][186]= {
                'title': "Setting up AD FS SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][187]= {
                'title': "Adding the identity provider sign-on URL",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-2006855c-9862-483c-1936-2069a6093eed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding the identity provider sign-on URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][188]= {
                'title': "Exporting an AD FS certificate",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-21ee6750-1150-cc58-58f6-69935e84aab7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Exporting an AD FS certificate"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][189]= {
                'title': "Adding Bitrise as a relying party trust to AD FS",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-c508edfd-be98-e02b-c337-a24b9e0f19ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding Bitrise as a relying party trust to AD FS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][190]= {
                'title': "Configuring claim rules",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-bb90ca91-8ed6-df95-d070-a8691a9f1ce3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Configuring claim rules"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][191]= {
                'title': "Setting up Azure AD SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][192]= {
                'title': "Adding Bitrise to Azure AD as a new application",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-2b28c9c0-a414-77f8-3856-45a4948cba07'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding Bitrise to Azure AD as a new application"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][193]= {
                'title': "Adding users\/ groups to the app on Azure AD",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-82bcb618-a90d-e704-d87c-a422c14a3950'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding users\/ groups to the app on Azure AD"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][194]= {
                'title': "Setting up SAML SSO between Bitrise and Azure AD",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-0d2aba0c-a421-2a54-1f26-34077b134c12'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Setting up SAML SSO between Bitrise and Azure AD"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][195]= {
                'title': "Setting up Auth0 SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][196]= {
                'title': "Creating Bitrise as a web application on Auth0",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-1a93225f-4206-5a6c-e8d4-f7f19d39c562'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Creating Bitrise as a web application on Auth0"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][197]= {
                'title': "Retrieving SAML SSO information from Auth0",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-938da393-7cf0-7f97-1ad5-5103c02e47fa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Retrieving SAML SSO information from Auth0"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][198]= {
                'title': "Setting up a mapping rule for your Bitrise app’s Client ID",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-5ad937bd-80dd-5e14-c301-eafa0b61f775'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Setting up a mapping rule for your Bitrise app’s Client ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][199]= {
                'title': "Setting up Idaptive SAML SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-0003d3ef-fdb1-0e41-cbed-0b336e48f4fe'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Idaptive SAML SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][200]= {
                'title': "Setting up Okta SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][201]= {
                'title': "Adding Bitrise to Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-26bfa809-15ef-524d-3251-de7df446bf2d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Adding Bitrise to Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][202]= {
                'title': "Configuring Bitrise as a SAML app for Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-8713b566-8a20-bd3c-deda-1e59badceb1c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Configuring Bitrise as a SAML app for Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][203]= {
                'title': "Setting up SCIM provisioning in Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-03f56663-cca5-d4a8-e580-cde2273d120d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Setting up SCIM provisioning in Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][204]= {
                'title': "Pushing Okta groups to Bitrise using SCIM",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-f1580929-08dd-688b-a16b-d318797095b9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Pushing Okta groups to Bitrise using SCIM"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][205]= {
                'title': "Synchronizing groups and users between Okta and Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-324c46ba-468d-775b-1766-82831138e24f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Synchronizing groups and users between Okta and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][206]= {
                'title': "Setting up Ping Identity SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-39b673b2-e890-6e1d-bf48-5e05f68c6194'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Ping Identity SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][207]= {
                'title': "Setting up OneLogin SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-48289fbf-3c50-74c0-46d5-1c1c4cbe87c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up OneLogin SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][208]= {
                'title': "Editing your profile settings",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][209]= {
                'title': "Changing your Bitrise username, email, and password",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-bde4b085-a29d-6693-94ca-4dd165ce20ef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Changing your Bitrise username, email, and password"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][210]= {
                'title': "Adding an avatar to your account",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-91b1a44a-5270-cf37-5725-23fca0fda714'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Adding an avatar to your account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][211]= {
                'title': "Unselecting notification preferences",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-1120d8de-43d7-9895-340d-d4afa91225eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Unselecting notification preferences"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][212]= {
                'title': "Resetting your password",
                'href': 'UUID-98fae107-f00b-060f-6d1e-8076a6e360b0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Resetting your password"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][213]= {
                'title': "Two-factor authentication",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][214]= {
                'title': "Enabling two-factor authentication",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-ce7474ff-670c-e9aa-f0ab-630929568fee'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Enabling two-factor authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][215]= {
                'title': "Disabling two-factor authentication",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-8bdb4c2f-d1da-8bb4-83b3-6355993f9246'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Disabling two-factor authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][216]= {
                'title': "Have you lost your authenticator and recovery codes?",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-4cf4dbc2-df2c-ec76-b741-9eae7605f93f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Have you lost your authenticator and recovery codes?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][217]= {
                'title': "Personal access tokens",
                'href': 'UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][218]= {
                'title': "Creating a personal access token",
                'href': 'UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e.html#UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e_UUID-c66f5d4e-d48d-6bf4-0b49-2c77a0763de0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens \/ Creating a personal access token"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][219]= {
                'title': "Regenerating a personal access token",
                'href': 'UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e.html#UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e_UUID-6a675164-6572-6c5f-a285-e9cb536fe38c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens \/ Regenerating a personal access token"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][220]= {
                'title': "Deleting your Bitrise account",
                'href': 'UUID-fa9c37a1-64d0-5c74-f324-b198ad66462d.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Deleting your Bitrise account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][136]= {
                'title': "Connecting to services",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][137]= {
                'title': "Configuring repository access",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][138]= {
                'title': "GitHub App integration",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-9b9bb1dc-6f46-48a7-1ae2-3fe37743c196'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][139]= {
                'title': "Connecting via the GitHub App integration",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-3f55ef21-294f-35cc-a06c-4a2ddd2e1e96'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][140]= {
                'title': "Connecting a GitHub App from the Workspace settings page",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm4538921578953634325792894016'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App from the Workspace settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][141]= {
                'title': "Connecting a GitHub App when adding a new app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm454327137887043432579273919'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App when adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][142]= {
                'title': "Connecting a Git provider with OAuth when adding an app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-c2dcd807-1fbb-598c-337b-191a001cac48'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth when adding an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][143]= {
                'title': "Connecting a Git provider with OAuth from the Account settings page",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-cddd967e-b15c-c8a4-512f-0341b9dd0dd9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth from the Account settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][144]= {
                'title': "Disconnecting a Git provider account",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5a575981-21f7-5a6d-9158-dacef5fd2f1a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Disconnecting a Git provider account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][145]= {
                'title': "Switching from OAuth connection to the GitHub App",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5b08de6e-edc1-243f-2224-b570f6e75ce0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Switching from OAuth connection to the GitHub App"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][146]= {
                'title': "Connecting self-hosted GitLab instances",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][147]= {
                'title': "Configuring the GitLab connection",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-db15d281-c206-d8b4-4f7f-7ab552d22ef3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Configuring the GitLab connection"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][148]= {
                'title': "Adding a new app from a self-hosted GitLab repository",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-94da6a55-9bb3-2b9d-7ba0-4a49b090c67b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Adding a new app from a self-hosted GitLab repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][149]= {
                'title': "Apple services connection",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][150]= {
                'title': "Apple two-factor authentication requirements",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-be4e8549-b5d4-fd4b-b57a-ad7b60ac7345'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple two-factor authentication requirements"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][151]= {
                'title': "Steps that require connecting to your Apple Developer account",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-fcc514ce-8e9f-6ecd-873b-8d6563626375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Steps that require connecting to your Apple Developer account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][152]= {
                'title': "Apple service permissions",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-436e7843-75b0-a960-ac94-8c9f33f30845'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][153]= {
                'title': "Required access with API key authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-ff3e9819-e373-9ac8-b842-97019ffabd28'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with API key authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][154]= {
                'title': "Required access with Apple ID authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-c5a1e0f7-8ef6-f86a-d14a-0952aa4c2df6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with Apple ID authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][155]= {
                'title': "Connecting to an Apple service with API key",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][156]= {
                'title': "Adding API key authentication data on Bitrise",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-c9346b39-eb25-93ad-bb5f-6536d9cb1ae3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Adding API key authentication data on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][157]= {
                'title': "Assigning API key authentication to your app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-dd8c7216-7e0a-6a21-0098-e2f1e8ddb9d3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Assigning API key authentication to your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][158]= {
                'title': "Connecting to an Apple service with Apple ID",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][159]= {
                'title': "Adding Apple ID authentication data on Bitrise",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-c2607cb6-918c-9a4b-389a-703458ebf025'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Adding Apple ID authentication data on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][160]= {
                'title': "Assigning Apple ID authentication to your app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-232a3d0e-df26-cad6-f9ec-1e325e2e38e4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Assigning Apple ID authentication to your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][161]= {
                'title': "Connecting to an Apple Service with Step inputs",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][162]= {
                'title': "Authenticating in a Step with API key",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-6f89125d-5856-f5ad-990e-cd07541ba6b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with API key"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][163]= {
                'title': "Authenticating in a Step with Apple ID and password",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-5dee6cba-c181-51db-4357-2c75fe1cd747'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with Apple ID and password"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][164]= {
                'title': "Steps requiring Apple authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][165]= {
                'title': "Manage iOS Code Signing Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4618610415088032697980211686'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Manage iOS Code Signing Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][166]= {
                'title': "Xcode Archive & Export for iOS Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm454201435860163289156011673'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Xcode Archive & Export for iOS Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][167]= {
                'title': "Export iOS and tvOS Xcode archive Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4532740788804832891634785239'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Export iOS and tvOS Xcode archive Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][168]= {
                'title': "Xcode Build for testing for iOS Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4563449047667232891644051336'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Xcode Build for testing for iOS Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][169]= {
                'title': "Deploy to App Store Connect with Deliver Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4618610604204832697982140374'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Deploy to App Store Connect with Deliver Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][170]= {
                'title': "Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4605888543691232697984719197'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][171]= {
                'title': "fastlane Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4598684810756832697985898836'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ fastlane Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][137]= {
                'title': "Configuring repository access",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][138]= {
                'title': "GitHub App integration",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-9b9bb1dc-6f46-48a7-1ae2-3fe37743c196'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][139]= {
                'title': "Connecting via the GitHub App integration",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-3f55ef21-294f-35cc-a06c-4a2ddd2e1e96'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][140]= {
                'title': "Connecting a GitHub App from the Workspace settings page",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm4538921578953634325792894016'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App from the Workspace settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][141]= {
                'title': "Connecting a GitHub App when adding a new app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm454327137887043432579273919'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App when adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][142]= {
                'title': "Connecting a Git provider with OAuth when adding an app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-c2dcd807-1fbb-598c-337b-191a001cac48'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth when adding an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][143]= {
                'title': "Connecting a Git provider with OAuth from the Account settings page",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-cddd967e-b15c-c8a4-512f-0341b9dd0dd9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth from the Account settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][144]= {
                'title': "Disconnecting a Git provider account",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5a575981-21f7-5a6d-9158-dacef5fd2f1a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Disconnecting a Git provider account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][145]= {
                'title': "Switching from OAuth connection to the GitHub App",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5b08de6e-edc1-243f-2224-b570f6e75ce0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Switching from OAuth connection to the GitHub App"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][138]= {
                'title': "GitHub App integration",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-9b9bb1dc-6f46-48a7-1ae2-3fe37743c196'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][139]= {
                'title': "Connecting via the GitHub App integration",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-3f55ef21-294f-35cc-a06c-4a2ddd2e1e96'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][140]= {
                'title': "Connecting a GitHub App from the Workspace settings page",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm4538921578953634325792894016'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App from the Workspace settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][141]= {
                'title': "Connecting a GitHub App when adding a new app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm454327137887043432579273919'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App when adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][139]= {
                'title': "Connecting via the GitHub App integration",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-3f55ef21-294f-35cc-a06c-4a2ddd2e1e96'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][140]= {
                'title': "Connecting a GitHub App from the Workspace settings page",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm4538921578953634325792894016'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App from the Workspace settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][141]= {
                'title': "Connecting a GitHub App when adding a new app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_section-idm454327137887043432579273919'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration \/ Connecting a GitHub App when adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][142]= {
                'title': "Connecting a Git provider with OAuth when adding an app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-c2dcd807-1fbb-598c-337b-191a001cac48'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth when adding an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][143]= {
                'title': "Connecting a Git provider with OAuth from the Account settings page",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-cddd967e-b15c-c8a4-512f-0341b9dd0dd9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth from the Account settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][144]= {
                'title': "Disconnecting a Git provider account",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5a575981-21f7-5a6d-9158-dacef5fd2f1a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Disconnecting a Git provider account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][145]= {
                'title': "Switching from OAuth connection to the GitHub App",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5b08de6e-edc1-243f-2224-b570f6e75ce0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Switching from OAuth connection to the GitHub App"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][146]= {
                'title': "Connecting self-hosted GitLab instances",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][147]= {
                'title': "Configuring the GitLab connection",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-db15d281-c206-d8b4-4f7f-7ab552d22ef3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Configuring the GitLab connection"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][148]= {
                'title': "Adding a new app from a self-hosted GitLab repository",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-94da6a55-9bb3-2b9d-7ba0-4a49b090c67b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Adding a new app from a self-hosted GitLab repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][147]= {
                'title': "Configuring the GitLab connection",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-db15d281-c206-d8b4-4f7f-7ab552d22ef3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Configuring the GitLab connection"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][148]= {
                'title': "Adding a new app from a self-hosted GitLab repository",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-94da6a55-9bb3-2b9d-7ba0-4a49b090c67b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Adding a new app from a self-hosted GitLab repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][149]= {
                'title': "Apple services connection",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][150]= {
                'title': "Apple two-factor authentication requirements",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-be4e8549-b5d4-fd4b-b57a-ad7b60ac7345'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple two-factor authentication requirements"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][151]= {
                'title': "Steps that require connecting to your Apple Developer account",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-fcc514ce-8e9f-6ecd-873b-8d6563626375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Steps that require connecting to your Apple Developer account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][152]= {
                'title': "Apple service permissions",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-436e7843-75b0-a960-ac94-8c9f33f30845'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][153]= {
                'title': "Required access with API key authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-ff3e9819-e373-9ac8-b842-97019ffabd28'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with API key authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][154]= {
                'title': "Required access with Apple ID authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-c5a1e0f7-8ef6-f86a-d14a-0952aa4c2df6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with Apple ID authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][150]= {
                'title': "Apple two-factor authentication requirements",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-be4e8549-b5d4-fd4b-b57a-ad7b60ac7345'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple two-factor authentication requirements"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][151]= {
                'title': "Steps that require connecting to your Apple Developer account",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-fcc514ce-8e9f-6ecd-873b-8d6563626375'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Steps that require connecting to your Apple Developer account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][152]= {
                'title': "Apple service permissions",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-436e7843-75b0-a960-ac94-8c9f33f30845'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][153]= {
                'title': "Required access with API key authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-ff3e9819-e373-9ac8-b842-97019ffabd28'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with API key authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][154]= {
                'title': "Required access with Apple ID authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-c5a1e0f7-8ef6-f86a-d14a-0952aa4c2df6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with Apple ID authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][153]= {
                'title': "Required access with API key authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-ff3e9819-e373-9ac8-b842-97019ffabd28'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with API key authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][154]= {
                'title': "Required access with Apple ID authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-c5a1e0f7-8ef6-f86a-d14a-0952aa4c2df6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with Apple ID authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][155]= {
                'title': "Connecting to an Apple service with API key",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][156]= {
                'title': "Adding API key authentication data on Bitrise",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-c9346b39-eb25-93ad-bb5f-6536d9cb1ae3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Adding API key authentication data on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][157]= {
                'title': "Assigning API key authentication to your app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-dd8c7216-7e0a-6a21-0098-e2f1e8ddb9d3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Assigning API key authentication to your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][156]= {
                'title': "Adding API key authentication data on Bitrise",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-c9346b39-eb25-93ad-bb5f-6536d9cb1ae3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Adding API key authentication data on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][157]= {
                'title': "Assigning API key authentication to your app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-dd8c7216-7e0a-6a21-0098-e2f1e8ddb9d3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Assigning API key authentication to your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][158]= {
                'title': "Connecting to an Apple service with Apple ID",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][159]= {
                'title': "Adding Apple ID authentication data on Bitrise",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-c2607cb6-918c-9a4b-389a-703458ebf025'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Adding Apple ID authentication data on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][160]= {
                'title': "Assigning Apple ID authentication to your app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-232a3d0e-df26-cad6-f9ec-1e325e2e38e4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Assigning Apple ID authentication to your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][159]= {
                'title': "Adding Apple ID authentication data on Bitrise",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-c2607cb6-918c-9a4b-389a-703458ebf025'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Adding Apple ID authentication data on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][160]= {
                'title': "Assigning Apple ID authentication to your app",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-232a3d0e-df26-cad6-f9ec-1e325e2e38e4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Assigning Apple ID authentication to your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][161]= {
                'title': "Connecting to an Apple Service with Step inputs",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][162]= {
                'title': "Authenticating in a Step with API key",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-6f89125d-5856-f5ad-990e-cd07541ba6b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with API key"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][163]= {
                'title': "Authenticating in a Step with Apple ID and password",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-5dee6cba-c181-51db-4357-2c75fe1cd747'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with Apple ID and password"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][162]= {
                'title': "Authenticating in a Step with API key",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-6f89125d-5856-f5ad-990e-cd07541ba6b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with API key"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][163]= {
                'title': "Authenticating in a Step with Apple ID and password",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-5dee6cba-c181-51db-4357-2c75fe1cd747'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with Apple ID and password"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][164]= {
                'title': "Steps requiring Apple authentication",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][165]= {
                'title': "Manage iOS Code Signing Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4618610415088032697980211686'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Manage iOS Code Signing Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][166]= {
                'title': "Xcode Archive & Export for iOS Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm454201435860163289156011673'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Xcode Archive & Export for iOS Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][167]= {
                'title': "Export iOS and tvOS Xcode archive Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4532740788804832891634785239'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Export iOS and tvOS Xcode archive Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][168]= {
                'title': "Xcode Build for testing for iOS Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4563449047667232891644051336'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Xcode Build for testing for iOS Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][169]= {
                'title': "Deploy to App Store Connect with Deliver Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4618610604204832697982140374'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Deploy to App Store Connect with Deliver Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][170]= {
                'title': "Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4605888543691232697984719197'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][171]= {
                'title': "fastlane Step",
                'href': 'UUID-4d3ea107-005d-70dd-2a77-359c84e92781.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8_section-idm4598684810756832697985898836'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication \/ fastlane Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][172]= {
                'title': "SAML SSO in Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][173]= {
                'title': "Navigating to the Single Sign-On page of Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-4cde1227-4e4d-ef8b-5cba-5518473d80ab'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Navigating to the Single Sign-On page of Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][174]= {
                'title': "Authorizing SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-139b962c-b2c6-db40-2cf8-2b0556a07c8e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Authorizing SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][175]= {
                'title': "Joining a SAML SSO Workspace as a new member",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-4be0cb1b-b1d0-0c10-6835-2599fe26f7e3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Joining a SAML SSO Workspace as a new member"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][176]= {
                'title': "Checking SAML SSO statuses on Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-497623fd-7d49-277a-f6c0-03b852f4be1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Checking SAML SSO statuses on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][177]= {
                'title': "Enforcing SAML SSO on a Workspace",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-e09eab0d-af5c-93d9-f413-bb1a9cdc468f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Enforcing SAML SSO on a Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][178]= {
                'title': "Adding a new user to a Workspace with enforced SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-495ca1ae-c5e8-f16d-579d-f580e1a85e9e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Adding a new user to a Workspace with enforced SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][179]= {
                'title': "Logging in via SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-a8ffc63e-7ab0-b63e-96d8-938f8c6adfc6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Logging in via SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][180]= {
                'title': "Disabling a Workspace's SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-c8a280f3-ccbe-f1fd-117b-c0976054bec0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Disabling a Workspace's SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][181]= {
                'title': "Disabling a Workspace member's SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-8bf98ced-2a6d-fd4f-4fae-5fc5bbd49512'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Disabling a Workspace member's SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][182]= {
                'title': "Updating SAML SSO configuration",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-0db7d33a-756c-e10c-dc08-b345e19f09a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Updating SAML SSO configuration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][183]= {
                'title': "Setting up Google SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][184]= {
                'title': "Getting configuration information from Google Workspace and Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-de5e723b-c807-4ddf-2972-9c3a6e06566e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Getting configuration information from Google Workspace and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][185]= {
                'title': "Enabling Bitrise app for a group or an organizational unit",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-70891c9c-c28f-4c32-1d5a-f7b22cb9d74b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Enabling Bitrise app for a group or an organizational unit"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][186]= {
                'title': "Setting up AD FS SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][187]= {
                'title': "Adding the identity provider sign-on URL",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-2006855c-9862-483c-1936-2069a6093eed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding the identity provider sign-on URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][188]= {
                'title': "Exporting an AD FS certificate",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-21ee6750-1150-cc58-58f6-69935e84aab7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Exporting an AD FS certificate"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][189]= {
                'title': "Adding Bitrise as a relying party trust to AD FS",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-c508edfd-be98-e02b-c337-a24b9e0f19ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding Bitrise as a relying party trust to AD FS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][190]= {
                'title': "Configuring claim rules",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-bb90ca91-8ed6-df95-d070-a8691a9f1ce3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Configuring claim rules"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][191]= {
                'title': "Setting up Azure AD SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][192]= {
                'title': "Adding Bitrise to Azure AD as a new application",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-2b28c9c0-a414-77f8-3856-45a4948cba07'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding Bitrise to Azure AD as a new application"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][193]= {
                'title': "Adding users\/ groups to the app on Azure AD",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-82bcb618-a90d-e704-d87c-a422c14a3950'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding users\/ groups to the app on Azure AD"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][194]= {
                'title': "Setting up SAML SSO between Bitrise and Azure AD",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-0d2aba0c-a421-2a54-1f26-34077b134c12'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Setting up SAML SSO between Bitrise and Azure AD"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][195]= {
                'title': "Setting up Auth0 SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][196]= {
                'title': "Creating Bitrise as a web application on Auth0",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-1a93225f-4206-5a6c-e8d4-f7f19d39c562'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Creating Bitrise as a web application on Auth0"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][197]= {
                'title': "Retrieving SAML SSO information from Auth0",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-938da393-7cf0-7f97-1ad5-5103c02e47fa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Retrieving SAML SSO information from Auth0"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][198]= {
                'title': "Setting up a mapping rule for your Bitrise app’s Client ID",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-5ad937bd-80dd-5e14-c301-eafa0b61f775'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Setting up a mapping rule for your Bitrise app’s Client ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][199]= {
                'title': "Setting up Idaptive SAML SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-0003d3ef-fdb1-0e41-cbed-0b336e48f4fe'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Idaptive SAML SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][200]= {
                'title': "Setting up Okta SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][201]= {
                'title': "Adding Bitrise to Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-26bfa809-15ef-524d-3251-de7df446bf2d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Adding Bitrise to Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][202]= {
                'title': "Configuring Bitrise as a SAML app for Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-8713b566-8a20-bd3c-deda-1e59badceb1c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Configuring Bitrise as a SAML app for Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][203]= {
                'title': "Setting up SCIM provisioning in Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-03f56663-cca5-d4a8-e580-cde2273d120d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Setting up SCIM provisioning in Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][204]= {
                'title': "Pushing Okta groups to Bitrise using SCIM",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-f1580929-08dd-688b-a16b-d318797095b9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Pushing Okta groups to Bitrise using SCIM"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][205]= {
                'title': "Synchronizing groups and users between Okta and Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-324c46ba-468d-775b-1766-82831138e24f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Synchronizing groups and users between Okta and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][206]= {
                'title': "Setting up Ping Identity SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-39b673b2-e890-6e1d-bf48-5e05f68c6194'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Ping Identity SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][207]= {
                'title': "Setting up OneLogin SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-48289fbf-3c50-74c0-46d5-1c1c4cbe87c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up OneLogin SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][173]= {
                'title': "Navigating to the Single Sign-On page of Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-4cde1227-4e4d-ef8b-5cba-5518473d80ab'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Navigating to the Single Sign-On page of Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][174]= {
                'title': "Authorizing SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-139b962c-b2c6-db40-2cf8-2b0556a07c8e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Authorizing SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][175]= {
                'title': "Joining a SAML SSO Workspace as a new member",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-4be0cb1b-b1d0-0c10-6835-2599fe26f7e3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Joining a SAML SSO Workspace as a new member"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][176]= {
                'title': "Checking SAML SSO statuses on Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-497623fd-7d49-277a-f6c0-03b852f4be1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Checking SAML SSO statuses on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][177]= {
                'title': "Enforcing SAML SSO on a Workspace",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-e09eab0d-af5c-93d9-f413-bb1a9cdc468f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Enforcing SAML SSO on a Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][178]= {
                'title': "Adding a new user to a Workspace with enforced SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-495ca1ae-c5e8-f16d-579d-f580e1a85e9e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Adding a new user to a Workspace with enforced SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][179]= {
                'title': "Logging in via SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-a8ffc63e-7ab0-b63e-96d8-938f8c6adfc6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Logging in via SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][180]= {
                'title': "Disabling a Workspace's SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-c8a280f3-ccbe-f1fd-117b-c0976054bec0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Disabling a Workspace's SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][181]= {
                'title': "Disabling a Workspace member's SAML SSO",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-8bf98ced-2a6d-fd4f-4fae-5fc5bbd49512'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Disabling a Workspace member's SAML SSO"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][182]= {
                'title': "Updating SAML SSO configuration",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-0db7d33a-756c-e10c-dc08-b345e19f09a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Updating SAML SSO configuration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][183]= {
                'title': "Setting up Google SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][184]= {
                'title': "Getting configuration information from Google Workspace and Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-de5e723b-c807-4ddf-2972-9c3a6e06566e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Getting configuration information from Google Workspace and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][185]= {
                'title': "Enabling Bitrise app for a group or an organizational unit",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-70891c9c-c28f-4c32-1d5a-f7b22cb9d74b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Enabling Bitrise app for a group or an organizational unit"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][184]= {
                'title': "Getting configuration information from Google Workspace and Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-de5e723b-c807-4ddf-2972-9c3a6e06566e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Getting configuration information from Google Workspace and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][185]= {
                'title': "Enabling Bitrise app for a group or an organizational unit",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-70891c9c-c28f-4c32-1d5a-f7b22cb9d74b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Enabling Bitrise app for a group or an organizational unit"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][186]= {
                'title': "Setting up AD FS SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][187]= {
                'title': "Adding the identity provider sign-on URL",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-2006855c-9862-483c-1936-2069a6093eed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding the identity provider sign-on URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][188]= {
                'title': "Exporting an AD FS certificate",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-21ee6750-1150-cc58-58f6-69935e84aab7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Exporting an AD FS certificate"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][189]= {
                'title': "Adding Bitrise as a relying party trust to AD FS",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-c508edfd-be98-e02b-c337-a24b9e0f19ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding Bitrise as a relying party trust to AD FS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][190]= {
                'title': "Configuring claim rules",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-bb90ca91-8ed6-df95-d070-a8691a9f1ce3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Configuring claim rules"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][187]= {
                'title': "Adding the identity provider sign-on URL",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-2006855c-9862-483c-1936-2069a6093eed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding the identity provider sign-on URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][188]= {
                'title': "Exporting an AD FS certificate",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-21ee6750-1150-cc58-58f6-69935e84aab7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Exporting an AD FS certificate"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][189]= {
                'title': "Adding Bitrise as a relying party trust to AD FS",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-c508edfd-be98-e02b-c337-a24b9e0f19ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding Bitrise as a relying party trust to AD FS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][190]= {
                'title': "Configuring claim rules",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-bb90ca91-8ed6-df95-d070-a8691a9f1ce3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Configuring claim rules"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][191]= {
                'title': "Setting up Azure AD SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][192]= {
                'title': "Adding Bitrise to Azure AD as a new application",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-2b28c9c0-a414-77f8-3856-45a4948cba07'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding Bitrise to Azure AD as a new application"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][193]= {
                'title': "Adding users\/ groups to the app on Azure AD",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-82bcb618-a90d-e704-d87c-a422c14a3950'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding users\/ groups to the app on Azure AD"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][194]= {
                'title': "Setting up SAML SSO between Bitrise and Azure AD",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-0d2aba0c-a421-2a54-1f26-34077b134c12'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Setting up SAML SSO between Bitrise and Azure AD"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][192]= {
                'title': "Adding Bitrise to Azure AD as a new application",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-2b28c9c0-a414-77f8-3856-45a4948cba07'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding Bitrise to Azure AD as a new application"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][193]= {
                'title': "Adding users\/ groups to the app on Azure AD",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-82bcb618-a90d-e704-d87c-a422c14a3950'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding users\/ groups to the app on Azure AD"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][194]= {
                'title': "Setting up SAML SSO between Bitrise and Azure AD",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-0d2aba0c-a421-2a54-1f26-34077b134c12'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Setting up SAML SSO between Bitrise and Azure AD"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][195]= {
                'title': "Setting up Auth0 SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][196]= {
                'title': "Creating Bitrise as a web application on Auth0",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-1a93225f-4206-5a6c-e8d4-f7f19d39c562'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Creating Bitrise as a web application on Auth0"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][197]= {
                'title': "Retrieving SAML SSO information from Auth0",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-938da393-7cf0-7f97-1ad5-5103c02e47fa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Retrieving SAML SSO information from Auth0"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][198]= {
                'title': "Setting up a mapping rule for your Bitrise app’s Client ID",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-5ad937bd-80dd-5e14-c301-eafa0b61f775'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Setting up a mapping rule for your Bitrise app’s Client ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][196]= {
                'title': "Creating Bitrise as a web application on Auth0",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-1a93225f-4206-5a6c-e8d4-f7f19d39c562'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Creating Bitrise as a web application on Auth0"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][197]= {
                'title': "Retrieving SAML SSO information from Auth0",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-938da393-7cf0-7f97-1ad5-5103c02e47fa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Retrieving SAML SSO information from Auth0"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][198]= {
                'title': "Setting up a mapping rule for your Bitrise app’s Client ID",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-5ad937bd-80dd-5e14-c301-eafa0b61f775'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Setting up a mapping rule for your Bitrise app’s Client ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][199]= {
                'title': "Setting up Idaptive SAML SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-0003d3ef-fdb1-0e41-cbed-0b336e48f4fe'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Idaptive SAML SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][200]= {
                'title': "Setting up Okta SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][201]= {
                'title': "Adding Bitrise to Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-26bfa809-15ef-524d-3251-de7df446bf2d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Adding Bitrise to Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][202]= {
                'title': "Configuring Bitrise as a SAML app for Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-8713b566-8a20-bd3c-deda-1e59badceb1c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Configuring Bitrise as a SAML app for Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][203]= {
                'title': "Setting up SCIM provisioning in Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-03f56663-cca5-d4a8-e580-cde2273d120d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Setting up SCIM provisioning in Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][204]= {
                'title': "Pushing Okta groups to Bitrise using SCIM",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-f1580929-08dd-688b-a16b-d318797095b9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Pushing Okta groups to Bitrise using SCIM"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][205]= {
                'title': "Synchronizing groups and users between Okta and Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-324c46ba-468d-775b-1766-82831138e24f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Synchronizing groups and users between Okta and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][201]= {
                'title': "Adding Bitrise to Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-26bfa809-15ef-524d-3251-de7df446bf2d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Adding Bitrise to Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][202]= {
                'title': "Configuring Bitrise as a SAML app for Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-8713b566-8a20-bd3c-deda-1e59badceb1c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Configuring Bitrise as a SAML app for Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][203]= {
                'title': "Setting up SCIM provisioning in Okta",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-03f56663-cca5-d4a8-e580-cde2273d120d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Setting up SCIM provisioning in Okta"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][204]= {
                'title': "Pushing Okta groups to Bitrise using SCIM",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-f1580929-08dd-688b-a16b-d318797095b9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Pushing Okta groups to Bitrise using SCIM"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][205]= {
                'title': "Synchronizing groups and users between Okta and Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-324c46ba-468d-775b-1766-82831138e24f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Synchronizing groups and users between Okta and Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][206]= {
                'title': "Setting up Ping Identity SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-39b673b2-e890-6e1d-bf48-5e05f68c6194'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Ping Identity SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][207]= {
                'title': "Setting up OneLogin SSO for Bitrise",
                'href': 'UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29.html#UUID-48289fbf-3c50-74c0-46d5-1c1c4cbe87c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up OneLogin SSO for Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][208]= {
                'title': "Editing your profile settings",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][209]= {
                'title': "Changing your Bitrise username, email, and password",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-bde4b085-a29d-6693-94ca-4dd165ce20ef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Changing your Bitrise username, email, and password"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][210]= {
                'title': "Adding an avatar to your account",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-91b1a44a-5270-cf37-5725-23fca0fda714'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Adding an avatar to your account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][211]= {
                'title': "Unselecting notification preferences",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-1120d8de-43d7-9895-340d-d4afa91225eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Unselecting notification preferences"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][209]= {
                'title': "Changing your Bitrise username, email, and password",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-bde4b085-a29d-6693-94ca-4dd165ce20ef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Changing your Bitrise username, email, and password"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][210]= {
                'title': "Adding an avatar to your account",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-91b1a44a-5270-cf37-5725-23fca0fda714'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Adding an avatar to your account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][211]= {
                'title': "Unselecting notification preferences",
                'href': 'UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-1120d8de-43d7-9895-340d-d4afa91225eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Unselecting notification preferences"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][212]= {
                'title': "Resetting your password",
                'href': 'UUID-98fae107-f00b-060f-6d1e-8076a6e360b0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Resetting your password"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][213]= {
                'title': "Two-factor authentication",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][214]= {
                'title': "Enabling two-factor authentication",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-ce7474ff-670c-e9aa-f0ab-630929568fee'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Enabling two-factor authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][215]= {
                'title': "Disabling two-factor authentication",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-8bdb4c2f-d1da-8bb4-83b3-6355993f9246'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Disabling two-factor authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][216]= {
                'title': "Have you lost your authenticator and recovery codes?",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-4cf4dbc2-df2c-ec76-b741-9eae7605f93f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Have you lost your authenticator and recovery codes?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][214]= {
                'title': "Enabling two-factor authentication",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-ce7474ff-670c-e9aa-f0ab-630929568fee'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Enabling two-factor authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][215]= {
                'title': "Disabling two-factor authentication",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-8bdb4c2f-d1da-8bb4-83b3-6355993f9246'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Disabling two-factor authentication"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][216]= {
                'title': "Have you lost your authenticator and recovery codes?",
                'href': 'UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-4cf4dbc2-df2c-ec76-b741-9eae7605f93f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Have you lost your authenticator and recovery codes?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][217]= {
                'title': "Personal access tokens",
                'href': 'UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][218]= {
                'title': "Creating a personal access token",
                'href': 'UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e.html#UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e_UUID-c66f5d4e-d48d-6bf4-0b49-2c77a0763de0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens \/ Creating a personal access token"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][219]= {
                'title': "Regenerating a personal access token",
                'href': 'UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e.html#UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e_UUID-6a675164-6572-6c5f-a285-e9cb536fe38c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens \/ Regenerating a personal access token"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][218]= {
                'title': "Creating a personal access token",
                'href': 'UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e.html#UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e_UUID-c66f5d4e-d48d-6bf4-0b49-2c77a0763de0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens \/ Creating a personal access token"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][219]= {
                'title': "Regenerating a personal access token",
                'href': 'UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e.html#UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e_UUID-6a675164-6572-6c5f-a285-e9cb536fe38c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens \/ Regenerating a personal access token"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][220]= {
                'title': "Deleting your Bitrise account",
                'href': 'UUID-fa9c37a1-64d0-5c74-f324-b198ad66462d.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Deleting your Bitrise account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][221]= {
                'title': "Workspaces",
                'href': 'UUID-66682ae4-b435-da98-c588-4cb36589e592.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][222]= {
                'title': "Creating Workspaces",
                'href': 'UUID-b2672a81-1e7e-0ab4-55dc-44396d01a5b5.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Creating Workspaces"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][223]= {
                'title': "Workspace billing and invoicing",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][224]= {
                'title': "Adding and updating billing details for a Workspace",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-35cb7ab6-692b-5d1e-5884-9e6885f423f4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Adding and updating billing details for a Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][225]= {
                'title': "Setting up an email address for Workspace invoices",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-7c3f5354-876c-c804-8cf8-d239ae61f389'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Setting up an email address for Workspace invoices"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][226]= {
                'title': "Downloading Workspace invoices",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-7c4bcfaa-5f38-cf5d-2e34-48c137fdee0e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Downloading Workspace invoices"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][227]= {
                'title': "Workspace groups",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][228]= {
                'title': "Creating groups for Workspaces",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-9f142b76-d773-88a5-192e-98e4f2eb653e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Creating groups for Workspaces"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][229]= {
                'title': "Adding members to a Workspace group",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-5283ad8d-928c-9a0c-55dc-f7586da02319'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Adding members to a Workspace group"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][230]= {
                'title': "Managing app access roles for Workspace groups",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-32985907-72ce-7984-af0f-99fb52394b36'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Managing app access roles for Workspace groups"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][231]= {
                'title': "Managing the owners of a Workspace",
                'href': 'UUID-0e48bb3c-f26a-2076-c9a9-889c3d955549.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Managing the owners of a Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][232]= {
                'title': "Workspace FAQ",
                'href': 'UUID-74ca6188-a67e-c5b2-4ace-282d652ef8d8.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace FAQ"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][222]= {
                'title': "Creating Workspaces",
                'href': 'UUID-b2672a81-1e7e-0ab4-55dc-44396d01a5b5.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Creating Workspaces"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][223]= {
                'title': "Workspace billing and invoicing",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][224]= {
                'title': "Adding and updating billing details for a Workspace",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-35cb7ab6-692b-5d1e-5884-9e6885f423f4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Adding and updating billing details for a Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][225]= {
                'title': "Setting up an email address for Workspace invoices",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-7c3f5354-876c-c804-8cf8-d239ae61f389'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Setting up an email address for Workspace invoices"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][226]= {
                'title': "Downloading Workspace invoices",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-7c4bcfaa-5f38-cf5d-2e34-48c137fdee0e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Downloading Workspace invoices"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][224]= {
                'title': "Adding and updating billing details for a Workspace",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-35cb7ab6-692b-5d1e-5884-9e6885f423f4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Adding and updating billing details for a Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][225]= {
                'title': "Setting up an email address for Workspace invoices",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-7c3f5354-876c-c804-8cf8-d239ae61f389'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Setting up an email address for Workspace invoices"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][226]= {
                'title': "Downloading Workspace invoices",
                'href': 'UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-7c4bcfaa-5f38-cf5d-2e34-48c137fdee0e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Downloading Workspace invoices"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][227]= {
                'title': "Workspace groups",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][228]= {
                'title': "Creating groups for Workspaces",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-9f142b76-d773-88a5-192e-98e4f2eb653e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Creating groups for Workspaces"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][229]= {
                'title': "Adding members to a Workspace group",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-5283ad8d-928c-9a0c-55dc-f7586da02319'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Adding members to a Workspace group"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][230]= {
                'title': "Managing app access roles for Workspace groups",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-32985907-72ce-7984-af0f-99fb52394b36'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Managing app access roles for Workspace groups"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][228]= {
                'title': "Creating groups for Workspaces",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-9f142b76-d773-88a5-192e-98e4f2eb653e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Creating groups for Workspaces"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][229]= {
                'title': "Adding members to a Workspace group",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-5283ad8d-928c-9a0c-55dc-f7586da02319'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Adding members to a Workspace group"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][230]= {
                'title': "Managing app access roles for Workspace groups",
                'href': 'UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-32985907-72ce-7984-af0f-99fb52394b36'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Managing app access roles for Workspace groups"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][231]= {
                'title': "Managing the owners of a Workspace",
                'href': 'UUID-0e48bb3c-f26a-2076-c9a9-889c3d955549.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Managing the owners of a Workspace"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][232]= {
                'title': "Workspace FAQ",
                'href': 'UUID-74ca6188-a67e-c5b2-4ace-282d652ef8d8.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace FAQ"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][233]= {
                'title': "Apps",
                'href': 'UUID-c94ad031-477a-dc62-bfb2-be8a740da8c3.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][234]= {
                'title': "Webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][235]= {
                'title': "Adding incoming webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][236]= {
                'title': "Registering an incoming webhook automatically",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-0e15a9c2-5e5e-6dbb-6031-45415bf30fbc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook automatically"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][237]= {
                'title': "Registering an incoming webhook manually",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-cd6e4d9c-cada-8eb0-f176-ddd63769dc8e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][238]= {
                'title': "Adding a GitHub webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-32393458-0d1f-b7ec-5e9e-3870e591bb51'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a GitHub webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][239]= {
                'title': "Adding a GitLab webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-e1ee974e-fbf2-1800-48ea-283f8606813e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a GitLab webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][240]= {
                'title': "Adding a Bitbucket webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-40a0e3b9-5167-fe62-1aa4-4f3f481f80b6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Bitbucket webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][241]= {
                'title': "Adding a Gogs webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4c542d7-dde8-0143-1199-2dece940db5c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Gogs webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][242]= {
                'title': "Adding a Slack webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-29eb8644-3447-d10b-4e2f-1810fba36ae5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Slack webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][243]= {
                'title': "Adding a Visual Studio webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-47f911de-489f-87e5-2366-f4e0c5d467de'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Visual Studio webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][244]= {
                'title': "Adding an Assembla webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-aadbd29c-7813-7b07-1f45-169029610228'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding an Assembla webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][245]= {
                'title': "Adding a Deveo webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a9d9971f-c0f6-6903-38bb-516d69075c6b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Deveo webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][246]= {
                'title': "Adding outgoing webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][247]= {
                'title': "Adding an outgoing webhook to an app",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-676d9c4e-ca3a-a3da-3549-7ff3bc182180'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding an outgoing webhook to an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][248]= {
                'title': "Adding custom headers to outgoing webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-e2055e06-652f-0023-156b-f1547757fda5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding custom headers to outgoing webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][249]= {
                'title': "Checking outgoing webhook deliveries",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-00d9445c-14af-5274-0f15-1068d476c337'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Checking outgoing webhook deliveries"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][250]= {
                'title': "Configuring the repository URL and default branch",
                'href': 'UUID-66811810-1d10-b6b9-3aa2-3d886f843f08.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][251]= {
                'title': "Changing the repository URL",
                'href': 'UUID-66811810-1d10-b6b9-3aa2-3d886f843f08.html#UUID-66811810-1d10-b6b9-3aa2-3d886f843f08_UUID-7b91d1b6-db2b-f012-7692-baeb1140e1e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch \/ Changing the repository URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][252]= {
                'title': "Changing the default branch",
                'href': 'UUID-66811810-1d10-b6b9-3aa2-3d886f843f08.html#UUID-66811810-1d10-b6b9-3aa2-3d886f843f08_UUID-2f72d342-385d-6973-d88a-d7a4e02e95cd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch \/ Changing the default branch"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][253]= {
                'title': "Configuring SSH keys",
                'href': 'UUID-b567647e-2421-59ae-7fd8-ec3d3e337378.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][254]= {
                'title': "Generating your own SSH keypair",
                'href': 'UUID-b567647e-2421-59ae-7fd8-ec3d3e337378.html#UUID-b567647e-2421-59ae-7fd8-ec3d3e337378_UUID-f22411ba-fc2f-c6b4-55cf-5154d1836970'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys \/ Generating your own SSH keypair"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][255]= {
                'title': "Configuring SSH keys for your Bitrise app",
                'href': 'UUID-b567647e-2421-59ae-7fd8-ec3d3e337378.html#UUID-b567647e-2421-59ae-7fd8-ec3d3e337378_UUID-d340b1a6-bd1c-c17d-8058-7d574e117a9e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys \/ Configuring SSH keys for your Bitrise app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][256]= {
                'title': "Managing user access to an app",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][257]= {
                'title': "Adding an outside contributor to an app team",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-31b59ff1-1c2f-4b90-ba57-3d0643aef261'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding an outside contributor to an app team"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][258]= {
                'title': "Adding Workspace groups to an app team",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-8fe04035-1454-48b3-9962-88e39d4bf4f4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][259]= {
                'title': "Assigning a group from the Workspace's profile settings page",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_section-idm459310328777123270308300628'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team \/ Assigning a group from the Workspace's profile settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][260]= {
                'title': "Assigning a group from the App settings page",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_section-idm4660232322518432703083960689'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team \/ Assigning a group from the App settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][261]= {
                'title': "Revoking access to an app from a group",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-b9539044-9756-8289-bf5b-ba8e6f417fef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Revoking access to an app from a group"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][262]= {
                'title': "Revoking access to an app from a single user",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-e6e5e8fc-9348-c16b-595b-40f3315404df'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Revoking access to an app from a single user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][263]= {
                'title': "User roles on app teams",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][264]= {
                'title': "Owners",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-02b43655-adc0-7918-6601-50d7220b1e50'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Owners"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][265]= {
                'title': "Admins",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-f1a17dfd-65f7-34dc-80b8-97e2bda479ac'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Admins"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][266]= {
                'title': "Developers",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-6f2687e8-fe63-bc07-4766-37d5e7fe727c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Developers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][267]= {
                'title': "Platform Engineers",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-eddaddc1-0e8a-0b81-479c-50d7b1c8045f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Platform Engineers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][268]= {
                'title': "Testers\/QA",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-a9a25610-27f5-bdde-ac43-9a14c460edb2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Testers\/QA"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][269]= {
                'title': "Changing the owner of an app",
                'href': 'UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][270]= {
                'title': "Transferring apps from the Workspace profile page",
                'href': 'UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27.html#UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27_UUID-b2b1e154-2028-d657-4d5a-34b42f9f7a17'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app \/ Transferring apps from the Workspace profile page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][271]= {
                'title': "Transferring an app from App settings",
                'href': 'UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27.html#UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27_UUID-89e9426d-8ed5-9222-4c14-f7621e078f5f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app \/ Transferring an app from App settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][272]= {
                'title': "Enabling the Bitrise Support Access for your app",
                'href': 'UUID-4f3d837e-5293-365c-4da6-e69b8795cad3.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Enabling the Bitrise Support Access for your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][273]= {
                'title': "Apps with submodules or private repo dependencies",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][274]= {
                'title': "Using a machine user to access private repositories",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-42246c46-c8ec-1c51-ef6c-63003b0871d4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][275]= {
                'title': "Adding the machine user to your repository",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-409cccb5-3655-8c57-64ad-cf1c1b622985'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the machine user to your repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][276]= {
                'title': "Adding the SSH key to the machine user",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-ad438528-6ba1-7d9f-2af3-d6caa5f40f86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][277]= {
                'title': "When adding a new app",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_section-idm4549589863441632751390986564'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user \/ When adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][278]= {
                'title': "When your app already exists",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_section-idm4495199924630432751391493506'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user \/ When your app already exists"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][279]= {
                'title': "Git cloning submodules and repository dependencies",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-bb56804c-5dcf-b35c-05de-c4a18d4c4b11'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Git cloning submodules and repository dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][280]= {
                'title': "Public apps",
                'href': 'UUID-20ad211e-6e31-4fe0-bca8-61358e546ed2.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Public apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][281]= {
                'title': "Creating white label app versions",
                'href': 'UUID-30061fe3-6a35-8213-71dd-492d8203959f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][282]= {
                'title': "Prepping Workflows of a white label app",
                'href': 'UUID-30061fe3-6a35-8213-71dd-492d8203959f.html#UUID-30061fe3-6a35-8213-71dd-492d8203959f_UUID-25a443cf-402b-2f60-63df-eb7f5b6ca65c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions \/ Prepping Workflows of a white label app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][283]= {
                'title': "Chaining Workflows for a white label app",
                'href': 'UUID-30061fe3-6a35-8213-71dd-492d8203959f.html#UUID-30061fe3-6a35-8213-71dd-492d8203959f_UUID-88050b24-4a07-9e00-402c-bc27f8ebefbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions \/ Chaining Workflows for a white label app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][234]= {
                'title': "Webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][235]= {
                'title': "Adding incoming webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][236]= {
                'title': "Registering an incoming webhook automatically",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-0e15a9c2-5e5e-6dbb-6031-45415bf30fbc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook automatically"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][237]= {
                'title': "Registering an incoming webhook manually",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-cd6e4d9c-cada-8eb0-f176-ddd63769dc8e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][238]= {
                'title': "Adding a GitHub webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-32393458-0d1f-b7ec-5e9e-3870e591bb51'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a GitHub webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][239]= {
                'title': "Adding a GitLab webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-e1ee974e-fbf2-1800-48ea-283f8606813e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a GitLab webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][240]= {
                'title': "Adding a Bitbucket webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-40a0e3b9-5167-fe62-1aa4-4f3f481f80b6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Bitbucket webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][241]= {
                'title': "Adding a Gogs webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4c542d7-dde8-0143-1199-2dece940db5c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Gogs webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][242]= {
                'title': "Adding a Slack webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-29eb8644-3447-d10b-4e2f-1810fba36ae5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Slack webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][243]= {
                'title': "Adding a Visual Studio webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-47f911de-489f-87e5-2366-f4e0c5d467de'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Visual Studio webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][244]= {
                'title': "Adding an Assembla webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-aadbd29c-7813-7b07-1f45-169029610228'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding an Assembla webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][245]= {
                'title': "Adding a Deveo webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a9d9971f-c0f6-6903-38bb-516d69075c6b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Deveo webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][246]= {
                'title': "Adding outgoing webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][247]= {
                'title': "Adding an outgoing webhook to an app",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-676d9c4e-ca3a-a3da-3549-7ff3bc182180'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding an outgoing webhook to an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][248]= {
                'title': "Adding custom headers to outgoing webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-e2055e06-652f-0023-156b-f1547757fda5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding custom headers to outgoing webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][249]= {
                'title': "Checking outgoing webhook deliveries",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-00d9445c-14af-5274-0f15-1068d476c337'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Checking outgoing webhook deliveries"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][235]= {
                'title': "Adding incoming webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][236]= {
                'title': "Registering an incoming webhook automatically",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-0e15a9c2-5e5e-6dbb-6031-45415bf30fbc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook automatically"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][237]= {
                'title': "Registering an incoming webhook manually",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-cd6e4d9c-cada-8eb0-f176-ddd63769dc8e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][236]= {
                'title': "Registering an incoming webhook automatically",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-0e15a9c2-5e5e-6dbb-6031-45415bf30fbc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook automatically"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][237]= {
                'title': "Registering an incoming webhook manually",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-cd6e4d9c-cada-8eb0-f176-ddd63769dc8e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][238]= {
                'title': "Adding a GitHub webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-32393458-0d1f-b7ec-5e9e-3870e591bb51'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a GitHub webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][239]= {
                'title': "Adding a GitLab webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-e1ee974e-fbf2-1800-48ea-283f8606813e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a GitLab webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][240]= {
                'title': "Adding a Bitbucket webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-40a0e3b9-5167-fe62-1aa4-4f3f481f80b6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Bitbucket webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][241]= {
                'title': "Adding a Gogs webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a4c542d7-dde8-0143-1199-2dece940db5c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Gogs webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][242]= {
                'title': "Adding a Slack webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-29eb8644-3447-d10b-4e2f-1810fba36ae5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Slack webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][243]= {
                'title': "Adding a Visual Studio webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-47f911de-489f-87e5-2366-f4e0c5d467de'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Visual Studio webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][244]= {
                'title': "Adding an Assembla webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-aadbd29c-7813-7b07-1f45-169029610228'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding an Assembla webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][245]= {
                'title': "Adding a Deveo webhook",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-a9d9971f-c0f6-6903-38bb-516d69075c6b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Deveo webhook"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][246]= {
                'title': "Adding outgoing webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][247]= {
                'title': "Adding an outgoing webhook to an app",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-676d9c4e-ca3a-a3da-3549-7ff3bc182180'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding an outgoing webhook to an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][248]= {
                'title': "Adding custom headers to outgoing webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-e2055e06-652f-0023-156b-f1547757fda5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding custom headers to outgoing webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][249]= {
                'title': "Checking outgoing webhook deliveries",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-00d9445c-14af-5274-0f15-1068d476c337'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Checking outgoing webhook deliveries"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][247]= {
                'title': "Adding an outgoing webhook to an app",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-676d9c4e-ca3a-a3da-3549-7ff3bc182180'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding an outgoing webhook to an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][248]= {
                'title': "Adding custom headers to outgoing webhooks",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-e2055e06-652f-0023-156b-f1547757fda5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding custom headers to outgoing webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][249]= {
                'title': "Checking outgoing webhook deliveries",
                'href': 'UUID-c98a5e1e-cd0c-42b3-00bf-70ab149c6974.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-00d9445c-14af-5274-0f15-1068d476c337'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Checking outgoing webhook deliveries"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][250]= {
                'title': "Configuring the repository URL and default branch",
                'href': 'UUID-66811810-1d10-b6b9-3aa2-3d886f843f08.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][251]= {
                'title': "Changing the repository URL",
                'href': 'UUID-66811810-1d10-b6b9-3aa2-3d886f843f08.html#UUID-66811810-1d10-b6b9-3aa2-3d886f843f08_UUID-7b91d1b6-db2b-f012-7692-baeb1140e1e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch \/ Changing the repository URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][252]= {
                'title': "Changing the default branch",
                'href': 'UUID-66811810-1d10-b6b9-3aa2-3d886f843f08.html#UUID-66811810-1d10-b6b9-3aa2-3d886f843f08_UUID-2f72d342-385d-6973-d88a-d7a4e02e95cd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch \/ Changing the default branch"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][251]= {
                'title': "Changing the repository URL",
                'href': 'UUID-66811810-1d10-b6b9-3aa2-3d886f843f08.html#UUID-66811810-1d10-b6b9-3aa2-3d886f843f08_UUID-7b91d1b6-db2b-f012-7692-baeb1140e1e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch \/ Changing the repository URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][252]= {
                'title': "Changing the default branch",
                'href': 'UUID-66811810-1d10-b6b9-3aa2-3d886f843f08.html#UUID-66811810-1d10-b6b9-3aa2-3d886f843f08_UUID-2f72d342-385d-6973-d88a-d7a4e02e95cd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch \/ Changing the default branch"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][253]= {
                'title': "Configuring SSH keys",
                'href': 'UUID-b567647e-2421-59ae-7fd8-ec3d3e337378.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][254]= {
                'title': "Generating your own SSH keypair",
                'href': 'UUID-b567647e-2421-59ae-7fd8-ec3d3e337378.html#UUID-b567647e-2421-59ae-7fd8-ec3d3e337378_UUID-f22411ba-fc2f-c6b4-55cf-5154d1836970'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys \/ Generating your own SSH keypair"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][255]= {
                'title': "Configuring SSH keys for your Bitrise app",
                'href': 'UUID-b567647e-2421-59ae-7fd8-ec3d3e337378.html#UUID-b567647e-2421-59ae-7fd8-ec3d3e337378_UUID-d340b1a6-bd1c-c17d-8058-7d574e117a9e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys \/ Configuring SSH keys for your Bitrise app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][254]= {
                'title': "Generating your own SSH keypair",
                'href': 'UUID-b567647e-2421-59ae-7fd8-ec3d3e337378.html#UUID-b567647e-2421-59ae-7fd8-ec3d3e337378_UUID-f22411ba-fc2f-c6b4-55cf-5154d1836970'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys \/ Generating your own SSH keypair"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][255]= {
                'title': "Configuring SSH keys for your Bitrise app",
                'href': 'UUID-b567647e-2421-59ae-7fd8-ec3d3e337378.html#UUID-b567647e-2421-59ae-7fd8-ec3d3e337378_UUID-d340b1a6-bd1c-c17d-8058-7d574e117a9e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys \/ Configuring SSH keys for your Bitrise app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][256]= {
                'title': "Managing user access to an app",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][257]= {
                'title': "Adding an outside contributor to an app team",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-31b59ff1-1c2f-4b90-ba57-3d0643aef261'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding an outside contributor to an app team"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][258]= {
                'title': "Adding Workspace groups to an app team",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-8fe04035-1454-48b3-9962-88e39d4bf4f4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][259]= {
                'title': "Assigning a group from the Workspace's profile settings page",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_section-idm459310328777123270308300628'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team \/ Assigning a group from the Workspace's profile settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][260]= {
                'title': "Assigning a group from the App settings page",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_section-idm4660232322518432703083960689'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team \/ Assigning a group from the App settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][261]= {
                'title': "Revoking access to an app from a group",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-b9539044-9756-8289-bf5b-ba8e6f417fef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Revoking access to an app from a group"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][262]= {
                'title': "Revoking access to an app from a single user",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-e6e5e8fc-9348-c16b-595b-40f3315404df'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Revoking access to an app from a single user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][257]= {
                'title': "Adding an outside contributor to an app team",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-31b59ff1-1c2f-4b90-ba57-3d0643aef261'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding an outside contributor to an app team"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][258]= {
                'title': "Adding Workspace groups to an app team",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-8fe04035-1454-48b3-9962-88e39d4bf4f4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][259]= {
                'title': "Assigning a group from the Workspace's profile settings page",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_section-idm459310328777123270308300628'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team \/ Assigning a group from the Workspace's profile settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][260]= {
                'title': "Assigning a group from the App settings page",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_section-idm4660232322518432703083960689'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team \/ Assigning a group from the App settings page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][261]= {
                'title': "Revoking access to an app from a group",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-b9539044-9756-8289-bf5b-ba8e6f417fef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Revoking access to an app from a group"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][262]= {
                'title': "Revoking access to an app from a single user",
                'href': 'UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-e6e5e8fc-9348-c16b-595b-40f3315404df'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Revoking access to an app from a single user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][263]= {
                'title': "User roles on app teams",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][264]= {
                'title': "Owners",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-02b43655-adc0-7918-6601-50d7220b1e50'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Owners"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][265]= {
                'title': "Admins",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-f1a17dfd-65f7-34dc-80b8-97e2bda479ac'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Admins"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][266]= {
                'title': "Developers",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-6f2687e8-fe63-bc07-4766-37d5e7fe727c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Developers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][267]= {
                'title': "Platform Engineers",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-eddaddc1-0e8a-0b81-479c-50d7b1c8045f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Platform Engineers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][268]= {
                'title': "Testers\/QA",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-a9a25610-27f5-bdde-ac43-9a14c460edb2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Testers\/QA"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][264]= {
                'title': "Owners",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-02b43655-adc0-7918-6601-50d7220b1e50'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Owners"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][265]= {
                'title': "Admins",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-f1a17dfd-65f7-34dc-80b8-97e2bda479ac'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Admins"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][266]= {
                'title': "Developers",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-6f2687e8-fe63-bc07-4766-37d5e7fe727c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Developers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][267]= {
                'title': "Platform Engineers",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-eddaddc1-0e8a-0b81-479c-50d7b1c8045f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Platform Engineers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][268]= {
                'title': "Testers\/QA",
                'href': 'UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-a9a25610-27f5-bdde-ac43-9a14c460edb2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Testers\/QA"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][269]= {
                'title': "Changing the owner of an app",
                'href': 'UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][270]= {
                'title': "Transferring apps from the Workspace profile page",
                'href': 'UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27.html#UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27_UUID-b2b1e154-2028-d657-4d5a-34b42f9f7a17'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app \/ Transferring apps from the Workspace profile page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][271]= {
                'title': "Transferring an app from App settings",
                'href': 'UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27.html#UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27_UUID-89e9426d-8ed5-9222-4c14-f7621e078f5f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app \/ Transferring an app from App settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][270]= {
                'title': "Transferring apps from the Workspace profile page",
                'href': 'UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27.html#UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27_UUID-b2b1e154-2028-d657-4d5a-34b42f9f7a17'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app \/ Transferring apps from the Workspace profile page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][271]= {
                'title': "Transferring an app from App settings",
                'href': 'UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27.html#UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27_UUID-89e9426d-8ed5-9222-4c14-f7621e078f5f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app \/ Transferring an app from App settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][272]= {
                'title': "Enabling the Bitrise Support Access for your app",
                'href': 'UUID-4f3d837e-5293-365c-4da6-e69b8795cad3.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Enabling the Bitrise Support Access for your app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][273]= {
                'title': "Apps with submodules or private repo dependencies",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][274]= {
                'title': "Using a machine user to access private repositories",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-42246c46-c8ec-1c51-ef6c-63003b0871d4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][275]= {
                'title': "Adding the machine user to your repository",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-409cccb5-3655-8c57-64ad-cf1c1b622985'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the machine user to your repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][276]= {
                'title': "Adding the SSH key to the machine user",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-ad438528-6ba1-7d9f-2af3-d6caa5f40f86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][277]= {
                'title': "When adding a new app",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_section-idm4549589863441632751390986564'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user \/ When adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][278]= {
                'title': "When your app already exists",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_section-idm4495199924630432751391493506'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user \/ When your app already exists"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][279]= {
                'title': "Git cloning submodules and repository dependencies",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-bb56804c-5dcf-b35c-05de-c4a18d4c4b11'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Git cloning submodules and repository dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][274]= {
                'title': "Using a machine user to access private repositories",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-42246c46-c8ec-1c51-ef6c-63003b0871d4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][275]= {
                'title': "Adding the machine user to your repository",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-409cccb5-3655-8c57-64ad-cf1c1b622985'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the machine user to your repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][276]= {
                'title': "Adding the SSH key to the machine user",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-ad438528-6ba1-7d9f-2af3-d6caa5f40f86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][277]= {
                'title': "When adding a new app",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_section-idm4549589863441632751390986564'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user \/ When adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][278]= {
                'title': "When your app already exists",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_section-idm4495199924630432751391493506'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user \/ When your app already exists"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][275]= {
                'title': "Adding the machine user to your repository",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-409cccb5-3655-8c57-64ad-cf1c1b622985'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the machine user to your repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][276]= {
                'title': "Adding the SSH key to the machine user",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-ad438528-6ba1-7d9f-2af3-d6caa5f40f86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][277]= {
                'title': "When adding a new app",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_section-idm4549589863441632751390986564'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user \/ When adding a new app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][278]= {
                'title': "When your app already exists",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_section-idm4495199924630432751391493506'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user \/ When your app already exists"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][279]= {
                'title': "Git cloning submodules and repository dependencies",
                'href': 'UUID-7977c15f-d343-5588-763e-34b407ef2d6d.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-bb56804c-5dcf-b35c-05de-c4a18d4c4b11'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Git cloning submodules and repository dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][280]= {
                'title': "Public apps",
                'href': 'UUID-20ad211e-6e31-4fe0-bca8-61358e546ed2.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Public apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][281]= {
                'title': "Creating white label app versions",
                'href': 'UUID-30061fe3-6a35-8213-71dd-492d8203959f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][282]= {
                'title': "Prepping Workflows of a white label app",
                'href': 'UUID-30061fe3-6a35-8213-71dd-492d8203959f.html#UUID-30061fe3-6a35-8213-71dd-492d8203959f_UUID-25a443cf-402b-2f60-63df-eb7f5b6ca65c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions \/ Prepping Workflows of a white label app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][283]= {
                'title': "Chaining Workflows for a white label app",
                'href': 'UUID-30061fe3-6a35-8213-71dd-492d8203959f.html#UUID-30061fe3-6a35-8213-71dd-492d8203959f_UUID-88050b24-4a07-9e00-402c-bc27f8ebefbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions \/ Chaining Workflows for a white label app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][282]= {
                'title': "Prepping Workflows of a white label app",
                'href': 'UUID-30061fe3-6a35-8213-71dd-492d8203959f.html#UUID-30061fe3-6a35-8213-71dd-492d8203959f_UUID-25a443cf-402b-2f60-63df-eb7f5b6ca65c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions \/ Prepping Workflows of a white label app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][283]= {
                'title': "Chaining Workflows for a white label app",
                'href': 'UUID-30061fe3-6a35-8213-71dd-492d8203959f.html#UUID-30061fe3-6a35-8213-71dd-492d8203959f_UUID-88050b24-4a07-9e00-402c-bc27f8ebefbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions \/ Chaining Workflows for a white label app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][284]= {
                'title': "Workflows and Pipelines",
                'href': 'UUID-bf795ad3-7684-a92f-12e3-7f40724cc24c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][285]= {
                'title': "Steps",
                'href': 'UUID-922d7042-4d8c-ecaf-aa47-00a99e408e72.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][286]= {
                'title': "Types of Steps",
                'href': 'UUID-922d7042-4d8c-ecaf-aa47-00a99e408e72.html#UUID-922d7042-4d8c-ecaf-aa47-00a99e408e72_UUID-c832be15-6a4f-dd9f-51c0-9265abcdd86c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Steps \/ Types of Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][287]= {
                'title': "Adding Steps to a Workflow",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][288]= {
                'title': "Adding Steps in the Workflow Editor",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-45501245-c40d-38b0-da60-597e96757093'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Adding Steps in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][289]= {
                'title': "Adding Steps from alternative sources",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-958fab21-37d0-bfa5-e283-b2dbec9c9096'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Adding Steps from alternative sources"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][290]= {
                'title': "Removing a Step from a Workflow",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-f4244ae4-5427-faf1-f517-f4123b4d5cb8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Removing a Step from a Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][291]= {
                'title': "Step versioning",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][292]= {
                'title': "Locking a Step to a major or minor version",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-2ad78012-cd36-5b94-5377-9d556ce3a779'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Locking a Step to a major or minor version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][293]= {
                'title': "Using a specific Step version",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-35278d7e-e471-0683-c386-786d7386fda7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Using a specific Step version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][294]= {
                'title': "Using the latest available version of the Step",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-fe4d3bfb-2c1c-9880-de4b-2d57fdb2bbd2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Using the latest available version of the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][295]= {
                'title': "Step inputs",
                'href': 'UUID-f33fb9b7-70bb-f3f1-e4c5-2ce6bbc59a70.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][296]= {
                'title': "Skipping Steps",
                'href': 'UUID-9bcaffa9-f602-c3e4-a8cb-1bb7cfe04760.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Skipping Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][297]= {
                'title': "Enabling or disabling a Step conditionally",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][298]= {
                'title': "Disabling a Step",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-e93cd0fa-7eff-2bd7-3bb4-7f647c03a935'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Disabling a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][299]= {
                'title': "Running a Step only in a CI environment",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-91dfef90-1f21-d07e-6897-8353d50b5f97'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Running a Step only in a CI environment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][300]= {
                'title': "Running a Step only if the build failed",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-6fffa892-07d5-17d9-7a7f-6f27693203e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Running a Step only if the build failed"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][301]= {
                'title': "Ignoring a failed Step without failing the build",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-7042c9f8-556b-2f8a-315e-b567247673fb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Ignoring a failed Step without failing the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][302]= {
                'title': "Setting up run_if conditions with Script Steps",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-319ce0eb-4b70-deb2-e102-7ee89696d53f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Setting up run_if conditions with Script Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][303]= {
                'title': "Examples of run_if expressions",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-7d2bc43d-cb09-d711-38ce-01c35278fdc4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Examples of run_if expressions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][304]= {
                'title': "Setting a time limit for Steps",
                'href': 'UUID-dfe4daf8-54d0-28b1-ca8a-c62086d56c06.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Setting a time limit for Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][305]= {
                'title': "Developing your own Bitrise Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][306]= {
                'title': "Creating your own Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-45277652-008d-152c-9e3a-00e80a3005be_UUID-28a13ba5-95f8-982d-257c-c014857d538f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][307]= {
                'title': "Creating your own scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-45277652-008d-152c-9e3a-00e80a3005be_UUID-bee627ea-4523-0f53-ba3a-d8de6f37a0c5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][308]= {
                'title': "Developing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][309]= {
                'title': "Before you start developing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-043cbee9-410b-f2a5-70b9-7ec7fc988e06'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Before you start developing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][310]= {
                'title': "Creating the Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-60069750-8d64-8e4b-5f6d-27ad5091f458'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Creating the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][311]= {
                'title': "The step.yml file",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-a23819dd-0dfb-48ab-70cf-a4b9defdbdf8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ The step.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][312]= {
                'title': "Naming and describing a Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-3cb9baf0-259e-16b3-7578-072cb3e1bc68'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][313]= {
                'title': "The title",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4e05403b-fedd-dac5-409c-c1af897fc4aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The title"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][314]= {
                'title': "The summary",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-ca8ae7bd-e934-fca5-4bd8-2c4ac51f5648'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][315]= {
                'title': "The description",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c5369b6e-5d61-14fb-4a92-5a053a378bb3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The description"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][316]= {
                'title': "Step categories",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2e5fda44-128e-462a-a0da-1acbac8efb91'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][317]= {
                'title': "Platforms",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-34244531-b85d-06dc-3bbb-4a135f43fec4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Platforms"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][318]= {
                'title': "Category",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-8a072990-3aa6-f160-d956-97d2b8ee9450'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Category"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][319]= {
                'title': "Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-929b3fd4-c7b1-04c5-086d-d0f974b0f16b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][320]= {
                'title': "Step input keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-20166e8e-30e2-06bb-3962-daf112bfd141'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs \/ Step input keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][321]= {
                'title': "Configuring Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f0f1b90b-1660-506d-079a-94b1b55ce17e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][322]= {
                'title': "Naming and describing Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-92d9069e-503f-e98a-cca1-52ea1839ea22'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Naming and describing Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][323]= {
                'title': "Required inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4d9113cc-7822-3beb-8b6e-b7abd9ce4bbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Required inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][324]= {
                'title': "Sensitive inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2dac2a91-8513-bf04-2b2a-7a76f593bdf4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Sensitive inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][325]= {
                'title': "Using Env Vars as input values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-871a4886-f98f-e929-ddd2-c25fa99f9e8d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Using Env Vars as input values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][326]= {
                'title': "Grouping inputs together",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-1442399b-ebb3-54df-92a6-07134b6656a2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Grouping inputs together"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][327]= {
                'title': "Accepting a list of values for inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-679bbe60-796d-b0f3-b179-d90cd4c5bb27'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Accepting a list of values for inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][328]= {
                'title': "Step outputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-66cf5a8a-bd22-9a9d-2bd8-3c69823f2bcf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][329]= {
                'title': "Step output keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-109f8f75-b9f0-11b4-da4a-c61d514fbb26'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Step output keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][330]= {
                'title': "Naming and describing Step outputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-6ab48cf6-d6cc-0c6f-715f-8db1a4eade9d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Naming and describing Step outputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][331]= {
                'title': "Outputs with list of values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-0037185b-ce5e-e050-a8f3-827bbe0eed2f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Outputs with list of values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][332]= {
                'title': "Setting conditions for running the Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f4da0ade-fbdc-7eca-dffe-71bcd2ee112d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Setting conditions for running the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][333]= {
                'title': "Submodules and Step dependencies",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c4e84c50-a008-2f48-92b6-b43eed8ff992'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][334]= {
                'title': "Accessing files in the Step repo with an Env Var",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-dfee884d-b42c-9acd-77b5-9075145e78ab'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies \/ Accessing files in the Step repo with an Env Var"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][335]= {
                'title': "Adding a Step icon",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-23ea572c-f450-e6d2-2daa-19ce92b60cf5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Adding a Step icon"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][336]= {
                'title': "Sharing Steps with all Bitrise users",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][337]= {
                'title': "Sharing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-7efc6453-8dca-4c34-4199-fa8438f32718'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][338]= {
                'title': "Before you start",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-5625e823-f949-436f-46df-4ab065c0deef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Before you start"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][339]= {
                'title': "Sharing with the bitrise share command",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2bc42c9a-5827-9821-35fb-0cffa5c9bb57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the bitrise share command"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][340]= {
                'title': "Sharing with the share-this-step Workflow",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27b97c61-4e9d-40a8-c541-9f047e70b277'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the share-this-step Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][341]= {
                'title': "Fixing issues in a StepLib pull request",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27875dbb-7d14-e0d7-8d07-0635010e8be0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Fixing issues in a StepLib pull request"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][342]= {
                'title': "Abandoned Steps",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-e39b4ac9-b857-3ed0-3eac-0726e4c8008a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Abandoned Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][343]= {
                'title': "Reporting Step issues",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2f191e2a-26e1-a0d1-8db3-c576942457eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Reporting Step issues"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][344]= {
                'title': "Verified Steps",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][345]= {
                'title': "What are Verified Steps?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-2836eb78-458a-fafb-575a-74f0d8cd48a0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][346]= {
                'title': "What is a Workflow Recipe?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-51f552c1-7b73-1cd6-9136-4269c401e3a8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ What is a Workflow Recipe?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][347]= {
                'title': "Promoting your Verified Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-d2cc5184-0a76-bd3c-ba6d-42022522a256'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ Promoting your Verified Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][348]= {
                'title': "Applying for a Verified badge",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-1c235c2c-0c86-741f-c100-1a37e7a56e97'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Applying for a Verified badge"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][349]= {
                'title': "Service level agreement for Verified Step authors",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-6fbb5ed7-26eb-e34d-2f1b-0fb51645e41f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Service level agreement for Verified Step authors"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][350]= {
                'title': "Managing contributions",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-14c6299b-4e97-269b-d598-415ce6e55e30'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Managing contributions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][351]= {
                'title': "How do we go about Step duplications?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-29f1569c-183a-4a7a-d7aa-2142a55b0023'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ How do we go about Step duplications?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][352]= {
                'title': "Creating your own Bitrise project scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][353]= {
                'title': "Options",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-91766f7b-bff0-4669-a51d-7f989b056382'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][354]= {
                'title': "The option model",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-bbcb6d3a-2cfb-863a-f6c1-25d6a34044e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options \/ The option model"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][355]= {
                'title': "Scanners",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-57e2af54-c962-a5b4-dbde-f39267b96541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][356]= {
                'title': "Testing a scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-5b91d715-95c4-e2cf-6510-e41971f7d254'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Testing a scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][357]= {
                'title': "Submitting your own scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-64d1a8e9-8c1c-f7e5-7732-a472ed576b35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Submitting your own scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][358]= {
                'title': "Workflows",
                'href': 'UUID-86305538-9683-ba62-60cf-d98ccc4f3255.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][359]= {
                'title': "Default Workflows",
                'href': 'UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][360]= {
                'title': "The primary Workflow",
                'href': 'UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03.html#UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03_UUID-96432d58-8b9c-a9f0-e895-55dc4e00bc6f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows \/ The primary Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][361]= {
                'title': "The deploy Workflow",
                'href': 'UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03.html#UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03_UUID-c5adfeb2-3539-38ab-8fd8-f02c89622ee5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows \/ The deploy Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][362]= {
                'title': "Creating a Workflow",
                'href': 'UUID-4053e094-d35f-04b9-2ddc-82c470cbe0f6.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Creating a Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][363]= {
                'title': "Managing Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][364]= {
                'title': "The Workflows & Pipelines screen",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-aa2f38b7-60f1-a5be-4a81-b3afb4da5fd4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ The Workflows & Pipelines screen"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][365]= {
                'title': "Chaining Workflows together",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-a0a271e9-0101-a169-d144-5e7a53dfa385'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Chaining Workflows together"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][366]= {
                'title': "Rearranging chained Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-bbdcb4e9-bc1a-874b-21a2-7459acb27500'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Rearranging chained Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][367]= {
                'title': "Renaming Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-b57ec426-29d3-fe6a-f7eb-739b4f6808ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Renaming Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][368]= {
                'title': "Utility Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-9f190192-e074-a377-e396-d71d959d6846'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Utility Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][369]= {
                'title': "Copying Workflows from one app to another",
                'href': 'UUID-72c92b04-4c0e-fde0-26ab-122240ad1021.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Copying Workflows from one app to another"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][285]= {
                'title': "Steps",
                'href': 'UUID-922d7042-4d8c-ecaf-aa47-00a99e408e72.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][286]= {
                'title': "Types of Steps",
                'href': 'UUID-922d7042-4d8c-ecaf-aa47-00a99e408e72.html#UUID-922d7042-4d8c-ecaf-aa47-00a99e408e72_UUID-c832be15-6a4f-dd9f-51c0-9265abcdd86c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Steps \/ Types of Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][286]= {
                'title': "Types of Steps",
                'href': 'UUID-922d7042-4d8c-ecaf-aa47-00a99e408e72.html#UUID-922d7042-4d8c-ecaf-aa47-00a99e408e72_UUID-c832be15-6a4f-dd9f-51c0-9265abcdd86c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Steps \/ Types of Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][287]= {
                'title': "Adding Steps to a Workflow",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][288]= {
                'title': "Adding Steps in the Workflow Editor",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-45501245-c40d-38b0-da60-597e96757093'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Adding Steps in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][289]= {
                'title': "Adding Steps from alternative sources",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-958fab21-37d0-bfa5-e283-b2dbec9c9096'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Adding Steps from alternative sources"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][290]= {
                'title': "Removing a Step from a Workflow",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-f4244ae4-5427-faf1-f517-f4123b4d5cb8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Removing a Step from a Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][288]= {
                'title': "Adding Steps in the Workflow Editor",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-45501245-c40d-38b0-da60-597e96757093'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Adding Steps in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][289]= {
                'title': "Adding Steps from alternative sources",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-958fab21-37d0-bfa5-e283-b2dbec9c9096'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Adding Steps from alternative sources"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][290]= {
                'title': "Removing a Step from a Workflow",
                'href': 'UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-f4244ae4-5427-faf1-f517-f4123b4d5cb8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Removing a Step from a Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][291]= {
                'title': "Step versioning",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][292]= {
                'title': "Locking a Step to a major or minor version",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-2ad78012-cd36-5b94-5377-9d556ce3a779'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Locking a Step to a major or minor version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][293]= {
                'title': "Using a specific Step version",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-35278d7e-e471-0683-c386-786d7386fda7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Using a specific Step version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][294]= {
                'title': "Using the latest available version of the Step",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-fe4d3bfb-2c1c-9880-de4b-2d57fdb2bbd2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Using the latest available version of the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][292]= {
                'title': "Locking a Step to a major or minor version",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-2ad78012-cd36-5b94-5377-9d556ce3a779'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Locking a Step to a major or minor version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][293]= {
                'title': "Using a specific Step version",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-35278d7e-e471-0683-c386-786d7386fda7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Using a specific Step version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][294]= {
                'title': "Using the latest available version of the Step",
                'href': 'UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-fe4d3bfb-2c1c-9880-de4b-2d57fdb2bbd2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Using the latest available version of the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][295]= {
                'title': "Step inputs",
                'href': 'UUID-f33fb9b7-70bb-f3f1-e4c5-2ce6bbc59a70.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][296]= {
                'title': "Skipping Steps",
                'href': 'UUID-9bcaffa9-f602-c3e4-a8cb-1bb7cfe04760.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Skipping Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][297]= {
                'title': "Enabling or disabling a Step conditionally",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][298]= {
                'title': "Disabling a Step",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-e93cd0fa-7eff-2bd7-3bb4-7f647c03a935'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Disabling a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][299]= {
                'title': "Running a Step only in a CI environment",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-91dfef90-1f21-d07e-6897-8353d50b5f97'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Running a Step only in a CI environment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][300]= {
                'title': "Running a Step only if the build failed",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-6fffa892-07d5-17d9-7a7f-6f27693203e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Running a Step only if the build failed"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][301]= {
                'title': "Ignoring a failed Step without failing the build",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-7042c9f8-556b-2f8a-315e-b567247673fb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Ignoring a failed Step without failing the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][302]= {
                'title': "Setting up run_if conditions with Script Steps",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-319ce0eb-4b70-deb2-e102-7ee89696d53f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Setting up run_if conditions with Script Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][303]= {
                'title': "Examples of run_if expressions",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-7d2bc43d-cb09-d711-38ce-01c35278fdc4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Examples of run_if expressions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][298]= {
                'title': "Disabling a Step",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-e93cd0fa-7eff-2bd7-3bb4-7f647c03a935'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Disabling a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][299]= {
                'title': "Running a Step only in a CI environment",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-91dfef90-1f21-d07e-6897-8353d50b5f97'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Running a Step only in a CI environment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][300]= {
                'title': "Running a Step only if the build failed",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-6fffa892-07d5-17d9-7a7f-6f27693203e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Running a Step only if the build failed"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][301]= {
                'title': "Ignoring a failed Step without failing the build",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-7042c9f8-556b-2f8a-315e-b567247673fb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Ignoring a failed Step without failing the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][302]= {
                'title': "Setting up run_if conditions with Script Steps",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-319ce0eb-4b70-deb2-e102-7ee89696d53f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Setting up run_if conditions with Script Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][303]= {
                'title': "Examples of run_if expressions",
                'href': 'UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-7d2bc43d-cb09-d711-38ce-01c35278fdc4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Examples of run_if expressions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][304]= {
                'title': "Setting a time limit for Steps",
                'href': 'UUID-dfe4daf8-54d0-28b1-ca8a-c62086d56c06.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Setting a time limit for Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][305]= {
                'title': "Developing your own Bitrise Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][306]= {
                'title': "Creating your own Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-45277652-008d-152c-9e3a-00e80a3005be_UUID-28a13ba5-95f8-982d-257c-c014857d538f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][307]= {
                'title': "Creating your own scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-45277652-008d-152c-9e3a-00e80a3005be_UUID-bee627ea-4523-0f53-ba3a-d8de6f37a0c5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][308]= {
                'title': "Developing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][309]= {
                'title': "Before you start developing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-043cbee9-410b-f2a5-70b9-7ec7fc988e06'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Before you start developing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][310]= {
                'title': "Creating the Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-60069750-8d64-8e4b-5f6d-27ad5091f458'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Creating the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][311]= {
                'title': "The step.yml file",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-a23819dd-0dfb-48ab-70cf-a4b9defdbdf8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ The step.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][312]= {
                'title': "Naming and describing a Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-3cb9baf0-259e-16b3-7578-072cb3e1bc68'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][313]= {
                'title': "The title",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4e05403b-fedd-dac5-409c-c1af897fc4aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The title"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][314]= {
                'title': "The summary",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-ca8ae7bd-e934-fca5-4bd8-2c4ac51f5648'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][315]= {
                'title': "The description",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c5369b6e-5d61-14fb-4a92-5a053a378bb3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The description"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][316]= {
                'title': "Step categories",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2e5fda44-128e-462a-a0da-1acbac8efb91'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][317]= {
                'title': "Platforms",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-34244531-b85d-06dc-3bbb-4a135f43fec4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Platforms"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][318]= {
                'title': "Category",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-8a072990-3aa6-f160-d956-97d2b8ee9450'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Category"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][319]= {
                'title': "Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-929b3fd4-c7b1-04c5-086d-d0f974b0f16b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][320]= {
                'title': "Step input keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-20166e8e-30e2-06bb-3962-daf112bfd141'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs \/ Step input keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][321]= {
                'title': "Configuring Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f0f1b90b-1660-506d-079a-94b1b55ce17e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][322]= {
                'title': "Naming and describing Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-92d9069e-503f-e98a-cca1-52ea1839ea22'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Naming and describing Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][323]= {
                'title': "Required inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4d9113cc-7822-3beb-8b6e-b7abd9ce4bbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Required inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][324]= {
                'title': "Sensitive inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2dac2a91-8513-bf04-2b2a-7a76f593bdf4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Sensitive inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][325]= {
                'title': "Using Env Vars as input values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-871a4886-f98f-e929-ddd2-c25fa99f9e8d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Using Env Vars as input values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][326]= {
                'title': "Grouping inputs together",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-1442399b-ebb3-54df-92a6-07134b6656a2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Grouping inputs together"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][327]= {
                'title': "Accepting a list of values for inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-679bbe60-796d-b0f3-b179-d90cd4c5bb27'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Accepting a list of values for inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][328]= {
                'title': "Step outputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-66cf5a8a-bd22-9a9d-2bd8-3c69823f2bcf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][329]= {
                'title': "Step output keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-109f8f75-b9f0-11b4-da4a-c61d514fbb26'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Step output keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][330]= {
                'title': "Naming and describing Step outputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-6ab48cf6-d6cc-0c6f-715f-8db1a4eade9d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Naming and describing Step outputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][331]= {
                'title': "Outputs with list of values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-0037185b-ce5e-e050-a8f3-827bbe0eed2f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Outputs with list of values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][332]= {
                'title': "Setting conditions for running the Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f4da0ade-fbdc-7eca-dffe-71bcd2ee112d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Setting conditions for running the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][333]= {
                'title': "Submodules and Step dependencies",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c4e84c50-a008-2f48-92b6-b43eed8ff992'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][334]= {
                'title': "Accessing files in the Step repo with an Env Var",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-dfee884d-b42c-9acd-77b5-9075145e78ab'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies \/ Accessing files in the Step repo with an Env Var"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][335]= {
                'title': "Adding a Step icon",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-23ea572c-f450-e6d2-2daa-19ce92b60cf5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Adding a Step icon"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][336]= {
                'title': "Sharing Steps with all Bitrise users",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][337]= {
                'title': "Sharing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-7efc6453-8dca-4c34-4199-fa8438f32718'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][338]= {
                'title': "Before you start",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-5625e823-f949-436f-46df-4ab065c0deef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Before you start"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][339]= {
                'title': "Sharing with the bitrise share command",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2bc42c9a-5827-9821-35fb-0cffa5c9bb57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the bitrise share command"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][340]= {
                'title': "Sharing with the share-this-step Workflow",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27b97c61-4e9d-40a8-c541-9f047e70b277'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the share-this-step Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][341]= {
                'title': "Fixing issues in a StepLib pull request",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27875dbb-7d14-e0d7-8d07-0635010e8be0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Fixing issues in a StepLib pull request"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][342]= {
                'title': "Abandoned Steps",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-e39b4ac9-b857-3ed0-3eac-0726e4c8008a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Abandoned Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][343]= {
                'title': "Reporting Step issues",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2f191e2a-26e1-a0d1-8db3-c576942457eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Reporting Step issues"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][344]= {
                'title': "Verified Steps",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][345]= {
                'title': "What are Verified Steps?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-2836eb78-458a-fafb-575a-74f0d8cd48a0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][346]= {
                'title': "What is a Workflow Recipe?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-51f552c1-7b73-1cd6-9136-4269c401e3a8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ What is a Workflow Recipe?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][347]= {
                'title': "Promoting your Verified Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-d2cc5184-0a76-bd3c-ba6d-42022522a256'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ Promoting your Verified Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][348]= {
                'title': "Applying for a Verified badge",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-1c235c2c-0c86-741f-c100-1a37e7a56e97'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Applying for a Verified badge"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][349]= {
                'title': "Service level agreement for Verified Step authors",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-6fbb5ed7-26eb-e34d-2f1b-0fb51645e41f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Service level agreement for Verified Step authors"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][350]= {
                'title': "Managing contributions",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-14c6299b-4e97-269b-d598-415ce6e55e30'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Managing contributions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][351]= {
                'title': "How do we go about Step duplications?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-29f1569c-183a-4a7a-d7aa-2142a55b0023'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ How do we go about Step duplications?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][352]= {
                'title': "Creating your own Bitrise project scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][353]= {
                'title': "Options",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-91766f7b-bff0-4669-a51d-7f989b056382'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][354]= {
                'title': "The option model",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-bbcb6d3a-2cfb-863a-f6c1-25d6a34044e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options \/ The option model"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][355]= {
                'title': "Scanners",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-57e2af54-c962-a5b4-dbde-f39267b96541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][356]= {
                'title': "Testing a scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-5b91d715-95c4-e2cf-6510-e41971f7d254'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Testing a scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][357]= {
                'title': "Submitting your own scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-64d1a8e9-8c1c-f7e5-7732-a472ed576b35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Submitting your own scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][306]= {
                'title': "Creating your own Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-45277652-008d-152c-9e3a-00e80a3005be_UUID-28a13ba5-95f8-982d-257c-c014857d538f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][307]= {
                'title': "Creating your own scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-45277652-008d-152c-9e3a-00e80a3005be_UUID-bee627ea-4523-0f53-ba3a-d8de6f37a0c5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][308]= {
                'title': "Developing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][309]= {
                'title': "Before you start developing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-043cbee9-410b-f2a5-70b9-7ec7fc988e06'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Before you start developing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][310]= {
                'title': "Creating the Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-60069750-8d64-8e4b-5f6d-27ad5091f458'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Creating the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][311]= {
                'title': "The step.yml file",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-a23819dd-0dfb-48ab-70cf-a4b9defdbdf8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ The step.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][312]= {
                'title': "Naming and describing a Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-3cb9baf0-259e-16b3-7578-072cb3e1bc68'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][313]= {
                'title': "The title",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4e05403b-fedd-dac5-409c-c1af897fc4aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The title"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][314]= {
                'title': "The summary",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-ca8ae7bd-e934-fca5-4bd8-2c4ac51f5648'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][315]= {
                'title': "The description",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c5369b6e-5d61-14fb-4a92-5a053a378bb3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The description"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][316]= {
                'title': "Step categories",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2e5fda44-128e-462a-a0da-1acbac8efb91'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][317]= {
                'title': "Platforms",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-34244531-b85d-06dc-3bbb-4a135f43fec4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Platforms"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][318]= {
                'title': "Category",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-8a072990-3aa6-f160-d956-97d2b8ee9450'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Category"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][319]= {
                'title': "Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-929b3fd4-c7b1-04c5-086d-d0f974b0f16b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][320]= {
                'title': "Step input keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-20166e8e-30e2-06bb-3962-daf112bfd141'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs \/ Step input keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][321]= {
                'title': "Configuring Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f0f1b90b-1660-506d-079a-94b1b55ce17e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][322]= {
                'title': "Naming and describing Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-92d9069e-503f-e98a-cca1-52ea1839ea22'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Naming and describing Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][323]= {
                'title': "Required inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4d9113cc-7822-3beb-8b6e-b7abd9ce4bbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Required inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][324]= {
                'title': "Sensitive inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2dac2a91-8513-bf04-2b2a-7a76f593bdf4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Sensitive inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][325]= {
                'title': "Using Env Vars as input values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-871a4886-f98f-e929-ddd2-c25fa99f9e8d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Using Env Vars as input values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][326]= {
                'title': "Grouping inputs together",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-1442399b-ebb3-54df-92a6-07134b6656a2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Grouping inputs together"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][327]= {
                'title': "Accepting a list of values for inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-679bbe60-796d-b0f3-b179-d90cd4c5bb27'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Accepting a list of values for inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][328]= {
                'title': "Step outputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-66cf5a8a-bd22-9a9d-2bd8-3c69823f2bcf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][329]= {
                'title': "Step output keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-109f8f75-b9f0-11b4-da4a-c61d514fbb26'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Step output keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][330]= {
                'title': "Naming and describing Step outputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-6ab48cf6-d6cc-0c6f-715f-8db1a4eade9d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Naming and describing Step outputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][331]= {
                'title': "Outputs with list of values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-0037185b-ce5e-e050-a8f3-827bbe0eed2f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Outputs with list of values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][332]= {
                'title': "Setting conditions for running the Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f4da0ade-fbdc-7eca-dffe-71bcd2ee112d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Setting conditions for running the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][333]= {
                'title': "Submodules and Step dependencies",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c4e84c50-a008-2f48-92b6-b43eed8ff992'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][334]= {
                'title': "Accessing files in the Step repo with an Env Var",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-dfee884d-b42c-9acd-77b5-9075145e78ab'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies \/ Accessing files in the Step repo with an Env Var"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][335]= {
                'title': "Adding a Step icon",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-23ea572c-f450-e6d2-2daa-19ce92b60cf5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Adding a Step icon"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][309]= {
                'title': "Before you start developing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-043cbee9-410b-f2a5-70b9-7ec7fc988e06'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Before you start developing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][310]= {
                'title': "Creating the Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-60069750-8d64-8e4b-5f6d-27ad5091f458'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Creating the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][311]= {
                'title': "The step.yml file",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-a23819dd-0dfb-48ab-70cf-a4b9defdbdf8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ The step.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][312]= {
                'title': "Naming and describing a Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-3cb9baf0-259e-16b3-7578-072cb3e1bc68'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][313]= {
                'title': "The title",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4e05403b-fedd-dac5-409c-c1af897fc4aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The title"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][314]= {
                'title': "The summary",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-ca8ae7bd-e934-fca5-4bd8-2c4ac51f5648'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][315]= {
                'title': "The description",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c5369b6e-5d61-14fb-4a92-5a053a378bb3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The description"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][313]= {
                'title': "The title",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4e05403b-fedd-dac5-409c-c1af897fc4aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The title"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][314]= {
                'title': "The summary",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-ca8ae7bd-e934-fca5-4bd8-2c4ac51f5648'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][315]= {
                'title': "The description",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c5369b6e-5d61-14fb-4a92-5a053a378bb3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The description"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][316]= {
                'title': "Step categories",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2e5fda44-128e-462a-a0da-1acbac8efb91'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][317]= {
                'title': "Platforms",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-34244531-b85d-06dc-3bbb-4a135f43fec4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Platforms"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][318]= {
                'title': "Category",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-8a072990-3aa6-f160-d956-97d2b8ee9450'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Category"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][317]= {
                'title': "Platforms",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-34244531-b85d-06dc-3bbb-4a135f43fec4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Platforms"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][318]= {
                'title': "Category",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-8a072990-3aa6-f160-d956-97d2b8ee9450'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Category"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][319]= {
                'title': "Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-929b3fd4-c7b1-04c5-086d-d0f974b0f16b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][320]= {
                'title': "Step input keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-20166e8e-30e2-06bb-3962-daf112bfd141'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs \/ Step input keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][320]= {
                'title': "Step input keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-20166e8e-30e2-06bb-3962-daf112bfd141'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs \/ Step input keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][321]= {
                'title': "Configuring Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f0f1b90b-1660-506d-079a-94b1b55ce17e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][322]= {
                'title': "Naming and describing Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-92d9069e-503f-e98a-cca1-52ea1839ea22'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Naming and describing Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][323]= {
                'title': "Required inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4d9113cc-7822-3beb-8b6e-b7abd9ce4bbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Required inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][324]= {
                'title': "Sensitive inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2dac2a91-8513-bf04-2b2a-7a76f593bdf4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Sensitive inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][325]= {
                'title': "Using Env Vars as input values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-871a4886-f98f-e929-ddd2-c25fa99f9e8d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Using Env Vars as input values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][326]= {
                'title': "Grouping inputs together",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-1442399b-ebb3-54df-92a6-07134b6656a2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Grouping inputs together"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][327]= {
                'title': "Accepting a list of values for inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-679bbe60-796d-b0f3-b179-d90cd4c5bb27'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Accepting a list of values for inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][322]= {
                'title': "Naming and describing Step inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-92d9069e-503f-e98a-cca1-52ea1839ea22'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Naming and describing Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][323]= {
                'title': "Required inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4d9113cc-7822-3beb-8b6e-b7abd9ce4bbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Required inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][324]= {
                'title': "Sensitive inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2dac2a91-8513-bf04-2b2a-7a76f593bdf4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Sensitive inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][325]= {
                'title': "Using Env Vars as input values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-871a4886-f98f-e929-ddd2-c25fa99f9e8d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Using Env Vars as input values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][326]= {
                'title': "Grouping inputs together",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-1442399b-ebb3-54df-92a6-07134b6656a2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Grouping inputs together"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][327]= {
                'title': "Accepting a list of values for inputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-679bbe60-796d-b0f3-b179-d90cd4c5bb27'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Accepting a list of values for inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][328]= {
                'title': "Step outputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-66cf5a8a-bd22-9a9d-2bd8-3c69823f2bcf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][329]= {
                'title': "Step output keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-109f8f75-b9f0-11b4-da4a-c61d514fbb26'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Step output keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][330]= {
                'title': "Naming and describing Step outputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-6ab48cf6-d6cc-0c6f-715f-8db1a4eade9d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Naming and describing Step outputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][331]= {
                'title': "Outputs with list of values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-0037185b-ce5e-e050-a8f3-827bbe0eed2f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Outputs with list of values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][329]= {
                'title': "Step output keys and values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-109f8f75-b9f0-11b4-da4a-c61d514fbb26'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Step output keys and values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][330]= {
                'title': "Naming and describing Step outputs",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-6ab48cf6-d6cc-0c6f-715f-8db1a4eade9d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Naming and describing Step outputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][331]= {
                'title': "Outputs with list of values",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-0037185b-ce5e-e050-a8f3-827bbe0eed2f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Outputs with list of values"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][332]= {
                'title': "Setting conditions for running the Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f4da0ade-fbdc-7eca-dffe-71bcd2ee112d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Setting conditions for running the Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][333]= {
                'title': "Submodules and Step dependencies",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c4e84c50-a008-2f48-92b6-b43eed8ff992'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][334]= {
                'title': "Accessing files in the Step repo with an Env Var",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-dfee884d-b42c-9acd-77b5-9075145e78ab'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies \/ Accessing files in the Step repo with an Env Var"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][334]= {
                'title': "Accessing files in the Step repo with an Env Var",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-dfee884d-b42c-9acd-77b5-9075145e78ab'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies \/ Accessing files in the Step repo with an Env Var"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][335]= {
                'title': "Adding a Step icon",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-23ea572c-f450-e6d2-2daa-19ce92b60cf5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Adding a Step icon"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][336]= {
                'title': "Sharing Steps with all Bitrise users",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][337]= {
                'title': "Sharing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-7efc6453-8dca-4c34-4199-fa8438f32718'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][338]= {
                'title': "Before you start",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-5625e823-f949-436f-46df-4ab065c0deef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Before you start"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][339]= {
                'title': "Sharing with the bitrise share command",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2bc42c9a-5827-9821-35fb-0cffa5c9bb57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the bitrise share command"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][340]= {
                'title': "Sharing with the share-this-step Workflow",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27b97c61-4e9d-40a8-c541-9f047e70b277'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the share-this-step Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][341]= {
                'title': "Fixing issues in a StepLib pull request",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27875dbb-7d14-e0d7-8d07-0635010e8be0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Fixing issues in a StepLib pull request"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][342]= {
                'title': "Abandoned Steps",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-e39b4ac9-b857-3ed0-3eac-0726e4c8008a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Abandoned Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][343]= {
                'title': "Reporting Step issues",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2f191e2a-26e1-a0d1-8db3-c576942457eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Reporting Step issues"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][337]= {
                'title': "Sharing a new Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-7efc6453-8dca-4c34-4199-fa8438f32718'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][338]= {
                'title': "Before you start",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-5625e823-f949-436f-46df-4ab065c0deef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Before you start"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][339]= {
                'title': "Sharing with the bitrise share command",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2bc42c9a-5827-9821-35fb-0cffa5c9bb57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the bitrise share command"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][340]= {
                'title': "Sharing with the share-this-step Workflow",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27b97c61-4e9d-40a8-c541-9f047e70b277'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the share-this-step Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][341]= {
                'title': "Fixing issues in a StepLib pull request",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27875dbb-7d14-e0d7-8d07-0635010e8be0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Fixing issues in a StepLib pull request"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][338]= {
                'title': "Before you start",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-5625e823-f949-436f-46df-4ab065c0deef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Before you start"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][339]= {
                'title': "Sharing with the bitrise share command",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2bc42c9a-5827-9821-35fb-0cffa5c9bb57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the bitrise share command"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][340]= {
                'title': "Sharing with the share-this-step Workflow",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27b97c61-4e9d-40a8-c541-9f047e70b277'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the share-this-step Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][341]= {
                'title': "Fixing issues in a StepLib pull request",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27875dbb-7d14-e0d7-8d07-0635010e8be0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Fixing issues in a StepLib pull request"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][342]= {
                'title': "Abandoned Steps",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-e39b4ac9-b857-3ed0-3eac-0726e4c8008a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Abandoned Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][343]= {
                'title': "Reporting Step issues",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2f191e2a-26e1-a0d1-8db3-c576942457eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Reporting Step issues"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][344]= {
                'title': "Verified Steps",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][345]= {
                'title': "What are Verified Steps?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-2836eb78-458a-fafb-575a-74f0d8cd48a0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][346]= {
                'title': "What is a Workflow Recipe?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-51f552c1-7b73-1cd6-9136-4269c401e3a8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ What is a Workflow Recipe?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][347]= {
                'title': "Promoting your Verified Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-d2cc5184-0a76-bd3c-ba6d-42022522a256'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ Promoting your Verified Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][348]= {
                'title': "Applying for a Verified badge",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-1c235c2c-0c86-741f-c100-1a37e7a56e97'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Applying for a Verified badge"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][349]= {
                'title': "Service level agreement for Verified Step authors",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-6fbb5ed7-26eb-e34d-2f1b-0fb51645e41f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Service level agreement for Verified Step authors"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][350]= {
                'title': "Managing contributions",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-14c6299b-4e97-269b-d598-415ce6e55e30'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Managing contributions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][351]= {
                'title': "How do we go about Step duplications?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-29f1569c-183a-4a7a-d7aa-2142a55b0023'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ How do we go about Step duplications?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][345]= {
                'title': "What are Verified Steps?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-2836eb78-458a-fafb-575a-74f0d8cd48a0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][346]= {
                'title': "What is a Workflow Recipe?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-51f552c1-7b73-1cd6-9136-4269c401e3a8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ What is a Workflow Recipe?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][347]= {
                'title': "Promoting your Verified Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-d2cc5184-0a76-bd3c-ba6d-42022522a256'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ Promoting your Verified Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][346]= {
                'title': "What is a Workflow Recipe?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-51f552c1-7b73-1cd6-9136-4269c401e3a8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ What is a Workflow Recipe?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][347]= {
                'title': "Promoting your Verified Step",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-d2cc5184-0a76-bd3c-ba6d-42022522a256'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ Promoting your Verified Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][348]= {
                'title': "Applying for a Verified badge",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-1c235c2c-0c86-741f-c100-1a37e7a56e97'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Applying for a Verified badge"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][349]= {
                'title': "Service level agreement for Verified Step authors",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-6fbb5ed7-26eb-e34d-2f1b-0fb51645e41f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Service level agreement for Verified Step authors"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][350]= {
                'title': "Managing contributions",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-14c6299b-4e97-269b-d598-415ce6e55e30'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Managing contributions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][351]= {
                'title': "How do we go about Step duplications?",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-29f1569c-183a-4a7a-d7aa-2142a55b0023'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ How do we go about Step duplications?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][352]= {
                'title': "Creating your own Bitrise project scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][353]= {
                'title': "Options",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-91766f7b-bff0-4669-a51d-7f989b056382'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][354]= {
                'title': "The option model",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-bbcb6d3a-2cfb-863a-f6c1-25d6a34044e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options \/ The option model"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][355]= {
                'title': "Scanners",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-57e2af54-c962-a5b4-dbde-f39267b96541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][356]= {
                'title': "Testing a scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-5b91d715-95c4-e2cf-6510-e41971f7d254'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Testing a scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][357]= {
                'title': "Submitting your own scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-64d1a8e9-8c1c-f7e5-7732-a472ed576b35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Submitting your own scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][353]= {
                'title': "Options",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-91766f7b-bff0-4669-a51d-7f989b056382'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][354]= {
                'title': "The option model",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-bbcb6d3a-2cfb-863a-f6c1-25d6a34044e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options \/ The option model"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][354]= {
                'title': "The option model",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-bbcb6d3a-2cfb-863a-f6c1-25d6a34044e5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options \/ The option model"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][355]= {
                'title': "Scanners",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-57e2af54-c962-a5b4-dbde-f39267b96541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][356]= {
                'title': "Testing a scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-5b91d715-95c4-e2cf-6510-e41971f7d254'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Testing a scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][357]= {
                'title': "Submitting your own scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-64d1a8e9-8c1c-f7e5-7732-a472ed576b35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Submitting your own scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][356]= {
                'title': "Testing a scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-5b91d715-95c4-e2cf-6510-e41971f7d254'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Testing a scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][357]= {
                'title': "Submitting your own scanner",
                'href': 'UUID-45277652-008d-152c-9e3a-00e80a3005be.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-64d1a8e9-8c1c-f7e5-7732-a472ed576b35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Submitting your own scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][358]= {
                'title': "Workflows",
                'href': 'UUID-86305538-9683-ba62-60cf-d98ccc4f3255.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][359]= {
                'title': "Default Workflows",
                'href': 'UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][360]= {
                'title': "The primary Workflow",
                'href': 'UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03.html#UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03_UUID-96432d58-8b9c-a9f0-e895-55dc4e00bc6f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows \/ The primary Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][361]= {
                'title': "The deploy Workflow",
                'href': 'UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03.html#UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03_UUID-c5adfeb2-3539-38ab-8fd8-f02c89622ee5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows \/ The deploy Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][360]= {
                'title': "The primary Workflow",
                'href': 'UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03.html#UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03_UUID-96432d58-8b9c-a9f0-e895-55dc4e00bc6f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows \/ The primary Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][361]= {
                'title': "The deploy Workflow",
                'href': 'UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03.html#UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03_UUID-c5adfeb2-3539-38ab-8fd8-f02c89622ee5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows \/ The deploy Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][362]= {
                'title': "Creating a Workflow",
                'href': 'UUID-4053e094-d35f-04b9-2ddc-82c470cbe0f6.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Creating a Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][363]= {
                'title': "Managing Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][364]= {
                'title': "The Workflows & Pipelines screen",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-aa2f38b7-60f1-a5be-4a81-b3afb4da5fd4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ The Workflows & Pipelines screen"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][365]= {
                'title': "Chaining Workflows together",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-a0a271e9-0101-a169-d144-5e7a53dfa385'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Chaining Workflows together"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][366]= {
                'title': "Rearranging chained Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-bbdcb4e9-bc1a-874b-21a2-7459acb27500'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Rearranging chained Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][367]= {
                'title': "Renaming Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-b57ec426-29d3-fe6a-f7eb-739b4f6808ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Renaming Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][368]= {
                'title': "Utility Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-9f190192-e074-a377-e396-d71d959d6846'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Utility Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][364]= {
                'title': "The Workflows & Pipelines screen",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-aa2f38b7-60f1-a5be-4a81-b3afb4da5fd4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ The Workflows & Pipelines screen"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][365]= {
                'title': "Chaining Workflows together",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-a0a271e9-0101-a169-d144-5e7a53dfa385'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Chaining Workflows together"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][366]= {
                'title': "Rearranging chained Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-bbdcb4e9-bc1a-874b-21a2-7459acb27500'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Rearranging chained Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][367]= {
                'title': "Renaming Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-b57ec426-29d3-fe6a-f7eb-739b4f6808ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Renaming Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][368]= {
                'title': "Utility Workflows",
                'href': 'UUID-23564ae8-b234-0635-694e-7272b31f5ab4.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-9f190192-e074-a377-e396-d71d959d6846'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Utility Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][369]= {
                'title': "Copying Workflows from one app to another",
                'href': 'UUID-72c92b04-4c0e-fde0-26ab-122240ad1021.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Copying Workflows from one app to another"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][370]= {
                'title': "Builds",
                'href': 'UUID-40454aa8-e0ff-ee45-7f68-d733d663b05d.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][371]= {
                'title': "Configuring build settings",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][372]= {
                'title': "Setting the stack for your builds",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][373]= {
                'title': "Setting the stack in the Workflow Editor",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-94ae865c-3fd1-947c-4b54-1aab37dad407'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][374]= {
                'title': "Setting the default stack",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4580943577860832734059802663'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting the default stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][375]= {
                'title': "Setting a Workflow-specific stack",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4593021546291232734065906478'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting a Workflow-specific stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][376]= {
                'title': "Setting the machine type in the Workflow Editor",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4653433404926433254723648909'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting the machine type in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][377]= {
                'title': "Setting the stack in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-ccc85826-bef3-db23-2cb2-1341121a23cf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][378]= {
                'title': "Setting the default stack in the bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4580943102257632734094894175'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting the default stack in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][379]= {
                'title': "Setting Workflow-specific stacks in the bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4605033024774432734095252448'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting Workflow-specific stacks in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][380]= {
                'title': "Setting the machine type in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4628123246222432891924230327'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting the machine type in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][381]= {
                'title': "Build machine types",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-9b699662-b081-1049-24a7-dfee5c6c0f56'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Build machine types"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][382]= {
                'title': "Managing an app's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][383]= {
                'title': "Storing the bitrise.yml file in your repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-f18689c6-db62-6c36-6c27-5e43b8617b57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing the bitrise.yml file in your repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][384]= {
                'title': "Updating a bitrise.yml stored in the repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-193d5dd1-fafb-4992-dc62-a78498f077f3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Updating a bitrise.yml stored in the repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][385]= {
                'title': "Storing a bitrise.yml file on multiple branches in the repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-ff1f2978-919e-d83d-0b3a-ff508e86af1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing a bitrise.yml file on multiple branches in the repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][386]= {
                'title': "Moving the bitrise.yml file back to bitrise.io",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-831e325f-ef03-5273-efc8-71614fea286c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Moving the bitrise.yml file back to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][387]= {
                'title': "Editing the app's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][388]= {
                'title': "Editing the bitrise.yml file online",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-5a8a5778-2583-3270-a1bb-52af7b023f0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file online"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][389]= {
                'title': "Editing the bitrise.yml file locally",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-d0674540-e7cf-2ce0-8f59-569fc6704400'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file locally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][390]= {
                'title': "Accessing a build's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][391]= {
                'title': "Checking changes in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-54cdbcb3-6b6f-34fe-fba2-b0bfaf593317'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Checking changes in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][392]= {
                'title': "Restoring the current bitrise.yml to the build's bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-1ae5b6ec-f0d2-087f-e762-89e7672cceca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Restoring the current bitrise.yml to the build's bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][393]= {
                'title': "Deleting a build's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-e9b998ef-f6c1-4126-67b2-dd246fa78c6a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Deleting a build's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][394]= {
                'title': "Selective builds",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-c05627e7-6c71-b265-3d09-a95f3b3abc9a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Selective builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][395]= {
                'title': "Using patterns in the file name or file path",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-c05627e7-6c71-b265-3d09-a95f3b3abc9a_section-idm4614490316227232684115958513'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Selective builds \/ Using patterns in the file name or file path"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][396]= {
                'title': "Rolling builds",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-52681a2a-c690-3def-28cd-16823ba9eb01'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Rolling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][397]= {
                'title': "Configuring email notifications",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][398]= {
                'title': "Watching an app",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-9b9a2396-436a-5e52-3f2f-4b49142e6a37'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Watching an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][399]= {
                'title': "Changing your email notification settings",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-f51180b1-c8de-7feb-e020-0b6e790debd5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Changing your email notification settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][400]= {
                'title': "Sending emails with a Step",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-026b92b1-7a65-94f8-73b6-449dad27bbc0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Sending emails with a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][401]= {
                'title': "Configuring Slack integration",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-58499b8a-d97e-d8f7-6645-4e52ddee3faf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring Slack integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][402]= {
                'title': "Setting your Git credentials on build machines",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][403]= {
                'title': "Setting your Git credentials using Env Vars",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0_section-idm4565951027516833104262887165'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines \/ Setting your Git credentials using Env Vars"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][404]= {
                'title': "Setting your Git credentials using the Set Git Credentials Step",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0_section-idm4506585174268833104257980738'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines \/ Setting your Git credentials using the Set Git Credentials Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][405]= {
                'title': "Reporting the build status to your Git hosting provider",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][406]= {
                'title': "Configuring build status reporting",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-9a12843a-b48f-79ff-c1c4-3242c86bf956'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Configuring build status reporting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][407]= {
                'title': "Troubleshooting build status reporting",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-22d09dbd-17f2-8b88-a0ce-635f319e8a5d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][408]= {
                'title': "Checking the service credential user",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_section-idm4550372233275232741427170999'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting \/ Checking the service credential user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][409]= {
                'title': "Checking repository permissions and repository URL",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_section-idm4538149060897632741465458851'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting \/ Checking repository permissions and repository URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][410]= {
                'title': "Starting builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][411]= {
                'title': "Starting builds manually",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][412]= {
                'title': "Running Workflows from the Workflow Editor",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-6865e276-3a2a-ff96-b049-3f1063e60402'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Running Workflows from the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][413]= {
                'title': "Advanced configuration options for starting\/scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-b8758d13-9796-ea59-15cd-0ba401687e85'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Advanced configuration options for starting\/scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][414]= {
                'title': "Triggering builds automatically",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][415]= {
                'title': "Code push triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-e799e486-18e8-bafc-d19e-5a36948a6a8f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Code push triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][416]= {
                'title': "Creating triggers for code pushes",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-69aedf84-b843-61fd-ce0f-54eb507d75e1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for code pushes"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][417]= {
                'title': "Pull request triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-d3f062fe-3fa3-6c84-2be7-82bc099ab43e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Pull request triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][418]= {
                'title': "Creating triggers for pull requests",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-09bca131-d5e6-b053-9825-05705bf527b4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for pull requests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][419]= {
                'title': "Triggering builds from draft PRs",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-1413d428-5caf-f162-139d-99d05f85e235'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][420]= {
                'title': "Disabling builds from a draft PR",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2e687aad-851b-a301-a1c1-e15515d1051c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Disabling builds from a draft PR"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][421]= {
                'title': "Build trigger behavior for draft PRs",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-6d1aaadd-62ca-4d11-16d4-2772e29d2cad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Build trigger behavior for draft PRs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][422]= {
                'title': "Git tag triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2614cf91-cdbe-71e2-d30a-9fbae171f417'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Git tag triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][423]= {
                'title': "Creating Git tag triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-ac26b697-371f-e32c-fdba-44387a0e096c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating Git tag triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][424]= {
                'title': "Deactivating a trigger",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-20b3f462-a978-c410-cda6-0de65ebde16e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Deactivating a trigger"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][425]= {
                'title': "Supported trigger conditions",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-0af36679-546e-1625-8b6f-5127672c2fbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Supported trigger conditions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][426]= {
                'title': "Scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][427]= {
                'title': "Scheduling a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8400a2f-db75-086b-5656-522d20aa2de2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][428]= {
                'title': "Advanced configuration options for starting\/scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8758d13-9796-ea59-15cd-0ba401687e85'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build \/ Advanced configuration options for starting\/scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][429]= {
                'title': "Editing a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-805cb98b-cc3c-71a4-3a57-394a4b9e3d5e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Editing a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][430]= {
                'title': "Triggering a scheduled build manually",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-7602344a-745f-4042-f6fe-d2ac81845b09'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Triggering a scheduled build manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][431]= {
                'title': "Disabling a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-df1d6007-3779-7e8a-2632-3ec3c17720f0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Disabling a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][432]= {
                'title': "Deleting a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-33bd5d3e-6e96-79f2-23ac-f154abfdefa6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Deleting a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][433]= {
                'title': "Approving pull request builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][434]= {
                'title': "Enabling manual approval for private apps",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51_section-idm4547044698948832682449864885'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds \/ Enabling manual approval for private apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][435]= {
                'title': "Approving the PR build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51_section-idm4547044772032032682451758727'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds \/ Approving the PR build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][436]= {
                'title': "Build triggers in the bitrise.yml file",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][437]= {
                'title': "Overview of the trigger map",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-1d751de7-c085-249f-fdf1-6da5531a0db4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][438]= {
                'title': "Multiple trigger conditions",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm4558546790192034265470684683'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Multiple trigger conditions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][439]= {
                'title': "Order of triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm464375685687683426547126878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Order of triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][440]= {
                'title': "Wildcards and regex",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm46327760897120342656217268'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Wildcards and regex"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][441]= {
                'title': "Components of the trigger map",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-d843227c-7a3f-9fb2-cef6-25935e42e7d1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Components of the trigger map"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][442]= {
                'title': "Starting parallel builds with a single trigger",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-f4296931-bc9d-3b67-263a-e0df6f174346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting parallel builds with a single trigger"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][443]= {
                'title': "bitrise.yml example",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-f4296931-bc9d-3b67-263a-e0df6f174346_section-idm4542014264953632888099751584'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting parallel builds with a single trigger \/ bitrise.yml example"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][444]= {
                'title': "Skipping a given commit or pull request",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][445]= {
                'title': "Preventing a commit from triggering a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-b4e139aa-5726-9d3c-9aea-74b2246d07ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a commit from triggering a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][446]= {
                'title': "Preventing a pull request from triggering a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-be55b1ff-cb24-290c-5f7f-b216cc81252b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a pull request from triggering a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][447]= {
                'title': "Skipping Steps triggered by a draft PR",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-0ab1409f-acd6-7602-d475-d0792e5652fd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Skipping Steps triggered by a draft PR"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][448]= {
                'title': "Caching",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][449]= {
                'title': "Using branch-based caching in your builds",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][450]= {
                'title': "Including files and folders in the build cache",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-b7360b76-0a5a-344f-26d9-98f29db588c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Including files and folders in the build cache"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][451]= {
                'title': "Ignoring files and dependencies",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-bce3abec-99e7-d41d-9aca-22efd1b0483b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Ignoring files and dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][452]= {
                'title': "Downloading or deleting the build cache",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-91a38a89-737c-2254-f64d-7d52719ca6d7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Downloading or deleting the build cache"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][453]= {
                'title': "Caching Cocoapods",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-ab15d7d2-5e0c-338c-c2b5-7abdc2ed286b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Cocoapods"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][454]= {
                'title': "Caching Gradle",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-04e246f3-5281-c2da-ab1e-9f7944a5a26e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Gradle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][455]= {
                'title': "Caching Maven",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-f3fe2704-5548-f763-bdbd-fdca3b8da541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Maven"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][456]= {
                'title': "Caching Ruby Gems",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-b08f1173-8642-6a9f-d0ec-1f9b12a8be53'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Ruby Gems"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][457]= {
                'title': "Caching Homebrew installers",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-b2f04e5b-33bc-c36d-c8ff-f3172de99036'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Homebrew installers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][458]= {
                'title': "Managing build files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][459]= {
                'title': "Uploading files for your builds",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-058726e8-43e1-0385-f4b7-e2fff934ba79'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Uploading files for your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][460]= {
                'title': "Protecting your uploaded files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-058726e8-43e1-0385-f4b7-e2fff934ba79_UUID-75c7d964-dcb3-2fa1-4d32-0654f62a10c6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Uploading files for your builds \/ Protecting your uploaded files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][461]= {
                'title': "Using files in your builds",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][462]= {
                'title': "Downloading a file using the File Downloader Step",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-2cccdfb2-6110-0be0-6213-aa164992cf0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using the File Downloader Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][463]= {
                'title': "Downloading a file using a custom Script Step",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-601b8a95-62e1-81d5-2adf-b4c2f7c3d322'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using a custom Script Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][464]= {
                'title': "Using encrypted files in your builds",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][465]= {
                'title': "Encrypting your files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-bba06fe4-0474-7603-2e35-1aec9d3ec3da'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Encrypting your files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][466]= {
                'title': "Decrypting and downloading your files during a build",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-8c3ba22d-9c48-c06b-871c-dfe1073bf7c0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Decrypting and downloading your files during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][467]= {
                'title': "Build artifacts online",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][468]= {
                'title': "The Installable artifacts page",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-153c2951-4814-54bc-a62d-9e2d9c3d2e17'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ The Installable artifacts page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][469]= {
                'title': "Artifact details",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-15d39488-4b51-4bb0-23f5-1afbbe64e495'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Artifact details"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][470]= {
                'title': "Deploying files into artifacts",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-7d63929f-7881-a511-91a1-8b083464bbe9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][471]= {
                'title': "Modifying the target directory path",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4622780843736032682795432982'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Modifying the target directory path"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][472]= {
                'title': "Viewing artifacts if your build has failed",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4613160004728032682795873028'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Viewing artifacts if your build has failed"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][473]= {
                'title': "Who can access build artifacts?",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4547044699468832682797369787'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Who can access build artifacts?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][474]= {
                'title': "Environment Variables",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][475]= {
                'title': "Scope of Environment Variables",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-242640ff-b367-8f57-9f71-e08cfdd411a8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Scope of Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][476]= {
                'title': "Availability order of Environment Variables",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-fb57592b-1c18-21bc-5c7f-02f90db99bd4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Availability order of Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][477]= {
                'title': "Setting an Env Var in the Workflow Editor",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-b28b5990-c71c-1a57-a93b-4bbc290ce0c9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting an Env Var in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][478]= {
                'title': "Setting a custom Env Var when starting a build",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-02ce6978-f4f3-f77e-10cd-c832fb3d5d0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting a custom Env Var when starting a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][479]= {
                'title': "Using an Env Var in a Step input",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-5acbbc81-a58d-fdc8-6bf7-c4f26bd81e96'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Using an Env Var in a Step input"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][480]= {
                'title': "Using Env Vars in the value of an Env Var",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-0f2f0f24-d759-0f07-2de3-e3aed7504c88'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Using Env Vars in the value of an Env Var"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][481]= {
                'title': "Setting and managing Env Vars during a build",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-209f8c82-dd8c-b622-2411-df8f4a1438b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting and managing Env Vars during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][482]= {
                'title': "Setting Env Vars in the bitrise.yml",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-687ba423-cc2f-f036-ab67-c3b394d3a275'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting Env Vars in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][483]= {
                'title': "Secrets",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][484]= {
                'title': "Setting a Secret",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-8c8c168c-fedb-b485-0ac8-a5229096a462'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Setting a Secret"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][485]= {
                'title': "Editing an existing Secret",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-af2856a9-70de-38be-f4cd-7346a4e55f75'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Editing an existing Secret"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][486]= {
                'title': "Protecting the value of a Secret",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-df82ce8a-a1d2-debf-a92a-8ac55ea86e65'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Protecting the value of a Secret"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][487]= {
                'title': "Exposing a Secret to pull requests",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-bbf7e25a-8a1c-3e35-c659-6525d37f243a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Exposing a Secret to pull requests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][488]= {
                'title': "Managing Secrets across multiple apps",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-55e08c3d-6cbe-b65d-2884-e5835c2a01f7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][489]= {
                'title': "Managing Secrets on a Workspace level",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_section-idm4572725706596834329392948656'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps \/ Managing Secrets on a Workspace level"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][490]= {
                'title': "Managing Secrets from a central vault or database",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_section-idm4575482969265634329393418761'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps \/ Managing Secrets from a central vault or database"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][491]= {
                'title': "Redacting Secrets",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-67710377-6824-244e-5120-83002048d81f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Redacting Secrets"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][492]= {
                'title': "Build statuses",
                'href': 'UUID-a2d504d0-aa72-895e-5ec6-998fbbe323da.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build statuses"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][493]= {
                'title': "Installing tools during a build",
                'href': 'UUID-4b5b1437-c4e5-7367-e994-b5738e643e14.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Installing tools during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][494]= {
                'title': "Installing tools by declaring deps in the bitrise.yml file",
                'href': 'UUID-4b5b1437-c4e5-7367-e994-b5738e643e14.html#UUID-4b5b1437-c4e5-7367-e994-b5738e643e14_UUID-534094e9-0f67-eccc-04c6-09191a046a3d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Installing tools during a build \/ Installing tools by declaring deps in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][495]= {
                'title': "Connecting to a VPN during a build",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][496]= {
                'title': "Accessing a repository via VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-5e36de21-1e1d-9f03-af95-c8836a683a88'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Accessing a repository via VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][497]= {
                'title': "Example VPN configurations",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-c4fe8f5b-cae7-fdc2-ef68-8edf9fe6fe0b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][498]= {
                'title': "Using the Connect to OpenVPN Server Step",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-c06c8ec2-9381-610c-6fed-aa196a13c81e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using the Connect to OpenVPN Server Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][499]= {
                'title': "Using Strongswan VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-0735a420-25a9-490f-306b-a638dc966e3e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Strongswan VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][500]= {
                'title': "Using Cisco VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-8540fef2-571e-8024-d44a-9c2ed8a5ec1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Cisco VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][501]= {
                'title': "Finding a specific build",
                'href': 'UUID-0873b810-755d-fc96-7bc7-c3c5abaeb537.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Finding a specific build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][502]= {
                'title': "Build numbering and app versioning",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][503]= {
                'title': "Adding the SSH key to the machine user",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-e7127b05-9959-b784-e8b4-54a6b1cacf53'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Adding the SSH key to the machine user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][504]= {
                'title': "Setting up app versioning automatically on Bitrise",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-6f3ae55b-9830-4c0a-1bff-400c53fda24b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][505]= {
                'title': "Setting the versionCode and the versionName of an Android app",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_section-idm4622781190830432682700216106'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise \/ Setting the versionCode and the versionName of an Android app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][506]= {
                'title': "Setting the CFBundleVersion and CFBundleShortVersionString of an iOS app",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_section-idm4614490364926432682706069415'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise \/ Setting the CFBundleVersion and CFBundleShortVersionString of an iOS app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][507]= {
                'title': "Offsetting the build version",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-736d38e1-185a-75cf-876f-98b0a2bae002'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Offsetting the build version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][508]= {
                'title': "Build data and troubleshooting",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][509]= {
                'title': "Build logs",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][510]= {
                'title': "Finding a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-48939df0-e086-ebcd-d395-837408311aae'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Finding a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][511]= {
                'title': "The build log page",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-c9ae937b-1251-94a9-4963-62a9985f9f4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ The build log page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][512]= {
                'title': "Following a build log live",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-83fa8c2c-adb7-3053-73ef-0496563e8557'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Following a build log live"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][513]= {
                'title': "Downloading a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-beba418a-86b4-8c24-1c44-ad71975d8054'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Downloading a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][514]= {
                'title': "Deleting a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-e00c64c7-7d2c-11ca-4a92-f92ea218e29d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Deleting a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][515]= {
                'title': "Remote access",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][516]= {
                'title': "Remote access with SSH",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-9806640d-bbfe-5c15-42ff-9e1823127dc3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with SSH"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][517]= {
                'title': "Remote access with screenshare",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-abd419ef-c81a-c262-0b74-b323fd352f49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with screenshare"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][518]= {
                'title': "Finding your files on the VM",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-60ad9f5a-5f27-9140-c586-3f89711dd777'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Finding your files on the VM"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][519]= {
                'title': "Extending the availability of remote access",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-5215251f-27dd-9dce-d75a-a308c0ffe483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Extending the availability of remote access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][520]= {
                'title': "Debugging your build on your own machine",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][521]= {
                'title': "Testing with a full clean git clone",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-48c6d4cb-5a12-dda3-1ec2-c96eecf03955'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with a full clean git clone"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][522]= {
                'title': "Testing with the Bitrise CLI",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-62571106-3053-58d0-5a03-c6c96dc34432'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with the Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][523]= {
                'title': "GitHub Checks with the Bitrise GitHub App",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][524]= {
                'title': "Installing Bitrise Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-2b571156-f9c6-c80c-cba6-f739bc508abb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Installing Bitrise Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][525]= {
                'title': "Enabling GitHub Checks on Bitrise",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-48573566-af19-901b-b099-d508faa5f4df'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Enabling GitHub Checks on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][526]= {
                'title': "Can't enable GitHub Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_section-idm4666788075920032682769339037'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Enabling GitHub Checks on Bitrise \/ Can't enable GitHub Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][527]= {
                'title': "Switching to Bitrise Checks from previous CI checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-bac16870-e3db-121c-f569-1f954bf0e1c5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Switching to Bitrise Checks from previous CI checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][528]= {
                'title': "Disabling GitHub Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-ddaa1c9c-54be-24b2-0b5a-a2bb1db09225'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Disabling GitHub Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][529]= {
                'title': "GitHub Checks test summary",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-7fbe15ca-9a70-6578-9d92-3188b3616c81'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][530]= {
                'title': "Step by Step error report",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-748b9398-ea2b-fb99-acac-950ba256a2b2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Step by Step error report"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][531]= {
                'title': "Checking the test results of a failed Step",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-f9efeae9-f090-9691-f697-c3aad1d71642'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Checking the test results of a failed Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][532]= {
                'title': "Re-running a build using GitHub checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-470cac57-a1b6-96ac-8d12-a1e551b61786'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Re-running a build using GitHub checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][533]= {
                'title': "Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-26aea079-d355-6b12-74ac-d92209f4b91d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][534]= {
                'title': "Integrating Meercode with Bitrise",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][535]= {
                'title': "Enabling the add-on as an admin",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-0aa15cb6-8411-a9d8-6cb0-27e3cd5c7a49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Enabling the add-on as an admin"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][536]= {
                'title': "Authorizing the add-on as a user",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-8192dcfd-2723-4f68-c790-251e4d998bd2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Authorizing the add-on as a user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][537]= {
                'title': "Revoking authorization on Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-c16a3fc1-bc27-4170-188c-5bad2f00925b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Revoking authorization on Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][538]= {
                'title': "Disabling Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-625d6a3e-e830-ba77-0336-6637ff8a6a58'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Disabling Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][539]= {
                'title': "Accessing build data and insights with Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-692f92e7-a1e6-3e47-4bf2-161c711554b2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Accessing build data and insights with Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][371]= {
                'title': "Configuring build settings",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][372]= {
                'title': "Setting the stack for your builds",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][373]= {
                'title': "Setting the stack in the Workflow Editor",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-94ae865c-3fd1-947c-4b54-1aab37dad407'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][374]= {
                'title': "Setting the default stack",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4580943577860832734059802663'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting the default stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][375]= {
                'title': "Setting a Workflow-specific stack",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4593021546291232734065906478'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting a Workflow-specific stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][376]= {
                'title': "Setting the machine type in the Workflow Editor",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4653433404926433254723648909'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting the machine type in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][377]= {
                'title': "Setting the stack in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-ccc85826-bef3-db23-2cb2-1341121a23cf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][378]= {
                'title': "Setting the default stack in the bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4580943102257632734094894175'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting the default stack in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][379]= {
                'title': "Setting Workflow-specific stacks in the bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4605033024774432734095252448'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting Workflow-specific stacks in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][380]= {
                'title': "Setting the machine type in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4628123246222432891924230327'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting the machine type in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][381]= {
                'title': "Build machine types",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-9b699662-b081-1049-24a7-dfee5c6c0f56'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Build machine types"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][382]= {
                'title': "Managing an app's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][383]= {
                'title': "Storing the bitrise.yml file in your repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-f18689c6-db62-6c36-6c27-5e43b8617b57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing the bitrise.yml file in your repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][384]= {
                'title': "Updating a bitrise.yml stored in the repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-193d5dd1-fafb-4992-dc62-a78498f077f3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Updating a bitrise.yml stored in the repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][385]= {
                'title': "Storing a bitrise.yml file on multiple branches in the repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-ff1f2978-919e-d83d-0b3a-ff508e86af1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing a bitrise.yml file on multiple branches in the repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][386]= {
                'title': "Moving the bitrise.yml file back to bitrise.io",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-831e325f-ef03-5273-efc8-71614fea286c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Moving the bitrise.yml file back to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][387]= {
                'title': "Editing the app's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][388]= {
                'title': "Editing the bitrise.yml file online",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-5a8a5778-2583-3270-a1bb-52af7b023f0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file online"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][389]= {
                'title': "Editing the bitrise.yml file locally",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-d0674540-e7cf-2ce0-8f59-569fc6704400'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file locally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][390]= {
                'title': "Accessing a build's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][391]= {
                'title': "Checking changes in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-54cdbcb3-6b6f-34fe-fba2-b0bfaf593317'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Checking changes in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][392]= {
                'title': "Restoring the current bitrise.yml to the build's bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-1ae5b6ec-f0d2-087f-e762-89e7672cceca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Restoring the current bitrise.yml to the build's bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][393]= {
                'title': "Deleting a build's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-e9b998ef-f6c1-4126-67b2-dd246fa78c6a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Deleting a build's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][394]= {
                'title': "Selective builds",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-c05627e7-6c71-b265-3d09-a95f3b3abc9a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Selective builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][395]= {
                'title': "Using patterns in the file name or file path",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-c05627e7-6c71-b265-3d09-a95f3b3abc9a_section-idm4614490316227232684115958513'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Selective builds \/ Using patterns in the file name or file path"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][396]= {
                'title': "Rolling builds",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-52681a2a-c690-3def-28cd-16823ba9eb01'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Rolling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][397]= {
                'title': "Configuring email notifications",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][398]= {
                'title': "Watching an app",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-9b9a2396-436a-5e52-3f2f-4b49142e6a37'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Watching an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][399]= {
                'title': "Changing your email notification settings",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-f51180b1-c8de-7feb-e020-0b6e790debd5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Changing your email notification settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][400]= {
                'title': "Sending emails with a Step",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-026b92b1-7a65-94f8-73b6-449dad27bbc0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Sending emails with a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][401]= {
                'title': "Configuring Slack integration",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-58499b8a-d97e-d8f7-6645-4e52ddee3faf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring Slack integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][402]= {
                'title': "Setting your Git credentials on build machines",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][403]= {
                'title': "Setting your Git credentials using Env Vars",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0_section-idm4565951027516833104262887165'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines \/ Setting your Git credentials using Env Vars"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][404]= {
                'title': "Setting your Git credentials using the Set Git Credentials Step",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0_section-idm4506585174268833104257980738'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines \/ Setting your Git credentials using the Set Git Credentials Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][405]= {
                'title': "Reporting the build status to your Git hosting provider",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][406]= {
                'title': "Configuring build status reporting",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-9a12843a-b48f-79ff-c1c4-3242c86bf956'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Configuring build status reporting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][407]= {
                'title': "Troubleshooting build status reporting",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-22d09dbd-17f2-8b88-a0ce-635f319e8a5d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][408]= {
                'title': "Checking the service credential user",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_section-idm4550372233275232741427170999'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting \/ Checking the service credential user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][409]= {
                'title': "Checking repository permissions and repository URL",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_section-idm4538149060897632741465458851'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting \/ Checking repository permissions and repository URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][372]= {
                'title': "Setting the stack for your builds",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][373]= {
                'title': "Setting the stack in the Workflow Editor",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-94ae865c-3fd1-947c-4b54-1aab37dad407'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][374]= {
                'title': "Setting the default stack",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4580943577860832734059802663'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting the default stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][375]= {
                'title': "Setting a Workflow-specific stack",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4593021546291232734065906478'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting a Workflow-specific stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][376]= {
                'title': "Setting the machine type in the Workflow Editor",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4653433404926433254723648909'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting the machine type in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][377]= {
                'title': "Setting the stack in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-ccc85826-bef3-db23-2cb2-1341121a23cf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][378]= {
                'title': "Setting the default stack in the bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4580943102257632734094894175'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting the default stack in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][379]= {
                'title': "Setting Workflow-specific stacks in the bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4605033024774432734095252448'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting Workflow-specific stacks in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][380]= {
                'title': "Setting the machine type in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4628123246222432891924230327'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting the machine type in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][381]= {
                'title': "Build machine types",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-9b699662-b081-1049-24a7-dfee5c6c0f56'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Build machine types"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][373]= {
                'title': "Setting the stack in the Workflow Editor",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-94ae865c-3fd1-947c-4b54-1aab37dad407'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][374]= {
                'title': "Setting the default stack",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4580943577860832734059802663'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting the default stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][375]= {
                'title': "Setting a Workflow-specific stack",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4593021546291232734065906478'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting a Workflow-specific stack"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][376]= {
                'title': "Setting the machine type in the Workflow Editor",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4653433404926433254723648909'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor \/ Setting the machine type in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][377]= {
                'title': "Setting the stack in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-ccc85826-bef3-db23-2cb2-1341121a23cf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][378]= {
                'title': "Setting the default stack in the bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4580943102257632734094894175'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting the default stack in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][379]= {
                'title': "Setting Workflow-specific stacks in the bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4605033024774432734095252448'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting Workflow-specific stacks in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][380]= {
                'title': "Setting the machine type in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_section-idm4628123246222432891924230327'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file \/ Setting the machine type in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][381]= {
                'title': "Build machine types",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-9b699662-b081-1049-24a7-dfee5c6c0f56'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Build machine types"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][382]= {
                'title': "Managing an app's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][383]= {
                'title': "Storing the bitrise.yml file in your repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-f18689c6-db62-6c36-6c27-5e43b8617b57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing the bitrise.yml file in your repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][384]= {
                'title': "Updating a bitrise.yml stored in the repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-193d5dd1-fafb-4992-dc62-a78498f077f3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Updating a bitrise.yml stored in the repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][385]= {
                'title': "Storing a bitrise.yml file on multiple branches in the repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-ff1f2978-919e-d83d-0b3a-ff508e86af1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing a bitrise.yml file on multiple branches in the repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][386]= {
                'title': "Moving the bitrise.yml file back to bitrise.io",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-831e325f-ef03-5273-efc8-71614fea286c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Moving the bitrise.yml file back to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][383]= {
                'title': "Storing the bitrise.yml file in your repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-f18689c6-db62-6c36-6c27-5e43b8617b57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing the bitrise.yml file in your repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][384]= {
                'title': "Updating a bitrise.yml stored in the repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-193d5dd1-fafb-4992-dc62-a78498f077f3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Updating a bitrise.yml stored in the repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][385]= {
                'title': "Storing a bitrise.yml file on multiple branches in the repository",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-ff1f2978-919e-d83d-0b3a-ff508e86af1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing a bitrise.yml file on multiple branches in the repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][386]= {
                'title': "Moving the bitrise.yml file back to bitrise.io",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-831e325f-ef03-5273-efc8-71614fea286c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Moving the bitrise.yml file back to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][387]= {
                'title': "Editing the app's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][388]= {
                'title': "Editing the bitrise.yml file online",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-5a8a5778-2583-3270-a1bb-52af7b023f0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file online"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][389]= {
                'title': "Editing the bitrise.yml file locally",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-d0674540-e7cf-2ce0-8f59-569fc6704400'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file locally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][388]= {
                'title': "Editing the bitrise.yml file online",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-5a8a5778-2583-3270-a1bb-52af7b023f0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file online"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][389]= {
                'title': "Editing the bitrise.yml file locally",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-d0674540-e7cf-2ce0-8f59-569fc6704400'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file locally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][390]= {
                'title': "Accessing a build's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][391]= {
                'title': "Checking changes in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-54cdbcb3-6b6f-34fe-fba2-b0bfaf593317'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Checking changes in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][392]= {
                'title': "Restoring the current bitrise.yml to the build's bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-1ae5b6ec-f0d2-087f-e762-89e7672cceca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Restoring the current bitrise.yml to the build's bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][393]= {
                'title': "Deleting a build's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-e9b998ef-f6c1-4126-67b2-dd246fa78c6a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Deleting a build's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][391]= {
                'title': "Checking changes in the bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-54cdbcb3-6b6f-34fe-fba2-b0bfaf593317'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Checking changes in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][392]= {
                'title': "Restoring the current bitrise.yml to the build's bitrise.yml",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-1ae5b6ec-f0d2-087f-e762-89e7672cceca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Restoring the current bitrise.yml to the build's bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][393]= {
                'title': "Deleting a build's bitrise.yml file",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-e9b998ef-f6c1-4126-67b2-dd246fa78c6a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Deleting a build's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][394]= {
                'title': "Selective builds",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-c05627e7-6c71-b265-3d09-a95f3b3abc9a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Selective builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][395]= {
                'title': "Using patterns in the file name or file path",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-c05627e7-6c71-b265-3d09-a95f3b3abc9a_section-idm4614490316227232684115958513'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Selective builds \/ Using patterns in the file name or file path"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][396]= {
                'title': "Rolling builds",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-52681a2a-c690-3def-28cd-16823ba9eb01'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Rolling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][397]= {
                'title': "Configuring email notifications",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][398]= {
                'title': "Watching an app",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-9b9a2396-436a-5e52-3f2f-4b49142e6a37'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Watching an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][399]= {
                'title': "Changing your email notification settings",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-f51180b1-c8de-7feb-e020-0b6e790debd5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Changing your email notification settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][400]= {
                'title': "Sending emails with a Step",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-026b92b1-7a65-94f8-73b6-449dad27bbc0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Sending emails with a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][398]= {
                'title': "Watching an app",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-9b9a2396-436a-5e52-3f2f-4b49142e6a37'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Watching an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][399]= {
                'title': "Changing your email notification settings",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-f51180b1-c8de-7feb-e020-0b6e790debd5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Changing your email notification settings"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][400]= {
                'title': "Sending emails with a Step",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-026b92b1-7a65-94f8-73b6-449dad27bbc0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Sending emails with a Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][401]= {
                'title': "Configuring Slack integration",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-58499b8a-d97e-d8f7-6645-4e52ddee3faf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring Slack integration"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][402]= {
                'title': "Setting your Git credentials on build machines",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][403]= {
                'title': "Setting your Git credentials using Env Vars",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0_section-idm4565951027516833104262887165'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines \/ Setting your Git credentials using Env Vars"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][404]= {
                'title': "Setting your Git credentials using the Set Git Credentials Step",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0_section-idm4506585174268833104257980738'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines \/ Setting your Git credentials using the Set Git Credentials Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][405]= {
                'title': "Reporting the build status to your Git hosting provider",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][406]= {
                'title': "Configuring build status reporting",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-9a12843a-b48f-79ff-c1c4-3242c86bf956'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Configuring build status reporting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][407]= {
                'title': "Troubleshooting build status reporting",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-22d09dbd-17f2-8b88-a0ce-635f319e8a5d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][408]= {
                'title': "Checking the service credential user",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_section-idm4550372233275232741427170999'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting \/ Checking the service credential user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][409]= {
                'title': "Checking repository permissions and repository URL",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_section-idm4538149060897632741465458851'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting \/ Checking repository permissions and repository URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][406]= {
                'title': "Configuring build status reporting",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-9a12843a-b48f-79ff-c1c4-3242c86bf956'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Configuring build status reporting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][407]= {
                'title': "Troubleshooting build status reporting",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-22d09dbd-17f2-8b88-a0ce-635f319e8a5d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][408]= {
                'title': "Checking the service credential user",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_section-idm4550372233275232741427170999'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting \/ Checking the service credential user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][409]= {
                'title': "Checking repository permissions and repository URL",
                'href': 'UUID-3daa70a4-ac48-5727-e5fa-34d46303ecef.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_section-idm4538149060897632741465458851'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting \/ Checking repository permissions and repository URL"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][410]= {
                'title': "Starting builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][411]= {
                'title': "Starting builds manually",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][412]= {
                'title': "Running Workflows from the Workflow Editor",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-6865e276-3a2a-ff96-b049-3f1063e60402'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Running Workflows from the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][413]= {
                'title': "Advanced configuration options for starting\/scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-b8758d13-9796-ea59-15cd-0ba401687e85'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Advanced configuration options for starting\/scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][414]= {
                'title': "Triggering builds automatically",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][415]= {
                'title': "Code push triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-e799e486-18e8-bafc-d19e-5a36948a6a8f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Code push triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][416]= {
                'title': "Creating triggers for code pushes",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-69aedf84-b843-61fd-ce0f-54eb507d75e1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for code pushes"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][417]= {
                'title': "Pull request triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-d3f062fe-3fa3-6c84-2be7-82bc099ab43e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Pull request triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][418]= {
                'title': "Creating triggers for pull requests",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-09bca131-d5e6-b053-9825-05705bf527b4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for pull requests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][419]= {
                'title': "Triggering builds from draft PRs",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-1413d428-5caf-f162-139d-99d05f85e235'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][420]= {
                'title': "Disabling builds from a draft PR",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2e687aad-851b-a301-a1c1-e15515d1051c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Disabling builds from a draft PR"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][421]= {
                'title': "Build trigger behavior for draft PRs",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-6d1aaadd-62ca-4d11-16d4-2772e29d2cad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Build trigger behavior for draft PRs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][422]= {
                'title': "Git tag triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2614cf91-cdbe-71e2-d30a-9fbae171f417'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Git tag triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][423]= {
                'title': "Creating Git tag triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-ac26b697-371f-e32c-fdba-44387a0e096c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating Git tag triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][424]= {
                'title': "Deactivating a trigger",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-20b3f462-a978-c410-cda6-0de65ebde16e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Deactivating a trigger"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][425]= {
                'title': "Supported trigger conditions",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-0af36679-546e-1625-8b6f-5127672c2fbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Supported trigger conditions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][426]= {
                'title': "Scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][427]= {
                'title': "Scheduling a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8400a2f-db75-086b-5656-522d20aa2de2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][428]= {
                'title': "Advanced configuration options for starting\/scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8758d13-9796-ea59-15cd-0ba401687e85'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build \/ Advanced configuration options for starting\/scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][429]= {
                'title': "Editing a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-805cb98b-cc3c-71a4-3a57-394a4b9e3d5e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Editing a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][430]= {
                'title': "Triggering a scheduled build manually",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-7602344a-745f-4042-f6fe-d2ac81845b09'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Triggering a scheduled build manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][431]= {
                'title': "Disabling a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-df1d6007-3779-7e8a-2632-3ec3c17720f0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Disabling a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][432]= {
                'title': "Deleting a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-33bd5d3e-6e96-79f2-23ac-f154abfdefa6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Deleting a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][433]= {
                'title': "Approving pull request builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][434]= {
                'title': "Enabling manual approval for private apps",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51_section-idm4547044698948832682449864885'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds \/ Enabling manual approval for private apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][435]= {
                'title': "Approving the PR build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51_section-idm4547044772032032682451758727'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds \/ Approving the PR build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][436]= {
                'title': "Build triggers in the bitrise.yml file",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][437]= {
                'title': "Overview of the trigger map",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-1d751de7-c085-249f-fdf1-6da5531a0db4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][438]= {
                'title': "Multiple trigger conditions",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm4558546790192034265470684683'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Multiple trigger conditions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][439]= {
                'title': "Order of triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm464375685687683426547126878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Order of triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][440]= {
                'title': "Wildcards and regex",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm46327760897120342656217268'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Wildcards and regex"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][441]= {
                'title': "Components of the trigger map",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-d843227c-7a3f-9fb2-cef6-25935e42e7d1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Components of the trigger map"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][442]= {
                'title': "Starting parallel builds with a single trigger",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-f4296931-bc9d-3b67-263a-e0df6f174346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting parallel builds with a single trigger"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][443]= {
                'title': "bitrise.yml example",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-f4296931-bc9d-3b67-263a-e0df6f174346_section-idm4542014264953632888099751584'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting parallel builds with a single trigger \/ bitrise.yml example"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][444]= {
                'title': "Skipping a given commit or pull request",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][445]= {
                'title': "Preventing a commit from triggering a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-b4e139aa-5726-9d3c-9aea-74b2246d07ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a commit from triggering a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][446]= {
                'title': "Preventing a pull request from triggering a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-be55b1ff-cb24-290c-5f7f-b216cc81252b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a pull request from triggering a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][447]= {
                'title': "Skipping Steps triggered by a draft PR",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-0ab1409f-acd6-7602-d475-d0792e5652fd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Skipping Steps triggered by a draft PR"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][411]= {
                'title': "Starting builds manually",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][412]= {
                'title': "Running Workflows from the Workflow Editor",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-6865e276-3a2a-ff96-b049-3f1063e60402'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Running Workflows from the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][413]= {
                'title': "Advanced configuration options for starting\/scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-b8758d13-9796-ea59-15cd-0ba401687e85'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Advanced configuration options for starting\/scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][412]= {
                'title': "Running Workflows from the Workflow Editor",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-6865e276-3a2a-ff96-b049-3f1063e60402'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Running Workflows from the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][413]= {
                'title': "Advanced configuration options for starting\/scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-b8758d13-9796-ea59-15cd-0ba401687e85'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Advanced configuration options for starting\/scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][414]= {
                'title': "Triggering builds automatically",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][415]= {
                'title': "Code push triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-e799e486-18e8-bafc-d19e-5a36948a6a8f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Code push triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][416]= {
                'title': "Creating triggers for code pushes",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-69aedf84-b843-61fd-ce0f-54eb507d75e1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for code pushes"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][417]= {
                'title': "Pull request triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-d3f062fe-3fa3-6c84-2be7-82bc099ab43e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Pull request triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][418]= {
                'title': "Creating triggers for pull requests",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-09bca131-d5e6-b053-9825-05705bf527b4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for pull requests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][419]= {
                'title': "Triggering builds from draft PRs",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-1413d428-5caf-f162-139d-99d05f85e235'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][420]= {
                'title': "Disabling builds from a draft PR",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2e687aad-851b-a301-a1c1-e15515d1051c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Disabling builds from a draft PR"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][421]= {
                'title': "Build trigger behavior for draft PRs",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-6d1aaadd-62ca-4d11-16d4-2772e29d2cad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Build trigger behavior for draft PRs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][422]= {
                'title': "Git tag triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2614cf91-cdbe-71e2-d30a-9fbae171f417'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Git tag triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][423]= {
                'title': "Creating Git tag triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-ac26b697-371f-e32c-fdba-44387a0e096c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating Git tag triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][424]= {
                'title': "Deactivating a trigger",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-20b3f462-a978-c410-cda6-0de65ebde16e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Deactivating a trigger"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][425]= {
                'title': "Supported trigger conditions",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-0af36679-546e-1625-8b6f-5127672c2fbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Supported trigger conditions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][415]= {
                'title': "Code push triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-e799e486-18e8-bafc-d19e-5a36948a6a8f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Code push triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][416]= {
                'title': "Creating triggers for code pushes",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-69aedf84-b843-61fd-ce0f-54eb507d75e1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for code pushes"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][417]= {
                'title': "Pull request triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-d3f062fe-3fa3-6c84-2be7-82bc099ab43e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Pull request triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][418]= {
                'title': "Creating triggers for pull requests",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-09bca131-d5e6-b053-9825-05705bf527b4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for pull requests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][419]= {
                'title': "Triggering builds from draft PRs",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-1413d428-5caf-f162-139d-99d05f85e235'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][420]= {
                'title': "Disabling builds from a draft PR",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2e687aad-851b-a301-a1c1-e15515d1051c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Disabling builds from a draft PR"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][421]= {
                'title': "Build trigger behavior for draft PRs",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-6d1aaadd-62ca-4d11-16d4-2772e29d2cad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Build trigger behavior for draft PRs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][420]= {
                'title': "Disabling builds from a draft PR",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2e687aad-851b-a301-a1c1-e15515d1051c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Disabling builds from a draft PR"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][421]= {
                'title': "Build trigger behavior for draft PRs",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-6d1aaadd-62ca-4d11-16d4-2772e29d2cad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Build trigger behavior for draft PRs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][422]= {
                'title': "Git tag triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2614cf91-cdbe-71e2-d30a-9fbae171f417'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Git tag triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][423]= {
                'title': "Creating Git tag triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-ac26b697-371f-e32c-fdba-44387a0e096c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating Git tag triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][424]= {
                'title': "Deactivating a trigger",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-20b3f462-a978-c410-cda6-0de65ebde16e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Deactivating a trigger"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][425]= {
                'title': "Supported trigger conditions",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-0af36679-546e-1625-8b6f-5127672c2fbf'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Supported trigger conditions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][426]= {
                'title': "Scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][427]= {
                'title': "Scheduling a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8400a2f-db75-086b-5656-522d20aa2de2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][428]= {
                'title': "Advanced configuration options for starting\/scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8758d13-9796-ea59-15cd-0ba401687e85'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build \/ Advanced configuration options for starting\/scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][429]= {
                'title': "Editing a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-805cb98b-cc3c-71a4-3a57-394a4b9e3d5e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Editing a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][430]= {
                'title': "Triggering a scheduled build manually",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-7602344a-745f-4042-f6fe-d2ac81845b09'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Triggering a scheduled build manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][431]= {
                'title': "Disabling a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-df1d6007-3779-7e8a-2632-3ec3c17720f0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Disabling a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][432]= {
                'title': "Deleting a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-33bd5d3e-6e96-79f2-23ac-f154abfdefa6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Deleting a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][427]= {
                'title': "Scheduling a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8400a2f-db75-086b-5656-522d20aa2de2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][428]= {
                'title': "Advanced configuration options for starting\/scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8758d13-9796-ea59-15cd-0ba401687e85'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build \/ Advanced configuration options for starting\/scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][428]= {
                'title': "Advanced configuration options for starting\/scheduling builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8758d13-9796-ea59-15cd-0ba401687e85'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build \/ Advanced configuration options for starting\/scheduling builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][429]= {
                'title': "Editing a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-805cb98b-cc3c-71a4-3a57-394a4b9e3d5e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Editing a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][430]= {
                'title': "Triggering a scheduled build manually",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-7602344a-745f-4042-f6fe-d2ac81845b09'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Triggering a scheduled build manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][431]= {
                'title': "Disabling a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-df1d6007-3779-7e8a-2632-3ec3c17720f0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Disabling a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][432]= {
                'title': "Deleting a scheduled build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-33bd5d3e-6e96-79f2-23ac-f154abfdefa6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Deleting a scheduled build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][433]= {
                'title': "Approving pull request builds",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][434]= {
                'title': "Enabling manual approval for private apps",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51_section-idm4547044698948832682449864885'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds \/ Enabling manual approval for private apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][435]= {
                'title': "Approving the PR build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51_section-idm4547044772032032682451758727'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds \/ Approving the PR build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][436]= {
                'title': "Build triggers in the bitrise.yml file",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][437]= {
                'title': "Overview of the trigger map",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-1d751de7-c085-249f-fdf1-6da5531a0db4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][438]= {
                'title': "Multiple trigger conditions",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm4558546790192034265470684683'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Multiple trigger conditions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][439]= {
                'title': "Order of triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm464375685687683426547126878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Order of triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][440]= {
                'title': "Wildcards and regex",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm46327760897120342656217268'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Wildcards and regex"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][441]= {
                'title': "Components of the trigger map",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-d843227c-7a3f-9fb2-cef6-25935e42e7d1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Components of the trigger map"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][437]= {
                'title': "Overview of the trigger map",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-1d751de7-c085-249f-fdf1-6da5531a0db4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][438]= {
                'title': "Multiple trigger conditions",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm4558546790192034265470684683'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Multiple trigger conditions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][439]= {
                'title': "Order of triggers",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm464375685687683426547126878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Order of triggers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][440]= {
                'title': "Wildcards and regex",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_section-idm46327760897120342656217268'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map \/ Wildcards and regex"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][441]= {
                'title': "Components of the trigger map",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-d843227c-7a3f-9fb2-cef6-25935e42e7d1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Components of the trigger map"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][442]= {
                'title': "Starting parallel builds with a single trigger",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-f4296931-bc9d-3b67-263a-e0df6f174346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting parallel builds with a single trigger"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][443]= {
                'title': "bitrise.yml example",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-f4296931-bc9d-3b67-263a-e0df6f174346_section-idm4542014264953632888099751584'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting parallel builds with a single trigger \/ bitrise.yml example"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][444]= {
                'title': "Skipping a given commit or pull request",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][445]= {
                'title': "Preventing a commit from triggering a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-b4e139aa-5726-9d3c-9aea-74b2246d07ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a commit from triggering a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][446]= {
                'title': "Preventing a pull request from triggering a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-be55b1ff-cb24-290c-5f7f-b216cc81252b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a pull request from triggering a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][447]= {
                'title': "Skipping Steps triggered by a draft PR",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-0ab1409f-acd6-7602-d475-d0792e5652fd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Skipping Steps triggered by a draft PR"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][445]= {
                'title': "Preventing a commit from triggering a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-b4e139aa-5726-9d3c-9aea-74b2246d07ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a commit from triggering a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][446]= {
                'title': "Preventing a pull request from triggering a build",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-be55b1ff-cb24-290c-5f7f-b216cc81252b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a pull request from triggering a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][447]= {
                'title': "Skipping Steps triggered by a draft PR",
                'href': 'UUID-8749ff03-1d05-9854-489b-c791d9a40463.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-0ab1409f-acd6-7602-d475-d0792e5652fd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Skipping Steps triggered by a draft PR"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][448]= {
                'title': "Caching",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][449]= {
                'title': "Using branch-based caching in your builds",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][450]= {
                'title': "Including files and folders in the build cache",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-b7360b76-0a5a-344f-26d9-98f29db588c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Including files and folders in the build cache"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][451]= {
                'title': "Ignoring files and dependencies",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-bce3abec-99e7-d41d-9aca-22efd1b0483b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Ignoring files and dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][452]= {
                'title': "Downloading or deleting the build cache",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-91a38a89-737c-2254-f64d-7d52719ca6d7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Downloading or deleting the build cache"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][453]= {
                'title': "Caching Cocoapods",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-ab15d7d2-5e0c-338c-c2b5-7abdc2ed286b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Cocoapods"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][454]= {
                'title': "Caching Gradle",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-04e246f3-5281-c2da-ab1e-9f7944a5a26e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Gradle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][455]= {
                'title': "Caching Maven",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-f3fe2704-5548-f763-bdbd-fdca3b8da541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Maven"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][456]= {
                'title': "Caching Ruby Gems",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-b08f1173-8642-6a9f-d0ec-1f9b12a8be53'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Ruby Gems"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][457]= {
                'title': "Caching Homebrew installers",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-b2f04e5b-33bc-c36d-c8ff-f3172de99036'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Homebrew installers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][449]= {
                'title': "Using branch-based caching in your builds",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][450]= {
                'title': "Including files and folders in the build cache",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-b7360b76-0a5a-344f-26d9-98f29db588c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Including files and folders in the build cache"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][451]= {
                'title': "Ignoring files and dependencies",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-bce3abec-99e7-d41d-9aca-22efd1b0483b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Ignoring files and dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][452]= {
                'title': "Downloading or deleting the build cache",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-91a38a89-737c-2254-f64d-7d52719ca6d7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Downloading or deleting the build cache"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][450]= {
                'title': "Including files and folders in the build cache",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-b7360b76-0a5a-344f-26d9-98f29db588c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Including files and folders in the build cache"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][451]= {
                'title': "Ignoring files and dependencies",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-bce3abec-99e7-d41d-9aca-22efd1b0483b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Ignoring files and dependencies"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][452]= {
                'title': "Downloading or deleting the build cache",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-91a38a89-737c-2254-f64d-7d52719ca6d7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Downloading or deleting the build cache"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][453]= {
                'title': "Caching Cocoapods",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-ab15d7d2-5e0c-338c-c2b5-7abdc2ed286b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Cocoapods"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][454]= {
                'title': "Caching Gradle",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-04e246f3-5281-c2da-ab1e-9f7944a5a26e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Gradle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][455]= {
                'title': "Caching Maven",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-f3fe2704-5548-f763-bdbd-fdca3b8da541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Maven"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][456]= {
                'title': "Caching Ruby Gems",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-b08f1173-8642-6a9f-d0ec-1f9b12a8be53'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Ruby Gems"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][457]= {
                'title': "Caching Homebrew installers",
                'href': 'UUID-e01af56f-e7e8-042a-b224-6d8e895014f7.html#UUID-b2f04e5b-33bc-c36d-c8ff-f3172de99036'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Homebrew installers"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][458]= {
                'title': "Managing build files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][459]= {
                'title': "Uploading files for your builds",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-058726e8-43e1-0385-f4b7-e2fff934ba79'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Uploading files for your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][460]= {
                'title': "Protecting your uploaded files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-058726e8-43e1-0385-f4b7-e2fff934ba79_UUID-75c7d964-dcb3-2fa1-4d32-0654f62a10c6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Uploading files for your builds \/ Protecting your uploaded files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][461]= {
                'title': "Using files in your builds",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][462]= {
                'title': "Downloading a file using the File Downloader Step",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-2cccdfb2-6110-0be0-6213-aa164992cf0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using the File Downloader Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][463]= {
                'title': "Downloading a file using a custom Script Step",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-601b8a95-62e1-81d5-2adf-b4c2f7c3d322'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using a custom Script Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][464]= {
                'title': "Using encrypted files in your builds",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][465]= {
                'title': "Encrypting your files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-bba06fe4-0474-7603-2e35-1aec9d3ec3da'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Encrypting your files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][466]= {
                'title': "Decrypting and downloading your files during a build",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-8c3ba22d-9c48-c06b-871c-dfe1073bf7c0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Decrypting and downloading your files during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][467]= {
                'title': "Build artifacts online",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][468]= {
                'title': "The Installable artifacts page",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-153c2951-4814-54bc-a62d-9e2d9c3d2e17'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ The Installable artifacts page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][469]= {
                'title': "Artifact details",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-15d39488-4b51-4bb0-23f5-1afbbe64e495'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Artifact details"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][470]= {
                'title': "Deploying files into artifacts",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-7d63929f-7881-a511-91a1-8b083464bbe9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][471]= {
                'title': "Modifying the target directory path",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4622780843736032682795432982'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Modifying the target directory path"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][472]= {
                'title': "Viewing artifacts if your build has failed",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4613160004728032682795873028'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Viewing artifacts if your build has failed"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][473]= {
                'title': "Who can access build artifacts?",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4547044699468832682797369787'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Who can access build artifacts?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][459]= {
                'title': "Uploading files for your builds",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-058726e8-43e1-0385-f4b7-e2fff934ba79'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Uploading files for your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][460]= {
                'title': "Protecting your uploaded files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-058726e8-43e1-0385-f4b7-e2fff934ba79_UUID-75c7d964-dcb3-2fa1-4d32-0654f62a10c6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Uploading files for your builds \/ Protecting your uploaded files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][460]= {
                'title': "Protecting your uploaded files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-058726e8-43e1-0385-f4b7-e2fff934ba79_UUID-75c7d964-dcb3-2fa1-4d32-0654f62a10c6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Uploading files for your builds \/ Protecting your uploaded files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][461]= {
                'title': "Using files in your builds",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][462]= {
                'title': "Downloading a file using the File Downloader Step",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-2cccdfb2-6110-0be0-6213-aa164992cf0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using the File Downloader Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][463]= {
                'title': "Downloading a file using a custom Script Step",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-601b8a95-62e1-81d5-2adf-b4c2f7c3d322'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using a custom Script Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][462]= {
                'title': "Downloading a file using the File Downloader Step",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-2cccdfb2-6110-0be0-6213-aa164992cf0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using the File Downloader Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][463]= {
                'title': "Downloading a file using a custom Script Step",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-601b8a95-62e1-81d5-2adf-b4c2f7c3d322'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using a custom Script Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][464]= {
                'title': "Using encrypted files in your builds",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][465]= {
                'title': "Encrypting your files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-bba06fe4-0474-7603-2e35-1aec9d3ec3da'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Encrypting your files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][466]= {
                'title': "Decrypting and downloading your files during a build",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-8c3ba22d-9c48-c06b-871c-dfe1073bf7c0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Decrypting and downloading your files during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][465]= {
                'title': "Encrypting your files",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-bba06fe4-0474-7603-2e35-1aec9d3ec3da'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Encrypting your files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][466]= {
                'title': "Decrypting and downloading your files during a build",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-8c3ba22d-9c48-c06b-871c-dfe1073bf7c0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Decrypting and downloading your files during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][467]= {
                'title': "Build artifacts online",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][468]= {
                'title': "The Installable artifacts page",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-153c2951-4814-54bc-a62d-9e2d9c3d2e17'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ The Installable artifacts page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][469]= {
                'title': "Artifact details",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-15d39488-4b51-4bb0-23f5-1afbbe64e495'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Artifact details"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][470]= {
                'title': "Deploying files into artifacts",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-7d63929f-7881-a511-91a1-8b083464bbe9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][471]= {
                'title': "Modifying the target directory path",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4622780843736032682795432982'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Modifying the target directory path"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][472]= {
                'title': "Viewing artifacts if your build has failed",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4613160004728032682795873028'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Viewing artifacts if your build has failed"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][473]= {
                'title': "Who can access build artifacts?",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4547044699468832682797369787'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Who can access build artifacts?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][468]= {
                'title': "The Installable artifacts page",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-153c2951-4814-54bc-a62d-9e2d9c3d2e17'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ The Installable artifacts page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][469]= {
                'title': "Artifact details",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-15d39488-4b51-4bb0-23f5-1afbbe64e495'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Artifact details"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][470]= {
                'title': "Deploying files into artifacts",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-7d63929f-7881-a511-91a1-8b083464bbe9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][471]= {
                'title': "Modifying the target directory path",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4622780843736032682795432982'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Modifying the target directory path"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][472]= {
                'title': "Viewing artifacts if your build has failed",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4613160004728032682795873028'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Viewing artifacts if your build has failed"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][473]= {
                'title': "Who can access build artifacts?",
                'href': 'UUID-eec17a30-1fbc-c596-c3ab-b68772616ee3.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_section-idm4547044699468832682797369787'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts \/ Who can access build artifacts?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][474]= {
                'title': "Environment Variables",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][475]= {
                'title': "Scope of Environment Variables",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-242640ff-b367-8f57-9f71-e08cfdd411a8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Scope of Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][476]= {
                'title': "Availability order of Environment Variables",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-fb57592b-1c18-21bc-5c7f-02f90db99bd4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Availability order of Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][477]= {
                'title': "Setting an Env Var in the Workflow Editor",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-b28b5990-c71c-1a57-a93b-4bbc290ce0c9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting an Env Var in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][478]= {
                'title': "Setting a custom Env Var when starting a build",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-02ce6978-f4f3-f77e-10cd-c832fb3d5d0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting a custom Env Var when starting a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][479]= {
                'title': "Using an Env Var in a Step input",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-5acbbc81-a58d-fdc8-6bf7-c4f26bd81e96'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Using an Env Var in a Step input"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][480]= {
                'title': "Using Env Vars in the value of an Env Var",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-0f2f0f24-d759-0f07-2de3-e3aed7504c88'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Using Env Vars in the value of an Env Var"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][481]= {
                'title': "Setting and managing Env Vars during a build",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-209f8c82-dd8c-b622-2411-df8f4a1438b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting and managing Env Vars during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][482]= {
                'title': "Setting Env Vars in the bitrise.yml",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-687ba423-cc2f-f036-ab67-c3b394d3a275'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting Env Vars in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][475]= {
                'title': "Scope of Environment Variables",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-242640ff-b367-8f57-9f71-e08cfdd411a8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Scope of Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][476]= {
                'title': "Availability order of Environment Variables",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-fb57592b-1c18-21bc-5c7f-02f90db99bd4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Availability order of Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][477]= {
                'title': "Setting an Env Var in the Workflow Editor",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-b28b5990-c71c-1a57-a93b-4bbc290ce0c9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting an Env Var in the Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][478]= {
                'title': "Setting a custom Env Var when starting a build",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-02ce6978-f4f3-f77e-10cd-c832fb3d5d0c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting a custom Env Var when starting a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][479]= {
                'title': "Using an Env Var in a Step input",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-5acbbc81-a58d-fdc8-6bf7-c4f26bd81e96'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Using an Env Var in a Step input"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][480]= {
                'title': "Using Env Vars in the value of an Env Var",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-0f2f0f24-d759-0f07-2de3-e3aed7504c88'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Using Env Vars in the value of an Env Var"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][481]= {
                'title': "Setting and managing Env Vars during a build",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-209f8c82-dd8c-b622-2411-df8f4a1438b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting and managing Env Vars during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][482]= {
                'title': "Setting Env Vars in the bitrise.yml",
                'href': 'UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-687ba423-cc2f-f036-ab67-c3b394d3a275'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting Env Vars in the bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][483]= {
                'title': "Secrets",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][484]= {
                'title': "Setting a Secret",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-8c8c168c-fedb-b485-0ac8-a5229096a462'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Setting a Secret"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][485]= {
                'title': "Editing an existing Secret",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-af2856a9-70de-38be-f4cd-7346a4e55f75'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Editing an existing Secret"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][486]= {
                'title': "Protecting the value of a Secret",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-df82ce8a-a1d2-debf-a92a-8ac55ea86e65'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Protecting the value of a Secret"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][487]= {
                'title': "Exposing a Secret to pull requests",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-bbf7e25a-8a1c-3e35-c659-6525d37f243a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Exposing a Secret to pull requests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][488]= {
                'title': "Managing Secrets across multiple apps",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-55e08c3d-6cbe-b65d-2884-e5835c2a01f7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][489]= {
                'title': "Managing Secrets on a Workspace level",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_section-idm4572725706596834329392948656'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps \/ Managing Secrets on a Workspace level"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][490]= {
                'title': "Managing Secrets from a central vault or database",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_section-idm4575482969265634329393418761'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps \/ Managing Secrets from a central vault or database"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][491]= {
                'title': "Redacting Secrets",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-67710377-6824-244e-5120-83002048d81f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Redacting Secrets"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][484]= {
                'title': "Setting a Secret",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-8c8c168c-fedb-b485-0ac8-a5229096a462'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Setting a Secret"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][485]= {
                'title': "Editing an existing Secret",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-af2856a9-70de-38be-f4cd-7346a4e55f75'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Editing an existing Secret"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][486]= {
                'title': "Protecting the value of a Secret",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-df82ce8a-a1d2-debf-a92a-8ac55ea86e65'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Protecting the value of a Secret"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][487]= {
                'title': "Exposing a Secret to pull requests",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-bbf7e25a-8a1c-3e35-c659-6525d37f243a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Exposing a Secret to pull requests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][488]= {
                'title': "Managing Secrets across multiple apps",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-55e08c3d-6cbe-b65d-2884-e5835c2a01f7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][489]= {
                'title': "Managing Secrets on a Workspace level",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_section-idm4572725706596834329392948656'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps \/ Managing Secrets on a Workspace level"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][490]= {
                'title': "Managing Secrets from a central vault or database",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_section-idm4575482969265634329393418761'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps \/ Managing Secrets from a central vault or database"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][491]= {
                'title': "Redacting Secrets",
                'href': 'UUID-bfc35b35-3895-2edb-471b-ab040993c3bf.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-67710377-6824-244e-5120-83002048d81f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Redacting Secrets"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][492]= {
                'title': "Build statuses",
                'href': 'UUID-a2d504d0-aa72-895e-5ec6-998fbbe323da.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build statuses"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][493]= {
                'title': "Installing tools during a build",
                'href': 'UUID-4b5b1437-c4e5-7367-e994-b5738e643e14.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Installing tools during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][494]= {
                'title': "Installing tools by declaring deps in the bitrise.yml file",
                'href': 'UUID-4b5b1437-c4e5-7367-e994-b5738e643e14.html#UUID-4b5b1437-c4e5-7367-e994-b5738e643e14_UUID-534094e9-0f67-eccc-04c6-09191a046a3d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Installing tools during a build \/ Installing tools by declaring deps in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][494]= {
                'title': "Installing tools by declaring deps in the bitrise.yml file",
                'href': 'UUID-4b5b1437-c4e5-7367-e994-b5738e643e14.html#UUID-4b5b1437-c4e5-7367-e994-b5738e643e14_UUID-534094e9-0f67-eccc-04c6-09191a046a3d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Installing tools during a build \/ Installing tools by declaring deps in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][495]= {
                'title': "Connecting to a VPN during a build",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][496]= {
                'title': "Accessing a repository via VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-5e36de21-1e1d-9f03-af95-c8836a683a88'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Accessing a repository via VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][497]= {
                'title': "Example VPN configurations",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-c4fe8f5b-cae7-fdc2-ef68-8edf9fe6fe0b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][498]= {
                'title': "Using the Connect to OpenVPN Server Step",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-c06c8ec2-9381-610c-6fed-aa196a13c81e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using the Connect to OpenVPN Server Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][499]= {
                'title': "Using Strongswan VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-0735a420-25a9-490f-306b-a638dc966e3e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Strongswan VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][500]= {
                'title': "Using Cisco VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-8540fef2-571e-8024-d44a-9c2ed8a5ec1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Cisco VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][496]= {
                'title': "Accessing a repository via VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-5e36de21-1e1d-9f03-af95-c8836a683a88'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Accessing a repository via VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][497]= {
                'title': "Example VPN configurations",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-c4fe8f5b-cae7-fdc2-ef68-8edf9fe6fe0b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][498]= {
                'title': "Using the Connect to OpenVPN Server Step",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-c06c8ec2-9381-610c-6fed-aa196a13c81e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using the Connect to OpenVPN Server Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][499]= {
                'title': "Using Strongswan VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-0735a420-25a9-490f-306b-a638dc966e3e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Strongswan VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][500]= {
                'title': "Using Cisco VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-8540fef2-571e-8024-d44a-9c2ed8a5ec1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Cisco VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][498]= {
                'title': "Using the Connect to OpenVPN Server Step",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-c06c8ec2-9381-610c-6fed-aa196a13c81e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using the Connect to OpenVPN Server Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][499]= {
                'title': "Using Strongswan VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-0735a420-25a9-490f-306b-a638dc966e3e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Strongswan VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][500]= {
                'title': "Using Cisco VPN",
                'href': 'UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-8540fef2-571e-8024-d44a-9c2ed8a5ec1e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Cisco VPN"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][501]= {
                'title': "Finding a specific build",
                'href': 'UUID-0873b810-755d-fc96-7bc7-c3c5abaeb537.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Finding a specific build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][502]= {
                'title': "Build numbering and app versioning",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][503]= {
                'title': "Adding the SSH key to the machine user",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-e7127b05-9959-b784-e8b4-54a6b1cacf53'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Adding the SSH key to the machine user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][504]= {
                'title': "Setting up app versioning automatically on Bitrise",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-6f3ae55b-9830-4c0a-1bff-400c53fda24b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][505]= {
                'title': "Setting the versionCode and the versionName of an Android app",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_section-idm4622781190830432682700216106'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise \/ Setting the versionCode and the versionName of an Android app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][506]= {
                'title': "Setting the CFBundleVersion and CFBundleShortVersionString of an iOS app",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_section-idm4614490364926432682706069415'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise \/ Setting the CFBundleVersion and CFBundleShortVersionString of an iOS app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][507]= {
                'title': "Offsetting the build version",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-736d38e1-185a-75cf-876f-98b0a2bae002'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Offsetting the build version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][503]= {
                'title': "Adding the SSH key to the machine user",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-e7127b05-9959-b784-e8b4-54a6b1cacf53'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Adding the SSH key to the machine user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][504]= {
                'title': "Setting up app versioning automatically on Bitrise",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-6f3ae55b-9830-4c0a-1bff-400c53fda24b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][505]= {
                'title': "Setting the versionCode and the versionName of an Android app",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_section-idm4622781190830432682700216106'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise \/ Setting the versionCode and the versionName of an Android app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][506]= {
                'title': "Setting the CFBundleVersion and CFBundleShortVersionString of an iOS app",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_section-idm4614490364926432682706069415'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise \/ Setting the CFBundleVersion and CFBundleShortVersionString of an iOS app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][507]= {
                'title': "Offsetting the build version",
                'href': 'UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-736d38e1-185a-75cf-876f-98b0a2bae002'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Offsetting the build version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][508]= {
                'title': "Build data and troubleshooting",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][509]= {
                'title': "Build logs",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][510]= {
                'title': "Finding a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-48939df0-e086-ebcd-d395-837408311aae'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Finding a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][511]= {
                'title': "The build log page",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-c9ae937b-1251-94a9-4963-62a9985f9f4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ The build log page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][512]= {
                'title': "Following a build log live",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-83fa8c2c-adb7-3053-73ef-0496563e8557'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Following a build log live"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][513]= {
                'title': "Downloading a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-beba418a-86b4-8c24-1c44-ad71975d8054'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Downloading a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][514]= {
                'title': "Deleting a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-e00c64c7-7d2c-11ca-4a92-f92ea218e29d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Deleting a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][515]= {
                'title': "Remote access",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][516]= {
                'title': "Remote access with SSH",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-9806640d-bbfe-5c15-42ff-9e1823127dc3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with SSH"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][517]= {
                'title': "Remote access with screenshare",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-abd419ef-c81a-c262-0b74-b323fd352f49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with screenshare"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][518]= {
                'title': "Finding your files on the VM",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-60ad9f5a-5f27-9140-c586-3f89711dd777'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Finding your files on the VM"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][519]= {
                'title': "Extending the availability of remote access",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-5215251f-27dd-9dce-d75a-a308c0ffe483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Extending the availability of remote access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][520]= {
                'title': "Debugging your build on your own machine",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][521]= {
                'title': "Testing with a full clean git clone",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-48c6d4cb-5a12-dda3-1ec2-c96eecf03955'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with a full clean git clone"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][522]= {
                'title': "Testing with the Bitrise CLI",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-62571106-3053-58d0-5a03-c6c96dc34432'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with the Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][523]= {
                'title': "GitHub Checks with the Bitrise GitHub App",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][524]= {
                'title': "Installing Bitrise Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-2b571156-f9c6-c80c-cba6-f739bc508abb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Installing Bitrise Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][525]= {
                'title': "Enabling GitHub Checks on Bitrise",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-48573566-af19-901b-b099-d508faa5f4df'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Enabling GitHub Checks on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][526]= {
                'title': "Can't enable GitHub Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_section-idm4666788075920032682769339037'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Enabling GitHub Checks on Bitrise \/ Can't enable GitHub Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][527]= {
                'title': "Switching to Bitrise Checks from previous CI checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-bac16870-e3db-121c-f569-1f954bf0e1c5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Switching to Bitrise Checks from previous CI checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][528]= {
                'title': "Disabling GitHub Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-ddaa1c9c-54be-24b2-0b5a-a2bb1db09225'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Disabling GitHub Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][529]= {
                'title': "GitHub Checks test summary",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-7fbe15ca-9a70-6578-9d92-3188b3616c81'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][530]= {
                'title': "Step by Step error report",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-748b9398-ea2b-fb99-acac-950ba256a2b2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Step by Step error report"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][531]= {
                'title': "Checking the test results of a failed Step",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-f9efeae9-f090-9691-f697-c3aad1d71642'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Checking the test results of a failed Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][532]= {
                'title': "Re-running a build using GitHub checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-470cac57-a1b6-96ac-8d12-a1e551b61786'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Re-running a build using GitHub checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][533]= {
                'title': "Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-26aea079-d355-6b12-74ac-d92209f4b91d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][534]= {
                'title': "Integrating Meercode with Bitrise",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][535]= {
                'title': "Enabling the add-on as an admin",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-0aa15cb6-8411-a9d8-6cb0-27e3cd5c7a49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Enabling the add-on as an admin"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][536]= {
                'title': "Authorizing the add-on as a user",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-8192dcfd-2723-4f68-c790-251e4d998bd2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Authorizing the add-on as a user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][537]= {
                'title': "Revoking authorization on Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-c16a3fc1-bc27-4170-188c-5bad2f00925b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Revoking authorization on Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][538]= {
                'title': "Disabling Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-625d6a3e-e830-ba77-0336-6637ff8a6a58'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Disabling Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][539]= {
                'title': "Accessing build data and insights with Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-692f92e7-a1e6-3e47-4bf2-161c711554b2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Accessing build data and insights with Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][509]= {
                'title': "Build logs",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][510]= {
                'title': "Finding a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-48939df0-e086-ebcd-d395-837408311aae'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Finding a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][511]= {
                'title': "The build log page",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-c9ae937b-1251-94a9-4963-62a9985f9f4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ The build log page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][512]= {
                'title': "Following a build log live",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-83fa8c2c-adb7-3053-73ef-0496563e8557'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Following a build log live"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][513]= {
                'title': "Downloading a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-beba418a-86b4-8c24-1c44-ad71975d8054'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Downloading a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][514]= {
                'title': "Deleting a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-e00c64c7-7d2c-11ca-4a92-f92ea218e29d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Deleting a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][510]= {
                'title': "Finding a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-48939df0-e086-ebcd-d395-837408311aae'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Finding a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][511]= {
                'title': "The build log page",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-c9ae937b-1251-94a9-4963-62a9985f9f4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ The build log page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][512]= {
                'title': "Following a build log live",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-83fa8c2c-adb7-3053-73ef-0496563e8557'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Following a build log live"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][513]= {
                'title': "Downloading a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-beba418a-86b4-8c24-1c44-ad71975d8054'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Downloading a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][514]= {
                'title': "Deleting a build log",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-e00c64c7-7d2c-11ca-4a92-f92ea218e29d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Deleting a build log"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][515]= {
                'title': "Remote access",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][516]= {
                'title': "Remote access with SSH",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-9806640d-bbfe-5c15-42ff-9e1823127dc3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with SSH"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][517]= {
                'title': "Remote access with screenshare",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-abd419ef-c81a-c262-0b74-b323fd352f49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with screenshare"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][518]= {
                'title': "Finding your files on the VM",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-60ad9f5a-5f27-9140-c586-3f89711dd777'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Finding your files on the VM"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][519]= {
                'title': "Extending the availability of remote access",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-5215251f-27dd-9dce-d75a-a308c0ffe483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Extending the availability of remote access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][516]= {
                'title': "Remote access with SSH",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-9806640d-bbfe-5c15-42ff-9e1823127dc3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with SSH"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][517]= {
                'title': "Remote access with screenshare",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-abd419ef-c81a-c262-0b74-b323fd352f49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with screenshare"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][518]= {
                'title': "Finding your files on the VM",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-60ad9f5a-5f27-9140-c586-3f89711dd777'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Finding your files on the VM"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][519]= {
                'title': "Extending the availability of remote access",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-5215251f-27dd-9dce-d75a-a308c0ffe483'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Extending the availability of remote access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][520]= {
                'title': "Debugging your build on your own machine",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][521]= {
                'title': "Testing with a full clean git clone",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-48c6d4cb-5a12-dda3-1ec2-c96eecf03955'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with a full clean git clone"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][522]= {
                'title': "Testing with the Bitrise CLI",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-62571106-3053-58d0-5a03-c6c96dc34432'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with the Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][521]= {
                'title': "Testing with a full clean git clone",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-48c6d4cb-5a12-dda3-1ec2-c96eecf03955'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with a full clean git clone"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][522]= {
                'title': "Testing with the Bitrise CLI",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-62571106-3053-58d0-5a03-c6c96dc34432'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with the Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][523]= {
                'title': "GitHub Checks with the Bitrise GitHub App",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][524]= {
                'title': "Installing Bitrise Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-2b571156-f9c6-c80c-cba6-f739bc508abb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Installing Bitrise Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][525]= {
                'title': "Enabling GitHub Checks on Bitrise",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-48573566-af19-901b-b099-d508faa5f4df'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Enabling GitHub Checks on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][526]= {
                'title': "Can't enable GitHub Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_section-idm4666788075920032682769339037'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Enabling GitHub Checks on Bitrise \/ Can't enable GitHub Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][527]= {
                'title': "Switching to Bitrise Checks from previous CI checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-bac16870-e3db-121c-f569-1f954bf0e1c5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Switching to Bitrise Checks from previous CI checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][528]= {
                'title': "Disabling GitHub Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-ddaa1c9c-54be-24b2-0b5a-a2bb1db09225'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Disabling GitHub Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][529]= {
                'title': "GitHub Checks test summary",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-7fbe15ca-9a70-6578-9d92-3188b3616c81'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][530]= {
                'title': "Step by Step error report",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-748b9398-ea2b-fb99-acac-950ba256a2b2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Step by Step error report"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][531]= {
                'title': "Checking the test results of a failed Step",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-f9efeae9-f090-9691-f697-c3aad1d71642'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Checking the test results of a failed Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][532]= {
                'title': "Re-running a build using GitHub checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-470cac57-a1b6-96ac-8d12-a1e551b61786'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Re-running a build using GitHub checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][524]= {
                'title': "Installing Bitrise Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-2b571156-f9c6-c80c-cba6-f739bc508abb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Installing Bitrise Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][525]= {
                'title': "Enabling GitHub Checks on Bitrise",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-48573566-af19-901b-b099-d508faa5f4df'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Enabling GitHub Checks on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][526]= {
                'title': "Can't enable GitHub Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_section-idm4666788075920032682769339037'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Enabling GitHub Checks on Bitrise \/ Can't enable GitHub Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][527]= {
                'title': "Switching to Bitrise Checks from previous CI checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-bac16870-e3db-121c-f569-1f954bf0e1c5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Switching to Bitrise Checks from previous CI checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][528]= {
                'title': "Disabling GitHub Checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-ddaa1c9c-54be-24b2-0b5a-a2bb1db09225'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Disabling GitHub Checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][529]= {
                'title': "GitHub Checks test summary",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-7fbe15ca-9a70-6578-9d92-3188b3616c81'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][530]= {
                'title': "Step by Step error report",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-748b9398-ea2b-fb99-acac-950ba256a2b2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Step by Step error report"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][531]= {
                'title': "Checking the test results of a failed Step",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-f9efeae9-f090-9691-f697-c3aad1d71642'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Checking the test results of a failed Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][532]= {
                'title': "Re-running a build using GitHub checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-470cac57-a1b6-96ac-8d12-a1e551b61786'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Re-running a build using GitHub checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][530]= {
                'title': "Step by Step error report",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-748b9398-ea2b-fb99-acac-950ba256a2b2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Step by Step error report"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][531]= {
                'title': "Checking the test results of a failed Step",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-f9efeae9-f090-9691-f697-c3aad1d71642'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Checking the test results of a failed Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][532]= {
                'title': "Re-running a build using GitHub checks",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-470cac57-a1b6-96ac-8d12-a1e551b61786'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Re-running a build using GitHub checks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][533]= {
                'title': "Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-26aea079-d355-6b12-74ac-d92209f4b91d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][534]= {
                'title': "Integrating Meercode with Bitrise",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][535]= {
                'title': "Enabling the add-on as an admin",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-0aa15cb6-8411-a9d8-6cb0-27e3cd5c7a49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Enabling the add-on as an admin"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][536]= {
                'title': "Authorizing the add-on as a user",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-8192dcfd-2723-4f68-c790-251e4d998bd2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Authorizing the add-on as a user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][537]= {
                'title': "Revoking authorization on Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-c16a3fc1-bc27-4170-188c-5bad2f00925b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Revoking authorization on Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][538]= {
                'title': "Disabling Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-625d6a3e-e830-ba77-0336-6637ff8a6a58'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Disabling Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][539]= {
                'title': "Accessing build data and insights with Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-692f92e7-a1e6-3e47-4bf2-161c711554b2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Accessing build data and insights with Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][534]= {
                'title': "Integrating Meercode with Bitrise",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][535]= {
                'title': "Enabling the add-on as an admin",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-0aa15cb6-8411-a9d8-6cb0-27e3cd5c7a49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Enabling the add-on as an admin"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][536]= {
                'title': "Authorizing the add-on as a user",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-8192dcfd-2723-4f68-c790-251e4d998bd2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Authorizing the add-on as a user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][537]= {
                'title': "Revoking authorization on Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-c16a3fc1-bc27-4170-188c-5bad2f00925b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Revoking authorization on Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][538]= {
                'title': "Disabling Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-625d6a3e-e830-ba77-0336-6637ff8a6a58'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Disabling Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][535]= {
                'title': "Enabling the add-on as an admin",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-0aa15cb6-8411-a9d8-6cb0-27e3cd5c7a49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Enabling the add-on as an admin"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][536]= {
                'title': "Authorizing the add-on as a user",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-8192dcfd-2723-4f68-c790-251e4d998bd2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Authorizing the add-on as a user"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][537]= {
                'title': "Revoking authorization on Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-c16a3fc1-bc27-4170-188c-5bad2f00925b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Revoking authorization on Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][538]= {
                'title': "Disabling Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-625d6a3e-e830-ba77-0336-6637ff8a6a58'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Disabling Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][539]= {
                'title': "Accessing build data and insights with Meercode",
                'href': 'UUID-fa640ec3-6a1b-3975-89a3-5ef429bd5db4.html#UUID-692f92e7-a1e6-3e47-4bf2-161c711554b2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Accessing build data and insights with Meercode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][540]= {
                'title': "Code signing",
                'href': 'UUID-3484139f-bf0b-0901-5812-ed6bef2e045a.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][541]= {
                'title': "iOS code signing",
                'href': 'UUID-3484139f-bf0b-0901-5812-ed6bef2e045a.html#UUID-3484139f-bf0b-0901-5812-ed6bef2e045a_section-idm4631258650456032720420480273'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][542]= {
                'title': "Android code signing",
                'href': 'UUID-3484139f-bf0b-0901-5812-ed6bef2e045a.html#UUID-3484139f-bf0b-0901-5812-ed6bef2e045a_section-idm4611295222790432720420899685'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][543]= {
                'title': "Android code signing",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][544]= {
                'title': "Android code signing using the Android Sign Step",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-2e21aae0-9a1d-3a23-2566-b47b39517386'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing using the Android Sign Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][545]= {
                'title': "Android code signing with Android Studio",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-b9c15f8a-6a28-c2a8-f39f-6a59b3836210'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing with Android Studio"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][546]= {
                'title': "Android code signing in Gradle",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-7841a1b6-ed2e-a81f-0f97-021feb1fb3ef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing in Gradle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][547]= {
                'title': "Downloading a keystore file from Bitrise during a build",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-722d5ed2-cf59-64e1-9f0c-141b582b4286'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Downloading a keystore file from Bitrise during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][548]= {
                'title': "iOS code signing",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][549]= {
                'title': "Collecting and exporting code signing files with codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][550]= {
                'title': "Collecting and uploading the files with codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-e3e1f1f9-1d57-0ddf-22ae-75709e9e60a1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Collecting and uploading the files with codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][551]= {
                'title': "Scanning for UITest targets",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-857b49b1-2d30-83de-f51a-c55b614f4db9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Scanning for UITest targets"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][552]= {
                'title': "Troubleshooting the UITest scanner",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ec0d2ec2-2250-598d-e765-ebff2386b661'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Troubleshooting the UITest scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][553]= {
                'title': "Manually installing and using codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ee2191b2-1b18-41b3-0920-6c39fdb8d03e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Manually installing and using codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][554]= {
                'title': "Best practices of using codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-cdf21997-fc3d-7f9a-0fc5-17c0409684a2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Best practices of using codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][555]= {
                'title': "iOS code signing with automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][556]= {
                'title': "Uploading iOS code signing certificates to Bitrise",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-b18b6783-91e1-6655-e348-55aa94c78b4b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Uploading iOS code signing certificates to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][557]= {
                'title': "Apple services authentication for automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-9933ca45-16f5-f843-cd89-fc60c14a53a6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Apple services authentication for automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][558]= {
                'title': "Configuring the Steps for automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-50ad06ea-5990-80ef-ee00-17290556beec'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][559]= {
                'title': "Using the Xcode Steps",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_section-idm4531463823771232938467170336'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning \/ Using the Xcode Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][560]= {
                'title': "Using the Manage iOS Code Signing Step",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_section-idm460333175801923293847385194'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning \/ Using the Manage iOS Code Signing Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][561]= {
                'title': "iOS code signing with manual provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-d922bd20-547e-46fc-320e-d0b8f0516e91'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with manual provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][562]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-e5969215-aa49-6397-94af-4dec8be98576'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][563]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-e5969215-aa49-6397-94af-4dec8be98576_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][564]= {
                'title': "Signing an IPA with multiple code signing identities",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-85371564-20bc-a4cb-9a8c-9cf56a75246e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Signing an IPA with multiple code signing identities"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][565]= {
                'title': "iOS code signing for Ionic and Cordova projects",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][566]= {
                'title': "Ionic\/Cordova code signing with manual code signing asset management",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][567]= {
                'title': "Ionic\/Cordova code signing with automatic code signing asset management",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-795d5e81-95ea-08e8-67b3-15c270197945'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][568]= {
                'title': "Protecting your code signing files",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ffcbaa59-7f2e-d445-ebf8-de8bc39fcc18'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Protecting your code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][569]= {
                'title': "Generating iOS code signing files",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][570]= {
                'title': "Generating a code signing certificate with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-9e82b1b1-5143-89c0-6195-4b1cbc410574'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][571]= {
                'title': "Generating a code signing certificate manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e62d3745-3248-323a-5d7a-837326bb5c86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][572]= {
                'title': "Generating a provisioning profile with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-72bd4bb7-5831-63a9-ae12-c71c284c5984'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][573]= {
                'title': "Generating a provisioning profile manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e163f6a3-185f-d8a3-96b8-7bad638c86e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][574]= {
                'title': "Setting up an App ID",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_section-idm4596377503595232720739603142'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually \/ Setting up an App ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][575]= {
                'title': "Generating a provisioning profile",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_section-idm4659050095123232720739876939'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually \/ Generating a provisioning profile"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][576]= {
                'title': "Exporting iOS code signing files manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][577]= {
                'title': "Exporting iOS code signing certificates with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-a941d6cd-2d84-972c-7859-f4c007294e61'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][578]= {
                'title': "Exporting iOS code signing certificates manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-ff77eda0-2726-da04-855b-26a1ae74b4b4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][579]= {
                'title': "Exporting iOS provisioning profiles with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-40709ae1-ea68-0a3b-6743-7ae374121606'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][580]= {
                'title': "Exporting iOS provisioning profiles manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-03251887-3c43-8d50-71dd-27db68353791'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][581]= {
                'title': "Troubleshooting iOS code signing",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][582]= {
                'title': "Code signing and clean virtual machines",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-58f17e66-d8d7-a855-e055-c3ade8599f04'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Code signing and clean virtual machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][583]= {
                'title': "iOS code signing Steps fail",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-dc3a6b58-241e-62df-706b-e46f1e3ca2d4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ iOS code signing Steps fail"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][584]= {
                'title': "File count limit on provisioning profiles",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-7139629d-1cf8-8544-9098-5c0b4ea31562'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ File count limit on provisioning profiles"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][585]= {
                'title': "Could not install the app on a device",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-6375a4fd-b363-250d-a56e-9b80ca7a6109'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Could not install the app on a device"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][543]= {
                'title': "Android code signing",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][544]= {
                'title': "Android code signing using the Android Sign Step",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-2e21aae0-9a1d-3a23-2566-b47b39517386'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing using the Android Sign Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][545]= {
                'title': "Android code signing with Android Studio",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-b9c15f8a-6a28-c2a8-f39f-6a59b3836210'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing with Android Studio"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][546]= {
                'title': "Android code signing in Gradle",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-7841a1b6-ed2e-a81f-0f97-021feb1fb3ef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing in Gradle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][547]= {
                'title': "Downloading a keystore file from Bitrise during a build",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-722d5ed2-cf59-64e1-9f0c-141b582b4286'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Downloading a keystore file from Bitrise during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][544]= {
                'title': "Android code signing using the Android Sign Step",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-2e21aae0-9a1d-3a23-2566-b47b39517386'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing using the Android Sign Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][545]= {
                'title': "Android code signing with Android Studio",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-b9c15f8a-6a28-c2a8-f39f-6a59b3836210'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing with Android Studio"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][546]= {
                'title': "Android code signing in Gradle",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-7841a1b6-ed2e-a81f-0f97-021feb1fb3ef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing in Gradle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][547]= {
                'title': "Downloading a keystore file from Bitrise during a build",
                'href': 'UUID-62d463ed-a4fe-d98e-5053-e60799de450a.html#UUID-722d5ed2-cf59-64e1-9f0c-141b582b4286'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Downloading a keystore file from Bitrise during a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][548]= {
                'title': "iOS code signing",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][549]= {
                'title': "Collecting and exporting code signing files with codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][550]= {
                'title': "Collecting and uploading the files with codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-e3e1f1f9-1d57-0ddf-22ae-75709e9e60a1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Collecting and uploading the files with codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][551]= {
                'title': "Scanning for UITest targets",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-857b49b1-2d30-83de-f51a-c55b614f4db9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Scanning for UITest targets"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][552]= {
                'title': "Troubleshooting the UITest scanner",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ec0d2ec2-2250-598d-e765-ebff2386b661'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Troubleshooting the UITest scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][553]= {
                'title': "Manually installing and using codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ee2191b2-1b18-41b3-0920-6c39fdb8d03e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Manually installing and using codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][554]= {
                'title': "Best practices of using codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-cdf21997-fc3d-7f9a-0fc5-17c0409684a2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Best practices of using codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][555]= {
                'title': "iOS code signing with automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][556]= {
                'title': "Uploading iOS code signing certificates to Bitrise",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-b18b6783-91e1-6655-e348-55aa94c78b4b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Uploading iOS code signing certificates to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][557]= {
                'title': "Apple services authentication for automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-9933ca45-16f5-f843-cd89-fc60c14a53a6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Apple services authentication for automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][558]= {
                'title': "Configuring the Steps for automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-50ad06ea-5990-80ef-ee00-17290556beec'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][559]= {
                'title': "Using the Xcode Steps",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_section-idm4531463823771232938467170336'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning \/ Using the Xcode Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][560]= {
                'title': "Using the Manage iOS Code Signing Step",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_section-idm460333175801923293847385194'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning \/ Using the Manage iOS Code Signing Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][561]= {
                'title': "iOS code signing with manual provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-d922bd20-547e-46fc-320e-d0b8f0516e91'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with manual provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][562]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-e5969215-aa49-6397-94af-4dec8be98576'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][563]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-e5969215-aa49-6397-94af-4dec8be98576_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][564]= {
                'title': "Signing an IPA with multiple code signing identities",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-85371564-20bc-a4cb-9a8c-9cf56a75246e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Signing an IPA with multiple code signing identities"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][565]= {
                'title': "iOS code signing for Ionic and Cordova projects",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][566]= {
                'title': "Ionic\/Cordova code signing with manual code signing asset management",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][567]= {
                'title': "Ionic\/Cordova code signing with automatic code signing asset management",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-795d5e81-95ea-08e8-67b3-15c270197945'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][568]= {
                'title': "Protecting your code signing files",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ffcbaa59-7f2e-d445-ebf8-de8bc39fcc18'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Protecting your code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][569]= {
                'title': "Generating iOS code signing files",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][570]= {
                'title': "Generating a code signing certificate with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-9e82b1b1-5143-89c0-6195-4b1cbc410574'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][571]= {
                'title': "Generating a code signing certificate manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e62d3745-3248-323a-5d7a-837326bb5c86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][572]= {
                'title': "Generating a provisioning profile with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-72bd4bb7-5831-63a9-ae12-c71c284c5984'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][573]= {
                'title': "Generating a provisioning profile manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e163f6a3-185f-d8a3-96b8-7bad638c86e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][574]= {
                'title': "Setting up an App ID",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_section-idm4596377503595232720739603142'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually \/ Setting up an App ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][575]= {
                'title': "Generating a provisioning profile",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_section-idm4659050095123232720739876939'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually \/ Generating a provisioning profile"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][576]= {
                'title': "Exporting iOS code signing files manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][577]= {
                'title': "Exporting iOS code signing certificates with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-a941d6cd-2d84-972c-7859-f4c007294e61'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][578]= {
                'title': "Exporting iOS code signing certificates manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-ff77eda0-2726-da04-855b-26a1ae74b4b4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][579]= {
                'title': "Exporting iOS provisioning profiles with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-40709ae1-ea68-0a3b-6743-7ae374121606'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][580]= {
                'title': "Exporting iOS provisioning profiles manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-03251887-3c43-8d50-71dd-27db68353791'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][581]= {
                'title': "Troubleshooting iOS code signing",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][582]= {
                'title': "Code signing and clean virtual machines",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-58f17e66-d8d7-a855-e055-c3ade8599f04'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Code signing and clean virtual machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][583]= {
                'title': "iOS code signing Steps fail",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-dc3a6b58-241e-62df-706b-e46f1e3ca2d4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ iOS code signing Steps fail"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][584]= {
                'title': "File count limit on provisioning profiles",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-7139629d-1cf8-8544-9098-5c0b4ea31562'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ File count limit on provisioning profiles"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][585]= {
                'title': "Could not install the app on a device",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-6375a4fd-b363-250d-a56e-9b80ca7a6109'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Could not install the app on a device"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][549]= {
                'title': "Collecting and exporting code signing files with codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][550]= {
                'title': "Collecting and uploading the files with codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-e3e1f1f9-1d57-0ddf-22ae-75709e9e60a1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Collecting and uploading the files with codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][551]= {
                'title': "Scanning for UITest targets",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-857b49b1-2d30-83de-f51a-c55b614f4db9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Scanning for UITest targets"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][552]= {
                'title': "Troubleshooting the UITest scanner",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ec0d2ec2-2250-598d-e765-ebff2386b661'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Troubleshooting the UITest scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][553]= {
                'title': "Manually installing and using codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ee2191b2-1b18-41b3-0920-6c39fdb8d03e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Manually installing and using codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][554]= {
                'title': "Best practices of using codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-cdf21997-fc3d-7f9a-0fc5-17c0409684a2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Best practices of using codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][550]= {
                'title': "Collecting and uploading the files with codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-e3e1f1f9-1d57-0ddf-22ae-75709e9e60a1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Collecting and uploading the files with codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][551]= {
                'title': "Scanning for UITest targets",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-857b49b1-2d30-83de-f51a-c55b614f4db9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Scanning for UITest targets"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][552]= {
                'title': "Troubleshooting the UITest scanner",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ec0d2ec2-2250-598d-e765-ebff2386b661'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Troubleshooting the UITest scanner"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][553]= {
                'title': "Manually installing and using codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ee2191b2-1b18-41b3-0920-6c39fdb8d03e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Manually installing and using codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][554]= {
                'title': "Best practices of using codesigndoc",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-cdf21997-fc3d-7f9a-0fc5-17c0409684a2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Best practices of using codesigndoc"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][555]= {
                'title': "iOS code signing with automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][556]= {
                'title': "Uploading iOS code signing certificates to Bitrise",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-b18b6783-91e1-6655-e348-55aa94c78b4b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Uploading iOS code signing certificates to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][557]= {
                'title': "Apple services authentication for automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-9933ca45-16f5-f843-cd89-fc60c14a53a6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Apple services authentication for automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][558]= {
                'title': "Configuring the Steps for automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-50ad06ea-5990-80ef-ee00-17290556beec'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][559]= {
                'title': "Using the Xcode Steps",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_section-idm4531463823771232938467170336'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning \/ Using the Xcode Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][560]= {
                'title': "Using the Manage iOS Code Signing Step",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_section-idm460333175801923293847385194'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning \/ Using the Manage iOS Code Signing Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][556]= {
                'title': "Uploading iOS code signing certificates to Bitrise",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-b18b6783-91e1-6655-e348-55aa94c78b4b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Uploading iOS code signing certificates to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][557]= {
                'title': "Apple services authentication for automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-9933ca45-16f5-f843-cd89-fc60c14a53a6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Apple services authentication for automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][558]= {
                'title': "Configuring the Steps for automatic provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-50ad06ea-5990-80ef-ee00-17290556beec'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][559]= {
                'title': "Using the Xcode Steps",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_section-idm4531463823771232938467170336'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning \/ Using the Xcode Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][560]= {
                'title': "Using the Manage iOS Code Signing Step",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_section-idm460333175801923293847385194'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning \/ Using the Manage iOS Code Signing Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][561]= {
                'title': "iOS code signing with manual provisioning",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-d922bd20-547e-46fc-320e-d0b8f0516e91'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with manual provisioning"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][562]= {
                'title': "Creating a signed IPA for Xcode projects",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-e5969215-aa49-6397-94af-4dec8be98576'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Creating a signed IPA for Xcode projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][563]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-e5969215-aa49-6397-94af-4dec8be98576_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][563]= {
                'title': "Signing an IPA file with a different team’s code signing file",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-e5969215-aa49-6397-94af-4dec8be98576_UUID-340d099b-119d-d223-51d1-e68e201194e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][564]= {
                'title': "Signing an IPA with multiple code signing identities",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-85371564-20bc-a4cb-9a8c-9cf56a75246e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Signing an IPA with multiple code signing identities"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][565]= {
                'title': "iOS code signing for Ionic and Cordova projects",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][566]= {
                'title': "Ionic\/Cordova code signing with manual code signing asset management",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][567]= {
                'title': "Ionic\/Cordova code signing with automatic code signing asset management",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-795d5e81-95ea-08e8-67b3-15c270197945'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][566]= {
                'title': "Ionic\/Cordova code signing with manual code signing asset management",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][567]= {
                'title': "Ionic\/Cordova code signing with automatic code signing asset management",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-795d5e81-95ea-08e8-67b3-15c270197945'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][568]= {
                'title': "Protecting your code signing files",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-ffcbaa59-7f2e-d445-ebf8-de8bc39fcc18'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Protecting your code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][569]= {
                'title': "Generating iOS code signing files",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][570]= {
                'title': "Generating a code signing certificate with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-9e82b1b1-5143-89c0-6195-4b1cbc410574'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][571]= {
                'title': "Generating a code signing certificate manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e62d3745-3248-323a-5d7a-837326bb5c86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][572]= {
                'title': "Generating a provisioning profile with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-72bd4bb7-5831-63a9-ae12-c71c284c5984'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][573]= {
                'title': "Generating a provisioning profile manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e163f6a3-185f-d8a3-96b8-7bad638c86e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][574]= {
                'title': "Setting up an App ID",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_section-idm4596377503595232720739603142'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually \/ Setting up an App ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][575]= {
                'title': "Generating a provisioning profile",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_section-idm4659050095123232720739876939'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually \/ Generating a provisioning profile"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][570]= {
                'title': "Generating a code signing certificate with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-9e82b1b1-5143-89c0-6195-4b1cbc410574'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][571]= {
                'title': "Generating a code signing certificate manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e62d3745-3248-323a-5d7a-837326bb5c86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][572]= {
                'title': "Generating a provisioning profile with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-72bd4bb7-5831-63a9-ae12-c71c284c5984'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][573]= {
                'title': "Generating a provisioning profile manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e163f6a3-185f-d8a3-96b8-7bad638c86e2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][574]= {
                'title': "Setting up an App ID",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_section-idm4596377503595232720739603142'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually \/ Setting up an App ID"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][575]= {
                'title': "Generating a provisioning profile",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_section-idm4659050095123232720739876939'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually \/ Generating a provisioning profile"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][576]= {
                'title': "Exporting iOS code signing files manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][577]= {
                'title': "Exporting iOS code signing certificates with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-a941d6cd-2d84-972c-7859-f4c007294e61'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][578]= {
                'title': "Exporting iOS code signing certificates manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-ff77eda0-2726-da04-855b-26a1ae74b4b4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][579]= {
                'title': "Exporting iOS provisioning profiles with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-40709ae1-ea68-0a3b-6743-7ae374121606'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][580]= {
                'title': "Exporting iOS provisioning profiles manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-03251887-3c43-8d50-71dd-27db68353791'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][577]= {
                'title': "Exporting iOS code signing certificates with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-a941d6cd-2d84-972c-7859-f4c007294e61'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][578]= {
                'title': "Exporting iOS code signing certificates manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-ff77eda0-2726-da04-855b-26a1ae74b4b4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][579]= {
                'title': "Exporting iOS provisioning profiles with Xcode",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-40709ae1-ea68-0a3b-6743-7ae374121606'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles with Xcode"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][580]= {
                'title': "Exporting iOS provisioning profiles manually",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-03251887-3c43-8d50-71dd-27db68353791'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][581]= {
                'title': "Troubleshooting iOS code signing",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][582]= {
                'title': "Code signing and clean virtual machines",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-58f17e66-d8d7-a855-e055-c3ade8599f04'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Code signing and clean virtual machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][583]= {
                'title': "iOS code signing Steps fail",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-dc3a6b58-241e-62df-706b-e46f1e3ca2d4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ iOS code signing Steps fail"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][584]= {
                'title': "File count limit on provisioning profiles",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-7139629d-1cf8-8544-9098-5c0b4ea31562'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ File count limit on provisioning profiles"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][585]= {
                'title': "Could not install the app on a device",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-6375a4fd-b363-250d-a56e-9b80ca7a6109'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Could not install the app on a device"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][582]= {
                'title': "Code signing and clean virtual machines",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-58f17e66-d8d7-a855-e055-c3ade8599f04'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Code signing and clean virtual machines"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][583]= {
                'title': "iOS code signing Steps fail",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-dc3a6b58-241e-62df-706b-e46f1e3ca2d4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ iOS code signing Steps fail"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][584]= {
                'title': "File count limit on provisioning profiles",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-7139629d-1cf8-8544-9098-5c0b4ea31562'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ File count limit on provisioning profiles"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][585]= {
                'title': "Could not install the app on a device",
                'href': 'UUID-31ae6f50-5e6c-3854-a3ba-3b0c408f2bcf.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-6375a4fd-b363-250d-a56e-9b80ca7a6109'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Could not install the app on a device"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][586]= {
                'title': "Testing",
                'href': 'UUID-cbbfa182-5373-5471-9729-9b972ac7465b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][587]= {
                'title': "iOS testing",
                'href': 'UUID-cbbfa182-5373-5471-9729-9b972ac7465b.html#UUID-cbbfa182-5373-5471-9729-9b972ac7465b_section-idm4582261199457633614655441813'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ iOS testing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][588]= {
                'title': "Android testing",
                'href': 'UUID-cbbfa182-5373-5471-9729-9b972ac7465b.html#UUID-cbbfa182-5373-5471-9729-9b972ac7465b_section-idm4554386107363233615372540591'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Android testing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][589]= {
                'title': "Flutter testing",
                'href': 'UUID-cbbfa182-5373-5471-9729-9b972ac7465b.html#UUID-cbbfa182-5373-5471-9729-9b972ac7465b_section-idm4588064863241633615395298671'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Flutter testing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][590]= {
                'title': "React Native testing",
                'href': 'UUID-cbbfa182-5373-5471-9729-9b972ac7465b.html#UUID-cbbfa182-5373-5471-9729-9b972ac7465b_section-idm453276716924643361540097373'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ React Native testing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][591]= {
                'title': "Device testing with Firebase",
                'href': 'UUID-cbbfa182-5373-5471-9729-9b972ac7465b.html#UUID-cbbfa182-5373-5471-9729-9b972ac7465b_section-idm4587277360200033615408088734'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing with Firebase"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][592]= {
                'title': "Test Reports",
                'href': 'UUID-cbbfa182-5373-5471-9729-9b972ac7465b.html#UUID-cbbfa182-5373-5471-9729-9b972ac7465b_section-idm4589017689313633615416505697'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][593]= {
                'title': "Test Reports",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][594]= {
                'title': "Test reports overview",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-2c3972ff-95f4-3660-884c-b696dbc87f25'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Test reports overview"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][595]= {
                'title': "Configuring Test Reports",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-7480e49a-3917-ed5a-4f69-17e19c0e1845'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Configuring Test Reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][596]= {
                'title': "Checking test results",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Checking test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][597]= {
                'title': "Downloading files",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-0072fe7f-2cb0-6020-9829-461e0a9beee5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Downloading files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][598]= {
                'title': "Exporting to Test Reports from any Step",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][599]= {
                'title': "Using the Export test results to the Test reports add-on Step",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-a6dae44f-31ae-3fe7-41f2-e2e5756823c0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Using the Export test results to the Test reports add-on Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][600]= {
                'title': "Using custom scripts to export test results",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-d3e4657d-0f72-02a5-f457-f941aa8675c9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Using custom scripts to export test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][601]= {
                'title': "Exporting screenshots and other images to Test Reports",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-99bb841d-a494-07cb-02ea-4c15c0db5704'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Exporting screenshots and other images to Test Reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][602]= {
                'title': "Running unit and UI tests for iOS apps",
                'href': 'UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][603]= {
                'title': "Rerunning failed tests (Not available in Xcode 13)",
                'href': 'UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33.html#UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33_UUID-1b8cd371-4081-524f-2d86-6aeab9642bf2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps \/ Rerunning failed tests (Not available in Xcode 13)"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][604]= {
                'title': "Test Repetitions",
                'href': 'UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33.html#UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33_UUID-721e2b82-8d91-bd7c-a21c-84c5e6bab138'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps \/ Test Repetitions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][605]= {
                'title': "Installing an .ipa file",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][606]= {
                'title': "Prepping for installation",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-0d5d7993-7b2f-0104-88df-38463fb7f6a7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Prepping for installation"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][607]= {
                'title': "Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-56878309-808f-f9fc-bfe6-2670f1eff432'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Prepping for installation \/ Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][608]= {
                'title': "Installing an .ipa file on test devices from the public install page",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-67559f9c-572d-1b5f-7a5d-911a01423cb6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][609]= {
                'title': "Installing an app on a test device without a Bitrise account",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-6c53514c-0bd8-f14e-a291-9a2f14d69f76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][610]= {
                'title': "Installing an app on a test device not registered to Bitrise",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account \/ Installing an app on a test device not registered to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][611]= {
                'title': "Installing an app on a test device not registered to Bitrise",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device not registered to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][612]= {
                'title': "Installing an .ipa file on test devices from the Artifacts tab",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-d3b31452-4471-4d11-e253-c673408140f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the Artifacts tab"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][613]= {
                'title': "Registering test devices for iOS apps",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][614]= {
                'title': "Register an iOS device using Safari",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-396a5bdf-f35f-cb12-30b3-bff3606db38e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Register an iOS device using Safari"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][615]= {
                'title': "Register a test device manually",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-7324669b-9b5e-1b90-9df3-92ddce0b3b5a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Register a test device manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][616]= {
                'title': "Checking the available test devices for an app",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-ea7efa99-ea0f-d7b9-11b0-5a303b71a152'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Checking the available test devices for an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][617]= {
                'title': "Registering devices on the Apple Developer Portal with the Xcode Archive Step",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-7898f956-b06e-c2c1-2217-b1e3e3ea12eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][618]= {
                'title': "Registering all devices on the Apple Developer Portal",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_section-idm4551371088020833759178339553'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step \/ Registering all devices on the Apple Developer Portal"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][619]= {
                'title': "Registering a selection of devices on the Apple Developer Portal",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_section-idm4606595255272033759179376662'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step \/ Registering a selection of devices on the Apple Developer Portal"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][620]= {
                'title': "Device testing for iOS",
                'href': 'UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][621]= {
                'title': "Running device tests with Firebase for iOS apps",
                'href': 'UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1.html#UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1_UUID-f5132e42-4cdc-2fdb-93da-bb091bf3cfcd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS \/ Running device tests with Firebase for iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][622]= {
                'title': "Checking test results",
                'href': 'UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1.html#UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS \/ Checking test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][623]= {
                'title': "Running Android unit tests",
                'href': 'UUID-aef3a46c-6266-9e04-37ea-a33c3bd19a67.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Android unit tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][624]= {
                'title': "Device testing for Android",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][625]= {
                'title': "Running tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-62d837d0-e26b-a973-b86e-af97daffe756'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][626]= {
                'title': "Running robo tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-8efdb155-6a91-51d4-9444-a7f474c98b11'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][627]= {
                'title': "Setting user input with Robo directives for successful robo tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-b0375600-59f4-d513-9205-b1f7733c5541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests \/ Setting user input with Robo directives for successful robo tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][628]= {
                'title': "Running instrumentation tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-6e3a8868-ae45-f4a2-c334-dd16be0f7e75'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running instrumentation tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][629]= {
                'title': "Checking test results",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Checking test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][630]= {
                'title': "Running tests in the Visual Studio App Center",
                'href': 'UUID-4e1444ac-fffa-efb0-328d-4624390aecfc.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running tests in the Visual Studio App Center"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][631]= {
                'title': "Running Detox tests on Bitrise",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][632]= {
                'title': "Before you start",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-24923a54-abc4-8634-c049-8ad6b70ed917'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Before you start"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][633]= {
                'title': "Running a Detox test",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-0a25c74a-1369-5a42-313c-7d4643d1c329'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Running a Detox test"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][634]= {
                'title': "Troubleshooting Detox tests",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-628039a1-e3c6-4c60-6fae-3e0e6e7aaa60'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Troubleshooting Detox tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][635]= {
                'title': "Measuring your code coverage with Codecov",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][636]= {
                'title': "Integrating Codecov with Bitrise",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-f1a3a78a-78af-0d01-0d65-1f0e9a95b4b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ Integrating Codecov with Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][637]= {
                'title': "Viewing your coverage reports on Codecov",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-2d83a417-93d1-5a39-5c28-74bf981de276'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ Viewing your coverage reports on Codecov"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][638]= {
                'title': "What's next?",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-4fa0c9d4-d518-63d4-4c1b-7c66136070da'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ What's next?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][593]= {
                'title': "Test Reports",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][594]= {
                'title': "Test reports overview",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-2c3972ff-95f4-3660-884c-b696dbc87f25'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Test reports overview"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][595]= {
                'title': "Configuring Test Reports",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-7480e49a-3917-ed5a-4f69-17e19c0e1845'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Configuring Test Reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][596]= {
                'title': "Checking test results",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Checking test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][597]= {
                'title': "Downloading files",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-0072fe7f-2cb0-6020-9829-461e0a9beee5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Downloading files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][594]= {
                'title': "Test reports overview",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-2c3972ff-95f4-3660-884c-b696dbc87f25'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Test reports overview"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][595]= {
                'title': "Configuring Test Reports",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-7480e49a-3917-ed5a-4f69-17e19c0e1845'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Configuring Test Reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][596]= {
                'title': "Checking test results",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Checking test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][597]= {
                'title': "Downloading files",
                'href': 'UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-0072fe7f-2cb0-6020-9829-461e0a9beee5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Downloading files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][598]= {
                'title': "Exporting to Test Reports from any Step",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][599]= {
                'title': "Using the Export test results to the Test reports add-on Step",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-a6dae44f-31ae-3fe7-41f2-e2e5756823c0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Using the Export test results to the Test reports add-on Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][600]= {
                'title': "Using custom scripts to export test results",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-d3e4657d-0f72-02a5-f457-f941aa8675c9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Using custom scripts to export test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][601]= {
                'title': "Exporting screenshots and other images to Test Reports",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-99bb841d-a494-07cb-02ea-4c15c0db5704'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Exporting screenshots and other images to Test Reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][599]= {
                'title': "Using the Export test results to the Test reports add-on Step",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-a6dae44f-31ae-3fe7-41f2-e2e5756823c0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Using the Export test results to the Test reports add-on Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][600]= {
                'title': "Using custom scripts to export test results",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-d3e4657d-0f72-02a5-f457-f941aa8675c9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Using custom scripts to export test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][601]= {
                'title': "Exporting screenshots and other images to Test Reports",
                'href': 'UUID-19be1017-9668-f17a-1034-b76f08805e49.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-99bb841d-a494-07cb-02ea-4c15c0db5704'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Exporting screenshots and other images to Test Reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][602]= {
                'title': "Running unit and UI tests for iOS apps",
                'href': 'UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][603]= {
                'title': "Rerunning failed tests (Not available in Xcode 13)",
                'href': 'UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33.html#UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33_UUID-1b8cd371-4081-524f-2d86-6aeab9642bf2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps \/ Rerunning failed tests (Not available in Xcode 13)"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][604]= {
                'title': "Test Repetitions",
                'href': 'UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33.html#UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33_UUID-721e2b82-8d91-bd7c-a21c-84c5e6bab138'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps \/ Test Repetitions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][603]= {
                'title': "Rerunning failed tests (Not available in Xcode 13)",
                'href': 'UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33.html#UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33_UUID-1b8cd371-4081-524f-2d86-6aeab9642bf2'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps \/ Rerunning failed tests (Not available in Xcode 13)"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][604]= {
                'title': "Test Repetitions",
                'href': 'UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33.html#UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33_UUID-721e2b82-8d91-bd7c-a21c-84c5e6bab138'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps \/ Test Repetitions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][605]= {
                'title': "Installing an .ipa file",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][606]= {
                'title': "Prepping for installation",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-0d5d7993-7b2f-0104-88df-38463fb7f6a7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Prepping for installation"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][607]= {
                'title': "Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-56878309-808f-f9fc-bfe6-2670f1eff432'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Prepping for installation \/ Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][608]= {
                'title': "Installing an .ipa file on test devices from the public install page",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-67559f9c-572d-1b5f-7a5d-911a01423cb6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][609]= {
                'title': "Installing an app on a test device without a Bitrise account",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-6c53514c-0bd8-f14e-a291-9a2f14d69f76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][610]= {
                'title': "Installing an app on a test device not registered to Bitrise",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account \/ Installing an app on a test device not registered to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][611]= {
                'title': "Installing an app on a test device not registered to Bitrise",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device not registered to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][612]= {
                'title': "Installing an .ipa file on test devices from the Artifacts tab",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-d3b31452-4471-4d11-e253-c673408140f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the Artifacts tab"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][606]= {
                'title': "Prepping for installation",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-0d5d7993-7b2f-0104-88df-38463fb7f6a7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Prepping for installation"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][607]= {
                'title': "Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-56878309-808f-f9fc-bfe6-2670f1eff432'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Prepping for installation \/ Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][607]= {
                'title': "Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-56878309-808f-f9fc-bfe6-2670f1eff432'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Prepping for installation \/ Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][608]= {
                'title': "Installing an .ipa file on test devices from the public install page",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-67559f9c-572d-1b5f-7a5d-911a01423cb6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][609]= {
                'title': "Installing an app on a test device without a Bitrise account",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-6c53514c-0bd8-f14e-a291-9a2f14d69f76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][610]= {
                'title': "Installing an app on a test device not registered to Bitrise",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account \/ Installing an app on a test device not registered to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][611]= {
                'title': "Installing an app on a test device not registered to Bitrise",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device not registered to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][609]= {
                'title': "Installing an app on a test device without a Bitrise account",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-6c53514c-0bd8-f14e-a291-9a2f14d69f76'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][610]= {
                'title': "Installing an app on a test device not registered to Bitrise",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account \/ Installing an app on a test device not registered to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][610]= {
                'title': "Installing an app on a test device not registered to Bitrise",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account \/ Installing an app on a test device not registered to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][611]= {
                'title': "Installing an app on a test device not registered to Bitrise",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device not registered to Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][612]= {
                'title': "Installing an .ipa file on test devices from the Artifacts tab",
                'href': 'UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-d3b31452-4471-4d11-e253-c673408140f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the Artifacts tab"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][613]= {
                'title': "Registering test devices for iOS apps",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][614]= {
                'title': "Register an iOS device using Safari",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-396a5bdf-f35f-cb12-30b3-bff3606db38e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Register an iOS device using Safari"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][615]= {
                'title': "Register a test device manually",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-7324669b-9b5e-1b90-9df3-92ddce0b3b5a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Register a test device manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][616]= {
                'title': "Checking the available test devices for an app",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-ea7efa99-ea0f-d7b9-11b0-5a303b71a152'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Checking the available test devices for an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][617]= {
                'title': "Registering devices on the Apple Developer Portal with the Xcode Archive Step",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-7898f956-b06e-c2c1-2217-b1e3e3ea12eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][618]= {
                'title': "Registering all devices on the Apple Developer Portal",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_section-idm4551371088020833759178339553'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step \/ Registering all devices on the Apple Developer Portal"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][619]= {
                'title': "Registering a selection of devices on the Apple Developer Portal",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_section-idm4606595255272033759179376662'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step \/ Registering a selection of devices on the Apple Developer Portal"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][614]= {
                'title': "Register an iOS device using Safari",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-396a5bdf-f35f-cb12-30b3-bff3606db38e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Register an iOS device using Safari"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][615]= {
                'title': "Register a test device manually",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-7324669b-9b5e-1b90-9df3-92ddce0b3b5a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Register a test device manually"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][616]= {
                'title': "Checking the available test devices for an app",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-ea7efa99-ea0f-d7b9-11b0-5a303b71a152'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Checking the available test devices for an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][617]= {
                'title': "Registering devices on the Apple Developer Portal with the Xcode Archive Step",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-7898f956-b06e-c2c1-2217-b1e3e3ea12eb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][618]= {
                'title': "Registering all devices on the Apple Developer Portal",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_section-idm4551371088020833759178339553'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step \/ Registering all devices on the Apple Developer Portal"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][619]= {
                'title': "Registering a selection of devices on the Apple Developer Portal",
                'href': 'UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_section-idm4606595255272033759179376662'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step \/ Registering a selection of devices on the Apple Developer Portal"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][620]= {
                'title': "Device testing for iOS",
                'href': 'UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][621]= {
                'title': "Running device tests with Firebase for iOS apps",
                'href': 'UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1.html#UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1_UUID-f5132e42-4cdc-2fdb-93da-bb091bf3cfcd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS \/ Running device tests with Firebase for iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][622]= {
                'title': "Checking test results",
                'href': 'UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1.html#UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS \/ Checking test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][621]= {
                'title': "Running device tests with Firebase for iOS apps",
                'href': 'UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1.html#UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1_UUID-f5132e42-4cdc-2fdb-93da-bb091bf3cfcd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS \/ Running device tests with Firebase for iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][622]= {
                'title': "Checking test results",
                'href': 'UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1.html#UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS \/ Checking test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][623]= {
                'title': "Running Android unit tests",
                'href': 'UUID-aef3a46c-6266-9e04-37ea-a33c3bd19a67.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Android unit tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][624]= {
                'title': "Device testing for Android",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][625]= {
                'title': "Running tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-62d837d0-e26b-a973-b86e-af97daffe756'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][626]= {
                'title': "Running robo tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-8efdb155-6a91-51d4-9444-a7f474c98b11'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][627]= {
                'title': "Setting user input with Robo directives for successful robo tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-b0375600-59f4-d513-9205-b1f7733c5541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests \/ Setting user input with Robo directives for successful robo tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][628]= {
                'title': "Running instrumentation tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-6e3a8868-ae45-f4a2-c334-dd16be0f7e75'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running instrumentation tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][629]= {
                'title': "Checking test results",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Checking test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][625]= {
                'title': "Running tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-62d837d0-e26b-a973-b86e-af97daffe756'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][626]= {
                'title': "Running robo tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-8efdb155-6a91-51d4-9444-a7f474c98b11'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][627]= {
                'title': "Setting user input with Robo directives for successful robo tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-b0375600-59f4-d513-9205-b1f7733c5541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests \/ Setting user input with Robo directives for successful robo tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][626]= {
                'title': "Running robo tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-8efdb155-6a91-51d4-9444-a7f474c98b11'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][627]= {
                'title': "Setting user input with Robo directives for successful robo tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-b0375600-59f4-d513-9205-b1f7733c5541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests \/ Setting user input with Robo directives for successful robo tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][627]= {
                'title': "Setting user input with Robo directives for successful robo tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-b0375600-59f4-d513-9205-b1f7733c5541'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests \/ Setting user input with Robo directives for successful robo tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][628]= {
                'title': "Running instrumentation tests",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-6e3a8868-ae45-f4a2-c334-dd16be0f7e75'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running instrumentation tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][629]= {
                'title': "Checking test results",
                'href': 'UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Checking test results"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][630]= {
                'title': "Running tests in the Visual Studio App Center",
                'href': 'UUID-4e1444ac-fffa-efb0-328d-4624390aecfc.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running tests in the Visual Studio App Center"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][631]= {
                'title': "Running Detox tests on Bitrise",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][632]= {
                'title': "Before you start",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-24923a54-abc4-8634-c049-8ad6b70ed917'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Before you start"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][633]= {
                'title': "Running a Detox test",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-0a25c74a-1369-5a42-313c-7d4643d1c329'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Running a Detox test"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][634]= {
                'title': "Troubleshooting Detox tests",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-628039a1-e3c6-4c60-6fae-3e0e6e7aaa60'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Troubleshooting Detox tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][632]= {
                'title': "Before you start",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-24923a54-abc4-8634-c049-8ad6b70ed917'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Before you start"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][633]= {
                'title': "Running a Detox test",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-0a25c74a-1369-5a42-313c-7d4643d1c329'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Running a Detox test"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][634]= {
                'title': "Troubleshooting Detox tests",
                'href': 'UUID-a1884560-256b-1ed2-8610-c0f75ad7722c.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-628039a1-e3c6-4c60-6fae-3e0e6e7aaa60'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Troubleshooting Detox tests"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][635]= {
                'title': "Measuring your code coverage with Codecov",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][636]= {
                'title': "Integrating Codecov with Bitrise",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-f1a3a78a-78af-0d01-0d65-1f0e9a95b4b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ Integrating Codecov with Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][637]= {
                'title': "Viewing your coverage reports on Codecov",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-2d83a417-93d1-5a39-5c28-74bf981de276'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ Viewing your coverage reports on Codecov"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][638]= {
                'title': "What's next?",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-4fa0c9d4-d518-63d4-4c1b-7c66136070da'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ What's next?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][636]= {
                'title': "Integrating Codecov with Bitrise",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-f1a3a78a-78af-0d01-0d65-1f0e9a95b4b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ Integrating Codecov with Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][637]= {
                'title': "Viewing your coverage reports on Codecov",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-2d83a417-93d1-5a39-5c28-74bf981de276'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ Viewing your coverage reports on Codecov"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][638]= {
                'title': "What's next?",
                'href': 'UUID-a0825290-23c2-2f73-ee6b-49f79247bb96.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-4fa0c9d4-d518-63d4-4c1b-7c66136070da'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ What's next?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][639]= {
                'title': "Deploying",
                'href': 'UUID-598994c2-fd12-55e0-97e5-c8a6e309c27b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][640]= {
                'title': "Deploying Android apps",
                'href': 'UUID-598994c2-fd12-55e0-97e5-c8a6e309c27b.html#UUID-598994c2-fd12-55e0-97e5-c8a6e309c27b_section-idm4608508127177634306819235491'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying Android apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][641]= {
                'title': "Deploying iOS apps",
                'href': 'UUID-598994c2-fd12-55e0-97e5-c8a6e309c27b.html#UUID-598994c2-fd12-55e0-97e5-c8a6e309c27b_section-idm4587237415579234306820826736'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying iOS apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][642]= {
                'title': "Android deployment",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][643]= {
                'title': "Deploying Android apps to Bitrise and Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][644]= {
                'title': "Setting up Google Play API access",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-055cf6ac-7b7e-3f19-38d5-c7a1a6746a03'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play API access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][645]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][646]= {
                'title': "Deploying an Android app to bitrise.io",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-b3cbb2a1-2ef0-5e48-9204-a678f1c6ce66'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying an Android app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][647]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][648]= {
                'title': "Deploying apps to Huawei AppGallery",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-b6b8ba82-f3da-ff8c-e995-e74faf58f79e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying apps to Huawei AppGallery"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][649]= {
                'title': "Generate and deploy multiple flavor APKs in a single Workflow",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][650]= {
                'title': "Generating multi-flavor APKs",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-e01a2fbb-afa0-55b7-79aa-dd38498e5644'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Generating multi-flavor APKs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][651]= {
                'title': "Signing and deploying multi-flavor APKs",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-2f396523-28fc-0362-cc56-cdf8f8ecfa87'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Signing and deploying multi-flavor APKs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][652]= {
                'title': "Generating and deploying Android app bundles",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][653]= {
                'title': "Generating an Android App Bundle file",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-1c5e2e5c-e73a-6f92-75ba-5b5843287cc6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][654]= {
                'title': "Using the Gradle Runner Step",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_section-idm4483122772518432719033951925'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file \/ Using the Gradle Runner Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][655]= {
                'title': "Using the Android Build Step",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_section-idm4599016489129632719034081695'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file \/ Using the Android Build Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][656]= {
                'title': "Signing an Android App bundle",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-7bfb8254-55fc-7e3e-fc87-1ea77e2c303f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Signing an Android App bundle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][657]= {
                'title': "Deploying your Android App Bundle to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-56c34684-b773-46d1-8748-8f2778180bc9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][658]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][659]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][660]= {
                'title': "Exporting a universal APK from an AAB",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-f6e9580b-c503-3150-da84-f4fa1c5b65e9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Exporting a universal APK from an AAB"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][661]= {
                'title': "iOS deployment",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][662]= {
                'title': "Deploying an iOS app to Bitrise.io",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-3f3405ce-152a-6349-2582-bb0905dd710b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to Bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][663]= {
                'title': "Deploying an iOS app for external testing",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-8bafbe64-9d97-01ef-e678-a24c876e2488'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for external testing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][664]= {
                'title': "Deploying an iOS app to App Store Connect",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][665]= {
                'title': "Deploy to App Store Connect Steps",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-e8077a88-38e3-10db-2f78-0f43918994e6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploy to App Store Connect Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][666]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][667]= {
                'title': "Deploying an iOS app for simulators",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][668]= {
                'title': "Building an iOS app for a simulator",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-2ac56b5f-bba8-41c9-281d-e0420af9e52e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Building an iOS app for a simulator"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][669]= {
                'title': "Deploying the app to Appetize.io",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-19c633be-c25f-71fd-6454-0d7a4346faa1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Deploying the app to Appetize.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][670]= {
                'title': "Deploying with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][671]= {
                'title': "Getting started with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-ad1f4e44-1477-d993-1ce7-92a881c73f1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Getting started with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][672]= {
                'title': "Configuring an app for publishing with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][673]= {
                'title': "Exposing a Workflow's artifacts to Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-9899bc0c-896c-5947-b23f-7327bb534cbb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Exposing a Workflow's artifacts to Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][674]= {
                'title': "Code signing files",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-7979a696-a0d0-396a-49d9-1c507892d8ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][675]= {
                'title': "Installing an app on a test device with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][676]= {
                'title': "Accessing the public install page in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-9f72727d-0d4e-fbed-217f-17929ad6b467'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Accessing the public install page in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][677]= {
                'title': "Installing directly from Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-d2f68068-d504-9735-c7a8-9b909fbb2950'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Installing directly from Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][678]= {
                'title': "Publishing an app to a store with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][679]= {
                'title': "Publishing an iOS app to the App Store with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-b6787265-afea-7bed-b145-8d52da53a5c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an iOS app to the App Store with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][680]= {
                'title': "Publishing an Android app to Google Play with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-df344b9d-32f7-dc8e-8da3-ce4c440522b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an Android app to Google Play with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][681]= {
                'title': "Publishing status and logs",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-1a7f21fc-56c8-8741-99f8-1e82e2a15fe0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing status and logs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][682]= {
                'title': "Using Ship for apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][683]= {
                'title': "Publishing iOS apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-13c17c70-4337-e4e9-a323-c3822efe9b2b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing iOS apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][684]= {
                'title': "Publishing Android apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-38f4a19a-8a66-6fb4-6c50-894356b66ace'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing Android apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][685]= {
                'title': "App details in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][686]= {
                'title': "Adding screenshots or feature graphics",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-7ef1bfe9-69ac-cf70-f064-a9a91d14dd74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Adding screenshots or feature graphics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][687]= {
                'title': "Updating the app's descriptions",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-a04fde18-60a5-91f7-21e4-cb757867c163'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Updating the app's descriptions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][688]= {
                'title': "Ship notifications",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][689]= {
                'title': "Adding a new email address in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-e3f46725-a8cd-f088-9ce1-244b493a84d5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Adding a new email address in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][690]= {
                'title': "Configuring notifications in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-13e2092a-0038-5463-490f-860e4a4ebbef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Configuring notifications in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][691]= {
                'title': "Deploying apps to Applivery",
                'href': 'UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to Applivery"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][692]= {
                'title': "Deploying your app to Applivery",
                'href': 'UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc.html#UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc_section-idm4483122549662432719119080722'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to Applivery \/ Deploying your app to Applivery"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][693]= {
                'title': "Configuring the Applivery Step",
                'href': 'UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc.html#UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc_section-idm4554984308953632719119755255'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to Applivery \/ Configuring the Applivery Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][694]= {
                'title': "Distribution with Applivery",
                'href': 'UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc.html#UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc_section-idm4483123045366432719120618411'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to Applivery \/ Distribution with Applivery"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][695]= {
                'title': "Deploying apps to DeployGate from Bitrise",
                'href': 'UUID-2cf0f826-fe4d-a23d-a986-f6533dd1ec98.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to DeployGate from Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][696]= {
                'title': "Deploying your app to Appaloosa",
                'href': 'UUID-a4f81ac8-cc20-95c3-78aa-6cfa92259424.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying your app to Appaloosa"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][697]= {
                'title': "Deploying to TestFairy with Bitrise",
                'href': 'UUID-75b882c9-9b2e-43f0-9a71-bbd1b94c2e77.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying to TestFairy with Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][642]= {
                'title': "Android deployment",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][643]= {
                'title': "Deploying Android apps to Bitrise and Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][644]= {
                'title': "Setting up Google Play API access",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-055cf6ac-7b7e-3f19-38d5-c7a1a6746a03'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play API access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][645]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][646]= {
                'title': "Deploying an Android app to bitrise.io",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-b3cbb2a1-2ef0-5e48-9204-a678f1c6ce66'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying an Android app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][647]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][648]= {
                'title': "Deploying apps to Huawei AppGallery",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-b6b8ba82-f3da-ff8c-e995-e74faf58f79e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying apps to Huawei AppGallery"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][649]= {
                'title': "Generate and deploy multiple flavor APKs in a single Workflow",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][650]= {
                'title': "Generating multi-flavor APKs",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-e01a2fbb-afa0-55b7-79aa-dd38498e5644'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Generating multi-flavor APKs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][651]= {
                'title': "Signing and deploying multi-flavor APKs",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-2f396523-28fc-0362-cc56-cdf8f8ecfa87'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Signing and deploying multi-flavor APKs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][652]= {
                'title': "Generating and deploying Android app bundles",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][653]= {
                'title': "Generating an Android App Bundle file",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-1c5e2e5c-e73a-6f92-75ba-5b5843287cc6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][654]= {
                'title': "Using the Gradle Runner Step",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_section-idm4483122772518432719033951925'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file \/ Using the Gradle Runner Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][655]= {
                'title': "Using the Android Build Step",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_section-idm4599016489129632719034081695'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file \/ Using the Android Build Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][656]= {
                'title': "Signing an Android App bundle",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-7bfb8254-55fc-7e3e-fc87-1ea77e2c303f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Signing an Android App bundle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][657]= {
                'title': "Deploying your Android App Bundle to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-56c34684-b773-46d1-8748-8f2778180bc9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][658]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][659]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][660]= {
                'title': "Exporting a universal APK from an AAB",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-f6e9580b-c503-3150-da84-f4fa1c5b65e9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Exporting a universal APK from an AAB"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][643]= {
                'title': "Deploying Android apps to Bitrise and Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][644]= {
                'title': "Setting up Google Play API access",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-055cf6ac-7b7e-3f19-38d5-c7a1a6746a03'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play API access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][645]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][646]= {
                'title': "Deploying an Android app to bitrise.io",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-b3cbb2a1-2ef0-5e48-9204-a678f1c6ce66'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying an Android app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][647]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][644]= {
                'title': "Setting up Google Play API access",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-055cf6ac-7b7e-3f19-38d5-c7a1a6746a03'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play API access"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][645]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][646]= {
                'title': "Deploying an Android app to bitrise.io",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-b3cbb2a1-2ef0-5e48-9204-a678f1c6ce66'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying an Android app to bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][647]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][648]= {
                'title': "Deploying apps to Huawei AppGallery",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-b6b8ba82-f3da-ff8c-e995-e74faf58f79e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying apps to Huawei AppGallery"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][649]= {
                'title': "Generate and deploy multiple flavor APKs in a single Workflow",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][650]= {
                'title': "Generating multi-flavor APKs",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-e01a2fbb-afa0-55b7-79aa-dd38498e5644'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Generating multi-flavor APKs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][651]= {
                'title': "Signing and deploying multi-flavor APKs",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-2f396523-28fc-0362-cc56-cdf8f8ecfa87'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Signing and deploying multi-flavor APKs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][650]= {
                'title': "Generating multi-flavor APKs",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-e01a2fbb-afa0-55b7-79aa-dd38498e5644'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Generating multi-flavor APKs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][651]= {
                'title': "Signing and deploying multi-flavor APKs",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-2f396523-28fc-0362-cc56-cdf8f8ecfa87'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Signing and deploying multi-flavor APKs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][652]= {
                'title': "Generating and deploying Android app bundles",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][653]= {
                'title': "Generating an Android App Bundle file",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-1c5e2e5c-e73a-6f92-75ba-5b5843287cc6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][654]= {
                'title': "Using the Gradle Runner Step",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_section-idm4483122772518432719033951925'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file \/ Using the Gradle Runner Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][655]= {
                'title': "Using the Android Build Step",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_section-idm4599016489129632719034081695'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file \/ Using the Android Build Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][656]= {
                'title': "Signing an Android App bundle",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-7bfb8254-55fc-7e3e-fc87-1ea77e2c303f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Signing an Android App bundle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][657]= {
                'title': "Deploying your Android App Bundle to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-56c34684-b773-46d1-8748-8f2778180bc9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][658]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][659]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][653]= {
                'title': "Generating an Android App Bundle file",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-1c5e2e5c-e73a-6f92-75ba-5b5843287cc6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][654]= {
                'title': "Using the Gradle Runner Step",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_section-idm4483122772518432719033951925'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file \/ Using the Gradle Runner Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][655]= {
                'title': "Using the Android Build Step",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_section-idm4599016489129632719034081695'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file \/ Using the Android Build Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][656]= {
                'title': "Signing an Android App bundle",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-7bfb8254-55fc-7e3e-fc87-1ea77e2c303f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Signing an Android App bundle"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][657]= {
                'title': "Deploying your Android App Bundle to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-56c34684-b773-46d1-8748-8f2778180bc9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][658]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][659]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][658]= {
                'title': "Setting up Google Play deployment for the first time",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Setting up Google Play deployment for the first time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][659]= {
                'title': "Deploying to Google Play",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Deploying to Google Play"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][660]= {
                'title': "Exporting a universal APK from an AAB",
                'href': 'UUID-25541ce3-54ac-8236-74ba-60dc65ae3708.html#UUID-f6e9580b-c503-3150-da84-f4fa1c5b65e9'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Exporting a universal APK from an AAB"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][661]= {
                'title': "iOS deployment",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][662]= {
                'title': "Deploying an iOS app to Bitrise.io",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-3f3405ce-152a-6349-2582-bb0905dd710b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to Bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][663]= {
                'title': "Deploying an iOS app for external testing",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-8bafbe64-9d97-01ef-e678-a24c876e2488'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for external testing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][664]= {
                'title': "Deploying an iOS app to App Store Connect",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][665]= {
                'title': "Deploy to App Store Connect Steps",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-e8077a88-38e3-10db-2f78-0f43918994e6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploy to App Store Connect Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][666]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][667]= {
                'title': "Deploying an iOS app for simulators",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][668]= {
                'title': "Building an iOS app for a simulator",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-2ac56b5f-bba8-41c9-281d-e0420af9e52e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Building an iOS app for a simulator"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][669]= {
                'title': "Deploying the app to Appetize.io",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-19c633be-c25f-71fd-6454-0d7a4346faa1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Deploying the app to Appetize.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][662]= {
                'title': "Deploying an iOS app to Bitrise.io",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-3f3405ce-152a-6349-2582-bb0905dd710b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to Bitrise.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][663]= {
                'title': "Deploying an iOS app for external testing",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-8bafbe64-9d97-01ef-e678-a24c876e2488'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for external testing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][664]= {
                'title': "Deploying an iOS app to App Store Connect",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][665]= {
                'title': "Deploy to App Store Connect Steps",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-e8077a88-38e3-10db-2f78-0f43918994e6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploy to App Store Connect Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][666]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][665]= {
                'title': "Deploy to App Store Connect Steps",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-e8077a88-38e3-10db-2f78-0f43918994e6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploy to App Store Connect Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][666]= {
                'title': "Deploying the app to App Store Connect",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-066aad78-034d-c38c-2cb1-6834902c1346'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploying the app to App Store Connect"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][667]= {
                'title': "Deploying an iOS app for simulators",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][668]= {
                'title': "Building an iOS app for a simulator",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-2ac56b5f-bba8-41c9-281d-e0420af9e52e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Building an iOS app for a simulator"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][669]= {
                'title': "Deploying the app to Appetize.io",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-19c633be-c25f-71fd-6454-0d7a4346faa1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Deploying the app to Appetize.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][668]= {
                'title': "Building an iOS app for a simulator",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-2ac56b5f-bba8-41c9-281d-e0420af9e52e'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Building an iOS app for a simulator"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][669]= {
                'title': "Deploying the app to Appetize.io",
                'href': 'UUID-01e36d41-6117-63b8-d37b-7c7d7dac9635.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-19c633be-c25f-71fd-6454-0d7a4346faa1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Deploying the app to Appetize.io"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][670]= {
                'title': "Deploying with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][671]= {
                'title': "Getting started with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-ad1f4e44-1477-d993-1ce7-92a881c73f1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Getting started with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][672]= {
                'title': "Configuring an app for publishing with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][673]= {
                'title': "Exposing a Workflow's artifacts to Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-9899bc0c-896c-5947-b23f-7327bb534cbb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Exposing a Workflow's artifacts to Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][674]= {
                'title': "Code signing files",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-7979a696-a0d0-396a-49d9-1c507892d8ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][675]= {
                'title': "Installing an app on a test device with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][676]= {
                'title': "Accessing the public install page in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-9f72727d-0d4e-fbed-217f-17929ad6b467'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Accessing the public install page in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][677]= {
                'title': "Installing directly from Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-d2f68068-d504-9735-c7a8-9b909fbb2950'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Installing directly from Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][678]= {
                'title': "Publishing an app to a store with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][679]= {
                'title': "Publishing an iOS app to the App Store with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-b6787265-afea-7bed-b145-8d52da53a5c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an iOS app to the App Store with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][680]= {
                'title': "Publishing an Android app to Google Play with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-df344b9d-32f7-dc8e-8da3-ce4c440522b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an Android app to Google Play with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][681]= {
                'title': "Publishing status and logs",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-1a7f21fc-56c8-8741-99f8-1e82e2a15fe0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing status and logs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][682]= {
                'title': "Using Ship for apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][683]= {
                'title': "Publishing iOS apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-13c17c70-4337-e4e9-a323-c3822efe9b2b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing iOS apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][684]= {
                'title': "Publishing Android apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-38f4a19a-8a66-6fb4-6c50-894356b66ace'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing Android apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][685]= {
                'title': "App details in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][686]= {
                'title': "Adding screenshots or feature graphics",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-7ef1bfe9-69ac-cf70-f064-a9a91d14dd74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Adding screenshots or feature graphics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][687]= {
                'title': "Updating the app's descriptions",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-a04fde18-60a5-91f7-21e4-cb757867c163'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Updating the app's descriptions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][688]= {
                'title': "Ship notifications",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][689]= {
                'title': "Adding a new email address in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-e3f46725-a8cd-f088-9ce1-244b493a84d5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Adding a new email address in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][690]= {
                'title': "Configuring notifications in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-13e2092a-0038-5463-490f-860e4a4ebbef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Configuring notifications in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][671]= {
                'title': "Getting started with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-ad1f4e44-1477-d993-1ce7-92a881c73f1d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Getting started with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][672]= {
                'title': "Configuring an app for publishing with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][673]= {
                'title': "Exposing a Workflow's artifacts to Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-9899bc0c-896c-5947-b23f-7327bb534cbb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Exposing a Workflow's artifacts to Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][674]= {
                'title': "Code signing files",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-7979a696-a0d0-396a-49d9-1c507892d8ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][673]= {
                'title': "Exposing a Workflow's artifacts to Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-9899bc0c-896c-5947-b23f-7327bb534cbb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Exposing a Workflow's artifacts to Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][674]= {
                'title': "Code signing files",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-7979a696-a0d0-396a-49d9-1c507892d8ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][675]= {
                'title': "Installing an app on a test device with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][676]= {
                'title': "Accessing the public install page in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-9f72727d-0d4e-fbed-217f-17929ad6b467'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Accessing the public install page in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][677]= {
                'title': "Installing directly from Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-d2f68068-d504-9735-c7a8-9b909fbb2950'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Installing directly from Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][676]= {
                'title': "Accessing the public install page in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-9f72727d-0d4e-fbed-217f-17929ad6b467'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Accessing the public install page in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][677]= {
                'title': "Installing directly from Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-d2f68068-d504-9735-c7a8-9b909fbb2950'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Installing directly from Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][678]= {
                'title': "Publishing an app to a store with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][679]= {
                'title': "Publishing an iOS app to the App Store with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-b6787265-afea-7bed-b145-8d52da53a5c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an iOS app to the App Store with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][680]= {
                'title': "Publishing an Android app to Google Play with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-df344b9d-32f7-dc8e-8da3-ce4c440522b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an Android app to Google Play with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][681]= {
                'title': "Publishing status and logs",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-1a7f21fc-56c8-8741-99f8-1e82e2a15fe0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing status and logs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][679]= {
                'title': "Publishing an iOS app to the App Store with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-b6787265-afea-7bed-b145-8d52da53a5c8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an iOS app to the App Store with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][680]= {
                'title': "Publishing an Android app to Google Play with Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-df344b9d-32f7-dc8e-8da3-ce4c440522b7'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an Android app to Google Play with Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][681]= {
                'title': "Publishing status and logs",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-1a7f21fc-56c8-8741-99f8-1e82e2a15fe0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing status and logs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][682]= {
                'title': "Using Ship for apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][683]= {
                'title': "Publishing iOS apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-13c17c70-4337-e4e9-a323-c3822efe9b2b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing iOS apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][684]= {
                'title': "Publishing Android apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-38f4a19a-8a66-6fb4-6c50-894356b66ace'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing Android apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][683]= {
                'title': "Publishing iOS apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-13c17c70-4337-e4e9-a323-c3822efe9b2b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing iOS apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][684]= {
                'title': "Publishing Android apps built with cross-platform frameworks",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-38f4a19a-8a66-6fb4-6c50-894356b66ace'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing Android apps built with cross-platform frameworks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][685]= {
                'title': "App details in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][686]= {
                'title': "Adding screenshots or feature graphics",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-7ef1bfe9-69ac-cf70-f064-a9a91d14dd74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Adding screenshots or feature graphics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][687]= {
                'title': "Updating the app's descriptions",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-a04fde18-60a5-91f7-21e4-cb757867c163'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Updating the app's descriptions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][686]= {
                'title': "Adding screenshots or feature graphics",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-7ef1bfe9-69ac-cf70-f064-a9a91d14dd74'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Adding screenshots or feature graphics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][687]= {
                'title': "Updating the app's descriptions",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-a04fde18-60a5-91f7-21e4-cb757867c163'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Updating the app's descriptions"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][688]= {
                'title': "Ship notifications",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][689]= {
                'title': "Adding a new email address in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-e3f46725-a8cd-f088-9ce1-244b493a84d5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Adding a new email address in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][690]= {
                'title': "Configuring notifications in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-13e2092a-0038-5463-490f-860e4a4ebbef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Configuring notifications in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][689]= {
                'title': "Adding a new email address in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-e3f46725-a8cd-f088-9ce1-244b493a84d5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Adding a new email address in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][690]= {
                'title': "Configuring notifications in Ship",
                'href': 'UUID-a98fe87f-4567-c925-bb4c-e7305a358f31.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-13e2092a-0038-5463-490f-860e4a4ebbef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Configuring notifications in Ship"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][691]= {
                'title': "Deploying apps to Applivery",
                'href': 'UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to Applivery"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][692]= {
                'title': "Deploying your app to Applivery",
                'href': 'UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc.html#UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc_section-idm4483122549662432719119080722'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to Applivery \/ Deploying your app to Applivery"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][693]= {
                'title': "Configuring the Applivery Step",
                'href': 'UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc.html#UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc_section-idm4554984308953632719119755255'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to Applivery \/ Configuring the Applivery Step"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][694]= {
                'title': "Distribution with Applivery",
                'href': 'UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc.html#UUID-486f03bc-17cb-3874-60ef-9c72c9cac4fc_section-idm4483123045366432719120618411'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to Applivery \/ Distribution with Applivery"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][695]= {
                'title': "Deploying apps to DeployGate from Bitrise",
                'href': 'UUID-2cf0f826-fe4d-a23d-a986-f6533dd1ec98.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to DeployGate from Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][696]= {
                'title': "Deploying your app to Appaloosa",
                'href': 'UUID-a4f81ac8-cc20-95c3-78aa-6cfa92259424.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying your app to Appaloosa"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][697]= {
                'title': "Deploying to TestFairy with Bitrise",
                'href': 'UUID-75b882c9-9b2e-43f0-9a71-bbd1b94c2e77.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying to TestFairy with Bitrise"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][698]= {
                'title': "Insights",
                'href': 'UUID-f98fd069-0d7e-56fa-9ae2-141b5b494a3f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][699]= {
                'title': "How Insights works",
                'href': 'UUID-f98fd069-0d7e-56fa-9ae2-141b5b494a3f.html#UUID-f98fd069-0d7e-56fa-9ae2-141b5b494a3f_section-idm4594098314464032933411789556'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ How Insights works"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][700]= {
                'title': "Git Insights and remote caching",
                'href': 'UUID-f98fd069-0d7e-56fa-9ae2-141b5b494a3f.html#UUID-f98fd069-0d7e-56fa-9ae2-141b5b494a3f_section-idm4571274750044834144481960674'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Git Insights and remote caching"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][701]= {
                'title': "Getting started with Insights",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][702]= {
                'title': "The Overview page",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_section-idm4614490382896032683952174643'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Overview page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][703]= {
                'title': "Accessing the build metrics",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_section-idm4613160037264032683955096804'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Accessing the build metrics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][704]= {
                'title': "Accessing the testing metrics of an app",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_section-idm4601670298880033418783450557'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Accessing the testing metrics of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][705]= {
                'title': "Bottlenecks",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_section-idm4560916135588833418794421783'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Bottlenecks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][706]= {
                'title': "Viewing data from a specific timeframe",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-d108fe20-aedd-0e67-f571-38f246325554'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Viewing data from a specific timeframe"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][707]= {
                'title': "The Dashboards page",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-1953b793-53ca-9704-e7cf-0b295edd53dd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][708]= {
                'title': "Creating a new dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-e049d3aa-7978-94b1-3355-d05599bd70a3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Creating a new dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][709]= {
                'title': "Accessing a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-fdb2dd50-0b5d-a250-9597-97bd64c06096'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Accessing a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][710]= {
                'title': "Adding a chart to a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-6c73f67a-c535-8833-af57-0a84d6dd6ae0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Adding a chart to a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][711]= {
                'title': "Editing a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-9c0e78ee-742c-401d-7013-4e591e3ccefc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Editing a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][712]= {
                'title': "Creating alerts",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-63d13216-f268-3124-87f4-ec4acd75bf9d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Creating alerts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][713]= {
                'title': "Available metrics in Insights",
                'href': 'UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Available metrics in Insights"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][714]= {
                'title': "Build metrics",
                'href': 'UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9.html#UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9_section-idm4547044772640032683972229135'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Available metrics in Insights \/ Build metrics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][715]= {
                'title': "Test metrics",
                'href': 'UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9.html#UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9_section-idm4510933915412833418760519245'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Available metrics in Insights \/ Test metrics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][716]= {
                'title': "Utilization metrics",
                'href': 'UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9.html#UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9_section-idm4561257641988834143040243342'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Available metrics in Insights \/ Utilization metrics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][717]= {
                'title': "Test stats in Insights",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][718]= {
                'title': "Setting up access to test stats",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-ff02c00c-b643-70a4-6cf1-8635f05e01ef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Setting up access to test stats"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][719]= {
                'title': "Accessing the test stats dashboard",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-328ff2bb-f354-53ba-09d6-cf0051913fb6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Accessing the test stats dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][720]= {
                'title': "Filtering test stats",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-75bc3067-3748-0bea-55ea-081104e2e50c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Filtering test stats"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][721]= {
                'title': "Test counts and test summary",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-28c64694-c21b-ee59-07c1-135b076ae445'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Test counts and test summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][722]= {
                'title': "Test case history",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-49f583df-01c5-17fd-5f02-c00c234d4e86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Test case history"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][701]= {
                'title': "Getting started with Insights",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][702]= {
                'title': "The Overview page",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_section-idm4614490382896032683952174643'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Overview page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][703]= {
                'title': "Accessing the build metrics",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_section-idm4613160037264032683955096804'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Accessing the build metrics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][704]= {
                'title': "Accessing the testing metrics of an app",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_section-idm4601670298880033418783450557'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Accessing the testing metrics of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][705]= {
                'title': "Bottlenecks",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_section-idm4560916135588833418794421783'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Bottlenecks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][706]= {
                'title': "Viewing data from a specific timeframe",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-d108fe20-aedd-0e67-f571-38f246325554'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Viewing data from a specific timeframe"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][707]= {
                'title': "The Dashboards page",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-1953b793-53ca-9704-e7cf-0b295edd53dd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][708]= {
                'title': "Creating a new dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-e049d3aa-7978-94b1-3355-d05599bd70a3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Creating a new dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][709]= {
                'title': "Accessing a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-fdb2dd50-0b5d-a250-9597-97bd64c06096'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Accessing a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][710]= {
                'title': "Adding a chart to a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-6c73f67a-c535-8833-af57-0a84d6dd6ae0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Adding a chart to a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][711]= {
                'title': "Editing a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-9c0e78ee-742c-401d-7013-4e591e3ccefc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Editing a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][712]= {
                'title': "Creating alerts",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-63d13216-f268-3124-87f4-ec4acd75bf9d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Creating alerts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][706]= {
                'title': "Viewing data from a specific timeframe",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-d108fe20-aedd-0e67-f571-38f246325554'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Viewing data from a specific timeframe"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][707]= {
                'title': "The Dashboards page",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-1953b793-53ca-9704-e7cf-0b295edd53dd'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][708]= {
                'title': "Creating a new dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-e049d3aa-7978-94b1-3355-d05599bd70a3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Creating a new dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][709]= {
                'title': "Accessing a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-fdb2dd50-0b5d-a250-9597-97bd64c06096'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Accessing a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][710]= {
                'title': "Adding a chart to a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-6c73f67a-c535-8833-af57-0a84d6dd6ae0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Adding a chart to a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][711]= {
                'title': "Editing a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-9c0e78ee-742c-401d-7013-4e591e3ccefc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Editing a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][708]= {
                'title': "Creating a new dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-e049d3aa-7978-94b1-3355-d05599bd70a3'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Creating a new dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][709]= {
                'title': "Accessing a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-fdb2dd50-0b5d-a250-9597-97bd64c06096'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Accessing a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][710]= {
                'title': "Adding a chart to a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-6c73f67a-c535-8833-af57-0a84d6dd6ae0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Adding a chart to a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][711]= {
                'title': "Editing a dashboard",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-9c0e78ee-742c-401d-7013-4e591e3ccefc'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Editing a dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][712]= {
                'title': "Creating alerts",
                'href': 'UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-63d13216-f268-3124-87f4-ec4acd75bf9d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Creating alerts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][713]= {
                'title': "Available metrics in Insights",
                'href': 'UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Available metrics in Insights"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][714]= {
                'title': "Build metrics",
                'href': 'UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9.html#UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9_section-idm4547044772640032683972229135'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Available metrics in Insights \/ Build metrics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][715]= {
                'title': "Test metrics",
                'href': 'UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9.html#UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9_section-idm4510933915412833418760519245'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Available metrics in Insights \/ Test metrics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][716]= {
                'title': "Utilization metrics",
                'href': 'UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9.html#UUID-e92853be-cf2f-bc35-98c1-86b7b5f2a1d9_section-idm4561257641988834143040243342'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Available metrics in Insights \/ Utilization metrics"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][717]= {
                'title': "Test stats in Insights",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][718]= {
                'title': "Setting up access to test stats",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-ff02c00c-b643-70a4-6cf1-8635f05e01ef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Setting up access to test stats"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][719]= {
                'title': "Accessing the test stats dashboard",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-328ff2bb-f354-53ba-09d6-cf0051913fb6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Accessing the test stats dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][720]= {
                'title': "Filtering test stats",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-75bc3067-3748-0bea-55ea-081104e2e50c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Filtering test stats"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][721]= {
                'title': "Test counts and test summary",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-28c64694-c21b-ee59-07c1-135b076ae445'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Test counts and test summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][722]= {
                'title': "Test case history",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-49f583df-01c5-17fd-5f02-c00c234d4e86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Test case history"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][718]= {
                'title': "Setting up access to test stats",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-ff02c00c-b643-70a4-6cf1-8635f05e01ef'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Setting up access to test stats"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][719]= {
                'title': "Accessing the test stats dashboard",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-328ff2bb-f354-53ba-09d6-cf0051913fb6'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Accessing the test stats dashboard"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][720]= {
                'title': "Filtering test stats",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-75bc3067-3748-0bea-55ea-081104e2e50c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Filtering test stats"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][721]= {
                'title': "Test counts and test summary",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-28c64694-c21b-ee59-07c1-135b076ae445'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Test counts and test summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][722]= {
                'title': "Test case history",
                'href': 'UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-49f583df-01c5-17fd-5f02-c00c234d4e86'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Test case history"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][723]= {
                'title': "Bitrise CLI",
                'href': 'UUID-1e7fdeeb-5e8f-3ce1-777f-a4defadc6e4b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][724]= {
                'title': "Installing and updating the Bitrise CLI",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][725]= {
                'title': "Installing the Bitrise CLI with curl",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-22e43ed7-8242-579d-78a0-12b5764dce07'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Installing the Bitrise CLI with curl"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][726]= {
                'title': "Installing the Bitrise CLI with Homebrew",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-f59e42d6-c4f8-02c6-3f57-56d84907ea24'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Installing the Bitrise CLI with Homebrew"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][727]= {
                'title': "Updating the Bitrise CLI",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-e201bbcd-5d8d-31e8-2b80-c4d5dde3605c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Updating the Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][728]= {
                'title': "Adding a new app from a CLI",
                'href': 'UUID-65586a1e-a8a7-e642-a281-bb535f60d8f0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Adding a new app from a CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][729]= {
                'title': "Initializing a Bitrise project locally",
                'href': 'UUID-7266de66-409c-7a30-aa7b-78fb3b32172b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Initializing a Bitrise project locally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][730]= {
                'title': "Installing and upgrading the offline Workflow Editor",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][731]= {
                'title': "Installing the offline Workflow Editor to your computer",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-120c6296-998f-75f6-4037-b0f34fefed49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Installing the offline Workflow Editor to your computer"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][732]= {
                'title': "Starting the offline Workflow Editor",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-e57a19cd-edaf-797a-e014-2b633140e0ed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Starting the offline Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][733]= {
                'title': "Upgrading Workflow Editor version",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-5146514c-45cb-428b-1af8-0b3139d9979b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Upgrading Workflow Editor version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][734]= {
                'title': "Running your first local build with the CLI",
                'href': 'UUID-537e2dfa-a322-df53-a92f-b1f63e99c7d7.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Running your first local build with the CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][735]= {
                'title': "Managing Secrets locally",
                'href': 'UUID-6ee95b9f-a082-3d77-d20e-25be9969faa9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Managing Secrets locally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][724]= {
                'title': "Installing and updating the Bitrise CLI",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][725]= {
                'title': "Installing the Bitrise CLI with curl",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-22e43ed7-8242-579d-78a0-12b5764dce07'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Installing the Bitrise CLI with curl"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][726]= {
                'title': "Installing the Bitrise CLI with Homebrew",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-f59e42d6-c4f8-02c6-3f57-56d84907ea24'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Installing the Bitrise CLI with Homebrew"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][727]= {
                'title': "Updating the Bitrise CLI",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-e201bbcd-5d8d-31e8-2b80-c4d5dde3605c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Updating the Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][725]= {
                'title': "Installing the Bitrise CLI with curl",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-22e43ed7-8242-579d-78a0-12b5764dce07'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Installing the Bitrise CLI with curl"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][726]= {
                'title': "Installing the Bitrise CLI with Homebrew",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-f59e42d6-c4f8-02c6-3f57-56d84907ea24'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Installing the Bitrise CLI with Homebrew"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][727]= {
                'title': "Updating the Bitrise CLI",
                'href': 'UUID-372b2639-babb-6390-d1d2-898e39825d4a.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-e201bbcd-5d8d-31e8-2b80-c4d5dde3605c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Updating the Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][728]= {
                'title': "Adding a new app from a CLI",
                'href': 'UUID-65586a1e-a8a7-e642-a281-bb535f60d8f0.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Adding a new app from a CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][729]= {
                'title': "Initializing a Bitrise project locally",
                'href': 'UUID-7266de66-409c-7a30-aa7b-78fb3b32172b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Initializing a Bitrise project locally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][730]= {
                'title': "Installing and upgrading the offline Workflow Editor",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][731]= {
                'title': "Installing the offline Workflow Editor to your computer",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-120c6296-998f-75f6-4037-b0f34fefed49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Installing the offline Workflow Editor to your computer"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][732]= {
                'title': "Starting the offline Workflow Editor",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-e57a19cd-edaf-797a-e014-2b633140e0ed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Starting the offline Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][733]= {
                'title': "Upgrading Workflow Editor version",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-5146514c-45cb-428b-1af8-0b3139d9979b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Upgrading Workflow Editor version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][731]= {
                'title': "Installing the offline Workflow Editor to your computer",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-120c6296-998f-75f6-4037-b0f34fefed49'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Installing the offline Workflow Editor to your computer"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][732]= {
                'title': "Starting the offline Workflow Editor",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-e57a19cd-edaf-797a-e014-2b633140e0ed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Starting the offline Workflow Editor"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][733]= {
                'title': "Upgrading Workflow Editor version",
                'href': 'UUID-9c649821-1aaa-ab87-c4ec-925292d424f1.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-5146514c-45cb-428b-1af8-0b3139d9979b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Upgrading Workflow Editor version"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][734]= {
                'title': "Running your first local build with the CLI",
                'href': 'UUID-537e2dfa-a322-df53-a92f-b1f63e99c7d7.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Running your first local build with the CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][735]= {
                'title': "Managing Secrets locally",
                'href': 'UUID-6ee95b9f-a082-3d77-d20e-25be9969faa9.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Managing Secrets locally"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][736]= {
                'title': "API",
                'href': 'UUID-1f199927-764a-51f2-1222-f5a529750c60.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][737]= {
                'title': "Authenticating with the Bitrise API",
                'href': 'UUID-c75d8909-8594-0f0d-20ab-fceb36679f84.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Authenticating with the Bitrise API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][738]= {
                'title': "Pagination of API calls",
                'href': 'UUID-3897b0dc-2d7a-34a6-3a17-87e0270914dc.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Pagination of API calls"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][739]= {
                'title': "Adding and managing apps",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][740]= {
                'title': "Adding a new app with the API",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-6ce6b338-7be5-29c9-fd1b-12c6c3b5211c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Adding a new app with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][741]= {
                'title': "Managing an existing app",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-506c2f14-4f70-ba9a-5ba3-b3b084ad5930'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing an existing app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][742]= {
                'title': "Managing app access roles for Workspace groups",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-32985907-72ce-7984-af0f-99fb52394b36'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing app access roles for Workspace groups"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][743]= {
                'title': "Deleting an app using the API",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-70f042e9-8eb8-615b-3d8d-de304abf4181'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Deleting an app using the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][744]= {
                'title': "Uploading a new bitrise.yml file",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-f4b551cb-eae4-42a3-4745-bca748605a6f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Uploading a new bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][745]= {
                'title': "Changing the location of the app's bitrise.yml file",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-b00d817f-48d6-3c48-2a0b-7b246ea41f8b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Changing the location of the app's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][746]= {
                'title': "Changing machine types in all apps at the same time",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-67e17f8a-1289-8062-3402-5595b857d1f0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Changing machine types in all apps at the same time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][747]= {
                'title': "Managing app notifications",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-e4e0e119-e4c9-a55b-3671-f90a8d9195f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing app notifications"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][748]= {
                'title': "Triggering and aborting builds",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][749]= {
                'title': "Triggering a new build with the API",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-0491c9d6-68ca-b6d8-c230-29f5bf9b2d57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][750]= {
                'title': "Setting a branch, commit or tag to build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-25f3d558-2a0e-6c00-d0f2-a9535d7d7744'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a branch, commit or tag to build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][751]= {
                'title': "Setting parameters for pull request builds",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-fa45008f-1818-6750-a7e6-77d1eb7c9756'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting parameters for pull request builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][752]= {
                'title': "Skipping Git status reports",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-1bb88bae-9333-0f16-6e0a-e021a19b77ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Skipping Git status reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][753]= {
                'title': "Specifying Environment Variables",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-d40c44cd-3e8b-60ef-cb63-d20813bb4404'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Specifying Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][754]= {
                'title': "Setting a Workflow for the build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-e70224cf-7444-07ed-48b8-87b5e369c305'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a Workflow for the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][755]= {
                'title': "Aborting a build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-6a80f809-ff48-fe7f-a9e9-52ed57ffc772'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Aborting a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][756]= {
                'title': "Incoming and outgoing webhooks",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][757]= {
                'title': "Registering an incoming webhook with the API",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-5e792ddf-89a1-ddd2-a79c-dd3030742501'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Registering an incoming webhook with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][758]= {
                'title': "Creating outgoing webhooks with the API",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-aa3c6c11-5a40-a911-7f05-36a211754449'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Creating outgoing webhooks with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][759]= {
                'title': "Modifying and deleting outgoing webhooks with the API",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-a1eb90f2-442d-1f76-7cfa-f9bc1f8d060a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Modifying and deleting outgoing webhooks with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][760]= {
                'title': "Managing iOS code signing files",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][761]= {
                'title': "Uploading an iOS code signing file",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-6374bcba-2cb4-f7d6-9c6e-32ed9581616d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Uploading an iOS code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][762]= {
                'title': "Updating an uploaded iOS code signing file",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-c7241088-9102-e0e3-200c-78d477abd739'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Updating an uploaded iOS code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][763]= {
                'title': "Getting a specific iOS code signing file's data",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-027720e5-bbd6-15cf-5b0c-706749f8baed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Getting a specific iOS code signing file's data"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][764]= {
                'title': "Listing the iOS code signing files of an app",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-69a7ad18-d8b7-a272-1b66-c234c0081b27'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Listing the iOS code signing files of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][765]= {
                'title': "Managing files in Generic File Storage",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][766]= {
                'title': "Creating and uploading files to the Generic File Storage",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-300d60e6-4586-de8f-a1ed-a9df34003726'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Creating and uploading files to the Generic File Storage"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][767]= {
                'title': "Updating an uploaded file",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-4e6f2ba4-f97a-74a5-e57e-e5374cf278de'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Updating an uploaded file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][768]= {
                'title': "Retrieving a specific file's data",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-ace27504-1d0e-3dfd-f8fc-cbe2c9d2f89c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Retrieving a specific file's data"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][769]= {
                'title': "Listing the uploaded files of an app",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-052837dd-1206-3f2c-a500-5fd3262897a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Listing the uploaded files of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][770]= {
                'title': "Deleting a file from the Generic File Storage",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-ddf2b256-bbb2-35bd-1974-903e84a53f73'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Deleting a file from the Generic File Storage"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][771]= {
                'title': "Managing build artifacts",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][772]= {
                'title': "Listing build artifacts",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-67b0f982-96cd-1186-9265-88996e15e59b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Listing build artifacts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][773]= {
                'title': "Retrieving a specific build artifact's data",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-68b29ebc-24b7-36ed-d82b-4dd45f7797b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Retrieving a specific build artifact's data"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][774]= {
                'title': "Disabling the public install page of an artifact",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-cc240e80-5221-b7d5-abc0-555ea63f53aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Disabling the public install page of an artifact"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][775]= {
                'title': "Deleting a build artifact",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-28488171-07a0-6ef5-7067-3be9db16a566'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Deleting a build artifact"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][776]= {
                'title': "API reference",
                'href': 'UUID-bea95175-ce19-7eaf-4987-2600317e2d4f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ API reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][737]= {
                'title': "Authenticating with the Bitrise API",
                'href': 'UUID-c75d8909-8594-0f0d-20ab-fceb36679f84.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Authenticating with the Bitrise API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][738]= {
                'title': "Pagination of API calls",
                'href': 'UUID-3897b0dc-2d7a-34a6-3a17-87e0270914dc.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Pagination of API calls"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][739]= {
                'title': "Adding and managing apps",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][740]= {
                'title': "Adding a new app with the API",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-6ce6b338-7be5-29c9-fd1b-12c6c3b5211c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Adding a new app with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][741]= {
                'title': "Managing an existing app",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-506c2f14-4f70-ba9a-5ba3-b3b084ad5930'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing an existing app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][742]= {
                'title': "Managing app access roles for Workspace groups",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-32985907-72ce-7984-af0f-99fb52394b36'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing app access roles for Workspace groups"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][743]= {
                'title': "Deleting an app using the API",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-70f042e9-8eb8-615b-3d8d-de304abf4181'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Deleting an app using the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][744]= {
                'title': "Uploading a new bitrise.yml file",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-f4b551cb-eae4-42a3-4745-bca748605a6f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Uploading a new bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][745]= {
                'title': "Changing the location of the app's bitrise.yml file",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-b00d817f-48d6-3c48-2a0b-7b246ea41f8b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Changing the location of the app's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][746]= {
                'title': "Changing machine types in all apps at the same time",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-67e17f8a-1289-8062-3402-5595b857d1f0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Changing machine types in all apps at the same time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][747]= {
                'title': "Managing app notifications",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-e4e0e119-e4c9-a55b-3671-f90a8d9195f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing app notifications"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][740]= {
                'title': "Adding a new app with the API",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-6ce6b338-7be5-29c9-fd1b-12c6c3b5211c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Adding a new app with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][741]= {
                'title': "Managing an existing app",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-506c2f14-4f70-ba9a-5ba3-b3b084ad5930'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing an existing app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][742]= {
                'title': "Managing app access roles for Workspace groups",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-32985907-72ce-7984-af0f-99fb52394b36'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing app access roles for Workspace groups"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][743]= {
                'title': "Deleting an app using the API",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-70f042e9-8eb8-615b-3d8d-de304abf4181'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Deleting an app using the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][744]= {
                'title': "Uploading a new bitrise.yml file",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-f4b551cb-eae4-42a3-4745-bca748605a6f'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Uploading a new bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][745]= {
                'title': "Changing the location of the app's bitrise.yml file",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-b00d817f-48d6-3c48-2a0b-7b246ea41f8b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Changing the location of the app's bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][746]= {
                'title': "Changing machine types in all apps at the same time",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-67e17f8a-1289-8062-3402-5595b857d1f0'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Changing machine types in all apps at the same time"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][747]= {
                'title': "Managing app notifications",
                'href': 'UUID-3aa72056-57cd-3533-d8ed-445ef1584299.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-e4e0e119-e4c9-a55b-3671-f90a8d9195f1'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing app notifications"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][748]= {
                'title': "Triggering and aborting builds",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][749]= {
                'title': "Triggering a new build with the API",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-0491c9d6-68ca-b6d8-c230-29f5bf9b2d57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][750]= {
                'title': "Setting a branch, commit or tag to build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-25f3d558-2a0e-6c00-d0f2-a9535d7d7744'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a branch, commit or tag to build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][751]= {
                'title': "Setting parameters for pull request builds",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-fa45008f-1818-6750-a7e6-77d1eb7c9756'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting parameters for pull request builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][752]= {
                'title': "Skipping Git status reports",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-1bb88bae-9333-0f16-6e0a-e021a19b77ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Skipping Git status reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][753]= {
                'title': "Specifying Environment Variables",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-d40c44cd-3e8b-60ef-cb63-d20813bb4404'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Specifying Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][754]= {
                'title': "Setting a Workflow for the build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-e70224cf-7444-07ed-48b8-87b5e369c305'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a Workflow for the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][755]= {
                'title': "Aborting a build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-6a80f809-ff48-fe7f-a9e9-52ed57ffc772'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Aborting a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][749]= {
                'title': "Triggering a new build with the API",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-0491c9d6-68ca-b6d8-c230-29f5bf9b2d57'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][750]= {
                'title': "Setting a branch, commit or tag to build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-25f3d558-2a0e-6c00-d0f2-a9535d7d7744'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a branch, commit or tag to build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][751]= {
                'title': "Setting parameters for pull request builds",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-fa45008f-1818-6750-a7e6-77d1eb7c9756'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting parameters for pull request builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][752]= {
                'title': "Skipping Git status reports",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-1bb88bae-9333-0f16-6e0a-e021a19b77ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Skipping Git status reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][753]= {
                'title': "Specifying Environment Variables",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-d40c44cd-3e8b-60ef-cb63-d20813bb4404'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Specifying Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][754]= {
                'title': "Setting a Workflow for the build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-e70224cf-7444-07ed-48b8-87b5e369c305'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a Workflow for the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][750]= {
                'title': "Setting a branch, commit or tag to build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-25f3d558-2a0e-6c00-d0f2-a9535d7d7744'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a branch, commit or tag to build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][751]= {
                'title': "Setting parameters for pull request builds",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-fa45008f-1818-6750-a7e6-77d1eb7c9756'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting parameters for pull request builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][752]= {
                'title': "Skipping Git status reports",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-1bb88bae-9333-0f16-6e0a-e021a19b77ad'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Skipping Git status reports"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][753]= {
                'title': "Specifying Environment Variables",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-d40c44cd-3e8b-60ef-cb63-d20813bb4404'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Specifying Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][754]= {
                'title': "Setting a Workflow for the build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-e70224cf-7444-07ed-48b8-87b5e369c305'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a Workflow for the build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][755]= {
                'title': "Aborting a build",
                'href': 'UUID-c65412f0-db58-2bfc-b10b-c801d887def4.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-6a80f809-ff48-fe7f-a9e9-52ed57ffc772'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Aborting a build"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][756]= {
                'title': "Incoming and outgoing webhooks",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][757]= {
                'title': "Registering an incoming webhook with the API",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-5e792ddf-89a1-ddd2-a79c-dd3030742501'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Registering an incoming webhook with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][758]= {
                'title': "Creating outgoing webhooks with the API",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-aa3c6c11-5a40-a911-7f05-36a211754449'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Creating outgoing webhooks with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][759]= {
                'title': "Modifying and deleting outgoing webhooks with the API",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-a1eb90f2-442d-1f76-7cfa-f9bc1f8d060a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Modifying and deleting outgoing webhooks with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][757]= {
                'title': "Registering an incoming webhook with the API",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-5e792ddf-89a1-ddd2-a79c-dd3030742501'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Registering an incoming webhook with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][758]= {
                'title': "Creating outgoing webhooks with the API",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-aa3c6c11-5a40-a911-7f05-36a211754449'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Creating outgoing webhooks with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][759]= {
                'title': "Modifying and deleting outgoing webhooks with the API",
                'href': 'UUID-ebbc713e-431e-4f12-ad70-8547c2932347.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-a1eb90f2-442d-1f76-7cfa-f9bc1f8d060a'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Modifying and deleting outgoing webhooks with the API"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][760]= {
                'title': "Managing iOS code signing files",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][761]= {
                'title': "Uploading an iOS code signing file",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-6374bcba-2cb4-f7d6-9c6e-32ed9581616d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Uploading an iOS code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][762]= {
                'title': "Updating an uploaded iOS code signing file",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-c7241088-9102-e0e3-200c-78d477abd739'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Updating an uploaded iOS code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][763]= {
                'title': "Getting a specific iOS code signing file's data",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-027720e5-bbd6-15cf-5b0c-706749f8baed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Getting a specific iOS code signing file's data"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][764]= {
                'title': "Listing the iOS code signing files of an app",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-69a7ad18-d8b7-a272-1b66-c234c0081b27'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Listing the iOS code signing files of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][761]= {
                'title': "Uploading an iOS code signing file",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-6374bcba-2cb4-f7d6-9c6e-32ed9581616d'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Uploading an iOS code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][762]= {
                'title': "Updating an uploaded iOS code signing file",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-c7241088-9102-e0e3-200c-78d477abd739'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Updating an uploaded iOS code signing file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][763]= {
                'title': "Getting a specific iOS code signing file's data",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-027720e5-bbd6-15cf-5b0c-706749f8baed'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Getting a specific iOS code signing file's data"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][764]= {
                'title': "Listing the iOS code signing files of an app",
                'href': 'UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-69a7ad18-d8b7-a272-1b66-c234c0081b27'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Listing the iOS code signing files of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][765]= {
                'title': "Managing files in Generic File Storage",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][766]= {
                'title': "Creating and uploading files to the Generic File Storage",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-300d60e6-4586-de8f-a1ed-a9df34003726'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Creating and uploading files to the Generic File Storage"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][767]= {
                'title': "Updating an uploaded file",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-4e6f2ba4-f97a-74a5-e57e-e5374cf278de'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Updating an uploaded file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][768]= {
                'title': "Retrieving a specific file's data",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-ace27504-1d0e-3dfd-f8fc-cbe2c9d2f89c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Retrieving a specific file's data"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][769]= {
                'title': "Listing the uploaded files of an app",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-052837dd-1206-3f2c-a500-5fd3262897a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Listing the uploaded files of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][770]= {
                'title': "Deleting a file from the Generic File Storage",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-ddf2b256-bbb2-35bd-1974-903e84a53f73'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Deleting a file from the Generic File Storage"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][766]= {
                'title': "Creating and uploading files to the Generic File Storage",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-300d60e6-4586-de8f-a1ed-a9df34003726'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Creating and uploading files to the Generic File Storage"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][767]= {
                'title': "Updating an uploaded file",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-4e6f2ba4-f97a-74a5-e57e-e5374cf278de'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Updating an uploaded file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][768]= {
                'title': "Retrieving a specific file's data",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-ace27504-1d0e-3dfd-f8fc-cbe2c9d2f89c'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Retrieving a specific file's data"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][769]= {
                'title': "Listing the uploaded files of an app",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-052837dd-1206-3f2c-a500-5fd3262897a5'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Listing the uploaded files of an app"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][770]= {
                'title': "Deleting a file from the Generic File Storage",
                'href': 'UUID-5832d66a-2451-ae69-92c5-53c32cd9e173.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-ddf2b256-bbb2-35bd-1974-903e84a53f73'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Deleting a file from the Generic File Storage"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][771]= {
                'title': "Managing build artifacts",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][772]= {
                'title': "Listing build artifacts",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-67b0f982-96cd-1186-9265-88996e15e59b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Listing build artifacts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][773]= {
                'title': "Retrieving a specific build artifact's data",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-68b29ebc-24b7-36ed-d82b-4dd45f7797b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Retrieving a specific build artifact's data"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][774]= {
                'title': "Disabling the public install page of an artifact",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-cc240e80-5221-b7d5-abc0-555ea63f53aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Disabling the public install page of an artifact"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][775]= {
                'title': "Deleting a build artifact",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-28488171-07a0-6ef5-7067-3be9db16a566'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Deleting a build artifact"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][772]= {
                'title': "Listing build artifacts",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-67b0f982-96cd-1186-9265-88996e15e59b'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Listing build artifacts"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][773]= {
                'title': "Retrieving a specific build artifact's data",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-68b29ebc-24b7-36ed-d82b-4dd45f7797b8'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Retrieving a specific build artifact's data"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][774]= {
                'title': "Disabling the public install page of an artifact",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-cc240e80-5221-b7d5-abc0-555ea63f53aa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Disabling the public install page of an artifact"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][775]= {
                'title': "Deleting a build artifact",
                'href': 'UUID-a67de581-0791-2633-da8a-7f9bcbfe974e.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-28488171-07a0-6ef5-7067-3be9db16a566'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Deleting a build artifact"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][776]= {
                'title': "API reference",
                'href': 'UUID-bea95175-ce19-7eaf-4987-2600317e2d4f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ API reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][777]= {
                'title': "References",
                'href': 'UUID-8e76b4bd-aa2b-b98d-883d-f885032a7b8e.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][778]= {
                'title': "Basics of bitrise.yml",
                'href': 'UUID-f7c6b635-3669-d853-b24b-4f8542f59a22.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Basics of bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][779]= {
                'title': "Customizing the bitrise.yml config",
                'href': 'UUID-18c85a27-556f-bdba-18a4-c07af747b6e5.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Customizing the bitrise.yml config"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][780]= {
                'title': "Workflow reference",
                'href': 'UUID-08e0cf6c-930a-b699-1e99-7d69aebfdd7c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Workflow reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][781]= {
                'title': "Steps reference",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][782]= {
                'title': "Step reference\/ID format",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][783]= {
                'title': "Special Step sources",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_UUID-932bc0aa-0347-b6c2-f77c-ca78c7cce8ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][784]= {
                'title': "The git:: source",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_section-idm4660235441232032703491788796'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources \/ The git:: source"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][785]= {
                'title': "The path:: source",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_section-idm4660235704166432703497105279'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources \/ The path:: source"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][786]= {
                'title': "Step data in the bitrise.yml file",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-b4cb038e-85cc-401e-074c-4111713ed725'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step data in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][787]= {
                'title': "Step properties",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-e1c8c545-ddc7-cc13-8318-1e0492d75254'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step properties"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][788]= {
                'title': "Step inputs reference",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][789]= {
                'title': "Step input properties",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-e37c5405-ee57-1169-0539-7515055a5c62'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Step input properties"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][790]= {
                'title': "Using template expressions for Step inputs",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-005c1a11-1bf4-214a-3ecc-c1af25105771'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Using template expressions for Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][791]= {
                'title': "Step outputs reference",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-3a58a1fb-c6af-8695-bfbc-ca242defcddb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step outputs reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][792]= {
                'title': "Available Environment Variables",
                'href': 'UUID-732a64c9-4584-db4d-d753-f95122b8a69c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Available Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][793]= {
                'title': "Bitrise tools",
                'href': 'UUID-e1449112-c102-2151-5ceb-116b55ecfaab.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Bitrise tools"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][778]= {
                'title': "Basics of bitrise.yml",
                'href': 'UUID-f7c6b635-3669-d853-b24b-4f8542f59a22.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Basics of bitrise.yml"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][779]= {
                'title': "Customizing the bitrise.yml config",
                'href': 'UUID-18c85a27-556f-bdba-18a4-c07af747b6e5.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Customizing the bitrise.yml config"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][780]= {
                'title': "Workflow reference",
                'href': 'UUID-08e0cf6c-930a-b699-1e99-7d69aebfdd7c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Workflow reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][781]= {
                'title': "Steps reference",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][782]= {
                'title': "Step reference\/ID format",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][783]= {
                'title': "Special Step sources",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_UUID-932bc0aa-0347-b6c2-f77c-ca78c7cce8ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][784]= {
                'title': "The git:: source",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_section-idm4660235441232032703491788796'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources \/ The git:: source"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][785]= {
                'title': "The path:: source",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_section-idm4660235704166432703497105279'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources \/ The path:: source"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][786]= {
                'title': "Step data in the bitrise.yml file",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-b4cb038e-85cc-401e-074c-4111713ed725'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step data in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][787]= {
                'title': "Step properties",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-e1c8c545-ddc7-cc13-8318-1e0492d75254'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step properties"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][788]= {
                'title': "Step inputs reference",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][789]= {
                'title': "Step input properties",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-e37c5405-ee57-1169-0539-7515055a5c62'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Step input properties"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][790]= {
                'title': "Using template expressions for Step inputs",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-005c1a11-1bf4-214a-3ecc-c1af25105771'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Using template expressions for Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][791]= {
                'title': "Step outputs reference",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-3a58a1fb-c6af-8695-bfbc-ca242defcddb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step outputs reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][782]= {
                'title': "Step reference\/ID format",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][783]= {
                'title': "Special Step sources",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_UUID-932bc0aa-0347-b6c2-f77c-ca78c7cce8ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][784]= {
                'title': "The git:: source",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_section-idm4660235441232032703491788796'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources \/ The git:: source"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][785]= {
                'title': "The path:: source",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_section-idm4660235704166432703497105279'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources \/ The path:: source"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][783]= {
                'title': "Special Step sources",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_UUID-932bc0aa-0347-b6c2-f77c-ca78c7cce8ca'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][784]= {
                'title': "The git:: source",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_section-idm4660235441232032703491788796'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources \/ The git:: source"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][785]= {
                'title': "The path:: source",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_section-idm4660235704166432703497105279'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources \/ The path:: source"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][786]= {
                'title': "Step data in the bitrise.yml file",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-b4cb038e-85cc-401e-074c-4111713ed725'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step data in the bitrise.yml file"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][787]= {
                'title': "Step properties",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-e1c8c545-ddc7-cc13-8318-1e0492d75254'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step properties"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][788]= {
                'title': "Step inputs reference",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][789]= {
                'title': "Step input properties",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-e37c5405-ee57-1169-0539-7515055a5c62'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Step input properties"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][790]= {
                'title': "Using template expressions for Step inputs",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-005c1a11-1bf4-214a-3ecc-c1af25105771'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Using template expressions for Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][789]= {
                'title': "Step input properties",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-e37c5405-ee57-1169-0539-7515055a5c62'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Step input properties"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][790]= {
                'title': "Using template expressions for Step inputs",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-005c1a11-1bf4-214a-3ecc-c1af25105771'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Using template expressions for Step inputs"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][791]= {
                'title': "Step outputs reference",
                'href': 'UUID-14e81619-0fe5-7d71-6223-9f5067d57904.html#UUID-3a58a1fb-c6af-8695-bfbc-ca242defcddb'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step outputs reference"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][792]= {
                'title': "Available Environment Variables",
                'href': 'UUID-732a64c9-4584-db4d-d753-f95122b8a69c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Available Environment Variables"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][793]= {
                'title': "Bitrise tools",
                'href': 'UUID-e1449112-c102-2151-5ceb-116b55ecfaab.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Bitrise tools"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][794]= {
                'title': "Teams plan FAQ",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][795]= {
                'title': "How to sign up for the trial?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4593021910228832730789955925'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ How to sign up for the trial?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][796]= {
                'title': "If I sign up for a trial, when will it end?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4605033047497632730791448989'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ If I sign up for a trial, when will it end?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][797]= {
                'title': "Can I sign up for the full Teams plan during the trial?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4593021433990432730791927982'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ Can I sign up for the full Teams plan during the trial?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][798]= {
                'title': "What features does the Teams plan have?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4593021593857632730794286204'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ What features does the Teams plan have?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][799]= {
                'title': "How many credits do I get in the trial?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4543931030156833757911955931'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ How many credits do I get in the trial?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][800]= {
                'title': "Where can I see how many credits I used up?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4526656644788833758772421487'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ Where can I see how many credits I used up?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][801]= {
                'title': "What if I run out of the trial credits before the trial ends?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4586138516203233757728571052'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ What if I run out of the trial credits before the trial ends?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][802]= {
                'title': "How do I know when my trial ends?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4606595428067233757729402015'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ How do I know when my trial ends?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][803]= {
                'title': "What happens when my trial ends?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4526656687324833757913808602'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ What happens when my trial ends?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][804]= {
                'title': "Will I lose my unused credits if I switch to a different plan?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4593021513920032730796209505'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ Will I lose my unused credits if I switch to a different plan?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][805]= {
                'title': "How do I use my credits?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4580943639200032730796939877'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ How do I use my credits?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][806]= {
                'title': "Will a build be aborted if I run out of credits?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm458094319017763273080069383'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ Will a build be aborted if I run out of credits?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][807]= {
                'title': "Will unused credits roll over to the next month?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4593021618416032730810316502'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ Will unused credits roll over to the next month?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][808]= {
                'title': "How many apps can I have?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4605033316483232730801039704'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ How many apps can I have?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][809]= {
                'title': "Do the different machine types have different credit costs?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4605032966710432730801371643'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ Do the different machine types have different credit costs?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][810]= {
                'title': "How is the credit cost calculated for minute fractions?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm13328386299592'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ How is the credit cost calculated for minute fractions?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][811]= {
                'title': "How many builds can I run at the same time?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4593021839896032730809558195'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ How many builds can I run at the same time?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][812]= {
                'title': "Is there a time limit for builds?",
                'href': 'UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3.html#UUID-8a7b8fa2-7a2b-35cc-75f3-91e1694709d3_section-idm4593021577568032730813057073'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ \/ Is there a time limit for builds?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][813]= {
                'title': "Credit-based Hobby plan FAQ",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][814]= {
                'title': "How do I sign up for the free plan?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm4593021910228832730789955925'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ How do I sign up for the free plan?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][815]= {
                'title': "How do I get credits?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm4605033047497632730791448989'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ How do I get credits?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][816]= {
                'title': "How do I use my credits?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm4593021433990432730791927982'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ How do I use my credits?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][817]= {
                'title': "What happens if I run out of credits?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm4593021593857632730794286204'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ What happens if I run out of credits?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][818]= {
                'title': "Will a build be aborted if I run out of credits?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm4605033049790432730795650068'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ Will a build be aborted if I run out of credits?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][819]= {
                'title': "How many apps can I have?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm4593021513920032730796209505'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ How many apps can I have?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][820]= {
                'title': "How much build time do I have?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm4580943639200032730796939877'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ How much build time do I have?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][821]= {
                'title': "Do the different stacks have different credit costs?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm4593021654326432730797253737'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ Do the different stacks have different credit costs?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][822]= {
                'title': "How many builds can I run at the same time?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm458094319017763273080069383'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ How many builds can I run at the same time?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][823]= {
                'title': "How many builds can I run at the same time?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm4593021839896032730809558195'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ How many builds can I run at the same time?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][824]= {
                'title': "How is the credit cost calculated for minute fractions?",
                'href': 'UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62.html#UUID-562da9c9-1471-d3d2-620f-f1be3fb9af62_section-idm456496207209443328378266552'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ \/ How is the credit cost calculated for minute fractions?"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][825]= {
                'title': "404 - Page Not Found",
                'href': 'UUID-dc2b0018-fd64-5450-dc5e-892a7d301c69.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ 404 - Page Not Found"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][826]= {
                'title': "Comparing credit-based and concurrency-based plans",
                'href': 'UUID-69267c0d-8915-776e-c33d-3250669a746f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Comparing credit-based and concurrency-based plans"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][827]= {
                'title': "Machine type selector",
                'href': 'UUID-69267c0d-8915-776e-c33d-3250669a746f.html#UUID-69267c0d-8915-776e-c33d-3250669a746f_section-idm4580943307358432733101619055'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Comparing credit-based and concurrency-based plans \/ Machine type selector"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][828]= {
                'title': "Concurrency limitations",
                'href': 'UUID-69267c0d-8915-776e-c33d-3250669a746f.html#UUID-69267c0d-8915-776e-c33d-3250669a746f_section-idm4593021942420832733101969142'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Comparing credit-based and concurrency-based plans \/ Concurrency limitations"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][829]= {
                'title': "Build timeout",
                'href': 'UUID-69267c0d-8915-776e-c33d-3250669a746f.html#UUID-69267c0d-8915-776e-c33d-3250669a746f_section-idm4605032940780832733102678821'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Comparing credit-based and concurrency-based plans \/ Build timeout"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][830]= {
                'title': "Resource usage",
                'href': 'UUID-69267c0d-8915-776e-c33d-3250669a746f.html#UUID-69267c0d-8915-776e-c33d-3250669a746f_section-idm4634521529849632733103661286'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Comparing credit-based and concurrency-based plans \/ Resource usage"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][831]= {
                'title': "Summary",
                'href': 'UUID-69267c0d-8915-776e-c33d-3250669a746f.html#UUID-69267c0d-8915-776e-c33d-3250669a746f_section-idm4625798603977632733104212442'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Comparing credit-based and concurrency-based plans \/ Summary"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][832]= {
                'title': "Optimizing your build times",
                'href': 'UUID-6bbacf51-86bc-7993-3357-69508865813c.html'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Optimizing your build times"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][833]= {
                'title': "Including your dependencies in your repository",
                'href': 'UUID-6bbacf51-86bc-7993-3357-69508865813c.html#UUID-6bbacf51-86bc-7993-3357-69508865813c_section-idm4550372252944032741476430126'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Optimizing your build times \/ Including your dependencies in your repository"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][834]= {
                'title': "Using caching",
                'href': 'UUID-6bbacf51-86bc-7993-3357-69508865813c.html#UUID-6bbacf51-86bc-7993-3357-69508865813c_section-idm4538149110228832741477572946'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Optimizing your build times \/ Using caching"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][835]= {
                'title': "Turning off the Clean build option of Xcode Steps",
                'href': 'UUID-6bbacf51-86bc-7993-3357-69508865813c.html#UUID-6bbacf51-86bc-7993-3357-69508865813c_section-idm4492642727755232741478923511'
                
                    , 'breadcrumbs': "Parent publication \/ Welcome to Bitrise documentation! \/ Optimizing your build times \/ Turning off the Clean build option of Xcode Steps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][837]= {
                'title': "Getting started",
                'href': 'UUID-9bb609fc-1b22-e628-165d-46097239fb95.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Getting started"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][838]= {
                'title': "Teams and Organizations",
                'href': 'UUID-9bb609fc-1b22-e628-165d-46097239fb95.html#UUID-9bb609fc-1b22-e628-165d-46097239fb95_UUID-603c18c7-eb0e-7dfc-df86-42313f896cd3'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Getting started \/ Teams and Organizations"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][838]= {
                'title': "Teams and Organizations",
                'href': 'UUID-9bb609fc-1b22-e628-165d-46097239fb95.html#UUID-9bb609fc-1b22-e628-165d-46097239fb95_UUID-603c18c7-eb0e-7dfc-df86-42313f896cd3'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Getting started \/ Teams and Organizations"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][839]= {
                'title': "Infrastructure",
                'href': 'UUID-b341255f-a55e-a7f0-b973-a84a0a873bdc.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Infrastructure"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][840]= {
                'title': "Account management",
                'href': 'UUID-e0122c2e-82a3-de27-339b-9f2111b187bb.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Account management"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][841]= {
                'title': "Workspaces and apps",
                'href': 'UUID-0e88ed3d-4da3-f11f-91e7-a2c59c9bd90f.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Workspaces and apps"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][842]= {
                'title': "Steps and Workflows",
                'href': 'UUID-dbbf25b0-de43-2e12-27dc-bc594db481ec.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Steps and Workflows"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][843]= {
                'title': "Builds",
                'href': 'UUID-06d1480b-816b-612a-62a4-69462e5d7d96.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Builds"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][844]= {
                'title': "Code signing",
                'href': 'UUID-10314503-c554-ba24-63f6-964bae84651b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Code signing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][845]= {
                'title': "Testing",
                'href': 'UUID-6cc0b48c-cf6b-e5b7-9e4c-70edaa004389.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Testing"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][846]= {
                'title': "Deploying",
                'href': 'UUID-52c4de75-9fe5-5bca-3b8a-64e2cf37cb75.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Deploying"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][847]= {
                'title': "App monitoring",
                'href': 'UUID-1f0b222e-04a6-451d-842a-0d776ed23a4a.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ App monitoring"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][848]= {
                'title': "Bitrise CLI",
                'href': 'UUID-af4417ce-4968-a84a-114d-e96f3ddb7d33.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Bitrise CLI"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][849]= {
                'title': "References",
                'href': 'UUID-12886403-46a8-3b37-000e-286292c993ae.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ References"
                        , 'snippet': ''
                    
                };
                
                
                
                store['en'][850]= {
                'title': "Bitrise API",
                'href': 'UUID-1ad60eea-0461-739e-ac98-a3689e36692b.html'
                
                    , 'breadcrumbs': "Parent publication \/ Bitrise Docs \/ Bitrise API"
                        , 'snippet': ''
                    
                };
                
                


            });

            $(document).trigger('search.ready');
       }); 

        