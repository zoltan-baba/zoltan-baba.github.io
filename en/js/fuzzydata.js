$(document).ready(function () {indexDict['en'] = [{ "title" : "Getting started ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started ", 
"snippet" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running your first build. Bitrise is a CI\/CD Platform as a Service (PaaS), mostly focused on mobile app development. It is a collection of tools and services to help you with the development and automation...", 
"body" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running your first build. Bitrise is a CI\/CD Platform as a Service (PaaS), mostly focused on mobile app development. It is a collection of tools and services to help you with the development and automation of your software projects. To use it, you can sign up via email or via a Git hosting provider, connect a repository, and start building! " }, 
{ "title" : "Signing up for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-000c8bad-6d7f-0d5d-b401-26d496fba183", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise ", 
"snippet" : "Email GitHub GitLab Bitbucket Signing up with either of the Git service providers means you connect your Bitrise account to your account on that service provider. With a connected account, you can grant Bitrise access to any of your repositories on that account. After signing up, you can connect you...", 
"body" : "Email GitHub GitLab Bitbucket Signing up with either of the Git service providers means you connect your Bitrise account to your account on that service provider. With a connected account, you can grant Bitrise access to any of your repositories on that account. After signing up, you can connect your Bitrise account to all of the three supported Git service providers. For example, after you signed up with GitHub, you can connect your Bitrise account to both your GitLab and Bitbucket accounts, too, and access any repositories you have on those accounts. " }, 
{ "title" : "Creating your first Workspace ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-45c98b6e-ff48-e720-c001-f3959ff58028", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Creating your first Workspace ", 
"snippet" : "After signing up, Bitrise will automatically create your first Workspace . A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. You need a Workspace to be able to add an app and start running builds. You can: Create multiple Workspaces ....", 
"body" : "After signing up, Bitrise will automatically create your first Workspace . A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. You need a Workspace to be able to add an app and start running builds. You can: Create multiple Workspaces . You can be invited to Workspaces by other Bitrise users . Workspace name Don't worry: you can rename any of your Workspaces at any time! To sign up for a paid subscription of your own, you need to have at least one Workspace. Check our Pricing page for more information. " }, 
{ "title" : "Adding a new app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-15a4b450-3823-111b-a88a-98f66ef246cc", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Adding a new app ", 
"snippet" : "Adding a new app to Bitrise means that you connect a Git repository to Bitrise, allowing us to clone the repository and then build it. Add a new app any time by clicking the + symbol on the top menu bar and then selecting Add new app on web UI from the dropdown menu. As part of the initial configura...", 
"body" : "Adding a new app to Bitrise means that you connect a Git repository to Bitrise, allowing us to clone the repository and then build it. Add a new app any time by clicking the + symbol on the top menu bar and then selecting Add new app on web UI from the dropdown menu. As part of the initial configuration process, you: Decide if an app is private or public . Private app data is only available to those who are invited to work on the app. Specify the repository : it can be either a GitHub, GitLab or Bitbucket repository, a manual repository URL, or a self-hosted GitLab repository. Register an SSH key : this gives Bitrise access to the repository so we can clone it during the build process. Specify the branch that you want to build. You can change all this later - and anyway, adding a new app takes a couple of minutes so you can always just do the process from scratch. As part of the process, Bitrise will scan and validate your repository and set up an app configuration based on the results of the scan: we can detect the platform type of your app based on the configuration files. If the validation fails, you can set up the app manually. Read the details of the process in our Adding a new app guide. You can also enable the Getting Started Guide to receive hints while adding your app: Open your Profile settings , scroll down to the Getting Started Guide section, and set the toggle to On . " }, 
{ "title" : "Webhooks and triggers ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-ddaf0b44-cc2e-e0da-0268-aaa5e0a10ba6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Webhooks and triggers ", 
"snippet" : "You can set up webhooks as part of the process of adding a new app, or at any time later. Webhooks allow Bitrise to communicate with third party services: for example, a Bitrise webhook set up on a GitHub repository allows Bitrise to start a build automatically when code is modified in the repositor...", 
"body" : "You can set up webhooks as part of the process of adding a new app, or at any time later. Webhooks allow Bitrise to communicate with third party services: for example, a Bitrise webhook set up on a GitHub repository allows Bitrise to start a build automatically when code is modified in the repository. Git Insights In addition to automatic build triggers, webhooks also enable the use of Git Insights , a part of our Insights monitoring tool that enables users to quantify Git collaboration through metrics such as pull request cycle time and merge frequency. Once webhooks are set up, configure when to start builds automatically by defining triggers . You can set: The event which should trigger the build: for example, code push or a pull request. The branch of your repository that can trigger builds: for example, main or dev . This means that you can, for example, set up a trigger that starts a build when a pull request is opened to the main branch. Webhooks are required for triggers to work! Read more: Adding incoming webhooksAdding outgoing webhooksTriggering builds automatically" }, 
{ "title" : "Builds and Workflows ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-efd02dd1-4217-aaf4-87c0-debd71494d1c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Builds and Workflows ", 
"snippet" : "Once you added an app, your first build will be kicked off automatically. To view your builds, go to your Dashboard - which is the first page once you log in to Bitrise -, select the app and click the Builds tab to access your builds. A build is a series of jobs, executed in the order defined in the...", 
"body" : "Once you added an app, your first build will be kicked off automatically. To view your builds, go to your Dashboard - which is the first page once you log in to Bitrise -, select the app and click the Builds tab to access your builds. A build is a series of jobs, executed in the order defined in the app’s Workflows . The jobs are called Steps , which represent blocks of script execution. The Steps can be arranged on the graphical UI of the Workflow Editor and they can do a huge number of things: clone your repository, build your app, run tests , pass values to each other , send notification messages to developers, and many more. Read more in our relevant guides: Workflows Steps BuildsWorkflow recipes We are also offering Workflow recipes: these are example Workflows for the most common use cases on Bitrise. Workflow recipes for Android appsWorkflow recipes for iOS appsWorkflow recipes for cross-platform appsGeneric Workflow recipesA build's logs can be viewed on the build’s page: go to the Builds tab and select the build you want. All builds run in clean virtual machines that are discarded after the build is complete. Read more about them: Build machines. " }, 
{ "title" : "Testing and deploying ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started.html#UUID-696bdecc-038a-8894-3bf2-78c9dd4e1e1a_UUID-b4be56a8-29cb-9a91-da5a-2221b0e200ed", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Testing and deploying ", 
"snippet" : "Testing your app and deploying your app are both done with the help of our Steps: we have Steps dedicated to both these functions, based on the platform type. Unit testing, UI testing, and real device testing are all possible on Bitrise: Device testing for AndroidDevice testing for iOSRunning Androi...", 
"body" : "Testing your app and deploying your app are both done with the help of our Steps: we have Steps dedicated to both these functions, based on the platform type. Unit testing, UI testing, and real device testing are all possible on Bitrise: Device testing for AndroidDevice testing for iOSRunning Android unit testsRunning unit and UI tests for iOS appsOnce your app is tested, built and ready to go, you can quickly deploy it to the store of your choice, for example, Google Play or the App Store. You can also check out Ship, our fast and efficient deployment solution: Deploying with Ship. " }, 
{ "title" : "Migrating to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise ", 
"snippet" : "Our migration guides aim to help you quickly and painlessly migrate your project from your current CI\/CD provider to Bitrise. Our migration guides aim to help you quickly and painlessly migrate your project from your current CI\/CD provider to Bitrise. If you need more convincing to make the switch o...", 
"body" : "Our migration guides aim to help you quickly and painlessly migrate your project from your current CI\/CD provider to Bitrise. Our migration guides aim to help you quickly and painlessly migrate your project from your current CI\/CD provider to Bitrise. If you need more convincing to make the switch or would like to learn more about what Bitrise offers in comparison to your current CI\/CD solution, look no further. " }, 
{ "title" : "Migrating from Jenkins to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise ", 
"snippet" : "Switch from Jenkins to Bitrise, and you get to experience the comfort of using a cloud-based, mobile first CI\/CD platform which offers out-of-the box functionalities. If you have been looking to switch from Jenkins to Bitrise to speed up your mobile CI\/CD flow and ease dedicated manpower, look no fu...", 
"body" : "Switch from Jenkins to Bitrise, and you get to experience the comfort of using a cloud-based, mobile first CI\/CD platform which offers out-of-the box functionalities. If you have been looking to switch from Jenkins to Bitrise to speed up your mobile CI\/CD flow and ease dedicated manpower, look no further. This guide introduces the most important Bitrise features and how you can quickly settle into Bitrise from your Jenkins world. " }, 
{ "title" : "Why bother migrating? ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-667e8938-1182-cab0-6d2f-d4a5e56ea9ea", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Why bother migrating? ", 
"snippet" : "Jenkins is a self-hosted CI server where you have to manually install and maintain most of the functionalities before you could run any build and also requires dedicated manpower for regular maintenance. When you switch to Bitrise, you get to experience the comfort of using a cloud-based, mobile fir...", 
"body" : "Jenkins is a self-hosted CI server where you have to manually install and maintain most of the functionalities before you could run any build and also requires dedicated manpower for regular maintenance. When you switch to Bitrise, you get to experience the comfort of using a cloud-based, mobile first CI\/CD platform which offers out-of-the box functionalities for all your mobile development needs on one platform. This means there is: No need to download anything. No need for any on-premise servers or plugins. No need to worry about infrastructure, tools and virtualization. Bitrise takes care of all of the above. We have a vast array of automatized Steps, API , CLI , up-to-date Stacks and add-ons with a highly intuitive GUI, called Workflow Editor, all available at your fingertips. Check out the world of automated mobile development with Bitrise! How Bitrise helped top companies migrate Learn how EPAM, Nextdoor, Pulselive, Delivery Hero, Signify, and more have switched from Jenkins to Bitrise. The 5 main benefits of switching from Jenkins to cloud CI, a report. Read our Case study with PagSeguro: Smart ways to optimize your CI . " }, 
{ "title" : "Quick start guide ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ff04124f-6f55-5a7d-b468-5c55365669dc", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Quick start guide ", 
"snippet" : "This Quick Start Guide helps you start your first build on Bitrise with minimum config. Sign up for Bitrise if you don’t have an account yet. Connect a repo and run an automatically configured standard Workflow on any project. Once you’ve looked through the generated YML, make the changes you need: ...", 
"body" : "This Quick Start Guide helps you start your first build on Bitrise with minimum config. Sign up for Bitrise if you don’t have an account yet. Connect a repo and run an automatically configured standard Workflow on any project. Once you’ve looked through the generated YML, make the changes you need: if you’re opting for a custom code, pop it into our Script Step , and run your first build. Or find the Steps in our Step Library to replicate your Jenkinsfile’s behaviors. After getting to your new Workflow’s first green build, setup other jobs by configuring automatic triggers or scheduled builds . Optimize your Workflows with Steps like Bitrise.io Cache Pull and Bitrise.io Cache Push . Need help? Contact us . If you are interested in the main Jenkins-Bitrise differences and how Bitrise enhance your mobile development process, then continue with the guide below. " }, 
{ "title" : "Managing builds on Jenkins and on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7934f15-549b-58bf-f0c5-1e944781b1af", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise ", 
"snippet" : "A build on Bitrise is the process specified by the app’s Workflow . It is a series of Steps , defined in a Workflow, executed by the Bitrise CLI on a clean virtual machine or locally on your machine. You can check your app’s builds on the Bitrise Dashboard or you can analyze your build logs on your ...", 
"body" : "A build on Bitrise is the process specified by the app’s Workflow . It is a series of Steps , defined in a Workflow, executed by the Bitrise CLI on a clean virtual machine or locally on your machine. You can check your app’s builds on the Bitrise Dashboard or you can analyze your build logs on your app’s own Builds page. " }, 
{ "title" : "Triggering builds on Jenkins and Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-724027fa-4f2e-8a93-b81c-6e451f499d0c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Triggering builds on Jenkins and Bitrise ", 
"snippet" : "In this section we describe how you can trigger builds on Bitrise: The Build Now function on Jenkins corresponds with starting a build manually : click the button on your builds page and either simply start a new build or tinker away with the Advanced configuration options for starting\/scheduling bu...", 
"body" : "In this section we describe how you can trigger builds on Bitrise: The Build Now function on Jenkins corresponds with starting a build manually : click the button on your builds page and either simply start a new build or tinker away with the Advanced configuration options for starting\/scheduling builds. The Build periodically function of Jenkins is the Scheduling builds function on Bitrise. A big advantage of Bitrise is that you don’t have to set up a cron job, like you would on Jenkins, to schedule a specific time. Instead, select a day\/s from the timeline and type an hour and month. No confusion over cron expressions any more! For any Git related events, such as code push, pull requests, and Git tags, you can configure triggers that automatically start a build on Bitrise. The Build after other projects function of Jenkins is equivalent to the chaining Workflows together on Bitrise where the Workflows run in succession. It’s surprisingly easy to chain Workflows together on Bitrise. You can trigger builds by any other remote system: use Webhooks. We’re integrated with GitHub, Gitlab, Bitbucket, Gogs, Slack, Visual Studio, Assembla, Deveo. You can also push back build status reports to your Git provider (GitHub\/GitLab\/Bitbucket). " }, 
{ "title" : "Environment Variables and Secrets on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-76a85138-0e73-0074-de35-fcbe8daa52cc", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Environment Variables and Secrets on Bitrise ", 
"snippet" : "Environment Variables (a key and value pair) can be defined on app, Workflow and Steps level. You can do lots of interesting things with Env Vars: Expose them and reuse them in another Step. Copy an Env Var to another key. Overwrite an Env Var. Parameterize a build by adding custom Env Vars to a bui...", 
"body" : "Environment Variables (a key and value pair) can be defined on app, Workflow and Steps level. You can do lots of interesting things with Env Vars: Expose them and reuse them in another Step. Copy an Env Var to another key. Overwrite an Env Var. Parameterize a build by adding custom Env Vars to a build. Set up Workflow-specific Env Vars on the Env Vars tab to run Workflows with Env Vars that are only available for that particular Workflow. Secrets are a type of Environment Variables but special ones. They hide sensitive information in an encrypted format so that your private input is not exposed in the build logs or in the bitrise.yml . Secret Environment Variables, or Secrets in short, can be set by adding a key and the variable in the Secrets tab of the Workflow Editor. This is again a built-in feature of Bitrise which ensures the following: Your secrets are not shown in the bitrise.yml . Your secrets are stored encrypted. You can prevent exposing secrets on the UI by making them protected. Note that anyone might be able to do a workaround and log the value of secrets with a pull request, thus we advise NOT to expose secrets in PRs. " }, 
{ "title" : "Build caching ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-ba87f9ed-aa7e-2483-2f6c-bba10440b7bd", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Managing builds on Jenkins and on Bitrise \/ Build caching ", 
"snippet" : "Every build on Bitrise runs on a clean virtual machine but it does not mean you have to do everything from scratch - you can cache contents of important files and preserve them between builds....", 
"body" : "Every build on Bitrise runs on a clean virtual machine but it does not mean you have to do everything from scratch - you can cache contents of important files and preserve them between builds. " }, 
{ "title" : "Jenkins plugins and Bitrise Steps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-6a237745-542d-ee07-5a7d-4e45c05baa82", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins plugins and Bitrise Steps ", 
"snippet" : "A Step is a pre-defined task in Bitrise just like the Jenkins Steps, however, a Bitrise Step can be easily configured on our intuitive UI or you can even pull in your own Step from your repository. You can configure the inputs and parameters that define a Step task, and view\/reuse the outputs a Step...", 
"body" : "A Step is a pre-defined task in Bitrise just like the Jenkins Steps, however, a Bitrise Step can be easily configured on our intuitive UI or you can even pull in your own Step from your repository. You can configure the inputs and parameters that define a Step task, and view\/reuse the outputs a Step generates. Reusing the output means that another Step in the same Workflow can use it as the value of one of its inputs. As being a continuous integration tool itself, Jenkins integrates with other services with the help of plugins. Jenkins users have to manage plugins in a centralized place, called Manage plugins , install them globally (on their Jenkins server), then use them in their specific projects. If Jenkins notifies of a newer plugin version, Jenkins admins have to doublecheck with their teams if they’re running any builds since updating a plugin requires the server to restart. With Jenkins plugins, reverting to an older version is not possible, since only the latest version is available. In Bitrise, however, you do not have to install any Steps first, because you can add or remove any Step in your Bitrise Workflow at any time as you wish and it won’t block any running builds of the project. You can always revert back to a previous Step version too if that’s what you need. What’s more: When editing your Workflow in the Workflow Editor , you can easily search for a Step based on functionality or platform you are looking for in the Step Library and add it to your Workflow straightaway - there is no need to install them prior to setting up your Workflow. You can create your own custom Step too and store in a repository, then you can reference it by a URL in your Workflow. A Step jolly joker: our Script Step Do you have a custom script you’d like to run in your Workflow? Select the Script Step from the Step Library and add your custom code to the Script content input. Discover our Steps on our Integrations page or right when editing your Workflow. Learn what else you can do with Steps: Adding Steps to a WorkflowStep versioningEnabling or disabling a Step conditionallyDeveloping your own Bitrise StepUsing fastlane in Jenkins? You can easily put your fastlane lanes to work on Bitrise too. All you have to do is add a Bitrise’s Fastlane Step to your Workflow and add your lane name into the Step. Start a build and your lane will run on Bitrise. For more information, check out our guide on Integrating fastlane to Bitrise. " }, 
{ "title" : "Jenkins Pipeline - Bitrise Workflow ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-cc569186-6570-7095-fa0d-f54095328e1e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkins Pipeline - Bitrise Workflow ", 
"snippet" : "A Jenkins Pipeline is equivalent to a Bitrise Workflow , but the Bitrise Workflows are much easier to manage: you can quickly create new Workflows based on existing ones, chain multiple Workflows together in a single build, or delete Workflows that you no longer need. A Bitrise Workflow is a series ...", 
"body" : "A Jenkins Pipeline is equivalent to a Bitrise Workflow , but the Bitrise Workflows are much easier to manage: you can quickly create new Workflows based on existing ones, chain multiple Workflows together in a single build, or delete Workflows that you no longer need. A Bitrise Workflow is a series of Steps, such as test, code sign, build APK\/ ipa and deploy. When you add an app to Bitrise, a primary Workflow, created based on the project scanner’s findings, gets kicked off\/triggered automatically. You can have several Workflows for a certain project. For example: For any PR events, create a Workflow that, once triggered, runs quickly and only executes basic tests such as smoke tests. For a meatier Workflow, that runs all your test, we recommend creating another Workflow and run it overnight or schedule it on 6\/12\/24 hour interval. The Workflow Editor is the main place for configuring your Workflow. Jenkins Stages are equal to multiple Bitrise Workflows chained together inside a main Workflow. On Bitrise the Workflow Editor helps you to chain Workflows like one would chain toy trains after each other. The Workflow Editor has other powerful features built in to assist you with mobile development: Code signing : one-stop shop to store and manage all your code signing files which then will be used by the Workflow. Again, no need for installing a code signing tool first like in Jenkins. You can store any custom file here too (in the GENERIC FILE STORAGE section) which the Generic File Storage Step can download. Secrets: check out your app’s secret Environment Variables or add new ones. Environment Variables: there is no confusion of secrets and Env Vars in Bitrise. They are neatly organized into separate tabs so that you know where’s what. Add App Env Vars or Workflow specific Env Vars here. You can also reference Secrets as Env Vars with $. Triggers : You can configure triggers: code push events, pull requests, or tags can all be set up to automatically start builds on Bitrise. Stack : Check out the default stack of your app, select a new one from a dropdown menu or select a specific stack for one of your Workflows. " }, 
{ "title" : "Dashboards in Jenkins and Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e7c0fc15-c40c-9b76-646a-69c062ee0d1d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise ", 
"snippet" : "This is the main landing page where you find yourself once you start your first build. If you start using Bitrise more, you will see a list of your latest, queued builds and your installed projects along with your own profile and the Workspace\/s you are member of - all on one page. The LATEST BUILDS...", 
"body" : "This is the main landing page where you find yourself once you start your first build. If you start using Bitrise more, you will see a list of your latest, queued builds and your installed projects along with your own profile and the Workspace\/s you are member of - all on one page. The LATEST BUILDS tab on your Bitrise Dashboard displays all recent builds similarly to the Build history feature in Jenkins. You can filter for any status: successful, aborted, failed, and running but each build displays their statuses anyway. On Jenkins, build statuses are listed in the Build Executor Status or on the Blue Ocean Dashboard . When using Bitrise you get a user-friendly graphical interface right from the start, whereas, with Jenkins, you have to install the plugin first. Bitrise build statuses are shown on both the Dashboard , and on the Builds page of your app. Build Queue on Jenkins is the Queued Builds on Bitrise. You can schedule builds to queue them with the Advanced option of the Scheduling builds feature. On the right side of the Dashboard, you can see all your apps under APPS . " }, 
{ "title" : "Adding a new app to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-12c0dcf2-b371-c0ca-b3e1-1a7bb16d20f1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Adding a new app to Bitrise ", 
"snippet" : "What New item means in Jenkins is the adding a new app flow on Bitrise, either on the web UI or from the CLI . This is a highly automated flow where minimal configuration is needed from you and literally within a minute your new build starts. Our flow takes you through all the important phases: sett...", 
"body" : "What New item means in Jenkins is the adding a new app flow on Bitrise, either on the web UI or from the CLI . This is a highly automated flow where minimal configuration is needed from you and literally within a minute your new build starts. Our flow takes you through all the important phases: setting privacy, connecting your repository, setting up repository access, choosing a branch, configuring your app, setting up your build configuration and configuring webhooks . " }, 
{ "title" : "Webhooks on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e417416e-117b-8be4-5a66-82947f9909e8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Dashboards in Jenkins and Bitrise \/ Webhooks on Bitrise ", 
"snippet" : "Bitrise makes extensive use of webhooks, which you can enable with a simple click when connecting an app to Bitrise. It all makes sense to add the webhook during the initial setup and not having to search for this functionality when you try to quickly get your app to speed. In short, there are two t...", 
"body" : "Bitrise makes extensive use of webhooks, which you can enable with a simple click when connecting an app to Bitrise. It all makes sense to add the webhook during the initial setup and not having to search for this functionality when you try to quickly get your app to speed. In short, there are two types of Webhooks: Incoming webhooks, registered with your Git service provider, are used to automatically trigger builds on Bitrise. Outgoing webhooks are used to send reports of build events to other services, such as Slack. They can be added either on the website or via the API. " }, 
{ "title" : "Jenkinsfile - Bitrise YAML ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e11c9cce-86d1-e1c4-402e-f247d31831b5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Jenkinsfile - Bitrise YAML ", 
"snippet" : "A Jenkins Pipeline uses groovy code, while Bitrise uses the more highly structured YAML format. All Workflows are defined in the bitrise.yml file in YAML format, which you can edit by clicking the bitrise.yml tab of the Workflow Editor. You can store the bitrise.yml file of your app either on bitris...", 
"body" : "A Jenkins Pipeline uses groovy code, while Bitrise uses the more highly structured YAML format. All Workflows are defined in the bitrise.yml file in YAML format, which you can edit by clicking the bitrise.yml tab of the Workflow Editor. You can store the bitrise.yml file of your app either on bitrise.io or in your repository . Don’t worry, your secrets (for example, credentials and IDs) are safe with us. You can also download the current bitrise.yml configuration of your app and run it locally with the Bitrise CLI. " }, 
{ "title" : "Master and agent on Jenkins - Bitrise stack ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-a63e34eb-9823-2d3b-66ca-5674a17af82e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Master and agent on Jenkins - Bitrise stack ", 
"snippet" : "A stack is the type of virtual machine we use to run your build. For example, for a native iOS app, the best stack is one of our Xcode stacks. Stacks come with all of the necessary tools pre-installed, and are regularly updated to make sure they will serve all of your needs. This way you don’t have ...", 
"body" : "A stack is the type of virtual machine we use to run your build. For example, for a native iOS app, the best stack is one of our Xcode stacks. Stacks come with all of the necessary tools pre-installed, and are regularly updated to make sure they will serve all of your needs. This way you don’t have to bother with maintaining master and agent instances or adding a node machine to your groovy code to run a build on a certain platform. When you add your app to Bitrise, our project selector automatically detects the type of your project and based on its platform type, adds a default stack to it. Your first build will run on this stack, which is a virtual machine with all the required tools pre-installed on it. Should you wish to use another stack, you can simply select it from the Default Stack dropdown menu on the Stack tab. If you click the More information link, you can see the preinstalled tools with their versions. We support the latest Xcode version shortly after its official release. In our system reports you can check the installed tools and their versions on each stack. Learn more about our Stack update policy. " }, 
{ "title" : "People management in Jenkins and Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-e3a7646b-85ab-3d84-4508-051898f66080", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ People management in Jenkins and Bitrise ", 
"snippet" : "What you have on the People page of Jenkins can be found in two places on Bitrise (depending on if you have a team or a Workspace set up). You can see your team members on the Teams tab of your app. You can see the Workspace members if you click Account Settings , then select a Workspace and find th...", 
"body" : "What you have on the People page of Jenkins can be found in two places on Bitrise (depending on if you have a team or a Workspace set up). You can see your team members on the Teams tab of your app. You can see the Workspace members if you click Account Settings , then select a Workspace and find the People tab on the left. The purpose of Workspaces is to make it easier to manage several people working on different apps on Bitrise. Workspaces can own an unlimited number of apps, and Workspace owners can assign Workspace members to work on different apps as they see fit. A Team on Bitrise means all the users who work on the same app: they make up the app’s team, and you can manage them on the app’s Teams tab. On the Groups tab you can manage Workspace members such as delete, add a new member to the group, assign a group to apps and rename a group. On the People tab you can see who is already added to the Workspace and, if needed, you can remove a member from all groups of the Workspace. Workspaces consist of groups: Workspace owners can create and manage groups. A given group can be assigned to work on an app: all members of the same group will have the same level of access to the app. " }, 
{ "title" : "Integrated SSO management on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43160-migrating-to-bitrise.html#UUID-faf213f4-7c83-aee3-fab0-5a19cd1a509b_UUID-43ffb67c-adae-38a4-5ff8-223b2d9d5614", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Migrating to Bitrise \/ Migrating from Jenkins to Bitrise \/ Integrated SSO management on Bitrise ", 
"snippet" : "While in Jenkins you have to install an authorization plugin for SSO management, in Bitrise it comes as an integral part of the the Velocity plan . Workspace with such plans can set up SAML SSO as their single gateway to their Workspace on Bitrise. No more remembering usernames and credentials! All ...", 
"body" : "While in Jenkins you have to install an authorization plugin for SSO management, in Bitrise it comes as an integral part of the the Velocity plan . Workspace with such plans can set up SAML SSO as their single gateway to their Workspace on Bitrise. No more remembering usernames and credentials! All the Workspace owner has to do is set up Bitrise as a SAML SSO app on the SAML SSO provider and invite Workspace members to the Bitrise Org. We have specific guides to the different SAML SSO providers to guide you through the steps. " }, 
{ "title" : "Signing up for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43170-signing-up-for-bitrise.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise ", 
"snippet" : "You can sign up for Bitrise either via an email address or by authenticating yourself with your GitHub, Bitbucket or GitLab account. You can sign up for Bitrise either via an email address or by authenticating yourself with your GitHub, Bitbucket or GitLab account. Signing up using a Git provider ac...", 
"body" : "You can sign up for Bitrise either via an email address or by authenticating yourself with your GitHub, Bitbucket or GitLab account. You can sign up for Bitrise either via an email address or by authenticating yourself with your GitHub, Bitbucket or GitLab account. Signing up using a Git provider account brings some practical benefits, like logging in with one click and of course you won’t have to authorize your Git account when adding repositories hosted by these providers again. Signing up with email Please note that if you want to sign up for Bitrise with an email address, the address cannot contain the character + . " }, 
{ "title" : "Signing up with a Git provider ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43170-signing-up-for-bitrise.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-0c4bf1b6-9148-2209-65b9-a91c8f504964", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with a Git provider ", 
"snippet" : "You can sign up for Bitrise through the Start for free button in the upper right corner of Bitrise . It will take you to the Sign up page. On the Sign up page, scroll down to the OR SIGN UP WITH section where you can pick a git provider. Authorize your selected Git provider. If you chose GitHub, pre...", 
"body" : "You can sign up for Bitrise through the Start for free button in the upper right corner of Bitrise . It will take you to the Sign up page. On the Sign up page, scroll down to the OR SIGN UP WITH section where you can pick a git provider. Authorize your selected Git provider. If you chose GitHub, press the Authorize bitrise-io button, and then you will be redirected to Bitrise. If you chose Bitbucket, press the Grant access button on Bitbucket, and then you will be redirected to Bitrise. If you chose GitLab, press the Authorize button, and then you will be redirected to Bitrise. Pick a username and a password. When done, click Sign up . Strong password Please note that you must provide a strong password which fulfills these requirements: It should have at least 8 characters. One upper case character. One lower case character. One number. Cannot contain the same character more than 3 times in a row (aaa). Cannot contain your email or username. After that, you are ready to roll. Your first Workspace will be created automatically, and you will be redirected to the Getting Started page, where you can rename your Workspace, run a demo app , or start adding new apps! " }, 
{ "title" : "Signing up with email ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43170-signing-up-for-bitrise.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-23ca7daa-ff51-db4e-b4df-7b198463397e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with email ", 
"snippet" : "Don't use the + character Please note that if you want to sign up for Bitrise with an email address, the address cannot contain the character + . You can sign up for Bitrise through the Start for free button in the upper right corner of Bitrise . It will take you to the Sign up page. Add your email ...", 
"body" : "Don't use the + character Please note that if you want to sign up for Bitrise with an email address, the address cannot contain the character + . You can sign up for Bitrise through the Start for free button in the upper right corner of Bitrise . It will take you to the Sign up page. Add your email address, username, and password. Strong password Please note that you must provide a strong password which fulfills these requirements: It should have at least 8 characters. One upper case character. One lower case character. One number. Cannot contain the same character more than 3 times in a row (aaa). Cannot contain your email or username. Check the I agree to the Bitrise Terms of Service & Privacy Policy , and click the  Sign up  button. Check your inbox for a confirmation email from Bitrise and follow the instructions there. If you haven’t received a confirmation email from us, click the Resend confirmation email button. And that's it! After confirming your account, your first Workspace will be created automatically, and you will be redirected to the Getting Started page. You can rename your Workspace, run demo apps , or start adding new apps! " }, 
{ "title" : "Signing up with SAML SSO ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43170-signing-up-for-bitrise.html#UUID-9dc60577-d179-a769-7d72-d59b459e13d1_UUID-5c11279f-1d2d-03b5-a913-33d3c4833915", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Signing up for Bitrise \/ Signing up with SAML SSO ", 
"snippet" : "You can sign up for Bitrise and join a Bitrise Workspace using the Workspace’s SAML SSO . On the IdP side, the Administrator has to add you as a user to the Bitrise SAML SSO app’s Workspace. The Bitrise Workspace owner can send you an invitation from the Groups menu of the Workspace on Bitrise. Go t...", 
"body" : "You can sign up for Bitrise and join a Bitrise Workspace using the Workspace’s SAML SSO . On the IdP side, the Administrator has to add you as a user to the Bitrise SAML SSO app’s Workspace. The Bitrise Workspace owner can send you an invitation from the Groups menu of the Workspace on Bitrise. Go to our Sign up page. Click the SAML button. You are directed to the Initiate Single Sign-On page. Provide the Bitrise Workspace’s Name that you got from the Bitrise Workspace owner and click Continue with SSO so that Bitrise can direct you to the Workspace’s connected SAML SSO provider. Provide your credentials associated with your SAML SSO account. On the Almost there page the Email field is automatically populated based on your registered email address at your SAML SSO account. You can alter the provided Username as you wish. Click Finish Sign Up . Check your inbox for a confirmation email from Bitrise and follow the instructions there. If you haven’t received a confirmation email from us, click the Resend confirmation email button. If all went well, you’re landed on your Bitrise Dashboard where you can view the Workspace’s apps! If you go to your Account Settings , you will see the Workspace you’ve just joined. " }, 
{ "title" : "Creating your first Workspace ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-65331-creating-your-first-workspace.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Creating your first Workspace ", 
"snippet" : "A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. To be able to add apps and run builds, you either need to be part of a Workspace, or you have to be an outside contributor on an app's team. A Workspace is an environment that allows y...", 
"body" : "A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. To be able to add apps and run builds, you either need to be part of a Workspace, or you have to be an outside contributor on an app's team. A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. You can create multiple Workspaces, and you can be invited to Workspaces by other Bitrise users. To be able to add apps and run builds, you either need to be part of a Workspace, or you have to be an outside contributor on an app's team. You also need a Workspace to have a paid subscription plan on Bitrise. Each of your Workspaces can have a different subscription plan which determines how many credits your Workspace's apps can use. To create your first Workspace: Log in to Bitrise. In the Workspace name field, enter the name for the Workspace. You can change this name later. Click the Create Workspace button. Choose between the Teams plan and the Hobby plan. Velocity plan If you are interested in the Velocity plan, please contact us ! Click the Subscribe button and proceed to finish creating your first Workspace. Teams plan If you chose the Teams plan, follow the instructions to set your credit tier and provide payment details. For more information, check out the Pricing page . Once you are the owner of a Workspace, you can start adding apps. " }, 
{ "title" : "Adding a new app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43171-adding-your-first-app.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Adding a new app ", 
"snippet" : "Adding an app to Bitrise means setting up access to your repository so that you can run builds. Our project scanner determines the platform type and generates default Workflows to build and deploy your app. Adding an app to Bitrise means granting Bitrise access to your code's Git repository so that ...", 
"body" : "Adding an app to Bitrise means setting up access to your repository so that you can run builds. Our project scanner determines the platform type and generates default Workflows to build and deploy your app. Adding an app to Bitrise means granting Bitrise access to your code's Git repository so that you can run builds. During the process, we also run our project scanner that detects the platform type of your app - for example, iOS - and generate default Workflows with all the necessary Steps to build and deploy your app. The project scanner Supporting a platform\/framework means that our project scanner can detect the type of the app and set up a basic Bitrise configuration based on the type. You can add any other app, too, regardless of how it's built but you'll have to configure it manually. Each app is owned by a Workspace and most apps, with the exception of public apps, require some form of authentication to be able to access the repository. To add a new app to Bitrise: On the Bitrise CI page, click the Add new app button. You can also open the dropdown menu next to the button to add a new app from the CLI . Select the Workspace that will own the app. Set the app to private or public. This settings can't be changed later. Private apps are only accessible to the Workspace members. They need to authenticate themselves to view the app's details. Public apps expose their configuration file and build logs to everyone who has the link. Connect a repository. You can: Connect your GitHub account or organization to Bitrise via the GitHub App integration and select an available repository. We strongly recommend this method if you are using a GitHub repository. Connect your Git provider account to Bitrise via an OAuth application and select an available repository. Enter a repository URL manually. Configure authorization to allow Bitrise to access the repository. There are multiple ways to do so, depending on the type of your app: Public apps don't require authorization. Private apps that are accessed via the GitHub App integration don't need additional authorization. Private apps with SSH URLs, accessed via OAuth applications, require configuring an SSH key . Bitrise can do this automatically or you can create and register your own SSH key pair. Private apps with HTTPS URLs, accessed via OAuth applications, require HTTPS authorization with a personal access token . We recommend using a token with only read access. Set the default branch of the app and decide if you want our project scanner to scan the code on the branch. If your repository is connected, you can select an available branch from a dropdown menu. If you entered a repository URL manually, you need to type a valid branch name. Repository URL You will be able to change your project's repository URL later. You can also connect or disconnect your account to Git provider services at any time. Configure the app settings. You can either modify and confirm the automatically generated settings, or create a configuration manually. The configuration sets a stack , machine type , and a project root directory, among other things. The exact parameters to configure depends on the project type. Select an app icon. You can skip this and add an icon later. For apps with OAuth connections, add a webhook . A webhook is required to automatically trigger builds . Apps with the GitHub App integration don't need a webhook. Once you are done, click View App Page to go to the newly added app's home page. From there, you can start editing your Workflows and run builds . " }, 
{ "title" : "Getting started with iOS apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-65135-getting-started-with-ios-apps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps ", 
"snippet" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your iOS app. Developing for iOS is complex - our aim is to make it as easy as possible for you! In this guide, we’ll walk you through how to add an iOS app to Bitrise, how to r...", 
"body" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your iOS app. Developing for iOS is complex - our aim is to make it as easy as possible for you! In this guide, we’ll walk you through how to add an iOS app to Bitrise, how to run Xcode tests, manage your code signing files, and deploy the app to  bitrise.io  and to the App Store. Integrating fastlane to Bitrise You can run your fastlane lane on Bitrise with the same commands you would use locally. Bitrise’s automated Steps provide extra functionality to your lane and speed up your builds. For more information, check out Integrating fastlane to Bitrise . " }, 
{ "title" : "Adding an iOS app to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-65135-getting-started-with-ios-apps.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-c8447cbb-f22a-d58d-c792-57336c023002", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Adding an iOS app to Bitrise ", 
"snippet" : "Do you have a Bitrise account? Make sure you have signed up to bitrise.io and can access your Bitrise account. There are multiple ways of registering an account: Signing up with emailSigning up with a Git providerLog in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project...", 
"body" : "[video] Do you have a Bitrise account? Make sure you have signed up to bitrise.io and can access your Bitrise account. There are multiple ways of registering an account: Signing up with emailSigning up with a Git providerLog in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project access , select the Workspace that will own the app. Set the privacy of the app. You cannot change this setting later! If you realize you've accidentally added your app as a public app even though you need it to be private, you'll have to delete the app and add it again. Private apps are only accessible to you, your Workspace members and those who are invited to work on an app. They require authentication to access the repository of the app. Public apps  expose their  bitrise.yml and their build logs to everyone. If you have a public app’s build URL, you can view its build log, to help with troubleshooting, for example. Public apps do not require authentication and they cannot have SSH keys. Select one of two options to set your repository URL: With the Select remote repository option, you can select a repository from a list of repos from a connected Git provider account. Choose the Git provider from the dropdown menu, then click Select a repository... and select the repository from the list. The Enter URL manually option does not require a connected Git provider account: you can simply enter the URL and proceed to the authentication phase. We strongly recommend using an SSH URL, unless you are setting up a public app . Repository URL You will be able to change your project's repository URL later. You can also connect or disconnect your account to Git provider services at any time. If you signed up for Bitrise using a Git provider account, that one is already connected and you can select any of your repositories from it. Add an SSH key in the Authorize Bitrise section. This is only relevant for private apps: public apps can't have SSH keys and they don't require authentication. Choose from one of three options: Auto-add a generated SSH key to your repository : We recommend using this option. We automatically generate an SSH key pair and register the public key to your repository. Requires your connected Git provider account to have admin rights to the repository. Copy a generated SSH key to your Git provider manually : We generate an SSH key pair for you and you can copy the public key and register it manually to your Git provider. It is useful if, for example, you need to access multiple repositories with the same SSH key. Add your own SSH key to Bitrise : You can generate your own SSH key and paste the private key here after choosing this option. You also need to add the public key to the repository manually. To generate your SSH key pair: Generating your own SSH keypair. Configure SSH keys at any time If you can't set up a valid, working SSH key connection at this time, don't worry: proceed with adding your app. You can set up the SSH connection afterwards: Configuring SSH keys. Select the default branch of your repository. This branch should contain the configuration of your project. If you successfully configured SSH access in the previous step or if you're adding a public app, Bitrise will parse your repository and allow you to select a branch from a dropdown menu. If you didn't configure repository access, you need to type the branch name manually. You can change the default branch of the app later . In the next step, choose Yes, auto-detect configuration . Bitrise will scan your repository and attempt to set up a stack and default Workflows based on the results of the scan. In most cases, we recommend choosing this option. Project type Detecting a project type serves to assist in the initial configuration of your app. But don't worry, you can change every setting, including the project type, at any time after you added the app. Wait while Bitrise is validating your project. We look for your configuration files and set up your app based on them. In the case of an iOS app, we’re looking for your Xcode Project ( .xcodeproj ) or Xcode Workspace ( .xcworkspace ) path. Note that the validation will fail if you do not have a SHARED scheme in your project. You can still point Bitrise manually to your Xcode scheme but if it’s shared, we automatically detect it for you. Select the IPA export method. You can modify this later - for now, select  development . Once you clicked it, you should see your: Project or Workspace path. Scheme name IPA export method. iOS stack. Register a webhook when prompted so that Bitrise can start a build automatically when code is pushed to your repository, or a pull request is created. Once you are done, click View App Page to go to the newly added app's home page. From there, you can start editing your Workflows and run builds . " }, 
{ "title" : "Testing your iOS app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-65135-getting-started-with-ios-apps.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-0711441f-0265-b53a-cbfd-693b90594a9f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Testing your iOS app ", 
"snippet" : "Once you created your app, the first build will run based on the automatically created primary workflow. You can check it out in the app’s Workflow Editor: click the app’s name on your Dashboard then click the Workflow tab. If you have test targets defined, the primary workflow of an iOS app include...", 
"body" : "Once you created your app, the first build will run based on the automatically created primary workflow. You can check it out in the app’s Workflow Editor: click the app’s name on your Dashboard then click the Workflow tab. If you have test targets defined, the primary workflow of an iOS app includes the two Steps you need to run your Xcode tests, and view their results on  bitrise.io : Xcode Test for iOS Deploy to Bitrise.io Code signing files Running Xcode tests and deploying their results to Bitrise do not require any code signing files. So don’t worry about them just yet! The Xcode Test for iOS Step runs the pre-defined Xcode tests. It has a default configuration that does not need to be modified: if the tests are written correctly, they will work. You can find the same configuration options in Xcode, too. Checking your selected stack in the Stacks & Machines tab We recommend checking that the stack selected for your app has the same Xcode version you used to build the app. For example, if your simulator test fails with the Ineligible destinations for the scheme message, then make sure the Xcode version in the Stacks & Machines tab is correct. You can read more about our stacks: Build stacks. The Deploy to Bitrise.io Step will deploy the following to the  Logs  and  Artifacts  tab of the build: Your Xcode test results. Your raw xcodebuildoutput log. The  Deploy to Bitrise.io  Step also exports the results of the  Xcode Test for iOS  Step to the  Test Reports  add-on. " }, 
{ "title" : "Creating a signed IPA for Xcode projects ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-65135-getting-started-with-ios-apps.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-39fbc767-f894-36b9-67c4-77255dcf2fed", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Creating a signed IPA for Xcode projects ", 
"snippet" : "You can easily create a signed IPA file for your Xcode project with Bitrise if you have your Apple connection set up correctly and you made code signing files available to your builds. Overview on iOS code signing in Bitrise For a comprehensive overview on what Steps are available for code signing a...", 
"body" : "You can easily create a signed IPA file for your Xcode project with Bitrise if you have your Apple connection set up correctly and you made code signing files available to your builds. Overview on iOS code signing in Bitrise For a comprehensive overview on what Steps are available for code signing asset management, visit the iOS code signing page . You can easily create a signed IPA file for your Xcode project with Bitrise. You have set up Apple service connection on Bitrise. Your code signing files are managed correctly . You set the relevant inputs of our Xcode Archive and Export for iOS Step . Upload the distribution AND the development signing certificates We strongly recommend uploading BOTH the development and distribution signing certificates for your project. If you don't have an uploaded development signing certificate, Steps with automatic provisioning options will generate one on the fly every time you start a build. This can eventually lead to reaching the maximum number of certificates, blocking you from starting new builds. If you’re all set, proceed to setting up IPA export in your Workflow . Workflow Editor bitrise.yml Make sure the necessary code signing files have been collected and uploaded . Make sure you have the Xcode Archive & Export for iOS Step in your Workflow. Set the Distribution method input of the Step. The options are: auto-detect - Please note that this option is deprecated and will be removed. We do not recommend using it. app-store : Choose this if you want to deploy the app to the App Store. Requires a Distribution certificate and an App Store provisioning profile. ad-hoc : Choose this if you want to deploy the app to ad-hoc testers. Requires a Distribution certificate and an Ad Hoc provisioning profile. enterprise : Choose this if you have an Apple Enterprise account and want to use that to distribute your app. development : Choose this for internal testing. Requires a Developer certificate and a Development provisioning profile. Set the Automatic code signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Save the Workflow, and start a new build. Make sure all the necessary code signing files are available for your build. Open the bitrise.yml file of your app. Make sure you have the xcode-archive Step in your Workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n Set the distribution_method input to the correct value. The available options are: app-store : Choose this if you want to deploy the app to the App Store. Requires a Distribution certificate and an App Store provisioning profile. ad-hoc : Choose this if you want to deploy the app to ad-hoc testers. Requires a Distribution certificate and an Ad Hoc provisioning profile. enterprise : Choose this if you have an Apple Enterprise account and want to use that to distribute your app. development : Choose this for internal testing. Requires a Developer certificate and a Development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - distribution_method: development Set the automatic_code_signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - automatic_code_signing: api-key\n - distribution_method: development That’s all. Xcode will automatically select the right signing files based on your project’s Bundle ID and Team ID settings, and the export method you set. " }, 
{ "title" : "Signing an IPA file with a different team’s code signing file ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-65135-getting-started-with-ios-apps.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-340d099b-119d-d223-51d1-e68e201194e2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file ", 
"snippet" : "You might want to sign the IPA file with a different team’s code signing files. For example: If you use your company’s code signing files for internal builds, but your client’s code signing files are used for App Store distribution. If you use Apple ID for automatic code signing and the Apple ID bel...", 
"body" : "You might want to sign the IPA file with a different team’s code signing files. For example: If you use your company’s code signing files for internal builds, but your client’s code signing files are used for App Store distribution. If you use Apple ID for automatic code signing and the Apple ID belongs to multiple teams, use The Developer Portal team to use for this export input to specify which team should be used for automatic code signing asset management. To do so: Make sure the right code signing files of the new development team are uploaded to Bitrise. Set the The Developer Portal team to use for this export option as well (in addition to the Distribution method ). Set the Distribution method . " }, 
{ "title" : "Deploying the app to App Store Connect ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-65135-getting-started-with-ios-apps.html#UUID-81a6851f-9012-17b1-188b-167cce87cfb9_UUID-066aad78-034d-c38c-2cb1-6834902c1346", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with iOS apps \/ Deploying the app to App Store Connect ", 
"snippet" : "Keep in mind that every time you want to push an app to App Store Connect, it must have a unique build and version number: increment either or both before deploying. Make sure you have a working connection to your Apple Developer account . Generate an IPA file on your own machine at least once. Uplo...", 
"body" : "Keep in mind that every time you want to push an app to App Store Connect, it must have a unique build and version number: increment either or both before deploying. Make sure you have a working connection to your Apple Developer account . Generate an IPA file on your own machine at least once. Upload all necessary code signing files to Bitrise. To deploy an app to App Store Connect, you need a Distribution type certificate and an App Store type provisioning profile. Make sure the Xcode Archive & Export for iOS Step is in your Workflow. Set the Automatic code signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t use automatic code signing, or if you exclusively use Step inputs for Apple service authentication. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Set the Distribution method input of the Step to app-store . The Step will store the path of the exported .ipa file in the $BITRISE_IPA_PATH Environment Variable. Add the Deploy to App Store Connect Step to your Workflow. Fill the required inputs. Either the app’s Apple ID or its Bundle ID is a required input. One of the two must be provided. If you set the Submit for Review to true , the Step will wait for your submission to be processed on App Store Connect and then submit the given version of the app for review. The default value of the Skip App Version Update input is No . Change it only if you incremented the app version number in another way. If you use an App Store Connect account that is linked to multiple teams, provide either a Team ID or a Team name! Start a build. If all goes well, your app will be submitted to App Store and you can distribute it via Testflight or via the App Store! " }, 
{ "title" : "Getting started with Android apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-53056-getting-started-with-android-apps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps ", 
"snippet" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your Android app. In this guide, we’ll walk you through how to add an Android app to Bitrise, what the default Workflows can do, and finally how to test and deploy your app to b...", 
"body" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your Android app. In this guide, we’ll walk you through how to add an Android app to Bitrise, what the default Workflows can do, and finally how to test and deploy your app to bitrise.io and to Google Play Store. Do you have a Bitrise account? Make sure you have signed up to bitrise.io and can access your Bitrise account. There are multiple ways of registering an account: Signing up with emailSigning up with a Git provider" }, 
{ "title" : "Adding an Android app to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-53056-getting-started-with-android-apps.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-e31ec91e-3920-a5c9-8b02-d326c88f829d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Adding an Android app to Bitrise ", 
"snippet" : "Log in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project access , select the Workspace that will own the app. Set the privacy of the app. You cannot change this setting later! If you realize you've accidentally added your app as a public app even though you need it to ...", 
"body" : "[video] Log in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project access , select the Workspace that will own the app. Set the privacy of the app. You cannot change this setting later! If you realize you've accidentally added your app as a public app even though you need it to be private, you'll have to delete the app and add it again. Private apps are only accessible to you, your Workspace members and those who are invited to work on an app. They require authentication to access the repository of the app. Public apps  expose their  bitrise.yml and their build logs to everyone. If you have a public app’s build URL, you can view its build log, to help with troubleshooting, for example. Public apps do not require authentication and they cannot have SSH keys. Select one of two options to set your repository URL: With the Select remote repository option, you can select a repository from a list of repos from a connected Git provider account. Choose the Git provider from the dropdown menu, then click Select a repository... and select the repository from the list. The Enter URL manually option does not require a connected Git provider account: you can simply enter the URL and proceed to the authentication phase. We strongly recommend using an SSH URL, unless you are setting up a public app . Repository URL You will be able to change your project's repository URL later. You can also connect or disconnect your account to Git provider services at any time. If you signed up for Bitrise using a Git provider account, that one is already connected and you can select any of your repositories from it. Add an SSH key in the Authorize Bitrise section. This is only relevant for private apps: public apps can't have SSH keys and they don't require authentication. Choose from one of three options: Auto-add a generated SSH key to your repository : We recommend using this option. We automatically generate an SSH key pair and register the public key to your repository. Requires your connected Git provider account to have admin rights to the repository. Copy a generated SSH key to your Git provider manually : We generate an SSH key pair for you and you can copy the public key and register it manually to your Git provider. It is useful if, for example, you need to access multiple repositories with the same SSH key. Add your own SSH key to Bitrise : You can generate your own SSH key and paste the private key here after choosing this option. You also need to add the public key to the repository manually. To generate your SSH key pair: Generating your own SSH keypair. Configure SSH keys at any time If you can't set up a valid, working SSH key connection at this time, don't worry: proceed with adding your app. You can set up the SSH connection afterwards: Configuring SSH keys. Select the default branch of your repository. This branch should contain the configuration of your project. If you successfully configured SSH access in the previous step or if you're adding a public app, Bitrise will parse your repository and allow you to select a branch from a dropdown menu. If you didn't configure repository access, you need to type the branch name manually. You can change the default branch of the app later . In the next step, choose Yes, auto-detect configuration . Bitrise will scan your repository and attempt to set up a stack and default Workflows based on the results of the scan. In most cases, we recommend choosing this option. Project type Detecting a project type serves to assist in the initial configuration of your app. But don't worry, you can change every setting, including the project type, at any time after you added the app. Wait while Bitrise is validating your project. The scanner is looking for your build.gradle and gradlew files. If they are present, the project will be detected as an Android project. The Bitrise Scanner selects the main module of your project by default. If there are more modules to choose from in the Module list, select a module that works best for your project. Select a variant for building (you can  Select All Variants  which will generate all variants in  Artifacts ) and select a variant for testing too. Register a webhook when prompted so that Bitrise can start a build automatically when code is pushed to your repository, or a pull request is created. Once you are done, click View App Page to go to the newly added app's home page. From there, you can start editing your Workflows and run builds . " }, 
{ "title" : "Managing dependencies for Android apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-53056-getting-started-with-android-apps.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-b68e7eb2-2e20-4f63-a0fc-f4c4d22ce9d5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Managing dependencies for Android apps ", 
"snippet" : "The Gradle build system allows you include external binaries or other library modules as dependencies. Bitrise can install these dependencies for your app during the build process. Adding build dependencies You can read more about adding dependencies to your Android project: https:\/\/developer.androi...", 
"body" : "The Gradle build system allows you include external binaries or other library modules as dependencies. Bitrise can install these dependencies for your app during the build process. Adding build dependencies You can read more about adding dependencies to your Android project: https:\/\/developer.android.com\/studio\/build\/dependencies Make sure your project's build.gradle file lists all your dependencies. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Make sure your Workflow includes the Android Build Step. If the project scanner generated a Workflow called deploy when first adding your app, that Workflow includes the Step. It installs all dependencies listed in the build.gradle file without any additional configuration. Make sure your Workflow includes the Install missing Android SDK components Step. The Step must be BEFORE the Android Build Step in the Workflow. It will install all Android SDK tool that your project might need. " }, 
{ "title" : "Testing your Android app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-53056-getting-started-with-android-apps.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-8502b104-7448-87e8-5937-ab4b1922f01f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Testing your Android app ", 
"snippet" : "We have several Steps dedicated to assisting you in testing your Android app during the CI process. The Android Lint Step runs Lint on your Android project source files and detects potential syntax errors to keep your code error free. The Android Unit Test Step runs your project's unit tests. You ca...", 
"body" : "We have several Steps dedicated to assisting you in testing your Android app during the CI process. The Android Lint Step runs Lint on your Android project source files and detects potential syntax errors to keep your code error free. The Android Unit Test Step runs your project's unit tests. You can run it for all your different modules and flavors. Running Android unit testsThe Virtual Device Testing for Android uses Firebase TestLab to run Android tests on virtual devices. Device testing for AndroidThe Android Unit Test Step and the Virtual Device Testing for Android Step can both export their results to the Test Reports add-on. To do so, simply make sure that your Workflow includes the Deploy to Bitrise.io Step at the very end of the Workflow. " }, 
{ "title" : "Signing your Android app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-53056-getting-started-with-android-apps.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-561185fa-7af1-28f3-b03a-91b15c4bb64e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Signing your Android app ", 
"snippet" : "In order to publish an Android app to Google Play, you need to digitally sign the app. Bitrise can also do this for you: you'll just need to upload a keystore file, and provide the necessary authentication. Other code signing options In this section, we'll go through how to sign an Android app with ...", 
"body" : "In order to publish an Android app to Google Play, you need to digitally sign the app. Bitrise can also do this for you: you'll just need to upload a keystore file, and provide the necessary authentication. Other code signing options In this section, we'll go through how to sign an Android app with the Android Sign Step. There are other ways to sign your app - check out the other options in our relevant guides: Android code signingGenerate a keystore file Generate a keystore file . Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select Code signing from the menu. Drag-and-drop your keystore file to the ANDROID KEYSTORE FILE field. Fill out the Keystore password , Keystore alias , and Private key password fields and click Save metadata . Open the Workflow Editor . Add the Android Sign Generate cordova build configuration Step to your Workflow. And that's it. The next time you'll run a build, the Android Sign Step will sign the generated binary. " }, 
{ "title" : "Deploying an Android app to bitrise.io ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-53056-getting-started-with-android-apps.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-b3cbb2a1-2ef0-5e48-9204-a678f1c6ce66", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Deploying an Android app to bitrise.io ", 
"snippet" : "In this section, we'll go through how to deploy your Android app to bitrise.io . Deploying to bitrise.io means that the build artifacts generated during the build will be available for download once the build is finished. You can use this to test your app on your own test devices, for example. To de...", 
"body" : "In this section, we'll go through how to deploy your Android app to bitrise.io . Deploying to bitrise.io means that the build artifacts generated during the build will be available for download once the build is finished. You can use this to test your app on your own test devices, for example. To deploy your app to bitrise.io : Workflow Editor bitrise.yml Make sure your Workflow contains the Android Build Step to build your app. Optionally, you can build your app with the Gradle Runner Step. This requires a bit more configuration from you but allows for more extensive customization. Add the Deploy to Bitrise.io Step to your Workflow. Notifying other users You can use the Notify: User Roles and the Notify: Emails inputs of the Step to set up notifications about your deploy. Click the input names to reveal more information about how to configure them. Optionally, set the Enable public page for the App? input of the Step to true so the Step enables the public install page for your app. Run a build. Open the bitrise.yml file of your app. Make sure your Workflow contains the android-build Step to build your app. workflows:\n example-workflow:\n steps:\n - android-build@1:\n Optionally, you can build your app with the gradle-runner Step. This requires a bit more configuration from you but allows for more extensive customization. Set the module and\/or variant input to tell the Step what to build. In this example, we're building a debug variant of the Android project. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n - variant: debug\n - deploy-to-bitrise-io: {} Add the deploy-to-bitrise-io Step to your Workflow. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n - variant: debug\n - deploy-to-bitrise-io: {} Notifying other users You can use the notify_user_groups and the notify_email_list inputs of the Step to set up notifications about your deploy: The notify_user_groups input allows you to send notifications based on the access roles granted to users. For example, you can set the input to notify everyone with an Admin and a Developer role. Set multiple roles separated by a comma: - notify_user_groups: admins, testers . The notify_email_list input only accepts Secrets, and the Secret should contain comma-separated lists of email addresses. Optionally, set the Enable public page for the App? input of the Step to true so the Step enables the public install page for your app. Run a build. The Deploy to Bitrise.io Step will deploy the app. You can share the generated binary with your team members using the build’s URL. A bitrise.yml for deploying an Android app to Bitrise In this example, we're building the debug variant of an Android app, and deploy it to bitrise.io, as. " }, 
{ "title" : "Setting up Google Play deployment for the first time ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-53056-getting-started-with-android-apps.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Setting up Google Play deployment for the first time ", 
"snippet" : "Deploying to Google play publishes your app to Google's online store. When you do it for the first time, this requires a bit more work than simply deploying to bitrise.io . Once the necessary configurations are in place, it becomes very simple. When configuring Google Play deployment for the first t...", 
"body" : "Deploying to Google play publishes your app to Google's online store. When you do it for the first time, this requires a bit more work than simply deploying to bitrise.io . Once the necessary configurations are in place, it becomes very simple. When configuring Google Play deployment for the first time, you need to link your Google Play Developer account to an API project, set up API access, and upload the service account JSON key to Bitrise. Upload the first AAB or APK manually to Google Play using the Google Play Console . Link your Google Play Developer Console to an API project. Set up API Access Clients using a service account : Please note when you create your service account on the Google Developer Console, you have to choose json as Key Type . Grant the necessary rights to the service account with your Google Play Console . Go to Settings , then Users & permissions , then Invite new user . Due to the way the Google Play Publisher API works, you have to grant at least the following permissions to the service account: Access level: View app information. Release management: Manage production releases, manage testing track releases. Store presence: Edit store listing, pricing & distribution. As an optional step, you can add translations to your Store Listing: Translate & localize your app . Connect your Google service account to Bitrise . " }, 
{ "title" : "Deploying to Google Play ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-53056-getting-started-with-android-apps.html#UUID-a4a3c266-19bb-8741-cd56-40fee645d58b_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Android apps \/ Deploying to Google Play ", 
"snippet" : "Deploying to Google Play requires a signed APK or AAB file and the Google Play Deploy Step . Workflow Editor bitrise.yml If you're trying to deploy your app for the first time, make sure your Google Play configuration is set up correctly and that you uploaded your service account JSON key to Bitrise...", 
"body" : "Deploying to Google Play requires a signed APK or AAB file and the Google Play Deploy Step . Workflow Editor bitrise.yml If you're trying to deploy your app for the first time, make sure your Google Play configuration is set up correctly and that you uploaded your service account JSON key to Bitrise . Uploading the service account JSON key file We recommend uploading the service account JSON key to Bitrise but it is not mandatory: you can store it elsewhere and provide a direct link to it. Open the App settings page, and select Code Signing . On the Android tab, find the uploaded service account JSON key and copy the secret Env Var under its name. For example, BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL . Open your Workflow and add the Google Play Deploy Step to it. In the Service Account JSON key file path input, paste the Environment Variable you copied. Direct path to the service account JSON key file If you don't want to upload the service account JSON key to Bitrise, you can also add a file path right in the Step’s input field where the file path can be local or remote too: For a remote JSON key file you can provide any download location as value, for example, https:\/\/URL\/TO\/key.json . For a local JSON key file you can provide a file path url as value, for example, file:\/\/PATH\/TO\/key.json . In the Package name input, add the package name of your app. In the Track input, add the track where you want to deploy your APK (for example, alpha\/beta\/rollout\/production or any custom track you set). If you're trying to deploy your app for the first time, make sure your Google Play configuration is set up correctly and that you uploaded your service account JSON key to Bitrise . Uploading the service account JSON key file We recommend uploading the service account JSON key to Bitrise but it is not mandatory: you can store it elsewhere and provide a direct link to it. Open your app's bitrise.yml file and add the google-play-deploy Step to it. deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n In the service_account_json_key_path input, you need to provide the path to the service account JSON key file. If you uploaded the file to Bitrise, you can find the Env Var storing its download URL in the Generic File Storage in the Workflow Editor. deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\" If you didn't upload your service account JSON key to Bitrise, you can set a direct path in the input. The file path can point to a local or a remote location. For a remote JSON key file you can provide any download location as value, for example, https:\/\/URL\/TO\/key.json . For a local JSON key file you can provide a file path url as value, for example, file:\/\/PATH\/TO\/key.json . In the package input, add the package name of your app. deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\"\n - package_name: myApp In the track input, add the track where you want to deploy your app binary (for example, alpha\/beta\/rollout\/production or any custom track you set). deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\"\n - package_name: myApp\n - track: alpha That’s all! Start or schedule a build and share the URL with external testers or distribute your app on an app store of your choice! " }, 
{ "title" : "Getting started with React Native apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps ", 
"snippet" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your React Native app. Expo projects If you use Expo in a React Native project, we have a dedicated guide: Getting started with Expo apps. You can easily set up and configure yo...", 
"body" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your React Native app. Expo projects If you use Expo in a React Native project, we have a dedicated guide: Getting started with Expo apps. You can easily set up and configure your React Native project on Bitrise . A React Native repo can consist of an Android and an iOS project so configurations should be done as you would normally do with Android and iOS apps. When running a React Native project on Bitrise, you will see that first an Android, then an iOS build gets built. Do you have a Bitrise account? Make sure you have signed up to bitrise.io and can access your Bitrise account. There are multiple ways of registering an account: Signing up with emailSigning up with a Git provider" }, 
{ "title" : "Adding a React Native app to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-34bd8728-3c12-985d-5378-4f5cf7fa1dee", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Adding a React Native app to Bitrise ", 
"snippet" : "This procedure will guide you through the process of adding your app to Bitrise, connecting your repository, setting up your repository access, selecting a branch and validating your project. Below we highlight some React Native-specific configuration as well. Log in to Bitrise and go to the Dashboa...", 
"body" : "[video] This procedure will guide you through the process of adding your app to Bitrise, connecting your repository, setting up your repository access, selecting a branch and validating your project. Below we highlight some React Native-specific configuration as well. Log in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project access , select the Workspace that will own the app. Set the privacy of the app. You cannot change this setting later! If you realize you've accidentally added your app as a public app even though you need it to be private, you'll have to delete the app and add it again. Private apps are only accessible to you, your Workspace members and those who are invited to work on an app. They require authentication to access the repository of the app. Public apps  expose their  bitrise.yml and their build logs to everyone. If you have a public app’s build URL, you can view its build log, to help with troubleshooting, for example. Public apps do not require authentication and they cannot have SSH keys. Select one of two options to set your repository URL: With the Select remote repository option, you can select a repository from a list of repos from a connected Git provider account. Choose the Git provider from the dropdown menu, then click Select a repository... and select the repository from the list. The Enter URL manually option does not require a connected Git provider account: you can simply enter the URL and proceed to the authentication phase. We strongly recommend using an SSH URL, unless you are setting up a public app . Repository URL You will be able to change your project's repository URL later. You can also connect or disconnect your account to Git provider services at any time. If you signed up for Bitrise using a Git provider account, that one is already connected and you can select any of your repositories from it. Add an SSH key in the Authorize Bitrise section. This is only relevant for private apps: public apps can't have SSH keys and they don't require authentication. Choose from one of three options: Auto-add a generated SSH key to your repository : We recommend using this option. We automatically generate an SSH key pair and register the public key to your repository. Requires your connected Git provider account to have admin rights to the repository. Copy a generated SSH key to your Git provider manually : We generate an SSH key pair for you and you can copy the public key and register it manually to your Git provider. It is useful if, for example, you need to access multiple repositories with the same SSH key. Add your own SSH key to Bitrise : You can generate your own SSH key and paste the private key here after choosing this option. You also need to add the public key to the repository manually. To generate your SSH key pair: Generating your own SSH keypair. Configure SSH keys at any time If you can't set up a valid, working SSH key connection at this time, don't worry: proceed with adding your app. You can set up the SSH connection afterwards: Configuring SSH keys. Select the default branch of your repository. This branch should contain the configuration of your project. If you successfully configured SSH access in the previous step or if you're adding a public app, Bitrise will parse your repository and allow you to select a branch from a dropdown menu. If you didn't configure repository access, you need to type the branch name manually. You can change the default branch of the app later . In the next step, choose Yes, auto-detect configuration . Bitrise will scan your repository and attempt to set up a stack and default Workflows based on the results of the scan. In most cases, we recommend choosing this option. Project type Detecting a project type serves to assist in the initial configuration of your app. But don't worry, you can change every setting, including the project type, at any time after you added the app. Wait while Bitrise is validating your project. If your configuration files are available on the selected branch, the scanner will detect your app as a React Native app. If your project consists of only one module, that module will be automatically selected for Module . If your project contains more than one module, you can pick a module, but we recommend the main one! In the Variant field, select a variant that suits your project. Pick Select All Variants to build all variants. Pick debug or release if you wish to generate an APK or an IPA file. In the Project (or Workspace) field, select your Xcode project or Xcode Workspace path. In the Select Scheme name , pick a scheme name. The scanner validation will fail if you do not have a SHARED scheme in your project. You can still point Bitrise manually to your Xcode scheme but if it’s shared, we automatically detect it for you. In Select ipa export method , select the export method of your .ipa file: ad-hoc, app-store, development or enterprise method. Don't worry, you can change this later. Register a webhook when prompted so that Bitrise can start a build automatically when code is pushed to your repository, or a pull request is created. Once you are done, click View App Page to go to the newly added app's home page. From there, you can start editing your Workflows and run builds . You have successfully set up your React Native project on bitrise.io ! " }, 
{ "title" : "Installing dependencies for Expo Ionic\/Cordova React Native apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Installing dependencies for Expo Ionic\/Cordova React Native apps ", 
"snippet" : "If the Bitrise project scanner has successfully scanned your React Native Ionic\/Cordova project, Run npm command or Run yarn command Steps will be included in your default Workflows . These Steps can install the missing Javascript dependencies for your app . For native Android dependencies, you can ...", 
"body" : "If the Bitrise project scanner has successfully scanned your React Native Ionic\/Cordova project, Run npm command or Run yarn command Steps will be included in your default Workflows . These Steps can install the missing Javascript dependencies for your app . For native Android dependencies, you can use the Install missing Android SDK components Step. For native iOS dependencies, you can use, among others, the Brew install Step or the Run CocoaPods install Step. To install Javascript dependencies with npm: Using Yarn instead of npm In this guide, we're using npm to install Javascript dependencies. However, you can use the Run yarn command Step: it can install missing JS dependencies without any additional configuration required. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Make sure your Workflow includes the Run npm command Step. In The 'npm' command with arguments to run input variable, type install . Using the npm ci command instead of npm install If you already have an up to date package-lock.json file in your project, we recommend using the ci command in The 'npm' command with arguments to run input. Using npm ci can not only result in much faster build times compared to npm install but more reliable builds as well. " }, 
{ "title" : "Code signing for React Native apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-27a4c90f-0ca6-8eb1-5037-f30a9a8bec00", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps ", 
"snippet" : "A React Native app can consists of two projects, an Android and an iOS - both have different signing procedures. If you click the Code Signing tab of your project’s Workflow Editor, all iOS and Android code signing fields are displayed in one page for you. Follow our platform-specific instructions t...", 
"body" : "A React Native app can consists of two projects, an Android and an iOS - both have different signing procedures. If you click the Code Signing tab of your project’s Workflow Editor, all iOS and Android code signing fields are displayed in one page for you. Follow our platform-specific instructions to code sign your app for both iOS and Android. " }, 
{ "title" : "Signing your Android project ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-4bbce633-6593-eb5d-f462-774e9082d17c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Signing your Android project ", 
"snippet" : "All Android apps must be digitally signed with a certificate before they can be installed on Android devices. On Bitrise, you can use our dedicated Step for this purpose but first you'll need a keystore file. Generate a keystore file Generate a keystore file . Open your app on Bitrise . Click the Wo...", 
"body" : "All Android apps must be digitally signed with a certificate before they can be installed on Android devices. On Bitrise, you can use our dedicated Step for this purpose but first you'll need a keystore file. Generate a keystore file Generate a keystore file . Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select Code signing from the menu. Drag-and-drop your keystore file to the ANDROID KEYSTORE FILE field. Fill out the Keystore password , Keystore alias , and Private key password fields and click Save metadata . Open the Workflow Editor . Add the Android Sign Generate cordova build configuration Step to your Workflow. If you uploaded your keystore file and filled out the metadata, the required inputs of the Step are already filled and require no more configuration from you. Prerequisite of the Android Sign Step Make sure to add the Android Sign Step after a build Step ( Android Build Step or Gradle Runner Step) in your Workflow. " }, 
{ "title" : "Creating a signed IPA for Xcode projects ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-39fbc767-f894-36b9-67c4-77255dcf2fed", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects ", 
"snippet" : "You can easily create a signed IPA file for your Xcode project with Bitrise if you have your Apple connection set up correctly and you made code signing files available to your builds. Overview on iOS code signing in Bitrise For a comprehensive overview on what Steps are available for code signing a...", 
"body" : "You can easily create a signed IPA file for your Xcode project with Bitrise if you have your Apple connection set up correctly and you made code signing files available to your builds. Overview on iOS code signing in Bitrise For a comprehensive overview on what Steps are available for code signing asset management, visit the iOS code signing page . You can easily create a signed IPA file for your Xcode project with Bitrise. You have set up Apple service connection on Bitrise. Your code signing files are managed correctly . You set the relevant inputs of our Xcode Archive and Export for iOS Step . Upload the distribution AND the development signing certificates We strongly recommend uploading BOTH the development and distribution signing certificates for your project. If you don't have an uploaded development signing certificate, Steps with automatic provisioning options will generate one on the fly every time you start a build. This can eventually lead to reaching the maximum number of certificates, blocking you from starting new builds. If you’re all set, proceed to setting up IPA export in your Workflow . Workflow Editor bitrise.yml Make sure the necessary code signing files have been collected and uploaded . Make sure you have the Xcode Archive & Export for iOS Step in your Workflow. Set the Distribution method input of the Step. The options are: auto-detect - Please note that this option is deprecated and will be removed. We do not recommend using it. app-store : Choose this if you want to deploy the app to the App Store. Requires a Distribution certificate and an App Store provisioning profile. ad-hoc : Choose this if you want to deploy the app to ad-hoc testers. Requires a Distribution certificate and an Ad Hoc provisioning profile. enterprise : Choose this if you have an Apple Enterprise account and want to use that to distribute your app. development : Choose this for internal testing. Requires a Developer certificate and a Development provisioning profile. Set the Automatic code signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Save the Workflow, and start a new build. Make sure all the necessary code signing files are available for your build. Open the bitrise.yml file of your app. Make sure you have the xcode-archive Step in your Workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n Set the distribution_method input to the correct value. The available options are: app-store : Choose this if you want to deploy the app to the App Store. Requires a Distribution certificate and an App Store provisioning profile. ad-hoc : Choose this if you want to deploy the app to ad-hoc testers. Requires a Distribution certificate and an Ad Hoc provisioning profile. enterprise : Choose this if you have an Apple Enterprise account and want to use that to distribute your app. development : Choose this for internal testing. Requires a Developer certificate and a Development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - distribution_method: development Set the automatic_code_signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - automatic_code_signing: api-key\n - distribution_method: development That’s all. Xcode will automatically select the right signing files based on your project’s Bundle ID and Team ID settings, and the export method you set. " }, 
{ "title" : "Signing an IPA file with a different team’s code signing file ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-340d099b-119d-d223-51d1-e68e201194e2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Code signing for React Native apps \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file ", 
"snippet" : "You might want to sign the IPA file with a different team’s code signing files. For example: If you use your company’s code signing files for internal builds, but your client’s code signing files are used for App Store distribution. If you use Apple ID for automatic code signing and the Apple ID bel...", 
"body" : "You might want to sign the IPA file with a different team’s code signing files. For example: If you use your company’s code signing files for internal builds, but your client’s code signing files are used for App Store distribution. If you use Apple ID for automatic code signing and the Apple ID belongs to multiple teams, use The Developer Portal team to use for this export input to specify which team should be used for automatic code signing asset management. To do so: Make sure the right code signing files of the new development team are uploaded to Bitrise. Set the The Developer Portal team to use for this export option as well (in addition to the Distribution method ). Set the Distribution method . " }, 
{ "title" : "Testing your React Native app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-80e2d0d2-2d4c-6ca1-dc61-bc63b35be483", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Testing your React Native app ", 
"snippet" : "You can use React Native’s built in testing method, called jest to perform unit tests. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add the run npm command Ste...", 
"body" : "You can use React Native’s built in testing method, called jest to perform unit tests. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add the run npm command Step to your Workflow. In the npm command with arguments to run input field, type test . For more detailed guides on React Native testing, check out Testing React Native apps. " }, 
{ "title" : "Deploying a React Native app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-55b3dfd0-e7b5-f345-289b-c40a675afa69", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app ", 
"snippet" : "You can deploy your React Native app to: bitrise.io: This allows you download the generated binary, and to share it with others via the public install page. Online stores: we have integrations for multiple different online stores. In these guides, we'll show you how to publish to Google Play and to ...", 
"body" : "You can deploy your React Native app to: bitrise.io: This allows you download the generated binary, and to share it with others via the public install page. Online stores: we have integrations for multiple different online stores. In these guides, we'll show you how to publish to Google Play and to Apple's App Store. " }, 
{ "title" : "Deploying a cross-platform app to bitrise.io ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9489e09f-07fd-11bd-4749-5490e0c10172", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying a cross-platform app to bitrise.io ", 
"snippet" : "The Deploy to bitrise.io Step uploads all the artifacts related to your build into the Artifacts tab on your Build’s page. You can share the generated app file (APK for Android or an IPA file for iOS) with your team members using the public install page. The public install page is a URL you can shar...", 
"body" : "The Deploy to bitrise.io Step uploads all the artifacts related to your build into the Artifacts tab on your Build’s page. You can share the generated app file (APK for Android or an IPA file for iOS) with your team members using the public install page. The public install page is a URL you can share with others who can install the generated app binary on their device. You can also notify user groups or individual users that your APK or IPA file has been built. Publishing to expo.io The Deploy to Bitrise.io Step does not use Expo commands and doesn’t publish to expo.io . This Step publishes artifacts to Bitrise and is not specific to a particular platform. If you need to publish to expo.io , set the Run expo publish after eject? input of the Eject Expo Step to yes . Be aware that in that case you have to provide your username and password for your Expo account to publish to expo.io. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Make sure you have the Deploy to bitrise.io Step in your Workflow. In the Notify: User Roles , add the role so that only those get notified who have been granted with this role. Or fill out the Notify: Emails field with email addresses of the users you want to notify. Make sure you set those email addresses as Secrets ! These details can be also modified under Notifications if you click the eye icon next to your generated binary in the Artifacts tab. If you want the Step to generate a public install page for you, set the Enable public page for the App? input to true . " }, 
{ "title" : "Deploying the app to App Store Connect ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-066aad78-034d-c38c-2cb1-6834902c1346", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying the app to App Store Connect ", 
"snippet" : "Keep in mind that every time you want to push an app to App Store Connect, it must have a unique build and version number: increment either or both before deploying. Make sure you have a working connection to your Apple Developer account . Generate an IPA file on your own machine at least once. Uplo...", 
"body" : "Keep in mind that every time you want to push an app to App Store Connect, it must have a unique build and version number: increment either or both before deploying. Make sure you have a working connection to your Apple Developer account . Generate an IPA file on your own machine at least once. Upload all necessary code signing files to Bitrise. To deploy an app to App Store Connect, you need a Distribution type certificate and an App Store type provisioning profile. Make sure the Xcode Archive & Export for iOS Step is in your Workflow. Set the Automatic code signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t use automatic code signing, or if you exclusively use Step inputs for Apple service authentication. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Set the Distribution method input of the Step to app-store . The Step will store the path of the exported .ipa file in the $BITRISE_IPA_PATH Environment Variable. Add the Deploy to App Store Connect Step to your Workflow. Fill the required inputs. Either the app’s Apple ID or its Bundle ID is a required input. One of the two must be provided. If you set the Submit for Review to true , the Step will wait for your submission to be processed on App Store Connect and then submit the given version of the app for review. The default value of the Skip App Version Update input is No . Change it only if you incremented the app version number in another way. If you use an App Store Connect account that is linked to multiple teams, provide either a Team ID or a Team name! Start a build. If all goes well, your app will be submitted to App Store and you can distribute it via Testflight or via the App Store! " }, 
{ "title" : "Deploying your Android project to Google Play ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43178-getting-started-with-react-native-apps.html#UUID-4d21f88e-bcef-8665-7827-4ae0f68faeb2_UUID-9519b741-8e19-0363-16c6-97564e46f393", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with React Native apps \/ Deploying a React Native app \/ Deploying your Android project to Google Play ", 
"snippet" : "You can use the Deploy to Google Play Step in your Workflow to upload your digitally signed AAB\/APK to the Google Play Store. Add the Cordova archive or the Ionic archive Step to your Workflow. Note that if you’re building for both iOS and Android in one project, and either of your apps fails, the w...", 
"body" : "You can use the Deploy to Google Play Step in your Workflow to upload your digitally signed AAB\/APK to the Google Play Store. Add the Cordova archive or the Ionic archive Step to your Workflow. Note that if you’re building for both iOS and Android in one project, and either of your apps fails, the whole Cordova archive\/Ionic archive Step will fail. Fill in the required inputs. The Platform input needs to be set to device . The Build command configuration input must match the Build configuration input of the Generate cordova build configuration Step. The archive Step must come after the Generate cordova build configuration Step in the Workflow. Configure code signing for your app. Configure Google Play access. You only need to do this for your very first Google Play deployment of the app. In the Flutter Build Step, find the Android Platform Configs input group and make sure the Additional parameters input has the value --release . In the Android output artifact type input field, select either APK or appbundle depending on your deployment requirements. In the Output (.apk, .aab) pattern input, set the path where the Deploy to Google Play Step will be able to access the generated binary. The path should be relative to the project source directory, stored in the BITRISE_SOURCE_DIR Environment Variable. Make sure you have the Deploy to Google Play Step after the Android Sign Cordova Archive or Ionic Archive Step in your Workflow. Fill out the required input fields as follows: Service Account JSON key file path : This field can accept a remote URL so you have to provide the Env Var which contains your uploaded service account JSON key. For example: $BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL . Package name : The package name of your Android app. Track : The track where you want to deploy your APK (for example, alpha\/beta\/rollout\/production or any custom track you set). " }, 
{ "title" : "Getting started with Flutter apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43179-getting-started-with-flutter-apps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps ", 
"snippet" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your Flutter app. Flutter is a mobile app SDK that allows developers to create native apps for both iOS and Android. Bitrise supports Flutter apps: we have dedicated Steps to he...", 
"body" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your Flutter app. Flutter is a mobile app SDK that allows developers to create native apps for both iOS and Android. Bitrise supports Flutter apps: we have dedicated Steps to help you with all your Flutter needs. This guide walks you through setting up, testing, building and deploying a simple Flutter app on Bitrise. " }, 
{ "title" : "Adding a Flutter app to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43179-getting-started-with-flutter-apps.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-b94714f9-fc2b-0519-6814-259d1c810a03", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Adding a Flutter app to Bitrise ", 
"snippet" : "Do you have a Bitrise account? Make sure you have signed up to bitrise.io and can access your Bitrise account. There are multiple ways of registering an account: Signing up with emailSigning up with a Git providerLog in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project...", 
"body" : "[video] Do you have a Bitrise account? Make sure you have signed up to bitrise.io and can access your Bitrise account. There are multiple ways of registering an account: Signing up with emailSigning up with a Git providerLog in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project access , select the Workspace that will own the app. Set the privacy of the app. You cannot change this setting later! If you realize you've accidentally added your app as a public app even though you need it to be private, you'll have to delete the app and add it again. Private apps are only accessible to you, your Workspace members and those who are invited to work on an app. They require authentication to access the repository of the app. Public apps  expose their  bitrise.yml and their build logs to everyone. If you have a public app’s build URL, you can view its build log, to help with troubleshooting, for example. Public apps do not require authentication and they cannot have SSH keys. Select one of two options to set your repository URL: With the Select remote repository option, you can select a repository from a list of repos from a connected Git provider account. Choose the Git provider from the dropdown menu, then click Select a repository... and select the repository from the list. The Enter URL manually option does not require a connected Git provider account: you can simply enter the URL and proceed to the authentication phase. We strongly recommend using an SSH URL, unless you are setting up a public app . Repository URL You will be able to change your project's repository URL later. You can also connect or disconnect your account to Git provider services at any time. If you signed up for Bitrise using a Git provider account, that one is already connected and you can select any of your repositories from it. Add an SSH key in the Authorize Bitrise section. This is only relevant for private apps: public apps can't have SSH keys and they don't require authentication. Choose from one of three options: Auto-add a generated SSH key to your repository : We recommend using this option. We automatically generate an SSH key pair and register the public key to your repository. Requires your connected Git provider account to have admin rights to the repository. Copy a generated SSH key to your Git provider manually : We generate an SSH key pair for you and you can copy the public key and register it manually to your Git provider. It is useful if, for example, you need to access multiple repositories with the same SSH key. Add your own SSH key to Bitrise : You can generate your own SSH key and paste the private key here after choosing this option. You also need to add the public key to the repository manually. To generate your SSH key pair: Generating your own SSH keypair. Configure SSH keys at any time If you can't set up a valid, working SSH key connection at this time, don't worry: proceed with adding your app. You can set up the SSH connection afterwards: Configuring SSH keys. Select the default branch of your repository. This branch should contain the configuration of your project. If you successfully configured SSH access in the previous step or if you're adding a public app, Bitrise will parse your repository and allow you to select a branch from a dropdown menu. If you didn't configure repository access, you need to type the branch name manually. You can change the default branch of the app later . In the next step, choose Yes, auto-detect configuration . Bitrise will scan your repository and attempt to set up a stack and default Workflows based on the results of the scan. In most cases, we recommend choosing this option. Project type Detecting a project type serves to assist in the initial configuration of your app. But don't worry, you can change every setting, including the project type, at any time after you added the app. Wait while Bitrise is validating your project. We look for your configuration files and set up your app based on them. In the case of Flutter apps, you definitely need a pubspec.yaml file in your project. Type the name of the branch that includes your project’s configuration - master, for example - then click Next . If you have an iOS project in your Flutter project, you will have to select an .ipa export method. Register a webhook when prompted so that Bitrise can start a build automatically when code is pushed to your repository, or a pull request is created. Once you are done, click View App Page to go to the newly added app's home page. From there, you can start editing your Workflows and run builds . " }, 
{ "title" : "Testing a Flutter app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43179-getting-started-with-flutter-apps.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-23f96a92-1cf0-0e6a-2a38-2ff0710a654d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Testing a Flutter app ", 
"snippet" : "You can write and run unit-, widget-, and integration tests with Flutter. For more information, check out Flutter’s official documentation . You can use our automatically generated primary Workflow to test your Flutter app. It can include the Flutter Test Step that runs Flutter tests and can also ge...", 
"body" : "You can write and run unit-, widget-, and integration tests with Flutter. For more information, check out Flutter’s official documentation . You can use our automatically generated primary Workflow to test your Flutter app. It can include the Flutter Test Step that runs Flutter tests and can also generate code coverage reports. Test reports The Deploy to Bitrise.io Step exports the results of the Flutter Test Step to the Test Reports add-on by default: to check your Flutter test results in the add-on, you just need to add the Deploy to Bitrise.io Step at the end of the Workflow. To run tests on a Flutter app: Open your app’s Workflow Editor and open the primary Workflow, or any of your Workflows that you want to use to run tests. In the Flutter Install Step, fill in the Flutter SDK Version input. You can specify either tags or branches of the Flutter SDK’s git repository. The default value is stable . This will use the latest stable branch of Flutter. To find the available version tags, check: https:\/\/github.com\/flutter\/flutter\/releases . To see the the available branches, check: https:\/\/github.com\/flutter\/flutter\/branches . Add the Flutter Test Step. In the Additional parameters input, enter any flags you wish to use to. The Step runs the flutter test command with the specified flags. To check the available flags, open a command line interface on your own machine and run flutter test --help . Make sure the Project Location input of the Flutter Test Step is correct. The default value is the the Environment Variable (Env Var) created for your Flutter project’s location. If you want to generate code coverage reports, set the Generate code coverage files? input to yes . This runs the flutter test command with the --coverage flag. To export the test results to the Test Reports add-on, add the Deploy to Bitrise.io Step to the end of your Workflow. Run a build! Once it’s done, you can find your test results on the Artifacts tab of the Build’s page of the app. " }, 
{ "title" : "Deploying a Flutter app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43179-getting-started-with-flutter-apps.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-e143401b-b088-8fc3-e605-f33c388816b5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app ", 
"snippet" : "To build and deploy a Flutter app, a Workflow must contain these Flutter Steps: Flutter Install Flutter Build If you have platforms specified in your repository, a deploy Workflow will be automatically generated when adding the app on Bitrise. The content of this Workflow depends on the platforms: f...", 
"body" : "To build and deploy a Flutter app, a Workflow must contain these Flutter Steps: Flutter Install Flutter Build If you have platforms specified in your repository, a deploy Workflow will be automatically generated when adding the app on Bitrise. The content of this Workflow depends on the platforms: for example, if your app contains only an iOS project, the Workflow will contain the Certificate and profile installer Step. You can build both iOS and Android projects at the same time or you can build them separately, each using their own Workflow. You can set this in the Platform input of the Flutter Build Step any time. By default, the Step is configured according to the platform or platforms that the scanner detected when adding the app on Bitrise. Here’s an example Workflow we’ll use in this configuration, with all the necessary Steps: Pipelines for parallelization In these examples, we're assuming that you are building and deploying both the iOS and Android versions of your app in the same Workflow, performing the necessary operations serially. However, you can do both versions in parallel with a single build trigger by using Pipelines: Build PipelinesConfiguring a Bitrise PipelinePackages and libraries We also support building Flutter packages and libraries. Unlike in the case of apps, there is no artifact to build so there is no need for a Flutter Build Step in your Workflow. " }, 
{ "title" : "Deploying a cross-platform app to bitrise.io ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43179-getting-started-with-flutter-apps.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a cross-platform app to bitrise.io ", 
"snippet" : "The Deploy to bitrise.io Step uploads all the artifacts related to your build into the Artifacts tab on your Build’s page. You can share the generated app file (APK for Android or an IPA file for iOS) with your team members using the public install page. The public install page is a URL you can shar...", 
"body" : "The Deploy to bitrise.io Step uploads all the artifacts related to your build into the Artifacts tab on your Build’s page. You can share the generated app file (APK for Android or an IPA file for iOS) with your team members using the public install page. The public install page is a URL you can share with others who can install the generated app binary on their device. You can also notify user groups or individual users that your APK or IPA file has been built. Publishing to expo.io The Deploy to Bitrise.io Step does not use Expo commands and doesn’t publish to expo.io . This Step publishes artifacts to Bitrise and is not specific to a particular platform. If you need to publish to expo.io , set the Run expo publish after eject? input of the Eject Expo Step to yes . Be aware that in that case you have to provide your username and password for your Expo account to publish to expo.io. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Make sure you have the Deploy to bitrise.io Step in your Workflow. In the Notify: User Roles , add the role so that only those get notified who have been granted with this role. Or fill out the Notify: Emails field with email addresses of the users you want to notify. Make sure you set those email addresses as Secrets ! These details can be also modified under Notifications if you click the eye icon next to your generated binary in the Artifacts tab. If you want the Step to generate a public install page for you, set the Enable public page for the App? input to true . " }, 
{ "title" : "Deploying a Flutter app to App Store Connect ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43179-getting-started-with-flutter-apps.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-4926eaea-cb0b-123f-31d5-b78851c0102f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to App Store Connect ", 
"snippet" : "To deploy your iOS Flutter project to the App Store, you’ll need to build the app, export an IPA file and submit it to the App Store. Unlike testing, this requires code signing files: An iOS Distribution Certificate (a .p12 file). An App Store Provisioning Profile. For Flutter applications, code sig...", 
"body" : "To deploy your iOS Flutter project to the App Store, you’ll need to build the app, export an IPA file and submit it to the App Store. Unlike testing, this requires code signing files: An iOS Distribution Certificate (a .p12 file). An App Store Provisioning Profile. For Flutter applications, code signing requires setting a Team ID in the project settings in Xcode. " }, 
{ "title" : "Deploying a Flutter app to Google Play ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43179-getting-started-with-flutter-apps.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-2ae8912a-d26b-0305-d961-eccef60bbd0e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Deploying a Flutter app \/ Deploying a Flutter app to Google Play ", 
"snippet" : "To deploy your app to Google Play, you need to export an App Bundle file and sign it. You have two options: You can configure code signing in the app’s build.gradle file and then Flutter will sign your app during the build phase. Sign your AAB or APK file on Bitrise with our dedicated Step. The scop...", 
"body" : "To deploy your app to Google Play, you need to export an App Bundle file and sign it. You have two options: You can configure code signing in the app’s build.gradle file and then Flutter will sign your app during the build phase. Sign your AAB or APK file on Bitrise with our dedicated Step. The scope of this guide is the second option: signing your AAB\/APK file with the Android Sign Step. Generate a keystore file . The keystore file is required for code signing. Open an app on Bitrise and go to Workflow > Code signing > Android Code Signing . Drag and drop the keystore file, and fill out the metadata. Configure Google Play access. You only need to do this for your very first Google Play deployment of the app. In the Flutter Build Step, find the Android Platform Configs input group and make sure the Additional parameters input has the value --release . In the Android output artifact type input field, select either APK or appbundle depending on your deployment requirements. In the Output (.apk, .aab) pattern input, set the path where the Deploy to Google Play Step will be able to access the generated binary. The path should be relative to the project source directory, stored in the BITRISE_SOURCE_DIR Environment Variable. Make sure you have the Deploy to Google Play Step after the Android Sign Cordova Archive or Ionic Archive Step in your Workflow. Fill out the required input fields as follows: Service Account JSON key file path : This field can accept a remote URL so you have to provide the Env Var which contains your uploaded service account JSON key. For example: $BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL . Package name : The package name of your Android app. Track : The track where you want to deploy your APK (for example, alpha\/beta\/rollout\/production or any custom track you set). " }, 
{ "title" : "Additional Flutter content ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43179-getting-started-with-flutter-apps.html#UUID-40b0a17c-5aa4-821c-9d80-17003cdf6c1c_UUID-2958ed33-8781-9d0a-154b-11e1f10312db", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Flutter apps \/ Additional Flutter content ", 
"snippet" : "Building Android apps with Flutter modules Flutter Test Step freezes on \"Waiting for another flutter command to release the startup lock...\" Reducing build time for Flutter apps Could not resolve package dependencies in Flutter...", 
"body" : "Building Android apps with Flutter modules Flutter Test Step freezes on \"Waiting for another flutter command to release the startup lock...\" Reducing build time for Flutter apps Could not resolve package dependencies in Flutter " }, 
{ "title" : "Getting started with Ionic\/Cordova apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps ", 
"snippet" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your Ionic\/Cordova app. You can use Cordova and Ionic frameworks to develop cross-platform apps. Bitrise can help you with its automated testing, code signing and deployment pro...", 
"body" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your Ionic\/Cordova app. You can use Cordova and Ionic frameworks to develop cross-platform apps. Bitrise can help you with its automated testing, code signing and deployment procedures so that you can ship your iOS and\/or Android app\/s to the respective marketplace in no time! If your Workspace has more than one concurrency, you can have Android and iOS builds run simultaneously. Now let us guide you through the process! Do you have a Bitrise account? Make sure you have signed up to bitrise.io and can access your Bitrise account. There are multiple ways of registering an account: Signing up with emailSigning up with a Git provider" }, 
{ "title" : "Adding an Ionic\/Cordova app to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-aa07dbed-0c75-bdc8-1cd7-1ad012d6879f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Adding an Ionic\/Cordova app to Bitrise ", 
"snippet" : "Log in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project access , select the Workspace that will own the app. Set the privacy of the app. You cannot change this setting later! If you realize you've accidentally added your app as a public app even though you need it to ...", 
"body" : "[video] Log in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project access , select the Workspace that will own the app. Set the privacy of the app. You cannot change this setting later! If you realize you've accidentally added your app as a public app even though you need it to be private, you'll have to delete the app and add it again. Private apps are only accessible to you, your Workspace members and those who are invited to work on an app. They require authentication to access the repository of the app. Public apps  expose their  bitrise.yml and their build logs to everyone. If you have a public app’s build URL, you can view its build log, to help with troubleshooting, for example. Public apps do not require authentication and they cannot have SSH keys. Select one of two options to set your repository URL: With the Select remote repository option, you can select a repository from a list of repos from a connected Git provider account. Choose the Git provider from the dropdown menu, then click Select a repository... and select the repository from the list. The Enter URL manually option does not require a connected Git provider account: you can simply enter the URL and proceed to the authentication phase. We strongly recommend using an SSH URL, unless you are setting up a public app . Repository URL You will be able to change your project's repository URL later. You can also connect or disconnect your account to Git provider services at any time. If you signed up for Bitrise using a Git provider account, that one is already connected and you can select any of your repositories from it. Add an SSH key in the Authorize Bitrise section. This is only relevant for private apps: public apps can't have SSH keys and they don't require authentication. Choose from one of three options: Auto-add a generated SSH key to your repository : We recommend using this option. We automatically generate an SSH key pair and register the public key to your repository. Requires your connected Git provider account to have admin rights to the repository. Copy a generated SSH key to your Git provider manually : We generate an SSH key pair for you and you can copy the public key and register it manually to your Git provider. It is useful if, for example, you need to access multiple repositories with the same SSH key. Add your own SSH key to Bitrise : You can generate your own SSH key and paste the private key here after choosing this option. You also need to add the public key to the repository manually. To generate your SSH key pair: Generating your own SSH keypair. Configure SSH keys at any time If you can't set up a valid, working SSH key connection at this time, don't worry: proceed with adding your app. You can set up the SSH connection afterwards: Configuring SSH keys. Select the default branch of your repository. This branch should contain the configuration of your project. If you successfully configured SSH access in the previous step or if you're adding a public app, Bitrise will parse your repository and allow you to select a branch from a dropdown menu. If you didn't configure repository access, you need to type the branch name manually. You can change the default branch of the app later . In the next step, choose Yes, auto-detect configuration . Bitrise will scan your repository and attempt to set up a stack and default Workflows based on the results of the scan. In most cases, we recommend choosing this option. Project type Detecting a project type serves to assist in the initial configuration of your app. But don't worry, you can change every setting, including the project type, at any time after you added the app. Wait while Bitrise is validating your project. We look for your configuration files and set up your app based on them. At Project Build configuration , you can select which platform to build your app for. You can select: iOS. Android. iOS and Android (where the Android build gets built first). Register a webhook when prompted so that Bitrise can start a build automatically when code is pushed to your repository, or a pull request is created. Once you are done, click View App Page to go to the newly added app's home page. From there, you can start editing your Workflows and run builds . " }, 
{ "title" : "Installing dependencies for Expo Ionic\/Cordova React Native apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Installing dependencies for Expo Ionic\/Cordova React Native apps ", 
"snippet" : "If the Bitrise project scanner has successfully scanned your React Native Ionic\/Cordova project, Run npm command or Run yarn command Steps will be included in your default Workflows . These Steps can install the missing Javascript dependencies for your app . For native Android dependencies, you can ...", 
"body" : "If the Bitrise project scanner has successfully scanned your React Native Ionic\/Cordova project, Run npm command or Run yarn command Steps will be included in your default Workflows . These Steps can install the missing Javascript dependencies for your app . For native Android dependencies, you can use the Install missing Android SDK components Step. For native iOS dependencies, you can use, among others, the Brew install Step or the Run CocoaPods install Step. To install Javascript dependencies with npm: Using Yarn instead of npm In this guide, we're using npm to install Javascript dependencies. However, you can use the Run yarn command Step: it can install missing JS dependencies without any additional configuration required. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Make sure your Workflow includes the Run npm command Step. In The 'npm' command with arguments to run input variable, type install . Using the npm ci command instead of npm install If you already have an up to date package-lock.json file in your project, we recommend using the ci command in The 'npm' command with arguments to run input. Using npm ci can not only result in much faster build times compared to npm install but more reliable builds as well. " }, 
{ "title" : "Testing Ionic\/Cordova apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-73591944-1878-ddc4-069e-5984dc705c76", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Testing Ionic\/Cordova apps ", 
"snippet" : "You can run unit tests for Ionic\/Cordova apps on Bitrise by using our Karma Jasmine Test Runner or Jasmine Test Runner Steps. If your Cordova\/Ionic project has a Karma Jasmine dependency in its package.json file, our scanner will detect it when you're adding your app and automatically insert the res...", 
"body" : "You can run unit tests for Ionic\/Cordova apps on Bitrise by using our Karma Jasmine Test Runner or Jasmine Test Runner Steps. If your Cordova\/Ionic project has a Karma Jasmine dependency in its package.json file, our scanner will detect it when you're adding your app and automatically insert the respective testing Step into your Workflow. If this dependency is missing from your project, you can manually insert one of our testing steps to your Workflow using our Workflow Editor. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Make sure you have a testing Step in your Workflow. Installing dependencies You must install dependencies before you can run tests. You can choose between the Karma Jasmine Test Runner and the Jasmine Test Runner Steps. Cordova app configuration with Karma Jasmine Test Runner In this example, you can find a bitrise.yml configuration that includes a Workflow called primary . This Workflow includes the Karma Jasmine Test Runner Step. primary:\n steps:\n - activate-ssh-key@4.0.3:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@4.0.11: {}\n - script@1.1.5:\n title: Do anything with Script step\n - npm@0.9.1:\n inputs:\n - command: install\n - karma-jasmine-runner@0.9.1: {}\n - deploy-to-bitrise-io@1.3.15: {} " }, 
{ "title" : "Code signing Ionic\/Cordova apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-2ce893ed-91b3-084a-02be-b6a657d3736f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps ", 
"snippet" : "If you want to build an app for iOS or Android, you need to upload the platform-specific files into the Code Signing tab of the Workflow Editor. You can also generate builds for both platforms which requires uploading all code signing files of the platforms....", 
"body" : "If you want to build an app for iOS or Android, you need to upload the platform-specific files into the Code Signing tab of the Workflow Editor. You can also generate builds for both platforms which requires uploading all code signing files of the platforms. " }, 
{ "title" : "iOS code signing for Ionic and Cordova projects ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-6ae15f90-c4f1-e899-dcf5-f25bf374bfa5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects ", 
"snippet" : "Bitrise supports both manual and automatic provisioning for the iOS code signing of Ionic and Cordova apps as well. Naturally, Bitrise supports iOS applications built with either Ionic or Cordova . However, the code signing process is slightly different compared to a native Xcode project. Bitrise su...", 
"body" : "Bitrise supports both manual and automatic provisioning for the iOS code signing of Ionic and Cordova apps as well. Naturally, Bitrise supports iOS applications built with either Ionic or Cordova . However, the code signing process is slightly different compared to a native Xcode project. Bitrise supports both manual and automatic provisioning for Ionic and Cordova apps as well - and once again, the processes are somewhat different. " }, 
{ "title" : "Ionic\/Cordova code signing with manual code signing asset management ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management ", 
"snippet" : "Generate the native Xcode project locally from your Ionic or Cordova project by calling cordova platform add ios or ionic cordova platform add ios . Upload the files to bitrise.io . Make sure you have the Certificate and profile installer Step in your Workflow. Add the Generate cordova build configu...", 
"body" : "Generate the native Xcode project locally from your Ionic or Cordova project by calling cordova platform add ios or ionic cordova platform add ios . Upload the files to bitrise.io . Make sure you have the Certificate and profile installer Step in your Workflow. Add the Generate cordova build configuration Step to your Workflow. It must come after the Certificate and profile installer Step. Fill in the required inputs for the Step. Please note that both the Code Signing Identity and the Provisioning Profile are required inputs for iOS apps even though they are not marked as such. Build configuration : you can set it to either debug or release . Code Sign Identity : enter a Developer or a Distribution identity. Provisioning Profile : enter the appropriate provisioning profile. Packaging Type : this controls what type of build is generated by Xcode. Set the type of code signing you need. Add the Cordova archive or the Ionic archive step to your workflow. Fill in the required inputs. The Platform input needs to be set to: device . The Build command configuration input must match the Build configuration input of the Generate cordova build configuration Step. This Step must come after the Generate cordova build configuration Step in the Workflow. Run your build! " }, 
{ "title" : "Ionic\/Cordova code signing with automatic code signing asset management ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-795d5e81-95ea-08e8-67b3-15c270197945", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management ", 
"snippet" : "Make sure your .p12 signing certificates are uploaded to bitrise.io . Add the Cordova prepare or the Ionic prepare Step to your Workflow. These Steps call the platform rm and platform add commands. Add the Manage iOS Code Signing Step to your Workflow. If you have both the Certificate and Profile In...", 
"body" : "Make sure your .p12 signing certificates are uploaded to bitrise.io . Add the Cordova prepare or the Ionic prepare Step to your Workflow. These Steps call the platform rm and platform add commands. Add the Manage iOS Code Signing Step to your Workflow. If you have both the Certificate and Profile Installer and the Manage iOS Code Signing Steps in your Workflow, your build might encounter unexpected issues. The Step will export: The project’s development team. The installed codesign identity’s name. The installed provisioning profile. One code signing Step only If you have both the Certificate and profile installer and the Manage iOS Code Signing Steps in your Workflow, your build might encounter unexpected issues. Select the Apple service connection method (based on the Apple service you have set up in Bitrise ) and the Distribution method . Add the Generate cordova build configuration Step to your Workflow. Configure the Step to use the code signing settings exported by the Manage iOS Code Signing Step: Development distribution example : - generate-cordova-build-configuration:\n inputs:\n - development_team: $BITRISE_DEVELOPER_TEAM \n - package_type: development \n - code_sign_identity: iPhone Developer\n - configuration: debug\n Production distribution example : - generate-cordova-build-configuration:\n inputs:\n - development_team: $BITRISE_DEVELOPER_TEAM \n - package_type: app-store \n - code_sign_identity: iPhone Developer\n - configuration: release\n Add the Cordova Archive or the Ionic Archive Step to your Workflow. Fill in the required inputs. The Platform input needs to be set to: device . The Build command configuration input must match the Build configuration input of the Generate cordova build configuration Step. Set the Should remove platforms as prepare step? to false . This is crucial: it ensures the Step will not remove and re-add the platform of the native projects generated in the Cordova prepare or the Ionic prepare Step. Run your build! " }, 
{ "title" : "Android code signing using the Android Sign Step ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-d00c628e-d72b-57d8-f8e6-c0b25e0053bb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Code signing Ionic\/Cordova apps \/ Android code signing using the Android Sign Step ", 
"snippet" : "You can create a signed APK using the  Android Sign  Step in your Bitrise Workflow. This Step is configured to run if you have already uploaded your keystore file on the Code signing tab of the Workflow Editor. You can create a signed APK using the  Android Sign   Step in your Bitrise Workflow . Thi...", 
"body" : "You can create a signed APK using the  Android Sign  Step in your Bitrise Workflow. This Step is configured to run if you have already uploaded your keystore file on the Code signing tab of the Workflow Editor. You can create a signed APK using the  Android Sign   Step in your Bitrise Workflow . This Step is configured to run if you have already uploaded your keystore file to Bitrise. The  Android Sign  Step is not required if signing is configured in your project’s build.gradle file. If so, running the  Android Build Step (or the  Gradle Runner  Step) signs the output (APK or AAB) automatically. Nevertheless, we recommend that you use the  Android Sign  Step to sign your project in an easy and secure way. jarsign and apksigner APKs can be signed with either jarsigner or apksigner . For APKs, if you wish to use apksigner to sign your project, then in the Android Sign Step you have to first set the Enables apksigner input to true and leave the APK Signature Scheme input on automatic. This way apksigner checks your APK’s minimum and target SDK versions and chooses the required schemes. It signs your project with V1 scheme if your minimum supported version is low and it also signs with other schemes for newer systems. Please note that AAB files can only be signed with jarsigner. The Step uses jarsigner if it detects a file ending with  .aab Upload your keystore file to Bitrise . Add the Android Sign Step to your Workflow after the Step that builds your APK or AAB file. Bitrise uses the above Environment Variables and sets them as inputs into the respective fields of the  Android Sign  Step. Once the Step runs, it produces either a signed APK or an AAB. The signed APK or AAB is used in deploy Steps, for example, the  Google Play Deploy  Step or the  Deploy to Bitrise.io  Step. The latter deploys the APK\/AAB on the Artifacts  tab. You can also use Ship to deploy your app once you built an APK\/AAB file. Downloading your keystore file You can download your keystore file to the project directory using the  File Downloader  Step: - file-downloader:\n inputs:\n - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n - destination: \"$HOME\/keystores\/my_keystore.jks\" #native android# If a Step requires the keystore file, make sure to include that Step AFTER the File Downloader Step. After this Step,  my_keystore.jks  will be available at  $HOME\/keystores\/my_keystore.jks . " }, 
{ "title" : "Deploying Ionic\/Cordova apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-371c655a-098e-6415-f8bf-5d5bfa6890c3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps ", 
"snippet" : "To build and deploy an Ionic or Cordova app on Bitrise, you need to digitally sign both the Android and iOS project (if you're building both) and then use the Cordova Archive or the Ionic Archive Step to build the app before deploying it. You can deploy the successfully built app to: Online stores, ...", 
"body" : "To build and deploy an Ionic or Cordova app on Bitrise, you need to digitally sign both the Android and iOS project (if you're building both) and then use the Cordova Archive or the Ionic Archive Step to build the app before deploying it. You can deploy the successfully built app to: Online stores, such as the Google Play Store or Apple's App Store. Bitrise.io: the generated binaries will be available on the Artifacts tab of the build's page. You can download them from there or share them with others via the public install page. " }, 
{ "title" : "Deploying a cross-platform app to bitrise.io ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9489e09f-07fd-11bd-4749-5490e0c10172", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying a cross-platform app to bitrise.io ", 
"snippet" : "The Deploy to bitrise.io Step uploads all the artifacts related to your build into the Artifacts tab on your Build’s page. You can share the generated app file (APK for Android or an IPA file for iOS) with your team members using the public install page. The public install page is a URL you can shar...", 
"body" : "The Deploy to bitrise.io Step uploads all the artifacts related to your build into the Artifacts tab on your Build’s page. You can share the generated app file (APK for Android or an IPA file for iOS) with your team members using the public install page. The public install page is a URL you can share with others who can install the generated app binary on their device. You can also notify user groups or individual users that your APK or IPA file has been built. Publishing to expo.io The Deploy to Bitrise.io Step does not use Expo commands and doesn’t publish to expo.io . This Step publishes artifacts to Bitrise and is not specific to a particular platform. If you need to publish to expo.io , set the Run expo publish after eject? input of the Eject Expo Step to yes . Be aware that in that case you have to provide your username and password for your Expo account to publish to expo.io. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Make sure you have the Deploy to bitrise.io Step in your Workflow. In the Notify: User Roles , add the role so that only those get notified who have been granted with this role. Or fill out the Notify: Emails field with email addresses of the users you want to notify. Make sure you set those email addresses as Secrets ! These details can be also modified under Notifications if you click the eye icon next to your generated binary in the Artifacts tab. If you want the Step to generate a public install page for you, set the Enable public page for the App? input to true . " }, 
{ "title" : "Deploying your Android project to Google Play ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-9519b741-8e19-0363-16c6-97564e46f393", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your Android project to Google Play ", 
"snippet" : "You can use the Deploy to Google Play Step in your Workflow to upload your digitally signed AAB\/APK to the Google Play Store. Add the Cordova archive or the Ionic archive Step to your Workflow. Note that if you’re building for both iOS and Android in one project, and either of your apps fails, the w...", 
"body" : "You can use the Deploy to Google Play Step in your Workflow to upload your digitally signed AAB\/APK to the Google Play Store. Add the Cordova archive or the Ionic archive Step to your Workflow. Note that if you’re building for both iOS and Android in one project, and either of your apps fails, the whole Cordova archive\/Ionic archive Step will fail. Fill in the required inputs. The Platform input needs to be set to device . The Build command configuration input must match the Build configuration input of the Generate cordova build configuration Step. The archive Step must come after the Generate cordova build configuration Step in the Workflow. Configure code signing for your app. Configure Google Play access. You only need to do this for your very first Google Play deployment of the app. In the Flutter Build Step, find the Android Platform Configs input group and make sure the Additional parameters input has the value --release . In the Android output artifact type input field, select either APK or appbundle depending on your deployment requirements. In the Output (.apk, .aab) pattern input, set the path where the Deploy to Google Play Step will be able to access the generated binary. The path should be relative to the project source directory, stored in the BITRISE_SOURCE_DIR Environment Variable. Make sure you have the Deploy to Google Play Step after the Android Sign Cordova Archive or Ionic Archive Step in your Workflow. Fill out the required input fields as follows: Service Account JSON key file path : This field can accept a remote URL so you have to provide the Env Var which contains your uploaded service account JSON key. For example: $BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL . Package name : The package name of your Android app. Track : The track where you want to deploy your APK (for example, alpha\/beta\/rollout\/production or any custom track you set). " }, 
{ "title" : "Deploying your iOS project to the App Store ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43181-getting-started-with-ionic-cordova-apps.html#UUID-9872034d-c75b-ac41-77c9-2be96702439c_UUID-3a513eaf-c36c-0e55-e069-270aae847572", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Ionic\/Cordova apps \/ Deploying Ionic\/Cordova apps \/ Deploying your iOS project to the App Store ", 
"snippet" : "Add the Cordova archive or the Ionic archive Step to your Workflow. Note that if you’re building for both iOS and Android in one project, and either of your apps fails, the whole Cordova archive\/Ionic archive Step will fail. Fill in the required inputs. The Platform input needs to be set to device ....", 
"body" : "Add the Cordova archive or the Ionic archive Step to your Workflow. Note that if you’re building for both iOS and Android in one project, and either of your apps fails, the whole Cordova archive\/Ionic archive Step will fail. Fill in the required inputs. The Platform input needs to be set to device . The Build command configuration input must match the Build configuration input of the Generate cordova build configuration Step. The archive Step must come after the Generate cordova build configuration Step in the Workflow. Configure iOS code signing for your iOS project. Add the Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step to your Workflow, after the Xcode Archive & Export for iOS Step but preferably before the Deploy to Bitrise.io Step. Provide your Apple credentials in the Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Step. The Step will need your: Apple ID. Password or, if you use two-factor authentication on App Store Connect, your application password. Don’t worry, the password will not be visible in the logs or exposed. Start a build. " }, 
{ "title" : "Getting started with Expo apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43183-getting-started-with-expo-apps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps ", 
"snippet" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your Expo app. You can generate React Native projects with the React Native CLI or with the Expo CLI . Expo is a toolchain that allows you to quickly get a React Native app up a...", 
"body" : "Get started on Bitrise by signing up via email or a Git provider, connecting a repository, and running the first build for your Expo app. You can generate React Native projects with the React Native CLI or with the Expo CLI . Expo is a toolchain that allows you to quickly get a React Native app up and running without having to use native code in Xcode or Android Studio. In this guide we discuss how to set up, test, code sign and deploy your React Native project built with the Expo CLI . " }, 
{ "title" : "Adding an Expo app to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43183-getting-started-with-expo-apps.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-50683a7a-65e9-a842-0a7a-4a3d5965421d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Adding an Expo app to Bitrise ", 
"snippet" : "First, let’s see how to add a React Native Expo app to bitrise.io . Do you have a Bitrise account? Make sure you have signed up to bitrise.io and can access your Bitrise account. There are multiple ways of registering an account: Signing up with emailSigning up with a Git providerLog in to Bitrise a...", 
"body" : "First, let’s see how to add a React Native Expo app to bitrise.io . Do you have a Bitrise account? Make sure you have signed up to bitrise.io and can access your Bitrise account. There are multiple ways of registering an account: Signing up with emailSigning up with a Git providerLog in to Bitrise and go to the Dashboard . Click the Add New App button. Under Project access , select the Workspace that will own the app. Set the privacy of the app. You cannot change this setting later! If you realize you've accidentally added your app as a public app even though you need it to be private, you'll have to delete the app and add it again. Private apps are only accessible to you, your Workspace members and those who are invited to work on an app. They require authentication to access the repository of the app. Public apps  expose their  bitrise.yml and their build logs to everyone. If you have a public app’s build URL, you can view its build log, to help with troubleshooting, for example. Public apps do not require authentication and they cannot have SSH keys. Select one of two options to set your repository URL: With the Select remote repository option, you can select a repository from a list of repos from a connected Git provider account. Choose the Git provider from the dropdown menu, then click Select a repository... and select the repository from the list. The Enter URL manually option does not require a connected Git provider account: you can simply enter the URL and proceed to the authentication phase. We strongly recommend using an SSH URL, unless you are setting up a public app . Repository URL You will be able to change your project's repository URL later. You can also connect or disconnect your account to Git provider services at any time. If you signed up for Bitrise using a Git provider account, that one is already connected and you can select any of your repositories from it. Add an SSH key in the Authorize Bitrise section. This is only relevant for private apps: public apps can't have SSH keys and they don't require authentication. Choose from one of three options: Auto-add a generated SSH key to your repository : We recommend using this option. We automatically generate an SSH key pair and register the public key to your repository. Requires your connected Git provider account to have admin rights to the repository. Copy a generated SSH key to your Git provider manually : We generate an SSH key pair for you and you can copy the public key and register it manually to your Git provider. It is useful if, for example, you need to access multiple repositories with the same SSH key. Add your own SSH key to Bitrise : You can generate your own SSH key and paste the private key here after choosing this option. You also need to add the public key to the repository manually. To generate your SSH key pair: Generating your own SSH keypair. Configure SSH keys at any time If you can't set up a valid, working SSH key connection at this time, don't worry: proceed with adding your app. You can set up the SSH connection afterwards: Configuring SSH keys. Select the default branch of your repository. This branch should contain the configuration of your project. If you successfully configured SSH access in the previous step or if you're adding a public app, Bitrise will parse your repository and allow you to select a branch from a dropdown menu. If you didn't configure repository access, you need to type the branch name manually. You can change the default branch of the app later . In the next step, choose Yes, auto-detect configuration . Bitrise will scan your repository and attempt to set up a stack and default Workflows based on the results of the scan. In most cases, we recommend choosing this option. Project type Detecting a project type serves to assist in the initial configuration of your app. But don't worry, you can change every setting, including the project type, at any time after you added the app. Wait while Bitrise is validating your project. If automatic validation fails, you can set the project up manually. Register a webhook when prompted so that Bitrise can start a build automatically when code is pushed to your repository, or a pull request is created. Once you are done, click View App Page to go to the newly added app's home page. From there, you can start editing your Workflows and run builds . You have successfully set up your React Native project on bitrise.io ! Your first build gets kicked off automatically using the primary workflow. You can check the generated reports of the first build on the Artifacts tab on your Build’s page. " }, 
{ "title" : "Installing dependencies for Expo Ionic\/Cordova React Native apps ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43183-getting-started-with-expo-apps.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-04dc4add-5f05-f418-0a93-0dbd49c4c764", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Installing dependencies for Expo Ionic\/Cordova React Native apps ", 
"snippet" : "If the Bitrise project scanner has successfully scanned your React Native Ionic\/Cordova project, Run npm command or Run yarn command Steps will be included in your default Workflows . These Steps can install the missing Javascript dependencies for your app . For native Android dependencies, you can ...", 
"body" : "If the Bitrise project scanner has successfully scanned your React Native Ionic\/Cordova project, Run npm command or Run yarn command Steps will be included in your default Workflows . These Steps can install the missing Javascript dependencies for your app . For native Android dependencies, you can use the Install missing Android SDK components Step. For native iOS dependencies, you can use, among others, the Brew install Step or the Run CocoaPods install Step. To install Javascript dependencies with npm: Using Yarn instead of npm In this guide, we're using npm to install Javascript dependencies. However, you can use the Run yarn command Step: it can install missing JS dependencies without any additional configuration required. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Make sure your Workflow includes the Run npm command Step. In The 'npm' command with arguments to run input variable, type install . Using the npm ci command instead of npm install If you already have an up to date package-lock.json file in your project, we recommend using the ci command in The 'npm' command with arguments to run input. Using npm ci can not only result in much faster build times compared to npm install but more reliable builds as well. " }, 
{ "title" : "Testing your React Native app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43183-getting-started-with-expo-apps.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-80e2d0d2-2d4c-6ca1-dc61-bc63b35be483", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Testing your React Native app ", 
"snippet" : "You can use React Native’s built in testing method, called jest to perform unit tests. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add the run npm command Ste...", 
"body" : "You can use React Native’s built in testing method, called jest to perform unit tests. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add the run npm command Step to your Workflow. In the npm command with arguments to run input field, type test . For more detailed guides on React Native testing, check out Testing React Native apps. " }, 
{ "title" : "Deploying your Expo app ", 
"url" : "88887-41967-bitrise-docs/88887-43159-getting-started/88887-43183-getting-started-with-expo-apps.html#UUID-d27d764d-2fde-f7ac-4720-1d02853a67aa_UUID-a048b2ff-74a9-437e-e7a8-7cde16d23c4f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Getting started \/ Getting started with Expo apps \/ Deploying your Expo app ", 
"snippet" : "Bitrise supports Expo Application Services (EAS) for Expo apps, and the default deploy Bitrise Workflow uses the Run Expo Application Services (EAS) build Step to trigger a build on EAS. In case you don’t want to use EAS, you can use Turtle CLI for your Bitrise Workflows. See this Workflow Recipe fo...", 
"body" : "Bitrise supports Expo Application Services (EAS) for Expo apps, and the default deploy Bitrise Workflow uses the Run Expo Application Services (EAS) build Step to trigger a build on EAS. In case you don’t want to use EAS, you can use Turtle CLI for your Bitrise Workflows. See this Workflow Recipe for details. " }, 
{ "title" : "Infrastructure ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure ", 
"snippet" : "Bitrise is a platform, above all: you do not have to download anything to use it, you do not have to run it on your own computer or servers - we take care of all of that. That also means you do not have to worry about infrastructure, either: maintenance, tools, virtualization are all our job and our...", 
"body" : "[video] Bitrise is a platform, above all: you do not have to download anything to use it, you do not have to run it on your own computer or servers - we take care of all of that. That also means you do not have to worry about infrastructure, either: maintenance, tools, virtualization are all our job and our concern. On Bitrise, we use virtual machines (VM) to run your builds: every build runs in a new VM, and each VM is discarded immediately after the build has finished. A stack is the type of virtual machine we can use to run your build. For example, for a native iOS app, the best stack is one of our Xcode stacks. Stacks come with all of the necessary tools pre-installed, and are regularly updated to make sure they will serve all of your needs. " }, 
{ "title" : "Build machines ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43188-build-machines.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines ", 
"snippet" : "Bitrise offers Xcode and Linux stacks. Each stack has a large number of pre-installed tools. Both Linux and Xcode stacks are available on several different build machine types. Each machine type offers several options with varying computing power, depending on your subscription plan . You can config...", 
"body" : "Bitrise offers Xcode and Linux stacks. Each stack has a large number of pre-installed tools. Both Linux and Xcode stacks are available on several different build machine types. Each machine type offers several options with varying computing power, depending on your subscription plan . You can configure a default machine type for each of your app and you can also set Workflow -specific machine types. You can do this when selecting stacks for your app: Setting the stack for your builds. Changing machine types using the API You can also change build machine types for all apps owned by a single user or Workspace using the API: Changing machine types in all apps at the same time. Each Bitrise build machine has its own IP address range: you can allowlist these IP addresses to be able to access our build machines from, for example, a private cloud: Configuring network access with IP allowlistsFor more information about build and code security, see Code security. " }, 
{ "title" : "Configuring network access with IP allowlists ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43188-build-machines.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists ", 
"snippet" : "You can access Bitrise virtual machines from behind a private network or a firewall. To do so, allowlist our build machine IP addresses in your network. Our datacenters are behind a set of public static IP addresses, with the virtual machines having their own internal subnets behind these addresses....", 
"body" : "You can access Bitrise virtual machines from behind a private network or a firewall. To do so, allowlist our build machine IP addresses in your network. Our datacenters are behind a set of public static IP addresses, with the virtual machines having their own internal subnets behind these addresses. Depending on your company security policy, you may need to allowlist the public IP addresses to be able to access the build machine: IP address ranges for the Bitrise build machines. Similarly, the Bitrise background workers powering app.bitrise.io UI and related control plane, configuration management, signaling to your services are accessible at a set of static IP addresses. Allowlisting these addresses can ensure you can still receive build status updates or that Bitrise can access the bitrise.yml file: IP address ranges for Bitrise backend workers of your app . " }, 
{ "title" : "IP address ranges for the Bitrise build machines ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43188-build-machines.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-0b5a9be7-1d03-edc2-cb48-01c84787cb86", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for the Bitrise build machines ", 
"snippet" : "For most users, who host their repositories on cloud-based service providers, there is no need for any network configuration to be able to use Bitrise. All we need is permission to access the repository and for that, an SSH key or an access token is enough. However, your company security policy migh...", 
"body" : "For most users, who host their repositories on cloud-based service providers, there is no need for any network configuration to be able to use Bitrise. All we need is permission to access the repository and for that, an SSH key or an access token is enough. However, your company security policy might not allow unknown and unauthorized IP addresses to communicate with the servers where your code is being stored - either on your own datacenter or in a private cloud. In that case, Bitrise won’t work unless the relevant IP addresses are added to your allow list. You will see IP addresses from the following ranges as source when your Bitrise build machines reach out to your services like Git to download your source code, or call into your test backend services, or any other services you run outside Bitrise that are required to be reached as part of your CI workflow. Allowlist the entire subnet If the provided public IP address is a subnet, you need to allow the entire subnet on your network! For example, 208.52.166.128\/28 means all IP addresses between 208.52.166.128 and 208.52.166.143 (208.52.166.128, 208.52.166.129, 208.52.166.130, and so on, all the way to and including 208.52.166.143) have to be allowlisted. External and internal IP address ranges for the build machines Stack type Public IP Xcode stacks 74.122.200.0\/ 22 208.52.166.154\/32 and 208.52.166.128\/ 28 207.254.0.248\/ 29 and 207.254.0.208\/ 28 207.254.34.148\/32 and 207.254.33.176\/ 28 Linux\/Docker stacks 74.122.200.0\/ 22 104.197.15.74\/32 34.123.172.192\/32 34.125.50.224\/32 34.125.82.130\/32 34.134.193.138\/32 34.138.187.10\/32 34.150.152.190\/32 34.162.185.129\/32 34.162.202.37\/32 34.162.229.32\/32 34.162.29.153\/32 34.162.88.79\/32 34.23.207.105\/32 34.85.139.176\/32 34.85.240.93\/32 34.86.56.118\/32 35.202.121.43\/32 35.225.44.167\/32 35.231.56.118\/32 35.237.165.17\/32 35.243.148.182\/32 35.245.56.67\/32 " }, 
{ "title" : "IP address ranges for Bitrise backend workers ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43188-build-machines.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-4e9b4482-a432-cb19-6e7c-4179abfa2a1e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ IP address ranges for Bitrise backend workers ", 
"snippet" : "Bitrise backend workers are operating behind firewalls and NAT gateways. There are some use cases when our backend workers need to reach your services. These addresses may be relevant if you use self-hosted Git services or store your bitrise.yml file in the repository. In this way Bitrise can, for e...", 
"body" : "Bitrise backend workers are operating behind firewalls and NAT gateways. There are some use cases when our backend workers need to reach your services. These addresses may be relevant if you use self-hosted Git services or store your bitrise.yml file in the repository. In this way Bitrise can, for example, access the bitrise.yml file, or send build status updates on commits and pull requests in a self-hosted repository. Static IP addresses for the Bitrise website and its background workers IP address ranges 74.122.200.0\/ 22 35.232.76.43 34.68.119.18 34.135.186.58 " }, 
{ "title" : "Document changelog ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43188-build-machines.html#UUID-fbfef0f2-c6c8-95f7-08bf-4c278d5c589f_UUID-d416f831-09cb-4e0f-a999-0c4f1e488cc8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Configuring network access with IP allowlists \/ Document changelog ", 
"snippet" : "April 2024 Added the 74.122.200.0\/22 range to the IP ranges of both the build machines and the backend workers, which will utilize the new IP range after the 20th of May, 2024. October 2022 Significantly increased the Linux\/Docker stacks IP range....", 
"body" : "April 2024 Added the 74.122.200.0\/22 range to the IP ranges of both the build machines and the backend workers, which will utilize the new IP range after the 20th of May, 2024. October 2022 Significantly increased the Linux\/Docker stacks IP range. " }, 
{ "title" : "Storage space on build machines ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43188-build-machines.html#UUID-63958978-8e5e-273a-23bb-604f6cf87d19", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Storage space on build machines ", 
"snippet" : "Bitrise virtual machines have different amounts of free space available, depending on the type of the stack. Our virtual machines have different amounts of free space available, depending on the type of the stack. The table summarizes the data - please keep in mind that these numbers are subject to ...", 
"body" : "Bitrise virtual machines have different amounts of free space available, depending on the type of the stack. Our virtual machines have different amounts of free space available, depending on the type of the stack. The table summarizes the data - please keep in mind that these numbers are subject to change, as different versions of pre-installed tools and resources take up a varying amount of space on the machines. Storage space on build machines Stack Name Filesystem Size (GB) Free (GB) linuxandroid \/dev\/loop0 160 112 linuxandroid \/dev\/sda1(bitrise) 194 28 xcode-10.3.x \/dev\/disk1s1 200 96 xcode-11.7.x \/dev\/disk1s5 200 54 xcode-11.6.x \/dev\/disk1s5 200 62 xcode-12.0.x \/dev\/disk1s5 200 70 xcode-12.1.x \/dev\/disk1s5 200 57 xcode-12.2.x \/dev\/disk1s5 200 60 xcode-12.3.x \/dev\/disk1s5 200 35 xcode-12.4.x \/dev\/disk1s5 200 53 xcode-12.5.x \/dev\/disk1s5s1 200 39 xcode-13.0.x \/dev\/disk1s5s1 200 119 xcode-edge \/dev\/disk1s5s1 200 39 " }, 
{ "title" : "Freeing up storage space on build machines ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43188-build-machines.html#UUID-5f2d97d7-206d-13b0-00a1-4e418ab70d24", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Freeing up storage space on build machines ", 
"snippet" : "To free up additional disk space on Bitrise build machines, delete unneeded tools and resources by using a Script Step in your build. If you need additional disk space on Bitrise build machines, you can always delete tools and resources that you do not use. You just need to use a Script Step at the ...", 
"body" : "To free up additional disk space on Bitrise build machines, delete unneeded tools and resources by using a Script Step in your build. If you need additional disk space on Bitrise build machines, you can always delete tools and resources that you do not use. You just need to use a Script Step at the start of your build. java.io.IOException: No space left on device If you get the java.io.IOException: No space left on device , error during a build , you can try to free up additional space with the below method - the error indicates there's no more space available on the build machine. Check your stack's System Report on GitHub . The System Report includes the list of pre-installed tools and their version on the stack. Find the tools you don't need in your build. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add a Script Step to the beginning of your Workflow. In the Script content input of the Step, add the necessary commands to uninstall the tools. Uninstalling unneeded tools If your app doesn't need Android SDK tools, you can remove them with the following commands in your Script Step: sudo rm -rf \/usr\/local\/share\/android-sdk \nsudo rm -rf \/opt\/android-ndk You can delete iOS simulators that you don't use: sudo rm -rf ~\/Library\/Developer\/CoreSimulator\/Profiles\/Runtimes\/iOS\\\\ 10.3.simruntime\/ " }, 
{ "title" : "Customizing build machines ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43188-build-machines.html#UUID-444af3f2-6532-b0af-1bd1-3890c7c7d536", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build machines \/ Customizing build machines ", 
"snippet" : "You can find the macOS base box setup guide and automation scripts we use for building our macOS virtual machine base boxes in our OS X Box Bootstrap repository . The repository includes every script we use for preparing these base virtual machine images. For our Linux machines, check out the Bitris...", 
"body" : "You can find the macOS base box setup guide and automation scripts we use for building our macOS virtual machine base boxes in our OS X Box Bootstrap repository . The repository includes every script we use for preparing these base virtual machine images. For our Linux machines, check out the Bitrise Base Docker Image’s repository . System reports You can always check our current configurations in to see what tools and which versions are preinstalled on our stacks . These reports have been generated by the scripts, linked in the first lines of the report. The repositories used for our virtual machine preparation are open source, and pull requests are welcome. If you’d like to have a tool pre-installed in our machines, feel free to add your changes and they will be included in the related Stack(s) the next time the Stack is updated. " }, 
{ "title" : "Build stacks ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks ", 
"snippet" : "The Bitrise build stack defines the virtual machine version used to run your builds. The main types are macOS stacks and Android & Docker stacks. The build stack indicates the virtual machine version that we will use to run your build. The main stack types are: macOS stacks : These stacks run on a m...", 
"body" : "[video] The Bitrise build stack defines the virtual machine version used to run your builds. The main types are macOS stacks and Android & Docker stacks. The build stack indicates the virtual machine version that we will use to run your build. The main stack types are: macOS stacks : These stacks run on a macOS operating system and each one includes multiple Xcode versions. Ideal for building iOS apps . They also have Android tools installed if you want to use them to build a cross-platform app. The Android & Docker stack: These stacks run on Linux operating system in a Docker environment. They have all Android tools installed and they are ideal for building native Android apps. Free disk space Each stack has at least 100 GB of free disk space. You can check each stack's exact available disk space on the relevant stack report page: Bitrise stack reports . Each build runs in its own virtual machine and the virtual machine is rolled back to a saved state, the “base box” state, after the build is finished. This way your builds are always protected by changes made by others and by your previous builds and you can use a stable environment to define your build workflow, since no state persists between builds. Passwordless sudo enabled The user account that is used for the builds is configured to have passwordless sudo enabled. This way you are able to install all the extra things you need for your builds and for other automation. If a tool is not preinstalled on your stack of choice, you can install it yourself - see the guide. After adding your app to Bitrise we will select an appropriate stack for it. You can change the stack at any time on the Stacks & Machines tab of the Workflow Editor. After selecting the stack you want to use, you’ll see a short description of the stack with an additional link to learn more about that specific one (for example, to see what tools are preinstalled, and which versions, on the selected stack). Stack status types Type Description Stable Generally available and expected to be supported for the foreseeable future. Updated when an update for the stack’s primary tool is available. Example: when Xcode 7.3.1 was released, the Xcode 7.3 stack was updated to have 7.3.1 instead of 7.3(.0). Stack prepare types Type Description Pre-booted If a stack is available as pre-booted, and there’s enough pre-booted machines with that stack configuration, your build can start right away, without waiting for the build environment to boot. In case there’s no more available pre-booted machine with that stack configuration, your build will start on an on-demand configuration. On-demand If a stack is available as on-demand configuration and there’s no (available) pre-booted configuration for the stack, our system will have to create a virtual machine for your selected configuration when your build starts. This means that your build will be in preparing environment state while the related virtual machine is created & booted. For a macOS configuration the boot process usually takes about 1 - 1.5 minutes. The prepare time (of course) is not counted into the build time, it won’t affect how long your build can run. " }, 
{ "title" : "Stack update policy ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy ", 
"snippet" : "Bitrise stacks are updated every week: some stacks are completely rebuilt while on others only certain cache archives are updated. Bitrise stacks include the most important tools for mobile development pre-installed and ready for use. Our goal is to make Workflows simple and make your builds fast an...", 
"body" : "Bitrise stacks are updated every week: some stacks are completely rebuilt while on others only certain cache archives are updated. Bitrise stacks include the most important tools for mobile development pre-installed and ready for use. Our goal is to make Workflows simple and make your builds fast and efficient. These tools change continuously: old versions become deprecated and unsupported while new versions are released with new features and breaking changes. Stacks on bitrise.io are updated regularly. The updates contain one or more of the following kinds of changes: Tool upgrade: An already installed tool is upgraded to the latest version (for example, the git CLI is upgraded from 2.9.1 to 2.9.5). Tool addition: A new tool is added (for example, the latest Android emulator system image becomes preinstalled when a new Android version is released). Tool removal: A tool version is removed if it reaches end-of-life and poses a security risk, making another version of the tool the default (for example, Ruby 2.7 is removed, making Ruby 3.0 the new default). Dependency mirror updates: On Xcode stacks, the local caches of Homebrew and Cocoapods are updated with the latest snapshot. Platform changes: Changes to major components, like Xcode on macOS stacks, OS versions, Android SDK. Using the previous version of a stack Updating a stack to a new version might cause problems with some builds. To help ease the transition, you can use the previous version of a stack for 2-3 days after an update: Using the previous version of a stack. For more information on what tools are available on the different stacks, check out our relevant guide: Preinstalled tools on Bitrise stacks. " }, 
{ "title" : "Xcode stack updates ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-6e6a74f3-394e-e856-d023-91a605a7a7a4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates ", 
"snippet" : "You can select macOS stacks based on the Xcode version you need. Under the hood, one VM image contains multiple Xcode versions installed and your requested Xcode version is activated at runtime before your Workflow starts. As a rule of thumb, Xcode minor versions of the same major version share the ...", 
"body" : "You can select macOS stacks based on the Xcode version you need. Under the hood, one VM image contains multiple Xcode versions installed and your requested Xcode version is activated at runtime before your Workflow starts. As a rule of thumb, Xcode minor versions of the same major version share the same VM image, but there might be exceptions based on compatibility issues and other considerations. Versioning When talking about versions, we use semver terminology, regardless of how the various tools define their versions. Stacks have a lifecycle and have four different states: Edge, Stable, Frozen and Removed. Edge : These stacks are for previewing upcoming versions and changes. They are updated in-place regularly, and they include the latest stable release of Xcode, the latest beta release of Xcode (if available), the latest stable version of pre-installed tools, and the dependency manager cache updates. Regular weekly updates could add or remove tools, as well as upgrade the OS. Backwards compatibility for weekly updates is not guaranteed on an Edge stack. Run builds on Edge stacks to preview upcoming tool version changes (such as Ruby 3.2 becoming the default) and get access to the latest pre-release Xcode (such as Xcode 15 Beta). Stable : These stacks are only updated with Xcode patch versions, dependency manager cache updates and with critical security fixes. Note that one specific stack that is in a stable state (for example, Xcode 14.3) could still receive a major update when a new Edge stack is released (a hypothetical Xcode 14.4 Beta) and the tool versions on the current Edge stack become the new Stable. For maximum reliability and reproducible builds, we recommend pinning exact tool versions in Workflows instead of relying on the stack defaults (for example, pinning a Ruby version). Frozen : These stacks are no longer updated and flagged for removal in accordance with the Stack deprecation and removal policy . The stack is still available for yourbuilds but you will see the final removal date on the UI. Preinstalled tools are not updated, so it’s your responsibility to keep up with bugfixes and security patches. Removed : These stacks are no longer available to use. Dependency manager cache updates Homebrew and CocoaPods dependency mirrors are updated frequently (usually each week) on all Xcode stacks. These mirror updates do not change the preinstalled tool versions, only updating the package manager caches for faster dependency installs. Edge stacks also receive package upgrades, meaning that Homebrew packages are updated to their latest versions. " }, 
{ "title" : "State transitions for Xcode stacks ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-47333f44-6d2e-e96d-a16d-97024d364372", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ State transitions for Xcode stacks ", 
"snippet" : "During the lifecycle of a stack it will transition between states when triggered by new Xcode and macOS releases. Stacks transition as follows: Edge to Stable. Stable to Frozen. Frozen to Removed....", 
"body" : "During the lifecycle of a stack it will transition between states when triggered by new Xcode and macOS releases. Stacks transition as follows: Edge to Stable. Stable to Frozen. Frozen to Removed. " }, 
{ "title" : "Simulator runtimes on Xcode stacks ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-35d9f2b2-c95d-393a-5941-bf38b7719907", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Xcode stack updates \/ Simulator runtimes on Xcode stacks ", 
"snippet" : "You can find the list of preinstalled tools, including simulator runtimes on our stacks on the stack reports pages . You can expect the following simulator runtimes to be installed: The matching runtime versions of a given Xcode version: these are the iOS, watchOS, tvOS and visionOS runtime versions...", 
"body" : "You can find the list of preinstalled tools, including simulator runtimes on our stacks on the stack reports pages . You can expect the following simulator runtimes to be installed: The matching runtime versions of a given Xcode version: these are the iOS, watchOS, tvOS and visionOS runtime versions that Xcode prompts you to download at first launch. For iOS, we also install two additional versions: the two previous major versions, of which the latest minor version is installed. For watchOS, we also install the previous major release’s latest minor version. For example, when selecting the Xcode 15.0 stack, you can expect: iOS 17.0: the matching runtime of this Xcode. iOS 16.4: the latest minor release of the previous major iOS version. iOS 15.5: the latest minor release of the second-previous major iOS version. watchOS 10.0: the matching runtime of this Xcode. watchOS 9.4: the latest minor release of the previous major version. tvOS 17.0: the matching runtime of this Xcode. visionOS 1.0: the matching runtime of this Xcode " }, 
{ "title" : "Linux stack updates ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-c59a4341-d03f-46e0-abe8-dfd6179f0c98", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Linux stack updates ", 
"snippet" : "Linux stacks on Bitrise are based on Ubuntu LTS releases . Each Bitrise stack is based on one Ubuntu LTS version and never gets upgraded to another. Instead, we release new stacks and sunset older ones over time....", 
"body" : "Linux stacks on Bitrise are based on Ubuntu LTS releases . Each Bitrise stack is based on one Ubuntu LTS version and never gets upgraded to another. Instead, we release new stacks and sunset older ones over time. " }, 
{ "title" : "Using the previous version of a stack ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-e7fd5cdc-3021-0f20-4ace-4504874d2c00", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Using the previous version of a stack ", 
"snippet" : "Not available on dedicated build environments This feature is not available on an Enterprise plan with a dedicated build environment, because the user controls the rollout of stack updates on these plans. We regularly update the Bitrise stacks based on user requests and external tooling changes. The...", 
"body" : "Not available on dedicated build environments This feature is not available on an Enterprise plan with a dedicated build environment, because the user controls the rollout of stack updates on these plans. We regularly update the Bitrise stacks based on user requests and external tooling changes. These updates can potentially introduce breaking changes, despite our efforts to avoid those. For those cases, we provide a temporary option to use the previous version of a given stack for a few days after the release of a new version. This is meant to be a temporary mechanism only. Because of infrastructure reasons, we can't keep the previous release available forever. Usually, the previous version is removed a few days after a successful release. Once the previous version becomes unavailable, new builds run on the latest version even if this feature is enabled. If a previous version is not available for a given stack at a given time, the switch is inactive and the feature can't be turned on. Any build triggered will run on the current version of the stack. To use the previous version of your stack: Workflow Editor bitrise.yml Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Go to the Stacks & Machines tab. Find the stack you want to configure: either the default stack or one of the Workflow-specific stacks. Under the machine type for the chosen stack, toggle the Use previous version switch. This modifies the bitrise.yml file: it adds the previous version of the stack to the meta block. If you store the bitrise.yml file in your own repository , you need to specify the exact rollback version in a meta object. You cannot use the toggle in the Workflow Editor to turn the feature on because the toggle can only modify a configuration file stored on Bitrise: we cannot edit the bitrise.yml in your repository. Unavailable versions If the specified version is not available, the Workflow Editor will display a warning. Any build triggered after a previous stack version becomes unavailable will run on the current stable version of the stack. Find the meta block in your bitrise.yml file. Add a stack_rollback_version field with the given version string. Finding out the previous version number To find out the previous version string, open an older build, switch to the Details & Add-ons tab, and look for the Stack image version field. meta:\n stack: osx-xcode-15.0.x\n machine_type_id: g2-m1.8core\n stack_rollback_version: 2-16-2 " }, 
{ "title" : "Changelog ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-152fa912-5d81-fe75-cb86-03f12bd50f40_UUID-193d553e-4ee0-2176-d46c-dd156d745f9a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack update policy \/ Changelog ", 
"snippet" : "March 2024 New : Define what happens when an Edge stack is phased out in favor of a newer edge stack. Removed : When a new Xcode Edge stack is released, it no longer brings tooling changes to the Stable stacks. Changed : New, simpler simulator runtime policy. The same number of older iOS major versi...", 
"body" : "March 2024 New : Define what happens when an Edge stack is phased out in favor of a newer edge stack. Removed : When a new Xcode Edge stack is released, it no longer brings tooling changes to the Stable stacks. Changed : New, simpler simulator runtime policy. The same number of older iOS major versions are installed, but only the latest minor version is installed for each. " }, 
{ "title" : "Stack deprecation and removal policy ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-9a682973-8466-57ef-a98a-946b2799e616", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy ", 
"snippet" : "On Bitrise, Android stacks are supported for around two years; Xcode stacks are deprecated gradually as new Xcode versions are released. We don't keep all stacks around forever: our aim is to provide you with the latest tools to help you build the best app you can. However, we don't expect you to re...", 
"body" : "On Bitrise, Android stacks are supported for around two years; Xcode stacks are deprecated gradually as new Xcode versions are released. We don't keep all stacks around forever: our aim is to provide you with the latest tools to help you build the best app you can. However, we don't expect you to rework your build configuration every time a stack update comes out: you can keep using your reliable older stacks for a long time. Some older stacks are frozen when a new major version of Xcode is released. When a stack is frozen, you can still keep using it, but the stack will no longer get any updates, and at that point, we strongly recommend switching to a newer, active stack. After stacks have been frozen for a year, they are removed when the next major version of Xcode is released. " }, 
{ "title" : "Maintaining Xcode stacks ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-23e94c31-5fac-39f7-a73b-ca913b1bcaa8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Maintaining Xcode stacks ", 
"snippet" : "We offer a wide variety of Xcode stacks in order to make sure you do not need to immediately switch when a new version comes out. Our policy is as follows: Keep the three most recent major versions of Xcode. Keep the two most recent minor versions for each major version of Xcode. We base our policy ...", 
"body" : "We offer a wide variety of Xcode stacks in order to make sure you do not need to immediately switch when a new version comes out. Our policy is as follows: Keep the three most recent major versions of Xcode. Keep the two most recent minor versions for each major version of Xcode. We base our policy on Apple's current release cadence: first beta in June, general availability in September. The life cycle of a major Xcode version on our stacks is 36 months. For 24 months, the stack is active and maintained according to our stack update policy. After 24 months, the stack becomes frozen for 12 months and it will no longer receive updates. At this point, we strongly recommend migrating to an active stack. After the end of the 36th month, the stacks of the major Xcode version are removed. Maintaining Xcode stacks When Xcode version 15.2.x is released, we will keep: All the latest patch releases for the two most recent minor versions of Xcode 15: 15.2 15.1 Xcode 15.0 will be removed. The two latest versions from the previous two Xcode major versions: Xcode 14.3 Xcode 14.2 Xcode 13.4 (frozen) Xcode 13.3 (frozen) In all cases, there will be a minimum of four weeks' notice provided for the removal of these stacks. You can see all upcoming stack deprecations on this page . We also recommend subscribing to RSS updates of important announcements about stacks. " }, 
{ "title" : "Deprecating Linux stacks ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-9a682973-8466-57ef-a98a-946b2799e616_UUID-4a6b6f53-2b3b-2469-73ec-cab86ebf7d70", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Stack deprecation and removal policy \/ Deprecating Linux stacks ", 
"snippet" : "A Linux stack is supported for about two years, roughly in sync with Ubuntu LTS (long term support) releases. When a previous Linux stack reaches end of maintenance, we deprecate the stack and earmark it for removal. At that point you can no longer select the stack for your apps. But the apps that a...", 
"body" : "A Linux stack is supported for about two years, roughly in sync with Ubuntu LTS (long term support) releases. When a previous Linux stack reaches end of maintenance, we deprecate the stack and earmark it for removal. At that point you can no longer select the stack for your apps. But the apps that are already using those stacks can keep using them until removal. In all cases, there will be a minimum of four weeks' notice provided for the removal of these stacks. You can see all upcoming stack deprecations on this page . We also recommend subscribing to RSS updates of important announcements about stacks. " }, 
{ "title" : "Preinstalled tools on Bitrise stacks ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-5c6d11d2-5bdc-1c4e-43e3-58c25f7122a9", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Preinstalled tools on Bitrise stacks ", 
"snippet" : "Every Bitrise stack comes up with a large number of preinstalled tools and applications. Check the list in the system reports repository. Every Bitrise stack comes up with a large number of preinstalled tools and applications to make sure the build process of your apps is as smooth and fast as possi...", 
"body" : "Every Bitrise stack comes up with a large number of preinstalled tools and applications. Check the list in the system reports repository. Every Bitrise stack comes up with a large number of preinstalled tools and applications to make sure the build process of your apps is as smooth and fast as possible. Every time we create or update a stack we publish a stack report for it as well. The stack reports include the list of preinstalled tools and their version on the stack. We update stacks regularly: macOS and Linux stacks are updated regularly to provide the latest installed tool versions . You can find every available stack’s stack report on our dedicated page: Bitrise stack reports . Installing tools during a build If you can't find a tool you need on the build machine, you can always install it during the build itself: Installing tools during a build. You can find some concrete examples in our Knowledge Base: Installing a specific fastlane version Installing a specific npm version " }, 
{ "title" : "The Android\/Linux\/Docker environment ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-84990961-9960-b41e-cb22-60f9b5c0aabc", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ The Android\/Linux\/Docker environment ", 
"snippet" : "Bitrise's Android stacks run on Linux-based virtual machines that are created from Docker images. You can find all the image files on GitHub. For our Linux-based stacks, we use standard Docker images, hosted on Docker Hub . You can find the available stacks, called Ubuntu for Android & Docker , in o...", 
"body" : "Bitrise's Android stacks run on Linux-based virtual machines that are created from Docker images. You can find all the image files on GitHub. For our Linux-based stacks, we use standard Docker images, hosted on Docker Hub . You can find the available stacks, called Ubuntu for Android & Docker , in our stack reports . Pre-installed tools All stacks have a large number of pre-installed tools available: Preinstalled tools on Bitrise stacksEvery build runs in a new VM, not just in a new container. The VM is destroyed right after the build. This allows us to grant you full control over Docker and the whole environment. When your build starts on a Docker-based stack, we volume mount the \/var\/run\/docker.sock socket into your container (similar to calling docker run -v \/var\/run\/docker.sock:\/var\/run\/docker.sock ... . You can find a description about this access granting method here ). The docker binary has to be installed inside the base Docker image because docker started to migrate from a single-binary solution to dynamically loaded components, and simply sharing the docker binary is not sufficient anymore. We install Docker in every one of our Docker images so that you don’t have to do anything if you use our image, or you base your own image on our Docker images. This means that you have access to docker in your container, and can use other tools which use docker, like docker-compose . You can, for example, configure and run tests and other automations on website projects using docker-compose . You can call docker info , docker build , docker run , docker login , docker push exactly how you would on your own machine. Shared volumes If you want to run docker in your build and share volumes, please note that only those volumes can be shared that are shared with the base docker container (the one your build is running in). This is due to how docker handles volume sharing. Everything under \/bitrise can be mounted as a volume, but no other path is guaranteed to work with --volume mapping. It means that if you use the standard paths and you use relative paths to mount volumes, it’ll work as expected, as the default source code directory is located inside \/bitrise (by default it’s \/bitrise\/src in our Docker images). What WON’T WORK, however, is if you change the source code directory to be located outside of \/bitrise , or you want to mount a folder with an absolute path outside of \/bitrise . " }, 
{ "title" : "Managing Java versions ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions ", 
"snippet" : "All Bitrise virtual machines have Java 8, Java 11, and Java 17 pre-installed. The default version is Java 17 but you can switch versions at any time. By default, every Bitrise stack comes with Java 11 pre-installed and ready to use. If you do not switch to another version, your build will use Java 1...", 
"body" : "All Bitrise virtual machines have Java 8, Java 11, and Java 17 pre-installed. The default version is Java 17 but you can switch versions at any time. By default, every Bitrise stack comes with Java 11 pre-installed and ready to use. If you do not switch to another version, your build will use Java 11. In addition to 11, we have two more Java versions pre-installed on all stacks: Java 8 Java 17 You can switch between the versions at any time. You can also install a different Java version (for example, 14). Potential issues with Java versions Using a new Java version, or switching Java versions during a build might cause unexpected issues: JAVA_HOME isn't set correctly after switching to Java 11 on macOS-based stacks Using Android SDK tools with Java 11 java.lang.ClassNotFoundException " }, 
{ "title" : "Setting Java version with the Set Java version Step ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-badb376b-bd4e-3edf-be7e-4f827a7822bc", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Setting Java version with the Set Java version Step ", 
"snippet" : "Each Bitrise stack has three different Java versions pre-installed: 8, 11 (the default version), and 17. You can easily switch between the different Java versions with our Set Java version Step . The Step allows you to set the global Java version of the virtual machine that runs your build. Installi...", 
"body" : "Each Bitrise stack has three different Java versions pre-installed: 8, 11 (the default version), and 17. You can easily switch between the different Java versions with our Set Java version Step . The Step allows you to set the global Java version of the virtual machine that runs your build. Installing a new Java version This Step cannot install any Java version. It can only switch between the versions that are pre-installed on our stacks. If you want to install a Java version that is not available on our stacks by default, check out Installing a Java version on an Android stack. Add the Set Java version Step to your Workflow . We recommend setting it as the first Step of the Workflow. Find the Java version to be set globally for the build input. Set it to the version you need. The options are: 8 11 (the default value) 17 YAML example In this example, we're setting the Java version to 17 in the bitrise.yml file. primary:\n steps:\n - set-java-version@1:\n inputs:\n - set_java_version: '17' " }, 
{ "title" : "Installing a Java version on an Android stack ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43186-build-stacks.html#UUID-aa6c9928-a8b4-45c7-2cc5-52c6b99567ca_UUID-d57c0d6d-9372-a962-d727-92ddb61db2c2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Build stacks \/ Managing Java versions \/ Installing a Java version on an Android stack ", 
"snippet" : "If you need a Java or JDK version which is not installed on our Android stacks, follow this guide. The example below will install Java\/JDK 1.14 with a Script Step. You can adapt it to the version of your choice. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows...", 
"body" : "If you need a Java or JDK version which is not installed on our Android stacks, follow this guide. The example below will install Java\/JDK 1.14 with a Script Step. You can adapt it to the version of your choice. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add the Script Step to your Workflow. In the Script content input of the Step, add your script: The example below installs Java 14 but feel free to replace the openjdk-14-jdk and java-1.14.0-openjdk-amd64 parts with your version of choice. #!\/bin\/bash\nset -ex\n \nadd-apt-repository -y ppa:openjdk-r\/ppa\napt-get update -qq\napt-get install -y openjdk-14-jdk\nupdate-java-alternatives -s \/usr\/lib\/jvm\/java-1.14.0-openjdk-amd64\necho \"done\" Start a new build. This Script Step can be the very first Step in the Workflow, as it does not depend on anything else. " }, 
{ "title" : "Code security ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43173-code-security.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security ", 
"snippet" : "Every Bitrise build runs in a new virtual machine that has no access to previous builds. We do not store your source code and you can set up how it is accessed. To guarantee the security of your code, every Bitrise build runs in its own, clean virtual machine and we discard the whole virtual machine...", 
"body" : "Every Bitrise build runs in a new virtual machine that has no access to previous builds. We do not store your source code and you can set up how it is accessed. To guarantee the security of your code, every Bitrise build runs in its own, clean virtual machine and we discard the whole virtual machine after the build finishes, erasing every file your build uses and every change you make during your build. This is also true for the Android & Docker stacks , which use Docker containers to run the build. The build itself still gets a full virtual machine where no other Docker container is started, only the one used as the environment of the build. In short, we only use Docker containers to manage the environment, not for build environment isolation - that’s ensured by using full virtual machines for every build. This way your builds are always protected from changes made by others and from your previous builds, no one else can access your code and you can use a stable environment to define your build Workflow . Every build is completed in an isolated environment, unrelated to any previous or parallelly running builds. " }, 
{ "title" : "Source code ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43173-code-security.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-12fe389e-435f-2d34-8992-34438c715188", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Source code ", 
"snippet" : "We don’t store your source code. The source code is only accessed on the build machines (virtual machines) the way you define it in your Bitrise configuration . If you don’t have a Git Clone Step or some other Step that accesses your Git repository in your configuration, then the source code won’t b...", 
"body" : "We don’t store your source code. The source code is only accessed on the build machines (virtual machines) the way you define it in your Bitrise configuration . If you don’t have a Git Clone Step or some other Step that accesses your Git repository in your configuration, then the source code won’t be touched at all. At the end of the build the whole virtual machine is destroyed. As such, any change you made to your source code on the virtual machine will be lost unless you commit your changes and push them to a remote repository. " }, 
{ "title" : "Code signing and other files ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43173-code-security.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-da1ab3c5-fb7b-86aa-b821-f2e94d9afc76", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Code signing and other files ", 
"snippet" : "The files you upload in the Code Signing tab of the Workflow Editor are stored on Amazon S3 in a way that it’s only accessible for the web servers. The required credentials are not stored in any database, it is only available in the web servers’ environment. Build servers can’t access the files dire...", 
"body" : "The files you upload in the Code Signing tab of the Workflow Editor are stored on Amazon S3 in a way that it’s only accessible for the web servers. The required credentials are not stored in any database, it is only available in the web servers’ environment. Build servers can’t access the files directly either. When a build starts, the web server generates a read-only, time limited access URL for these files, using Amazon S3 pre-signed URLs . " }, 
{ "title" : "Passwords ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43173-code-security.html#UUID-ad66469f-0b08-1ea7-3d1b-1f4d52a7c106_UUID-2ed8d1a3-4482-7e78-5d0c-5b07ab67ce6d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Code security \/ Passwords ", 
"snippet" : "Passwords are stored in a hashed, encrypted form. We are encrypting the passwords with bcrypt algorithm , using multiple stretches....", 
"body" : "Passwords are stored in a hashed, encrypted form. We are encrypting the passwords with bcrypt algorithm , using multiple stretches. " }, 
{ "title" : "Customizable enterprise build platforms ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-43190-customizable-enterprise-build-platforms.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Customizable enterprise build platforms ", 
"snippet" : "Bitrise offers two types of custom build platforms for enterprises: dedicated build platforms behind the Bitrise firewall and private build platforms on the user's own environment. Using a custom enterprise build platform means running your Bitrise builds on virtual machines (VM) dedicated and speci...", 
"body" : "Bitrise offers two types of custom build platforms for enterprises: dedicated build platforms behind the Bitrise firewall and private build platforms on the user's own environment. Using a custom enterprise build platform means running your Bitrise builds on virtual machines (VM) dedicated and specifically configured to your needs. With a private cloud, you have complete control over how and when your builds run. Bitrise offers two types of custom build platforms for enterprises: Dedicated build platform: a set of dedicated machines behind the Bitrise firewall. These machines will have the same public IP address as any Bitrise build machine but they are reserved for your exclusive use. Private build platform: this solution includes your own firewall, storage capacity, and computing environment. This allows you to create a custom virtualization configuration, as well as a site-to-site VPN. With the latter, data will never leave your network and you do not have to separately connect to a VPN with each build . The private build platform is an advanced set-up with plenty of configuration options. To learn more about the details, contact us ! Check out the most important differences between the dedicated and the private build platforms: Dedicated vs private build platform Available service Dedicated build platform Private build platform Selecting the resources available to your virtual machines Yes Yes Dedicated Customer Success Engineer, who is an expert in Mobile CI\/CD. Yes Yes Initial onboarding assistance for the first month with weekly calls. Yes Yes Continued CI\/CD best practices mentoring with monthly check-ins from Bitrise Account Managers and Customer Success Engineers. Yes Yes Weekly Infrastructure maintenance that includes licenses for virtualization, orchestration, and data storage. Yes Yes Private network with a dedicated firewall and IP addresses - Yes Management dashboard access (vSphere and Google Cloud Platform) - Yes " }, 
{ "title" : "Using your own Docker image ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-54073-using-your-own-docker-image.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image ", 
"snippet" : "You can use your own Docker image on Bitrise, as well as run custom Docker commands in your Workflow. Use either a custom image from Docker Hub or your own Dockerfile. Docker Hub rate limits From July 15, 2024, rate limiting will apply on downloads from Docker Hub. If you pull a Docker image from Do...", 
"body" : "You can use your own Docker image on Bitrise, as well as run custom Docker commands in your Workflow. Use either a custom image from Docker Hub or your own Dockerfile. Docker Hub rate limits From July 15, 2024, rate limiting will apply on downloads from Docker Hub. If you pull a Docker image from Docker Hub without authentication during a Bitrise build on our Linux machines, you may run into issues because of rate limiting. Bitrise is mirroring some of the popular public docker images, but to avoid these potential issues with rate limiting, you can either: Authenticate your Docker image pulling requests towards Docker Hub. For the details and Docker's full policy, refer to Docker Hub rate limit . Switch to another Docker registry to store your images. On Bitrise, every single build runs in its own, separate virtual machine that is destroyed at the end of the build. On our Android stacks , we use Docker for this purpose. Our stacks have pre-installed Docker images but you can use your own custom image, and run custom Docker commands in your Workflow. There are two ways to use your own Docker configuration on Bitrise: Run docker commands yourself during your build. To do so, use one or more Script Step . Set a custom image in the Workflow Editor . No Docker on macOS stacks Docker isn't installed on any of our macOS-based stacks; our guides related to Docker only apply to Linux-based stacks. We recommend that you run docker commands with a Script Step as you should NOT CHANGE the base environment Docker image on the Stack tab unless you really have to! Running the docker commands yourself during the build is more flexible and provides an overall higher level of control. GitHub sample repository You can find a sample repository on GitHub , which is configured to run on your Mac\/Linux using the Bitrise CLI . " }, 
{ "title" : "Running docker commands with a Script Step ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-54073-using-your-own-docker-image.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-14d6acc6-a98a-13d3-634b-017ae06cd24f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step ", 
"snippet" : "The recommended way of using a custom Docker configuration both locally and on bitrise.io , is to add a Script Step to your Workflow to run Docker commands. You can use the same Step to authenticate yourself to a service such as Docker Hub and to run your selected image. We provide three examples on...", 
"body" : "The recommended way of using a custom Docker configuration both locally and on bitrise.io , is to add a Script Step to your Workflow to run Docker commands. You can use the same Step to authenticate yourself to a service such as Docker Hub and to run your selected image. We provide three examples on how to run Docker commands using our Script Step: " }, 
{ "title" : "Running docker hello-world ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-54073-using-your-own-docker-image.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-1c93acde-278b-4746-0519-afbc7b4f51b7", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Running docker hello-world ", 
"snippet" : "The official hello-world Docker image is hosted on Docker Hub. If you wish to use any of the images from Docker Hub, you must authenticate first. In this example, we’re following the official getting started guide to run the hello-world Docker image. In our example bitrise.yml file, you can see a si...", 
"body" : "The official hello-world Docker image is hosted on Docker Hub. If you wish to use any of the images from Docker Hub, you must authenticate first. In this example, we’re following the official getting started guide to run the hello-world Docker image. In our example bitrise.yml file, you can see a simple build configuration that can run the image: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: \"*\"\n workflow: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n - git-clone@3.4.1: {}\n - script@1:\n title: docker run hello-world\n inputs:\n - content: |-\n #!\/bin\/bash\n # fail if any commands fails\n set -e\n # debug log\n set -x\n\n docker login -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN\n docker run hello-world " }, 
{ "title" : "Building and running a Dockerfile ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-54073-using-your-own-docker-image.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-eabad7ca-54f3-0fb2-2562-c4c393d8e72a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Building and running a Dockerfile ", 
"snippet" : "You can use your own Dockerfile on Bitrise in your repository to define the Docker environment: --- format_version: 11 default_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git trigger_map: - push_branch: \"*\" workflow: primary - pull_request_source_branch: \"*\" workflow: primary work...", 
"body" : "You can use your own Dockerfile on Bitrise in your repository to define the Docker environment: ---\nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\ntrigger_map:\n- push_branch: \"*\"\n workflow: primary\n- pull_request_source_branch: \"*\"\n workflow: primary\nworkflows:\n primary:\n steps:\n - activate-ssh-key@4:\n run_if: ''\n - git-clone@3.4.1: {}\n - script@1:\n title: docker run\n inputs:\n - content: |-\n #!\/bin\/bash\n # fail if any commands fails\n set -e\n # debug log\n set -x\n\n docker build -t bitrise-minimal-sample .\n docker run --rm bitrise-minimal-sample This Workflow will: Git clone your repository. Run docker build -t bitrise-minimal-sample . and docker run --rm bitrise-minimal-sample in the repository’s root. If you have a Dockerfile like this in the root of the repository: FROM alpine:3.3\n\nCMD cat \/etc\/alpine-release The output will look something like this: +------------------------------------------------------------------------------+\n| (2) docker run hello-world |\n+------------------------------------------------------------------------------+\n| id: script |\n| version: 1.1.3 |\n| collection: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git |\n| toolkit: bash |\n| time: 2016-11-21T14:28:23Z |\n+------------------------------------------------------------------------------+\n| |\n+ docker build -t bitrise-minimal-sample .\nSending build context to Docker daemon 69.12 kB\n\nStep 1 : FROM alpine:3.3\n3.3: Pulling from library\/alpine\n985c5f84712b: Pulling fs layer\n985c5f84712b: Verifying Checksum\n985c5f84712b: Download complete\n985c5f84712b: Pull complete\nDigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nStatus: Downloaded newer image for alpine:3.3\n ---> 6c2aa2137d97\nStep 2 : CMD cat \/etc\/alpine-release\n ---> Running in 507cfb961cc7\n ---> 02a0da3ac697\nRemoving intermediate container 507cfb961cc7\nSuccessfully built 02a0da3ac697\n+ docker run --rm bitrise-minimal-sample\n3.3.3\n| |\n+---+---------------------------------------------------------------+----------+\n| ✓ | docker run hello-world | 4.24 sec |\n+---+---------------------------------------------------------------+----------+ " }, 
{ "title" : "Using docker-compose ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-54073-using-your-own-docker-image.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5929a02d-0629-5409-3865-9c8087678650", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Running docker commands with a Script Step \/ Using docker-compose ", 
"snippet" : "You can also run a Docker image from your own Docker file using the docker-compose command. With compose, you can configure your application’s services and then you can start all services with a single command. For example, set up a docker-compose.yml like this in your repository root (where the Doc...", 
"body" : "You can also run a Docker image from your own Docker file using the docker-compose command. With compose, you can configure your application’s services and then you can start all services with a single command. For example, set up a docker-compose.yml like this in your repository root (where the Dockerfile is): version: '2'\nservices:\n sample-app:\n build: . Now you can run your services with a single docker-compose call in your Script Step: - script@1.1.3:\n title: docker run\n inputs:\n - content: |-\n #!\/bin\/bash\n # fail if any commands fails\n set -e\n # debug log\n set -x\n docker-compose run --rm sample-app Docker compose will build and run the image automatically. You don’t have to specify a -t tag since the services name will be used by docker-compose to tag the image automatically. " }, 
{ "title" : "Using a custom Docker image from Docker Hub ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-54073-using-your-own-docker-image.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-d60f16ef-29c2-7d9f-8e37-3ecb688ed7cd", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Using a custom Docker image from Docker Hub ", 
"snippet" : "You can use Bitrise with a Docker image pulled from Docker Hub, as you can see in our Running docker hello-world example. However, on a free plan for anonymous users, Docker Hub only allows a limited number of image pulls. If you set the image in the Workflow Editor, no authentication will be perfor...", 
"body" : "You can use Bitrise with a Docker image pulled from Docker Hub, as you can see in our Running docker hello-world example. However, on a free plan for anonymous users, Docker Hub only allows a limited number of image pulls. If you set the image in the Workflow Editor, no authentication will be performed: your pull will be a pull by an anonymous user from a Bitrise public IP address. With many of our users going for this option, the Docker Hub rate limit would mean some users wouldn’t be able to start builds. The workaround is simple: you need to use a Script Step to authenticate yourself with your own Docker Hub account, and use the Step to pull the image from Docker Hub. To do so: Create a personal access token on Docker Hub. This will be used to authenticate you instead of your password. On Bitrise, create two Secret Environment Variables : one for your Docker Hub username and another for the personal access token. In our examples, we’ll use DOCKERHUB_USER for the Docker Hub username and DOCKERHUB_TOKEN . Use the docker login command in a Script Step to authenticate, with the Secret Env Vars as arguments: - script@1.1.3: \n inputs: \n - content: | \n docker login -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN\n Use the docker run command in the Script Step to run your chosen Docker image. In our example, it’s Docker’s official hello-world image. You can just replace hello-world with any image you want to use from Docker Hub. - script@1.1.3: \n inputs: \n - content: | \n docker login -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN\n docker run hello-world " }, 
{ "title" : "Setting a custom Docker image in the Workflow Editor ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-54073-using-your-own-docker-image.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-071a6877-8628-586d-86a1-0e2aaabef5e1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor ", 
"snippet" : "In the Workflow Editor on bitrise.io, you have the option to set a path to a custom Docker image. If you want to run your build in a custom Docker environment, we strongly recommend basing your own Docker image on one of our base Docker images. Our images have every base tool pre-installed, the stan...", 
"body" : "In the Workflow Editor on bitrise.io, you have the option to set a path to a custom Docker image. If you want to run your build in a custom Docker environment, we strongly recommend basing your own Docker image on one of our base Docker images. Our images have every base tool pre-installed, the standard Bitrise directories created, the environments (such as $BITRISE_DEPLOY_DIR ) set, and are pre-cached on the build virtual machines. However, if you decide to create your own Docker image please read this guide, from start to finish. Custom Android docker image Creating and maintaining your own Android Docker image can be quite time consuming! If you only need to install a couple of additional tools, you should do that, for example, with a Script Step instead! For more information, see our Install Any Additional Tool guide. You should only use your own Android docker image if you really have to! Using an image hosted on Docker Hub If you wish to use an image hosted on Docker Hub, do not set the image path on the Stack tab of the Workflow Editor! Use a Script Step instead to authenticate your Docker Hub account and run the selected image. Using a custom Docker image from Docker Hub" }, 
{ "title" : "Creating your own image from a Bitrise image ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-54073-using-your-own-docker-image.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-5a239c0c-f35f-4814-5d5d-c401f7a7ba30", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Creating your own image from a Bitrise image ", 
"snippet" : "We have four different Docker image types available. You can base your own image on any of these, depending on your needs. Using an image hosted on Docker Hub If you wish to use an image hosted on Docker Hub, do not set the image path on the Stack tab of the Workflow Editor! Use a Script Step instea...", 
"body" : "We have four different Docker image types available. You can base your own image on any of these, depending on your needs. Using an image hosted on Docker Hub If you wish to use an image hosted on Docker Hub, do not set the image path on the Stack tab of the Workflow Editor! Use a Script Step instead to authenticate your Docker Hub account and run the selected image. Using a custom Docker image from Docker HubBitrise Docker image types Image type Description GitHub link quay.io link Bitrise base image The bare minimum Bitrise image with no specific tools installed. https:\/\/github.com\/bitrise-docker\/bitrise-base https:\/\/quay.io\/repository\/bitriseio\/bitrise-base Android base image Bare-minimum base image with Android-specific tools and environment. https:\/\/github.com\/bitrise-docker\/android https:\/\/quay.io\/repository\/bitriseio\/android Android NDK image Built on the Android base image with pre-installed Android NDK and environment. https:\/\/github.com\/bitrise-docker\/android-ndk https:\/\/quay.io\/repository\/bitriseio\/android-ndk Android NDK LTS image LTS “pin” of the Android NDK Docker image. https:\/\/github.com\/bitrise-docker\/android-ndk-lts https:\/\/quay.io\/repository\/bitriseio\/android-ndk-lts To base your own image on one of our available images, specify your base image at the very top of your Dockerfile with a FROM instruction and the quay.io ID of the image. In our example, we’ll use the latest version of the Bitrise base image: FROM quay.io\/bitriseio\/docker-bitrise-base:latest You have to use the quay.io ID of the image you want to use as the base image. For example, quay.io\/bitriseio\/android , quay.io\/bitriseio\/android-ndk , quay.io\/bitriseio\/android-ndk-lts , or quay.io\/bitriseio\/bitrise-base . Don’t use the alpha images for your builds For every Docker image we have on quay.io , we have an alpha tagged version too. The alpha ones are frequently rebuilt and are NOT PRECACHED ON bitrise.io , so you should avoid those. " }, 
{ "title" : "Using your created Docker image in a build ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-54073-using-your-own-docker-image.html#UUID-328bfe61-e2fb-9b6b-6b93-6345a4ba97dd_UUID-35d8a6d0-81fb-f9ac-7fd1-0baac8b00112", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Using your own Docker image \/ Setting a custom Docker image in the Workflow Editor \/ Using your created Docker image in a build ", 
"snippet" : "You can set your own Docker image in the Workflow Editor if the image can be pulled with the docker pull command . To do so: Using an image hosted on Docker Hub If you wish to use an image hosted on Docker Hub, do not set the image path on the Stack tab of the Workflow Editor! Use a Script Step inst...", 
"body" : "You can set your own Docker image in the Workflow Editor if the image can be pulled with the docker pull command . To do so: Using an image hosted on Docker Hub If you wish to use an image hosted on Docker Hub, do not set the image path on the Stack tab of the Workflow Editor! Use a Script Step instead to authenticate your Docker Hub account and run the selected image. Using a custom Docker image from Docker HubGo to your Workflow Editor. Click the Stack tab. Copy and paste the ID of your app. For example, quay.io\/bitriseio\/bitrise-base . Click Save in the upper-right corner. Now you should be able to use your own image to run your builds on bitrise.io . " }, 
{ "title" : "Running your build locally in Docker ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-65273-running-your-build-locally-in-docker.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker ", 
"snippet" : "You can run a Bitrise build in Docker on your own machines: you need Docker, the Bitrise CLI, and a Bitrise Docker image. Docker Hub rate limit From July 15, 2024, rate limiting will apply on downloads from Docker Hub. If you pull a Docker image from Docker Hub without authentication during a Bitris...", 
"body" : "You can run a Bitrise build in Docker on your own machines: you need Docker, the Bitrise CLI, and a Bitrise Docker image. Docker Hub rate limit From July 15, 2024, rate limiting will apply on downloads from Docker Hub. If you pull a Docker image from Docker Hub without authentication during a Bitrise build on our Linux machines, you may run into issues because of rate limiting. Bitrise is mirroring some of the popular public docker images, but to avoid these potential issues with rate limiting, you can either: Authenticate your Docker image pulling requests towards Docker Hub. For the details and Docker's full policy, refer to Docker Hub rate limit . Switch to another Docker registry to store your images. To be able to run your Linux stack builds locally, you’ll need docker : For Linux, just follow the official install instructions . For Mac, you can use Docker for Mac, which is the easiest way to get started. In this guide, we’ll use this Bitrise Android sample project . Large images ahead The official Bitrise Docker images are quite large because they include a wide variety of preinstalled tools. You’ll need at least 20-25 GB FREE DISC SPACE! If you’re not familiar with the Bitrise CLI , you should try that first. You don’t have to master the CLI, if you know what bitrise run WORKFLOW does, that should be enough for this tutorial. " }, 
{ "title" : "Downloading docker images ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-65273-running-your-build-locally-in-docker.html#UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9_UUID-b984657e-3245-cf1b-bf25-c376e57357e0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker \/ Downloading docker images ", 
"snippet" : "Install docker . Make sure you have your bitrise.yml in your repository. You don’t have to commit it, but the file must exist in your repository’s root directory. cd into your repository’s directory on your Mac\/Linux. Pull the image from its registry: docker pull bitriseio\/android-20.04:latest Run t...", 
"body" : "Install docker . Make sure you have your bitrise.yml in your repository. You don’t have to commit it, but the file must exist in your repository’s root directory. cd into your repository’s directory on your Mac\/Linux. Pull the image from its registry: docker pull bitriseio\/android-20.04:latest\n Run the following command: docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android-20.04:latest bitrise run WORKFLOW` If you want to just jump into the container and experiment inside, you can replace --rm quay.io\/bitriseio\/android-20.04:latest bitrise run WORKFLOW with -it quay.io\/bitriseio\/android-20.04:latest bash to start an interactive bash shell inside the container. For example: docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android-20.04:latest bash\n In general, if your project is an Android project but you don’t use Android NDK, to preserve precious disk space, you should use the quay.io\/bitriseio\/android docker image. You can find other official Bitrise docker images on our Quay page . In this example, we’re using the quay.io\/bitriseio\/android one. Download docker images from the Quay : docker pull bitriseio\/android-20.04:latest`\n Be aware that this can take quite a bit of time, as this image is over 10 GB. If the download fails or hangs, you can restart it any time by running the same command again. Download your Bitrise build configuration ( bitrise.yml ) to the root directory of your repository. You can download your project’s bitrise.yml from the bitrise.yml tab of your Workflow Editor on bitrise.io . In your Terminal \/ Command Line go to ( cd ) the root directory of your repository. Check if your bitrise.yml is at this location. If you try to reproduce an issue, you should git clone your repository into a NEW DIRECTORY, so that the directory will only contain the files which are committed into the repository! It’s a frequent reproducibility issue that you try to run the commands in your normal working directory, where you most likely have files which are not committed into your repository, for example, files which are in .gitignore . " }, 
{ "title" : "Running the build ", 
"url" : "88887-41967-bitrise-docs/88887-43185-infrastructure/88887-65273-running-your-build-locally-in-docker.html#UUID-a1c6c4a9-2bfa-77f5-0299-f1f1ba1deaa9_UUID-f60dcdb5-3d89-b814-5c7a-96927f7d403a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Infrastructure \/ Running your build locally in Docker \/ Running the build ", 
"snippet" : "Run your build with the following command: docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW with -it quay.io...", 
"body" : "Run your build with the following command: docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW --rm quay.io\/bitriseio\/android:latest bitrise run WORKFLOW with -it quay.io\/bitriseio\/android:latest bash to start an interactive bash shell inside the container. For example: docker run --privileged --env CI=false --volume \"$(pwd):\/bitrise\/src\" --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" -it quay.io\/bitriseio\/android:latest bash`. This command will share the current directory (the directory of your repository) as a shared volume with the docker container, and will make it available inside the container at the path \/bitrise\/src . After this, you can run bitrise run WORKFLOW , which will run the workflow inside the container. To exit from the container, just run exit . Don’t forget to replace WORKFLOW with the actual ID of your workflow in your bitrise.yml , with something like primary ! The --env CI=false flag sets the environment variable CI to false - this will make Bitrise CLI skip certain steps that only make sense to run in a CI environment. For example, our Git Clone Step - you already have your code, so there’s no need to git clone it again inside the docker container (that’s why we shared the code directory as a --volume ). The --rm flag tells docker to discard the container after the docker run command finishes. This means that if you run the command again, the only thing which will persist between the docker run .. commands are the files stored at the shared --volume (in your repository’s directory). Every other file that is generated into a temp or any other location will be discarded \/ won’t be kept. If you want to debug the container after a failed build, feel free to remove the --rm flag, and check out a Docker tutorial about how you can connect to an existing docker container. Please note that simply running the command again will not use the same container, but will create a new one! The --privileged flag allows access control of the host from the docker container, so you should never use this flag unless you trust the docker image you will use! This flag is required for allowing VPNs to work (to change network configs of the host), for example. The --volume \"\/var\/run\/docker.sock:\/var\/run\/docker.sock\" flag exposes the docker socket from the host for the container - this is required if you want to run other docker containers from within the container, or if you want to run any docker command during your build \/ inside the container. " }, 
{ "title" : "Accounts ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts ", 
"snippet" : "When you sign up for Bitrise, you create your own individual user account. By itself, having a user account isn’t enough to add apps and run builds. For that, you must be part of a Workspace. Your Bitrise account is managed from your account page . From this page, you can: Edit your profile , includ...", 
"body" : "When you sign up for Bitrise, you create your own individual user account. By itself, having a user account isn’t enough to add apps and run builds. For that, you must be part of a Workspace. Your Bitrise account is managed from your account page . From this page, you can: Edit your profile , including username, email address, password, and avatar. Enable two-factor authentication . Find all Workspaces that you're a part of. Create and manage personal access tokens used to access the Bitrise API . Register test devices . Can't run builds yet! When you sign up for Bitrise, you create your own individual user account. By itself, having a user account isn’t enough to add apps and run builds. To be able to work on Bitrise, you need at least one of three options: Creating a Workspace . Get invited to an existing Workspace . Get added as an outside contributor to an app’s team . " }, 
{ "title" : "Connecting to services ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services ", 
"snippet" : "You can connect your Git provider services, such as a GitHub\/GitLab\/Bitbucket account to your Bitrise account. To use all the features Bitrise offers, you might want to connect to services such as your Git provider or to any of the Apple services you use. Our guides explain how to connect your GitHu...", 
"body" : "You can connect your Git provider services, such as a GitHub\/GitLab\/Bitbucket account to your Bitrise account. To use all the features Bitrise offers, you might want to connect to services such as your Git provider or to any of the Apple services you use. Our guides explain how to connect your GitHub\/GitLab\/Bitbucket account to your Bitrise account (or a self-hosted GitLab instance to your Bitrise account if your Workspace uses it). You can connect only one account from a certain Git provider to Bitrise. You can disconnect and connect a new from another Git provider at any time. You will also learn what authentication methods you can use to connect Bitrise with your Apple services such as App Store Connect or Apple Developer Portal. Whether you use Apple ID and password or API key authentication, we got you covered. " }, 
{ "title" : "Configuring repository access ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access ", 
"snippet" : "To take full advantage of all the features Bitrise offers, including automatic webhook registration, you need to connect your GitHub\/GitLab\/Bitbucket account to your Bitrise account. Bitrise needs access to your code in a Git repository to be able to build. We recommend connecting your Git provider ...", 
"body" : "To take full advantage of all the features Bitrise offers, including automatic webhook registration, you need to connect your GitHub\/GitLab\/Bitbucket account to your Bitrise account. Bitrise needs access to your code in a Git repository to be able to build. We recommend connecting your Git provider account to Bitrise for this and we offer two main methods of doing so: The Bitrise GitHub App : We strongly recommend using the GitHub App to connect your Bitrise account to GitHub. The app offers increased security and granular repository access. Using the app means you don't need SSH keys or webhooks. This works on the Workspace level: you connect a Workspace to a single GitHub account or organization. OAuth application to the Git provider that allows access to all repositories on the account. This means connecting your personal Bitrise account to a Git provider account. This method is supported for GitHub, GitLab, and Bitbucket. You can connect all three Git provider accounts by either: Connecting the account when adding a new app . Connecting the account from your Account settings page. One account per Git provider Please note that you cannot connect two accounts from the same Git provider (for example, two GitHub accounts) to Bitrise. Connecting one Git provider account is not final. You can disconnect an account and connect a different one at any time: Linked the wrong Git account to Bitrise . " }, 
{ "title" : "GitHub App integration ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-9b9bb1dc-6f46-48a7-1ae2-3fe37743c196", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration ", 
"snippet" : "The Bitrise GitHub App allows users to connect their Bitrise Workspace to a GitHub account or organization with a GitHub App that provides granular access with increased security and automatic status updates. The best way to connect your Bitrise account to your GitHub repositories is by integrating ...", 
"body" : "The Bitrise GitHub App allows users to connect their Bitrise Workspace to a GitHub account or organization with a GitHub App that provides granular access with increased security and automatic status updates. The best way to connect your Bitrise account to your GitHub repositories is by integrating with a GitHub app . The Bitrise GitHub app has a number of features that make integration easier: The app eliminates the need for an SSH key, a Personal Access Token, and a service credential user. For access, it generates a temporary access token before every build, significantly increasing security. It provides granular access to your repositories: no need to grant access to an entire GitHub organization, instead select the specific repositories the app can access. With the app installed, you automatically receive Bitrise status updates directly on GitHub with the GitHub Checks app. No need for configuring status reports separately. The Bitrise GitHub app is supported for all GitHub Cloud users. GitHub Enterprise Server users need to create and install a different GitHub app, as described in the relevant guide. " }, 
{ "title" : "Connecting via the GitHub App integration ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-3f55ef21-294f-35cc-a06c-4a2ddd2e1e96", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ GitHub App integration \/ Connecting via the GitHub App integration ", 
"snippet" : "This guide is intended for GitHub Cloud users, including GitHub Enterprise Cloud users, who wish to install the Bitrise GitHub App and connect their Bitrise Workspace to a GitHub account or organization with the app. For GitHub Enterprise Server users, we have a separate guide: Integrating self-host...", 
"body" : "This guide is intended for GitHub Cloud users, including GitHub Enterprise Cloud users, who wish to install the Bitrise GitHub App and connect their Bitrise Workspace to a GitHub account or organization with the app. For GitHub Enterprise Server users, we have a separate guide: Integrating self-hosted GitHub Enterprise Server with BitriseYou can connect via the GitHub App integration in two ways: From the Workspace settings page. When adding a new Bitrise app. One GitHub App installation per Workspace A Workspace is always associated with a single installation of the Bitrise GitHub App. No Workspace can be connected to multiple installations of the Bitrise GitHub App. " }, 
{ "title" : "Connecting a Git provider with OAuth when adding an app ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-c2dcd807-1fbb-598c-337b-191a001cac48", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth when adding an app ", 
"snippet" : "Connecting a Git provider account with an OAuth app allows Bitrise to: List the available repositories when adding a new app . Automatically register webhooks . Webhooks allow setting up build triggers and enable the use of Git Insights . Automatically register SSH keys . Log in to your bitrise.io a...", 
"body" : "Connecting a Git provider account with an OAuth app allows Bitrise to: List the available repositories when adding a new app . Automatically register webhooks . Webhooks allow setting up build triggers and enable the use of Git Insights . Automatically register SSH keys . Log in to your bitrise.io account. Click the + symbol on the top menu bar and select Add New App on the web UI . Adding a new app from a CLI You can also add a new app using CLI. For more information, check out Adding a new app from a CLI. On the Create New App page, select the account and set the app’s privacy setting. Use the radio buttons under the Select repository section to choose between selecting a remote repository or entering an URL manually. If you opt to enter a git URL manually, add it in the Git repository (clone) URL field and click Next . Choose the Git service provider of the app’s repository, if you chose to select a remote repository. If no account with that provider has been connected to your Bitrise account, the UI will display the option to connect. Click Connect account . This will take you to the login page of the Git provider. Log in to the Git provider account. You should be prompted to authorize bitrise.io - do it! If successful, you should be redirected to Bitrise, and a pop-up message should inform you that you successfully linked the account. Click Okay . " }, 
{ "title" : "Connecting a Git provider with OAuth from the Account settings page ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-cddd967e-b15c-c8a4-512f-0341b9dd0dd9", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Connecting a Git provider with OAuth from the Account settings page ", 
"snippet" : "Connecting a Git provider account with an OAuth application allows Bitrise to: List the available repositories when adding a new app . Automatically register webhooks . Webhooks allow setting up build triggers and enable the use of Git Insights . Automatically register SSH keys . In the upper right ...", 
"body" : "Connecting a Git provider account with an OAuth application allows Bitrise to: List the available repositories when adding a new app . Automatically register webhooks . Webhooks allow setting up build triggers and enable the use of Git Insights . Automatically register SSH keys . In the upper right corner, open the account selector dropdown menu. Select the Account settings option. On the left, under Connected Git providers , click the toggle next to the name of the Git provider you wish to connect. Log in to the Git provider account. You should be prompted to authorize bitrise.io - do it! If successful, you should be redirected to Bitrise, and a pop-up message should inform you that you successfully linked the account. Click Okay . " }, 
{ "title" : "Disconnecting a Git provider account ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5a575981-21f7-5a6d-9158-dacef5fd2f1a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Disconnecting a Git provider account ", 
"snippet" : "In the upper right corner, open the account selector dropdown menu. Select the Account settings option. On the left under Connected Git providers , click the toggle next to the name of the Git provider you wish to disconnect....", 
"body" : "In the upper right corner, open the account selector dropdown menu. Select the Account settings option. On the left under Connected Git providers , click the toggle next to the name of the Git provider you wish to disconnect. " }, 
{ "title" : "Switching from OAuth connection to the GitHub App ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-2203bf28-4f8e-996c-5346-42f51661c965_UUID-5b08de6e-edc1-243f-2224-b570f6e75ce0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Configuring repository access \/ Switching from OAuth connection to the GitHub App ", 
"snippet" : "If your Bitrise app has an OAuth connection set up to your GitHub account, you can change it to the Bitrise GitHub App at any time without losing any functionality. We strongly recommend doing the switch: with the Bitrise GitHub App installed, you no longer need the service credential user, an SSH k...", 
"body" : "If your Bitrise app has an OAuth connection set up to your GitHub account, you can change it to the Bitrise GitHub App at any time without losing any functionality. We strongly recommend doing the switch: with the Bitrise GitHub App installed, you no longer need the service credential user, an SSH key, or a webhook to run Bitrise builds. Can't switch back Once you switch an app from the OAuth connection to the GitHub App, you won't be able to switch back! To switch: Install the Bitrise GitHub App as described in the relevant guide: Connecting a GitHub App from the Workspace settings page. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left navigation menu, select Integrations and go to the Git provider tab. In the Git integration status section, you can see a blue card with information about GitHub App support. To switch, click Switch to GitHub App . " }, 
{ "title" : "Connecting self-hosted GitLab instances ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances ", 
"snippet" : "For Workspaces, Bitrise supports connecting to self-hosted GitLab instances. Once it’s done, you can add apps to Bitrise from privately hosted repositories. For Workspaces, Bitrise supports connecting to self-hosted GitLab instances. Connecting is simple, and once it’s done, you can add apps to Bitr...", 
"body" : "For Workspaces, Bitrise supports connecting to self-hosted GitLab instances. Once it’s done, you can add apps to Bitrise from privately hosted repositories. For Workspaces, Bitrise supports connecting to self-hosted GitLab instances. Connecting is simple, and once it’s done, you can add apps to Bitrise from privately hosted repositories. All functions that you got used to with publicly hosted repositories will be available! Setting up an app that is in a self-hosted GitLab repository is very simple: Bitrise needs to be authorized as an application for the entire GitLab instance and then the Application Id and the Secret value belonging to the Bitrise OAuth application must be added to the Workspace on bitrise.io . " }, 
{ "title" : "Configuring the GitLab connection ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-db15d281-c206-d8b4-4f7f-7ab552d22ef3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Configuring the GitLab connection ", 
"snippet" : "To access privately hosted GitLab repositories on Bitrise, you need to create a new OAuth application on your GitLab account, and assign the appropriate credentials to access your server. Publicly resolvable IP address Your self-hosted GitLab instance must have a publicly resolvable IP address, othe...", 
"body" : "To access privately hosted GitLab repositories on Bitrise, you need to create a new OAuth application on your GitLab account, and assign the appropriate credentials to access your server. Publicly resolvable IP address Your self-hosted GitLab instance must have a publicly resolvable IP address, otherwise Bitrise won’t be able to connect to it. Log in to your GitLab instance with root privileges. If you connect to Bitrise without root privileges , your Workspace’s other team members will not have access to the repository on the GitLab instance . Go to the admin area by clicking the little wrench icon on the top menu bar. On the left menu bar, select Applications , then click New Application . In the Name field, enter a name that clearly identifies the application. For the sake of simplicity, we recommend Bitrise . In the Callback URL field, enter https:\/\/app.bitrise.io\/users\/auth\/gitlab\/callback . In the Scopes menu, check api . Set the Confidential option to No . If the newly created app is configured to be confidential, Bitrise won't be able to access it! Click Submit . On the next page, you should find the Application Id and a Secret . You’ll need both to connect to your GitLab instance on bitrise.io . Log in to Bitrise and open the account selector dropdown menu in the top right. Find your Workspace and click the little gear icon next to its name to get to your Workspace's profile page. Select the Self-hosted GitLab option on the left menu bar. Add your self-hosted GitLab credentials: App ID Secret Self-hosted URL You are done! Now you are able to access your privately hosted repositories with Bitrise. " }, 
{ "title" : "Adding a new app from a self-hosted GitLab repository ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-52c72363-9d00-d2f7-b5ad-d1b29dbba64e_UUID-94da6a55-9bb3-2b9d-7ba0-4a49b090c67b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting self-hosted GitLab instances \/ Adding a new app from a self-hosted GitLab repository ", 
"snippet" : "Log in to bitrise.io and click the + symbol on the top menu bar and select Add new app on web UI from the options. Select the Workspace that will be the owner of the app. When prompted to select your Git provider, select GitLab . Select the Self-hosted option. If you haven’t provided your self-hoste...", 
"body" : "Log in to bitrise.io and click the + symbol on the top menu bar and select Add new app on web UI from the options. Select the Workspace that will be the owner of the app. When prompted to select your Git provider, select GitLab . Select the Self-hosted option. If you haven’t provided your self-hosted GitLab credentials to the Workspace before, you can do it at this stage. Click Connect . Once connected, proceed as usual: Adding a new app" }, 
{ "title" : "Apple services connection ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection ", 
"snippet" : "Connect your Bitrise builds to Apple services using either API key authentication or Apple ID authentication in order to manage iOS code signing and deployment. Your Workflow may contain Steps that need information from the Apple service you use, for example, the App Store Connect or the Apple Devel...", 
"body" : "Connect your Bitrise builds to Apple services using either API key authentication or Apple ID authentication in order to manage iOS code signing and deployment. Your Workflow may contain Steps that need information from the Apple service you use, for example, the App Store Connect or the Apple Developer Portal. These two services are supported by the following Steps: Manage iOS Code Signing Deploy to App Store Connect with Deliver (formerly iTunes Connect) Deploy to App Store Connect - Application Loader (formerly iTunes Connect) fastlane To connect these Steps with the Apple service you wish to use while your build runs on Bitrise, you need to provide authentication data to Bitrise and select the established authentication method for your app. You can authenticate with Apple’s official API key or with Apple ID and password. " }, 
{ "title" : "Apple two-factor authentication requirements ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-be4e8549-b5d4-fd4b-b57a-ad7b60ac7345", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple two-factor authentication requirements ", 
"snippet" : "Apple’s two-factor authentication (2FA) provides an extra layer of security on your Apple account. If you have been authenticating with the API key so far, you are not affected by the two-factor authentication requirement. If, however, you have been authenticating with an Apple ID and a password, an...", 
"body" : "Apple’s two-factor authentication (2FA) provides an extra layer of security on your Apple account. If you have been authenticating with the API key so far, you are not affected by the two-factor authentication requirement. If, however, you have been authenticating with an Apple ID and a password, and the new 2FA requirement affects you, then you’ll have to reconnect your Apple Developer Account on the Apple Service connection page of your Bitrise profile. You’ll also have to provide the two-factor authentication\/two-step verification code and an app-specific password as well. Please find the official Apple documentation on how to generate an app-specific password . " }, 
{ "title" : "Steps that require connecting to your Apple Developer account ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-fcc514ce-8e9f-6ecd-873b-8d6563626375", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Steps that require connecting to your Apple Developer account ", 
"snippet" : "The following Steps require connection to Apple services (such as App Store Connect or the Apple Developer Portal). If you’re using any of these Steps, make sure you establish connection with the right method. Steps requiring Apple authentication Steps Connection type Manage iOS Code Signing API key...", 
"body" : "The following Steps require connection to Apple services (such as App Store Connect or the Apple Developer Portal). If you’re using any of these Steps, make sure you establish connection with the right method. Steps requiring Apple authentication Steps Connection type Manage iOS Code Signing API key authentication, Apple ID authentication, API key authentication through Step inputs Xcode Archive & Export for iOS API key authentication, Apple ID authentication, API key authentication through Step inputs Export iOS and tvOS Xcode archive API key authentication, Apple ID authentication, API key authentication through Step inputs Xcode Build for testing for iOS API key authentication, Apple ID authentication, API key authentication through Step inputs fastlane API key authentication, Apple ID authentication, API key or Apple ID authentication through Step inputs Deploy to App Store Connect with Deliver (formerly iTunes Connect) API key authentication, Apple ID authentication, API key or Apple ID authentication through Step inputs Deploy to App Store Connect - Application Loader (formerly iTunes Connect) API key authentication, Apple ID authentication, API key or Apple ID authentication through Step Depending on which authentication you can use in your project, you have the following options: API key authentication: If you can, we recommend you use this authentication method. It does not require two-factor authentication. All it takes is connecting to the Apple services by providing Name , Issuer ID , Key ID and upload a Private Key (.p8) , then selecting an account under the Team tab in your app’s settings. The data you give automatically populates the respective fields of the Steps that work with API key authentication. Apple ID authentication: If you cannot use the API key authentication, you can authenticate with your Apple ID and password. Provide your Apple ID , password , 2FA code and app-specific password then select an account under the Team tab in your app’s settings. The data you give automatically populates the respective fields of the Steps that work with the Apple ID authentication. API key or Apple Id authentication through Step inputs: If you wish to deploy to multiple teams or deploy to a team where authentication is different from the connected one you’ve been using, then you can add your preferred authentication into the Step’s inputs. Some Steps, such as Xcode Archive & Export for iOS, only have an API key authentication override option, while some Steps, like fastlane, have options for both API key and Apple ID Step level authentication override. " }, 
{ "title" : "Apple service permissions ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-436e7843-75b0-a960-ac94-8c9f33f30845", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions ", 
"snippet" : "In order to successfully connect Bitrise to Apple services, you need to set up the right roles and accesses in your Apple account for your Apple ID and your API keys. In order to successfully connect Bitrise to Apple services, you need to set up the right roles and accesses in your Apple account for...", 
"body" : "In order to successfully connect Bitrise to Apple services, you need to set up the right roles and accesses in your Apple account for your Apple ID and your API keys. In order to successfully connect Bitrise to Apple services, you need to set up the right roles and accesses in your Apple account for your Apple ID and your API keys. You must set up the appropriate access rights to be able to: Use automatic code signing. Deploy your app to the App Store. The exact roles and accesses you need depend on a number of factors: your authentication method, whether you use Xcode managed signing, and the details of your app deployment process, among other things. In this guide, we'll list the roles based on the two main authentication methods : API key authentication and Apple ID authentication. " }, 
{ "title" : "Required access with API key authentication ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-ff3e9819-e373-9ac8-b842-97019ffabd28", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with API key authentication ", 
"snippet" : "To use Bitrise Steps with Apple API key authentication, you need to create an App Store Connect API key with the appropriate access level. The appropriate level depends on what you need to do. If, for example, you use Xcode managed signing in your project and wish to export the generated IPA file wi...", 
"body" : "To use Bitrise Steps with Apple API key authentication, you need to create an App Store Connect API key with the appropriate access level. The appropriate level depends on what you need to do. If, for example, you use Xcode managed signing in your project and wish to export the generated IPA file with a Distribution certificate and an App Store provisioning profile, the App Store Connect API key must have Admin access. Table 9, “ contains the required access for automatic code signing. In the table, we grouped code signing actions based on the type of the IPA file we're attempting to export. There are two main types: Development IPA: this is an IPA exported with the development method. Distribution IPA: this is an IPA exported with the app-store , ad-hoc , or enterprise distribution method. Access required for automatic code signing with API key authentication Code signing action Required access with Xcode managed signing turned ON Required access with Xcode managed signing turned OFF Exporting Development IPA. This can include: Creating development provisioning profiles. Deleting development provisioning profiles. Downloading provisioning profiles. Registering and configuring App IDs. Adding device UDIDs Developer Developer Exporting App Store IPA. This can include: Creating development and distribution provisioning profiles. Deleting development and distribution provisioning profiles. Downloading provisioning profiles. Registering and configuring App IDs. Adding device UDIDs Admin Developer Table 10, “ contains the required roles for deploying your app to the App Store. For App Store deployment, the required access depends on how you wish to upload the generated IPA file. You can either: Upload only the IPA without any additional steps. Upload the IPA with metadata and screenshots, and submit the app for review. Access required for App Store deployment with API key authentication App Store deployment actions Required access for API key Uploading a new IPA without any metadata Developer Uploading a new IPA and: Updating app metadata. Uploading screenshots. Submitting the app for App Store review. App Manager " }, 
{ "title" : "Required access with Apple ID authentication ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-39a1db6c-7348-a9d5-cb92-27648e4c5efc_UUID-c5a1e0f7-8ef6-f86a-d14a-0952aa4c2df6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Apple services connection \/ Apple service permissions \/ Required access with Apple ID authentication ", 
"snippet" : "To use Bitrise Steps with Apple ID authentication, you need to make sure that your Apple ID has the appropriate role in your Apple Developer team. Table 11, “ contains the necessary roles for using automatic code signing on Bitrise. In the table, we grouped code signing actions based on the type of ...", 
"body" : "To use Bitrise Steps with Apple ID authentication, you need to make sure that your Apple ID has the appropriate role in your Apple Developer team. Table 11, “ contains the necessary roles for using automatic code signing on Bitrise. In the table, we grouped code signing actions based on the type of the IPA file we're attempting to export. There are two main types: Development IPA: this is an IPA exported with the development method. Distribution IPA: this is an IPA exported with the app-store , ad-hoc , or enterprise distribution method. Read more about the different distribution methods: Creating a signed IPA for Xcode projects. Xcode managed signing If you use Apple ID authentication on Bitrise, Xcode managed signing is automatically turned off in your project. Instead, Bitrise uses its own automatic code signing logic. Roles required for automatic code signing with Apple ID authentication Code signing action Required role Exporting development IPA. This can include: Creating development provisioning profiles. Deleting development provisioning profiles. Downloading provisioning profiles. Registering and configuring App IDs. Adding device UDIDs App Manager Exporting an App Store IPA. This can include: Creating development and distribution provisioning profiles. Deleting development and distribution provisioning profiles. Downloading provisioning profiles. Registering and configuring App IDs. Adding device UDIDs App Manager Table 12, “ contains the required roles for deploying your app to the App Store. For App Store deployment, the required access depends on how you wish to upload the generated IPA file. You can either: Upload only the IPA without any additional steps. Upload the IPA with metadata and screenshots, and submit the app for review. Roles required for App Store deployment with API key authentication App Store deployment actions Required role for Apple ID Uploading a new IPA without any metadata Developer Uploading a new IPA and: Updating app metadata. Uploading screenshots. Submitting the app for App Store review. App Manager " }, 
{ "title" : "Connecting to an Apple service with API key ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-020a7e39-882c-f79a-5844-67346e61f075", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key ", 
"snippet" : "Connect to an Apple service with API key to manage iOS code signing and deployment. The API key authentication is the recommended way when connecting Bitrise to Apple Services. Connecting to an Apple service (such as the App Store Connect or the Apple Developer Portal) with the API key requires gene...", 
"body" : "Connect to an Apple service with API key to manage iOS code signing and deployment. The API key authentication is the recommended way when connecting Bitrise to Apple Services. Connecting to an Apple service (such as the App Store Connect or the Apple Developer Portal) with the API key requires generating an API key, adding the authentication data on Bitrise, and assigning the key to the app. The API key authentication is the recommended way when connecting Bitrise to Apple Services. You can have 50 API keys added to the Apple Services connection page but your app can use only one. No Step input modifications needed With this method, all Step inputs related to authenticating with an Apple API key are automatically populated once the connection is set up. You don't have to manually modify those Step input fields at all. " }, 
{ "title" : "Adding API key authentication data on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-c9346b39-eb25-93ad-bb5f-6536d9cb1ae3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Adding API key authentication data on Bitrise ", 
"snippet" : "There are two ways to add API key authentication data to Bitrise: On your Profile settings page. On the Integrations page of the App settings page. Profile page App settings page On App Store Connect , generate a new API key with Admin access under Users and Access . You will need the name of the ke...", 
"body" : "There are two ways to add API key authentication data to Bitrise: On your Profile settings page. On the Integrations page of the App settings page. Profile page App settings page On App Store Connect , generate a new API key with Admin access under Users and Access . You will need the name of the key, the key ID and the issuer ID on Bitrise. Admin access You must use the Admin role for the new App Store Connect API key! The Step and your build will fail if you set a different role. In the upper right corner, open the account selector dropdown menu. Select the Account settings option. On the left, select Apple Service connection . Click Add API key . Fill out all required fields: Name : Your generated API key's name. Issuer ID : To get your issuer ID, log in to App Store Connect and select Users and Access , then select the API Keys tab.The issuer ID appears near the top of the page. To copy the issuer ID, click Copy next to the ID. Key ID : When you successfully generate a new API key, App Store Connect shows you the key ID. Upload the .p8 file: either drag and drop it to the upload field, or click it and select the file from your computer. Click Connect . On App Store Connect , generate a new API key with Admin access under Users and Access . You will need the name of the key, the key ID and the issuer ID on Bitrise. Admin access You must use the Admin role for the new App Store Connect API key! The Step and your build will fail if you set a different role. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Select the Stores tab. Find the App Store Connect section. Find the API key authentication (recommended) option. Click Add API key . Fill out all required fields: Name : Your generated API key's name. Issuer ID : To get your issuer ID, log in to App Store Connect and select Users and Access , then select the API Keys tab.The issuer ID appears near the top of the page. To copy the issuer ID, click Copy next to the ID. Key ID : When you successfully generate a new API key, App Store Connect shows you the key ID. Upload the .p8 file: either drag and drop it to the upload field, or click it and select the file from your computer. Click Connect . Once done, you can now assign this API key to any app that you have access to on this account. From then, the app will use that API connection to access App Store Connect. " }, 
{ "title" : "Assigning API key authentication to your app ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-020a7e39-882c-f79a-5844-67346e61f075_UUID-dd8c7216-7e0a-6a21-0098-e2f1e8ddb9d3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with API key \/ Assigning API key authentication to your app ", 
"snippet" : "To use API key authentication for Apple services for your app , you must: Add an API key on Bitrise : You can add multiple API keys to the same account. Assign an API key to your app: Each app can only have one API key assigned to it. To assign the API key to the app: Open your app on Bitrise with a...", 
"body" : "To use API key authentication for Apple services for your app , you must: Add an API key on Bitrise : You can add multiple API keys to the same account. Assign an API key to your app: Each app can only have one API key assigned to it. To assign the API key to the app: Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Select the Stores tab. Find the App Store Connect section. Find the API key authentication (recommended) option. Click Add API key if you have no API key set up or Change API key if an existing one has already been assigned. Multiple apps with the same API key With the Add API key button, you can add a new App Store Connect API key to your Bitrise account. Other apps you have access to can use this API key, too. If you are changing an existing API key, select the API key you need from the dropdown menu in the dialog box. You will only see the API key or keys that are registered to your Bitrise account. The Step is now able to connect to the App Store Connect or the Apple Developer Portal during your build. " }, 
{ "title" : "Connecting to an Apple service with Apple ID ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID ", 
"snippet" : "Connect to an Apple service with Apple ID to manage iOS code signing and deployment. Connecting to an Apple service (such as the App Store Connect or the Apple Developer Portal) with the Apple ID requires that you first add your Apple ID and password on the Apple Service connection page, then select...", 
"body" : "Connect to an Apple service with Apple ID to manage iOS code signing and deployment. Connecting to an Apple service (such as the App Store Connect or the Apple Developer Portal) with the Apple ID requires that you first add your Apple ID and password on the Apple Service connection page, then select an app to use Apple ID authentication while the build is running. If you cannot use the API key authentication, we recommend you try this option. Please note that you can only connect one Apple ID to Bitrise. Apple accounts with two-factor authentication enabled If two-factor authentication is enabled on your Apple account, you will have to provide the App-specific password during this process. Learn how to generate an app-specific password on the Security section of your Apple ID account page . " }, 
{ "title" : "Adding Apple ID authentication data on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-c2607cb6-918c-9a4b-389a-703458ebf025", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Adding Apple ID authentication data on Bitrise ", 
"snippet" : "In the upper right corner, open the account selector dropdown menu. Select the Account settings option. On the left menu bar, select Apple Service connection . Click the Add connection button. Provide your Apple ID and Password in the popup window. Click Connect . Enter your verification code in the...", 
"body" : "In the upper right corner, open the account selector dropdown menu. Select the Account settings option. On the left menu bar, select Apple Service connection . Click the Add connection button. Provide your Apple ID and Password in the popup window. Click Connect . Enter your verification code in the Two factor authentication window. Add the app-specific password . Click Verify to continue. You will be prompted to provide your verification code. Your authentication expires in 30 days and you will have to authenticate again. When that happens, go to the Apple Service connection page, it will automatically ask for the two-factor authentication (2FA) code to authenticate again. There will be a list of the Apple Developer accounts that you have defined. To the far right of the Apple ID connection, there are 3 dots. Click the dots and select Re-authenticate ( 2SA\/2FA ). Continue with Assigning an Apple Developer Account for your app. " }, 
{ "title" : "Assigning Apple ID authentication to your app ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-32beb308-2689-caff-687f-b3e68afc9c5a_UUID-232a3d0e-df26-cad6-f9ec-1e325e2e38e4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple service with Apple ID \/ Assigning Apple ID authentication to your app ", 
"snippet" : "Connecting to an Apple service (such as the App Store Connect or the Apple Developer Portal) with Apple ID authentication requires that you first add your Apple service authentication data on bitrise.io and then assign your Apple credentials to the app. With this method, you don't have to worry abou...", 
"body" : "Connecting to an Apple service (such as the App Store Connect or the Apple Developer Portal) with Apple ID authentication requires that you first add your Apple service authentication data on bitrise.io and then assign your Apple credentials to the app. With this method, you don't have to worry about authentication when using Steps that connect to Apple services: all Step inputs related to Apple authentication are automatically filled in. Can't assign other users' Apple credentials You can only set your own user account's Apple ID authentication data to an app. If you have an app that needs someone else's Apple credentials, that user must log in and make the change themselves. To assign Apple ID authentication data to your app: Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Scroll down to the Connection to Apple services section. Find the Apple ID authentication option. Click Change to <username> . If you can't find this option, you probably haven't set up your Apple credentials on bitrise.io. Note that changing the selected user removes the previous user. If you need to use the previous user's Apple credentials again, that user must log in and change it themselves. Test connection By clicking Test connection , you can check whether Bitrise can access Apple services using the provided credentials. Steps are now able to connect to an Apple service during your build. " }, 
{ "title" : "Connecting to an Apple Service with Step inputs ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs ", 
"snippet" : "If you want to deploy to a team where authentication is different from the connected one you’ve been using, then you can add your preferred authentication into the Step’s inputs. If you wish to deploy to multiple teams or deploy to a team where authentication is different from the connected one you’...", 
"body" : "If you want to deploy to a team where authentication is different from the connected one you’ve been using, then you can add your preferred authentication into the Step’s inputs. If you wish to deploy to multiple teams or deploy to a team where authentication is different from the connected one you’ve been using, then you can add your preferred authentication into the Step’s inputs. This will override the connection previously set in Bitrise Developer Connection . This way connection is restricted to the given Step where you set up authentication. 2FA and Apple ID authentication If 2FA is required for your Apple ID, then you must use the Apple ID authentication with the Deploy to App Store Connect with Deliver (formerly iTunes Connect) and the fastlane Steps instead of authenticating through Step inputs. " }, 
{ "title" : "Authenticating in a Step with API key ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-6f89125d-5856-f5ad-990e-cd07541ba6b7", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with API key ", 
"snippet" : "API-key & Apple ID API-key only Steps Add one of the following Steps to your Workflow: fastlane Deploy to App Store Connect with Deliver (formerly iTunes Connect) Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Either API key or Apple ID authentication in Step inputs You c...", 
"body" : "API-key & Apple ID API-key only Steps Add one of the following Steps to your Workflow: fastlane Deploy to App Store Connect with Deliver (formerly iTunes Connect) Deploy to App Store Connect - Application Loader (formerly iTunes Connect) Either API key or Apple ID authentication in Step inputs You can only add one type of authentication into the Step, either the API key one or the Apple ID one. In either case, make sure the Bitrise Apple Developer Connection input is set to off , otherwise the Step will go with the configured authentication method found in Apple Service connection (unless you decide to remove the connection on the Teams tab). Upload the API key to the GENERIC FILE STORAGE section of the Code Signing & Files tab. Set the Bitrise Apple Developer Connection input to off . Set the Issuer ID as a secret Environment Variable in the respective field of the Step. Configure the API Key path and API Issuer inputs. Save your changes and run a new build. Add one of the following Steps to your Workflow: Manage iOS Code Signing Xcode Archive & Export for iOS Export iOS and tvOS Xcode archive Xcode Build for testing for iOS Upload your App Store Connect API private key file (.p8 file) to the  Generic File Storage  in the  Code Signing & Files  tab. Set the Automatic code signing method to api-key . Set the following Step inputs under the  App Store Connect connection override input group: App Store Connect API private key : Local path or remote URL to the private key (.p8 file) for App Store Connect API. Set this input to the automatically generated Env Var connected to the App Store Connect API private key file (.p8 file) you uploaded to the Generic File Storage in step 2. App Store Connect API key ID : Private key ID used for App Store Connect authentication. App Store Connect API issuer ID : Private key issuer ID used for App Store Connect authentication. " }, 
{ "title" : "Authenticating in a Step with Apple ID and password ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-66be72ab-615d-f0f4-9315-0b6a0cc19d74_UUID-5dee6cba-c181-51db-4357-2c75fe1cd747", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Connecting to an Apple Service with Step inputs \/ Authenticating in a Step with Apple ID and password ", 
"snippet" : "Either API key or Apple ID authentication in Step inputs You can only add one type of authentication into the Step, either the API key one or the Apple ID one. In either case, make sure the Bitrise Apple Developer Connection input is set to off , otherwise the Step will go with the configured authen...", 
"body" : "Either API key or Apple ID authentication in Step inputs You can only add one type of authentication into the Step, either the API key one or the Apple ID one. In either case, make sure the Bitrise Apple Developer Connection input is set to off , otherwise the Step will go with the configured authentication method found in Apple Service connection (unless you decide to remove the connection on the Teams tab). Add the Step to your Workflow. Set the Apple ID and Password . Set the Bitrise Apple Developer Connection input to off . Save your changes and run a new build. " }, 
{ "title" : "Steps requiring Apple authentication ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43162-connecting-to-services.html#UUID-336f0139-fd1b-ec95-f2ef-5ae885d04ba8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Connecting to services \/ Steps requiring Apple authentication ", 
"snippet" : "Check out all the Bitrise Steps that require a connection to an Apple service using either an API key or an Apple ID. In this guide we list all the Steps that require authentication and the authentication methods that you can choose from depending on your app’s requirement....", 
"body" : "Check out all the Bitrise Steps that require a connection to an Apple service using either an API key or an Apple ID. In this guide we list all the Steps that require authentication and the authentication methods that you can choose from depending on your app’s requirement. " }, 
{ "title" : "SAML SSO in Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise ", 
"snippet" : "Velocity and Enterprise users can create and log in to a Bitrise Workspace using their own SAML SSO provider’s system to provide an extra layer of security. Workspace members can log in to a Bitrise Workspace using their own SAML SSO provider’s system. With SAML SSO, Workspaces will be able to apply...", 
"body" : "Velocity and Enterprise users can create and log in to a Bitrise Workspace using their own SAML SSO provider’s system to provide an extra layer of security. Workspace members can log in to a Bitrise Workspace using their own SAML SSO provider’s system. With SAML SSO, Workspaces will be able to apply the security guidelines of their SAML SSO provider when accessing their Bitrise Workspace. Managing role level access via SSO is not supported Bitrise does not support user authorization management (assigning roles) via SSO. Bitrise does support user authentication (signup\/login) via SSO. Before connecting SAML SSO to your Workspace, make sure: You have a SAML SSO provider (Identity Provider) that you can connect Bitrise to and the administrator to the SAML SSO provider is at hand. Your account on Bitrise has a Velocity or an Enterprise Build Platform plan . If it doesn’t have a Workspace, go ahead and create one. Setting up SAML SSO is the same for existing and brand new Workspaces on Bitrise. Only the Workspace owner can set up SAML SSO to a Bitrise Workspace. " }, 
{ "title" : "Navigating to the Single Sign-On page of Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-4cde1227-4e4d-ef8b-5cba-5518473d80ab", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Navigating to the Single Sign-On page of Bitrise ", 
"snippet" : "If you are a Workspace owner on Bitrise, you will have to use the Single Sign-On tab to set up a SAML SSO connection between your SAML SSO provider and your Bitrise Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings ....", 
"body" : "If you are a Workspace owner on Bitrise, you will have to use the Single Sign-On tab to set up a SAML SSO connection between your SAML SSO provider and your Bitrise Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left menu bar, click Single Sign-On which will take you to the Single Sign-On page. Continue with setting up SAML SSO for your Workspace on Bitrise. " }, 
{ "title" : "Authorizing SAML SSO ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-139b962c-b2c6-db40-2cf8-2b0556a07c8e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Authorizing SAML SSO ", 
"snippet" : "Once the Workspace owner has set up SAML SSO, everyone in the Workspace has to authorize SAML SSO before logging in to their Workspace via SAML SSO. Make sure you’re logged into Bitrise in the usual way. Use the same browser window to continue. Bitrise sends a verification e-mail to all Workspace me...", 
"body" : "Once the Workspace owner has set up SAML SSO, everyone in the Workspace has to authorize SAML SSO before logging in to their Workspace via SAML SSO. Make sure you’re logged into Bitrise in the usual way. Use the same browser window to continue. Bitrise sends a verification e-mail to all Workspace members. By clicking the Log In via SAML SSO button or using the provided URL, Workspace members can authorize themselves for SAML SSO login. The email also shows the Workspace owner’s email address (should you need to contact them.) Click the Log In via SAML SSO button or copy-paste the URL to a NEW TAB of the same browser. You’re directed to Bitrise to Allow “Workspace name” to sign you in page. Click Authorize if you trust the Workspace to control your Bitrise account sign-in process. If you’re already logged in to your SAML SSO provider, you’ll be automatically taken to your Bitrise Dashboard. If you’re not, you’ll be prompted to log in on your SAML SSO provider’s site, and then taken to your Bitrise Dashboard. Click Don’t Allow if the invitation email is from an untrusted source. Note that if you are using a different non-matching email address, you will get the below error message. Make sure you log in with the right email address both on Bitrise, as well as on your SSO provider site. If all went well, you should be landing on our Bitrise Dashboard. " }, 
{ "title" : "Joining a SAML SSO Workspace as a new member ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-4be0cb1b-b1d0-0c10-6835-2599fe26f7e3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Joining a SAML SSO Workspace as a new member ", 
"snippet" : "If a Bitrise Workspace owner invites you to a Workspace, you should get an email invitation to join the Workspace via SAML SSO. Let’s see how! Go to your mailbox and find our email titled Saml invitation instructions . Click the Sign in via SSO button or copy the provided URL and paste it into a new...", 
"body" : "If a Bitrise Workspace owner invites you to a Workspace, you should get an email invitation to join the Workspace via SAML SSO. Let’s see how! Go to your mailbox and find our email titled Saml invitation instructions . Click the Sign in via SSO button or copy the provided URL and paste it into a new browser. Our Almost there page appears. Provide a Username you would like to use in your Bitrise Workspace. Please use only letters, numbers, underscores (_), dashes (-) and dots (.) in your username. The Email field is non-editable. Click the Finish Sign-up button. If all went well, you’re landing on Bitrise and can add your first app. " }, 
{ "title" : "Checking SAML SSO statuses on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-497623fd-7d49-277a-f6c0-03b852f4be1e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Checking SAML SSO statuses on Bitrise ", 
"snippet" : "Now that the Workspace owner has set up SAML SSO for the Workspace, all Workspace members (including the Workspace owner) can check their other Workspace member’s SAML SSO statuses on the Team tab. Accessing the Single Sign-on tab The Single Sign-On tab is only available for the Workspace owner. The...", 
"body" : "Now that the Workspace owner has set up SAML SSO for the Workspace, all Workspace members (including the Workspace owner) can check their other Workspace member’s SAML SSO statuses on the Team tab. Accessing the Single Sign-on tab The Single Sign-On tab is only available for the Workspace owner. There are two kinds of SAML SSO statuses on Bitrise. SAML IS ENABLED: Login via SAML SSO is enabled. SAML IS DISABLED: The Workspace member has not enabled the SAML SSO connection yet. To enable it, the Workspace member has to follow the instructions in the verification email from Bitrise. Go to your Workspace’s profile page. Select Team from the left menu. Go to the Members tab to check the Workspace member’s SAML status. " }, 
{ "title" : "Enforcing SAML SSO on a Workspace ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-e09eab0d-af5c-93d9-f413-bb1a9cdc468f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Enforcing SAML SSO on a Workspace ", 
"snippet" : "Enforcing SAML SSO on your Workspace provides an extra layer of security: you can enforce your own security guidelines to your Bitrise Workspace (for example, password format requirements, two-factor authentication). Enforced SAML SSO Enforcing SAML SSO in your Workspace makes SAML SSO the only way ...", 
"body" : "Enforcing SAML SSO on your Workspace provides an extra layer of security: you can enforce your own security guidelines to your Bitrise Workspace (for example, password format requirements, two-factor authentication). Enforced SAML SSO Enforcing SAML SSO in your Workspace makes SAML SSO the only way for logging in\/signing up to the Workspace. One Workspace only You cannot be a member in two Workspaces that enforced SAML SSO on Bitrise. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . Go to your Workspace’s Single Sign On tab. Check the Enforce SAML SSO checkbox to enforce SAML SSO. Unable to enforce SAML SSO A Workspace owner cannot enforce SAML SSO on the Workspace if Workspace members have not enabled their SAML SSO connection yet or they enabled SAML SSO with another Workspace that enforces SAML SSO. Click Save changes . Now Workspace members can only log in via SAML SSO. " }, 
{ "title" : "Adding a new user to a Workspace with enforced SAML SSO ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-495ca1ae-c5e8-f16d-579d-f580e1a85e9e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Adding a new user to a Workspace with enforced SAML SSO ", 
"snippet" : "Once SAML SSO is enforced on a Workspace, you can still add new users to it. But in this case, it's important to differentiate between the two types of new users: Users with existing accounts on Bitrise : We recommend that the Workspace admin turns off the enforced SSO and invites the user to the Wo...", 
"body" : "Once SAML SSO is enforced on a Workspace, you can still add new users to it. But in this case, it's important to differentiate between the two types of new users: Users with existing accounts on Bitrise : We recommend that the Workspace admin turns off the enforced SSO and invites the user to the Workspace. The invited Bitrise user has to go through the invitation process and enable their SSO connection. Once that is done, the Workspace admin can turn the Enforce SSO switch back on. Users who are new to Bitrise and haven't registered an account yet : The Workspace admin doesn't need to turn off enforced SSO: simply invite the new user who should then complete the sign-up procedure as described: Joining a SAML SSO Workspace as a new member. Alternatively, the new user can go directly to the sign-up page , and click the SAML button then follow the instructions to achieve the same goal. " }, 
{ "title" : "Logging in via SAML SSO ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-a8ffc63e-7ab0-b63e-96d8-938f8c6adfc6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Logging in via SAML SSO ", 
"snippet" : "If the SAML SSO connection has been already added to your Workspace and you have enabled your SAML SSO connection too, you can easily log in to your Bitrise account without having to use a password and email address. Expired SAML SSO certificate If your SAML SSO certificate has expired, and you cann...", 
"body" : "If the SAML SSO connection has been already added to your Workspace and you have enabled your SAML SSO connection too, you can easily log in to your Bitrise account without having to use a password and email address. Expired SAML SSO certificate If your SAML SSO certificate has expired, and you cannot log into Bitrise through SAML SSO, you can contact our Support team to help you log in. Click Login via SSO on our login page . You will be redirected to the Initiate Single Sign-On page . Provide your Workspace name in the Bitrise Workspace’s Name field. Click Continue with SSO to log in. If you’re logged in on your SSO provider site, you will be automatically landing on your Bitrise Dashboard. If you’re logged out on your SSO provider site, you will be redirected there to log in. After the successful login, you will be redirected to your Bitrise dashboard. " }, 
{ "title" : "Disabling a Workspace's SAML SSO ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-c8a280f3-ccbe-f1fd-117b-c0976054bec0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Disabling a Workspace's SAML SSO ", 
"snippet" : "If you disable SAML SSO, Workspace members will be able to sign in with the regular sign-in procedure. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . Go to the Single Sign-On tab. If SAML SSO has been enforced on the Works...", 
"body" : "If you disable SAML SSO, Workspace members will be able to sign in with the regular sign-in procedure. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . Go to the Single Sign-On tab. If SAML SSO has been enforced on the Workspace before, toggle Enforce under Enforce SAML SSO off. Click Disable SSO . A confirmation pop-up appears where you can confirm\/cancel your action. Please note that by clicking the Disable SSO button, you will disable SAML SSO for all Workspace members. Once it’s done, Workspace members will be able to log in through their normal Bitrise credentials. You will receive an SSO has been disabled email from Bitrise (letsconnect@bitrise.io) which confirms the disabled SAML SSO for the Workspace. " }, 
{ "title" : "Disabling a Workspace member's SAML SSO ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-8bf98ced-2a6d-fd4f-4fae-5fc5bbd49512", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Disabling a Workspace member's SAML SSO ", 
"snippet" : "If you are a Workspace owner, you can disable a Workspace member’s SAML SSO connection to the Workspace on Bitrise. There are two ways to do so: Remove the user from the Workspace. Remove the user from the SAML SSO provider which means the user would not be able to log in with SAML SSO any more....", 
"body" : "If you are a Workspace owner, you can disable a Workspace member’s SAML SSO connection to the Workspace on Bitrise. There are two ways to do so: Remove the user from the Workspace. Remove the user from the SAML SSO provider which means the user would not be able to log in with SAML SSO any more. " }, 
{ "title" : "Updating SAML SSO configuration ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-aadae04b-8b51-3d8f-0c55-6323223e7b29_UUID-0db7d33a-756c-e10c-dc08-b345e19f09a5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Updating SAML SSO configuration ", 
"snippet" : "You can update a Workspace’s configured SAML SSO using the Configure SAML SSO provider button on the Single Sign-On page. This comes in handy if your SAML SSO provider’s certificate has expired and you wish to insert the new certificate on Bitrise. Another use case is, for example, if SAML SSO has b...", 
"body" : "You can update a Workspace’s configured SAML SSO using the Configure SAML SSO provider button on the Single Sign-On page. This comes in handy if your SAML SSO provider’s certificate has expired and you wish to insert the new certificate on Bitrise. Another use case is, for example, if SAML SSO has been configured a while ago and now you wish to check the current configuration details. Accessing the Update SSO button As with other SAML SSO configurations, only the Workspace owner can access and use the Update SSO button. As the owner of the Workspace, click your Workspace’s Single Sing-On tab. Click the Configure SAML SSO provider button. Now you can access the configuration details of Workspace’s SAML SSO. Make the changes and click Save changes . From now on any SAML SSO request will use the new configuration automatically. " }, 
{ "title" : "Setting up Google SSO for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise ", 
"snippet" : "Add SAML SSO to your Bitrise Workspace using Google Workspace. This guide provides step-by-step instructions on setting up Bitrise as a SAML application on Google Workspace. SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML ...", 
"body" : "Add SAML SSO to your Bitrise Workspace using Google Workspace. This guide provides step-by-step instructions on setting up Bitrise as a SAML application on Google Workspace. SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decide to downgrade, you will lose this feature. All Workspace members will receive an email about the downgrade and you’ll have two weeks to re-upgrade if you wish to use SAML SSO in your Workspace again. Before connecting SAML SSO to your Workspace: Make sure you have a Google administrator account where you can add Bitrise as a SAML app. The Google Workspace administrator can help setting up SAML SSO on Google Workspace. Be aware that only the Workspace owner can set up SAML SSO to a Bitrise Workspace. Your account on Bitrise has a Workspace with the Velocity or Enterprise plan . You'll need to: Get configuration information from Google Workspace and Bitrise. Enable the Bitrise app for a group or an organizational unit. " }, 
{ "title" : "Getting configuration information from Google Workspace and Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-de5e723b-c807-4ddf-2972-9c3a6e06566e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Getting configuration information from Google Workspace and Bitrise ", 
"snippet" : "Sign into your Google Admin Console. Select Apps on the Admin Console page. On the Apps page, click SAML apps . On the Web and mobile apps page, click the Add apps button, and select the Add custom SAML app option from the dropdown. On the App details page add Bitrise as your app name. Please note i...", 
"body" : "Sign into your Google Admin Console. Select Apps on the Admin Console page. On the Apps page, click SAML apps . On the Web and mobile apps page, click the Add apps button, and select the Add custom SAML app option from the dropdown. On the App details page add Bitrise as your app name. Please note it must be Bitrise as no other format is accepted. Click Continue . On the Getting Identity Provider details page: Copy the SSO URL and paste it on the SAML SSO provider Single Sing-On URL (SSO URL) on Bitrise. Copy the whole content of the Certificate field and paste it in the SAML SSO provider certificate field of Bitrise. You can upload the Certificate from your local computer too. While you are in Bitrise, click the Copy Link button to copy the Assertion Consumer Service URL (ACS URL) . We will need it on Google Workspace in a second. Let’s NOT click the Configure SSO button just now! Let’s head back to the Getting Identity Provider details page of Google Workspace. Click Continue . On the Service provider details page: Paste the Assertion Consumer Service URL (ACS URL) of Bitrise in the ACS URL field on Google Workspace. (Remember, we got the link at Step 7.) Type Bitrise in the Entity ID field. Please note it must be Bitrise as no other format is accepted. Tick the Signed response checkbox under START URL (optional) . Click CONTINUE . Click the Configure SSO button on Bitrise. On Google Workspace’s Attribute mapping page, click Finish - you do not have to configure anything here. " }, 
{ "title" : "Enabling Bitrise app for a group or an organizational unit ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-e6746462-fa46-ffb9-9572-dfc7a4cb0549_UUID-70891c9c-c28f-4c32-1d5a-f7b22cb9d74b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Google SSO for Bitrise \/ Enabling Bitrise app for a group or an organizational unit ", 
"snippet" : "All there is left to do on G Suite is to enable the newly created Bitrise app for a group or organization of your choice. Go to the Web and mobile apps page on G Suite and select Bitrise from the Apps list. Click User access to get to the Service status page. Select ON for everyone and hit Save ....", 
"body" : "All there is left to do on G Suite is to enable the newly created Bitrise app for a group or organization of your choice. Go to the Web and mobile apps page on G Suite and select Bitrise from the Apps list. Click User access to get to the Service status page. Select ON for everyone and hit Save . " }, 
{ "title" : "Setting up AD FS SSO for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise ", 
"snippet" : "Add SAML SSO to your Bitrise Workspace using Microsoft Active Directory Federation Services. This guide provides step-by-step instructions on setting up SAML SSO using Microsoft Active Directory Federation Services (AD FS). SAML SSO restrictions SAML SSO is only available for a Workspace with the Ve...", 
"body" : "Add SAML SSO to your Bitrise Workspace using Microsoft Active Directory Federation Services. This guide provides step-by-step instructions on setting up SAML SSO using Microsoft Active Directory Federation Services (AD FS). SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decide to downgrade, you will lose this feature. All Workspace members will receive an email about the downgrade and you’ll have two weeks to re-upgrade if you wish to use SAML SSO in your Workspace again. Before connecting SAML SSO to your Workspace: Make sure the AD FS administrator is at hand during the SAML SSO configuration process. Be aware that only the Workspace owner can set up SAML SSO to a Bitrise Workspace. Your account on Bitrise has a Workspace with the Velocity or Enterprise plan . In this tutorial we will be jumping back and forth between Bitrise and AD FS so it is recommended that both tools are available during this process. To configure SAML SSO with AD FS, you'll need to: Add the Identity provider sign-on URL from AD FS on Bitrise . Export a certificate generated by AD FS and add it on Bitrise . Add Bitrise as a relying party trust to AD FS . Configure claim rules . " }, 
{ "title" : "Adding the identity provider sign-on URL ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-2006855c-9862-483c-1936-2069a6093eed", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding the identity provider sign-on URL ", 
"snippet" : "Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . Go to the Single Sign-on tab. Add the Identity provider sign-on URL from AD FS in the SAML SSO provider Single Sign-On URL (SSO URL) field. For example, a valid value is https...", 
"body" : "Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . Go to the Single Sign-on tab. Add the Identity provider sign-on URL from AD FS in the SAML SSO provider Single Sign-On URL (SSO URL) field. For example, a valid value is https:\/\/<AD FS URL>.com\/adfs\/ls . " }, 
{ "title" : "Exporting an AD FS certificate ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-21ee6750-1150-cc58-58f6-69935e84aab7", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Exporting an AD FS certificate ", 
"snippet" : "You have to add a certificate generated by AD FS to the SAML SSO provider certificate field of the Single Sign-On page on Bitrise. If you’ve already created a certificate on AD FS, you can export it in PEM format from the AD FS server. If you haven’t created one yet, follow the instructions: Obtain ...", 
"body" : "You have to add a certificate generated by AD FS to the SAML SSO provider certificate field of the Single Sign-On page on Bitrise. If you’ve already created a certificate on AD FS, you can export it in PEM format from the AD FS server. If you haven’t created one yet, follow the instructions: Obtain and Configure TS and TD Certificates for AD FS . In Server Manager , click Tools , and select AD FS Management . Select the Certificates folder on the left menu pane. Click a certificate under Token-signing . This brings up the Certificates window. Click Details tab on the Certificate page. Hit Next on the Certificate Export Wizard window. Select the Base-64 encoded X.509 (.CER) the export file format. Click Next . Give it a name in the File name field and hit Save . Have a final look at your certificate settings. If you need to modify any of those, click the backward arrow next to Certificate Export Wizard . Otherwise, click Finish . Make sure you leave the AD FS window open as you will need it in a minute. Open the exported certificate by a text editor and copy\/paste its content to the SAML SSO provider certificate field or upload the file itself from your local computer. Save the settings by clicking Configure SSO on Bitrise. Let’s continue the SAML SSO configuration on AD FS by adding Bitrise. " }, 
{ "title" : "Adding Bitrise as a relying party trust to AD FS ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-c508edfd-be98-e02b-c337-a24b9e0f19ea", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Adding Bitrise as a relying party trust to AD FS ", 
"snippet" : "Once you are finished with exporting the certificate, you can continue with adding Bitrise as a relying party trust to AD FS . The Add Relying Party Trust Wizard guides you through the steps. On AD FS, click Relying Party Trust on the left menu bar, then click Relying Party Trust . Select Add Relyin...", 
"body" : "Once you are finished with exporting the certificate, you can continue with adding Bitrise as a relying party trust to AD FS . The Add Relying Party Trust Wizard guides you through the steps. On AD FS, click Relying Party Trust on the left menu bar, then click Relying Party Trust . Select Add Relying Party Trust under Actions . On the Welcome page, select the Claims aware option and hit Start . On the Select Data Source page, click the Enter data about the relying party manually option on the bottom of the page. Click Next . On the Specify Display Name page, add a Display name, for example MyCorp . Click Next . Specify a token encryption certificate on the Configure Certificate page is optional. Click Next . On the Configure UR L page, select Enable support for the SAML 2.0 WebSSO protocol and copy paste the Assertion Consumer Service URL (ACS URL) from Bitrise to the Relying party SAML 2. 0 SSO service URL field on AD FS. Click Next . On the Configure Identifiers page, add Bitrise in the Relying party trust identifier field. Click Add , then hit Next . Do not modify the default access control policy on the Choose Access Control Policy page so that everyone can access this SAML SSO connection. Click Next . On the Ready to Add Trust page, review the settings and click Next . On the Finish page, tick the checkbox to edit claims issuance policy for Bitrise. Click Close . On AD FS, click Relying Party Trust on the left menu bar, then click Relying Party Trust . Select Add Relying Party Trust under Actions . On the Welcome page, select the Claims aware option and hit Start . On the Select Data Source page, click the Enter data about the relying party manually option on the bottom of the page. Click Next . On the Specify Display Name page, add a Display name, for example MyCorp . Click Next . Specify a token encryption certificate on the Configure Certificate page is optional. Click Next . On the Configure UR L page, select Enable support for the SAML 2.0 WebSSO protocol and copy paste the Assertion Consumer Service URL (ACS URL) from Bitrise to the Relying party SAML 2. 0 SSO service URL field on AD FS. Click Next . On the Configure Identifiers page, add Bitrise in the Relying party trust identifier field. Click Add , then hit Next . Do not modify the default access control policy on the Choose Access Control Policy page so that everyone can access this SAML SSO connection. Click Next . On the Ready to Add Trust page, review the settings and click Next . On the Finish page, tick the checkbox to edit claims issuance policy for Bitrise. Click Close . " }, 
{ "title" : "Configuring claim rules ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-f4e3854b-0548-5b54-0cec-e289d120ae32_UUID-bb90ca91-8ed6-df95-d070-a8691a9f1ce3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up AD FS SSO for Bitrise \/ Configuring claim rules ", 
"snippet" : "On the Edit Claim Issuance Policy page, click the Add Rule button and hit OK . Create a Send LDAP Attributes as Claims claim rule and click Next . On the Configure Claim Rule page: Add a rule name, for example Send E-mail, in the Claim rule name field. Select an Attribute Store which is most likely ...", 
"body" : "On the Edit Claim Issuance Policy page, click the Add Rule button and hit OK . Create a Send LDAP Attributes as Claims claim rule and click Next . On the Configure Claim Rule page: Add a rule name, for example Send E-mail, in the Claim rule name field. Select an Attribute Store which is most likely the Active Directory. In the Mapping of LDAP attributes to outgoing claim types field select E-mail Addresses. Click Finish . Add another new rule that turns an E-mail to a formatter NameID. To do so, click Add rule in the Edit Claim Issuance Policy page again. On the Select Rule Template , select Transform an Incoming Claim option in the Claim rule template dropdown. Click Next . Give a name to the new rule, for example, Transform E-mail . Select E-Mail Address as the Incoming Claim Type . Select NameId as the Outgoing claim type. Choose Email as the Outgoing name ID format . Hit OK to finish the process. " }, 
{ "title" : "Setting up Azure AD SSO for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise ", 
"snippet" : "Add SAML SSO to your Bitrise Workspace using Azure AD. SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decide to downgrade, you will lose this feature. All Workspace members w...", 
"body" : "Add SAML SSO to your Bitrise Workspace using Azure AD. SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decide to downgrade, you will lose this feature. All Workspace members will receive an email about the downgrade and you’ll have two weeks to re-upgrade if you wish to use SAML SSO in your Workspace again. Before connecting SAML SSO to your Workspace: Make sure an Azure AD administrator who is logged into Azure AD is at hand. Be aware that only the Workspace owner can set up SAML SSO to a Bitrise Workspace. Your account on Bitrise has a Workspace with the Velocity or Enterprise plan . You will need to: Add Bitrise to Azure AD as a new application . Add users and groups to the Bitrise app on Azure AD . Set up SAML SSO between Bitrise and Azure AD . " }, 
{ "title" : "Adding Bitrise to Azure AD as a new application ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-2b28c9c0-a414-77f8-3856-45a4948cba07", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding Bitrise to Azure AD as a new application ", 
"snippet" : "Log into Microsoft Azure as an admin. Click the Azure Active Directory icon on the Azure services page. Click Enterprise applications under Manage . Click New Application to add Bitrise as a new app to your account. Type Bitrise in the What’s the name of your app? field. The Integrate any other appl...", 
"body" : "Log into Microsoft Azure as an admin. Click the Azure Active Directory icon on the Azure services page. Click Enterprise applications under Manage . Click New Application to add Bitrise as a new app to your account. Type Bitrise in the What’s the name of your app? field. The Integrate any other application you don’t find in the gallery button should be automatically selected. Hit Create . You will find your newly created app listed on the All Applications page. Click the Bitrise app to go to its Overview page. Continue with configuring Bitrise as a SAML app. " }, 
{ "title" : "Adding users\/ groups to the app on Azure AD ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-82bcb618-a90d-e704-d87c-a422c14a3950", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Adding users\/ groups to the app on Azure AD ", 
"snippet" : "Before setting up SAML to the app, you have to add all the users\/groups to the app in Azure AD who will use SAML SSO to log into the Bitrise Workspace. In other words, every Bitrise Workspace member must be added as user in Azure AD. Select Users and groups from the left menu. Click + Add user\/group...", 
"body" : "Before setting up SAML to the app, you have to add all the users\/groups to the app in Azure AD who will use SAML SSO to log into the Bitrise Workspace. In other words, every Bitrise Workspace member must be added as user in Azure AD. Select Users and groups from the left menu. Click + Add user\/group . On the Users page of Add Assignment , select users from the list and click Select . Once it’s done, you can select a role for users under the Select a role dropdown. On the Add Assignment page, click Assign to finish adding users. " }, 
{ "title" : "Setting up SAML SSO between Bitrise and Azure AD ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-d0f83097-d01b-250a-4f1c-afe02ef495b8_UUID-0d2aba0c-a421-2a54-1f26-34077b134c12", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Azure AD SSO for Bitrise \/ Setting up SAML SSO between Bitrise and Azure AD ", 
"snippet" : "Click Single sign-on on the left menu. Select SAML . You will land on the Set up Single Sign-On with SAML page. Click the pencil symbol at Basic SAML Configuration to edit two fields. Add Bitrise as the Identifier (Entity ID) . Leave this window open! We will come back to it with some information fr...", 
"body" : "Click Single sign-on on the left menu. Select SAML . You will land on the Set up Single Sign-On with SAML page. Click the pencil symbol at Basic SAML Configuration to edit two fields. Add Bitrise as the Identifier (Entity ID) . Leave this window open! We will come back to it with some information from Bitrise in a second. Head back to your Workspace on Bitrise. Click the Single Sign On tab and click the Copy Link button to copy the Assertion Consumer Service URL (ACS URL) from Bitrise. Let’s head back to the Basic SAML Configuration window of Azure AD. Paste the Assertion Consumer Service URL from Bitrise to the Reply URL field on the Basic SAML Configuration page of Azure AD. Click Save and close the Basic SAML Configuration window. On the Single sign-on page of Azure AD, scroll down to the Set up Bitrise section. Copy the Login URL and paste it to the SAML SSO provider Single Sign-On URL (SSO URL) field on Bitrise. On the Single sign-on page of Azure AD, scroll up a bit to the SAML Signing Certificate section. Click Download next to Certificate (Base64) to download the certificate to your local computer. Open the certificate file and copy\/paste its content into the SAML SSO provider certificate field of Bitrise or you can upload the file itself from your local computer too. (If manually adding the content, you will need the full content (including ----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- as well). Hit Configure SSO on Bitrise. You have successfully set up Bitrise as a SAML SSO app on Azure AD. " }, 
{ "title" : "Setting up Auth0 SSO for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise ", 
"snippet" : "Add SAML SSO to your Bitrise Workspace using Auth0. This guide provides instructions on setting up SAML SSO using Auth0 . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decid...", 
"body" : "Add SAML SSO to your Bitrise Workspace using Auth0. This guide provides instructions on setting up SAML SSO using Auth0 . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decide to downgrade, you will lose this feature. All Workspace members will receive an email about the downgrade and you’ll have two weeks to re-upgrade if you wish to use SAML SSO in your Workspace again. Before connecting SAML SSO to your Workspace: An Auth0 administrator who is logged into Auth0 is at hand. Be aware that only the Workspace owner can set up SAML SSO to a Bitrise Workspace. Your account on Bitrise has a Workspace with the Velocity or Enterprise plan . You will need to: Create Bitrise as a web application on Auth0 . Retrieve SAML SSO information from Auth0 . Setting up a mapping rule for your Bitrise app's Client ID . " }, 
{ "title" : "Creating Bitrise as a web application on Auth0 ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-1a93225f-4206-5a6c-e8d4-f7f19d39c562", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Creating Bitrise as a web application on Auth0 ", 
"snippet" : "Log into Auth0 as an admin. Click Applications on the left menu bar then click the + Create Application button on the right hand side of the Applications page. On the Create application window, type Bitrise in the Name field. In the Choose application type select Regular Web Applications , and click...", 
"body" : "Log into Auth0 as an admin. Click Applications on the left menu bar then click the + Create Application button on the right hand side of the Applications page. On the Create application window, type Bitrise in the Name field. In the Choose application type select Regular Web Applications , and click the Create button. You are landing on your newly created Bitrise app’s Quick Start page. Click the Addons tab. Toggle the SAML2 WEB APP ’s switch to the right. This will take to to the Addon: SAML2 WEB APP page automatically. Copy the Assertion Consumer Service URL (ACS URL) from Bitrise and paste it into the Application Callback URL field on the Settings tab of the Addon: SAML2 WEB APP page. Scroll down to the bottom of the Addon: SAML2 WEB APP page and hit SAVE . Go back to the Addons page where you can find the switch turned on. " }, 
{ "title" : "Retrieving SAML SSO information from Auth0 ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-938da393-7cf0-7f97-1ad5-5103c02e47fa", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Retrieving SAML SSO information from Auth0 ", 
"snippet" : "Once you have enabled Bitrise as a web application on Auth0, it’s time to grab the certificate and the Identity provider’s unique login URL to finish up the SAML configuration on Bitrise. On Auth0, go to Application , then select the Addons tab to find your enabled Bitrise app. Click the SAML2 WEB A...", 
"body" : "Once you have enabled Bitrise as a web application on Auth0, it’s time to grab the certificate and the Identity provider’s unique login URL to finish up the SAML configuration on Bitrise. On Auth0, go to Application , then select the Addons tab to find your enabled Bitrise app. Click the SAML2 WEB APP web app and select the Usage tab. Click on the Download Auth0 certificate link next to the Identity Provider Certificate label. Open the downloaded certificate file and copy its content into the SAML SSO provider certificate field of Bitrise or upload the file itself from your local computer. Go back to Auth0 and copy paste the Identity Provider Login URL into Bitrise’s SAML SSO provider Single Sign-On URL (SSO URL) . Click Configure SSO button on Bitrise. Now you can close the dialog on Auth0. " }, 
{ "title" : "Setting up a mapping rule for your Bitrise app’s Client ID ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-c162fbf5-8745-ae81-f8ef-198b3e8838d1_UUID-5ad937bd-80dd-5e14-c301-eafa0b61f775", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Auth0 SSO for Bitrise \/ Setting up a mapping rule for your Bitrise app’s Client ID ", 
"snippet" : "Bitrise authenticates SAML SSO users via email address so before you’d test SAML SSO, make sure you create a new mapping rule on Auth0. This way you map Auth0 Client ID to email for successful SAML authentication on Bitrise. On Auth0, click the Auth Pipeline on the left menu bar. Click Rules . Click...", 
"body" : "Bitrise authenticates SAML SSO users via email address so before you’d test SAML SSO, make sure you create a new mapping rule on Auth0. This way you map Auth0 Client ID to email for successful SAML authentication on Bitrise. On Auth0, click the Auth Pipeline on the left menu bar. Click Rules . Click + Create to set up a new mapping rule. On the Pick a rules template page, click <> Empty rule . Add the following codeblock to the Script box: You will need your new Bitrise app’s Client ID which you can get on the Applications ’ page. function mapSamlAttributes(user, context, callback) {\n if (context.clientID === '{your app's clientID'}')\n context.samlConfiguration.mappings = {\n \"http:\/\/schemas.xmlsoap.org\/ws\/2005\/05\/identity\/claims\/nameidentifier\": \"email\"\n }; \n }\n callback(null, user, context);\n} Click Save changes . " }, 
{ "title" : "Setting up Idaptive SAML SSO for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-0003d3ef-fdb1-0e41-cbed-0b336e48f4fe", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Idaptive SAML SSO for Bitrise ", 
"snippet" : "Add SAML SSO to your Bitrise Workspace using Idaptive. This guide provides step-by-step instructions on setting up Bitrise as a SAML application on Idaptive . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is ...", 
"body" : "Add SAML SSO to your Bitrise Workspace using Idaptive. This guide provides step-by-step instructions on setting up Bitrise as a SAML application on Idaptive . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decide to downgrade, you will lose this feature. All Workspace members will receive an email about the downgrade and you’ll have two weeks to re-upgrade if you wish to use SAML SSO in your Workspace again. Before connecting SAML SSO to your Workspace: Be aware that only the Workspace owner can set up SAML SSO to a Bitrise Workspace. Your account on Bitrise has a Workspace with the Velocity or Enterprise plan . You must be logged into your Admin Portal on Idaptive to set up Bitrise as a SAML SSO app and establish the connection between Bitrise and Idaptive. If you are using the User Portal , Switch to Admin Portal by clicking your avatar on Idaptive. Log into Idaptive as an Admin. Go to Apps, then to Web Apps . Click the Add Web Apps button on the right. On the Custom tab and select SAML , and click Add . On the Add Web App popup hit Yes . Close the window. You will be automatically directed to the Settings page. Add Bitrise to the Name and Application ID fields on the Settings page and click Save . Click Trust on the left menu bar and select the Manual configuration under Identity Provider Configuration . Click the Signing Certificate dropdown and download the certificate. Open it with a text editor so that you can copy the full content of the certificate. You can also upload the file. Insert the content or upload the file itself in the SAML SSO provider certificate text box on the Enable Single Sign-On page of Bitrise. Copy the Single Sign On URL from the Trust page of Idaptive. Insert it on the SAML SSO provider Single Sing-On URL (SSO URL) field on the Enable Single Sign-On page of Bitrise. While on the Single Sign-On page of Bitrise, copy the Assertion Consumer Service URL (ACS URL) URL and click Configure SSO . Now let’s head back to Idaptive! Under Service Provider Configuration click Manual Configuration . Type Bitrise in the SP Entity ID \/ Issuer \/ Audience and paste the Assertion Consumer Service URL (ACS URL) from Bitrise to the Assertion Consumer Service (ACS) URL on Idaptive. Scroll down to NameID Format and select emailAddress . Click Save . Go to Permissions and click the Add button. In the Select User, Group, or Role popup, type the user name you want to add to the SAML app. Select it and hit Add . Save your changes. This will change the status of your Bitrise SAML app to Deployed . You are now ready to use Idaptive as your SAML SSO provider on Bitrise. " }, 
{ "title" : "Setting up Okta SSO for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-3edaad0e-5d36-6107-956d-c98532519294", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise ", 
"snippet" : "Add SAML SSO to your Bitrise Workspace using Okta. This guide provides step-by-step instructions on setting up Bitrise as a SAML application on Okta . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to ...", 
"body" : "Add SAML SSO to your Bitrise Workspace using Okta. This guide provides step-by-step instructions on setting up Bitrise as a SAML application on Okta . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decide to downgrade, you will lose this feature. All Workspace members will receive an email about the downgrade and you’ll have two weeks to re-upgrade if you wish to use SAML SSO in your Workspace again. Before connecting SAML SSO to your Workspace: Make sure you have an Okta administrator who is logged into Okta at hand. Be aware that only the Workspace owner can set up SAML SSO to a Bitrise Workspace. Your account on Bitrise has a Workspace with the Velocity or Enterprise plan . Add Bitrise to Okta . Configure Bitrise as a SAML app . Set up SCIM previsioning in Okta . " }, 
{ "title" : "Adding Bitrise to Okta ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-26bfa809-15ef-524d-3251-de7df446bf2d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Adding Bitrise to Okta ", 
"snippet" : "Bitrise is not an integrated app in Okta. You have to add Bitrise manually to Okta first, then you can configure SAML SSO on it. We will be jumping back and forth from the Bitrise Workspace account to Okta so make sure both pages are available. In practice this means the Workspace owner should be lo...", 
"body" : "Bitrise is not an integrated app in Okta. You have to add Bitrise manually to Okta first, then you can configure SAML SSO on it. We will be jumping back and forth from the Bitrise Workspace account to Okta so make sure both pages are available. In practice this means the Workspace owner should be logged into Bitrise and the Okta admin should be logged into Okta. Log into Okta and click Admin . From the left menu, select Applications under the Applications section. Click on the Create App Integration button. This opens the Create a new app integration window. Select SAML 2.0 option as the Sign-in method and click Next . At the General Settings step, type Bitrise into the App name field. (Optionally, you can add an app logo if you wish.) Click Next . Head over to your Bitrise Workspace and click the Single Sign On tab on the left menu. Click the Copy button to copy the Assertion Consumer Service URL (ACS URL) . Head back to Okta’s Configure SAML page and paste the copied URL from Step 7. to the Single sign-on URL input field. Type Bitrise at the Audience URI (SP Entity ID) . You can download the Okta certificate file now, and paste its content or upload the file itself in the SAML SSO provider certificate field on your Bitrise Workspace’s Single Sign-On page. Even easier if you leave it for later as you will need to fill out the Assertion Consumer Service URL (ACS URL) on Bitrise anyway. You will fetch this while configuring Bitrise as a SAML app on Okta. Do not hit Configure SSO on the Single Sing-On page of Bitrise just yet. Set the Name ID format to EmailAddress . Click Next . Fill out the Feedback section. Hit Finish . In Applications , go to the Sign-on tab, and click Edit next to Settings . Scroll down to the Credential Details section, and make sure that Application username format is set to Email . Click Save . Congrats! Bitrise has been successfully added to Okta as an app. " }, 
{ "title" : "Configuring Bitrise as a SAML app for Okta ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-8713b566-8a20-bd3c-deda-1e59badceb1c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Configuring Bitrise as a SAML app for Okta ", 
"snippet" : "Click the Assignments tab of your Bitrise app. Here you can assign Bitrise to individuals\/groups. Make sure you assign Bitrise to all Workspace members who will access the Bitrise Workspace through SAML. Click the Sign-On tab of your Bitrise app. You will see that SAML setup is not completed yet. Sc...", 
"body" : "Click the Assignments tab of your Bitrise app. Here you can assign Bitrise to individuals\/groups. Make sure you assign Bitrise to all Workspace members who will access the Bitrise Workspace through SAML. Click the Sign-On tab of your Bitrise app. You will see that SAML setup is not completed yet. Scroll down, and click View SAML setup instructions . The How to Configure SAML 2.0 for Bitrise application page is displayed. It summarizes all the information you need to set up the SAML connection between Bitrise and Okta. Copy the Identity Provider Single Sign-On URL and paste it in your Bitrise Workspace’s SSO URL field. If you haven’t pasted the Certificate’s content or uploaded the file itself into the SAML SSO provider certificate field of your Bitrise Workspace yet, you can do so now. Click Configure SSO on your Bitrise Workspace. That's it! From now on, whenever you access the Single Sign-on page, you can configure the SAML SSO settings. " }, 
{ "title" : "Setting up SCIM provisioning in Okta ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-03f56663-cca5-d4a8-e580-cde2273d120d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Setting up SCIM provisioning in Okta ", 
"snippet" : "You can set up SCIM provisioning for Bitrise using Okta. Managing Workspace groups While SCIM is a great way to manage the access of your users for Bitrise Workspaces, you will have to do some initial configuration for your groups in Bitrise after finishing setting up the SCIM provisioning. For more...", 
"body" : "You can set up SCIM provisioning for Bitrise using Okta. Managing Workspace groups While SCIM is a great way to manage the access of your users for Bitrise Workspaces, you will have to do some initial configuration for your groups in Bitrise after finishing setting up the SCIM provisioning. For more information about configuring your groups, check out Adding Workspace groups to an app team. We will be jumping back and forth from the Bitrise Workspace account to Okta, so make sure both pages are available. In practice, this means the Workspace owner should be logged into Bitrise, and the Okta admin should be logged in to Okta. On Bitrise, configure domain control and generate your SCIM credentials . You need to have: A verified domain. An SCIM base URL and an SCIM authentication token. Make sure you save both of these because you will need them during the process later. Log into Okta and click Admin . From the left menu, select Applications under the Applications section. Select your Bitrise app. Click the General tab of your Bitrise app. Click Edit next to the App Settings section and select the SCIM option using the radio button next to Provisioning . Click Save . A new tab called Provisioning will appear. Head back to Okta, and select the Provisioning tab, then click on Edit . Paste the SCIM base URL you copied from Bitrise in the SCIM connector base URL field. Add userName in the Unique identifier field for users field. Select which provisioning actions you would like to enable using the checkboxes next to Supported provisioning actions . Push Groups are mandatory Please note that you must enable Push Groups. This is because on Bitrise, Workspace membership works via groups and Okta\/SCIM can control our Workspace groups via Push Groups. Select HTTP Header from the Authorization Mode dropdown menu. Copy and paste your SCIM authentication token in the Authorization field. Click Test Connector Configuration to test if everything is working correctly. Close the Test Connector Configuration window and click Save . Click the Provisioning tab of your Bitrise app, then click on Edit next to the Provisioning to App section. Select which provisioning options you would like to enable and click Save . Sync password We recommend keeping the Sync Password setting disabled. That's it! You can now use SCIM provisioning in Okta to manage the access of your users to Bitrise. " }, 
{ "title" : "Pushing Okta groups to Bitrise using SCIM ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-f1580929-08dd-688b-a16b-d318797095b9", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Pushing Okta groups to Bitrise using SCIM ", 
"snippet" : "You can push groups from Okta to Bitrise using SCIM provisioning. Pushing a group either links an Okta group to an existing Bitrise group or creates a new group in your Bitrise Workspace. Either way, by pushing a group, you set up synchronization between an Okta group and a Bitrise group. Log into O...", 
"body" : "You can push groups from Okta to Bitrise using SCIM provisioning. Pushing a group either links an Okta group to an existing Bitrise group or creates a new group in your Bitrise Workspace. Either way, by pushing a group, you set up synchronization between an Okta group and a Bitrise group. Log into Okta and click Admin . From the left menu, select Applications under the Applications section. Select your Bitrise app. Click the Push Groups tab. Click on Push Groups and choose a filtering method. Find the group(s) you want to push. You must either create a new group, which will create a brand new group in your Bitrise Workspace or link the Okta group to an existing Bitrise group. You can choose between these methods using the dropdown menu under the Match result & push action . Linking a group If you decide to link an Okta group to an existing Bitrise group, keep the following in mind: If the Okta and Bitrise group names are different, the Bitrise group will be automatically renamed to match the name of the Okta group. When you manually push a group connected to an existing Bitrise group, if the group had members who were only added on Bitrise and not included in the Okta group, then they will be removed as Okta becomes the single source of truth. Click Save . When the Push Status changes to Active , the synchronization between Okta and Bitrise is ready. Your group should be updated in a couple of seconds on your Bitrise Workspace as well. " }, 
{ "title" : "Synchronizing groups and users between Okta and Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-3edaad0e-5d36-6107-956d-c98532519294_UUID-324c46ba-468d-775b-1766-82831138e24f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Okta SSO for Bitrise \/ Synchronizing groups and users between Okta and Bitrise ", 
"snippet" : "After pushing Okta groups to Bitrise , you can synchronize your groups and users between Okta and Bitrise. To do so, you must manage the app integration assignments in Okta: Log into Okta and click  Admin . From the left menu, select  Applications  under the  Applications  section. Select your Bitri...", 
"body" : "After pushing Okta groups to Bitrise , you can synchronize your groups and users between Okta and Bitrise. To do so, you must manage the app integration assignments in Okta: Log into Okta and click  Admin . From the left menu, select  Applications  under the  Applications  section. Select your Bitrise app. Make sure that Create Users and Deactivate Users options are enabled on the Provisioning tab. Deprovisioning users If you deprovision a user with SCIM, the user will be automatically logged off Bitrise and their PATs will be disabled. Go to the Assignments tab. Click Assign and choose Assign to People to synchronize individual users or Assign to Groups to synchronize groups. Select the users or groups that you would like to synchronize, then click Done . Domain verification New users without verified domains will receive an email invitation to join the Workspace. Existing users will also receive a verification email unless you verify your company domain. To do so, contact Bitrise support. After synchronizing your groups and users, you can check the Push Groups tab to see if the synchronization is finished. You can also manually push your updates by clicking on the dropdown menu in the Push Status column and selecting Push now . \"Push now\" overrides the Bitrise group Users not included in your Okta group will be automatically removed from the linked Bitrise group. " }, 
{ "title" : "Setting up Ping Identity SSO for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-39b673b2-e890-6e1d-bf48-5e05f68c6194", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up Ping Identity SSO for Bitrise ", 
"snippet" : "Add SAML SSO to your Bitrise Workspace using Ping Identity. This guide provides step-by-step instructions on setting up Bitrise as a SAML SSO application in Ping Identity . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML S...", 
"body" : "Add SAML SSO to your Bitrise Workspace using Ping Identity. This guide provides step-by-step instructions on setting up Bitrise as a SAML SSO application in Ping Identity . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decide to downgrade, you will lose this feature. All Workspace members will receive an email about the downgrade and you’ll have two weeks to re-upgrade if you wish to use SAML SSO in your Workspace again. Before connecting SAML SSO to your Workspace: A PingOne administrator who is logged into PingOne . Be aware that only the Workspace owner can set up SAML SSO to a Bitrise Workspace. Your account on Bitrise has a Workspace with the Velocity or Enterprise plan . To add Bitrise to Ping Identity: Click APPLICATIONS on the top bar of PingOne . On My Applications tab, make sure SAML is selected. Click the Add Application drop-down and select New SAML Application . At Application Details, fill out the required fields and click Continue to Next Step . At Application Configuration , leave the I have the SAML configuration selected. Fill out the following: Assertion Consumer Service (ACS) field: Insert the Assertion Consumer Service URL (ACS URL) link here from your Bitrise Workspace’s Single Sign-On tab. Entity ID field : Type Bitrise . Signing : Click the Sign Response option. Here is an overview of the above settings: Continue to the next step. At SSO Attribute Mapping , you don’t have to change anything, proceed to the next step. At Group Access , add the group(s) to your application. These groups will be able to access Bitrise through SAML SSO. Continue to the next step. At the Review Setup page, you can doublecheck the details you provided in the previous steps. Make sure you download the following files from this review page: Click Download to get the Signing Certificate and SAML Metadata files. Click Finish . Let’s open the two files. Copy the entire content of the SAML Metadata file and paste it in the SAML SSO provider certificate field of your Bitrise Single Sign-On page. Open the Signing Certificate file and copy the HTTP-POST SingleSignOnService Location link and paste it in the SAML SSO provider Single Sign-On URL (SSO URL) field on Bitrise. Click Configure SSO on Bitrise. Now you have set up SAML SSO on your Bitrise Workspace. " }, 
{ "title" : "Setting up OneLogin SSO for Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43204-saml-sso-in-bitrise.html#UUID-48289fbf-3c50-74c0-46d5-1c1c4cbe87c8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ SAML SSO in Bitrise \/ Setting up OneLogin SSO for Bitrise ", 
"snippet" : "Add SAML SSO to your Bitrise Workspace using OneLogin. This guide provides step-by-step instructions on setting up Bitrise as a SAML application on OneLogin . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is ...", 
"body" : "Add SAML SSO to your Bitrise Workspace using OneLogin. This guide provides step-by-step instructions on setting up Bitrise as a SAML application on OneLogin . SAML SSO restrictions SAML SSO is only available for a Workspace with the Velocity or Enterprise Build plans . Since the SAML SSO feature is tied to the above plans, if you decide to downgrade, you will lose this feature. All Workspace members will receive an email about the downgrade and you’ll have two weeks to re-upgrade if you wish to use SAML SSO in your Workspace again. Before connecting SAML SSO to your Workspace: Make sure the administrator to OneLogin is at hand while setting up SAML SSO connection on Bitrise. Be aware that only the Workspace owner can set up SAML SSO to a Bitrise Workspace. Your account on Bitrise has a Workspace with the Velocity or Enterprise plan . To configure Bitrise on OneLogin: Log into OneLogin as an Administrator. Click Administration on the top bar. Select Applications and click Add App . This will take you to the Find Applications page. Type Bitrise in the search bar and select the SAML2.0 type from the search results. Click the Configuration tab on the left sidebar. You can change the icon and add descriptions if you wish. Make sure Organization (Bitrise) is ticked. Hit Save . Click the Configuration tab again and paste the Assertion Consumer Service URL (ACS URL) from your Bitrise Workspace’s Single Sign-On tab to the Single Sign-On URL field on OneLogin. Hit Save in OneLogin . Select SSO on the left sidebar. Click the View details for the X.509 Certificate. Copy the content of the X.509 Certificate and paste it to the SAML SSO provider certificate field on the Enable Single Sign-On page of Bitrise. Go back to the SSO page on OneLogin and copy the SAML 2.0 Endpoint (HTTP) link. Paste it in the SAML SSO provider Single Sign-On URL (SSO URL) field on Bitrise. Go back to Bitrise and click Configure SSO . Users on OneLogin and Bitrise Make sure the users in your Bitrise Workspace are all added to the Users page on OneLogin. If not, go to Users , then New User and add the new user. Don’t forget to send out an invite ( More actions drop-down menu, Send Invitation ) to a new user so that the user can activate their account on OneLogin. Users must be added to the newly created Bitrise app by clicking Applications under User Info and clicking the + sign. Make sure the added users are all Workspace members on Bitrise. If you’ve completed setting up Bitrise on OneLogin and connected it with your Bitrise Workspace, then all Workspace members will get an email from Bitrise which contains a link to activate their SSO connection to the Bitrise Workspace. " }, 
{ "title" : "Editing your profile settings ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54613-editing-your-profile-settings.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings ", 
"snippet" : "You can edit your profile settings, such as your username, password, account avatar, etc., on the Profile settings page. On the Profile settings page, you can: Change your username and associated email address. Change your password. Update your personal and company information....", 
"body" : "[video] You can edit your profile settings, such as your username, password, account avatar, etc., on the Profile settings page. On the Profile settings page, you can: Change your username and associated email address. Change your password. Update your personal and company information. " }, 
{ "title" : "Changing your Bitrise username, email, and password ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54613-editing-your-profile-settings.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-bde4b085-a29d-6693-94ca-4dd165ce20ef", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Changing your Bitrise username, email, and password ", 
"snippet" : "In the upper right corner, open the account selector dropdown menu. Select the Account settings option. To change your username, type in the new username in the Username field. To change your email, type in a new email address in the Email field. To change your password, type in a new password in th...", 
"body" : "In the upper right corner, open the account selector dropdown menu. Select the Account settings option. To change your username, type in the new username in the Username field. To change your email, type in a new email address in the Email field. To change your password, type in a new password in the Password field, and then type it again in the Confirm password field. When done, click Update . " }, 
{ "title" : "Adding an avatar to your account ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54613-editing-your-profile-settings.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-91b1a44a-5270-cf37-5725-23fca0fda714", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Adding an avatar to your account ", 
"snippet" : "You can add your own personalized avatar to your Bitrise account. In the upper right corner, open the account selector dropdown menu. Select the Account settings option. Find your default avatar on the left, above the account name. Click the image. Drag and drop your new avatar in the CHANGE AVATAR ...", 
"body" : "You can add your own personalized avatar to your Bitrise account. In the upper right corner, open the account selector dropdown menu. Select the Account settings option. Find your default avatar on the left, above the account name. Click the image. Drag and drop your new avatar in the CHANGE AVATAR window, or click Browse to choose an image from your computer. " }, 
{ "title" : "Unselecting notification preferences ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54613-editing-your-profile-settings.html#UUID-7fb1877e-7cf1-93c8-e09f-40ed90eedbe4_UUID-1120d8de-43d7-9895-340d-d4afa91225eb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Editing your profile settings \/ Unselecting notification preferences ", 
"snippet" : "By default Bitrise sends newsletters and platform updates to the email address you provide under your Profile . You can unselect this setting with 3 simple steps: Click Profile settings under your avatar. Click Notification on the left menu bar. You can see that Newsletters and Platform updates are ...", 
"body" : "By default Bitrise sends newsletters and platform updates to the email address you provide under your Profile . You can unselect this setting with 3 simple steps: Click Profile settings under your avatar. Click Notification on the left menu bar. You can see that Newsletters and Platform updates are both enabled by default. If you wish to rather not get any or one of the two, notifications, untick the relevant checkbox\/es. " }, 
{ "title" : "Resetting your password ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-55026-resetting-your-password.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Resetting your password ", 
"snippet" : "If you forgot your password, you can reset it by clicking on the Forgot your Password on the Bitrise Login page. You will receive an email with further instructions. You can log into Bitrise in many ways: with your Bitrise username and password with your Gitlab\/Github\/Bitbucket account with your Bit...", 
"body" : "If you forgot your password, you can reset it by clicking on the Forgot your Password on the Bitrise Login page. You will receive an email with further instructions. You can log into Bitrise in many ways: with your Bitrise username and password with your Gitlab\/Github\/Bitbucket account with your Bitrise Workspace name if SAML SSO has been set up to and enforced on it your Bitrise Workspace If you try to log in but you forgot your password: Click Forgot your password on our Login page . Provide your Email or Username so that we know where to send password recovery link. Check your inbox for the Reset password instructions sent by letsconnect. Click Reset Password or copy the URL into your browser. Add your new password and hit Save . Once your password has been changed, click Log in to access our login page again. Add your Username and new Password to log into your Bitrise Dashboard. If you failed to log in for the third time, reCAPTCHA will get enabled to check if you are a human. If you failed to log in for an excessive amount of attempts, you will automatically get locked out. Check your inbox for our Unlock Instructions email! " }, 
{ "title" : "Two-factor authentication ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54582-two-factor-authentication.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication ", 
"snippet" : "You can add two-factor authentication (2FA) on Bitrise as an extra layer of security from the Profile settings. We provide an extra layer of security to your account if you enable two-factor authentication (2FA) on your Bitrise account. We recommend that you check your connected accounts (GitHub, Bi...", 
"body" : "You can add two-factor authentication (2FA) on Bitrise as an extra layer of security from the Profile settings. We provide an extra layer of security to your account if you enable two-factor authentication (2FA) on your Bitrise account. We recommend that you check your connected accounts (GitHub, Bitbucket, GitLab) and enable 2FA if you haven’t already. " }, 
{ "title" : "Enabling two-factor authentication ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54582-two-factor-authentication.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-ce7474ff-670c-e9aa-f0ab-630929568fee", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Enabling two-factor authentication ", 
"snippet" : "Download and install Google Authenticator on your phone. Log in to bitrise.io and go to your Profile . Click Profile setting . Scroll down and click Security on the left. Click on 2FA is enabled under Two-factor authentication . Open your Google Authenticator and scan the QR-code that appears on you...", 
"body" : "Download and install Google Authenticator on your phone. Log in to bitrise.io and go to your Profile . Click Profile setting . Scroll down and click Security on the left. Click on 2FA is enabled under Two-factor authentication . Open your Google Authenticator and scan the QR-code that appears on your screen. Enter the 6-digit code that was generated. Once you have activated your 2FA and saved your recovery codes, you will receive a confirmation email from letsconnect@bitrise.io . " }, 
{ "title" : "Disabling two-factor authentication ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54582-two-factor-authentication.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-8bdb4c2f-d1da-8bb4-83b3-6355993f9246", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Disabling two-factor authentication ", 
"snippet" : "Follow this procedure to disable two-factor authentication (2FA) if you are already logged into Bitrise. Log in to bitrise.io and go to your Profile . Click Profile settings . Scroll down and click Security on the left. Click on 2FA is enabled under Two-factor authentication . Provide your Bitrise l...", 
"body" : "Follow this procedure to disable two-factor authentication (2FA) if you are already logged into Bitrise. Log in to bitrise.io and go to your Profile . Click Profile settings . Scroll down and click Security on the left. Click on 2FA is enabled under Two-factor authentication . Provide your Bitrise login password in the pop-up window. " }, 
{ "title" : "Have you lost your authenticator and recovery codes? ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54582-two-factor-authentication.html#UUID-0cd731ce-5173-4a0b-d169-cf7caee9eb7c_UUID-4cf4dbc2-df2c-ec76-b741-9eae7605f93f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Two-factor authentication \/ Have you lost your authenticator and recovery codes? ", 
"snippet" : "2FA protects your account from unwanted login attempts (for example, with a stolen password) by providing an extra security step during the login flow. This also means that if you lose the device with the authenticator app, and you lose your recovery codes, you won't be able to access your account a...", 
"body" : "2FA protects your account from unwanted login attempts (for example, with a stolen password) by providing an extra security step during the login flow. This also means that if you lose the device with the authenticator app, and you lose your recovery codes, you won't be able to access your account and Bitrise Support will not be able to remove the activated 2FA from your account. However, if there has been any third-party service (for example, GitLab, GitHub or Bitbucket) connected to your account before, you can try to log in through that. In the absence of a connected third-party account, we recommend you to create a new account on Bitrise. In very special cases, Bitrise can remove 2FA from your account. Please note that Bitrise can only disable the activated 2FA on your account if there is a Git provider account already connected to Bitrise. Contact our Support Team using the email address you provided when signing up to Bitrise. Explain why you’re requesting us to remove 2FA. Our Support Team will ask you to create a new public repo on your git account with the title: bitrise_verification Send the link of the created repo to our Support Team. Please note that our Support Team can deny your request if they find removing 2FA from the account might pose a security risk on your Bitrise account. " }, 
{ "title" : "Personal access tokens ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54583-personal-access-tokens.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens ", 
"snippet" : "You can use a personal access token to authenticate to the Bitrise API. You can create a new personal access token at any time but once you created it, you can never view or copy its value again. You can use a personal access token to authenticate to the Bitrise API. You can create a new personal ac...", 
"body" : "You can use a personal access token to authenticate to the Bitrise API. You can create a new personal access token at any time but once you created it, you can never view or copy its value again. You can use a personal access token to authenticate to the Bitrise API. You can create a new personal access token at any time but once you created it, you can never view or copy its value again. " }, 
{ "title" : "Creating a personal access token ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54583-personal-access-tokens.html#UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e_UUID-c66f5d4e-d48d-6bf4-0b49-2c77a0763de0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens \/ Creating a personal access token ", 
"snippet" : "To create a new personal access token: In the upper right corner, open the account selector dropdown menu. Select the Account settings option. On the left, select the Security tab. Scroll down to the Personal access tokens section, and click on Create token . Fill out the Token description field and...", 
"body" : "To create a new personal access token: In the upper right corner, open the account selector dropdown menu. Select the Account settings option. On the left, select the Security tab. Scroll down to the Personal access tokens section, and click on Create token . Fill out the Token description field and select the appropriate expiration time (1 hour, 1 day, 1 month or never) for your token. Click Next . In the Personal Access token pop-up window, you can see your newly generated token. Click Copy and close to store token in the clipboard so you can paste it somewhere safe, and to finalize. " }, 
{ "title" : "Regenerating a personal access token ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-54583-personal-access-tokens.html#UUID-bc4ede62-d9f4-97dc-f34e-09782465c93e_UUID-6a675164-6572-6c5f-a285-e9cb536fe38c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Personal access tokens \/ Regenerating a personal access token ", 
"snippet" : "You can regenerate an existing personal access token at any time. However, you can't view the value of the previously generated token again, only the new value. In the upper right corner, open the account selector dropdown menu. Select the Account settings option. Go to the Security tab. Find your t...", 
"body" : "You can regenerate an existing personal access token at any time. However, you can't view the value of the previously generated token again, only the new value. In the upper right corner, open the account selector dropdown menu. Select the Account settings option. Go to the Security tab. Find your token in the Personal access tokens section. Click Edit . Click Regenerate token . Copy the new token, and then click Done . " }, 
{ "title" : "Deleting your Bitrise account ", 
"url" : "88887-41967-bitrise-docs/88887-43191-accounts/88887-43192-deleting-your-bitrise-account.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Accounts \/ Deleting your Bitrise account ", 
"snippet" : "We’re always sad to see you go but if you wish to delete your Bitrise account, you can do so from the Profile settings. We’re always sad to see you go but if you wish to delete your Bitrise account, it’s quite simple. Workspace ownership If you are the only confirmed owner of a Workspace, you must t...", 
"body" : "We’re always sad to see you go but if you wish to delete your Bitrise account, you can do so from the Profile settings. We’re always sad to see you go but if you wish to delete your Bitrise account, it’s quite simple. Workspace ownership If you are the only confirmed owner of a Workspace, you must transfer the ownership of the Workspace to another account, or delete it before deleting your account. In the upper right corner, open the account selector dropdown menu. Select the Account settings option. On the bottom of the page, click the Delete my account button and follow the instructions. " }, 
{ "title" : "Workspaces ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces ", 
"snippet" : "A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. You can create multiple Workspaces, and you can be invited to Workspaces by other Bitrise users. A Workspace is an environment that allows you to manage your Bitrise apps and the team ...", 
"body" : "A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. You can create multiple Workspaces, and you can be invited to Workspaces by other Bitrise users. A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. You can create multiple Workspaces, and you can be invited to Workspaces by other Bitrise users. To be able to add apps and run builds, you either need to be part of a Workspace, or you have to be an outside contributor on an app's team. You also need a Workspace to have a paid subscription plan on Bitrise. Each of your Workspaces can have a different subscription plan which determines how many credits your Workspace's apps can use. Legacy users Legacy users are users with concurrency-based accounts: you have a concurrency-based account if you do not use credits when running builds. Legacy users can still add apps on their personal account and run builds of those apps without a Workspace. " }, 
{ "title" : "Creating Workspaces ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43198-creating-workspaces.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Creating Workspaces ", 
"snippet" : "Create a Bitrise Workspace to be able to add new apps or run builds. When you sign up for Bitrise, you are automatically prompted to create your first Workspace. A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. You can create multipl...", 
"body" : "[video] Create a Bitrise Workspace to be able to add new apps or run builds. When you sign up for Bitrise, you are automatically prompted to create your first Workspace. A Workspace is an environment that allows you to manage your Bitrise apps and the team members working on the apps. You can create multiple Workspaces, and you can be invited to Workspaces by other Bitrise users. You must have access to at least one Workspace to be able to use Bitrise. When you create a new account, you can’t add new apps or run builds. To be able to do so, you need to either create a Workspace, or to be invited to an existing one. When you sign up for Bitrise, you are automatically prompted to create a new Workspace. If you skip creating a Workspace, or you want to create additional Workspaces later, you can do it: Log in to bitrise.io . Hover over the left navigation bar. Open the dropdown menu next to your Workspace name. Select Create Workspace . This takes you to the Create a new Workspace page. Find the Workspace name input field, and add a name. Click Create . This creates the Workspace - everything that comes after is optional and can be completed at a later point. However, without a subscription plan - either free or paid - your Workspace will be inactive and won't be able to own apps or run builds. Choose a plan. If you’re interested in the details, or you want to find out more about our other plans, check out our Pricing page for more info. Select a paid subscription plan, and follow the instructions to configure the details of the plan and set up payment methods. Alternatively, select the Hobby plan for now and add a subscription later . And that’s it. You can start adding apps and inviting people to your Workspace. " }, 
{ "title" : "Workspace billing and invoicing ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43199-workspace-billing-and-invoicing.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing ", 
"snippet" : "You can modify your subscription plan and billing information at any time on the Workspace page. You can also find and download past invoices. It’s very simple to set up a subscription plan for your Workspace even if you skipped that step when creating the Workspace. You can also modify your plan an...", 
"body" : "You can modify your subscription plan and billing information at any time on the Workspace page. You can also find and download past invoices. It’s very simple to set up a subscription plan for your Workspace even if you skipped that step when creating the Workspace. You can also modify your plan and your billing information at any time if you are the owner of the Workspace. You can set up a credit card and we’ll bill you automatically; for other payment methods, please contact our support. Set up an email address so we can send you your invoices - no need to rummage around the site looking for them, we’ll deliver them straight to your inbox. However, if you wish to download it manually from the site, you can do that, too. " }, 
{ "title" : "Adding and updating billing details for a Workspace ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43199-workspace-billing-and-invoicing.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-35cb7ab6-692b-5d1e-5884-9e6885f423f4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Adding and updating billing details for a Workspace ", 
"snippet" : "Sign in with an account that is a member of the Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select Plan & billing from the menu options. If you haven't provided your billing information yet, do s...", 
"body" : "Sign in with an account that is a member of the Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select Plan & billing from the menu options. If you haven't provided your billing information yet, do so: click Add credit card on the right of the Billing information menu. Fill out the details. Note that only the owner(s) of the Workspace’s has any access to the Workspace’s billing information. " }, 
{ "title" : "Setting up an email address for Workspace invoices ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43199-workspace-billing-and-invoicing.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-7c3f5354-876c-c804-8cf8-d239ae61f389", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Setting up an email address for Workspace invoices ", 
"snippet" : "By default, a Workspace’s invoices will be sent to the email provided when the Workspace was created. However, the owner(s) of the Workspace can change it at any time. Sign in with an account that is an owner of the Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you h...", 
"body" : "By default, a Workspace’s invoices will be sent to the email provided when the Workspace was created. However, the owner(s) of the Workspace can change it at any time. Sign in with an account that is an owner of the Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select General settings from the menu options. Locate the Billing email field and click Edit underneath it. Enter the new email address and click Confirm changes . " }, 
{ "title" : "Downloading Workspace invoices ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43199-workspace-billing-and-invoicing.html#UUID-b0887572-7a06-ffb9-1d63-1adc4de6bd9c_UUID-7c4bcfaa-5f38-cf5d-2e34-48c137fdee0e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace billing and invoicing \/ Downloading Workspace invoices ", 
"snippet" : "Sign in with an account that is an owner of the Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select Plan & billing from the menu options. Locate the Past statements menu. Select the invoice you ne...", 
"body" : "Sign in with an account that is an owner of the Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select Plan & billing from the menu options. Locate the Past statements menu. Select the invoice you need and click the download icon on the right. " }, 
{ "title" : "Workspace groups ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43201-adding-other-users-to-workspaces.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups ", 
"snippet" : "Workspace membership is based on groups on Bitrise: add people to Workspace groups so that the groups can be assigned to work on the Workspace's apps. Workspace groups allow more convenient management of Workspace members. You can add any number of Workspace members to a group and then assign the gr...", 
"body" : "Workspace membership is based on groups on Bitrise: add people to Workspace groups so that the groups can be assigned to work on the Workspace's apps. Workspace groups allow more convenient management of Workspace members. You can add any number of Workspace members to a group and then assign the group to any app that is owned by the Workspace. The same group can have different user roles on multiple different apps. Workspace members and roles Workspace members and Workspace groups have no inherent roles at all. You can assign groups or individual members to app teams and choose their user role there. The same member or Workspace group can have different roles on different apps. A Workspace group's name is not relevant: even if a Workspace group is called Admin , it doesn’t have the Admin role on any app by default and you can assign them to apps with other roles, too. " }, 
{ "title" : "Creating groups for Workspaces ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43201-adding-other-users-to-workspaces.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-9f142b76-d773-88a5-192e-98e4f2eb653e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Creating groups for Workspaces ", 
"snippet" : "Owners only Only Workspace owners can create groups for a Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select Collaboration from the menu options. Select the Groups tab. Click the Create group but...", 
"body" : "Owners only Only Workspace owners can create groups for a Workspace. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select Collaboration from the menu options. Select the Groups tab. Click the Create group button to bring up a dialogue box. Enter a group name in the Enter a unique name field, and click Create . " }, 
{ "title" : "Adding members to a Workspace group ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43201-adding-other-users-to-workspaces.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-5283ad8d-928c-9a0c-55dc-f7586da02319", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Adding members to a Workspace group ", 
"snippet" : "You can add Workspace members to Workspace groups for more convenient management of Workspace members. Groups allow you to assign several members to app teams at the same time. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings ...", 
"body" : "You can add Workspace members to Workspace groups for more convenient management of Workspace members. Groups allow you to assign several members to app teams at the same time. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select Collaboration from the menu options. Select the Groups tab. Find the group you need and click the 3 dots to the right of the group to bring up the group dropdown menu. Click on the + Add member button. Enter an email address or add an existing member to the group using the radio buttons in the dialogue box. Select Invite a new member to the Workspace and enter an email address. Click Send Invite on the bottom to send the invitation. Select Add an existing member and select one of the existing Workspace members from the dropdown menu. Click Add member on the bottom to add the team member to the group. " }, 
{ "title" : "Managing app access roles for Workspace groups ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43201-adding-other-users-to-workspaces.html#UUID-39752d56-7087-4b7e-67a0-7b4cbeb0bfe0_UUID-32985907-72ce-7984-af0f-99fb52394b36", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace groups \/ Managing app access roles for Workspace groups ", 
"snippet" : "You can grant Workspace groups access to application teams on Bitrise. It means that all members of the group will be able to work on the app in the role assigned to the group . List all groups that have been granted a given role on an app's team by using the GET \/apps\/{app-slug}\/roles\/{role-name} e...", 
"body" : "You can grant Workspace groups access to application teams on Bitrise. It means that all members of the group will be able to work on the app in the role assigned to the group . List all groups that have been granted a given role on an app's team by using the GET \/apps\/{app-slug}\/roles\/{role-name} endpoint. The role-name parameter takes three possible values: admin manager : this is the equivalent of the Developer role on bitrise.io. member : this is the equivalent of Tester\/QA on bitrise.io. In this example, we're querying a list of Workspace groups that have been granted Admin role to a specific app: curl -X 'GET' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/roles\/admin' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' Grant access to existing Workspace groups by using the PUT \/apps\/{app-slug}\/roles\/{role-name} endpoint. This endpoint requires a groups object that contains the slugs of all the groups that are granted access with the specified role. Specify all groups This endpoint replaces all previous groups that had the specified role on the app's team. If, for example, you call the endpoint to grant the groups Alpha and Beta the Admin role on the app's team, only Alpha and Beta will have Admin access to the app afterwards. If another group - let's call it Delta - previously had Admin role on the team, it will be removed. Getting the group slugs To get the group slugs of your Workspace, use the GET \/organizations\/{org-slug}\/groups endpoint. In the following example, we'll be granting several groups Admin access: curl -X 'PUT' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/roles\/admin' \\\n -H 'accept: application\/json' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"groups\": [\n \"GROUP-SLUG-1\", \"GROUP-SLUG-2\"\n ]\n}' " }, 
{ "title" : "Managing the owners of a Workspace ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-43203-changing-the-owners-of-a-workspace.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Managing the owners of a Workspace ", 
"snippet" : "Workspace owners can access and delete all apps linked to the Workspace and can manage the billing details of the Workspace. Only owners can add or remove other owners. Workspace owners can access and delete all apps linked to the Workspace, can manage the billing details of a Workspace and can add ...", 
"body" : "Workspace owners can access and delete all apps linked to the Workspace and can manage the billing details of the Workspace. Only owners can add or remove other owners. Workspace owners can access and delete all apps linked to the Workspace, can manage the billing details of a Workspace and can add or remove other owners. Every Workspace must have at least one owner. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select Team from the menu options. Select the Owners tab. Click + Add owner to add a new owner to the Workspace. Enter an email address or add an existing member to the owners group using the radio buttons in the dialogue box. The account in question will become an owner of the Workspace. " }, 
{ "title" : "Workspace FAQ ", 
"url" : "88887-41967-bitrise-docs/88887-43197-workspaces/88887-70891-workspace-faq.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workspaces \/ Workspace FAQ ", 
"snippet" : "The most frequently asked questions about Bitrise Workspaces: what are they, how to manage its apps, what can members and groups do? What is a Workspace on Bitrise? Workspaces are used to seamlessly manage bigger teams and members inside a company. It is a place to gather all the people working on e...", 
"body" : "The most frequently asked questions about Bitrise Workspaces: what are they, how to manage its apps, what can members and groups do? What is a Workspace on Bitrise? Workspaces are used to seamlessly manage bigger teams and members inside a company. It is a place to gather all the people working on each of your company’s apps and delegate them through creating different groups. How do I add an app to a Workspace? First, you have to be added to at least one Group of the Workspace. Then, go to the Add new app page and select the Workspace in the dropdown at the top left. You can change this throughout the process of adding the app, or after you finished adding the app, changing the owner is possible through transferring ownership of the app. How do I migrate\/transfer my existing apps to a Workspace? Once you’ve created a Workspace, you can transfer any of your apps to it by going to the Team tab of the app you want to transfer, and clicking the Transfer ownership button at the top right. What are Owners inside a Workspace? Workspaces can have more than one Owner. Owners can manage billing, delete apps and change the billing email, create, delete and assign groups to apps. What can “Members” of a Workspace do? Members are displayed on the People tab of the Workspace’s page. One can be added as a member by including them in a group on the Groups tab. These members have the option to add apps to the Workspace and view a list of all of the Workspace’s apps on the Apps tab. Members can only access a Workspace’s app, if they are granted access to the app directly or through a Group , in respect of their assigned role (Admin, Developer or Tester). What are groups good for? A group is basically a wrapper for members. By creating groups, Owners and Admins can add multiple members to each app’s team at once, making it faster and easier to setup new projects on Bitrise. It also make it faster to reassign, remove and change role of multiple members. Each group is handled as one entity on the app’s Team  tab. They can be added to an app’s team, the group’s role can be set, and by removing the Group from the app’s Team you can revoke the access of every member of that group from the app. It’s not possible however to add or delete individual members of a group there, only on the Workspace’s page. What’s the difference between a Team and a Workspace? Teams are handled per app, Workspaces are handled globally. A Team of a Workspace’s app can contain members invited directly or through the groups assigned to them. Team members with a direct role can only access the app they were invited to and can’t add an app to the Workspace. Members of a Team always have a role assigned to them (Admin, Developer or Tester). Who are the Outside contributors? Outside contributors are members of an app’s Team with a direct role, invited only to an app of a Workspace and not to the Workspace itself. Can I have multiple Workspaces? One user can have as many Workspaces as they like, but each Workspace has to have an active subscription to be able to run builds. Can I remove someone from all of my Workspace’s apps? If you are an Owner of a Workspace, you can remove members and contributors on the Org’s People tab, with one click. Owners can also remove someone from a group on the Groups tab. In this case the user will be removed from all apps’ team that the group is assigned to. How can I leave a Workspace? If you are not the Owner of a Workspace, you can leave a Workplace simply by first accessing the Workspace settings (selecting the gear icon next to the Workplace on the top right of your screen), selecting Team from the menu options on the left, selecting the Members tab, and clicking the \" \" icon next to your email address. I cannot see the Remove from Workspace icon next to my email address If you are an Owner of the Workspace you want to leave, you must first remove yourself from the list of owners in the Owners tab (you must also add a new Owner if there isn't one already). For more information, see Managing the owners of a Workspace. " }, 
{ "title" : "Apps ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps ", 
"snippet" : "Apps are the main building blocks of your Bitrise experience: a Git repository that stores source code is added to Bitrise as an app. Apps are the main building blocks of your Bitrise experience: a Git repository that stores source code is added to Bitrise as an app. As such, a Bitrise app isn't nec...", 
"body" : "Apps are the main building blocks of your Bitrise experience: a Git repository that stores source code is added to Bitrise as an app. Apps are the main building blocks of your Bitrise experience: a Git repository that stores source code is added to Bitrise as an app. As such, a Bitrise app isn't necessarily an actual application: it's just the code on which you run builds with Bitrise. Once you have access to a Workspace , you can start adding and managing apps. You can configure pretty much every aspect of your app at any time after the initial setup. Among other things, you can: Change your app's repository URL . Setting up service credentials . Update your app's SSH keys . Register new webhooks and update existing ones . The users invited to work on a Bitrise app make up the app's team . You can invite users individually, or assign Workspace groups to apps. The same user or the same Workspace group can have different roles on different app teams. " }, 
{ "title" : "Webhooks ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks ", 
"snippet" : "Bitrise makes extensive use of incoming webhooks to automatically trigger builds on Bitrise and outgoing webhooks to send reports of build events to other services, such as Slack. A webhook is a user-defined callback that is triggered by some event, such as pushing code to a repository. Bitrise make...", 
"body" : "[video] Bitrise makes extensive use of incoming webhooks to automatically trigger builds on Bitrise and outgoing webhooks to send reports of build events to other services, such as Slack. A webhook is a user-defined callback that is triggered by some event, such as pushing code to a repository. Bitrise makes extensive use of webhooks: Incoming webhooks, registered with your Git service provider, are used to automatically trigger builds on Bitrise and to enable the use of Git Insights . Webhook issues If your builds triggers don't work, there might be a problem with your webhooks: Builds aren't getting triggered . Outgoing webhooks are used to send reports of build events to other services, such as Slack. You can add an incoming webhook automatically either when creating an app or later; it’s also possible to manually add a webhook to any supported service. Outgoing webhooks can be added either on the website or via the Bitrise API . " }, 
{ "title" : "Adding incoming webhooks ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks ", 
"snippet" : "An incoming webhook on Bitrise serves one purpose: to start builds automatically when a certain code event (code push, Git Tag, pull request) happens. You can setup incoming webhooks manually or automatically when adding your app to Bitrise. Most source code hosting service provides a feature to reg...", 
"body" : "An incoming webhook on Bitrise serves one purpose: to start builds automatically when a certain code event (code push, Git Tag, pull request) happens. You can setup incoming webhooks manually or automatically when adding your app to Bitrise. Most source code hosting service provides a feature to register webhooks. A webhook is basically an URL which will be called on specified events. An incoming webhook on Bitrise serves one purpose: to start builds automatically when a certain code event (code push, Git Tag, pull request) happens. You just need to register an incoming webhook to your repository and configure build triggers . Webhook issues If your builds triggers don't work, there might be a problem with your webhooks: Builds aren't getting triggered . " }, 
{ "title" : "Registering an incoming webhook automatically ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-0e15a9c2-5e5e-6dbb-6031-45415bf30fbc", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook automatically ", 
"snippet" : "Automatic webhook registration is supported for apps that have their code hosted on GitHub, GitLab and Bitbucket. If you use one of the above services as your source code hosting provider, Bitrise automatically sets up a webhook for it with a click of a button at the end of your app setup journey. G...", 
"body" : "Automatic webhook registration is supported for apps that have their code hosted on GitHub, GitLab and Bitbucket. If you use one of the above services as your source code hosting provider, Bitrise automatically sets up a webhook for it with a click of a button at the end of your app setup journey. GitHub App integration If you use the Bitrise GitHub App to connect your Bitrise Workspace to a Git account or organization, you don't need a webhook. The app can trigger builds or send status updates without it. However, you can always change this webhook later or add a new one if you skipped registering a webhook when adding the app. You can automatically register a webhook to the repository on the App settings page of the app. Automatic registration means that Bitrise registers the webhook at the repository, so you don't have to manually go there and add it on your Git provider's website. This requires: That you have admin rights to the repository. That the account that hosts the repository is connected to your Bitrise account. To register a webhook automatically: Make sure your Bitrise account is connected to the Git provider account that hosts the repository and that your Git account has admin rights to the repository. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . On the top of the Integrations page, select the Webhooks tab. In the Incoming webhooks section, select Set up webhooks automatically . Bitrise will automatically register a webhook at the app's repository. " }, 
{ "title" : "Registering an incoming webhook manually ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-a4f28644-5827-6e01-4f08-0f8bb2d78fae_UUID-cd6e4d9c-cada-8eb0-f176-ddd63769dc8e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding incoming webhooks \/ Registering an incoming webhook manually ", 
"snippet" : "You can manually setup or change your webhooks after you registered your app on Bitrise. The process is different depending on your Git provider but on Bitrise, the basic steps are the same for each. Create your own webhook implementation Our webhook processor is Open Sourced . If you are looking fo...", 
"body" : "You can manually setup or change your webhooks after you registered your app on Bitrise. The process is different depending on your Git provider but on Bitrise, the basic steps are the same for each. Create your own webhook implementation Our webhook processor is Open Sourced . If you are looking for an unsupported solution, you can create an issue on the GitHub page or create a pull request with the implementation. You can also run your own webhook provider behind your own firewall if required. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . In the Incoming webhooks section, Set up webhooks manually . On the top of the Integrations page, select the Webhooks tab. In the pop-up window, select your service from the dropdown menu. Copy the webhook URL and register it at your Git provider. " }, 
{ "title" : "Adding a GitHub webhook ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-32393458-0d1f-b7ec-5e9e-3870e591bb51", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a GitHub webhook ", 
"snippet" : "You can specify webhooks on Github so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. GitHub App integration If you connect your GitHub account or organization to Bitrise via the GitHub App integration , you don'...", 
"body" : "You can specify webhooks on Github so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. GitHub App integration If you connect your GitHub account or organization to Bitrise via the GitHub App integration , you don't need a webhook for any purpose. You can specify webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For GitHub, all you have to do is register your bitrise-webhooks URL as a Webhook in your GitHub repository. In addition, you can take advantage of Git Insights . Git Insights enables you to quantify and optimize Git collaboration. It provides crucial metrics like pull request cycle time and merge frequency. You can register a webhook either automatically or manually. This guide walks you through the process of manually registering a webhook. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Click Set up webhooks manually . In the pop-up window, select GitHub from the dropdown menu. Copy the webhook URL. Navigate to your GitHub repository and select Settings . Select Add webhook under Webhooks . Paste the GitHub Webhook URL from Bitrise to the Payload URL . And on the same page, select Let me select individual events . Select Pull request, Push , and Pull request review comments . Press the Add webhook button and you're done. " }, 
{ "title" : "Adding a GitLab webhook ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-e1ee974e-fbf2-1800-48ea-283f8606813e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a GitLab webhook ", 
"snippet" : "You can specify webhooks on Gitlab so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, su...", 
"body" : "You can specify webhooks on Gitlab so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For GitLab, all you have to do is register your bitrise-webhooks URL as a Webhook in your GitLab repository. In addition, you can take advantage of Git Insights . Git Insights enables you to quantify and optimize Git collaboration. It provides crucial metrics like pull request cycle time and merge frequency. You can register a webhook either automatically or manually. This guide walks you through the process of manually registering a webhook. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Click Set up webhooks manually . In the pop-up window, select GitLab from the dropdown menu. Copy the webhook URL. Open your project on GitLab.com Go to Settings of the project. Select Webhooks and then click Add new webhook . Enter the bitrise-webhooks URL in the URL field. In the Trigger section select: Push events Tag push events Merge request events Comments Click Add webhook . That’s all! The next time you push code, push a new tag or create\/update a merge request a build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise). " }, 
{ "title" : "Adding a Bitbucket webhook ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-40a0e3b9-5167-fe62-1aa4-4f3f481f80b6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Bitbucket webhook ", 
"snippet" : "You can specify webhooks on Bitbucket so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. To have Bitrise automatically start a build every time you push code into your repository, you can set up a webhook at your...", 
"body" : "You can specify webhooks on Bitbucket so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. To have Bitrise automatically start a build every time you push code into your repository, you can set up a webhook at your code hosting service which will automatically trigger a build on Bitrise with the code you push to your repository. In addition, you can take advantage of Git Insights if you set up the webhook with the necessary permissions. Git Insights enables you to quantify and optimize Git collaboration. It provides crucial metrics like pull request cycle time and merge frequency. You can register a webhook either automatically or manually. This guide walks you through the process of manually registering a Bitbucket webhook. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Click Set up webhooks manually . In the pop-up window, select Bitbucket Webhooks from the dropdown menu. Copy the webhook URL. Navigate to your Bitbucket repository and select Settings . Select Webhooks from the left. Select Add Webhook . Paste the Bitbucket Webhook URL from Bitrise to the URL and add a Title . Select Choose from a full list of triggers . Select the necessary permissions: For automatically triggering builds, you just need to select Push from the Repository permissions, and Created , Updated and Comment created and Comment updated from the Pull Request permissions. For Git Insights , you need everything you need, in addition to the above, Merged and Declined from the Pull Request permissions. " }, 
{ "title" : "Adding a Gogs webhook ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-a4c542d7-dde8-0143-1199-2dece940db5c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Gogs webhook ", 
"snippet" : "You can specify webhooks on Gogs so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action. For ...", 
"body" : "You can specify webhooks on Gogs so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action. For Gogs, all you have to do is register your bitrise-webhooks URL as a Webhook in your Gogs repository. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Click Set up webhooks manually . In the pop-up window, select Gogs from the dropdown menu. Copy the webhook URL. Open your project on your repository’s hosting URL. Go to Settings of the project. Select Webhooks , Add Webhook , then Gogs . Specify the bitrise-webhooks URL ( ...\/h\/gogs\/BITRISE-APP-SLUG\/BITRISE-APP-API-TOKEN ) in the Payload URL field. Set the Content Type to application\/json . A Secret is not required at this time. Set the trigger to be fired on Just the push event . Click Add Webhook . And you’re done! From now on, every code push to your Gogs repository will trigger a build on Bitrise. " }, 
{ "title" : "Adding a Slack webhook ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-29eb8644-3447-d10b-4e2f-1810fba36ae5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Slack webhook ", 
"snippet" : "You can set up a Slack app with Slash Commands that allow you to trigger Bitrise builds in Slack. Slash commands for Slack apps allow you to send a payload to a service by typing a command in Slack. You can use Slash Commands to trigger Bitrise builds by creating a Slash Command. The Request URL of ...", 
"body" : "You can set up a Slack app with Slash Commands that allow you to trigger Bitrise builds in Slack. Slash commands for Slack apps allow you to send a payload to a service by typing a command in Slack. You can use Slash Commands to trigger Bitrise builds by creating a Slash Command. The Request URL of the Slash Command must be the Bitrise webhook URL. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . Go to your app’s page on Bitrise. On the left, select Integrations . Click Set up webhooks manually . Choose Slack from the dropdown menu. Copy the webhook URL. Open your Slack app. If you don't have one, create a Slack app . On the app management dashboard, select Slash Commands from the navigation menu. Click Create New Command . Paste the webhook URL in the Request URL field. Fill out the rest of the fields to finish configuring the Slash Command and click Save . That's it - you have successfully registered a webhook to your Slack app. You can now trigger builds using a Slash Command . " }, 
{ "title" : "Adding a Visual Studio webhook ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-47f911de-489f-87e5-2366-f4e0c5d467de", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Visual Studio webhook ", 
"snippet" : "You can specify webhooks in Visual Studio so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified act...", 
"body" : "You can specify webhooks in Visual Studio so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For Visual Studio, all you have to do is register your bitrise-webhooks URL for a visualstudio.com project as a Service Hooks integration. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Click Set up webhooks manually . In the pop-up window, select Visual Studio from the dropdown menu. Copy the webhook URL. Open your project on visualstudio.com . Go to the Admin\/Control pane of the project. Select Service Hooks . Click Create subscription . Create a service integration: In the Service list select the Web Hooks option. Select the Code pushed event as the Trigger . In the Filters section select the Repository you want to integrate. You can leave the other filters on default. Click Next . On the Action setup form enter the bitrise-webhooks URL ( ...\/h\/visualstudio\/BITRISE-APP-SLUG\/BITRISE-APP-API-TOKEN ) in the URL field. You can leave every other option on default. Click Finish . " }, 
{ "title" : "Adding an Assembla webhook ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-aadbd29c-7813-7b07-1f45-169029610228", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding an Assembla webhook ", 
"snippet" : "You can specify webhooks on Assembla so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, ...", 
"body" : "You can specify webhooks on Assembla so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For Assembla, you only need to add your bitrise-webhooks URL to your Assembla space. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Click Set up webhooks manually . In the pop-up window, select Assembla from the dropdown menu. Copy the webhook URL. Open your space on assembla.com or your organisation’s assembla domain. Go to the Webhooks section of the space. Select Create New Webhook . Set Title to Bitrise Webhook . Specify the bitrise-webhooks URL. ( ...\/h\/assembla\/BITRISE-APP-SLUG\/BITRISE-APP-API-TOKEN ) in the External url field. Select application\/json in the Content type field. Paste the following code to Content : {\"assembla\": {\"space\": \"%{space}\", \"action\": \"%{action}\", \"object\": \"%{object}\"}, \"message\": {\"title\": \"%{title}\", \"body\": \"%{body}\", \"author\": \"%{author}\"}, \"git\": {\"repository_suffix\": \"%{repository_suffix}\", \"repository_url\": \"%{repository_url}\", \"branch\": \"%{branch}\", \"commit_id\": \"%{commit_id}\"}}\n Select Code commits and\/or Git Push in the Post updates about: section. Click Add . That’s all! The next time you push code a build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise). " }, 
{ "title" : "Adding a Deveo webhook ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-a9d9971f-c0f6-6903-38bb-516d69075c6b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding a Deveo webhook ", 
"snippet" : "You can specify webhooks on Deveo so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, suc...", 
"body" : "You can specify webhooks on Deveo so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. You can set up webhooks so that Bitrise automatically triggers a build of your app whenever you perform a specified action, such as a code push or a pull request. For Deveo, all you have to do is register your bitrise-webhooks URL for a Deveo repository. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Click Set up webhooks manually . In the pop-up window, select Deveo from the dropdown menu. Copy the webhook URL. Open your repository on app.deveo.com . Go to Hooks of the project. Add a new Repository Hook by clicking the + button on the right. Select your repository and select the Webhook service. Enter the bitrise-webhooks URL ( ...\/h\/deveo\/BITRISE-APP-SLUG\/BITRISE-APP-API-TOKEN in the Url field). Type json in the Content type field. Click Save hook . That’s all! The next time you push code or push a new tag a build will be triggered (if you have Trigger mapping defined for the event(s) on Bitrise). " }, 
{ "title" : "Adding outgoing webhooks ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-137df052-8bfd-beda-0654-501f185129f3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks ", 
"snippet" : "You can create outgoing webhooks so that Bitrise automatically sends build event notifications to any service you would like. You can configure Bitrise to send build event notifications to any service you would like. A build event is: When a build is started. When a build ends. You can use this noti...", 
"body" : "You can create outgoing webhooks so that Bitrise automatically sends build event notifications to any service you would like. You can configure Bitrise to send build event notifications to any service you would like. A build event is: When a build is started. When a build ends. You can use this notification to share build statuses with your git provider if we don’t support it yet, notify only the right team about build success or failure, or use it to automate your in-house release pipeline. You can add, remove and edit your webhooks easily on the website interface. Accessing services that are behind a firewall If you need to access a service that is behind a firewall, you can't use outgoing webhooks: the payload won't get past the firewall. To access such a service, we recommend configuring the firewall to allow the Bitrise build machines to access it, and then make the request from within the build machine. For more information on how to do so, check out the relevant guides: Configuring network access with IP allowlistsConnecting to a VPN during a build" }, 
{ "title" : "Adding an outgoing webhook to an app ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-676d9c4e-ca3a-a3da-3549-7ff3bc182180", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding an outgoing webhook to an app ", 
"snippet" : "You can set up and configure the webhooks sent by Bitrise on the web UI. Let’s see how! Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Scroll down to Outgoing Webhooks . Click...", 
"body" : "You can set up and configure the webhooks sent by Bitrise on the web UI. Let’s see how! Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Scroll down to Outgoing Webhooks . Click Add webhook . Enter the URL of the service where you wish to send the notification in the URL field. Select either the Send me everything or the Select individual events option. Send me everything : every supported event type will trigger the webhook. Currently, only build events are supported but there will be other options in the future! Select individual events : you can specify the individual events that should trigger the webhook. Optionally, add custom headers to your webhook: in the Headers section, specify a name and a value for the header. When done, click Add header . For example, if you have an API listening to the webhook, you can track the requests with API keys set as a custom header. Hiding the header value You can hide the value of your headers by checking the box under Hide . Please note that if you do this, you won't be able to view or change the value again. Click Create Webhook . And you’re done! You can modify your webhook at any time by clicking the pencil icon next to the webhook. " }, 
{ "title" : "Adding custom headers to outgoing webhooks ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-e2055e06-652f-0023-156b-f1547757fda5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Adding custom headers to outgoing webhooks ", 
"snippet" : "You can add extra headers to your outgoing webhooks via the Code tab of the web interface. For example, if you have an API listening to the webhook, you can track the requests with API keys set as a custom header. You can add custom headers either when: Creating a new outgoing webhook . Modifying an...", 
"body" : "You can add extra headers to your outgoing webhooks via the Code tab of the web interface. For example, if you have an API listening to the webhook, you can track the requests with API keys set as a custom header. You can add custom headers either when: Creating a new outgoing webhook . Modifying an existing outgoing webhook by clicking the Edit button next to the URL. To add the header: Find the WEBHOOK HEADERS section. Add a key and a value to the header. You need both to be able to save the header. Click Add header . Click Create webhook \/ Update webhook . " }, 
{ "title" : "Checking outgoing webhook deliveries ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43213-webhooks.html#UUID-137df052-8bfd-beda-0654-501f185129f3_UUID-00d9445c-14af-5274-0f15-1068d476c337", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Webhooks \/ Adding outgoing webhooks \/ Checking outgoing webhook deliveries ", 
"snippet" : "You can check the recent deliveries of your outgoing webhooks at any time, and resend them if necessary. The deliveries are marked with appropriate status code, depending on whether the delivery was successful. Open your app on Bitrise with a user that has the Admin role on the app . On the main pag...", 
"body" : "You can check the recent deliveries of your outgoing webhooks at any time, and resend them if necessary. The deliveries are marked with appropriate status code, depending on whether the delivery was successful. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Scroll down to Outgoing Webhooks . Find your webhook and select the icon. Select a delivery and expand it to show the full request and the response. You can redeliver the webhook payload at any time. Find the delivery you need and click the icon next to it. Editing the payload Before trying to deliver the webhook payload again, you can edit the webhook configuration. Close the Recent deliveries pop-up window and click the icon next to the webhook to edit it. When finished, click Update webhook . " }, 
{ "title" : "Configuring the repository URL and default branch ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-54873-configuring-the-repository-url-and-the-default-branch.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch ", 
"snippet" : "When adding a new app to Bitrise, you specify a repository that is used to store your source code, and a branch that Bitrise uses as the default branch. You can change these at any time from App Settings. When adding a new app to Bitrise, you specify a repository that is used to store your source co...", 
"body" : "When adding a new app to Bitrise, you specify a repository that is used to store your source code, and a branch that Bitrise uses as the default branch. You can change these at any time from App Settings. When adding a new app to Bitrise, you specify a repository that is used to store your source code, and a branch that Bitrise uses as the default branch. Once the app is set up, you can change these at any time. " }, 
{ "title" : "Changing the repository URL ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-54873-configuring-the-repository-url-and-the-default-branch.html#UUID-66811810-1d10-b6b9-3aa2-3d886f843f08_UUID-7b91d1b6-db2b-f012-7692-baeb1140e1e5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch \/ Changing the repository URL ", 
"snippet" : "The repository URL is the address where your repository can be accessed by Bitrise. It can be either an SSH URL or an HTTPS URL: we strongly recommend using SSH URLs for all private apps for security reasons. Using an HTTPS URL You can use HTTPS Git URLs, using a personal access token for authorizat...", 
"body" : "The repository URL is the address where your repository can be accessed by Bitrise. It can be either an SSH URL or an HTTPS URL: we strongly recommend using SSH URLs for all private apps for security reasons. Using an HTTPS URL You can use HTTPS Git URLs, using a personal access token for authorization: in this case, you don't need an SSH key: Configuring HTTPS authorization. If you move your project's repository, or the URL changes for any other reason, you can update it on Bitrise and continue building without an issue. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . From the menu on the left, select General . Click Edit . Find the Repository URL field. Enter the new URL. Click Save to save changes. " }, 
{ "title" : "Changing the default branch ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-54873-configuring-the-repository-url-and-the-default-branch.html#UUID-66811810-1d10-b6b9-3aa2-3d886f843f08_UUID-2f72d342-385d-6973-d88a-d7a4e02e95cd", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring the repository URL and default branch \/ Changing the default branch ", 
"snippet" : "The default branch is the branch of your repository that Bitrise will use if no other configuration indicates otherwise. You can change the default branch at any time. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings ico...", 
"body" : "The default branch is the branch of your repository that Bitrise will use if no other configuration indicates otherwise. You can change the default branch at any time. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . From the menu on the left, select General . Click Edit . Find the Default branch field. Type the name of the branch you want to use as default branch. Click Save to save changes. " }, 
{ "title" : "Configuring SSH keys ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-55007-configuring-ssh-keys.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys ", 
"snippet" : "To access your app's repository, Bitrise needs an SSH key. You can add an SSH key when you first add an app to Bitrise but you can update your keys at any point in App settings. SSH keys are the primary method of authentication. To access your app's repository, Bitrise needs a public-private SSH key...", 
"body" : "To access your app's repository, Bitrise needs an SSH key. You can add an SSH key when you first add an app to Bitrise but you can update your keys at any point in App settings. SSH keys are the primary method of authentication. To access your app's repository, Bitrise needs a public-private SSH keypair, with the public key registered to your app's Git repository. There is one exception to this: if you use the Bitrise GitHub App to connect your Bitrise Workspace to GitHub, you do not need an SSH key. Using an HTTPS URL You can use HTTPS Git URLs, using a personal access token for authorization: in this case, you don't need an SSH key: Configuring HTTPS authorization. You can add an SSH key when you first add an app to Bitrise but you can update your keys at any point. You can even skip SSH key configuration when adding the app and register SSH keys later. Accessing multiple repositories If your app needs to access multiple repositories during the build, the best practice is to generate an SSH keypair, and register the public key to every repository you need. However, keep in mind that GitHub does not support this method. To learn more, see Apps with submodules or private repo dependencies. " }, 
{ "title" : "Generating your own SSH keypair ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-55007-configuring-ssh-keys.html#UUID-b567647e-2421-59ae-7fd8-ec3d3e337378_UUID-f22411ba-fc2f-c6b4-55cf-5154d1836970", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys \/ Generating your own SSH keypair ", 
"snippet" : "You can always generate your own SSH keypair on your own device and use the generated public and private keys for your Bitrise app. This is completely optional as Bitrise can generate and automatically register SSH keys for you, either during the process of adding the app to Bitrise or later in the ...", 
"body" : "You can always generate your own SSH keypair on your own device and use the generated public and private keys for your Bitrise app. This is completely optional as Bitrise can generate and automatically register SSH keys for you, either during the process of adding the app to Bitrise or later in the App settings menu. Generate your own SSH keypair with a simple Command Line\/Terminal command: ssh-keygen -t rsa -b 4096 -P '' -f .\/bitrise-ssh -m PEM This generates two files in the current directory (the directory where you run the command): bitrise-ssh (private key) bitrise-ssh.pub (public key) Copy and paste the public key to your Git hosting service (for example, GitHub), and when you register your app on bitrise.io , you’ll have to provide the private key . " }, 
{ "title" : "Configuring SSH keys for your Bitrise app ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-55007-configuring-ssh-keys.html#UUID-b567647e-2421-59ae-7fd8-ec3d3e337378_UUID-d340b1a6-bd1c-c17d-8058-7d574e117a9e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Configuring SSH keys \/ Configuring SSH keys for your Bitrise app ", 
"snippet" : "To configure SSH keys on bitrise.io : Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . Find the SSH settings section. Click Change SSH keypair . If you haven't had an SSH key added before, the button will show Ad...", 
"body" : "To configure SSH keys on bitrise.io : Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . Find the SSH settings section. Click Change SSH keypair . If you haven't had an SSH key added before, the button will show Add SSH keypair instead. Choose from one of three options: Generate SSH keypair and auto-add it to GitHub : Bitrise automatically registers a public SSH key to your GitHub repository. Choose this if you have administrator rights to the repository. Generate SSH keypair : Bitrise generates an SSH keypair for you, and you have to manually register the public key to your Git repository. Use your own SSH keypair : You provide your own SSH keypair for authentication, and you have to manually register the public key to your Git repository. " }, 
{ "title" : "Managing user access to an app ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43194-managing-user-access-to-an-app.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app ", 
"snippet" : "To collaborate on an app, users must be part of the app's team. You can add Workspace groups to an app from the Workspace settings' Team page or from the App settings page. Each Bitrise app is owned by a Workspace - but this doesn't mean that all members belonging to that Workspace have access to a ...", 
"body" : "To collaborate on an app, users must be part of the app's team. You can add Workspace groups to an app from the Workspace settings' Team page or from the App settings page. Each Bitrise app is owned by a Workspace - but this doesn't mean that all members belonging to that Workspace have access to a given app. In order to be able to collaborate on an app, users must be part of the app's team. An app's team consists of all users invited to work on an app. There are three ways to add users to an app's team: Adding outside contributors . Adding one of the groups from the Workspace that owns the app . Assigning a Workspace member to the app's team . This also allows to set user roles at the same time. Similarly, there are two ways to revoke access to an app: Revoking access from a group . Revoking access from a user . " }, 
{ "title" : "Adding an outside contributor to an app team ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43194-managing-user-access-to-an-app.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-31b59ff1-1c2f-4b90-ba57-3d0643aef261", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding an outside contributor to an app team ", 
"snippet" : "An outside contributor is a user who is a part of an app's team but isn't a member of the Workspace that owns the app. Admins and owners only You need to be an admin on the app's team or one of the owners of the Workspace that owns the app to be able to add new team members to an app. Allowing outsi...", 
"body" : "An outside contributor is a user who is a part of an app's team but isn't a member of the Workspace that owns the app. Admins and owners only You need to be an admin on the app's team or one of the owners of the Workspace that owns the app to be able to add new team members to an app. Allowing outside contributors Workspaces can disable allowing outside contributors. To do so, go to your Workspace's profile page and select the Team tab on the left. Switch to the Outside contributors tab and toggle off Allow outside contributors . When an app with outside contributors is transferred to a Workspace that doesn't allow outside contributors, the existing outside contributors of the app are automatically removed from the app's team. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . From the menu on the left, select Team . Make sure that you are on the People tab. Click Add Contributor . Type their email address and select their role . If they are not registered on Bitrise, we will send out an invitation email for them. Click Save . " }, 
{ "title" : "Adding Workspace groups to an app team ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43194-managing-user-access-to-an-app.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-8fe04035-1454-48b3-9962-88e39d4bf4f4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Adding Workspace groups to an app team ", 
"snippet" : "To assign users from a Workspace to a certain app, the most convenient way is to assign their group to the app's team. Assigning a Workspace group a user role means that all users in the group will have the same role on the app's team. An app team consisting of Workspace groups Let’s say the Workspa...", 
"body" : "To assign users from a Workspace to a certain app, the most convenient way is to assign their group to the app's team. Assigning a Workspace group a user role means that all users in the group will have the same role on the app's team. An app team consisting of Workspace groups Let’s say the Workspace called TestSpace owns an app called TestApp . TestOrg has the following groups: Group Alpha - they are assigned to TestApp with an Admin role. Members of this group can assign other groups to the app or add outside contributors, change app settings, manage roles and workflows. Group Beta - they are assigned to TestApp with a Developer role. Members of this group can run builds, view build logs and view builds. Group Gamma - they are assigned to TestApp with a Tester\/QA role. They can only view builds. There are two ways to assign Workspace groups to a Bitrise app's team: You can assign it from the Team tab of the Workspace's profile settings page. You can assign it on the App settings page of the app. " }, 
{ "title" : "Revoking access to an app from a group ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43194-managing-user-access-to-an-app.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-b9539044-9756-8289-bf5b-ba8e6f417fef", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Revoking access to an app from a group ", 
"snippet" : "Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . From the menu on the left, select  Team . Go to the  Group  tab. Search for the group you would like to remove and click \" \". Click Revoke access in the resulting ...", 
"body" : "Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . From the menu on the left, select  Team . Go to the  Group  tab. Search for the group you would like to remove and click \" \". Click Revoke access in the resulting window to revoke the group's access from the app. " }, 
{ "title" : "Revoking access to an app from a single user ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43194-managing-user-access-to-an-app.html#UUID-a34567f4-74e4-1f1d-7d8d-96cbffcad04f_UUID-e6e5e8fc-9348-c16b-595b-40f3315404df", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Managing user access to an app \/ Revoking access to an app from a single user ", 
"snippet" : "Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . From the menu on the left, select  Team . Go to the  People  tab. Search for the user you would like to remove and click \" \". Click Yes in the resulting window to ...", 
"body" : "Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . From the menu on the left, select  Team . Go to the  People  tab. Search for the user you would like to remove and click \" \". Click Yes in the resulting window to revoke their access from the app. " }, 
{ "title" : "User roles on app teams ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43195-user-roles-on-app-teams.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams ", 
"snippet" : "Bitrise apps have user roles defined on their team. They limit what you can and cannot do with an application. The same user can have different roles on different apps. Roles are very important on Bitrise. They limit what actions a user can and cannot perform on an application. Roles work on an app ...", 
"body" : "Bitrise apps have user roles defined on their team. They limit what you can and cannot do with an application. The same user can have different roles on different apps. Roles are very important on Bitrise. They limit what actions a user can and cannot perform on an application. Roles work on an app basis: the same user can have different roles on different applications. Workspace members - both viewers and managers - can be assigned to an app’s team either individually or in a Workspace group . There are four types of roles that you can assign to a user on an app's team: Admin DevOps Engineer Developer Tester\/QA In addition, each app has Owners. " }, 
{ "title" : "Owners ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43195-user-roles-on-app-teams.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-02b43655-adc0-7918-6601-50d7220b1e50", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Owners ", 
"snippet" : "Bitrise apps are owned by Workspaces. On the app's team, users who are owners in the Workspace have the owner access right to the app. Owners have unlimited access to apps. Only owners can destroy apps or transfer the ownership of apps, and only they have access to payment information....", 
"body" : "Bitrise apps are owned by Workspaces. On the app's team, users who are owners in the Workspace have the owner access right to the app. Owners have unlimited access to apps. Only owners can destroy apps or transfer the ownership of apps, and only they have access to payment information. " }, 
{ "title" : "Admins ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43195-user-roles-on-app-teams.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-f1a17dfd-65f7-34dc-80b8-97e2bda479ac", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Admins ", 
"snippet" : "Here’s the role cheatsheet for admins of an app's team: An admin cannot delete an app but can invite other members to work on the app. The admin can also give admin rights to other users - however, they cannot transfer ownership of the app! Release manager role Admins are also granted the Release ma...", 
"body" : "Here’s the role cheatsheet for admins of an app's team: An admin cannot delete an app but can invite other members to work on the app. The admin can also give admin rights to other users - however, they cannot transfer ownership of the app! Release manager role Admins are also granted the Release manager role by default. They can also grant Release manager acccess to other users: Granting Release manager rights. " }, 
{ "title" : "Developers ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43195-user-roles-on-app-teams.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-6f2687e8-fe63-bc07-4766-37d5e7fe727c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Developers ", 
"snippet" : "Here’s the role cheatsheet for developers: Developers cannot change team member roles, add new team members, remove existing team members or create, edit or delete workflows. They can, however, run builds and view build logs. They have no access to sensitive data such as payment information, access ...", 
"body" : "Here’s the role cheatsheet for developers: Developers cannot change team member roles, add new team members, remove existing team members or create, edit or delete workflows. They can, however, run builds and view build logs. They have no access to sensitive data such as payment information, access tokens or even webhooks. " }, 
{ "title" : "Platform Engineers ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43195-user-roles-on-app-teams.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-eddaddc1-0e8a-0b81-479c-50d7b1c8045f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Platform Engineers ", 
"snippet" : "Here's the role cheatsheet for Platform Engineers: Platform Engineers can do everything that Developers can, and in addition to that, they can also edit Workflows. They can't access the app settings, manage team members or billing, and they can't delete the app....", 
"body" : "Here's the role cheatsheet for Platform Engineers: Platform Engineers can do everything that Developers can, and in addition to that, they can also edit Workflows. They can't access the app settings, manage team members or billing, and they can't delete the app. " }, 
{ "title" : "Testers\/QA ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43195-user-roles-on-app-teams.html#UUID-a89f6244-90e5-bb75-35b5-730d57a0daf8_UUID-a9a25610-27f5-bdde-ac43-9a14c460edb2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ User roles on app teams \/ Testers\/QA ", 
"snippet" : "Here’s the role cheatsheet for testers\/QA: Testers can only view builds. They cannot access build logs and they cannot modify the app in any way or form. They have no access to sensitive data such as payment information, access tokens or even webhooks....", 
"body" : "Here’s the role cheatsheet for testers\/QA: Testers can only view builds. They cannot access build logs and they cannot modify the app in any way or form. They have no access to sensitive data such as payment information, access tokens or even webhooks. " }, 
{ "title" : "Changing the owner of an app ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43196-changing-the-owner-of-an-app.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app ", 
"snippet" : "You can change the owner of an app from the Workspace profile page or from the app's App settings page. Workspaces own apps. When you add an app to Bitrise, you select the Workspace that will act as the owner of the app. From that point, only the owners of the Workspace can change the ownership of t...", 
"body" : "You can change the owner of an app from the Workspace profile page or from the app's App settings page. Workspaces own apps. When you add an app to Bitrise, you select the Workspace that will act as the owner of the app. From that point, only the owners of the Workspace can change the ownership of the app. It can happen that you need to transfer an application on Bitrise to another Workspace. This can be done in two ways: You can select the apps you want to transfer from the Workspace profile page's Apps tab. Any given app can be transferred from the app's App settings page. " }, 
{ "title" : "Transferring apps from the Workspace profile page ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43196-changing-the-owner-of-an-app.html#UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27_UUID-b2b1e154-2028-d657-4d5a-34b42f9f7a17", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app \/ Transferring apps from the Workspace profile page ", 
"snippet" : "Owners only You must be an owner of the Workspace to transfer its apps to another Workspace. Apps with outside contributors When transferring apps with outside contributors to a Workspace that doesn't allow outside contributors, the existing contributors are automatically removed from the app's team...", 
"body" : "Owners only You must be an owner of the Workspace to transfer its apps to another Workspace. Apps with outside contributors When transferring apps with outside contributors to a Workspace that doesn't allow outside contributors, the existing contributors are automatically removed from the app's team. Log in to Bitrise and hover over the left navigation bar. Make sure you have the right Workspace selected. Select Settings . On the left, select Apps from the menu options. Click the Transfer ownership (↔) button next to the app's name to select an app. Select a user or Workspace to transfer the app to them. Click Transfer ownership to finalize. Transferring ownership is permanent Only the new owner can change the app's ownership after the transfer has been completed! " }, 
{ "title" : "Transferring an app from App settings ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43196-changing-the-owner-of-an-app.html#UUID-0a12640a-cf3e-6089-dd61-8f3d5da9ca27_UUID-89e9426d-8ed5-9222-4c14-f7621e078f5f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Changing the owner of an app \/ Transferring an app from App settings ", 
"snippet" : "Log in with an account that is an owner of the app. Open the App Settings page. Make sure that you have General selected from the menu options on the left. Scroll down to the Danger Zone label. Click the Transfer app ownership button. Select a user or a Workspace to transfer the app to them. Click T...", 
"body" : "Log in with an account that is an owner of the app. Open the App Settings page. Make sure that you have General selected from the menu options on the left. Scroll down to the Danger Zone label. Click the Transfer app ownership button. Select a user or a Workspace to transfer the app to them. Click Transfer ownership to finalize. Transferring ownership is permanent! Only the new owner can change the app's ownership after the transfer has been completed! " }, 
{ "title" : "Enabling the Bitrise Support Access for your app ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-43383-enabling-the-bitrise-support-user-for-your-app.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Enabling the Bitrise Support Access for your app ", 
"snippet" : "You can enable the Bitrise Support Access from the App settings page. This way, our support team can have access to your project, specifically your Workflow, build log, app settings, and your bitrise.yml. If you’re stuck with a problem on Bitrise, go to our Support Center page and see what helps you...", 
"body" : "You can enable the Bitrise Support Access from the App settings page. This way, our support team can have access to your project, specifically your Workflow, build log, app settings, and your bitrise.yml. If you’re stuck with a problem on Bitrise, go to our Support Center page and see what helps you the most: you can browse our Documentation , check out our Knowledge Base or our community pages to find solutions for specific issues. You can also get in touch with our Support team by clicking the Submit a Request button. In this article we describe how you can enable the Bitrise Support Access so that our Support team can have access to your app , specifically your Workflow , build log, app settings or your bitrise.yml file. With the toggle function, you can easily turn the Bitrise Support Access on and off. No need to add us as a user to your app's Team. The Bitrise Support user, when enabled, has Admin access to your app. That means it can do anything that a regular user with Admin access rights on an app can do: it has access to your builds and can edit your Workflows, modify the inputs of the Team , Code and options in App Settings . No access to billing information The Bitrise Support user can’t see your Account information or any Billing information. Only the owner of the account has access to this information and has the right to modify any account-related records. The Support user can’t see your other apps where the Support user is not enabled. For details, see What the Bitrise Support user can\/can't do? How long does the Bitrise Support Access remain active? Due to security reasons once you toggle the Bitrise Support Access on, it will remain active for two weeks after which it automatically gets revoked. Let’s see how to set it up! Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select General from the menu options. Scroll down to the Support Access and toggle the switch to the right to enable it. It might take a couple of seconds to work and you might need to refresh your page to see the enabled status. In case of a failing Workflow, our best practice is to create a new and correct version of the failing Workflow called support-testing . You can compare our support-testing with your own and update yours or keep the support-testing orkflow, rename it as you wish, and develop it further. " }, 
{ "title" : "Apps with submodules or private repo dependencies ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-65462-apps-with-submodules-or-private-repo-dependencies.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies ", 
"snippet" : "Bitrise needs access to all repositories or submodules for a successful build, so if your app has submodules or private repo dependencies, you must grant Bitrise access to those as well. If you have a project with one or more submodules or other private repository dependencies (for example, CocoaPod...", 
"body" : "Bitrise needs access to all repositories or submodules for a successful build, so if your app has submodules or private repo dependencies, you must grant Bitrise access to those as well. If you have a project with one or more submodules or other private repository dependencies (for example, CocoaPods repositories), Bitrise needs access to all repositories or submodules for a successful build. Bitrise uses SSH to access Git repositories of private apps : to grant access, you need to make sure all the repositories can be accessed with the public SSH key generated for your Bitrise app. App privacy The scope of this guide mainly covers private Bitrise apps. The Git cloning submodules and repository dependencies section briefly covers how to access multiple repositories with a public app : the process is much simpler and all you need is to make sure that all repositories have an HTTPS git clone URL. You don’t need to worry about SSH keys with public apps, as they cannot have them. There are two ways to achieve this: Register the same SSH key for every repository you have to access during the build. Register the SSH key with a bot user and add that user to all repositories. Registering the same SSH key for every repository is the best, most secure way - but not all services support it. GitLab and Bitbucket does support it, GitHub, however, doesn’t. If your code is stored on GitHub, read on! We’ll go through the other option, using a bot user or machine user - GitHub calls them machine users - in detail. In brief, the concept is simple: you register the Bitrise public SSH key to a user and add that user to all repositories that have to be accessed for your Bitrise build. Machine user with read only access It is not required to use a special bot\/machine user: you can add the SSH key to your own account on the git hosting service. The best practice, however, is to use a machine user, with read only access, for those repositories you want to access during the build. GitHub recommends this method for accessing multiple repositories. Let’s quickly go through an example. The MultiBit app We have a Bitrise app we’ll call MultiBit. It has a main repository and it needs to pull additional data from two other, private repositories during a Bitrise build. Our main user is called BitMan and his GitHub account is linked to his Bitrise account. To access the private repositories during the build, BitMan creates another user on GitHub, called BitBot. BitBot will be the machine user. Now, BitMan accesses the App Settings page of his Bitrise app, and copies the public SSH key from the Current SSH public key field. BitMan then adds the SSH key to the BitBot user on GitHub and adds BitBot to the two private repositories as a collaborator. Now BitBot has the Bitrise public key and has access to the private repositories as necessary. It’s time to test if BitMan’s setup works. BitMan goes to Bitrise and opens the Workflow Editor . He has the Activate SSH Key Step in his repository so the SSH key will work. BitMan adds a Script Step to clone the private repositories - as the Git Clone Step only works with the main repository! Once all that is done, the build should work as expected. " }, 
{ "title" : "Using a machine user to access private repositories ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-65462-apps-with-submodules-or-private-repo-dependencies.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-42246c46-c8ec-1c51-ef6c-63003b0871d4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories ", 
"snippet" : "A machine or bot user is a GitHub user that is not used by humans, instead it is exclusively used for automation. This is the best way to access a private repository: you create a machine user, add a public SSH key to the user, and then provide the user read access to the repository....", 
"body" : "A machine or bot user is a GitHub user that is not used by humans, instead it is exclusively used for automation. This is the best way to access a private repository: you create a machine user, add a public SSH key to the user, and then provide the user read access to the repository. " }, 
{ "title" : "Adding the machine user to your repository ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-65462-apps-with-submodules-or-private-repo-dependencies.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-409cccb5-3655-8c57-64ad-cf1c1b622985", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the machine user to your repository ", 
"snippet" : "Create a new GitHub user account, one that will serve as the machine user. Go to your repository on GitHub and select the Settings tab. On the left side menu, select Collaborators & teams . Scroll down to the Collaborators window. In the search input field, search for the username of your newly crea...", 
"body" : "Create a new GitHub user account, one that will serve as the machine user. Go to your repository on GitHub and select the Settings tab. On the left side menu, select Collaborators & teams . Scroll down to the Collaborators window. In the search input field, search for the username of your newly created account. Click Add Collaborator . Change the user permission to Read . By default, the invited collaborator’s permission is Write . You can keep it that way, of course, but a Read permission is enough for Bitrise. " }, 
{ "title" : "Adding the SSH key to the machine user ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-65462-apps-with-submodules-or-private-repo-dependencies.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-ad438528-6ba1-7d9f-2af3-d6caa5f40f86", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Using a machine user to access private repositories \/ Adding the SSH key to the machine user ", 
"snippet" : "In order for Bitrise to be able to use the machine user to access your repository, you must add the same SSH key to the machine user and the app on Bitrise....", 
"body" : "In order for Bitrise to be able to use the machine user to access your repository, you must add the same SSH key to the machine user and the app on Bitrise. " }, 
{ "title" : "Git cloning submodules and repository dependencies ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-65462-apps-with-submodules-or-private-repo-dependencies.html#UUID-7977c15f-d343-5588-763e-34b407ef2d6d_UUID-bb56804c-5dcf-b35c-05de-c4a18d4c4b11", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Apps with submodules or private repo dependencies \/ Git cloning submodules and repository dependencies ", 
"snippet" : "You have two options when it comes to accessing multiple repositories during a Bitrise build: Cloning all the repositories on the virtual machine, and accessing them as needed. Adding the additional repositories as submodules to your main repository. In the latter case, you do not need to worry abou...", 
"body" : "You have two options when it comes to accessing multiple repositories during a Bitrise build: Cloning all the repositories on the virtual machine, and accessing them as needed. Adding the additional repositories as submodules to your main repository. In the latter case, you do not need to worry about cloning them: if you set up SSH access correctly, the Git Clone Step will take care of everything. If you don’t want to or can’t add your repository dependencies as submodules, read on: we’ll talk about how to clone them. Public vs private apps There is one important detail to keep in mind when you want to give access to all submodules or private repository dependencies for an app: the app’s privacy settings determine what git URL should you use . If you have a private app: use SSH URLs everywhere! Most services support SSH key based authentication only for SSH URLs (for example, git@github.com:bitrise-io\/bitrise.git ). Therefore every private repository you want to use have to be addressed with the SSH URL. If you have direct private git repo references in your CocoaPods Podfile, you’ll have to use the SSH URL there as well. The same applies for submodules and every other private git repository URL you want to use with the SSH key you register on bitrise.io . If you have a public app: use HTTPS URLs everywhere! SSH URLs require SSH keys even if the repository is public. For security reasons, public apps CANNOT have SSH keys. As HTTPS git clone URLs do not require any authentication in the case of public repositories, they should be used for public Bitrise apps. The Git Clone Step The Git Clone Step only works with the main repository. If you need to access multiple private repositories, do not add multiple Git Clone Steps. Use Script Steps to clone those repositories on the Bitrise virtual machine. To clone additional private repositories during the build: Make sure you added a user with the Bitrise public SSH key to all the repositories. Make sure you have the Activate SSH Key Step and the Git Clone Step at the start of your Workflow. Add one or more Script Steps to clone the additional private repositories to the build. Run a build. Cloning issues If you encounter issues with git cloning - for example, not all submodules are cloned - try the following command after cloning: git submodule update –recursive –remote –merge –force " }, 
{ "title" : "Public apps ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-55008-public-apps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Public apps ", 
"snippet" : "To create a public app, simply add a new app to Bitrise and at the start of the process, set the privacy of the app to Public. If your Bitrise app is public, anyone who has the build URL can see the build logs. Open source projects are great - we all love them! They can be a pain to maintain, howeve...", 
"body" : "To create a public app, simply add a new app to Bitrise and at the start of the process, set the privacy of the app to Public. If your Bitrise app is public, anyone who has the build URL can see the build logs. Open source projects are great - we all love them! They can be a pain to maintain, however, especially with CI\/CD in the picture. That’s why we have introduced the Public Apps feature for Bitrise: to make everyone’s life a lot easier! If your Bitrise app is public, anyone who has the build URL can see the build logs. For example, if the CI status check on GitHub fails on a pull request, anyone can click on the build URL and view the build logs. To create a public app, simply add a new app to Bitrise and at the start of the process, set the privacy of the app to Public . Can't modify privacy later You can't change this setting later! Once you've added an app as a public app, you can't set it back to private. You would have to add the app again. When you have a public app, outside contributors can troubleshoot issues easier, find out why, for example, a pull request of theirs resulted in a failed build. They do not have to be invited to a Bitrise team to be able to view Bitrise logs and they do not need the help of a Bitrise team member, either. Of course, this does not mean anyone can do anything with your public app on Bitrise. If the user viewing the logs is not invited to work on the app in some role, they will only be able to: View the build logs. Download the build logs. View the build’s bitrise.yml file. Public app’s build logs are available for anyone Remember: a public app’s build logs and bitrise.yml file can be seen by anyone - make sure these files do not expose anything you do not want to be seen! " }, 
{ "title" : "Creating white label app versions ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-70937-creating-white-label-app-versions.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions ", 
"snippet" : "You can create different versions of your white label project and build all or just one version by chaining Workflows and setting differences in Environment Variables. This guide explains how to create different versions of your white label project and build all or just one version by chaining Workf...", 
"body" : "You can create different versions of your white label project and build all or just one version by chaining Workflows and setting differences in Environment Variables. This guide explains how to create different versions of your white label project and build all or just one version by chaining Workflows and setting differences in Environment Variables. In this article, we’re building three individual versions (red, green, white) of our white label project. What you’ll need for this setup: A main Workflow that launches each version-specific Workflow. One or more version-specific Workflow(s) where you can set all the parameters that distinguish your versions from each other. A utility Workflow which describes your build logic, and refers to the version-specific options as parameters. Utility Workflows are Workflows that have an underscore before their Workflow ID . Utility Workflows cannot be executed with the bitrise_run command: you need to reference them with the before_run or after_run properties. You can chain utility Workflows with your regular Workflows in the Workflow Editor . " }, 
{ "title" : "Prepping Workflows of a white label app ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-70937-creating-white-label-app-versions.html#UUID-30061fe3-6a35-8213-71dd-492d8203959f_UUID-25a443cf-402b-2f60-63df-eb7f5b6ca65c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions \/ Prepping Workflows of a white label app ", 
"snippet" : "Add your app to Bitrise in the usual way. Click your app on the Dashboard and go to Workflows . Next to WORKFLOW , click + to create your main Workflow. Add a new Workflow based on an Empty Workflow . In this example, our main Workflow is called allcolor . This Workflow will start running your versi...", 
"body" : "Add your app to Bitrise in the usual way. Click your app on the Dashboard and go to Workflows . Next to WORKFLOW , click + to create your main Workflow. Add a new Workflow based on an Empty Workflow . In this example, our main Workflow is called allcolor . This Workflow will start running your version-specific Workflows in the chain. Click + again to create your version-specific Workflow. Keep adding as many Workflows as many different versions you wish to create. Go to the Env Vars tab and add your version-specific parameters to each Workflow you’ve just created. As you can see in this image we’re adding Workflow Environment Variables to our green , red and white Workflows but leaving allcolor intact. Go back to the Workflows tab and click Workflow to create your utility Workflow . Make sure you give a name that starts with an underscore, for example, _runner , otherwise Bitrise CLI will not treat it as a utility Workflow. Add Steps to your utility Workflow. In this example, we’re adding a Script Step which will inherit the Environment Variable from the Workflows and print out the value in the build log. " }, 
{ "title" : "Chaining Workflows for a white label app ", 
"url" : "88887-41967-bitrise-docs/88887-54461-apps/88887-70937-creating-white-label-app-versions.html#UUID-30061fe3-6a35-8213-71dd-492d8203959f_UUID-88050b24-4a07-9e00-402c-bc27f8ebefbf", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Apps \/ Creating white label app versions \/ Chaining Workflows for a white label app ", 
"snippet" : "Now that we have a bunch of Workflows ready, it’s time to chain them together in the right order. Select your main Workflow ( allcolor in this example) that is responsive to triggers. Click Add Workflow after , select the version-specific Workflow, and hit Done . Click Add Workflow after again and a...", 
"body" : "Now that we have a bunch of Workflows ready, it’s time to chain them together in the right order. Select your main Workflow ( allcolor in this example) that is responsive to triggers. Click Add Workflow after , select the version-specific Workflow, and hit Done . Click Add Workflow after again and add the utility Workflow right after the version-specific Workflow. Keep adding Workflows depending on how many versions you’d like to build. In this guide, we’re adding 3 different types of Workflows after allcolor where each Workflow is followed by the same utility Workflow. This is what the setup looks like on the Workflows tab. Go back to your Build’s page and click Start\/Schedule a build . In the Build configuration pop-up window, select your main Workflow under Workflow . This will kickstart your chained Workflows and build the app versions of your white label app. In our simple example, here is the output of the chained Workflows: " }, 
{ "title" : "Workflows and Pipelines ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines ", 
"snippet" : "Steps, Workflows, and Pipelines are the heart of how Bitrise works. A Bitrise build is simply a series of Steps, defined in a Workflow, executed by the Bitrise CLI on our virtual machines (or your own). A Pipeline is a collection of Workflows, organised in Stages. Steps and Workflows are the heart o...", 
"body" : "Steps, Workflows, and Pipelines are the heart of how Bitrise works. A Bitrise build is simply a series of Steps, defined in a Workflow, executed by the Bitrise CLI on our virtual machines (or your own). A Pipeline is a collection of Workflows, organised in Stages. Steps and Workflows are the heart of how Bitrise works. A Bitrise build is simply a series of Steps, defined in a Workflow, executed by the Bitrise CLI on our virtual machines (or your own). A Step contains the code that performs the build task. You can configure the inputs and parameters that define the task, and view and reuse the outputs a Step generates. When a build of an app is running, the Steps will be executed in the order that is defined in the Workflow. You can easily move Steps around in a Workflow, you can chain different Workflows together , and you can configure your app so that different branches or code events trigger builds with different Workflows. You can execute multiple Workflows in parallel in a Pipeline . Pipelines are the highest level of the Bitrise CI\/CD configuration. It consists of Stages: each Stage can contain multiple Workflows that are executed in parallel. " }, 
{ "title" : "Steps ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43226-introduction-to-steps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Steps ", 
"snippet" : "A Step is a block of script execution that encapsulates a build task on Bitrise: the code to perform that task, the inputs and parameters you can define for the task, and the outputs the task generates. Steps are the heart of Bitrise. A Step is a build task: for example, the Git Clone Step clones yo...", 
"body" : "A Step is a block of script execution that encapsulates a build task on Bitrise: the code to perform that task, the inputs and parameters you can define for the task, and the outputs the task generates. Steps are the heart of Bitrise. A Step is a build task: for example, the Git Clone Step clones your Git repository at the start of a build while the Google Play Deploy Step can deploy your finished app to the Play Store. A Step contains the code that performs the build task. You can configure the inputs and parameters that define the task, and view and reuse the outputs a Step generates. Reusing the output means that another Step can use it as the value of one of its inputs. Our Steps are defined in YAML format, and written in either bash or Go. You can find a list of our Steps in: The Integrations page . The Bitrise StepLib . The Workflow Editor. You can also create and run any custom script you want as part of your Bitrise build using the Script Step. All you need to do is specify the script runner (the default is bash), add the script, and run a build. For more information on how to set up these custom scripts, check out Bitrise Script Step - Running (Bash, Python, NodeJS, Ruby, Swift, Kotlin) . For the purposes of your builds, Steps can be managed directly from the Workflow Editor. You can rearrange them, set their versions, add or remove Steps at any time. " }, 
{ "title" : "Types of Steps ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43226-introduction-to-steps.html#UUID-922d7042-4d8c-ecaf-aa47-00a99e408e72_UUID-c832be15-6a4f-dd9f-51c0-9265abcdd86c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Steps \/ Types of Steps ", 
"snippet" : "Bitrise has over 300 Steps in its  Step Library (StepLib) which third-party companies or open-source teams can enrich with Steps based on their services\/tools. There are three different types of Steps at Bitrise. You can identify each one based on their labels on our GUI: Official Bitrise Steps : Th...", 
"body" : "Bitrise has over 300 Steps in its  Step Library (StepLib) which third-party companies or open-source teams can enrich with Steps based on their services\/tools. There are three different types of Steps at Bitrise. You can identify each one based on their labels on our GUI: Official Bitrise Steps : These Steps are created and maintained by Bitrise. These Steps are labeled by a green badge and a \"B\". Verified Steps : These Steps are created and maintained by the community, but they are owned by a service or tool or an open-source team that guarantees secure, maintained, consistent, and high-quality performance for any Bitrise user. These Steps are labeled by a blue badge and a check mark. For more information about Verified Steps, check out our guide . Community Steps : These Steps can be created by anyone in the community. These Steps are not labeled and don't have a badge. If you would like to learn how to develop Steps and share them with the Bitrise community, check out Developing a new Step. " }, 
{ "title" : "Adding Steps to a Workflow ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43227-adding-steps-to-a-workflow.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow ", 
"snippet" : "Steps can be added or removed any time from your Workflows. You can add any Step to your Workflow - there are absolutely no restrictions. It’s possible to add a Step specific to, for example, iOS apps to a Workflow of an Android app. Steps can be added or removed any time from your Workflows. When a...", 
"body" : "Steps can be added or removed any time from your Workflows. You can add any Step to your Workflow - there are absolutely no restrictions. It’s possible to add a Step specific to, for example, iOS apps to a Workflow of an Android app. Steps can be added or removed any time from your Workflows. When adding a new app to Bitrise, the project scanner generates at least one Workflow with some default Steps but you don't have to use these at all: it's up to you what Steps you want to include. You can add any Step to your Workflow - there are absolutely no restrictions. Please note that this means that it’s possible to add a Step specific to, for example, iOS apps to a Workflow of an Android app. Always make sure you only add the relevant Steps to your Workflow! " }, 
{ "title" : "Adding Steps in the Workflow Editor ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43227-adding-steps-to-a-workflow.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-45501245-c40d-38b0-da60-597e96757093", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Adding Steps in the Workflow Editor ", 
"snippet" : "Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Click the + symbol between two Steps to insert a Step at that position. Search for the Step you need. Search filte...", 
"body" : "Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Click the + symbol between two Steps to insert a Step at that position. Search for the Step you need. Search filter Be aware of the filter to the right of the search field. By default, the filter is set to the platform type of your app. For example, if you want to add a Step to an iOS app, the the search will be filtered to iOS Steps. Click ALL to search among all Steps. Click the Step to add it to the Workflow. " }, 
{ "title" : "Adding Steps from alternative sources ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43227-adding-steps-to-a-workflow.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-958fab21-37d0-bfa5-e283-b2dbec9c9096", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Adding Steps from alternative sources ", 
"snippet" : "Generally, we recommend using Steps that are part of the official Bitrise Step Library. But you can add Steps from other sources, if you want to: you can use either a Git URL or a local path. On the Bitrise website, the git:: special source is the easiest way to use a Step that is not in the Bitrise...", 
"body" : "Generally, we recommend using Steps that are part of the official Bitrise Step Library. But you can add Steps from other sources, if you want to: you can use either a Git URL or a local path. On the Bitrise website, the git:: special source is the easiest way to use a Step that is not in the Bitrise Step Library. Let’s see how. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select bitrise.yml from the navigation menu. Add the git URL of the Step you want to use. In this example, we’re adding the Script Step from a git source: - git::https:\/\/github.com\/bitrise-io\/steps-script.git@1.1.3: Click Save . " }, 
{ "title" : "Removing a Step from a Workflow ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43227-adding-steps-to-a-workflow.html#UUID-efdef6c2-cf0b-4921-7186-79a7db0e9bea_UUID-f4244ae4-5427-faf1-f517-f4123b4d5cb8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Adding Steps to a Workflow \/ Removing a Step from a Workflow ", 
"snippet" : "You can remove a Step at any time. Be aware, however, that if you add it back at a later date, the Step inputs will be set to the default value - any custom configuration will be gone. Disabling a Step If you don't want a Step to run but want to keep the Step configuration intact, you can disable th...", 
"body" : "You can remove a Step at any time. Be aware, however, that if you add it back at a later date, the Step inputs will be set to the default value - any custom configuration will be gone. Disabling a Step If you don't want a Step to run but want to keep the Step configuration intact, you can disable the Step: Enabling or disabling a Step conditionally. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Click the Step you want to remove. Click the trash bin icon on the right. Click Save . " }, 
{ "title" : "Step versioning ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43228-step-versions.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning ", 
"snippet" : "Bitrise Step versions follow semantic versioning: a version number looks like MAJOR.MINOR.PATCH. For example, version 3.2.1 is the first patch of the second minor version of the third major version. Bitrise Step versions follow semantic versioning: a version number looks like MAJOR.MINOR.PATCH. For ...", 
"body" : "Bitrise Step versions follow semantic versioning: a version number looks like MAJOR.MINOR.PATCH. For example, version 3.2.1 is the first patch of the second minor version of the third major version. Bitrise Step versions follow semantic versioning: a version number looks like MAJOR.MINOR.PATCH. For example, version 3.2.1 is the first patch of the second minor version of the third major version. You can use any existing version of a Step in your Workflows, and different versions of the same Step in different Workflows. We regularly update our Steps to make sure they are fully equipped for our users’ needs. However, you don’t have to use the latest version if you don’t want to: if an old version is stable and compatible with your build, feel free to continue using that, or roll back to it any time. " }, 
{ "title" : "Locking a Step to a major or minor version ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43228-step-versions.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-2ad78012-cd36-5b94-5377-9d556ce3a779", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Locking a Step to a major or minor version ", 
"snippet" : "On the graphical UI of the Workflow Editor, you can choose between locking a Step to either a major version or a minor version in any of your Workflows. This determines what version of the Step your Workflow will use. Locking a Step to a version means that your Workflow is automatically updated to u...", 
"body" : "On the graphical UI of the Workflow Editor, you can choose between locking a Step to either a major version or a minor version in any of your Workflows. This determines what version of the Step your Workflow will use. Locking a Step to a version means that your Workflow is automatically updated to use the latest release of the Step’s selected version type, either major or minor, but it won’t get updated if a different major or minor version is released. If a Step is locked to a major version, it is automatically updated if a new minor version or a new patch for that major version is released. If a new major version is released, it won’t be updated. If a Step is locked to a minor version, it is automatically updated only if a new patch for that minor version is released. If a new minor or major version is released, it won’t be updated. Version locking The Example Step’s current version in the Workflow is 2.3.3. A new minor version comes out: 2.4.0. If the Step is locked to major version 2.x.x, the Step is updated to 2.4.0. If the Step is locked to minor version 2.3.x, the Step is NOT updated to 2.4.0. Now let’s say the Example Step gets a new major version: 3.0.0! In that case, the Step will not be automatically updated either way. If you want to use the new version, you need to lock the Step to either major version 3.x.x or minor version 3.0.x. This way you can be sure that a new update will not break your builds. To lock a Step to a major or minor version: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Select the Step. Next to the name of the current version, open the dropdown menu. Select the major or minor version you need: for example, 3.x.x sets it to the third major version. " }, 
{ "title" : "Using a specific Step version ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43228-step-versions.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-35278d7e-e471-0683-c386-786d7386fda7", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Using a specific Step version ", 
"snippet" : "You have the option of using a specific, static Step version. For example, version 3.2.2. This means that no matter what new versions are released for the Step, your Step version will not be updated in the Workflow. YAML mode only! Please note that you cannot set a specific Step version on the graph...", 
"body" : "You have the option of using a specific, static Step version. For example, version 3.2.2. This means that no matter what new versions are released for the Step, your Step version will not be updated in the Workflow. YAML mode only! Please note that you cannot set a specific Step version on the graphical UI: you can only lock the Step to either a major or minor version. Setting a specific Step version is only possible in YAML mode. To set a specific Step version, you need to add that version to the Step reference in your app’s bitrise.yml file: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Go to the bitrise.yml tab. Find the Workflow and the Step you need. Set the Step version as part of the Step reference. In this example, we're setting the Activate SSH key Step of the primary Workflow to version 4.0.3: workflows:\n primary:\n steps:\n - activate-ssh-key@4.0.3: " }, 
{ "title" : "Using the latest available version of the Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43228-step-versions.html#UUID-be3b0e80-c6fd-363e-1b8c-d71e53b9db6c_UUID-fe4d3bfb-2c1c-9880-de4b-2d57fdb2bbd2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step versioning \/ Using the latest available version of the Step ", 
"snippet" : "Locking on to the latest release of a Step means that if a new version of the Step is released, the user’s Workflow is updated to use that. This includes automatic update to a new major version, potentially breaking the build. So be careful! To make sure your Workflow will always use the latest avai...", 
"body" : "Locking on to the latest release of a Step means that if a new version of the Step is released, the user’s Workflow is updated to use that. This includes automatic update to a new major version, potentially breaking the build. So be careful! To make sure your Workflow will always use the latest available version of a given Step, all you have to do is remove any version information from the Step reference in the bitrise.yml file of your app: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select bitrise.yml from the navigation menu. Find the Workflow and the Step you need. Make sure the Step has no version information: In this example, we're setting the Activate SSH key Step of the primary Workflow to the latest version: workflows:\n primary:\n steps:\n - activate-ssh-key: " }, 
{ "title" : "Step inputs ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-65202-step-inputs.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Step inputs ", 
"snippet" : "Step inputs are the way to configure the Steps for your build. Steps have required inputs that must have a valid value and optional inputs that provide more options to customize your build. Step inputs are the way to configure the Steps for your build. Steps have required inputs that must have a val...", 
"body" : "Step inputs are the way to configure the Steps for your build. Steps have required inputs that must have a valid value and optional inputs that provide more options to customize your build. Step inputs are the way to configure the Steps for your build. Steps have required inputs that must have a valid value and optional inputs that provide more options to customize your build. Click on a Step to bring up its input variables on the right of the currently selected Workflow . Required inputs are marked as such in the Workflow Editor. If required inputs do not have valid values, the Step will fail. Modify a Step input by either: Clicking into the input field. Clicking the CHANGE option next to the input field. You can also use Environment Variables (Env Vars) as Step inputs. " }, 
{ "title" : "Skipping Steps ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43229-skipping-steps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Skipping Steps ", 
"snippet" : "You can configure Steps in your Bitrise builds so that they don't run if the previous Step in the Workflow failed. This can help with avoiding wasting build time and credits. You can skip certain Steps in your Bitrise build. There is no point in running, for example, a unit test Step if the previous...", 
"body" : "You can configure Steps in your Bitrise builds so that they don't run if the previous Step in the Workflow failed. This can help with avoiding wasting build time and credits. You can skip certain Steps in your Bitrise build. There is no point in running, for example, a unit test Step if the previous Step failed to build your app. Of course, there are examples when it’s better to run a Step even if the previous Step failed. For example, if the Cache:Pull Step fails, there is no reason not to run the next Step - in fact, if the next Step is one that installs dependencies then it’s a very bad idea to skip that Step if pulling the cache is unsuccessful. Enabling a Step conditionally You can also configure Steps to run only in certain conditions: Enabling or disabling a Step conditionally. To set a given Step to be skipped if the previous Step failed: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Select the Step you want to skip. On the right, use the toggle to disable the Run if previous Step failed option. " }, 
{ "title" : "Enabling or disabling a Step conditionally ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43230-enabling-or-disabling-a-step-conditionally.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally ", 
"snippet" : "You can enable or disable a Step in any given Workflow, and you can also set conditions for Steps. You can do so, either on your own computer, with the Bitrise CLI or by using the bitrise.yml tab of the Workflow Editor. You can enable or disable a Step in any given Workflow , and you can also set co...", 
"body" : "You can enable or disable a Step in any given Workflow, and you can also set conditions for Steps. You can do so, either on your own computer, with the Bitrise CLI or by using the bitrise.yml tab of the Workflow Editor. You can enable or disable a Step in any given Workflow , and you can also set conditions for Steps. You can do it either on your own computer, with the Bitrise CLI or by using the bitrise.yml tab of the Workflow Editor. We mostly use run_if expressions to do these things. Check out the examples for possible template expressions: Examples of run_if expressions. You can also view the examples on GitHub: Template expression examples . A run_if can be any valid Go template A run_if can be any valid Go template , as long as it evaluates to true or false (or any of the String representation, for example True , t , yes or y are all considered to be true ). If the template evaluates to true , the Step will run, otherwise it won’t. An example run_if to check a custom Environment Variable : run_if: |-\n \t{{enveq \"CUSTOM_ENV_VAR_KEY\" \"test value to test against\"}}\n This run_if will skip the Step if the value of CUSTOM_ENV_VAR_KEY is not test value to test against . " }, 
{ "title" : "Disabling a Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43230-enabling-or-disabling-a-step-conditionally.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-e93cd0fa-7eff-2bd7-3bb4-7f647c03a935", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Disabling a Step ", 
"snippet" : "If you do not want to remove a Step from your Workflow but you don’t want it to run, you can disable it, using a run_if expression. Experimenting with Workflows To experiment with different configurations for a Workflow, without removing or disabling Steps, we recommend cloning the Workflow. You can...", 
"body" : "If you do not want to remove a Step from your Workflow but you don’t want it to run, you can disable it, using a run_if expression. Experimenting with Workflows To experiment with different configurations for a Workflow, without removing or disabling Steps, we recommend cloning the Workflow. You can modify the cloned Workflow as much as you wish without changing anything in the original. Workflow Editor bitrise.yml Open the Workflow you need. Find the Step that you want to disable. In the Additional run conditions input, type false . Conditionals Any condition that evaluates to false works, too. Open your app’s bitrise.yml file. Find the Step that you want to disable. Add run_if: false to it. Conditionals Any condition that evaluates to false works, too. - script:\n run_if: false\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"This will never run, because of run_if:false\" " }, 
{ "title" : "Running a Step only in a CI environment ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43230-enabling-or-disabling-a-step-conditionally.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-91dfef90-1f21-d07e-6897-8353d50b5f97", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Running a Step only in a CI environment ", 
"snippet" : "Running a Step only in a CI environment means your build will skip that particular Step for local builds. Like disabling Steps, you can do this with a run_if expression. Use this to debug builds locally. Enabling CI mode locally CI mode can be enabled on your own Mac\/PC by setting the CI environment...", 
"body" : "Running a Step only in a CI environment means your build will skip that particular Step for local builds. Like disabling Steps, you can do this with a run_if expression. Use this to debug builds locally. Enabling CI mode locally CI mode can be enabled on your own Mac\/PC by setting the CI environment to true (for example, run export CI=true in your Bash Terminal), or by running bitrise run with the --ci flag: bitrise --ci run ... . Workflow Editor bitrise.yml Open the Workflow you need. Find the Step you need. In the Additional run conditions input, type .IsCI . Open your app’s bitrise.yml file. Find the Step you need. Add run_if: .IsCI to its properties: - script:\n run_if: .IsCI\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"This will only ever run in a CI environment because run_if: IsCI\" " }, 
{ "title" : "Running a Step only if the build failed ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43230-enabling-or-disabling-a-step-conditionally.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-6fffa892-07d5-17d9-7a7f-6f27693203e5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Running a Step only if the build failed ", 
"snippet" : "It is possible to run a Step ONLY if the build failed before it got to that particular Step. In addition to run_if , you will need to use the is_always_run property as well. Workflow Editor bitrise.yml Open the Workflow you need. Find the Step that you want to disable. In the Additional run conditio...", 
"body" : "It is possible to run a Step ONLY if the build failed before it got to that particular Step. In addition to run_if , you will need to use the is_always_run property as well. Workflow Editor bitrise.yml Open the Workflow you need. Find the Step that you want to disable. In the Additional run conditions input, type .IsBuildFailed . Make sure the Run even if previous Step(s) failed option is toggled on. Open your app’s bitrise.yml file. Find the Step that you want to disable. Add run_if: .IsBuildFailed to it. Add is_always_run: true to it. This enables the Step to run even if a previous Step failed. - script:\n is_always_run: true\n run_if: .IsBuildFailed\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"Build Failed!\" " }, 
{ "title" : "Ignoring a failed Step without failing the build ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43230-enabling-or-disabling-a-step-conditionally.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-7042c9f8-556b-2f8a-315e-b567247673fb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Ignoring a failed Step without failing the build ", 
"snippet" : "Usually, when a Step fails during a build, the built itself fails, too. This isn't the case with every Step, of course: both the Bitrise.io Cache:Pull and the Bitrise.io Cache:Push Steps can fail without failing the build. You can also configure any other Step to ensure their failure doesn't fail th...", 
"body" : "Usually, when a Step fails during a build, the built itself fails, too. This isn't the case with every Step, of course: both the Bitrise.io Cache:Pull and the Bitrise.io Cache:Push Steps can fail without failing the build. You can also configure any other Step to ensure their failure doesn't fail the build. YAML mode only You can't do this on the graphical UI of the Workflow Editor: you have to edit your app's bitrise.yml file. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select bitrise.yml from the navigation menu. Find the Step you need. Add the is_skippable flag to it and set it to true : - script: \n is_skippable: true \n inputs: \n - content: |- \n # !\/bin\/bash \n echo \"Failing Step.\" \n exit 1 \n # exit 1 would mark this step as Failed, but it won't break the Build \n # because of the is_skippable: true flag \/ property " }, 
{ "title" : "Setting up run_if conditions with Script Steps ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43230-enabling-or-disabling-a-step-conditionally.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-319ce0eb-4b70-deb2-e102-7ee89696d53f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Setting up run_if conditions with Script Steps ", 
"snippet" : "Sometimes the conditions required to determine whether a Step should run or not are complex and multi-layered. If so, using a complex chain of Go templates in a run_if expression can be overwhelming, especially if you prefer other languages instead of Go. In such cases, we recommend using a workarou...", 
"body" : "Sometimes the conditions required to determine whether a Step should run or not are complex and multi-layered. If so, using a complex chain of Go templates in a run_if expression can be overwhelming, especially if you prefer other languages instead of Go. In such cases, we recommend using a workaround: add a Script Step in your Workflow, and write a script that evaluates to a certain value. Store that value in an Environment Variable, and then the Step with the conditional expression only needs to check that value. Using a non-Go script for a run_if expression In this example, we'll create a simple Bash script and store its value, then check whether it matches a preset value. First, we add a Script Step, and in the script content, we define a value. Once the value is defined, we use envman to store it in an Environment Variable. In this particular case, we define a variable in Bash, and use that variable as the value for our Env Var: workflows: \n example: \n steps: \n - script@1:\n title: Do anything with Script step \n inputs: \n - content: |- \n #!\/usr\/bin\/env bash\n # fail if any commands fails \n set -e\n # debug log\n set -x\n # creating the variable and storing it as an Env Var \n my_variable='This is the value we need!' \n envman add --key OUR_CONDITION --value \"$my_variable\"\n We then create a simple run_if expression for the Step for which we need a condition. In this case, our Step is the Save cache Step, and we'll check if the value of the OUR_CONDITION variable matches the value stored in the previous Bash variable: - save-cache@1: \n run_if: |- \n {{getenv \"OUR_CONDITION\" | eq \"This is the value we need!\"}} Since the values match, the Save cache Step will run. " }, 
{ "title" : "Examples of run_if expressions ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43230-enabling-or-disabling-a-step-conditionally.html#UUID-2b8c8853-f79a-c077-88d6-35eab62e5bb5_UUID-7d2bc43d-cb09-d711-38ce-01c35278fdc4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Enabling or disabling a Step conditionally \/ Examples of run_if expressions ", 
"snippet" : "There are many different ways of using a run_if expression. The following Workflow contains examples for most of them, with commented explanations. The expressions are used with Script Steps that, when successfully running, print that the used expression was true. All expressions are valid Go templa...", 
"body" : "There are many different ways of using a run_if expression. The following Workflow contains examples for most of them, with commented explanations. The expressions are used with Script Steps that, when successfully running, print that the used expression was true. All expressions are valid Go templates. To learn about Go templates, check out the documentation: Go template docs . Pipeline support The envcontain property is not supported for Pipelines . For standalone Workflows, you can use it to check if an Environment Variable contains a given string but this is not available for Pipelines yet. workflows:\n primary:\n steps:\n #\n # Check if an Environment Variable's value is equal to a given string\n - script:\n title: Run-If expression\n run_if: |-\n {{getenv \"TEST_KEY\" | eq \"test value\"}}\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Use the enveq function to check if an Env Var's value is equal to a given string\n - script:\n title: Run-If expression\n run_if: '{{enveq \"TEST_KEY\" \"test value\"}}'\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n # Use envcontain to check if the value of an Env Var contains a given string\n - script:\n title: Run-If expression\n run_if: '{{envcontain \"TEST_KEY\" \"test value\"}}'\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Check if a given Env Var is NOT empty\n - script:\n title: Run-If expression\n run_if: '{{getenv \"TEST_KEY\" | ne \"\"}}'\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Check if two Env Vars have the same value\n - script:\n title: Run-If expression\n run_if: '{{getenv \"TEST_KEY_1\" | eq (getenv \"TEST_KEY_2\")}}'\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Use the available expression data properties\n # like IsCI (checks if the build runs in a CI environment) or IsBuildFailed (checks if the build has failed) directly\n - script:\n title: Run-If expression\n run_if: |-\n {{.IsCI}}\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # You don't have to wrap the expression in {{...}} if it's a simple\n # oneliner\n - script:\n title: Run-If expression\n run_if: $.IsCI\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # You can even remove the $ sign, it's optional in a simple\n # expression like this\n - script:\n title: Run-If expression\n run_if: .IsCI\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # If-Else condition, in this example the Step will run if the build runs in a CI environment\n - script:\n title: Run-If expression\n run_if: |-\n {{if .IsCI}}\n true\n {{else}}\n false\n {{end}}\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # You can use multiple conditions\n - script:\n title: CI and Not Failed\n run_if: |-\n {{.IsCI | and (not .IsBuildFailed)}}\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n #\n # Check if the build is a pull request or not\n - script:\n title: Only if NOT a pull request\n run_if: not .IsPR\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"RunIf expression was true\"\n - script:\n title: Only if it was a Pull Request\n run_if: .IsPR\n inputs:\n - content: |-\n #!\/bin\/bash\n echo \"Pull Request ID: ${PULL_REQUEST_ID}\" " }, 
{ "title" : "Setting a time limit for Steps ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43337-setting-a-time-limit-for-steps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Setting a time limit for Steps ", 
"snippet" : "A Step timeout, defined in seconds, sets a maximum time a Step is allowed to run. If the Step exceeds that limit, the Workflow moves on to the next Step. Ensure that your builds do not exceed the time limit by setting up Step timeout for Steps that might cause builds to hang. A Step timeout, defined...", 
"body" : "A Step timeout, defined in seconds, sets a maximum time a Step is allowed to run. If the Step exceeds that limit, the Workflow moves on to the next Step. Ensure that your builds do not exceed the time limit by setting up Step timeout for Steps that might cause builds to hang. A Step timeout, defined in seconds, sets a maximum time a Step is allowed to run. If the Step exceeds that limit, the Workflow moves on to the next Step. This is useful if, for example, your builds hang for not immediately obvious reasons - you can set timeouts for the Step or Steps which are suspected to have caused the problem. Find the Step in the bitrise.yml file. You can edit the file locally, or on the bitrise.yml tab of the Workflow Editor. Add a timeout property before the other Step inputs and specify its value in seconds: - xcode-test@1.18.14:\n timeout: 120\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: \"$BITRISE_SCHEME\" " }, 
{ "title" : "Developing your own Bitrise Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step ", 
"snippet" : "You can develop your own Bitrise Steps and your own project scanner, and submit them to Bitrise so that other users can use them, too. Contributing to Bitrise is easy: develop an open source integration, submit it and you’re done! In this section, we’ll be focusing on technical contributions: creati...", 
"body" : "You can develop your own Bitrise Steps and your own project scanner, and submit them to Bitrise so that other users can use them, too. Contributing to Bitrise is easy: develop an open source integration, submit it and you’re done! In this section, we’ll be focusing on technical contributions: creating a new Step and creating your very own project scanner . " }, 
{ "title" : "Creating your own Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-45277652-008d-152c-9e3a-00e80a3005be_UUID-28a13ba5-95f8-982d-257c-c014857d538f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Step ", 
"snippet" : "Bitrise offers well over 200 Steps to our users. We maintain many of them ourselves but our users’ community does an outstanding job of contributing to our Step Library (StepLib). Anyone can submit a Step - if approved, it will become part of the official Bitrise StepLib and available to all Bitrise...", 
"body" : "Bitrise offers well over 200 Steps to our users. We maintain many of them ourselves but our users’ community does an outstanding job of contributing to our Step Library (StepLib). Anyone can submit a Step - if approved, it will become part of the official Bitrise StepLib and available to all Bitrise users! Check out how to create your own Step and share it with the world:  Creating your own Step . " }, 
{ "title" : "Creating your own scanner ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-45277652-008d-152c-9e3a-00e80a3005be_UUID-bee627ea-4523-0f53-ba3a-d8de6f37a0c5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own scanner ", 
"snippet" : "Our project scanner automatically detects the project type whenever you add a new app on Bitrise. In this context, type means the platform or framework used to create the app, for example, Android, iOS, React Native or Flutter. Based on the results, we automatically create a configuration, with at l...", 
"body" : "Our project scanner automatically detects the project type whenever you add a new app on Bitrise. In this context, type means the platform or framework used to create the app, for example, Android, iOS, React Native or Flutter. Based on the results, we automatically create a configuration, with at least one default Workflow that contains the most frequently used Steps for the detected type. Our scanner might not detect your app, for a couple of reasons: either something is missing from your repository (such as a config.xml file in the case of an Ionic app, for example), or we simply don’t have a scanner for your type yet. If it’s the latter, you can  configure your app manually , or you can create your own scanner, with its own project configuration:  Creating your own Bitrise project scanner. " }, 
{ "title" : "Developing a new Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step ", 
"snippet" : "To develop a Bitrise Step and get it integrated in our Step library, you need to write a code, create the description, and submit everything for review. Duplicate Steps Before deciding to develop a new Step, please make sure that there’s no already existing Step that performs the same function. You ...", 
"body" : "To develop a Bitrise Step and get it integrated in our Step library, you need to write a code, create the description, and submit everything for review. Duplicate Steps Before deciding to develop a new Step, please make sure that there’s no already existing Step that performs the same function. You can search for Steps on our Integrations page or in the Step Library on GitHub. A Step is a build task: for example, the Git Clone Step clones your Git repository at the start of a build while the Google Play Deploy Step can deploy your finished app to the Play Store. A Step contains the code that performs the build task. You can configure the inputs and parameters that define the task, and view and reuse the outputs a Step generates. Reusing the output means that another Step can use it as the value of one of its inputs. Our Steps are written in Go or Bash. Steps are contained in their own Git repositories: that includes the code and the step.yml file that defines the configuration of the Step. If you wish to make the Step available to other users, the step.yml file needs to be included in the bitrise-steplib repository so that other users can find the Step on our website, in the Workflow Editor . Sharing Steps Sharing your custom Steps is optional: a Step with a use case that is specific to a single user will not be much help to others. As you can run a Step from your own machine or from any Git repository, your custom Steps do not have to be part of the Bitrise Step Library. For more info on sharing Steps with other users, check out the Sharing Steps guide. For detailed information on how Steps work, see the following guides: Steps in YAML Step inputs Step outputs Step properties " }, 
{ "title" : "Before you start developing a new Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-043cbee9-410b-f2a5-70b9-7ec7fc988e06", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Before you start developing a new Step ", 
"snippet" : "Before creating a new Step, you will need to install the Bitrise CLI, set it up, and make sure the Step plugin is updated to the latest version. Install the Bitrise CLI . Run bitrise setup. Update the Step plugin to the latest version with the following command: bitrise plugin update step...", 
"body" : "Before creating a new Step, you will need to install the Bitrise CLI, set it up, and make sure the Step plugin is updated to the latest version. Install the Bitrise CLI . Run bitrise setup. Update the Step plugin to the latest version with the following command: bitrise plugin update step " }, 
{ "title" : "Creating the Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-60069750-8d64-8e4b-5f6d-27ad5091f458", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Creating the Step ", 
"snippet" : "We will use the Step plugin of the Bitrise CLI to create a new Step. With this, we’ll create the basic structure of the Step. Certain properties and inputs will be generated and assigned automatically. You can change anything later so don’t worry about it yet. The Step plugin Run bitrise :step in a ...", 
"body" : "We will use the Step plugin of the Bitrise CLI to create a new Step. With this, we’ll create the basic structure of the Step. Certain properties and inputs will be generated and assigned automatically. You can change anything later so don’t worry about it yet. The Step plugin Run bitrise :step in a command line interface to check its commands. Creating the basic structure of the Step is simple. We’ll go over the concepts involved in the process in more detail later; for now, just go through the process to create the Step. At the end of this process, you will have a step.yml file, a README.md file and either a main.go or a step.sh file in the repository. Before you start During the Step creation process, you will be prompted to set a number of options. Note that you can change any of these before submitting your Step to Bitrise for review: the data will be included in the generated step.yml file that you can edit at your leisure later. During the initial Step creation process, you can use placeholders if you want to. Open a command line interface, such as the Terminal app on MacOS. Create a new directory for your Step if you haven’t done so yet and enter that directory: Create the Step with the Bitrise Step plugin: bitrise :step create . When prompted, set the name of the Step’s author. Hit Enter to leave it on the default value. When prompted, set the Step’s name. The plugin automatically generates a Step ID based on this name. Provide a summary: no more than a couple of sentences about what the Step does. Provide a description of the Step. This should contain configuration information and troubleshooting information for the Step. Select the primary category of the Step. To do so, type the number of the preferred option and hit Enter. This can be changed later. Choose the toolkit you want to use: you can choose either Go or Bash. Set up the source code hosting data for the Step: To do so, first decide if you want to host it on GitHub or on any other site and enter the appropriate option: If you chose GitHub, you will be asked to provide the username of the account that will own the repository. If you chose not to store it on GitHub, you have to provide a valid URL for the repository. You are done! If everything went well, the plugin initialized a git repository in the current directory and added a step.yml , a README.md file, and either a main.go or a main.sh file. Now we’ll go through how the step.yml file works and how to set it up. " }, 
{ "title" : "The step.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-a23819dd-0dfb-48ab-70cf-a4b9defdbdf8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ The step.yml file ", 
"snippet" : "The step.yml file is the Step interface definition, containing dependencies, Step inputs and Step outputs as well as other Step properties. It also points to the location of the Step’s source code. Every Step must have one. If you use the Step plugin to create a new Step, all the required properties...", 
"body" : "The step.yml file is the Step interface definition, containing dependencies, Step inputs and Step outputs as well as other Step properties. It also points to the location of the Step’s source code. Every Step must have one. If you use the Step plugin to create a new Step, all the required properties will have a value assigned - but you can change any of them at any time. So don’t worry if the title you set during the initial process does not conform to the guidelines below. We’ll look at the most important configuration options of the step.yml file, including naming and describing your Step, as well as setting up Step inputs and Step outputs. " }, 
{ "title" : "Naming and describing a Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-3cb9baf0-259e-16b3-7578-072cb3e1bc68", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step ", 
"snippet" : "Every Step must have at least a title and a summary defined in the step.yml file. These will appear both on the Integrations page and in the Workflow Editor . The description property is optional but we strongly recommend providing one so that other users better understand how your Step works. Descr...", 
"body" : "Every Step must have at least a title and a summary defined in the step.yml file. These will appear both on the Integrations page and in the Workflow Editor . The description property is optional but we strongly recommend providing one so that other users better understand how your Step works. Description and summary Both description and summary accept Markdown formatting in its values. " }, 
{ "title" : "The title ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4e05403b-fedd-dac5-409c-c1af897fc4aa", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The title ", 
"snippet" : "The title property The title property is required! The title property sets the name of the Step, as it will appear on bitrise.io . It should be short and descriptive. Include the name of the service and the function it fulfils, such as Git Clone . Here’s a few guidelines for your Step titles: Do not...", 
"body" : "The title property The title property is required! The title property sets the name of the Step, as it will appear on bitrise.io . It should be short and descriptive. Include the name of the service and the function it fulfils, such as Git Clone . Here’s a few guidelines for your Step titles: Do not use the word ‘Step’. Use imperative verbs instead of nouns when possible. For example, instead of Script Runner , it should be Run Script . Do not include the name of the platform. Make sure you use the correct name of a service or tool. For example, GitHub instead of Github. Do not include implementation details. " }, 
{ "title" : "The summary ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-ca8ae7bd-e934-fca5-4bd8-2c4ac51f5648", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The summary ", 
"snippet" : "The summary property The summary property is required! A single line of the most significant information about the Step. It can’t be longer than a 100 characters. The summary is visible by default on the Workflow Editor. If a user expands the summary, the Step’s description will be presented - if th...", 
"body" : "The summary property The summary property is required! A single line of the most significant information about the Step. It can’t be longer than a 100 characters. The summary is visible by default on the Workflow Editor. If a user expands the summary, the Step’s description will be presented - if there is one, of course. " }, 
{ "title" : "The description ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c5369b6e-5d61-14fb-4a92-5a053a378bb3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Naming and describing a Step \/ The description ", 
"snippet" : "A detailed explanation of the Step. It should include: What the Step does. The services and tools used by the Step. Configuration information, including the most important inputs. Troubleshooting information: potential issues and their solutions. By default, the Step’s description is collapsed on th...", 
"body" : "A detailed explanation of the Step. It should include: What the Step does. The services and tools used by the Step. Configuration information, including the most important inputs. Troubleshooting information: potential issues and their solutions. By default, the Step’s description is collapsed on the Workflow Editor and the summary is presented. " }, 
{ "title" : "Step categories ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2e5fda44-128e-462a-a0da-1acbac8efb91", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories ", 
"snippet" : "There is another thing we’d like to know about your Step: what type of Step is it? As you can see on our Integrations page or on the Workflow Editor, Steps are sorted into different categories based on two factors: the platforms for which they are available and their functionality....", 
"body" : "There is another thing we’d like to know about your Step: what type of Step is it? As you can see on our Integrations page or on the Workflow Editor, Steps are sorted into different categories based on two factors: the platforms for which they are available and their functionality. " }, 
{ "title" : "Platforms ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-34244531-b85d-06dc-3bbb-4a135f43fec4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Platforms ", 
"snippet" : "The available platform types are controlled by the project_type_tags attribute. If your Step is available for every platform or project type, do not specify project_type_tags . In any other case, select all platform types for which your Step is available. The available values are: ios macos android ...", 
"body" : "The available platform types are controlled by the project_type_tags attribute. If your Step is available for every platform or project type, do not specify project_type_tags . In any other case, select all platform types for which your Step is available. The available values are: ios macos android react-native cordova ionic flutter " }, 
{ "title" : "Category ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-8a072990-3aa6-f160-d956-97d2b8ee9450", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step categories \/ Category ", 
"snippet" : "Functional categories are controlled by the type_tags attribute in the step.yml . One Step should have only a single type tag assigned to it. Use utility only if you believe none of the other types fit your Step. The available values are: build code-sign test deploy notification access-control artif...", 
"body" : "Functional categories are controlled by the type_tags attribute in the step.yml . One Step should have only a single type tag assigned to it. Use utility only if you believe none of the other types fit your Step. The available values are: build code-sign test deploy notification access-control artifact-info installer dependency utility " }, 
{ "title" : "Step inputs ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-929b3fd4-c7b1-04c5-086d-d0f974b0f16b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs ", 
"snippet" : "Step inputs are Bitrise Environment Variables : they consist of a key and value pair that users of the Step can set to control the Step behavior. For example, the Git Clone Step has an input with the key branch: title: Git Clone Repository summary: Clone a repository to the specified path on the VM ...", 
"body" : "Step inputs are Bitrise Environment Variables : they consist of a key and value pair that users of the Step can set to control the Step behavior. For example, the Git Clone Step has an input with the key branch: title: Git Clone Repository\nsummary: Clone a repository to the specified path on the VM\ninputs:\n- branch: master The value of this input - master in the above example - is used to determine which branch of the repository will be cloned. Step inputs are visible on the Workflow Editor: they are presented in the order as they appear in the step.yml . As such, required and frequently used inputs should be at the top. " }, 
{ "title" : "Step input keys and values ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-20166e8e-30e2-06bb-3962-daf112bfd141", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step inputs \/ Step input keys and values ", 
"snippet" : "Use lower case snake case style input keys. For example, project_path . Using opts as an input key The input key can not be opts , as it is used for the input’s options. There is no need to add domain-specific prefixes to the input keys, as inputs are only exposed for the Step run process. This mean...", 
"body" : "Use lower case snake case style input keys. For example, project_path . Using opts as an input key The input key can not be opts , as it is used for the input’s options. There is no need to add domain-specific prefixes to the input keys, as inputs are only exposed for the Step run process. This means project_path input will not overlap with subsequent Steps’ project_path inputs. Step input values are strings: the Bitrise CLI exposes the Step inputs as Environment Variables to the Steps. Provide default values for Step inputs if possible (and if it makes sense). That makes the Step configuration easier for Bitrise users. Environment Variables must not be used as default values, unless: They are exposed by the Bitrise CLI or by bitrise.io . They are generated as an output by another Step (for example, $BITRISE_IPA_PATH , $BITRISE_AAB_PATH ). This is because the Workflow Editor highlights required inputs without values to express the Step will not work without setting a valid value for the given input. If you set an Env Var, which does not have an automatically assigned value, as the default value for an input, the Workflow Editor will think the required input in question has a valid value set (even if the default Env Var has no value yet). Also, there is no reason to suggest a certain name for an Environment Variable this way: users might have the same value assigned to an Env Var with a different name. Let’s talk about how Step inputs are passed to code and how they are presented. " }, 
{ "title" : "Configuring Step inputs ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f0f1b90b-1660-506d-079a-94b1b55ce17e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs ", 
"snippet" : "Step inputs are defined and configured in the step.yml file. In addition to a key and a value, Step inputs are required to have an opts property. This property contains the different options that define how the inputs are passed to the code of the Step and how it is presented in the Workflow Editor....", 
"body" : "Step inputs are defined and configured in the step.yml file. In addition to a key and a value, Step inputs are required to have an opts property. This property contains the different options that define how the inputs are passed to the code of the Step and how it is presented in the Workflow Editor. The possible values of the input can be set in opts as well. Let’s see an example. - install_defaults: \"yes\"\n opts:\n title: Installs default Codesign Files\n value_options:\n - \"no\"\n - \"yes\" The above input has the key install_defaults, and its default value is yes. The value_options option defines the possible values: in this case, yes and no. Its opts property contains some information about how the input is presented: in this case, it’s just a title option, which is always required. The title is displayed in the Workflow Editor instead of the key of the input. The value_options input The value_options input must contain a string. This means that without the quotation marks, as indicated in the example, the validation will fail. " }, 
{ "title" : "Naming and describing Step inputs ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-92d9069e-503f-e98a-cca1-52ea1839ea22", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Naming and describing Step inputs ", 
"snippet" : "A Step input can have a name, a summary, and a description, just like the Step itself. To define these: Include an opts property with the Step input. Under opts, provide a title, a summary, and a description option. Let’s take a look at how these should look like! Description and summary Both descri...", 
"body" : "A Step input can have a name, a summary, and a description, just like the Step itself. To define these: Include an opts property with the Step input. Under opts, provide a title, a summary, and a description option. Let’s take a look at how these should look like! Description and summary Both description and summary accept Markdown formatting in its values. title : It should be a short and descriptive sentence or half sentence: The Xcode project’s path. It should not be a CLI flag or API parameter name used internally. This makes Step configuration easier, as no preexisting knowledge will be required about the underlying tool or service interfaces. It’s also easier to change the Step’s implementation while maintaining backwards compatibility. summary : It is the short version of the description, which provides a quick overview of the input. On the Bitrise Workflow Editor, the summary of the inputs is presented by default when you click on a Step. description : It is the user facing description of the Step input: this should provide a deeper, more detailed explanation of the input. By default, it is not visible in the Workflow Editor, unless the user clicks on the input in question. Here is an example: - install_defaults: \"yes\"\n opts:\n description: Installs default (Bitrise) Wildcard Provisioning Profile and\n Certificate files for testing.\n summary: Installs default (Bitrise) Wildcard code signing files.\n title: Installs default code signing files Now, let’s talk about some other configuration options for Steps. " }, 
{ "title" : "Required inputs ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-4d9113cc-7822-3beb-8b6e-b7abd9ce4bbf", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Required inputs ", 
"snippet" : "Required inputs must have a valid value, otherwise the Step will fail. To mark a Step input as required, use the is_required option of the opts property. It has two values: true and false . If set to true , the input will be displayed as REQUIRED on the Workflow Editor. - keychain_password: $BITRISE...", 
"body" : "Required inputs must have a valid value, otherwise the Step will fail. To mark a Step input as required, use the is_required option of the opts property. It has two values: true and false . If set to true , the input will be displayed as REQUIRED on the Workflow Editor. - keychain_password: $BITRISE_KEYCHAIN_PASSWORD\n opts:\n title: \"Keychain's password\"\n is_required: true " }, 
{ "title" : "Sensitive inputs ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-2dac2a91-8513-bf04-2b2a-7a76f593bdf4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Sensitive inputs ", 
"snippet" : "You can mark Step inputs as sensitive to make sure their values do not get exposed. Sensitive inputs only accept Secrets as values. This ensures they are not visible in build logs. To mark a Step input as sensitive, use the is_sensitive option of the opts property. It has two values: true and false ...", 
"body" : "You can mark Step inputs as sensitive to make sure their values do not get exposed. Sensitive inputs only accept Secrets as values. This ensures they are not visible in build logs. To mark a Step input as sensitive, use the is_sensitive option of the opts property. It has two values: true and false . If set to true , the input will be displayed as SENSITIVE on the Workflow Editor. The is_expand option If you mark an input as sensitive, the is_expand option of the input also must be true, which is the default setting. inputs:\n - certificate_urls: $BITRISE_CERTIFICATE_URL\n opts:\n title: \"Certificate URL\"\n is_sensitive: true " }, 
{ "title" : "Using Env Vars as input values ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-871a4886-f98f-e929-ddd2-c25fa99f9e8d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Using Env Vars as input values ", 
"snippet" : "As noted earlier, it is possible to use Environment Variables as the value of any given input. By default, the Step will expand the Env Var and pass its value to the Step execution. This is defined by the is_expand option of the opts property. - project_path: $BITRISE_PROJECT_PATH opts: is_expand: t...", 
"body" : "As noted earlier, it is possible to use Environment Variables as the value of any given input. By default, the Step will expand the Env Var and pass its value to the Step execution. This is defined by the is_expand option of the opts property. - project_path: $BITRISE_PROJECT_PATH\n opts:\n is_expand: true The is_expand option can have two values: true or false. If set to true - this is the default behavior -, the value of $BITRISE_PROJECT_PATH will be passed to Step execution. If set to false , the string $BITRISE_PROJECT_PATH will be passed (and this particular Step will fail as it will not find the project location). Env Vars in Step code Do not use Environment Variables directly in your Step’s code. Instead, expose every outside variable as an input of your Step and set the default value of that input to the Environment Variable you want to use. This way it’s easier to test the Step and the user of the Step can easily declare these inputs, without having to scour through code for the required variable. " }, 
{ "title" : "Grouping inputs together ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-1442399b-ebb3-54df-92a6-07134b6656a2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Grouping inputs together ", 
"snippet" : "The category option is used to group inputs together. Inputs belonging to the same category are displayed together and collapsed by default in the Workflow Editor. - default_certificate_passphrase: $BITRISE_DEFAULT_CERTIFICATE_PASSPHRASE opts: category: Default code signing files description: | Cert...", 
"body" : "The category option is used to group inputs together. Inputs belonging to the same category are displayed together and collapsed by default in the Workflow Editor. - default_certificate_passphrase: $BITRISE_DEFAULT_CERTIFICATE_PASSPHRASE\n opts:\n category: Default code signing files\n description: |\n Certificate passphrase of the default certificate.\n is_sensitive: true\n title: Default certificate passphrase In this case, this input will appear with all the other inputs that have the same category set. Categories may be used if the Step has more than six inputs. The suggested maximum number of inputs in a group or in the root is six. Please keep in mind, when designing Step categories, that: Required inputs should not be grouped! Grouped inputs should be displayed after non-categorised inputs. " }, 
{ "title" : "Accepting a list of values for inputs ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-679bbe60-796d-b0f3-b179-d90cd4c5bb27", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Configuring Step inputs \/ Accepting a list of values for inputs ", 
"snippet" : "It is absolutely possible to accept a list of values for a given input. If you wish to do so, we strongly recommend adding a list suffix to the key of the input (for example, input_path_list ), and expect the values to be provided as a newline character (\\n) separated list (for example, first value\\...", 
"body" : "It is absolutely possible to accept a list of values for a given input. If you wish to do so, we strongly recommend adding a list suffix to the key of the input (for example, input_path_list ), and expect the values to be provided as a newline character (\\n) separated list (for example, first value\\nsecond value). Please use this solution unless you really need to use another character for separating values. Based on our experience, the newline character (\\n) works really well as a universal separator character, as it’s quite rare in input values (compared to ,, ;, = or other more common separator characters). As a best practice, you should filter out empty items. Use either: first value\\n\\nsecond value or first value\\n \\nsecond value " }, 
{ "title" : "Step outputs ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-66cf5a8a-bd22-9a9d-2bd8-3c69823f2bcf", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs ", 
"snippet" : "Steps can generate outputs which can then be used in other Steps as inputs. That means that if a Step generates an artifact, the path to that artifact can be the input of another Step in the build. For example, the Xcode Archive & Export for iOS Step exposes the $BITRISE_API_PATH output which can th...", 
"body" : "Steps can generate outputs which can then be used in other Steps as inputs. That means that if a Step generates an artifact, the path to that artifact can be the input of another Step in the build. For example, the Xcode Archive & Export for iOS Step exposes the $BITRISE_API_PATH output which can then be used as an input value for the Deploy to iTunesConnect Step. Outputs are also defined in the step.yml file, under the outputs property. They have the same structure as inputs: they consist of a key and value pair. An output’s key can be used as an input value in a subsequent Step, just as Environment Variables exposed by bitrise.io or the Bitrise CLI can be. " }, 
{ "title" : "Step output keys and values ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-109f8f75-b9f0-11b4-da4a-c61d514fbb26", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Step output keys and values ", 
"snippet" : "For output keys, use upper case snake case style output keys, for example: OUTPUT_PATH....", 
"body" : "For output keys, use upper case snake case style output keys, for example: OUTPUT_PATH. " }, 
{ "title" : "Naming and describing Step outputs ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-6ab48cf6-d6cc-0c6f-715f-8db1a4eade9d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Naming and describing Step outputs ", 
"snippet" : "Step outputs are always exported as Environment Variables (Env Var). For example, the Xcode Archive & Export for iOS Step generates an IPA file: this output is exported as the BITRISE_IPA_PATH Env Var: outputs: - BITRISE_IPA_PATH: opts: title: .ipa file path summary: Local path of the created .ipa f...", 
"body" : "Step outputs are always exported as Environment Variables (Env Var). For example, the Xcode Archive & Export for iOS Step generates an IPA file: this output is exported as the BITRISE_IPA_PATH Env Var: outputs:\n- BITRISE_IPA_PATH: \n opts: \n title: .ipa file path \n summary: Local path of the created .ipa file As the example shows, the output definition contains a key ( BITRISE_IPA_PATH ) and under the opts property, it also includes a title and a summary. In the Workflow Editor, the key and the title are visible by default: these are required. In addition, you can add a summary and a description: title : It should be a short and descriptive sentence or half sentence: Generated IPA path. This is required. summary : It is the short version of the description, which provides a quick overview of the output. This is optional, and only visible in the Workflow Editor if you click on the title. description : It is the user facing description of the Step output: this should provide a deeper, more detailed explanation of the output. This is optional, and only visible in the Workflow Editor if you click on the title. " }, 
{ "title" : "Outputs with list of values ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-0037185b-ce5e-e050-a8f3-827bbe0eed2f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Step outputs \/ Outputs with list of values ", 
"snippet" : "It is absolutely possible to provide a list of values for a given output. If you wish to do so, we strongly recommend adding a LIST suffix to the key of the output (for example, BITRISE_APK_PATH_LIST ), and expect the values to be provided as a newline character (\\n) separated list (for example, fir...", 
"body" : "It is absolutely possible to provide a list of values for a given output. If you wish to do so, we strongly recommend adding a LIST suffix to the key of the output (for example, BITRISE_APK_PATH_LIST ), and expect the values to be provided as a newline character (\\n) separated list (for example, first value\\nsecond value). Please use this solution unless you really need to use another character for separating values. Based on our experience, the newline character (\\n) works really well as a universal separator character, as it’s quite rare in input values (compared to ,, ;, = or other more common separator characters). " }, 
{ "title" : "Setting conditions for running the Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-f4da0ade-fbdc-7eca-dffe-71bcd2ee112d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Setting conditions for running the Step ", 
"snippet" : "There are three properties that define whether a Step is run in a given Workflow or not: is_always_run , is_skippable and run_if . All of these properties can be set in the step.yml file to govern the default behavior of the Step, or set in a given app’s bitrise.yml file on a case-by-case basis. is_...", 
"body" : "There are three properties that define whether a Step is run in a given Workflow or not: is_always_run , is_skippable and run_if . All of these properties can be set in the step.yml file to govern the default behavior of the Step, or set in a given app’s bitrise.yml file on a case-by-case basis. is_always_run : By default, Steps do not run if a previous Step in the Workflow failed. However, if the is_always_run property is set to true , the Step runs regardless of the status of previous Steps in the Workflow. This can be very useful, for example, in the case of Steps that can send notifications about the build: they can send notifications about failed builds. is_skippable : As mentioned above, Steps do not run if a previous Step in the Workflow failed. However, if a Step’s is_skippable property is set to true , the build will not fail and subsequent Steps will run even if that particular Step fails. A good example is the Cache:Pull Step: if an app has no build cache to pull from, the Step will fail but that is no reason to fail the build. run_if : If you want to make Step execution dependent on a certain condition, use the run_if property to define the run condition. For example, you can configure a Step so that it only runs in a CI environment. Read more in our Enabling or disabling a Step conditionally guide about the possible use cases. " }, 
{ "title" : "Submodules and Step dependencies ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-c4e84c50-a008-2f48-92b6-b43eed8ff992", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies ", 
"snippet" : "Do not use submodules, or require any other resource downloaded on-demand in your Step! Try to include everything required for your Step in the Step’s repository. Otherwise you can run into problems if, say, the Step fails to download a resource because of a network error or some authorization probl...", 
"body" : "Do not use submodules, or require any other resource downloaded on-demand in your Step! Try to include everything required for your Step in the Step’s repository. Otherwise you can run into problems if, say, the Step fails to download a resource because of a network error or some authorization problem. In the case of submodules, you should include the content of the other repository instead of using it as a submodule of your Step’s repository. You can, however, declare dependencies that you can fetch from an OS dependency manager, such as apt-get or brew. A Step dependency is installed by the Bitrise CLI if it is not available in the PATH Environment Variable. As Steps can be run in any environment where the Bitrise CLI can run, list every used dependency, even if you know that they are pre-installed on the Bitrise stacks. Unused dependencies (for example, git and wget added as a sample by default) waste build time. Step dependencies should not include toolkit dependencies, as the Bitrise CLI will take care of installing those automatically. A Step written in golang should not list go as a dependency if the Step uses the Go Bitrise CLI toolkit. The Bitrise CLI can install Step dependencies available in the Homebrew package manager: deps:\n brew:\n - name: cmake It can install apt-get dependencies available in the sources listed in the sources.list file on the host machine: deps:\n apt_get:\n - name: cmake " }, 
{ "title" : "Accessing files in the Step repo with an Env Var ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-dfee884d-b42c-9acd-77b5-9075145e78ab", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Submodules and Step dependencies \/ Accessing files in the Step repo with an Env Var ", 
"snippet" : "If you need to keep a binary, assets or anything else required for your Step that should be bundled in the Step repository, then you can include them beside your step.yml file and the code of your Step. The Bitrise CLI automatically exports an Environment Variable called BITRISE_STEP_SOURCE_DIR that...", 
"body" : "If you need to keep a binary, assets or anything else required for your Step that should be bundled in the Step repository, then you can include them beside your step.yml file and the code of your Step. The Bitrise CLI automatically exports an Environment Variable called BITRISE_STEP_SOURCE_DIR that allows you to access these files at any time. For example, you can access a .jar file in the root of your Step’s repository like this: $BITRISE_STEP_SOURCE_DIR\/mytool.jar " }, 
{ "title" : "Adding a Step icon ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-848ffc4a-1c5a-6051-fe67-025ab405f007_UUID-23ea572c-f450-e6d2-2daa-19ce92b60cf5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Developing a new Step \/ Adding a Step icon ", 
"snippet" : "You can add a Step icon to your Step: you will see it in the Workflow Editor and on our Integrations page. If you want to, there are some requirements: Its background color should not be transparent. Size: 256x256 px. Margin: 60 px. Format: SVG. Verified Steps Please note that if you wish to submit ...", 
"body" : "You can add a Step icon to your Step: you will see it in the Workflow Editor and on our Integrations page. If you want to, there are some requirements: Its background color should not be transparent. Size: 256x256 px. Margin: 60 px. Format: SVG. Verified Steps Please note that if you wish to submit a Step for verification so that it becomes a Verified Step , you must add a Step icon. To submit your Step’s icon: Add the .svg file into your StepLib fork repo at: STEPLIB_FORK_ROOT\/steps\/YOUR_STEP_ID\/assets\/icon.svg . Create a new pull request to the StepLib repository . " }, 
{ "title" : "Sharing Steps with all Bitrise users ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users ", 
"snippet" : "If you think your Bitrise Step can be of use to others, you can share it via a CLI command or a Bitrise Workflow. Shared Steps must be actively maintained and they must be open to contributors. If you think your Step can be of use to others, you can share it! Before doing so, however, please check t...", 
"body" : "If you think your Bitrise Step can be of use to others, you can share it via a CLI command or a Bitrise Workflow. Shared Steps must be actively maintained and they must be open to contributors. If you think your Step can be of use to others, you can share it! Before doing so, however, please check that there are no other Steps that solve the same problem. You can check: In the list of released Steps . In the list of open pull requests in our StepLib. In the list of closed pull requests in our StepLib. If you find a Step which is missing a particular feature, please try to contribute to it before developing or sharing a brand new Step for that feature. You can use our Integrations page to search for Steps in the Bitrise StepLib. By clicking the GitHub source button on a given Step’s page you will be taken to the Step’s repository, where you can submit a feature request or open a pull request. Also, please keep in mind that shared Steps must be actively maintained and they must be open to contributors. " }, 
{ "title" : "Sharing a new Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-7efc6453-8dca-4c34-4199-fa8438f32718", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step ", 
"snippet" : "The sharing process is relatively straightforward - but please make sure to go through the process carefully when sharing a new Step. The bitrise share command During Step development, you can get help anytime by simply running bitrise share. This will print a short guide on sharing. There are two w...", 
"body" : "The sharing process is relatively straightforward - but please make sure to go through the process carefully when sharing a new Step. The bitrise share command During Step development, you can get help anytime by simply running bitrise share. This will print a short guide on sharing. There are two ways to share a Step: You can do it manually, using the bitrise share command. If you created the Step with the Step plugin, you can run the share-this-step Workflow in your Step’s directory. " }, 
{ "title" : "Before you start ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-5625e823-f949-436f-46df-4ab065c0deef", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Before you start ", 
"snippet" : "Before you start, make sure that: Your Step is in a public Git repository. The step.yml file contains a support_url property which points to a valid issue tracker (for example, the Issues page of your Step’s GitHub repository). The step.yml file contains a source_code_url property which points to th...", 
"body" : "Before you start, make sure that: Your Step is in a public Git repository. The step.yml file contains a support_url property which points to a valid issue tracker (for example, the Issues page of your Step’s GitHub repository). The step.yml file contains a source_code_url property which points to the correct Git URL of your repository. Sharing more than one Step Sharing more than one Step - that is, adding more than one new step.yml file to the Bitrise StepLib - must be done in separate pull requests! You cannot open a pull request that contains more than one new Step! If you’re ready, go ahead with your preferred sharing process! " }, 
{ "title" : "Sharing with the bitrise share command ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2bc42c9a-5827-9821-35fb-0cffa5c9bb57", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the bitrise share command ", 
"snippet" : "Fork the Bitrise StepLib repository. Prepare your forked StepLib locally for sharing: $ bitrise share start -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> Add the Step version tag to your Step’s repository. Add the Step to your forked StepLib repository: $ bitrise share create --tag [st...", 
"body" : "Fork the Bitrise StepLib repository. Prepare your forked StepLib locally for sharing: $ bitrise share start -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> Add the Step version tag to your Step’s repository. Add the Step to your forked StepLib repository: $ bitrise share create --tag [step-version-tag] --git [step-git-uri].git --stepid [step-id] Optionally, perform a complete health check on your forked StepLib: $ bitrise share audit -c <https:\/\/github.com\/[your-username]\/bitrise-steplib.git> Review your Step’s step.yml file, and if you’re happy with it, finish the share process: This commits and pushes the step.yml file to the forked StepLib repository. $ bitrise share finish This commits and pushes the step.yml file to the forked StepLib repository. Open a pull request in the official Bitrise StepLib repository. " }, 
{ "title" : "Sharing with the share-this-step Workflow ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27b97c61-4e9d-40a8-c541-9f047e70b277", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Sharing with the share-this-step Workflow ", 
"snippet" : "The share-this-step Workflow is included in the bitrise.yml file that the Step plugin automatically generates when you create a new Step with it. Using it, sharing a Step is incredibly easy: Fork the Bitrise StepLib repository. Set the required Workflow Environment Variables as app level Environment...", 
"body" : "The share-this-step Workflow is included in the bitrise.yml file that the Step plugin automatically generates when you create a new Step with it. Using it, sharing a Step is incredibly easy: Fork the Bitrise StepLib repository. Set the required Workflow Environment Variables as app level Environment Variables in the bitrise.yml file: app: envs: - BITRISE_STEP_ID: - BITRISE_STEP_VERSION: - BITRISE_STEP_GIT_CLONE_URL: - MY_STEPLIB_REPO_FORK_GIT_URL: Run the share-this-step Workflow in the Bitrise CLI: $ bitrise run share-this-step " }, 
{ "title" : "Fixing issues in a StepLib pull request ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-27875dbb-7d14-e0d7-8d07-0635010e8be0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Sharing a new Step \/ Fixing issues in a StepLib pull request ", 
"snippet" : "Once you submitted your Step version to the StepLib, wait for the Bitrise team to review it. If we ask for changes: Close the pull request. Delete the share branch from your fork of the Bitrise StepLib. Fix the issues in the Step repository. Add a new version tag to the commit that contains your fix...", 
"body" : "Once you submitted your Step version to the StepLib, wait for the Bitrise team to review it. If we ask for changes: Close the pull request. Delete the share branch from your fork of the Bitrise StepLib. Fix the issues in the Step repository. Add a new version tag to the commit that contains your fixes in the Step repository. Run the share process again. Hopefully, after fixing the issues, we’ll be able to merge your pull request and release your Step to the public! " }, 
{ "title" : "Abandoned Steps ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-e39b4ac9-b857-3ed0-3eac-0726e4c8008a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Abandoned Steps ", 
"snippet" : "If you are a Step maintainer, you should be reachable within a reasonable timeframe if anyone submits an issue or a pull request to your Step. If we try to contact you several times regarding an important fix\/update in your Step and you refuse to answer for several weeks we might deprecate, remove o...", 
"body" : "If you are a Step maintainer, you should be reachable within a reasonable timeframe if anyone submits an issue or a pull request to your Step. If we try to contact you several times regarding an important fix\/update in your Step and you refuse to answer for several weeks we might deprecate, remove or replace your Step in the collection! Abandoned Steps can be a threat for those who use it, please keep this in mind if you decide to share your Step with others! The repository and issue tracker must not be removed, as there are permanent links to it included in the step.yml that is in the Bitrise StepLib. If they are removed, already shared Step versions will continue to function as they are also shared on a Bitrise managed file hosting service during the share process. A new version of the step may be released, managed by Bitrise. If you shared a Step but you’re no longer able or willing to maintain it, please create a GitHub issue in this repository: Bitrise StepLib " }, 
{ "title" : "Reporting Step issues ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6ac61bee-57fc-bdfc-e92b-c9c7623c8c35_UUID-2f191e2a-26e1-a0d1-8db3-c576942457eb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Sharing Steps with all Bitrise users \/ Reporting Step issues ", 
"snippet" : "If you’re a user of a Step which has critical (security or functionality) issues, please create a ticket in the Step’s Issue Tracker. Every Step declares the preferred way of reporting issues with the support_url attribute. If you don’t get a response from the Step’s maintainer for an extended perio...", 
"body" : "If you’re a user of a Step which has critical (security or functionality) issues, please create a ticket in the Step’s Issue Tracker. Every Step declares the preferred way of reporting issues with the support_url attribute. If you don’t get a response from the Step’s maintainer for an extended period (for more than a couple of weeks) please create a GitHub issue in this repository: https:\/\/github.com\/bitrise-io\/bitrise-steplib and we’ll try to resolve the issue, following the Abandoned Step policy. Please be patient and keep in mind that everyone who contributes to this collection does so to help you by providing a Step for you to use! " }, 
{ "title" : "Verified Steps ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps ", 
"snippet" : "Verified Steps are Bitrise Steps whose owner guarantees secure, maintained, consistent, and high-quality performance for any Bitrise user. To have your Step verified, you must apply for the Verified badge....", 
"body" : "Verified Steps are Bitrise Steps whose owner guarantees secure, maintained, consistent, and high-quality performance for any Bitrise user. To have your Step verified, you must apply for the Verified badge. " }, 
{ "title" : "What are Verified Steps? ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-2836eb78-458a-fafb-575a-74f0d8cd48a0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? ", 
"snippet" : "A Step contains the code that performs a specific build task. Bitrise has over 300 Steps in its Step Library (StepLib) which third party companies or open source teams can enrich with Steps based on their services\/tools. This means they have full power to roll out updates to the Step while Bitrise m...", 
"body" : "A Step contains the code that performs a specific build task. Bitrise has over 300 Steps in its Step Library (StepLib) which third party companies or open source teams can enrich with Steps based on their services\/tools. This means they have full power to roll out updates to the Step while Bitrise maintains an overlaying control to ensure service quality and security. A Verified Step means that the owner of a service or tool or an open source team guarantees secure, maintained, consistent, and high-quality performance for any Bitrise user. Our official Bitrise Steps are maintained by us, whereas our Community Steps are maintained by the community. It’s easy to decide which type a Step falls into on our GUI. Verified Steps are labeled with a blue badge in Bitrise . Official Bitrise Steps are labeled with a green badge. Community created Steps do not have any badge. In this guide we explain how to get your Step verified by Bitrise. Requirements For company owned services and tools: Your company must be the owner of the service or tool used by the Step to apply for the Verified badge. For open-source services or tools: If you are a member of an open source or other informal team, please confirm with the rest of the team that you may sign this for yourself and that it applies to the Steps you are submitting for the team. Your Step must comply with our Service Level Agreement . Your Step must have its own Step icon. You must include a Workflow Recipe to a Step to become a Verified Step. We strongly recommend that you consult with our Step development guidelines before creating a Step. " }, 
{ "title" : "What is a Workflow Recipe? ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-51f552c1-7b73-1cd6-9136-4269c401e3a8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ What is a Workflow Recipe? ", 
"snippet" : "A Workflow Recipe is a template that anyone submitting a Step to Bitrise must put together when applying for the Verified Step badge. You can develop a Step and decide not to include a Workflow Recipe, but to turn your Step into a Verified one, you have to submit a Workflow Recipe as well. Workflow ...", 
"body" : "A Workflow Recipe is a template that anyone submitting a Step to Bitrise must put together when applying for the Verified Step badge. You can develop a Step and decide not to include a Workflow Recipe, but to turn your Step into a Verified one, you have to submit a Workflow Recipe as well. Workflow Recipes are published on Bitrise where our Bitrise community can learn how the Verified Step can be used in a specific setup. Should you have questions, please turn to our partnership team at partners@bitrise.io . " }, 
{ "title" : "Promoting your Verified Step ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-d2cc5184-0a76-bd3c-ba6d-42022522a256", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ What are Verified Steps? \/ Promoting your Verified Step ", 
"snippet" : "As part of the Verified Step Program, you must commit to taking part in one or more than one of the following co-marketing activities: In-app messaging. Dedicated co-branded email campaign, or newsletter mention. Blog post content. How-to article, documentation, or help center page. Social media act...", 
"body" : "As part of the Verified Step Program, you must commit to taking part in one or more than one of the following co-marketing activities: In-app messaging. Dedicated co-branded email campaign, or newsletter mention. Blog post content. How-to article, documentation, or help center page. Social media activities. Webinars or virtual events. Podcasts. Events (panels, fireside chats, video testimonials, or sponsorship). Case study\/whitepaper\/ebook\/ (shared research, testimonials, co-writing a chapter, publishing on each others’ blogs). Video content posted on our public YouTube channel. Joint PR campaigns. These co-marketing opportunities enable you to increase your product’s content generation output, grow go-to-market plans, and help to drive integration adoption. You can consult with your Bitrise Partner Manager ( partners@bitrise.io ) to confirm which co-marketing activities you can do, clarifying what level of involvement you will want to do based on your marketing plans. There can be many interested in a single co-marketing event so your involvement is managed on a first-come, first-serve basis. " }, 
{ "title" : "Applying for a Verified badge ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-1c235c2c-0c86-741f-c100-1a37e7a56e97", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Applying for a Verified badge ", 
"snippet" : "Create the Step based on our Step development guideline . The Step’s repository MUST be on GitHub. Share your Step in our bitrise-steplib and fill out the New Pull Request Checklist. When the CLAassistant prompts you, sign our Contributor License Agreement. Until this is not completed, merging is bl...", 
"body" : "Create the Step based on our Step development guideline . The Step’s repository MUST be on GitHub. Share your Step in our bitrise-steplib and fill out the New Pull Request Checklist. When the CLAassistant prompts you, sign our Contributor License Agreement. Until this is not completed, merging is blocked on the PR. Please fill out our Partnership Form ! Once you submitted the form, our Partner Management Team will contact you within 5 business days to discuss the rest of the process. If at any stage of the process you wonder what happens with a Step candidate that is already covered by another Step in our StepLib, head over to How do we go about Step duplication ? " }, 
{ "title" : "Service level agreement for Verified Step authors ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-6fbb5ed7-26eb-e34d-2f1b-0fb51645e41f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Service level agreement for Verified Step authors ", 
"snippet" : "Anyone can contribute to a Verified Step which is already part of our StepLib by creating an issue or a pull request (PR). The Verified Step author has to manage the contribution (for example, issue, PR, or any maintenance such as third-party system changes) from start to finish. Bitrise monitors op...", 
"body" : "Anyone can contribute to a Verified Step which is already part of our StepLib by creating an issue or a pull request (PR). The Verified Step author has to manage the contribution (for example, issue, PR, or any maintenance such as third-party system changes) from start to finish. Bitrise monitors open issues and PRs created for Verified Steps and contacts the Verified Step authors if those contributions are not handled. If the Verified Step author fails to manage the contribution as described in our Contributor License Agreement and this SLA, Bitrise withdraws the Verified badge from the Step. This is to ensure Verified Steps in our StepLib are always of high quality and meet Bitrise users’ expectations. " }, 
{ "title" : "Managing contributions ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-14c6299b-4e97-269b-d598-415ce6e55e30", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ Managing contributions ", 
"snippet" : "The following guidelines aim to help Verified Step authors categorize contributions. The Verified Step author is responsible for any contribution made to the Verified Step. The Verified Step author acknowledges the contribution by adding a label an estimated time to perform the fix, and merge the PR...", 
"body" : "The following guidelines aim to help Verified Step authors categorize contributions. The Verified Step author is responsible for any contribution made to the Verified Step. The Verified Step author acknowledges the contribution by adding a label an estimated time to perform the fix, and merge the PR. There are four labels the author can use to categorize the type of contribution: critical-bug label means that the current feature set has abnormal behavior, which blocks users from using the Step and there is no workaround to fix the issue. This critical bug must be fixed by the author. bug label means that the current feature set has abnormal behavior, which does not block users from using the Step and there is a workaround for the issue. This bug must be fixed by the author. feature-request label means that a new feature or Step is being requested. The Verified Step author can decide if the feature is worth implementing. maintenance label means improving the Step’s source code in a way that it does not add new features or potential bugs to the Step. The Verified Step author can decide whether the feature is worth implementing or not. rejected label means the contribution which gets rejected by the Verified Step author must be closed within the first response time, that is 5 business days. When rejecting a contribution, the Verified Step author has to provide an explanation to the contributor within the first response time. accepted contribution means that the given: critical-bug, bug, feature, maintenance will be fixed\/merged within the given resolution time. First response time means that there is a 5 day window during which the Verified Step author should respond to the contribution with the accepted or rejected labels. Resolution time means a certain amount of business days during which the contribution (issue or PR) should be completed by the Verified Step author. Type First response time Resolution time critical-bug 5 business days 10 business days bug 5 business days 15 business days feature-request 5 business days 20 business days maintenance 5 business days 20 business days " }, 
{ "title" : "How do we go about Step duplications? ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-4a6edbc8-197c-3bd9-7dbb-6411a6514e84_UUID-29f1569c-183a-4a7a-d7aa-2142a55b0023", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Verified Steps \/ How do we go about Step duplications? ", 
"snippet" : "In general we try to keep our StepLib streamlined and avoid Step duplications for the same build task. Here you can find some questions and answers when it comes to any potential Step duplications. I was going to submit a Step and apply for the Verified badge, but found out there was an official Bit...", 
"body" : "In general we try to keep our StepLib streamlined and avoid Step duplications for the same build task. Here you can find some questions and answers when it comes to any potential Step duplications. I was going to submit a Step and apply for the Verified badge, but found out there was an official Bitrise Step for the same build task in the StepLib. What should I do? Submit your Step and go through the application process. Once your application is completed, we deprecate the official Bitrise Step and our users can use your new Verified Step. I was going to submit a Step and apply for the Verified badge, but found out there was a Community Step for the same build task. What should I do? Submit your Step and go through the application process. Your new Verified Step and the Community Step will be both available in our StepLib. I was going to submit a Community Step but found out there was a Verified Step for the same build task. What should I do? If a Verified Step is already available in our StepLib, we reject Community Step submission for the same build task to avoid Step duplication. We offer to the Community Step developer to work on future updates of the already existing Verified Step. " }, 
{ "title" : "Creating your own Bitrise project scanner ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner ", 
"snippet" : "A Bitrise project scanner must have a scan result model. Every platform scanner writes its possible options, configurations, and warnings into this model. These will be translated into Step input values by choosing the desired values for the given options. The project scanner is a tool that identifi...", 
"body" : "A Bitrise project scanner must have a scan result model. Every platform scanner writes its possible options, configurations, and warnings into this model. These will be translated into Step input values by choosing the desired values for the given options. The project scanner is a tool that identifies the given project’s type and generates a basic Bitrise configuration. Each supported project type has its own scanner: these scanners are stored as separate packages. A project type scanner defines at least two Workflows : one for testing ( primary ) and one for building ( deploy ). It includes the minimal amount of Steps to successfully run them . Build and test Steps Build Steps and test Steps have specific requirements: A build  Step must build your app so that it is ready for deployment and it must output an Environment Variable that points to the output file(s). For example, a build Step to build an iOS app must output an .ipa file (not, say, .xcodearchive ) and the path to this .ipa file. A test Step must output the test results so that they are available for viewing on the build page on bitrise.io. When adding a new project on the website or initializing a project on your own machine, the bitrise-init tool iterates through every scanner, calls the scanner interface methods on each of them and collects their outputs. Based on these outputs, a basic configuration is generated. The possible Workflows are described in a scan result model. The model consists of: options configs warnings Here is the basic structure of the model, in YAML: options:\n DETECTED_PLATFORM_1: OptionModel\n DETECTED_PLATFORM_2: OptionModel\n ...\n\nconfigs:\n DETECTED_PLATFORM_1:\n CONFIG_NAME_1: ConfigModel\n CONFIG_NAME_2: ConfigModel\n ...\n DETECTED_PLATFORM_2:\n CONFIG_NAME_1: ConfigModel\n CONFIG_NAME_2: ConfigModel\n ...\n ...\n\nwarnings:\n DETECTED_PLATFORM_1:\n - \"warning message 1\"\n - \"warning message 2\"\n ...\n DETECTED_PLATFORM_2:\n - \"warning message 1\"\n - \"warning message 2\"\n ... Every platform scanner writes its possible options, configurations and warnings into this model. These will be translated into Step input values by choosing the desired values for the given options. Every option chain’s last option selects a configuration. Warnings display the issues with the given project setup. " }, 
{ "title" : "Options ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-91766f7b-bff0-4669-a51d-7f989b056382", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options ", 
"snippet" : "Options represents a question and the possible answers to the question. For example: Question: What is the path to the iOS project files? Possible answers: List of possible paths to check These questions and answers are translated into Step inputs. The scanner should either determine the input value...", 
"body" : "Options represents a question and the possible answers to the question. For example: Question: What is the path to the iOS project files? Possible answers: List of possible paths to check These questions and answers are translated into Step inputs. The scanner should either determine the input value or let the user select or type the value. For example, the Xcode Archive & Export for iOS Step has an input called export-method . This informs the Step of the type of .ipa you want to export. The value cannot be determined based on the source code so the scanner collects every possible value and presents them to the user in the form of a list to choose from. Selecting an option can start a chain: it can lead to different options being presented afterwards. For example, if you select an Xcode scheme that has associated test targets, it leads to different “questions”. Similarly, selecting a certain option can lead to a different workflow being generated afterwards. " }, 
{ "title" : "The option model ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-bbcb6d3a-2cfb-863a-f6c1-25d6a34044e5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Options \/ The option model ", 
"snippet" : "The OptionModel represents an input option. It looks like this in Go: \/\/ OptionModel ... type OptionModel struct { Title string EnvKey string ChildOptionMap map[string]*OptionModel Config string } Title : the human readable name of the input. EnvKey : it represents the input’s key in the step model....", 
"body" : "The OptionModel represents an input option. It looks like this in Go: \/\/ OptionModel ...\ntype OptionModel struct {\n Title string\n EnvKey string\n\n ChildOptionMap map[string]*OptionModel\n Config string\n} Title : the human readable name of the input. EnvKey : it represents the input’s key in the step model. ChildOptionMap : the map of the subsequent options if the user chooses a given value for the option. For example, let’s see a scenario where you choose a value for the Scheme input. You will have a value_map in the options . The possible values are: SchemeWithTest SchemeWithoutTest By choosing SchemeWithTest , the next option will be related to the simulator used to perform the test. By choosing SchemeWithoutTest , the next option will be about the export method for the .ipa file. {\n \"title\": \"Scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": {\n \"SchemeWithTest\": {\n \"title\": \"Simulator name\",\n \"env_key\": \"simulator_name\",\n ...\n },\n \"SchemeWithoutTest\": {\n \"title\": \"Export method\",\n \"env_key\": \"export_method\",\n ...\n }\n }\n} Every option chain has a first option: this is called head . The possible values of the options can branch the option chain. Every option branch’s last options must have a config property set. config holds the id of the generated Bitrise configuration. An options chain’s last options cannot have a value_map . {\n \"title\": \"Scheme\",\n \"env_key\": \"scheme\",\n \"value_map\": {\n \"SchemeWithTest\": {\n \"title\": \"Simulator name\",\n \"env_key\": \"simulator_name\",\n \"value_map\": {\n \"-\": {\n \"config\": \"bitrise_config_with_test\",\n }\n }\n },\n \"SchemeWithoutTest\": {\n \"title\": \"Export method\",\n \"env_key\": \"export_method\",\n \"value_map\": {\n \"development\": {\n \"config\": \"bitrise_config_without_test\",\n },\n \"app-store\": {\n \"config\": \"bitrise_config_without_test\",\n },\n \"ad-hoc\": {\n \"config\": \"bitrise_config_without_test\",\n }\n }\n }\n }\n}\n " }, 
{ "title" : "Scanners ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-57e2af54-c962-a5b4-dbde-f39267b96541", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners ", 
"snippet" : "Scanners generate the possible options chains and the possible workflows for the options per project type. The ActiveScanner variable holds each scanner implementation. Every specific scanner implements the ScannerInterface . \/\/ ScannerInterface ... type ScannerInterface interface { Name() string De...", 
"body" : "Scanners generate the possible options chains and the possible workflows for the options per project type. The ActiveScanner variable holds each scanner implementation. Every specific scanner implements the ScannerInterface . \/\/ ScannerInterface ...\ntype ScannerInterface interface {\n Name() string\n DetectPlatform(string) (bool, error)\n\n Options() (models.OptionModel, models.Warnings, error)\n Configs() (models.BitriseConfigMap, error)\n\n DefaultOptions() models.OptionModel\n DefaultConfigs() (models.BitriseConfigMap, error)\n\n ExcludedScannerNames() []string\n} Name() string : This method is used for logging and storing the scanner output (warnings, options and configs). The scanner output is stored in map[SCANNER_NAME]OUTPUT . For example, the options for an iOS project is stored in optionsMap[ios]options . DetectPlatform(string) (bool, error) : This method is used to determine if the given search directory contains the project type or not. Options() (models.OptionModel, models.Warnings, error) : This method is used to generate option branches for the project. Each branch should define a complete and valid option set to build the final bitrise config model. Every option branch’s last Options has to store a configuration id, which will be filled with the selected options. Configs() (models.BitriseConfigMap, error) : This method is used to generate the possible configs. BitriseConfigMap’s each element is a bitrise config template which will be fulfilled with the user selected option values. DefaultOptions() models.OptionModel and DefaultConfigs() (models.BitriseConfigMap, error) : These methods are used to generate the options and configs without scanning the given project. In this case every required step input value is provided by the user. This way even if a scanner fails, the user has an option to get started. " }, 
{ "title" : "Testing a scanner ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-5b91d715-95c4-e2cf-6510-e41971f7d254", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Testing a scanner ", 
"snippet" : "To test a scanner, we require both unit tests and integration tests. Unit tests are written using Go’s standard testing library. For integration tests, we are validating that the project type scanners are generating the desired Bitrise configurations for an instance of the project type. To do this, ...", 
"body" : "To test a scanner, we require both unit tests and integration tests. Unit tests are written using Go’s standard testing library. For integration tests, we are validating that the project type scanners are generating the desired Bitrise configurations for an instance of the project type. To do this, we use the new scanner to scan the given sample project and we modify the generated scan result to fit our integration tests. The reason for the modification is that the scanners are adding Steps to the generated config, but the Step versions are updated from time to time. The Step version definitions can be found at steps\/const.go . So we call bitrise-init --ci config in the sample project’s root directory, and in the generated scan_result.yml file we replace the Step versions with %s and we use fmt.Sprintf to inject the latest defined Step versions into the config. In the integration tests, we are matching the scan_result.yml file generated by the scanner with the previously generated reference scan_result content. " }, 
{ "title" : "Submitting your own scanner ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43154-developing-your-own-bitrise-step.html#UUID-6f7ab4ed-3edb-2f43-3fc1-a492a3eada8c_UUID-64d1a8e9-8c1c-f7e5-7732-a472ed576b35", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Developing your own Bitrise Step \/ Creating your own Bitrise project scanner \/ Scanners \/ Submitting your own scanner ", 
"snippet" : "You can submit your own scanner to Bitrise: we will review it and integrate it to the bitrise-init tool once it’s approved! The development path for a new scanner starts with your own sample project and ends with updating the existing Steps for your project type. Let’s go through it! Find or create ...", 
"body" : "You can submit your own scanner to Bitrise: we will review it and integrate it to the bitrise-init tool once it’s approved! The development path for a new scanner starts with your own sample project and ends with updating the existing Steps for your project type. Let’s go through it! Find or create an open source sample app that demonstrates a typical instance of your project type. It should include: a readme file (including tool versions required for updating, building and testing this project). a bitrise.yml file that is generated by your scanner. Build and test your sample app with existing Steps or custom scripts. Create the missing Steps the new project type needs. The PR for these Steps should link the scanner PR once you created the scanner. Create a scanner for your project type. Run the required unit tests and integration tests. Open a scanner pull request to the bitrise-init project. It should: link the new project type’s sample app. link the new project type’s guides for testing and building. include an icon for the new project type - otherwise we will create one for you. recommend the default stack by listing the required tools for building and testing the new project type. Update the existing Steps with the new project type if necessary. The PR for these Steps should link the scanner PR. " }, 
{ "title" : "Workflows ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43231-introduction-to-workflows.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Workflows ", 
"snippet" : "A Bitrise Workflow is a collection of Steps. When a build of an app is running, each Step will be executed in the order that is defined in the Workflow. A Bitrise Workflow is a collection of Steps. When a build of an app is running, each Step will be executed in the order that is defined in the Work...", 
"body" : "[video] A Bitrise Workflow is a collection of Steps. When a build of an app is running, each Step will be executed in the order that is defined in the Workflow. A Bitrise Workflow is a collection of Steps. When a build of an app is running, each Step will be executed in the order that is defined in the Workflow. Workflows can be created, defined and modified in two ways: Using the graphical Workflow Editor on bitrise.io , or the offline version on your own device . Directly editing the bitrise.yml file of your project. Ultimately, both methods modify the bitrise.yml file - the Workflow Editor is simply a friendlier way of doing so! By default, a single build is a single Workflow. But you can also chain Workflows together so they run in succession, as well as to trigger multiple Workflow to run simultaneously. Workflows can also be arranged into Pipelines . A Pipeline consists of multiple Stages and each Stage consists of one or more Workflows which run in parallel. " }, 
{ "title" : "Default Workflows ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43232-not-used--old-version--default-workflows.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows ", 
"snippet" : "When you add a new app on bitrise.io , one or two Workflows are created automatically, depending on your app. When you add a new app on bitrise.io , one or two Workflows are created automatically, depending on your app . You can use these Workflows as a basis to put together your own Bitrise configu...", 
"body" : "When you add a new app on bitrise.io , one or two Workflows are created automatically, depending on your app. When you add a new app on bitrise.io , one or two Workflows are created automatically, depending on your app . You can use these Workflows as a basis to put together your own Bitrise configuration. " }, 
{ "title" : "The primary Workflow ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43232-not-used--old-version--default-workflows.html#UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03_UUID-96432d58-8b9c-a9f0-e895-55dc4e00bc6f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows \/ The primary Workflow ", 
"snippet" : "The primary Workflow is automatically created when adding a new app. Once the process of adding the app is over, Bitrise triggers the app’s first build automatically: this build runs with the primary Workflow. The primary Workflow is not the same for every app you create: it contains different Steps...", 
"body" : "The primary Workflow is automatically created when adding a new app. Once the process of adding the app is over, Bitrise triggers the app’s first build automatically: this build runs with the primary Workflow. The primary Workflow is not the same for every app you create: it contains different Steps depending on the project type. For example, an Android project’s primary Workflow will include the Install missing Android SDK components , the Android Lint and the Android Unit Test Steps. But overall, primary is a basic Workflow that always performs the following actions: Activates the SSH key, if one has been added to the app. The Step saves it to file and then loads it into the user’s ssh-agent with the ssh-add command. The Step, by default, does not run if there is no SSH key added. Clones the Git repository of the project with the Git Clone Repository Step. Runs the Bitrise.io Cache:Pull and Bitrise.io Cache:Push Steps. Deploys build artifacts with the Deploy to Bitrise.io Step. " }, 
{ "title" : "The deploy Workflow ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43232-not-used--old-version--default-workflows.html#UUID-c30c1c55-0442-47eb-8332-5d12d7f86b03_UUID-c5adfeb2-3539-38ab-8fd8-f02c89622ee5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Default Workflows \/ The deploy Workflow ", 
"snippet" : "The deploy Workflow is automatically created when adding a new app if you have tests configured in your app. It is similar to the primary Workflow in a number of ways: It has the same basic steps. Its specific steps are dependent on the project type. The deploy Workflow, however, also contains the S...", 
"body" : "The deploy Workflow is automatically created when adding a new app if you have tests configured in your app. It is similar to the primary Workflow in a number of ways: It has the same basic steps. Its specific steps are dependent on the project type. The deploy Workflow, however, also contains the Steps that build the project, and, if the build is successful, produces the necessary artifacts for installing the app or deploying it online. For example, an Android project’s deploy Workflow contains the Android Build Step that builds your project with Gradle, and the Android Sign Step that creates a signed APK which can be deployed to Google Play or installed on test devices. " }, 
{ "title" : "Creating a Workflow ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43233-creating-a-workflow.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Creating a Workflow ", 
"snippet" : "You can create new Bitrise Workflows based on any of the existing ones, or you can simply create an empty Workflow and add the Steps yourself. It’s very simple to create your own Workflow with the Workflow Editor. You can create new Workflows based on any of the existing ones, or you can simply crea...", 
"body" : "You can create new Bitrise Workflows based on any of the existing ones, or you can simply create an empty Workflow and add the Steps yourself. It’s very simple to create your own Workflow with the Workflow Editor. You can create new Workflows based on any of the existing ones, or you can simply create an empty Workflow and add the Steps yourself. If, for example, you create a Workflow based on your primary one, it means that it will be created with the exact same Steps and input values as the primary Workflow. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, click the Create Workflow button. In the pop-up window, give your Workflow a name. The name can be as long as you wish since longer titles get broken into multiple lines so that you can read the whole title conveniently. From the dropdown menu labeled BASED ON , select the Workflow you want to use as the basis for the new one. Alternatively, choose the Empty workflow option to create an empty Workflow. Add the Steps you need to your Workflow. Click the + symbol between two Steps to insert a Step at that position. Remove Steps you do not need by clicking on the Step and clicking the little trash bin symbol. Click Save in the top right corner. " }, 
{ "title" : "Managing Workflows ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43234-managing-workflows.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows ", 
"snippet" : "You can chain multiple Workflows, rearrange the order of Workflows in a chain, as well as rename Workflows at any time in the Bitrise Workflow Editor. You can chain multiple Workflows , rearrange the order of Workflows in a chain, as well as rename Workflows at any time in the Bitrise Workflow Edito...", 
"body" : "You can chain multiple Workflows, rearrange the order of Workflows in a chain, as well as rename Workflows at any time in the Bitrise Workflow Editor. You can chain multiple Workflows , rearrange the order of Workflows in a chain, as well as rename Workflows at any time in the Bitrise Workflow Editor. Offline Workflow Editor The Workflow Editor is available both online and offline: You can use it online on bitrise.io. You can use the offline Workflow Editor . " }, 
{ "title" : "The Workflows & Pipelines screen ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43234-managing-workflows.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-aa2f38b7-60f1-a5be-4a81-b3afb4da5fd4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ The Workflows & Pipelines screen ", 
"snippet" : "The Workflows & Pipelines page provides an overview of all your Workflows and Pipelines which are the most fundamental structural elements of your Bitrise configuration. To get to the Workflows & Pipelines page, open your app on Bitrise and click the Workflows button. On the page, you can: View the ...", 
"body" : "The Workflows & Pipelines page provides an overview of all your Workflows and Pipelines which are the most fundamental structural elements of your Bitrise configuration. To get to the Workflows & Pipelines page, open your app on Bitrise and click the Workflows button. On the page, you can: View the list of all Workflows and Pipelines. For the automatically generated default Workflows , you can also see a brief summary of their function. You can filter for any Workflow or Pipeline by name. Start or schedule a build. You can do so either by clicking the Start\/schedule build button or you can find the Workflow or Pipeline you want to build and click the Run a build button next to their name. In the case of the latter, the start build dialogue window will have the selected Workflow or Pipeline already set. For more information on starting builds, see: Starting builds. Enter the Workflow Editor to create a new Workflow: click the Create Workflow button. For more information about creating Workflows, see Creating a Workflow. Enter the Workflow Editor to edit your selected Workflow by clicking the Edit Workflow next to their name. For a Pipeline, this button takes you to the bitrise.yml tab of the Workflow Editor to edit the app's bitrise.yml configuration file. You can also choose to go the bitrise.yml tab directly: click the Edit bitrise.yml button. Read more about the bitrise.yml file: Basics of bitrise.yml. If you need additional resources, you can click Help button on the page to read some of our guides to getting started with Bitrise. " }, 
{ "title" : "Chaining Workflows together ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43234-managing-workflows.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-a0a271e9-0101-a169-d144-5e7a53dfa385", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Chaining Workflows together ", 
"snippet" : "You can set up multiple Workflows to run in succession. The order of these Workflows can be rearranged, new Workflows can be added to the chain and existing Workflows can be removed from it at any time. Bitrise Start Build Step Be aware that if you chain Workflows together as described in this guide...", 
"body" : "You can set up multiple Workflows to run in succession. The order of these Workflows can be rearranged, new Workflows can be added to the chain and existing Workflows can be removed from it at any time. Bitrise Start Build Step Be aware that if you chain Workflows together as described in this guide, all the Workflows will still run on the same virtual machine. However, if you use the Bitrise Start Build Step, each of the triggered Workflows will run on a separate virtual machine: Starting parallel builds with a single trigger. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Click the ellipsis (...) button to the right of the name of the Workflow. From the dropdown menu, select Insert Workflow before to chain a Workflow before the currently selected one or select Insert Workflow after to chain a Workflow after the currently selected one. Click Save in the top right corner. Chaining Workflows in YAML In this example, we're chaining together three Workflows: test , deploy , and ci , using the before_run and after_run parameters. workflows:\n test:\n envs:\n - IS_TEST: \"true\"\n steps:\n # test Steps to run\n\n deploy:\n before_run:\n - test\n steps:\n # steps to deploy\n\n ci:\n before_run:\n - test\n after_run:\n - deploy\n\n For more information on how to manage Workflows directly in the bitrise.yml file, check Workflow reference. " }, 
{ "title" : "Rearranging chained Workflows ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43234-managing-workflows.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-bbdcb4e9-bc1a-874b-21a2-7459acb27500", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Rearranging chained Workflows ", 
"snippet" : "Once you have a chain, you can easily rearrange the order of Workflows in a drag-and-drop menu. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Click the ellipsis...", 
"body" : "Once you have a chain, you can easily rearrange the order of Workflows in a drag-and-drop menu. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Click the ellipsis (...) button to the right of the name of the Workflow. From the dropdown menu, select Change Workflow execution order to bring up a drag-and-drop menu where you can rearrange the Workflows of the chain. Click Save in the top right corner. " }, 
{ "title" : "Renaming Workflows ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43234-managing-workflows.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-b57ec426-29d3-fe6a-f7eb-739b4f6808ad", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Renaming Workflows ", 
"snippet" : "Rename your Workflows at any time you feel necessary: it’s quick and simple. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Click RENAME next to the name of the ...", 
"body" : "Rename your Workflows at any time you feel necessary: it’s quick and simple. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Click RENAME next to the name of the Workflow. Type the new name then click the check mark to save the new name. Click Save in the top right corner. " }, 
{ "title" : "Utility Workflows ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43234-managing-workflows.html#UUID-23564ae8-b234-0635-694e-7272b31f5ab4_UUID-9f190192-e074-a377-e396-d71d959d6846", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Managing Workflows \/ Utility Workflows ", 
"snippet" : "Bitrise supports a special type of Workflow called a utility Workflow. A utility Workflow's ID always starts with an underscore character: for example, _setup . They are usually used to perform tasks that are required either at the start or at the end of several different Workflows: for example, you...", 
"body" : "Bitrise supports a special type of Workflow called a utility Workflow. A utility Workflow's ID always starts with an underscore character: for example, _setup . They are usually used to perform tasks that are required either at the start or at the end of several different Workflows: for example, you can separate git cloning and activating your SSH key into a utility Workflow instead of adding those Steps to every Workflow of an app. You can create a utility Workflow the exact same way as you create a regular one. To denote it as a utility Workflow, you just need to prefix the name with an underscore. Utility Workflows cannot run alone Utility Workflows cannot be run as standalone Workflows. They need to be chained together with a normal Workflow, either before or after the Workflow: Chaining Workflows together. Utility Workflow in YAML In this example, we have two utility Workflows, called _setup and _send-notifications . They are chained together with two Workflows called test and ci using the before_run and after_run parameters. workflows:\n _send-notifications:\n steps:\n # send notifications\n\n _setup:\n steps:\n # setup Steps to run\n\n test:\n before_run:\n - _setup\n envs:\n - IS_TEST: \"true\"\n steps:\n # test Steps to run\n\n ci:\n before_run:\n - test\n after_run:\n - _send-notifications For more information on how to manage Workflows directly in the bitrise.yml file, check Workflow reference. " }, 
{ "title" : "Copying Workflows from one app to another ", 
"url" : "88887-41967-bitrise-docs/88887-43225-steps-and-workflows/88887-43235-copying-workflows-from-one-app-to-another.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Workflows and Pipelines \/ Copying Workflows from one app to another ", 
"snippet" : "You can copy an existing Bitrise Workflow from any bitrise.yml file, including your local files. If you have a lot of apps , you might not want to spend time with setting up Workflows for each and every one of them separately, especially if there’s little difference between the Workflows you want to...", 
"body" : "You can copy an existing Bitrise Workflow from any bitrise.yml file, including your local files. If you have a lot of apps , you might not want to spend time with setting up Workflows for each and every one of them separately, especially if there’s little difference between the Workflows you want to run for them. If so, the easiest thing to do is to simply copy an existing Workflow. YAML mode only Copying a Workflow to another app is only possible in YAML mode. You can create a new Workflow based on an existing one but only for the same app. You can copy a Workflow from any bitrise.yml file, including your local files. To copy an existing Workflow from one Bitrise app to another on our website: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select bitrise.yml from the navigation menu. Select the Workflow you want and copy it. Open the app you want to copy it to. Go to the Workflow tab and then the bitrise.yml tab. Paste the Workflow under the workflows property. " }, 
{ "title" : "Builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds ", 
"snippet" : "A Bitrise build is specified by the app’s Workflow which is a collection of Steps. The app’s build configuration can be modified in the bitrise.yml file or in the graphical Workflow Editor. A Bitrise build is a series of jobs, specified by the app’s Workflow which is a collection of Steps . The app’...", 
"body" : "A Bitrise build is specified by the app’s Workflow which is a collection of Steps. The app’s build configuration can be modified in the bitrise.yml file or in the graphical Workflow Editor. A Bitrise build is a series of jobs, specified by the app’s Workflow which is a collection of Steps . The app’s build configuration is specified in the bitrise.yml configuration file which you can modify in bitrise.io ’s graphical Workflow Editor or locally. The file can be stored on bitrise.io or in your app's Git repository . When a build is running, the scripts that define the Steps will be executed in the order you’ve defined in your Workflow, with the input parameters you set. They can produce multiple different outputs that other Steps can use, including but not limited to executable binaries, screenshots, test reports, variables, and so on. The build process is the following: Starting the build , either manually or by an automatic trigger. Environment preparation: A virtual machine will be provisioned and prepared to run the build. Build specific Environment Variables are preset so you can use these in your Steps. You can find more information about the available stacks in the Workflow Editor, on the Stack tab. Workflow execution: Steps in Workflows are executed in the same order as defined in the Workflow Editor of your application, from top to bottom. You can reorder the Steps by dragging them around. The log each Step generates will be displayed on the build’s details page. Cleanup: After the execution of the build, a build log is created and stored on the Bitrise server. The virtual machine running the build is destroyed so your code\/files will never fall into the wrong hands. Build retention for 200 days On the Builds page of your app, we only show builds from the last 200 days. The same limit applies if you are searching for specific builds on the page. This limitation also applies to most API calls: the GET\/apps\/{app-slug}\/builds endpoint and related endpoints can only return builds from the last 200 days. However, there are two methods to get a build that is older than 200 days: If you know the exact build URL, you can access the build. You can use the GET\/apps\/{app-slug}\/archived-builds API endpoint: Listing the archived builds of an app. After the build has finished, users can be notified via email , or you can set up your own Slack integration , for example. " }, 
{ "title" : "Configuring build settings ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings ", 
"snippet" : "The heart of your build is the bitrise.yml file. You can configure the Steps you use, the project type, the trigger map, and specify the app- and Workflow-level Env Vars. You can configure and customize your builds extensively. Bitrise provides a multitude of options to make sure you can build your ...", 
"body" : "The heart of your build is the bitrise.yml file. You can configure the Steps you use, the project type, the trigger map, and specify the app- and Workflow-level Env Vars. You can configure and customize your builds extensively. Bitrise provides a multitude of options to make sure you can build your app exactly the way you want to. The heart of your build configuration is the bitrise.yml file: this file contains the configuration of all the Workflows and Steps you use, it specifies the project type, the trigger map, and it contains the app- and Workflow-level Environment Variables you specified. You can store this file on bitrise.io or in your Git repository and you can access the bitrise.yml file of any previous build you ran. You can configure notifications so that users are immediately notified when a build is finished. If you don't want to run a build every time a commit is pushed or a pull request is opened, but rather only if certain files are changed, you can do that using the Selective builds feature. If commits are frequently pushed to your repository, with each commit triggering a new build, you don't have to wait until each triggered build finishes before a new one can start. Use the Rolling builds feature to make sure you don't waste time! " }, 
{ "title" : "Setting the stack for your builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds ", 
"snippet" : "The build stack indicates the virtual machine version that Bitrise will use to run your build. You can set the stack for all your builds, or you can set Workflow-specific stacks, either in the Workflow Editor or in the bitrise.yml file. The build stack indicates the virtual machine version that we w...", 
"body" : "The build stack indicates the virtual machine version that Bitrise will use to run your build. You can set the stack for all your builds, or you can set Workflow-specific stacks, either in the Workflow Editor or in the bitrise.yml file. The build stack indicates the virtual machine version that we will use to run your build. You can set the stack for all your builds, or you can set Workflow -specific stacks. Changing machine types using the API You can also change build machine types for all apps owned by a single user or Workspace using the API: Changing machine types in all apps at the same time. " }, 
{ "title" : "Setting the stack in the Workflow Editor ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-94ae865c-3fd1-947c-4b54-1aab37dad407", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the Workflow Editor ", 
"snippet" : "The simplest way to configure the build stack is in the Workflow Editor . You can set both the default stack and Workflow-specific stacks....", 
"body" : "The simplest way to configure the build stack is in the Workflow Editor . You can set both the default stack and Workflow-specific stacks. " }, 
{ "title" : "Setting the stack in the bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-ccc85826-bef3-db23-2cb2-1341121a23cf", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Setting the stack in the bitrise.yml file ", 
"snippet" : "You can set both the default stack and Workflow-specific tasks in the bitrise.yml file of your app. Use the meta field with the appropriate stack ID: meta:       bitrise.io:        stack: osx-xcode-13.1.x This is particularly useful if you keep your bitrise.yml file stored in your app's repository ....", 
"body" : "You can set both the default stack and Workflow-specific tasks in the bitrise.yml file of your app. Use the meta field with the appropriate stack ID: meta:      \n bitrise.io:       \n stack: osx-xcode-13.1.x This is particularly useful if you keep your bitrise.yml file stored in your app's repository . Stack IDs You can find the stack IDs on the top of each stack report: Bitrise stack reports . Alternatively, you can set a stack in the Workflow Editor and then check out the ID on the bitrise.yml tab, by finding the meta field. The stack reports also show every pre-installed tool that is available on the stack. " }, 
{ "title" : "Build machine types ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-aed694b0-cca2-95b9-186f-d340dfc175e4_UUID-9b699662-b081-1049-24a7-dfee5c6c0f56", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting the stack for your builds \/ Build machine types ", 
"snippet" : "Bitrise offers multiple build machines with different specifications and credit costs. You can choose between them based on your needs. Bitrise offers multiple build machines with different specifications and credit costs. You can choose between them based on your needs. You can track how much time ...", 
"body" : "Bitrise offers multiple build machines with different specifications and credit costs. You can choose between them based on your needs. Bitrise offers multiple build machines with different specifications and credit costs. You can choose between them based on your needs. You can track how much time you spent building your apps on each machine type with Insights: Utilization metrics. Machine availability by subscription plan Not all machines are available on all subscription plans. Visit the pricing page to find out which machines are available on your plan! macOS machines with Intel CPU deprecated macOS build machines with Intel CPUs have been deprecated. Do not use them in your app's configuration. Instead use the Apple silicon M1 machines. Transitioning from Apple Intel to Apple silicon Bitrise build machine types Operating system Machine type name CPU RAM Credit cost per minute Machine type ID for YAML configuration macOS M1 Medium 4 CPU @3.2GHz 6 GB 2\/min g2-m1.4core M1 Large 8 CPU @3.2 GHz 12 GB 4\/min g2-m1.8core M1 Max Medium 5 CPU @3.2 GHz 27 GB 6\/min g2-m1-max.5core M1 Max Large 10 CPU @3.2 GHz 54 GB 8\/min g2-m1-max.10core Linux Medium 4 vCPU @3.1 GHz 16 GB 1\/min standard Large 8 vCPU @3.1 GHz 32 GB 2\/min elite X Large 16 vCPU @3.1 GHz 64 GB 4\/min elite-xl " }, 
{ "title" : "Managing an app's bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file ", 
"snippet" : "The heart of your build is the bitrise.yml file. You can configure the Steps you use, the project type, the trigger map, and specify the app- and Workflow-level Env Vars. The bitrise.yml file is the heart of your Bitrise setup: it stores your entire build configuration for an app . It specifies your...", 
"body" : "The heart of your build is the bitrise.yml file. You can configure the Steps you use, the project type, the trigger map, and specify the app- and Workflow-level Env Vars. The bitrise.yml file is the heart of your Bitrise setup: it stores your entire build configuration for an app . It specifies your stack, the trigger map, and what Workflows and Steps are included. When you edit your Workflows on the graphical UI of our Workflow Editor, you actually modify the bitrise.yml file. YAML files size limitation Please note that the total, combined size of the bitrise.yml and the bitrise.secrets.yml file cannot exceed 400KB. There are two ways to manage the bitrise.yml file of your app: Keep the file in your Git repository: with this solution, you have full control over maintaining and versioning the bitrise.yml file. Keep it on bitrise.io : Bitrise will store your configuration, and you can access it any time on the website. With this solution, the configuration file is fully independent from your repository. You can switch between the two solutions at any time. bitrise.yml reference You can find detailed reference information about the bitrise.yml file in our relevant guide: Basics of bitrise.yml. " }, 
{ "title" : "Storing the bitrise.yml file in your repository ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-f18689c6-db62-6c36-6c27-5e43b8617b57", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing the bitrise.yml file in your repository ", 
"snippet" : "Privately hosted repositories Unfortunately, this feature is not yet supported for users who can't use the service credential user integration or the GitHub App integration ; for example, if the repository is is only accessible under a private IP subnet. There's a workaround, however: Storing the bi...", 
"body" : "Privately hosted repositories Unfortunately, this feature is not yet supported for users who can't use the service credential user integration or the GitHub App integration ; for example, if the repository is is only accessible under a private IP subnet. There's a workaround, however: Storing the bitrise.yml in a privately hosted repository . This workaround works, for example, for Bitbucket Server users. For GitHub Enterprise, we offer an integration that allows you to store your bitrise.yml file in a GitHub Enterprise repository: Integrating self-hosted GitHub Enterprise Server with Bitrise. When you store the bitrise.yml configuration file in your repository, the build process on Bitrise will use that file to run your builds. This means that: You have full control over versioning your configuration file. Every time you make a change to your Workflows or your trigger map, you must commit the changes to the file in the repository. You don’t need to create your own bitrise.yml file in advance: you can use the file stored on bitrise.io . Let's see how to store the bitrise.yml file in a repository that does not contain one yet. The feature requires service credential integration. If the service credential user is not supported, the feature won't work. Multiple apps with the same repository You can only store a single bitrise.yml file in a given repository. Bitrise will look for the file in the root directory, and as such, currently there’s no way to include two in separate folders. If you have the code for multiple Bitrise apps in the same repository, we recommend using different Workflows for the different apps. Open the app on Bitrise and go to the App settings page. Select Collaboration . Check the Service credential user section. The service credential user must be a Bitrise user who has at least read access to the repository. Open the Workflow Editor. In the Workflow Editor, select bitrise.yml from the navigation menu on the left. Click Store in app repository . When prompted to add the bitrise.yml to your app's repository, you have two options: Copy the content of the current bitrise.yml file to the clipboard. You can then create your own file and copy the contents into it. Download the current bitrise.yml file. In your repository, commit the bitrise.yml file to the root of the default branch. The default branch of your app must always have a bitrise.yml file on it. You can store different bitrise.yml files on the other branches: Storing a bitrise.yml file on multiple branches in the repository. You can check your Bitrise app's default branch on bitrise.io by going to the Settings tab and finding the DEFAULT BRANCH option. On Bitrise, click Update setting . When prompted to make sure your bitrise.yml file is valid, click Continue . Make sure the file is valid The bitrise.yml file in your repository always must be valid! If it contains incorrect syntax, it can break your builds. If all goes well, you should receive confirmation of successfully changing your bitrise.yml storage settings. Allowlist the Bitrise website IP addresses If you use some form of self-hosted solution for storing your code, you might need to allowlist the static IP addresses of the Bitrise website and its background workers. This allows you to use such features as storing the bitrise.yml file in your own repository, or receiving build status updates from Bitrise: IP address ranges for Bitrise backend workers. " }, 
{ "title" : "Updating a bitrise.yml stored in the repository ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-193d5dd1-fafb-4992-dc62-a78498f077f3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Updating a bitrise.yml stored in the repository ", 
"snippet" : "When you store the bitrise.yml file in your repository, you can still use the online Workflow Editor to make changes to your build configuration. You just need to commit your changes after saving them in the Workflow Editor: Open your app on Bitrise . Click the Workflows button on the main page. On ...", 
"body" : "When you store the bitrise.yml file in your repository, you can still use the online Workflow Editor to make changes to your build configuration. You just need to commit your changes after saving them in the Workflow Editor: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Make changes to the Workflows you want to update. Click Save in the top right corner. You're prompted to update the bitrise.yml file in your repository. You have two options: Copy the content of the current bitrise.yml file to the clipboard. You can then create your own file and copy the contents into it. Download the current bitrise.yml file. In your repository, commit the bitrise.yml file. On Bitrise, click I'm done to fetch the bitrise.yml from your repository. Commit your changes first! If you haven't committed your changes to the repository, this will overwrite them! " }, 
{ "title" : "Storing a bitrise.yml file on multiple branches in the repository ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-ff1f2978-919e-d83d-0b3a-ff508e86af1d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Storing a bitrise.yml file on multiple branches in the repository ", 
"snippet" : "When you first add the bitrise.yml to your repository, it must be committed to the default branch. You can check out the app’s default branch on bitrise.io under the Settings tab. If you choose to store the bitrise.yml file in the repository, the default branch must have a bitrise.yml ! However, onc...", 
"body" : "When you first add the bitrise.yml to your repository, it must be committed to the default branch. You can check out the app’s default branch on bitrise.io under the Settings tab. If you choose to store the bitrise.yml file in the repository, the default branch must have a bitrise.yml ! However, once you did the initial configuration to set up using the bitrise.yml from your repository, you can store bitrise.yml files on other branches and use any of them to run builds. If you want to build a branch of your repository on Bitrise, you need to have a bitrise.yml file on that branch. And don’t forget that you always need to keep a bitrise.yml file on the default branch. Bitrise setup with bitrise.yml files on multiple branches Let’s say you have an app called FantasticApp. In FantasticApp’s Git repository, the default branch is called main . There is also a deploy branch. Any code push or pull request to main triggers a Workflow called main-workflow . Any code push or pull request to deploy triggers a Workflow called deploy-workflow . In the repository, there is a bitrise.yml file on both the main and the deploy branch, containing both Workflows. When making changes to the Workflows, the FantasticApp team commits the modified bitrise.yml file to both branches to ensure that their Workflows are up to date on both. " }, 
{ "title" : "Moving the bitrise.yml file back to bitrise.io ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-babdfcf9-c70a-1513-e12e-046beb9f879c_UUID-831e325f-ef03-5273-efc8-71614fea286c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Managing an app's bitrise.yml file \/ Moving the bitrise.yml file back to bitrise.io ", 
"snippet" : "The default setting is to store the bitrise.yml file on bitrise.io : when you add a new app, we automatically create a bitrise.yml file for you and it’s stored on our website. If this works for you, then you don’t need to change anything! If, however, you changed your storage settings to keep the co...", 
"body" : "The default setting is to store the bitrise.yml file on bitrise.io : when you add a new app, we automatically create a bitrise.yml file for you and it’s stored on our website. If this works for you, then you don’t need to change anything! If, however, you changed your storage settings to keep the configuration file in your repository, you can easily change it back any time to store the file on bitrise.io . Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. In the Workflow Editor, select bitrise.yml from the navigation menu on the left. Click Store on bitrise.io . Choose which bitrise.yml file should be used on bitrise.io from now. You can copy the content of the bitrise.yml file stored in the app’s repository. You can copy the last version of the bitrise.yml file that you used on bitrise.io . Click Update setting . If all goes well, you should receive confirmation of successfully changing your bitrise.yml storage settings. " }, 
{ "title" : "Editing the app's bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file ", 
"snippet" : "You can edit the file on bitrise.io, in the graphical Workflow Editor, or you can download it and edit it locally. Whenever you modify a Workflow or a Step in the Workflow Editor, you're indirectly editing the app's bitrise.yml configuration file. Whenever you modify a Workflow or a Step in the Work...", 
"body" : "You can edit the file on bitrise.io, in the graphical Workflow Editor, or you can download it and edit it locally. Whenever you modify a Workflow or a Step in the Workflow Editor, you're indirectly editing the app's bitrise.yml configuration file. Whenever you modify a Workflow or a Step in the Workflow Editor, you're indirectly editing the app's bitrise.yml configuration file. However, if you prefer, you can edit the file directly, in YAML. This requires some familiarity with the structure of the bitrise.yml file. Read more: Basics of bitrise.ymlYou can edit the file on bitrise.io, in the graphical Workflow Editor, or you can download it and edit it locally. " }, 
{ "title" : "Editing the bitrise.yml file online ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-5a8a5778-2583-3270-a1bb-52af7b023f0c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file online ", 
"snippet" : "You can edit your build config in yml format in the bitrise.yml editor if you go to your app’s Workflow Editor and click the bitrise.yml tab. Fold and unfold with the - and + signs. Press Ctrl \/ Cmd + F for search and replace where you can search with RegExp , Match Whole Word , case-sensitive, case...", 
"body" : "You can edit your build config in yml format in the bitrise.yml editor if you go to your app’s Workflow Editor and click the bitrise.yml tab. Fold and unfold with the - and + signs. Press Ctrl \/ Cmd + F for search and replace where you can search with RegExp , Match Whole Word , case-sensitive, case-insensitive, or to search only in the selected section. Use the preview sidebar on the right for easier navigation. To save your changes, click Save in the top right corner. To download the current bitrise.yml file, click Download currently saved config . Alternatively, you can simply select certain sections of the file and copy those into either a local bitrise.yml file or into another app's bitrise.yml file. " }, 
{ "title" : "Editing the bitrise.yml file locally ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-f2dc633f-ad0b-6ab4-7083-1176229ca195_UUID-d0674540-e7cf-2ce0-8f59-569fc6704400", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Editing the app's bitrise.yml file \/ Editing the bitrise.yml file locally ", 
"snippet" : "Our yml scheme is shared on schemastore . This means that syntax highlight and auto-completion is available for the following files if you edit them locally: bitrise.yml step.yml bitrise.json The following editors support the auto-complete feature: IntelliJ IDEA PhpStorm PyCharm Rider RubyMine Visua...", 
"body" : "Our yml scheme is shared on schemastore . This means that syntax highlight and auto-completion is available for the following files if you edit them locally: bitrise.yml step.yml bitrise.json The following editors support the auto-complete feature: IntelliJ IDEA PhpStorm PyCharm Rider RubyMine Visual Studio 2013+ Visual Studio Code Visual Studio for Mac WebStorm JSONBuddy " }, 
{ "title" : "Accessing a build's bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file ", 
"snippet" : "You can access a build's bitrise.yml file by selecting a build from your app's Dashboard and selecting 'show bitrise.yml' from the bitrise.yml drop-down menu. Once you ran a build on Bitrise, you can always check the bitrise.yml configuration the build used. You can download it, compare it to the cu...", 
"body" : "You can access a build's bitrise.yml file by selecting a build from your app's Dashboard and selecting 'show bitrise.yml' from the bitrise.yml drop-down menu. Once you ran a build on Bitrise, you can always check the bitrise.yml configuration the build used. You can download it, compare it to the current bitrise.yml file, and you can even replace the current configuration file with the build's configuration file. To access a build's configuration file: Select an application on your Dashboard and select one of its builds. Select bitrise.yml on the right, above the build status card. In the dropdown menu, select Show bitrise.yml . " }, 
{ "title" : "Checking changes in the bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-54cdbcb3-6b6f-34fe-fba2-b0bfaf593317", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Checking changes in the bitrise.yml file ", 
"snippet" : "Once you’ve clicked Show bitrise.yml , you will see the BUILD’S BITRISE YML pop-up window displaying your builds’ configuration details. If the build’s bitrise.yml content differs from the current build’s bitrise.yml , you will see two editors displayed side-by-side in the BITRISE.YML CHANGES pop-up...", 
"body" : "Once you’ve clicked Show bitrise.yml , you will see the BUILD’S BITRISE YML pop-up window displaying your builds’ configuration details. If the build’s bitrise.yml content differs from the current build’s bitrise.yml , you will see two editors displayed side-by-side in the BITRISE.YML CHANGES pop-up window. The differences between the builds are highlighted in the following colors: Green means added content. Blue means modified content. Red means deleted content. " }, 
{ "title" : "Restoring the current bitrise.yml to the build's bitrise.yml ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-1ae5b6ec-f0d2-087f-e762-89e7672cceca", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Restoring the current bitrise.yml to the build's bitrise.yml ", 
"snippet" : "You can always change the current bitrise.yml configuration to the configuration of one of your app's previous builds. To do so: Select an application on your Dashboard and select one of its builds. Select bitrise.yml on the right, above the build status card. In the dropdown menu, select Show bitri...", 
"body" : "You can always change the current bitrise.yml configuration to the configuration of one of your app's previous builds. To do so: Select an application on your Dashboard and select one of its builds. Select bitrise.yml on the right, above the build status card. In the dropdown menu, select Show bitrise.yml . In the BITRISE.YML CHANGES pop-up window, click the Restore button. Hit OK in the Are you sure? pop-up window to confirm and override the current bitrise.yml . " }, 
{ "title" : "Deleting a build's bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-cbc8672e-bd39-b23e-a3fa-0ebb1af53709_UUID-e9b998ef-f6c1-4126-67b2-dd246fa78c6a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Accessing a build's bitrise.yml file \/ Deleting a build's bitrise.yml file ", 
"snippet" : "If you wish, you can simply delete a build’s bitrise.yml file. But please note that this action cannot be undone: nobody will be able to view that particular build’s bitrise.yml file once you delete it. Select an application on your Dashboard and select one of its builds. Select bitrise.yml on the r...", 
"body" : "If you wish, you can simply delete a build’s bitrise.yml file. But please note that this action cannot be undone: nobody will be able to view that particular build’s bitrise.yml file once you delete it. Select an application on your Dashboard and select one of its builds. Select bitrise.yml on the right, above the build status card. In the dropdown menu, select Delete bitrise.yml . In the confirmation window, click Yes . " }, 
{ "title" : "Selective builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-c05627e7-6c71-b265-3d09-a95f3b3abc9a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Selective builds ", 
"snippet" : "The Selective builds setting provides change detection for your builds. Enabling it allows you to only trigger a build of an app if certain files or folders have been modified. Using build triggers instead This is a legacy feature. Instead of using this feature, you can now configure build triggers ...", 
"body" : "The Selective builds setting provides change detection for your builds. Enabling it allows you to only trigger a build of an app if certain files or folders have been modified. Using build triggers instead This is a legacy feature. Instead of using this feature, you can now configure build triggers to only trigger builds when certain files or folders have changed: to do so, create a new trigger for push or pull request events, and choose the Files changed trigger condition. We strongly recommend using this option instead of Selective builds. The Selective builds setting provides change detection for your builds. Enabling it allows you to only trigger a build of an app if certain files or folders have been modified. You may want to use this setting if: You have a monorepo; that is, you build multiple apps from a single repository. Multiple apps share common files in your repository. Selective Builds with non-Github projects The current version of our Selective Builds feature only works with GitHub projects. If your repository is hosted by another Git hosting service, the option will not be available. Using the Selective builds feature Let's say you want to make sure that a commit to your app's repository triggers a Bitrise build only if the mycode.go file on the develop branch is modified in the commit. In this example, you have a branch called  develop . You have a trigger that starts a build every time a code push happens on the  develop  branch. In the selective builds feature, you specified the  mycode.go  file in the input field. If you make a commit on the develop branch that modifies the mycode.go file, Bitrise will trigger a build. If your commit doesn't modify the file in any way, Bitrise will not trigger a build. To configure selective builds: Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . Make sure the appropriate service credential user is set on the Integrations page. This user must have admin right for the GitHub repository of the project. Click on your app on your Dashboard . On the left, select Builds . Find the Selective builds section. Click the Add path button. Can't find the button? If you can't find the button - like in the screenshot above -, it is because of two possible reasons: The app's repository isn't hosted on GitHub. The service credential user isn't set correctly or doesn't have admin rights to the repo. In the pop-up window, set the paths you need. You can add one path at a time. " }, 
{ "title" : "Rolling builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-52681a2a-c690-3def-28cd-16823ba9eb01", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Rolling builds ", 
"snippet" : "With the rolling builds feature, you can configure Bitrise to automatically abort on-hold builds or already running builds if another build is triggered on the same branch. You can cancel running builds or builds on hold - no need to abort them manually! If you turn on the Rolling Builds feature, th...", 
"body" : "[video] With the rolling builds feature, you can configure Bitrise to automatically abort on-hold builds or already running builds if another build is triggered on the same branch. You can cancel running builds or builds on hold - no need to abort them manually! If you turn on the Rolling Builds feature, the previous builds of your app can be automatically aborted once a new one is started. Please note that manual and scheduled builds are also cancelled if you start a new build with the Rolling builds option enabled. When is a build aborted? If you trigger a build on a branch where a build is already running, the running build is aborted only if it runs the same Workflow . For example, if you trigger a build on the master branch of your repository with the deploy Workflow, it will NOT cancel a build running on the same master branch with the primary Workflow. You can also set which types of triggered builds you wish to abort. Let’s see how! Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Builds . Find the Rolling builds section. Select the type(s) of builds you wish to abort when a new build is started. Enabling the options will do the following: Enabled for Pull Requests : will cancel all previous builds still on-hold for Pull Requests and all related Pushes. Running builds will not be canceled unless Running builds are aborted is also enabled. Enabled for Pushes : will cancel all previous builds still on-hold for Pushes to the same branch. Running builds will not be canceled unless Running builds are aborted is also enabled. Running builds are aborted : will also auto-cancel running builds in addition to on-hold ones. All done! From now on, you don’t have to wait for a triggered build to finish if you do not need it! " }, 
{ "title" : "Configuring email notifications ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications ", 
"snippet" : "Bitrise's built-in email notification system sends emails about builds to every user who is assigned to work on an application. They are sent when a build is finished and they can be configured for both successful and failed builds. Notifications are updates about your activity on Bitrise. Usually, ...", 
"body" : "Bitrise's built-in email notification system sends emails about builds to every user who is assigned to work on an application. They are sent when a build is finished and they can be configured for both successful and failed builds. Notifications are updates about your activity on Bitrise. Usually, they concern the state of your builds but you can receive notifications about a lot of different things. Our built-in email notification system sends emails about builds to every user who is assigned to work on an application . They are sent when a build is finished and they can be configured for both successful and failed builds. Watching the app To receive automatic email messages, you need to be watching the app . If you turn off watching, you won’t receive the automated emails. Email notifications are automatically set up for all applications when first creating them but you can modify these notification settings at any time: Changing your email notification settingsThe alternative solution is to send emails via a dedicated Step . This allows for far more customization regarding the notifications: Sending emails with a Step" }, 
{ "title" : "Watching an app ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-9b9a2396-436a-5e52-3f2f-4b49142e6a37", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Watching an app ", 
"snippet" : "Watching an app means getting email notifications for that app. This is the default setting for every app you create or you are invited to. Turning off watching the app means you will NO LONGER GET AUTOMATIC NOTIFICATIONS. To toggle the feature, go to your Dashboard and open the app you want to watc...", 
"body" : "Watching an app means getting email notifications for that app. This is the default setting for every app you create or you are invited to. Turning off watching the app means you will NO LONGER GET AUTOMATIC NOTIFICATIONS. To toggle the feature, go to your Dashboard and open the app you want to watch or unwatch. On the top right, you will see a button with the label Watching if you are watching the app currently. If not, the button will show Watch . Toggle it. " }, 
{ "title" : "Changing your email notification settings ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-f51180b1-c8de-7feb-e020-0b6e790debd5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Changing your email notification settings ", 
"snippet" : "Email notifications are automatically set up for all applications when first creating them. There are three possible settings for both successful builds and failed builds: Always . This is the default setting for failed builds. Never . Send email when build status changes on the same branch . This i...", 
"body" : "Email notifications are automatically set up for all applications when first creating them. There are three possible settings for both successful builds and failed builds: Always . This is the default setting for failed builds. Never . Send email when build status changes on the same branch . This is the default setting for successful builds. This means that if build #1 and build #2 both succeeded, you will not get a notification about build #2. However, if build #3 fails and then build #4 succeeds again, you will be notified. You can change your email notification settings at any time - you can even completely disable them. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Notifications . Scroll down to email notifications. Select the settings you need for both successful and failed builds from the appropriate dropdown menu. For example, if you want to disable receiving notifications, set both options to Never . " }, 
{ "title" : "Sending emails with a Step ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-6bd910f1-50ed-f4bd-04d7-7399c642763d_UUID-026b92b1-7a65-94f8-73b6-449dad27bbc0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring email notifications \/ Sending emails with a Step ", 
"snippet" : "The Send Email with Mailgun Step can send emails to any email address with customized updates, in either HTML or plain text format. You can use environment variables to send information, as well as attach files to the emails. To use the Step, you need: A Mailgun account. A Mailgun API key. Your Mail...", 
"body" : "The Send Email with Mailgun Step can send emails to any email address with customized updates, in either HTML or plain text format. You can use environment variables to send information, as well as attach files to the emails. To use the Step, you need: A Mailgun account. A Mailgun API key. Your Mailgun domain name. Make sure the Step runs in every build! If you use the Send Email with Mailgun Step in your workflow, make sure that it is always set to run even if the previous Step failed ! This is the default setting of the Step. If you change it, you will not receive emails if your builds fail. Create a Secret Environment Variable that holds your Mailgun API key. We recommend naming the key $MAILGUN_API_KEY . This is the default value of the Step’s relevant input. Create a Secret Environment Variable that holds your Mailgun domain. We recommend naming the key $MAILGUN_DOMAIN . This is the default value of the Step’s relevant input. Add the Send Email with Mailgun Step to the end of your workflow. Find the Send To emails input of the Step. Click on the input and then click Select secret variable . Create a new Secret Environment Variable that contains the list of the email addresses. You can choose any key you want. The addresses should be separated by a comma. Set the email subject, and the two potential email messages: one for a successful build, one for a failed build. You can insert environment variables to any of the inputs (the subject and the messages). In the email, the values of the variables will be displayed. The default messages will send the name of the app, the number of the build and whether the build succeeded or failed. Attach files, if necessary: the File attachments input accepts a file path or an environment variable as input. Multiple files can be attached: separate their paths with commas. Run a build - and check your emails! " }, 
{ "title" : "Configuring Slack integration ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-58499b8a-d97e-d8f7-6645-4e52ddee3faf", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Configuring Slack integration ", 
"snippet" : "You can integrate Slack to your app on Bitrise by adding the \"Send a Slack message\" Step to your app's Workflow. Bitrise supports Slack integration, of course - and it’s quite easy to set it up. Send Slack messages to individual users, groups or channels; customize the messages, include attachments,...", 
"body" : "You can integrate Slack to your app on Bitrise by adding the \"Send a Slack message\" Step to your app's Workflow. Bitrise supports Slack integration, of course - and it’s quite easy to set it up. Send Slack messages to individual users, groups or channels; customize the messages, include attachments, and link buttons that will take the users to the build page. To use our dedicated Step , you need either a Slack webhook URL or a Slack API token for a Slack bot user . Make sure that the Step runs in every build! If you use the Send a Slack message Step in your Workflow , make sure that it is always set to run even if the previous Step failed ! This is the default setting of the Step. If you change it, messages won’t be sent if the build fails. Add the Send a Slack message Step to your Workflow. Find either the Slack Webhook URL or the Slack API token input. Click on the input and then click Select secret variable . Create a new Secret Environment Variable that stores your webhook URL or your Slack API token. You can choose any key you want. Customize your Slack message with the relevant inputs of the Step. There are several options, including but not limited to: Setting the target channel, group or username: this can be a name or an encoded ID. The text of the message to send. The bot’s username for the message The message’s color File attachment Link buttons attached to the message Check out all the inputs in the Workflow Editor to see all the ways in which you can customize your Slack messages. " }, 
{ "title" : "Setting your Git credentials on build machines ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-5dc87a30-7ae6-b137-bbc1-84e44e4fcba0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Setting your Git credentials on build machines ", 
"snippet" : "If you want to push back any commits to your own Git repo from Bitrise while running your build, you can set up your Git credentials on build machines. The default Git username and user email address on our stacks are the following: git config --global user.email \"please-set-your-email@bitrise.io\" g...", 
"body" : "If you want to push back any commits to your own Git repo from Bitrise while running your build, you can set up your Git credentials on build machines. The default Git username and user email address on our stacks are the following: git config --global user.email \"please-set-your-email@bitrise.io\"\ngit config --global user.name \"J. Doe (https:\/\/devcenter.bitrise.io\/builds\/setting-your-git-credentials-on-build-machines\/)\"\n If you want to push back ( git push ) any commits to your own repo from Bitrise while running your build, you have to set your own username and the email address. There are three ways to achieve this: You can use a custom Script Step to set your credentials with the git config command. You can set your Git credentials as Env Vars. You can use the Set Git Credentials Step. " }, 
{ "title" : "Reporting the build status to your Git hosting provider ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider ", 
"snippet" : "You need to authenticate Bitrise and specify a Service credential user in the App settings page of your app to push back build status reports to your Git provider. GitHub App integration If you use the Bitrise GitHub App to connect your Bitrise Workspace to a Git account or organization, you don't n...", 
"body" : "You need to authenticate Bitrise and specify a Service credential user in the App settings page of your app to push back build status reports to your Git provider. GitHub App integration If you use the Bitrise GitHub App to connect your Bitrise Workspace to a Git account or organization, you don't need any additional configuration described in the guide: the app automatically provides status reports. Bitrise can push back build status reports to your Git provider (GitHub\/GitLab\/Bitbucket). You only need to authenticate Bitrise to communicate towards the Git hosting service. Apart from build status reports, this enables other operations, such as auto-registering SSH keys or webhooks. Status reports are sent only for automatically triggered builds, such as builds triggered by a code push or a pull request. To do this, you need to specify a Service credential user of your app on bitrise.io . You also need to make sure that this user has a connected account with the Git hosting service of your choice on bitrise.io . This account will be used by Bitrise to communicate with the API of the Git hosting provider. " }, 
{ "title" : "Configuring build status reporting ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-9a12843a-b48f-79ff-c1c4-3242c86bf956", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Configuring build status reporting ", 
"snippet" : "Allowlist the Bitrise website IP addresses If you use some form of self-hosted solution for storing your code, you might need to allowlist the static IP addresses of the Bitrise website and its background workers. This allows you to use such features as storing the bitrise.yml file in your own repos...", 
"body" : "Allowlist the Bitrise website IP addresses If you use some form of self-hosted solution for storing your code, you might need to allowlist the static IP addresses of the Bitrise website and its background workers. This allows you to use such features as storing the bitrise.yml file in your own repository, or receiving build status updates from Bitrise: IP address ranges for Bitrise backend workers. To report your status, you need to make sure that the service credential user's Bitrise account is connected to their Git provider account. This Git account must have access to the app's repository. Service credential user restriction You can only set yourself as the service credential user and to do so, you need to have an Admin role on the app's team on Bitrise. If the service credential user should be a specific Bitrise user, that user must log in and set themselves. For more information, see: Changing the service credential user. To check that build status reporting is possible: In the upper right corner, open the account selector dropdown menu. Select the Account settings option. Make sure your account is connected to the Git provider that hosts the repository: check the  CONNECTED ACCOUNTS  menu on the left side. Make sure the connected Git provider account has the required level of permission for sending status reports. On GitHub and Bitbucket, Write access is required. On GitLab, Developer access is required. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations . Find the Service credential user section. Click the Test <Git provider> connection button to make sure the selected user’s connection can be used for sending back the build status to the hosting provider. " }, 
{ "title" : "Troubleshooting build status reporting ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53280-configuring-build-settings.html#UUID-32d6af77-db24-16c4-2ccd-6048586d7dff_UUID-22d09dbd-17f2-8b88-a0ce-635f319e8a5d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Configuring build settings \/ Reporting the build status to your Git hosting provider \/ Troubleshooting build status reporting ", 
"snippet" : "If your builds do not send status reports to your Git hosting provider - GitHub, GitLab or Bitbucket -, you will need to do a little investigating to find out what causes the problem. Let’s take a look at the potential issues!...", 
"body" : "If your builds do not send status reports to your Git hosting provider - GitHub, GitLab or Bitbucket -, you will need to do a little investigating to find out what causes the problem. Let’s take a look at the potential issues! " }, 
{ "title" : "Starting builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds ", 
"snippet" : "You can start builds on Bitrise in multiple ways: manually, by scheduling, setting up triggers, or by using the API. Pipelines This section of the documentation deals with starting standalone Bitrise builds. For starting a Pipelines, check out Running a Pipeline. You can start builds on Bitrise in m...", 
"body" : "You can start builds on Bitrise in multiple ways: manually, by scheduling, setting up triggers, or by using the API. Pipelines This section of the documentation deals with starting standalone Bitrise builds. For starting a Pipelines, check out Running a Pipeline. You can start builds on Bitrise in multiple ways: Starting builds manuallyScheduling buildsTriggering builds automaticallyWith the API: Triggering and aborting buildsYou can also configure Bitrise to skip certain commits or Git Tags, preventing these from triggering builds. " }, 
{ "title" : "Starting builds manually ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually ", 
"snippet" : "You can start builds manually by selecting the app you need from your Dashboard and clicking the Start\/Schedule build button. Starting a build manually on Bitrise takes literally two clicks - if you leave everything on the default settings. If you do not wish to do that, or at least want to be sure ...", 
"body" : "You can start builds manually by selecting the app you need from your Dashboard and clicking the Start\/Schedule build button. Starting a build manually on Bitrise takes literally two clicks - if you leave everything on the default settings. If you do not wish to do that, or at least want to be sure what the default settings are, read on! To start a build using the basic configuration options: On the Bitrise CI page of your app, find the Start build button and click the button with the clock icon next to it. Enter the branch you want to run into the Branch input field. You can only set one branch. If a pull request to your repository is made from a forked branch, type the name of that branch to run a build of the pull request. Pull request build Starting a build of a pull request’s branch is NOT the same as a pull request build. The manually started build of a pull request branch will only build the state of the code on that branch. An automatically triggered pull request build, however, builds the state of the code as it will look like once you merged the pull request. Optionally, enter a build message in the Message field. Please note that entering the Git commit message of a specific commit doesn't trigger a build of that commit! Select a Workflow that will run from the Workflow menu. If you don't select one, Bitrise will choose a Workflow based on your app's trigger map Scheduling a build The Schedule this build option allows you to configure builds to be triggered at specific times. Read more: Scheduling builds. " }, 
{ "title" : "Running Workflows from the Workflow Editor ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-6865e276-3a2a-ff96-b049-3f1063e60402", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Running Workflows from the Workflow Editor ", 
"snippet" : "You can manually start a build by running a single Workflow from the Workflow Editor . To do so: Open your app on Bitrise and click the  Workflows  button to open the Workflow Editor. On the Workflows tab, use the WORKFLOW drop-down menu to select the Workflow you would like to run. Click Run Workfl...", 
"body" : "You can manually start a build by running a single Workflow from the Workflow Editor . To do so: Open your app on Bitrise and click the  Workflows  button to open the Workflow Editor. On the Workflows tab, use the WORKFLOW drop-down menu to select the Workflow you would like to run. Click Run Workflow . Specify the branch that you want to build in the Branch field. Click Run Workflow to start the build. And that's it! As soon as you click the Run Workflow button, your build will be kicked off, and the build's page will open in a new tab. " }, 
{ "title" : "Advanced configuration options for starting\/scheduling builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-c0e16667-2f53-767b-2620-c6f16fca9adf_UUID-b8758d13-9796-ea59-15cd-0ba401687e85", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting builds manually \/ Advanced configuration options for starting\/scheduling builds ", 
"snippet" : "If you choose Advanced in the Build configuration window, you have all the options available with Basic , and a few more: Git Tag : Builds a particular branch or commit that is tagged with the Tag you enter. If you set this, you can't set a commit hash. Git Tags and commit hashes are conflicting opt...", 
"body" : "If you choose Advanced in the Build configuration window, you have all the options available with Basic , and a few more: Git Tag : Builds a particular branch or commit that is tagged with the Tag you enter. If you set this, you can't set a commit hash. Git Tags and commit hashes are conflicting options You cannot specify both a Git Tag and a commit hash. When you set one, the other one will disappear. This ensures you cannot enter conflicting input values. Commit Hash : Copy a specific commit’s hash here to build that particular commit. This option can even send a build status update to your git hosting service. If you set this, you can't set a Git Tag. Commit hash takes precedence over the Branch option If the Branch option specifies a branch where the commit hash you chose doesn't exist, Bitrise will find the branch that does have the given commit and run a build with that branch. Custom Environment Variables : Create a custom Environment Variable that is used in the build. See Setting a custom Env Var when starting a build. Generated cURL command : Based on the options you set in the Build configuration window, we provide an automatically generated cURL command. This can be copied and pasted, and you can run it on any platform that has cURL installed. " }, 
{ "title" : "Triggering builds automatically ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically ", 
"snippet" : "You can configure automatic build triggers on Bitrise by specifying a trigger event and a Workflow. You can trigger builds from code pushes, pull requests or Git tags. You can configure automatic build triggers on Bitrise by specifying a code event that should trigger a build and a destination Workf...", 
"body" : "You can configure automatic build triggers on Bitrise by specifying a trigger event and a Workflow. You can trigger builds from code pushes, pull requests or Git tags. You can configure automatic build triggers on Bitrise by specifying a code event that should trigger a build and a destination Workflow that should run. You can define multiple triggers for the same app. By default, one trigger can trigger only one Workflow. If you need to trigger multiple Workflows from a single trigger, there are some ways: Use Pipelines: in a Pipeline, Workflow run parallel in each Stage, and a Pipeline trigger starts the first Stage of a Pipeline. Read more: Configuring Pipeline triggers. Chain Workflows together so they run after each other. Use the Bitrise Start Build and the Bitrise Wait for Build Steps . There are three types of triggers: Code push: Trigger a build automatically whenever you push code using commits that match your conditions. For example, a commit to the specified branch of the app's repository triggers a build. Pull request: Trigger a build automatically whenever a pull request matches your conditions. For example, you can specify source and\/or destination branches where any pull request will trigger a build. Git tag: Trigger a build automatically whenever a commit with a specific tag triggers a build. Trigger conditions Each trigger type can be set up with multiple different trigger conditions. The available trigger conditions are listed and explained in the procedure for creating each trigger type. Not all trigger conditions are supported for all Git providers. For the detailed list, see Supported trigger conditions. You can manage the triggers in the Triggers section of the Workflow Editor or you can directly edit the bitrise.yml of your app to set them up. Also, you can't set up two different triggers for the same code event (for example, a code push) on the same branch (for example, main). The Workflow Editor will not allow you to save the configuration if you attempt to do so. " }, 
{ "title" : "Code push triggers ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-e799e486-18e8-bafc-d19e-5a36948a6a8f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Code push triggers ", 
"snippet" : "A code push trigger starts a build every time the code in your app's repository changes. A code push trigger has three possible condition types: Push branch: Only commits on the specified branch of the app's repository trigger a new build. Commit message: Only a specified commit message triggers a n...", 
"body" : "A code push trigger starts a build every time the code in your app's repository changes. A code push trigger has three possible condition types: Push branch: Only commits on the specified branch of the app's repository trigger a new build. Commit message: Only a specified commit message triggers a new build. For example, you have this commit message: hotfix critical: Resolved security vulnerability in user authentication . You can use a wild card pattern like hotfix.*   or a regex pattern like hotfix\\s*(critical|high):.* to trigger builds for such commit messages. Files changed: A build is triggered only if certain files change. This is especially useful for monorepo setups; that is, when a single repository contains the code for multiple different projects. For example, a regex pattern like ios\/.*\\.swift$ can trigger builds when only Swift files within iOS directory are changed inside the monorepo. Similarly, simple wild card patterns like ios\/app.js or ios\/components\/MyView.swift or ios\/layouts\/main_screen.xml can target specific files in the relevant directories and trigger builds. These conditions can be combined: for example, you can set up a trigger that starts a build when a given file changes on the main branch of your app's repository. At least one condition must be configured for each trigger. When you set up multiple conditions, all of them must be fulfilled for a build to be triggered. The trigger configuration allows the use of regular expressions: you can use a regex to match a branch, a commit message, or a filename. The first match will trigger a build and potential subsequent matches will be ignored. " }, 
{ "title" : "Creating triggers for code pushes ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-69aedf84-b843-61fd-ce0f-54eb507d75e1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for code pushes ", 
"snippet" : "Workflow Editor bitrise.yml If you use an OAuth connection to your repository, make sure you have a Bitrise webhook registered to your repository. If you use the GitHub App integration, you don't need a webhook. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows...", 
"body" : "Workflow Editor bitrise.yml If you use an OAuth connection to your repository, make sure you have a Bitrise webhook registered to your repository. If you use the GitHub App integration, you don't need a webhook. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select Triggers . On the Triggers page, select the Push tab. Click Add push trigger . In the Add push trigger dialog, set up one or more trigger conditions: Push branch : Commits to the specified branch will trigger a build. Commit message : Commits with the specified commit message will trigger a build. File change : Changes to the specified file(s) will trigger a build. When setting multiple conditions, all conditions must be fulfilled for a build to start. You can use regular expressions for any of the condition types. Click Next when done. Select the Workflow or Pipeline you want Bitrise to run when the conditions are met. When done, click Add trigger . Triggers in YAML For a detailed description about how build triggers are defined in YAML format, see Build triggers in the bitrise.yml file. If you use an OAuth connection to your repository, make sure you have a Bitrise webhook registered to your repository. If you use the GitHub App integration, you don't need a webhook. Open the bitrise.yml file. Under trigger_map , add a new trigger by defining the type as push and setting the trigger condition: trigger_map:\n- type: push\n commit_message: your_message In this example, we use commit_message as a trigger condition. The available conditions are: push_branch : Commits to the specified branch will trigger a build. commit_message : Commits with the specified commit message will trigger a build. changed_files : Changes to the specified file(s) will trigger a build. You can use a regex for either of them by adding regex:  to a trigger condition. For example: commit_message: \n regex: \".*\" Add a Workflow or Pipeline that should be triggered. trigger_map:\n- type: push\n commit_message: your_message\n workflow: primary You’re done! From now on, if code gets pushed to the selected branch of your app’s repository, Bitrise will trigger a build with the selected Workflow or Pipeline. " }, 
{ "title" : "Pull request triggers ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-d3f062fe-3fa3-6c84-2be7-82bc099ab43e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Pull request triggers ", 
"snippet" : "A pull request trigger starts a build every time a pull request is opened in your app's repository. A pull request trigger has three possible condition types: Source branch: The name of the branch containing the changes of the pull request. Target branch: The name of the branch that the pull request...", 
"body" : "A pull request trigger starts a build every time a pull request is opened in your app's repository. A pull request trigger has three possible condition types: Source branch: The name of the branch containing the changes of the pull request. Target branch: The name of the branch that the pull request should be merged to. Pull request label: Only pull requests with a certain label applied trigger builds. For example, manually trigger builds for specific PRs by adding a label like build-test. These conditions can be combined: for example, you can set up a trigger that starts a build when a pull request is opened from a given source branch with a certain label. At least one condition must be configured for each trigger. When you set up multiple conditions, all of them must be fulfilled for a build to be triggered. The trigger configuration allows the use of regular expressions: you can use a regex to match a branch or a PR label. The first match will trigger a build and potential subsequent matches will be ignored. Builds triggered by pull requests might be subject to manual approval: Approving pull request builds. By default, draft pull requests trigger builds, too. This can be disabled at any time: Triggering builds from draft PRs. " }, 
{ "title" : "Creating triggers for pull requests ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-09bca131-d5e6-b053-9825-05705bf527b4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating triggers for pull requests ", 
"snippet" : "Workflow Editor bitrise.yml Make sure you have a Bitrise webhook registered to your repository. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor....", 
"body" : "Workflow Editor bitrise.yml Make sure you have a Bitrise webhook registered to your repository. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select Triggers . On the Triggers page, select the Pull request tab. Click Add pull request trigger . In the Add pull request trigger dialog, set up one or more trigger conditions that will trigger builds: Source branch : The branch from which the pull request is opened. Target branch : The branch the pull request will be merged into. PR label : A label applied to the PR. PR comment : A specified comment submitted to a pull request. Commit message : One of the commit messages of the pull request. File change : Changes to the specified file(s) in the pull request. Pull request trigger limitations To use the  PR comment  trigger, allow pull request comment to be passed on as the webhook payload at your Git provider. Enable two events: comment created , comment updated . When setting multiple conditions, all conditions must be fulfilled for a build to start. You can use regular expressions for any of the condition types. Click Next when done. Select the Workflow or Pipeline you want Bitrise to run when the conditions are met. When done, click Add trigger . Triggers in YAML For a detailed description about how build triggers are defined in YAML format, see Build triggers in the bitrise.yml file. Make sure you have a Bitrise webhook registered to your repository. Open the bitrise.yml file. Under trigger_map , add a new trigger by defining the type as pull-request and setting the trigger condition: trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\" In this example, we use pull_request_target_branch as a trigger condition with a regular expression. The available conditions are the following (you can use a regex for each of them): pull_request_source_branch : Pull requests opened from the specified branch will trigger a build. pull_request_target_branch : Pull requests to be merged into the specified branch will trigger a build. pull_request_label : Pull requests with a given label will trigger a build. You can use a regex for either of them by adding regex:  to a trigger condition. Add a Workflow or Pipeline that should be triggered. trigger_map:\n- type: pull-request\n pull_request_target_branch:\n regex: \".*\"\n workflow: primary And you’re done! From now on, if a pull request is opened in your repository, Bitrise will trigger a build with the selected Workflow! " }, 
{ "title" : "Triggering builds from draft PRs ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-1413d428-5caf-f162-139d-99d05f85e235", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs ", 
"snippet" : "GitHub and GitLab offers a feature called draft pull request (or merge request in the case of GitLab): when you create a pull request (PR), you can choose to create a pull request that is ready for review or a draft pull request. Draft pull requests cannot be merged, and code owners are not automati...", 
"body" : "GitHub and GitLab offers a feature called draft pull request (or merge request in the case of GitLab): when you create a pull request (PR), you can choose to create a pull request that is ready for review or a draft pull request. Draft pull requests cannot be merged, and code owners are not automatically requested to review draft pull requests. Git provider limitations This feature is only supported for GitHub and GitLab repositories. By default, draft PRs trigger builds: every time you open a draft PR or push code to a draft PR. You can disable this at any time with the draft PR toggle in the Workflow Editor. You can check out the exact code events that trigger builds depending on the draft PR trigger settings: Build trigger behavior for draft PRs. Each separate trigger has its own toggle: you can configure your app so that certain triggers start a build from draft PRs while other triggers don't. " }, 
{ "title" : "Disabling builds from a draft PR ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2e687aad-851b-a301-a1c1-e15515d1051c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Disabling builds from a draft PR ", 
"snippet" : "Skipping Steps if a build is triggered by a draft PR This guide tells you how to disable triggering builds from a draft PR altogether. You can, however, also skip certain Steps in a build that is triggered by a draft pull request. You just need to use a run_if condition and the GITHUB_PR_IS_DRAFT En...", 
"body" : "Skipping Steps if a build is triggered by a draft PR This guide tells you how to disable triggering builds from a draft PR altogether. You can, however, also skip certain Steps in a build that is triggered by a draft pull request. You just need to use a run_if condition and the GITHUB_PR_IS_DRAFT Environment Variable: for more information, see Enabling or disabling a Step conditionally. Workflow Editor bitrise.yml Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select Triggers . Find the trigger you need and toggle the Draft Pull Requests enabled switch. Open the bitrise.yml file. In the trigger_map property, find your trigger. It should have a type: pull_request field. Add draft_pull_request_enabled: false to it. trigger_map:\n- type: pull-request\n pull_request_target_branch: main\n workflow: primary\n draft_pull_request_enabled: false\n " }, 
{ "title" : "Build trigger behavior for draft PRs ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-6d1aaadd-62ca-4d11-16d4-2772e29d2cad", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Triggering builds from draft PRs \/ Build trigger behavior for draft PRs ", 
"snippet" : "The table shows whether a build is triggered when a specific action is performed regarding draft PRs, depending on the draft PR trigger settings. For example, converting a draft PR to a PR doesn't trigger a build if the draft PR trigger is enabled but it does trigger a build when it's disabled. Trig...", 
"body" : "The table shows whether a build is triggered when a specific action is performed regarding draft PRs, depending on the draft PR trigger settings. For example, converting a draft PR to a PR doesn't trigger a build if the draft PR trigger is enabled but it does trigger a build when it's disabled. Trigger behavior Action Draft PR trigger is enabled Draft PR trigger is disabled Open a draft PR Push a commit to a draft PR Convert a draft PR to PR Convert PR to draft PR " }, 
{ "title" : "Git tag triggers ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-2614cf91-cdbe-71e2-d30a-9fbae171f417", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Git tag triggers ", 
"snippet" : "A Git tag trigger starts a build every time a commit with a given Git tag is pushed to your app's repository. For a tag trigger, there is only one possible condition: the tag itself. When setting up the trigger, you need to either set a full tag or a regular expression pattern....", 
"body" : "A Git tag trigger starts a build every time a commit with a given Git tag is pushed to your app's repository. For a tag trigger, there is only one possible condition: the tag itself. When setting up the trigger, you need to either set a full tag or a regular expression pattern. " }, 
{ "title" : "Creating Git tag triggers ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-ac26b697-371f-e32c-fdba-44387a0e096c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Creating Git tag triggers ", 
"snippet" : "Note that certain providers, such as GitLab, require Tag Push events to be specifically enabled in the webhook setup. Workflow Editor bitrise.yml Make sure you have a Bitrise webhook registered to your repository. If your Git provider requires it, make sure that Tag Push events are enabled in the we...", 
"body" : "Note that certain providers, such as GitLab, require Tag Push events to be specifically enabled in the webhook setup. Workflow Editor bitrise.yml Make sure you have a Bitrise webhook registered to your repository. If your Git provider requires it, make sure that Tag Push events are enabled in the webhook configuration. For example, GitLab requires it. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select Triggers . On the Triggers page, select the Tag tab. Click Add tag trigger . In the Add tag trigger dialog, add a tag in the Tag field. You can use a regular expression instead of the full tag. Click Next when done. Select the Workflow or Pipeline you want Bitrise to run when the conditions are met. When done, click Add trigger . Triggers in YAML For a detailed description about how build triggers are defined in YAML format, see Build triggers in the bitrise.yml file. Make sure you have a Bitrise webhook registered to your repository. Open the bitrise.yml file. Under trigger_map , add a new trigger by defining the type as tag-push and set the tag trigger condition: trigger_map:\n- type: tag-push\n tag: '*' This example uses a wildcard that triggers a build on any tag push. Add a Workflow or Pipeline that should be triggered. trigger_map:\n- type: tag-push\n tag: '*'\n workflow: primary " }, 
{ "title" : "Deactivating a trigger ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-20b3f462-a978-c410-cda6-0de65ebde16e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Deactivating a trigger ", 
"snippet" : "You can temporarily deactivate any build trigger. A deactivated trigger doesn't trigger builds but retains all configuration information. If you need the trigger again in the future, you don't have to recreate it: just reactivate it with a single click. To deactivate a build trigger: Workflow Editor...", 
"body" : "You can temporarily deactivate any build trigger. A deactivated trigger doesn't trigger builds but retains all configuration information. If you need the trigger again in the future, you don't have to recreate it: just reactivate it with a single click. To deactivate a build trigger: Workflow Editor bitrise.yml Open the Workflow Editor on Bitrise. On the left, select Triggers . Select the appropriate tab, depending on the trigger you want to deactivate. Set the trigger to Inactive . Open the bitrise.yml file. Find the trigger_map property and the trigger you want to disable. Add enabled: false to it. trigger_map:\n- type: push\n push_branch: main\n workflow: primary\n enabled: false\n " }, 
{ "title" : "Supported trigger conditions ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0f4d95fa-6f3d-1737-be16-6e01572c5ca8_UUID-0af36679-546e-1625-8b6f-5127672c2fbf", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Triggering builds automatically \/ Supported trigger conditions ", 
"snippet" : "Not all trigger conditions are available for all Git providers. As a general rule, all our trigger conditions are available for the cloud service of the three most frequently used Git providers: GitHub, GitLab, and Bitbucket. For other providers, or self-hosted Git repositories, check out the detail...", 
"body" : "Not all trigger conditions are available for all Git providers. As a general rule, all our trigger conditions are available for the cloud service of the three most frequently used Git providers: GitHub, GitLab, and Bitbucket. For other providers, or self-hosted Git repositories, check out the detailed table for both push triggers and pull request triggers. Supported trigger conditions for code push triggers Git provider Branch Commit message Files changed GitHub (cloud) GitHub (self-hosted) GitLab (cloud) GitLab (self-hosted) Bitbucket (cloud) BitBucket Server (self-hosted) Assembla Deveo (Perforce) Gogs VS Team Services Supported trigger conditions for pull request triggers Git provider Source branch Target branch Labels Comments Commit message Changed files GitHub (cloud) GitHub (self-hosted) GitLab (cloud) GitLab (self-hosted) Bitbucket (cloud) N\/A BitBucket Server (self-hosted) N\/A Assembla N\/A Deveo (Perforce) Gogs VS Team Services " }, 
{ "title" : "Scheduling builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds ", 
"snippet" : "You can schedule your builds to run automatically at a specific time of the week. You can schedule your builds to run automatically at a specific time of the week so that you can check your logs when it’s most convenient for you. When scheduling a build, you can define custom Environment Variables ....", 
"body" : "[video] You can schedule your builds to run automatically at a specific time of the week. You can schedule your builds to run automatically at a specific time of the week so that you can check your logs when it’s most convenient for you. When scheduling a build, you can define custom Environment Variables . You can also set advanced filters for Git Tags and for Git commit hash. If you have one or more regularly scheduled builds, you can: Edit their configuration. Trigger them manually at any time. Temporarily disable them. Permanently delete them. " }, 
{ "title" : "Scheduling a build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8400a2f-db75-086b-5656-522d20aa2de2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build ", 
"snippet" : "How to schedule a build with the basic configuration options on Bitrise: On the Bitrise CI page of your app, find the Start build button and click the button with the clock icon next to it. In the Schedule build dialog, set up the scheduling cadence: you can choose between Basic and Cron settings. I...", 
"body" : "How to schedule a build with the basic configuration options on Bitrise: On the Bitrise CI page of your app, find the Start build button and click the button with the clock icon next to it. In the Schedule build dialog, set up the scheduling cadence: you can choose between Basic and Cron settings. In the Basic settings, you need to set a start date, a start time in 24-hour time format, and select a timezone. In the Cron settings, you can set a cron schedule expression . The dialog will parse your expression and display the configured time in a human-readable format. If you chose Basic , enable or disable repetition with the Repetition toggle. If you enable repetition, configure the frequency, from minutes to years. The build will be triggered with the configured frequency, always at the same time, determined by the scheduling cadence. For example, you can configure your builds to run on Monday and Thursday every week. When ready, click Next to proceed to the build configuration. Select between Basic and Advanced configuration. Basic configuration offers three options: A branch name. This is a required field. A message in the Message field. This is not related to Git commit messages at all. It's just a place to provide some optional information about your build. A Workflow or a Pipeline. You can select a specific one or use the Based on trigger map option to select one using the the trigger map in the app's bitrise.yml configuration file. Pull request branch Starting a build of a pull request’s branch is NOT the same as a pull request build. The manually started build of a pull request branch will only build the state of the code on that branch. An automatically triggered pull request build, however, builds the state of the code as it will look like once you merged the pull request. For advanced configuration options, see the Advanced configuration options for starting\/scheduling builds section. When done, click Schedule build . " }, 
{ "title" : "Advanced configuration options for starting\/scheduling builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-b8758d13-9796-ea59-15cd-0ba401687e85", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Scheduling a build \/ Advanced configuration options for starting\/scheduling builds ", 
"snippet" : "If you choose Advanced in the Build configuration window, you have all the options available with Basic , and a few more: Git Tag : Builds a particular branch or commit that is tagged with the Tag you enter. If you set this, you can't set a commit hash. Git Tags and commit hashes are conflicting opt...", 
"body" : "If you choose Advanced in the Build configuration window, you have all the options available with Basic , and a few more: Git Tag : Builds a particular branch or commit that is tagged with the Tag you enter. If you set this, you can't set a commit hash. Git Tags and commit hashes are conflicting options You cannot specify both a Git Tag and a commit hash. When you set one, the other one will disappear. This ensures you cannot enter conflicting input values. Commit Hash : Copy a specific commit’s hash here to build that particular commit. This option can even send a build status update to your git hosting service. If you set this, you can't set a Git Tag. Commit hash takes precedence over the Branch option If the Branch option specifies a branch where the commit hash you chose doesn't exist, Bitrise will find the branch that does have the given commit and run a build with that branch. Custom Environment Variables : Create a custom Environment Variable that is used in the build. See Setting a custom Env Var when starting a build. Generated cURL command : Based on the options you set in the Build configuration window, we provide an automatically generated cURL command. This can be copied and pasted, and you can run it on any platform that has cURL installed. " }, 
{ "title" : "Editing a scheduled build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-805cb98b-cc3c-71a4-3a57-394a4b9e3d5e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Editing a scheduled build ", 
"snippet" : "To change the configuration of a regularly scheduled build: Go to the Builds tab of your app. On the top, you should see a list of your scheduled builds. Click Show scheduled . Click the little gear icon to open the settings menu. Click Edit scheduled build . Make the changes you want and click Save...", 
"body" : "To change the configuration of a regularly scheduled build: Go to the Builds tab of your app. On the top, you should see a list of your scheduled builds. Click Show scheduled . Click the little gear icon to open the settings menu. Click Edit scheduled build . Make the changes you want and click Save changes . " }, 
{ "title" : "Triggering a scheduled build manually ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-7602344a-745f-4042-f6fe-d2ac81845b09", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Triggering a scheduled build manually ", 
"snippet" : "To immediately trigger a scheduled build: Go to the Builds tab of your app. On the top, you should see a list of your scheduled builds. Click Show scheduled . Click Trigger now ....", 
"body" : "To immediately trigger a scheduled build: Go to the Builds tab of your app. On the top, you should see a list of your scheduled builds. Click Show scheduled . Click Trigger now . " }, 
{ "title" : "Disabling a scheduled build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-df1d6007-3779-7e8a-2632-3ec3c17720f0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Disabling a scheduled build ", 
"snippet" : "To temporarily disable a regularly scheduled build: Go to the Builds tab of your app. On the top, you should see a list of your scheduled builds. Click Show scheduled . Toggle the Enabled option. The build will not run until you enable it again....", 
"body" : "To temporarily disable a regularly scheduled build: Go to the Builds tab of your app. On the top, you should see a list of your scheduled builds. Click Show scheduled . Toggle the Enabled option. The build will not run until you enable it again. " }, 
{ "title" : "Deleting a scheduled build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-3d5fb639-5099-b426-b6a8-100e330a5e60_UUID-33bd5d3e-6e96-79f2-23ac-f154abfdefa6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Scheduling builds \/ Deleting a scheduled build ", 
"snippet" : "To permanently delete a regularly scheduled build: Go to the Builds tab of your app. On the top, you should see a list of your scheduled builds. Click Show scheduled . Click the little gear icon to open the settings menu. Click Delete and then click Delete again when prompted for confirmation....", 
"body" : "To permanently delete a regularly scheduled build: Go to the Builds tab of your app. On the top, you should see a list of your scheduled builds. Click Show scheduled . Click the little gear icon to open the settings menu. Click Delete and then click Delete again when prompted for confirmation. " }, 
{ "title" : "Approving pull request builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-0d96d56a-7db6-f2e7-cca4-c15fb9985d51", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Approving pull request builds ", 
"snippet" : "You have the option of requiring manual approval for Bitrise builds started by pull requests if the app contains exposed Secrets. This option cannot be deactivated for public apps. Not all pull requests need to be built. After all, for most projects, anyone can create a fork of the repository and su...", 
"body" : "You have the option of requiring manual approval for Bitrise builds started by pull requests if the app contains exposed Secrets. This option cannot be deactivated for public apps. Not all pull requests need to be built. After all, for most projects, anyone can create a fork of the repository and submit a pull request. However, if an app on Bitrise is set up with Secrets that are exposed for pull request builds, for example, then you probably don’t want just anyone to be able to access those secrets. That is why you have the option to require approval for a pull request build before it can start. This feature works somewhat differently for public and private apps: Private apps: by default, pull requests submitted from a fork require approval. The setting can be changed. If your secrets are NOT exposed to PRs, the build will run without asking for approval. Public apps: pull requests submitted from a fork require approval by default and it cannot be changed. Public apps CANNOT opt out of this feature. " }, 
{ "title" : "Build triggers in the bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file ", 
"snippet" : "On Bitrise, you can create triggers (or webhooks) for events such as code push or pull requests to start a build automatically. You can trigger builds on Bitrise by registering a webhook at your source code hosting provider and configuring a build trigger. Each app with build triggers has its own tr...", 
"body" : "On Bitrise, you can create triggers (or webhooks) for events such as code push or pull requests to start a build automatically. You can trigger builds on Bitrise by registering a webhook at your source code hosting provider and configuring a build trigger. Each app with build triggers has its own trigger map in its bitrise.yml file. The trigger map defines the build triggers, including their type and trigger conditions. The trigger map is essentially a list of filters: every trigger is a filter item that matches a certain case. If a case is matched, a build is triggered. Every trigger must include at least one condition. " }, 
{ "title" : "Overview of the trigger map ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-1d751de7-c085-249f-fdf1-6da5531a0db4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Overview of the trigger map ", 
"snippet" : "The trigger map is defined in a trigger_map property in the bitrise.yml file. A valid trigger map must have at least one trigger. A trigger has three main elements: The type of the trigger: push , pull_request , or tag . The trigger condition. For example, the source branch of a pull request. The Wo...", 
"body" : "The trigger map is defined in a trigger_map property in the bitrise.yml file. A valid trigger map must have at least one trigger. A trigger has three main elements: The type of the trigger: push , pull_request , or tag . The trigger condition. For example, the source branch of a pull request. The Workflow or Pipeline to be triggered. One trigger means one build: a single trigger can only trigger a single Workflow or Pipeline. You can chain Workflows together run several Workflows in succession from a single trigger. Below is a single trigger that triggers a build with the primary Workflow when a pull request is opened from any branch. trigger_map:\n- pull_request_source_branch: \"*\" \n type: pull_request \n workflow: primary " }, 
{ "title" : "Components of the trigger map ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-830f242d-c6e7-68d2-6764-8114faf630bd_UUID-d843227c-7a3f-9fb2-cef6-25935e42e7d1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Build triggers in the bitrise.yml file \/ Components of the trigger map ", 
"snippet" : "The trigger_map property of accepts the values listed in the tables below. Components for all trigger types Component Description Accepted values Default value type The type of the trigger. A trigger with a given type only accepts trigger conditions belonging to that type. push pull_request tag N\/A ...", 
"body" : "The trigger_map property of accepts the values listed in the tables below. Components for all trigger types Component Description Accepted values Default value type The type of the trigger. A trigger with a given type only accepts trigger conditions belonging to that type. push pull_request tag N\/A enabled A boolean property that defines if the trigger is currently active. true false true workflow or pipeline The Workflow or Pipeline that is triggered. You can't set both. The exact name of the Workflow or Pipeline. N\/A Components for code push triggers Component Description Default value push_branch The branch of the repository where code is pushed to trigger a build. * commit_message The commit message to trigger a build. * changed_files The path to a file or folder where changes should trigger a build. * Components for pull request triggers Component Description Default value pull_request_source_branch The branch of from which the pull request is opened. * pull_request_target_branch The branch which is the merge target of the pull request. * pull_request_label The pull request label. * draft_pull_request_enabled A boolean property that defines if draft pull requests trigger builds. true pull_request_comment A comment posted on a pull request. * commit_message A specific commit message in pushes to a pull request. * changed_files Specific files that are modified in a pull request. * " }, 
{ "title" : "Starting parallel builds with a single trigger ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-f4296931-bc9d-3b67-263a-e0df6f174346", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Starting parallel builds with a single trigger ", 
"snippet" : "You can start multiple parallel builds by using the Bitrise Start for Build and the Bitrise Wait for Build Steps. Using Build Pipelines to start parallel builds with a single trigger If you have a credit-based account and you are planning on running multiple tasks parallel with a single trigger, we ...", 
"body" : "You can start multiple parallel builds by using the Bitrise Start for Build and the Bitrise Wait for Build Steps. Using Build Pipelines to start parallel builds with a single trigger If you have a credit-based account and you are planning on running multiple tasks parallel with a single trigger, we recommend using Build Pipelines. For more information, check out Build Pipelines . If you have more than one concurrency or you have a credit-based account, you can run more than one build simultaneously. And since we want to make life as easy for you as possible, these builds can be started automatically, with a single trigger. Let’s go through how it works! In the example, we have three Workflows of a single app set up to run at the same time. Let’s call these Workflows Trigger , Building and Testing . The workflow called Trigger will be triggered by a pull request, and then the workflow will trigger Building and Testing which will run simultaneously. All workflows run on separate, clean Virtual Machines. They can also run on different types of stacks: to choose the stack for any Workflow, go to the Workflow Editor of the app and select the Stack tab. If any of the builds fail, the build will be considered a failed build. If the build is triggered by a webhook, Bitrise will send a summarized build result to your Git provider. If any of the parallel builds fail, a failed status will be reported. No reports for \"child\" builds Bitrise will send a Git status report only for the original \"parent\" build, the one that triggered all the other builds. The \"child\" builds will not send back status reports to your Git provider! For example, if build A triggers builds B and C, a status report will be sent once A is finished. There will be no separate status reports for builds B and C, however. What you need: A Personal Access Token. A Secret Environment Variable storing the token. The Bitrise Start Build Step. The Bitrise Wait for Build Step. Bitrise Start Build Step on the CI Since the Bitrise Build Start Step heavily relies on the parameters of the currently running build (for example, the app slug, build slug and the build number) to call the API, you cannot use the Bitrise Build Start Step locally. bitrise.yml example You can edit your bitrise.yml file on the bitrise.yml tab of the Workflow Editor, or you can edit the file locally. The example below focuses on the Bitrise UI, but if you prefer to use YAML format, check out our example ! Create a Personal Access Token for your user. Go to Profile Settings and select the Security option on the left side. Click the Generate new button. Copying the token Make sure the copy the token once it's generated: you won't be able to see it again! Create a Secret Environment Variable on the Secrets tab of the app’s Workflow Editor and add the token as its value. Feel free to use any key you wish for the secret. We recommend something simple like $ACCESS_TOKEN . Add the Bitrise Start Build Step to the Trigger Workflow. Note that the Bitrise Start Build Step will set an Environment Variable to all builds it starts: $SOURCE_BITRISE_BUILD_NUMBER . Each build triggered by the Step will have their own build numbers but the source build number will be the same for all of them. Add the secret env storing your personal access token to the Bitrise Access Token input of the Step: click the Select secret variable button and choose the key you created. Find the Workflows input of the Step, and add Building and Testing to it. Add the Bitrise Wait for Build Step as the last Step of the Trigger Workflow. Checking build statuses The Step checks statuses of the builds defined in the Step. The builds are defined in the Build slugs input: the slugs are the output of the Bitrise Start Build Step. As long as the builds defined by the slugs are running, the Step will hold the build it is running in. The build will fail if any of the builds included in the Step fail. Add the secret env storing your personal access token to the Bitrise Access Token input of the Step: click the Select secret variable button and choose the key you created. And you are done! Once you trigger the Trigger workflow, the Bitrise Start Build Step of the Workflow will trigger two more builds running simultaneously. If those two builds are successful, the Bitrise Wait for Build Step lets the first build finish. A single status report is sent to the git hosting provider, regardless whether the build is successful or not. " }, 
{ "title" : "Skipping a given commit or pull request ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request ", 
"snippet" : "Depending on your settings, every code change in your repository can trigger Bitrise builds. However, if you need to, you can skip a specific commit or pull request. Depending on your settings, every code change in your repository can trigger Bitrise builds. However, if you need to, you can skip a s...", 
"body" : "Depending on your settings, every code change in your repository can trigger Bitrise builds. However, if you need to, you can skip a specific commit or pull request. Depending on your settings, every code change in your repository can trigger Bitrise builds. However, if you need to, you can skip a specific commit or pull request. Skipping means, in this context, that a code change will NOT trigger a build on Bitrise, even if the triggers are set up to do so. " }, 
{ "title" : "Preventing a commit from triggering a build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-b4e139aa-5726-9d3c-9aea-74b2246d07ca", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a commit from triggering a build ", 
"snippet" : "To make sure a specific commit does not trigger a build, include either [skip ci] or [ci skip] in the commit message: This is not important, please [skip ci] Or: I just changed the README [ci skip] Only the head\/last commit message is checked! If you push more than one commit, only the last (head) c...", 
"body" : "To make sure a specific commit does not trigger a build, include either [skip ci] or [ci skip] in the commit message: This is not important, please [skip ci] Or: I just changed the README \n\n[ci skip] \n Only the head\/last commit message is checked! If you push more than one commit, only the last (head) commit’s message will be checked for the skip ci pattern! If you do want to start a build after all, you have two choices: Rebase the commit (change the commit message). Push another commit. Pushing an empty commit Git allows to create and push empty commits. If you want to build a skipped build you can do git commit --allow-empty -m \"I decided to run this\" on the related branch and push the commit. " }, 
{ "title" : "Preventing a pull request from triggering a build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-be55b1ff-cb24-290c-5f7f-b216cc81252b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Preventing a pull request from triggering a build ", 
"snippet" : "Pull requests are treated as (virtual) commits themselves, where the commit message is the title + description of the pull request. It is not the commit messages of the individual commits that make up the pull request. To skip a pull request include the [skip ci] pattern in the pull request’s title ...", 
"body" : "Pull requests are treated as (virtual) commits themselves, where the commit message is the title + description of the pull request. It is not the commit messages of the individual commits that make up the pull request. To skip a pull request include the [skip ci] pattern in the pull request’s title or its description. Individual commit messages are not checked Putting the [skip ci] pattern in the commit message of individual commits that make up the pull request will not work: the pull request will trigger a build if the appropriate trigger is set up. Once you decide to not to skip the pull request, you can simply remove the [skip ci] pattern from the pull request’s title or description. This should automatically trigger a new build with the latest commit, and all future commits of the pull request will be built too (unless you add a [skip ci] pattern again). " }, 
{ "title" : "Skipping Steps triggered by a draft PR ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43243-starting-builds.html#UUID-a88c2bba-396f-0a4d-7b9e-3e107c79d2ce_UUID-0ab1409f-acd6-7602-d475-d0792e5652fd", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Starting builds \/ Skipping a given commit or pull request \/ Skipping Steps triggered by a draft PR ", 
"snippet" : "When you use the draft PR function of GitHub , Bitrise inserts an Environment Variable called GITHUB_PR_IS_DRAFT into the build Environment Variable list. If this Env Var is available in your build Env Var list, its value is always set to true . Triggering builds from draft PRs You can also configur...", 
"body" : "When you use the draft PR function of GitHub , Bitrise inserts an Environment Variable called GITHUB_PR_IS_DRAFT into the build Environment Variable list. If this Env Var is available in your build Env Var list, its value is always set to true . Triggering builds from draft PRs You can also configure your trigger map to avoid triggering builds from draft pull requests (or merge requests in the case of GitLab). This doesn't require the GITHUB_PR_IS_DRAFT Env Var: you just need to toggle a switch in the Workflow Editor . You can use the GITHUB_PR_IS_DRAFT Env Var in your build as part of a conditional: for example, you can skip certain Steps in builds that are triggered by draft PRs: workflow1:\n steps:\n - script:\n run_if: '{{enveq \"GITHUB_PR_IS_DRAFT\" \"\"}}' \n inputs:\n - content: |-\n #!\/usr\/bin\/env bash\n # fail if any commands fails\n set -e\n # debug log\n set -x In this example, the run_if condition means that the Step will only run if the build is NOT triggered by a draft PR. Yo recommend that you insert below run_if command to each Step in your Workflow to skip the Steps. Starting a new build after a draft PR If you have previously used the draft PR on a build but now you are ready to merge changes to your code from the same PR, clicking the Ready for review button on GitHub won’t trigger a new build on Bitrise. The previous builds will also contain the draft PR related Env Vars. In this case, we recommend you manually start a brand new build from the website or trigger the CI with a new commit. " }, 
{ "title" : "Caching ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching ", 
"snippet" : "Every single Bitrise build runs on a clean virtual machine, but you can store your content in the build cache using either branch-based caching or key-based caching. Every single Bitrise build runs on a clean virtual machine . This means that normally, without caching, everything must be done from s...", 
"body" : "Every single Bitrise build runs on a clean virtual machine, but you can store your content in the build cache using either branch-based caching or key-based caching. Every single Bitrise build runs on a clean virtual machine . This means that normally, without caching, everything must be done from scratch on the virtual machine, including, for example, installing your dependencies. With caching, you can preserve the contents of selected files and directories, such as installed dependencies or files generated during the build. There are two main methods of caching on Bitrise: Branch-based caching : this uses the Bitrise.io Cache: Push Step and the Bitrise.io Cache: Pull Step to manage cache archives. Each cache archive is tied to a specific branch in your repository. Key-based caching : It works by associating cache archives with a key. During a Workflow , you can restore a cache archive by referring to the key associated with it. " }, 
{ "title" : "Using branch-based caching in your builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds ", 
"snippet" : "You can use two dedicated Bitrise Steps for caching: Bitrise.io Cache Pull to tap into the cache and use the contents of it in your build, and Bitrise.io Cache Push to store information from your build in the cache. Branch-based caching vs key-based caching This guide is is about legacy, branch-base...", 
"body" : "You can use two dedicated Bitrise Steps for caching: Bitrise.io Cache Pull to tap into the cache and use the contents of it in your build, and Bitrise.io Cache Push to store information from your build in the cache. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based caching, check out our in-depth guide: Key-based caching. You can read about our dedicated key-based caching Steps here: Dedicated caching Steps for dependency managers. The basics of using the cache in your builds are simple and it can work out of the box, depending on your Workflows: you just have to use the two dedicated Steps. Add the Bitrise.io Cache:Pull Step right before you need the cache. For example, in the case of an iOS app, you can insert the Bitrise.io Cache:Pull Step between the Git Clone Repository and the dependency installer Steps (such as the Run CocoaPods install or the Carthage Steps). You should not put the Bitrise.io Cache:Pull Step BEFORE the Git Clone Repository Step. Build cache expiry The build cache, related to a specific branch, expires after seven days which means it is automatically deleted - but only if there’s no new build on that branch in the meantime. This means that if you do builds on a specific branch more frequently than a week, the cache won’t get deleted. If you don’t start a build on that specific branch for more than seven days, then the related cache will be deleted, and and your next build will run like the first. Add the Bitrise.io Cache:Push Step as the last Step of the Workflow. For simple use cases, that’s it, that’s all you have to do. These Steps work out of the box alongside Steps with their own caching function. But if you wish to learn more and create your own caching configuration, read on! Pull request builds By default, if you run a build that is triggered by a pull request, the Bitrise.io Cache:Push Step won’t work: in this case, a pull request build can only read the build cache but can’t update it! We strongly recommend that you do not change this! From a security perspective, the best practice is to never allow pull request builds to alter anything that can affect other Bitrise builds. If you absolutely must change it, you need to use a run_if expression in the app’s bitrise.yml file. Read more about run_if expressions: Enabling or disabling a Step conditionally. You can find example build cache configurations\/guides at our build-cache discuss page . " }, 
{ "title" : "Including files and folders in the build cache ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-b7360b76-0a5a-344f-26d9-98f29db588c8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Including files and folders in the build cache ", 
"snippet" : "As mentioned before, every file and folder specified in the Bitrise.io Cache:Push Step’s Cache paths input gets cached, unless the Step is configured to ignore certain folders and files. In most cases, you don’t have to change this input. If you use Steps that have their own in-built caching functio...", 
"body" : "As mentioned before, every file and folder specified in the Bitrise.io Cache:Push Step’s Cache paths input gets cached, unless the Step is configured to ignore certain folders and files. In most cases, you don’t have to change this input. If you use Steps that have their own in-built caching function, you don’t have to worry about specifying files and folders unless you have a specific use case. To check whether a Step has a caching function, take a look at their inputs. If there’s no input to turn caching on and off, the Step in question doesn’t have its own caching function. To include files from Steps that do not have their own caching function: In your Workflow, open the Bitrise.io Cache:Push Step. Find the Cache paths input. Add the path or paths for files and folders that you want to include in the cache. You can use either an absolute path, or a path relative to the root of your repository. " }, 
{ "title" : "Ignoring files and dependencies ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-bce3abec-99e7-d41d-9aca-22efd1b0483b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Ignoring files and dependencies ", 
"snippet" : "You can also tell the Bitrise.io Cache:Push Step to specifically ignore certain content. Ignoring means one of two things: A file or folder isn’t checked for changes: if the specified path is included in the previous cache archive, it will be included in the new one with the same content as before. ...", 
"body" : "You can also tell the Bitrise.io Cache:Push Step to specifically ignore certain content. Ignoring means one of two things: A file or folder isn’t checked for changes: if the specified path is included in the previous cache archive, it will be included in the new one with the same content as before. A file or folder is completely excluded: in other words, it isn’t uploaded to the cache at all, regardless of its changes. You can choose either option for any of your files or folders. To ignore certain files or folders: In your Workflow, open the Bitrise.io Cache:Push Step. Find the Ignore Paths from change check input. Add the path or paths for files and folders that you want to ignore. You can use either an absolute path, or a path relative to the root of your repository. If you want to completely exclude a given path from the cache archive, prefix the path with ! . For example, !my\/path\/ . If you want to exclude a given path from change checking, just add the path without any prefix. If a path is located inside an ignored cache path item and the path is NOT prefixed with an ! , the path will be included in the cache archive, but it will not be checked for changes. For example, if you add my\/path\/ to the input, the path directory will be included in the archive but it will not be checked for changes. You can, of course, specify certain patterns in the paths, too. For example: Replacing a path element with * : a\/*\/b : this will match a\/x\/b Replacing a part of the path with ** : a\/**\/b will match a\/x\/y\/z\/b Ignoring an entire directory with \/ . For example, \/my\/full\/path\/ ignores everything in the path folder. Ignoring paths You can’t ignore a path which results in an invalid cache item. For example, if you specify a\/path\/to\/cache path to be cached, you can’t ignore a\/path\/to , as that would ignore every file and wouldn’t check for changes, hence no fingerprint could be generated for a\/path\/to\/cache . This won’t fail the Step: you’ll simply receive the following warning: No path to cache, skip caching... You can, however, ignore paths inside a cache path. For example, if your path is a\/path\/to\/cache , you can ignore a\/path\/to\/cache\/.ignore-me , unless that’s the only file inside a\/path\/to\/cache . " }, 
{ "title" : "Downloading or deleting the build cache ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html#UUID-cd2cbd81-5fa3-29d8-4b77-1bedca85a72e_UUID-91a38a89-737c-2254-f64d-7d52719ca6d7", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Using branch-based caching in your builds \/ Downloading or deleting the build cache ", 
"snippet" : "You can download and delete build caches for every branch which generated a cache. You can check the size of the caches and the last time a given cache was used. Deleting a single branch's cache If you only want to delete the cache which is related to a single branch, you should also delete the defa...", 
"body" : "You can download and delete build caches for every branch which generated a cache. You can check the size of the caches and the last time a given cache was used. Deleting a single branch's cache If you only want to delete the cache which is related to a single branch, you should also delete the default branch’s cache too! This is because if a build runs on a branch which doesn’t have a cache, the  Bitrise.io Cache:Pull   Step will get the cache of the default branch. To manage the build caches: Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Builds . Find the  Manage Build Caches  section. Select the Branch-based (legacy) caching tab. You can see the cache archives in the pop-up window. You can download or delete any of the cache archives, or all of them. " }, 
{ "title" : "Caching Cocoapods ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html#UUID-ab15d7d2-5e0c-338c-c2b5-7abdc2ed286b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Cocoapods ", 
"snippet" : "You can cache Cocoapods content by putting the Bitrise.io Cache:Push Step at the end of your Workflow. To later use this cached data, use the Bitrise.io Cache:Pull Step after Git Clone Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based ...", 
"body" : "You can cache Cocoapods content by putting the Bitrise.io Cache:Push Step at the end of your Workflow. To later use this cached data, use the Bitrise.io Cache:Pull Step after Git Clone Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based caching, check out our in-depth guide: Key-based caching. You can read about our dedicated key-based caching Steps here: Dedicated caching Steps for dependency managers. Before you start, make sure you have the latest version of the Cocoapods Install Step in your Workflow. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Open the Workflow Editor . Insert the Bitrise.io Cache:Pull Step after the Git Clone but before the Cocoapods Install Steps. Step version of the Cache:Pull Step Make sure that your Step is version 1.0.0 or newer. With the older versions, you have to manually specify paths for caching. Insert the Bitrise.io Cache:Push Step to the very end of your Workflow. And that is all you have to do! If you wish to use an earlier version of the Cache Steps, you can find more information here . " }, 
{ "title" : "Caching Gradle ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html#UUID-04e246f3-5281-c2da-ab1e-9f7944a5a26e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Gradle ", 
"snippet" : "You can cache Gradle content by putting the Bitrise.io Cache:Push Step at the end of your Workflow. To later use this cached data, use the Bitrise.io Cache:Pull Step after Git Clone Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based cac...", 
"body" : "You can cache Gradle content by putting the Bitrise.io Cache:Push Step at the end of your Workflow. To later use this cached data, use the Bitrise.io Cache:Pull Step after Git Clone Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based caching, check out our in-depth guide: Key-based caching. You can read about our dedicated key-based caching Steps here: Dedicated caching Steps for dependency managers. Before you start, make sure you have the latest version of the Android Build Step in your workflow. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Open the Workflow Editor . Insert the Cache:Pull Step after the Git Clone but before the Android Build Steps. Step version of the Cache:Pull Step Make sure that your Step is version 1.0.0 or newer. With the older versions, you have to manually specify paths for caching. Insert the Cache:Push Step to the very end of your Workflow. And you’re done! " }, 
{ "title" : "Caching Maven ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html#UUID-f3fe2704-5548-f763-bdbd-fdca3b8da541", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Maven ", 
"snippet" : "You can cache Maven content by putting the Bitrise.io Cache:Push Step at the end of your Workflow. To later use this cached data, use the Bitrise.io Cache:Pull Step after Git Clone Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based cach...", 
"body" : "You can cache Maven content by putting the Bitrise.io Cache:Push Step at the end of your Workflow. To later use this cached data, use the Bitrise.io Cache:Pull Step after Git Clone Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based caching, check out our in-depth guide: Key-based caching. You can read about our dedicated key-based caching Steps here: Dedicated caching Steps for dependency managers. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Open the Workflow Editor . Insert the Cache:Pull step after the Git Clone but before the Android Build steps. Step version of the Cache:Pull Step Make sure that your Step is version 1.0.0 or newer. With the older versions, you have to manually specify paths for caching. Insert the Bitrise.io Cache:Push Step to the very end of your Workflow. In the Cache paths input of the step, enter $HOME\/.m2 . And you’re done! " }, 
{ "title" : "Caching Ruby Gems ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html#UUID-b08f1173-8642-6a9f-d0ec-1f9b12a8be53", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Ruby Gems ", 
"snippet" : "You can cache Ruby Gems by putting the Bitrise.io Cache:Push Step at the end of your Workflow. To later use this cached data, use the Bitrise.io Cache:Pull Step after Git Clone Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based caching,...", 
"body" : "You can cache Ruby Gems by putting the Bitrise.io Cache:Push Step at the end of your Workflow. To later use this cached data, use the Bitrise.io Cache:Pull Step after Git Clone Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based caching, check out our in-depth guide: Key-based caching. You can read about our dedicated key-based caching Steps here: Dedicated caching Steps for dependency managers. Ruby Gems are not cached by default on the bitrise.io virtual machines. Ruby Gems are installed into a location depending on the current rbenv version. The version can be checked by running rbenv version . You can get the location of this directory with gem environment gemdir . However, it is not enough to cache this directory as rbenv sets up link to ruby version specific gems: the whole ruby version specific directory - for example, \/Users\/vagrant\/.rbenv\/versions\/2.5.3 - has to be cached. It is not recommended to set the value of the $GEM_HOME Enviroment Variable, as this can result in installed gems not being found. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Open the Workflow Editor . Add a Script Step to the Workflow. Set the $GEM_CACHE_PATH Environment Variable in the Script Step. - script:\n title: Set GEM_CACHE_PATH env var\n inputs:\n - content: |-\n #!\/bin\/bash\n set -ex\n RBENV_DIR=\"`cd $(rbenv which ruby)\/..\/..;pwd`\"\n echo \"Gem cache directory: $RBENV_DIR\"\n envman add --key GEM_CACHE_PATH --value $RBENV_DIR Insert the Cache:Pull Step after the Git Clone but before the Android Build Steps. Insert the Cache:Push Step to the very end of your Workflow. Open the input Cache paths of the Step Cache:Push and add $GEM_CACHE_PATH in a new line as an additional cache dir. And you’re done! " }, 
{ "title" : "Caching Homebrew installers ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43237-caching.html#UUID-b2f04e5b-33bc-c36d-c8ff-f3172de99036", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Caching \/ Caching Homebrew installers ", 
"snippet" : "To enable the caching of Homebrew installers, set the Cache input to yes in the Brew install Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based caching, check out our in-depth guide: Key-based caching. You can read about our dedicated k...", 
"body" : "To enable the caching of Homebrew installers, set the Cache input to yes in the Brew install Step. Branch-based caching vs key-based caching This guide is is about legacy, branch-based caching. For key-based caching, check out our in-depth guide: Key-based caching. You can read about our dedicated key-based caching Steps here: Dedicated caching Steps for dependency managers. The Brew install Step supports caching: if the option is enabled, any downloaded brew installers will be cached from the location of brew --cache . The cache path is ~\/Library\/Caches\/Homebrew\/ . To enable caching of brew installers: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Open the Workflow Editor . Add or select (if it's already part of the Workflow) the Brew install Step. Set the Cache option to yes . As always, click Save . " }, 
{ "title" : "Managing build files ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files ", 
"snippet" : "Using the Deploy to bitrise.io Step, you can deploy files generated during a build to bitrise.io. You can also upload code signing files. You can view uploaded files on the Apps & Artifacts tab of the build page. Managing files on Bitrise allows you to upload files to use in your builds. You are req...", 
"body" : "Using the Deploy to bitrise.io Step, you can deploy files generated during a build to bitrise.io. You can also upload code signing files. You can view uploaded files on the Apps & Artifacts tab of the build page. Managing files on Bitrise allows you to upload files to use in your builds. You are required to upload files for the purposes of code signing. Builds also produce files as outputs. You can: Upload files to the Generic File storage. Use uploaded files in your builds. Use encrypted files in your builds. Using the Deploy to bitrise.io Step, you can deploy files generated during a build to bitrise.io. You can view these files on the Artifacts tab of the build page. In addition, you can check out a build's generated installable artifacts (installable binaries, either IPA or APK\/AAB) files on the Artifacts page of an app . The page shows all generated binaries from past builds and you can view the details of each file, including a QR code and a link to the public install page, both of which allow users to install the app on their devices. You can also upload both Android and iOS code signing files. Read more about Android code signing and iOS code signing in our detailed guides. " }, 
{ "title" : "Uploading files for your builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-058726e8-43e1-0385-f4b7-e2fff934ba79", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Uploading files for your builds ", 
"snippet" : "If your build requires any files to make it work, you can upload them in the Code Signing tab of the Workflow Editor. If your build requires any files to make it work, you can upload them to Bitrise on the App settings page. It accepts any file type, all you need to do is provide a unique ID and upl...", 
"body" : "If your build requires any files to make it work, you can upload them in the Code Signing tab of the Workflow Editor. If your build requires any files to make it work, you can upload them to Bitrise on the App settings page. It accepts any file type, all you need to do is provide a unique ID and upload the file. Once a file is uploaded, it is stored as an Environment Variable (Env Var) . You can use this Env Var to access the file and use it in your builds. The file can also be: Downloaded by anyone who has either admin or owner role on the app’s team on Bitrise. You can prevent this: Protecting your uploaded filesExposed to pull request builds. File restrictions There are certain restrictions on upload size and number of files: You can't upload a file bigger than 5 MB. You can only store a total of 5 different files at the same time. If you want to upload more, you need to delete one of the files in the storage. To upload a file: Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Files . Click Add file . In the dialog box, enter a unique ID in the File Storage ID input field. The unique ID will be part of the generated download URL that Bitrise stores as an Environment Variable . Upload the file. You have two options: Click anywhere in the Select a file to upload section and select the file from your computer. Drag and drop a file into the Select a file to upload section. Remember that the file size cannot exceed 5 MB. " }, 
{ "title" : "Protecting your uploaded files ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-058726e8-43e1-0385-f4b7-e2fff934ba79_UUID-75c7d964-dcb3-2fa1-4d32-0654f62a10c6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Uploading files for your builds \/ Protecting your uploaded files ", 
"snippet" : "Once you uploaded a file to Bitrise, you can set your uploaded files to Protected mode. This means that no one can download or reveal the file from your account but your builds can still use them. Bitrise will handle the Environment Variable attached to your uploaded files as a Secret . Open your ap...", 
"body" : "Once you uploaded a file to Bitrise, you can set your uploaded files to Protected mode. This means that no one can download or reveal the file from your account but your builds can still use them. Bitrise will handle the Environment Variable attached to your uploaded files as a Secret . Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Files . Click the horizontal ellipsis button next to the name of the file, and select Make protected . Click Make it protected in the dialog box. " }, 
{ "title" : "Using files in your builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds ", 
"snippet" : "To use a file in your builds, you can download it using a Step like File Downloader in your Workflow, or you can use the file's automatically generated Env Var as a Step input. There are multiple ways to use files in your Bitrise builds. Most Steps that generate files store the filepath in an output...", 
"body" : "To use a file in your builds, you can download it using a Step like File Downloader in your Workflow, or you can use the file's automatically generated Env Var as a Step input. There are multiple ways to use files in your Bitrise builds. Most Steps that generate files store the filepath in an output Environment Variable (Env Var). Subsequent Steps in the same Workflow can re-use that Env Var to access the file. You can upload a file to the Generic File Storage and use the automatically generated Env Var as a Step input value in Steps that accept URLs as an input. You can upload a file to the Generic File Storage and use one of our Steps (for example, the File Downloader Step) to download the file for the build. This works with Steps that require local file paths and as such do not support URLs directly as the input value. " }, 
{ "title" : "Downloading a file using the File Downloader Step ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-2cccdfb2-6110-0be0-6213-aa164992cf0c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using the File Downloader Step ", 
"snippet" : "One of the ways to access a file in your build is by using the File Downloader Step. This Step is useful when you need to use a file in a Step input that only accepts local paths as a value. The Step downloads the file in a location you specify, and then every subsequent Step can access the file in ...", 
"body" : "One of the ways to access a file in your build is by using the File Downloader Step. This Step is useful when you need to use a file in a Step input that only accepts local paths as a value. The Step downloads the file in a location you specify, and then every subsequent Step can access the file in that location. Workflow Editor bitrise.yml Open the Workflow Editor . Add the File Downloader Step to your Workflow. In the Download source url input, add the location where the file can be found. Finding the download URL for an uploaded file If you uploaded the file to Bitrise , you can find its download URL in the Files section of the App settings page. In the Download destination path input, specify the path where you want to download the file. It should be a path relative to the root of the repository. Using an Env Var as the input value You can store the filepath in an App Env Var instead of specifying it directly for the input. That way you can refer to the file through the Env Var in other Steps, you won’t have to specify the path every time. For example, if you store the path in the BITRISEIO_MY_FILE_LOCAL_PATH Env Var, you can use it as the path for the input, and also use it to access the file in every subsequent Step. Click Save in the top right corner. Open the app's bitrise.yml file. Add the file-downloader Step to your Workflow. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n - git-clone: {}\n - file-downloader:\n inputs:\n In the source input, add the location where the file can be found. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n - git-clone: {}\n - file-downloader:\n inputs:\n - source: \"$BITRISEIO_BITRISE_TEST_URL\"\n In the destination input, specify the path where you want to download the file. It should be a path relative to the root of the repository. workflows:\n download:\n steps:\n - activate-ssh-key: {}\n - git-clone: {}\n - file-downloader:\n inputs:\n - destination: \"\/\"\n - source: \"$BITRISEIO_BITRISE_TEST_URL\"\n - deploy-to-bitrise-io: {} Using an Env Var as the input value You can store the filepath in an App Env Var instead of specifying it directly for the input. That way you can refer to the file through the Env Var in other Steps, you won’t have to specify the path every time. For example, if you store the path in the BITRISEIO_MY_FILE_LOCAL_PATH Env Var, you can use it as the path for the input, and also use it to access the file in every subsequent Step. " }, 
{ "title" : "Downloading a file using a custom Script Step ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-d72b2dce-1648-8438-0e07-d89c19fca878_UUID-601b8a95-62e1-81d5-2adf-b4c2f7c3d322", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using files in your builds \/ Downloading a file using a custom Script Step ", 
"snippet" : "If you don't want to use the File Downloader Step to download and access an uploaded file in your build, you can use your own custom Script Step as well. All you need to do is to get the download URL and then download the file by specifying a full download path that exists on the build machine. Work...", 
"body" : "If you don't want to use the File Downloader Step to download and access an uploaded file in your build, you can use your own custom Script Step as well. All you need to do is to get the download URL and then download the file by specifying a full download path that exists on the build machine. Workflow Editor bitrise.yml Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add a Script Step to your Workflow. Find the Script content input of the Step. Add a script to download the file and store the destination path in an Env Var. Uploading the file to Bitrise If you upload the file to Bitrise , you can use the file's download URL in your script. In the example below, the download URL is stored in the BITRISE_IO_MY_FILE_ID_URL Env Var. We're using envman to store the destination path in the BITRISEIO_MY_FILE_LOCAL_PATH Env Var. Subsequent Steps can use this Env Var to access the file. #!\/bin\/bash\nset -ex\n\n# specify local download path\nexport file_local_path=download\/path\/to\/my\/file\n\n# download the file\nwget -O \"$file_local_path\" \"$BITRISEIO_MY_FILE_ID_URL\"\necho \"file downloaded to: $file_local_path\"\n\n# OPTIONALLY: export the file's local path, to be able to use it in subsequent steps as an input value\nenvman add --key BITRISEIO_MY_FILE_LOCAL_PATH --value \"$file_local_path\" Alternatively, for example, you can set the location as an App Env Var and simply download it to that path instead of defining the path inside the Script Step. Open the bitrise.yml file of your app. Add a script Step to your Workflow. my-workflow:\n steps:\n script:\n inputs:\n - content: In the content input, add a script to download the file and store the destination path in an Env Var. Uploading the file to Bitrise If you upload the file to Bitrise , you can use the file's download URL in your script. In the example below, the download URL is stored in the BITRISE_IO_MY_FILE_ID_URL Env Var. We're using envman to store the destination path in the BITRISEIO_MY_FILE_LOCAL_PATH Env Var. Subsequent Steps can use this Env Var to access the file. my-workflow:\n steps:\n - script:\n inputs:\n - content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n # download the file\n wget -O \"$file_local_path\" \"$BITRISEIO_MY_FILE_ID_URL\"\n echo \"file downloaded to: $file_local_path\"\n Alternatively, for example, you can set the location as an App Env Var and simply download it to that path instead of defining the path inside the Script Step. Optionally, export the file's local path so you can use it in subsequent Steps in the same Workflow. my-workflow:\n steps:\n - script:\n inputs:\n - content:\n #!\/bin\/bash\n set -ex\n\n # specify local download path\n export file_local_path=download\/path\/to\/my\/file\n\n # download the file\n wget -O \"$file_local_path\" \"$BITRISEIO_MY_FILE_ID_URL\"\n echo \"file downloaded to: $file_local_path\"\n\n # export the file path for subsequent steps\n envman add --key BITRISEIO_MY_FILE_LOCAL_PATH --value \"$file_local_path\" " }, 
{ "title" : "Using encrypted files in your builds ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds ", 
"snippet" : "You can use encrypted files on Bitrise, easily. After encrypting the file on your computer, upload it to the Generic File Storage and use the Decrypt file Step or your own custom decrypting solution to decrypt it when you need it. You can use encrypted files on Bitrise, easily and securely. All you ...", 
"body" : "You can use encrypted files on Bitrise, easily. After encrypting the file on your computer, upload it to the Generic File Storage and use the Decrypt file Step or your own custom decrypting solution to decrypt it when you need it. You can use encrypted files on Bitrise, easily and securely. All you need to do is encrypt the file on your computer, upload it to the Generic File Storage and use the Decrypt file Step or your own custom decrypting solution to decrypt it when you need it. GPG encryption Please note that the Decrypt file Step only decrypts files encrypted with GPG. If you use other encryption software, you will not be able to decrypt files using the Step. You can, of course, set up your own decryption solution in a Script Step. " }, 
{ "title" : "Encrypting your files ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-bba06fe4-0474-7603-2e35-1aec9d3ec3da", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Encrypting your files ", 
"snippet" : "In this example, we’ll use the pwgen password generator tool and GPG as the encryption software to encrypt a file. Open a Terminal\/Command Line. Create a 32 character passphrase for encryption. Keep the passphrase You will need this passphrase to decrypt the file on Bitrise. pwgen -s 32 1 Encrypt yo...", 
"body" : "In this example, we’ll use the pwgen password generator tool and GPG as the encryption software to encrypt a file. Open a Terminal\/Command Line. Create a 32 character passphrase for encryption. Keep the passphrase You will need this passphrase to decrypt the file on Bitrise. pwgen -s 32 1 Encrypt your file. In this example, the file is called my_secret_file . gpg -c my_secret_file Optionally, you can encrypt your file(s) in a non-interactive way. gpg --batch --passphrase <passphrase> -c my_secret_file " }, 
{ "title" : "Decrypting and downloading your files during a build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-c5b52ba6-4f1b-4e2a-b601-50c247a72e8f_UUID-8c3ba22d-9c48-c06b-871c-dfe1073bf7c0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Using encrypted files in your builds \/ Decrypting and downloading your files during a build ", 
"snippet" : "After you successfully encrypted a file, you need to upload it to Bitrise and you need to be able to decrypt it during the build. In this procedure, we'll use the Decrypt file Step to decrypt the file. GPG encryption Please note that the Decrypt file Step only decrypts files encrypted with GPG. If y...", 
"body" : "After you successfully encrypted a file, you need to upload it to Bitrise and you need to be able to decrypt it during the build. In this procedure, we'll use the Decrypt file Step to decrypt the file. GPG encryption Please note that the Decrypt file Step only decrypts files encrypted with GPG. If you use other encryption software, you will not be able to decrypt files using the Step. You can, of course, set up your own decryption solution in a Script Step. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Go to the Secrets tab, and add your decryption passphrase as a Secret . Upload the file to Bitrise Copy the Environment Variable (Env Var) under the name of the uploaded file. This Env Var stores the download URL for the file. Go to the Workflows tab. Open the Workflow Editor . Add the Decrypt file Step to your Workflow. Paste the Env Var of the file to the Encrypted file path input. In the Output file path input, specify the path where you want to place the decrypted file. Subsequent Steps will be able to access the file at this path. Using an Env Var as the input value You can store the filepath in an App Env Var instead of specifying it directly for the input. That way you can refer to the file through the Env Var in other Steps, you won’t have to specify the path every time. For example, if you store the path in the BITRISEIO_MY_FILE_LOCAL_PATH Env Var, you can use it as the path for the input, and also use it to access the file in every subsequent Step. A bitrise.yml example for decrypting files ---\nformat_version: '11'\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: macos\nworkflows:\n secret:\n steps:\n - activate-ssh-key@4: {}\n - git-clone@6: {}\n - decrypt-file@0:\n inputs:\n - encrypted_file_path: \".\/secret.txt.gpg\"\n - output_file_path: \".\/secret\/\"\n - decrypt_passphrase: \"$PASSWORD_FOR_ENCRYPT\"\n - deploy-to-bitrise-io@2: {} " }, 
{ "title" : "Build artifacts online ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online ", 
"snippet" : "A build on Bitrise can and often does produce artifacts: for example, test reports, images, executable binaries. If you select a build of your app, on the Artifacts tab, you can check out the artifacts which have been generated during the build. Build artifacts are any files generated during a Bitri...", 
"body" : "A build on Bitrise can and often does produce artifacts: for example, test reports, images, executable binaries. If you select a build of your app, on the Artifacts tab, you can check out the artifacts which have been generated during the build. Build artifacts are any files generated during a Bitrise build: test results, screenshots, executable binaries, and so on. You can view build artifacts at two places: On the Artifacts tab of the build's page. Here you can view all artifacts. The Artifacts page on the main page of the app. Here you can only see the installable binaries. There is no limitation on the number of files deployed to the Artifacts tab per build. There is a limitation, however, on the file size which is 2GB per file. Artifact retention for 365 days Artifacts older than 365 days are permanently deleted. " }, 
{ "title" : "The Installable artifacts page ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-153c2951-4814-54bc-a62d-9e2d9c3d2e17", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ The Installable artifacts page ", 
"snippet" : "On the Installable artifacts page, you can: View the installable binaries of past builds. Download the installable artifacts. Check the details page of these artifacts. This can include a public install page . To get to the page, log in to Bitrise, select the Workspace that owns the app, and open Bi...", 
"body" : "On the Installable artifacts page, you can: View the installable binaries of past builds. Download the installable artifacts. Check the details page of these artifacts. This can include a public install page . To get to the page, log in to Bitrise, select the Workspace that owns the app, and open Bitrise CI . Select your app and you can see Artifacts on the left. You can filter your installable artifacts using several different filters: Platform of your binary (iOS or Android). The timeframe of the build that generated it. The Workflow the build ran on. The branch of the repository that was built. " }, 
{ "title" : "Artifact details ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-15d39488-4b51-4bb0-23f5-1afbbe64e495", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Artifact details ", 
"snippet" : "You can check the details of any installable artifact (a binary, either an IPA or an APK\/AAB file) generated by a Bitrise build. The details can potentially include: The exact filename. The version of the binary. Metadata such as time of creation and file size. A QR code for installation. A link to ...", 
"body" : "You can check the details of any installable artifact (a binary, either an IPA or an APK\/AAB file) generated by a Bitrise build. The details can potentially include: The exact filename. The version of the binary. Metadata such as time of creation and file size. A QR code for installation. A link to the public install page if it is enabled. To get to the details page, open the Artifacts page and select your file from the Installable artifacts list. On the details page itself, the most important thing you can do is install the app on a mobile device. This is particularly useful for testing purposes. You have two options: A QR code: scan it to install the binary. A link to the public install page. Note that if you're trying to install an iOS app on a device, the device must be registered for the app on the Apple Developer Portal. You can see the available devices in the Who can install this app? section. " }, 
{ "title" : "Deploying files into artifacts ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43176-managing-build-files.html#UUID-008b04a8-f65b-e74b-e254-8bcd5596ce35_UUID-7d63929f-7881-a511-91a1-8b083464bbe9", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Managing build files \/ Build artifacts online \/ Deploying files into artifacts ", 
"snippet" : "Artifacts are deployed into the Artifacts section in your build’s page with the help of the Deploy to Bitrise.io Step. It deploys all the files which have been generated during the build and stores them in the $BITRISE_DEPLOY_DIR directory. To deploy the artifacts, insert the Deploy to Bitrise.io St...", 
"body" : "Artifacts are deployed into the Artifacts section in your build’s page with the help of the Deploy to Bitrise.io Step. It deploys all the files which have been generated during the build and stores them in the $BITRISE_DEPLOY_DIR directory. To deploy the artifacts, insert the Deploy to Bitrise.io Step AFTER the Step(s) that generate the artifacts or even better if the Deploy to Bitrise.io Step is at the very end of your Workflow. Put the Step in the right place Add the Deploy to Bitrise.io Step in the right place. If you insert the Step before other Steps that generate files during the build, then Deploy to Bitrise.io will have nothing to deploy. Note that the content of any sub-directories found in the deploy directory will not be displayed in the Artifacts section of your build. You can, however, compress your artifacts into a zip file if you modify the default false value to true in the Compress the artifacts into one file field in the Deploy to Bitrise.io Step. This will compress the whole directory along with its sub-directories and deploy to Artifacts . " }, 
{ "title" : "Environment Variables ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43258-environment-variables.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables ", 
"snippet" : "An Environment Variable (Env Var) is a key-value pair that holds data that you can use in your builds by inserting them into Step inputs. An Environment Variable (Env Var) is a key-value pair that holds data that you can use in your builds by inserting them into Step inputs. For example, working dir...", 
"body" : "[video] An Environment Variable (Env Var) is a key-value pair that holds data that you can use in your builds by inserting them into Step inputs. An Environment Variable (Env Var) is a key-value pair that holds data that you can use in your builds by inserting them into Step inputs. For example, working directory of an app's repository is often stored in an Env Var so you don't have to specify the path for every Step input that needs it. You can configure Env Vars for an entire app or for specific Workflows . App level Env Vars are available for every Workflow of the app; Workflow level Env Vars are only available for the given Workflow. Size limit of the Env Var list and individual Env Vars By default, the Env Var list size is 120 KB. You can easily increase the list size using a Script Step as described in this Knowledge Base article . The default size limit of an Env Var is 20 KB. You can increase this limit using a Script Step by following this Knowledge Base article . Secrets are a specific type of Environment Variable: they hide their information in an encrypted format and their value is not exposed in the build logs. Protect confidential information Unlike Secrets, Env Vars are fully exposed in builds triggered by pull requests so you should not add any sensitive information to Env Vars. " }, 
{ "title" : "Scope of Environment Variables ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43258-environment-variables.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-242640ff-b367-8f57-9f71-e08cfdd411a8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Scope of Environment Variables ", 
"snippet" : "Users can declare Environment Variables on three different levels: App level. Workflow level. Step level. Automatically exposed Environment Variables In addition to the user-declared Env Vars, there are Env Vars automatically exposed by either the Bitrise CLI or bitrise.io. These are always availabl...", 
"body" : "Users can declare Environment Variables on three different levels: App level. Workflow level. Step level. Automatically exposed Environment Variables In addition to the user-declared Env Vars, there are Env Vars automatically exposed by either the Bitrise CLI or bitrise.io. These are always available in any build. You can find the list of these here: Available Environment VariablesApp level Env Vars are available to every build of a given app. Whenever you create a new Workflow, for example, it immediately and automatically has access to every single app level Env Var. A Workflow level Env Var is only available to the specific Workflow it was defined in. If your primary Workflow has an Env Var with the key TEST_ENV , your deploy Workflow won't be able to access that Env Var. Chaining Workflows together If you chain Workflows together , using the after_run parameter, and define an Env Var in one of the Workflows, all subsequent Workflows in the chain will be able to access that Env Var. A Step level Env Var is defined within a particular Step of a build. Such an Env Var is not available to other Workflows, or to the preceding Steps in the same Workflow. Subsequent Steps, however, can access it. Step outputs are also exposed as Environment Variables. You can set Environment Variables, regardless of level, in both the Workflow Editor, in your app's bitrise.yml file, or during a build with a custom Script using the envman tool: Setting an Env Var in the Workflow EditorSetting and managing Env Vars during a buildEnvironment Variables have a given processing order based on their level: Availability order of Environment Variables" }, 
{ "title" : "Availability order of Environment Variables ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43258-environment-variables.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-fb57592b-1c18-21bc-5c7f-02f90db99bd4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Availability order of Environment Variables ", 
"snippet" : "Environment Variables (Env Var) are available after the Env Var is processed. There are Env Vars exposed by the Bitrise CLI. These are available from the start: for example, BITRISE_SOURCE_DIR and BITRISE_TRIGGERED_WORKFLOW_ID . All other Env Vars are processed and made available as the build progre...", 
"body" : "Environment Variables (Env Var) are available after the Env Var is processed. There are Env Vars exposed by the Bitrise CLI. These are available from the start: for example, BITRISE_SOURCE_DIR and BITRISE_TRIGGERED_WORKFLOW_ID . All other Env Vars are processed and made available as the build progresses. The processing order is the following: Env Vars exposed by the Bitrise CLI. Secrets : they are processed before a Workflow starts. One-off Environment Variables specified for the build through our API. App Environment Variables. Workflow Environment Variables: when the processing of the specified Workflow starts, the Env Vars specified for that Workflow are made available. If the Workflow has Workflows chained before or after it , the Environment Variables of the chained workflows are processed and made available right before the first Step of the Workflow would run. Step inputs: they are exposed for each Step, right before the Step would start. Step outputs: they are exposed by the specific Step, so those are available for subsequent Steps after the Step finishes. " }, 
{ "title" : "Setting an Env Var in the Workflow Editor ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43258-environment-variables.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-b28b5990-c71c-1a57-a93b-4bbc290ce0c9", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting an Env Var in the Workflow Editor ", 
"snippet" : "Every Env Var value is a string The value of an Environment Variable or Secret can only be a string. Even if you set a number (for example, 7), it will be passed on as a string. Using the $ character You can use the $ character in the value of an Env Var or Secret (for example, in a password) but in...", 
"body" : "Every Env Var value is a string The value of an Environment Variable or Secret can only be a string. Even if you set a number (for example, 7), it will be passed on as a string. Using the $ character You can use the $ character in the value of an Env Var or Secret (for example, in a password) but in that case always leave the Replace variables in inputs? toggle inactive. If you replace the variable's key with its value in inputs, the Bitrise CLI will treat the value as another Env Var because of the $ character. To set a new Environment Variable (Env Var): Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select Env Vars from the navigation menu. Choose the level of the Env Var: Scroll down to the App Environment Variables section to set an app level Env Var. Scroll down to one of the Workflow Environment Variables sections to set an Env Var for that specific Workflow. Click the Add new button in your chosen section. Type the Env Var key into the Key input field and the value into the Value input field. Replacing variables in inputs All Env Vars have the is_expand property. On the UI, this is represented by the Replace variables in inputs? toggle. We do NOT recommend enabling it, unless the value of your Env Var or Secret is another Env Var or Secret . Toggling on this option ensures that instead of the key of the Env Var, the value of the Env Var will be passed to the build. Normally, this is not necessary. Please note that if you add a new Environment Variable directly in the bitrise.yml file and do NOT set the is_expand property, the default value will be true . We recommend explicitly setting is_expand in this case: envs:\n - opts:\n is_expand: false\n KEY: VALUE\n Click Save in the top right corner. That's it. Your new Env Var is saved and ready to be used. " }, 
{ "title" : "Setting a custom Env Var when starting a build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43258-environment-variables.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-02ce6978-f4f3-f77e-10cd-c832fb3d5d0c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting a custom Env Var when starting a build ", 
"snippet" : "When scheduling a new build or starting a new build manually, you have the option to set up custom Environment Variables (Env Var). These variables are only available for the build you started or scheduled. Don't use the same key as an App Env Var App Environment Variables have precedence over custo...", 
"body" : "When scheduling a new build or starting a new build manually, you have the option to set up custom Environment Variables (Env Var). These variables are only available for the build you started or scheduled. Don't use the same key as an App Env Var App Environment Variables have precedence over custom Environment Variables! This means that if you define a custom Env Var with the same key as an App Env Var, the build will use the value of the App Env Var. On the Bitrise CI page of your app, find the Start build button and click the button with the clock icon next to it. In the Build configuration pop-up window, select the Advanced tab. Find the Custom Environment Variables section. Enter a key and a value. Replacing variables in inputs All Env Vars have the is_expand property. On the UI, this is represented by the Replace variables in inputs? toggle. We do NOT recommend enabling it, unless the value of your Env Var or Secret is another Env Var or Secret . Toggling on this option ensures that instead of the key of the Env Var, the value of the Env Var will be passed to the build. Normally, this is not necessary. Please note that if you add a new Environment Variable directly in the bitrise.yml file and do NOT set the is_expand property, the default value will be true . We recommend explicitly setting is_expand in this case: envs:\n - opts:\n is_expand: false\n KEY: VALUE\n Press the + Add Environment Variable button. Finish starting or scheduling the build. " }, 
{ "title" : "Using an Env Var in a Step input ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43258-environment-variables.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-5acbbc81-a58d-fdc8-6bf7-c4f26bd81e96", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Using an Env Var in a Step input ", 
"snippet" : "Many Step inputs accept Environment Variables (Env Var) and Secrets as input values. Sensitive inputs Input fields marked as SENSITIVE only accept Secrets as their input. Generally, we do not recommend changing the value of these inputs. To use an Env Var or a Secret as a Step input value: Open your...", 
"body" : "Many Step inputs accept Environment Variables (Env Var) and Secrets as input values. Sensitive inputs Input fields marked as SENSITIVE only accept Secrets as their input. Generally, we do not recommend changing the value of these inputs. To use an Env Var or a Secret as a Step input value: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Open the Workflow Editor . Select a Step from the Workflow. For example, the Git Clone Repository Step. Choose a Step input. For example, the Clone destination (local) directory path input of the Git Clone Repository Step. Next to the name of the input, click Insert variable . Find the Env Var in the list, and select it. You can search for the Env Var by typing its key (or a part of it) into the Filter by key search field. Env Vars generated by Steps The interactive list of Env Vars will show the Env Vars that are generated by previous Steps of the Workflow. For example, if you want to insert an Env Var into one of the inputs of the third Step in the Workflow, you can choose from the Env Vars generated by the first and second Steps. That's it. The next time you run a build of that Workflow, the Step input will use the value of the inserted Env Var as the Step input value. " }, 
{ "title" : "Using Env Vars in the value of an Env Var ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43258-environment-variables.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-0f2f0f24-d759-0f07-2de3-e3aed7504c88", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Using Env Vars in the value of an Env Var ", 
"snippet" : "Environment Variables (Env Var) normally contain a simple string value. However, it is possible to set up an Env Var that includes other Env Vars as values. Secrets as variable values The methods described here also apply to Secrets . You can also embed a Secret within an Env Var. You can, at any ti...", 
"body" : "Environment Variables (Env Var) normally contain a simple string value. However, it is possible to set up an Env Var that includes other Env Vars as values. Secrets as variable values The methods described here also apply to Secrets . You can also embed a Secret within an Env Var. You can, at any time, use another Environment Variable in the value of an Env Var - embedding the Env Var, so to speak. For example, let's say we want to set the value of the $BITRISE_AUTH Env Var to $PERSONAL_ACCESS_TOKEN which is another Env Var. To do this, you need to make sure that the key of $BITRISE_AUTH is replaced with its value so that its the embedded Env Var that is passed on to the Workflows and Steps. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. On the left, select Env Vars from the navigation menu. Under the key of the Env Var you need, toggle the Replace variables in inputs? toggle to active. " }, 
{ "title" : "Setting and managing Env Vars during a build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43258-environment-variables.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-209f8c82-dd8c-b622-2411-df8f4a1438b8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting and managing Env Vars during a build ", 
"snippet" : "You can set Env Vars during a build by defining them in a Step, typically a Script Step. To accomplish this, you can use the envman tool. New Env Vars take effect from the next Step Any Environment Variable you create with the envman tool takes effect only from the subsequent Step in the Workflow. I...", 
"body" : "You can set Env Vars during a build by defining them in a Step, typically a Script Step. To accomplish this, you can use the envman tool. New Env Vars take effect from the next Step Any Environment Variable you create with the envman tool takes effect only from the subsequent Step in the Workflow. In other words, you can't use a newly created Environment Variable in the same Step in which it was created. Here is a simple example where we're using envman to add a new Env Var with the key MY_RELEASE_NOTE : envman add --key MY_RELEASE_NOTE --value \"This is the release note\" You can call envman in any Step, including a Script Step, or even in your own script (stored in your repository) if you call it from a bitrise build. You can specify the value as the --value parameter, or by using pipe: echo 'hi' | envman add --key MY_RELEASE_NOTE You can also read the value from a file: envman add --key MY_RELEASE_NOTE --valuefile .\/some\/file\/path Once the Env Var is exposed, you can use it like any other Env Var. You can use these exposed Env Vars in the inputs of other Steps as well. Here is an example where we’re exposing the release note Env Var and then using it in another Script Step and in a Send a Slack message Step: workflows:\n example:\n steps:\n - script:\n inputs:\n - content: |\n #!\/bin\/bash\n envman add --key MY_RELEASE_NOTE --value \"This is the release note\"\n - script:\n inputs:\n - content: |\n #!\/bin\/bash\n echo \"My Release Note: $MY_RELEASE_NOTE\"\n - slack:\n inputs:\n - channel: ...\n - webhook_url: ...\n - message: \"Release Note: $MY_RELEASE_NOTE\" If you want to expose the value of an Env Var to be accessible through the key of another Env Var, you can do so. For example, to expose the value of BITRISE_BUILD_NUMBER under the key MY_BUILD_NUMBER :  envman add --key MY_BUILD_NUMBER --value \"${BITRISE_BUILD_NUMBER}\" After this, subsequent Steps can get the value of BITRISE_BUILD_NUMBER from the MY_BUILD_NUMBER Env Var. If you change the value of BITRISE_BUILD_NUMBER after this, the value of MY_BUILD_NUMBER won’t be modified, it will still hold the original value! If you need to know if a custom Env Var has been defined, you can easily check it, and even overwrite its value: #!\/bin\/bash\nset -ex\nif [ ! -z \"$API_PROJECT_SCHEME\" ] ; then\n envman add --key PROJECT_SCHEME --value \"$API_PROJECT_SCHEME\"\nfi This script checks whether the API_PROJECT_SCHEME Env Var is defined, and if it is, its value will be assigned to the PROJECT_SCHEME Environment Variable, overwriting the original value of PROJECT_SCHEME . " }, 
{ "title" : "Setting Env Vars in the bitrise.yml ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43258-environment-variables.html#UUID-7ee2edb2-aa92-cbc7-e229-4177d416abd0_UUID-687ba423-cc2f-f036-ab67-c3b394d3a275", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Environment Variables \/ Setting Env Vars in the bitrise.yml ", 
"snippet" : "You can set Env Vars directly in the bitrise.yml configuration file for your app. You can set both app level and Workflow level Env Vars in your app's config file. In this example, we have a configuration with an app-level Env Var called TEST_KEY : app: envs: - opts: is_expand: false TEST_KEY: test ...", 
"body" : "You can set Env Vars directly in the bitrise.yml configuration file for your app. You can set both app level and Workflow level Env Vars in your app's config file. In this example, we have a configuration with an app-level Env Var called TEST_KEY : app: \n envs: \n - opts: \n is_expand: false \n TEST_KEY: test value Replacing variables in inputs All Env Vars have the is_expand property. On the UI, this is represented by the Replace variables in inputs? toggle. We do NOT recommend enabling it, unless the value of your Env Var or Secret is another Env Var or Secret . Toggling on this option ensures that instead of the key of the Env Var, the value of the Env Var will be passed to the build. Normally, this is not necessary. Please note that if you add a new Environment Variable directly in the bitrise.yml file and do NOT set the is_expand property, the default value will be true . We recommend explicitly setting is_expand in this case: envs:\n - opts:\n is_expand: false\n KEY: VALUE\n In this example, the deploy-alpha Workflow defines an Env Var called ENV_TYPE , and then runs another Workflow that can use that Env Var: workflows:\n\n deploy-alpha:\n envs:\n - ENV_TYPE: alpha\n after_run:\n - _deploy\n\n _deploy:\n steps:\n - script:\n inputs:\n - content: |\n #!\/bin\/bash\n echo \"ENV_TYPE: $ENV_TYPE\" If you run the deploy-alpha Workflow, that will set the ENV_TYPE Env Var to alpha , then it will run the deploy Workflow, which can use that Env Var. In this example, it will simply print its value (the printed text will be: ENV_TYPE: alpha ). " }, 
{ "title" : "Secrets ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53208-secrets.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets ", 
"snippet" : "Secrets are a specific type of Environment Variable: they aren't shown in the bitrise.yml and their value is not exposed in the build logs. Secrets are a specific type of Environment Variable: they hide their information in an encrypted format and their value is not exposed in the build logs. They a...", 
"body" : "[video] Secrets are a specific type of Environment Variable: they aren't shown in the bitrise.yml and their value is not exposed in the build logs. Secrets are a specific type of Environment Variable: they hide their information in an encrypted format and their value is not exposed in the build logs. They aren't shown in the bitrise.yml configuration either. You can store confidential information, such as passwords or API keys as Secrets. Just like Environment Variables, Secrets can be used as the value of a Step input: Using an Env Var in a Step inputSensitive inputs Input fields marked as SENSITIVE only accept Secrets as their input. Generally, we do not recommend changing the value of these inputs. " }, 
{ "title" : "Setting a Secret ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53208-secrets.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-8c8c168c-fedb-b485-0ac8-a5229096a462", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Setting a Secret ", 
"snippet" : "Every Env Var value is a string The value of an Environment Variable or Secret can only be a string. Even if you set a number (for example, 7), it will be passed on as a string. Using the $ character You can use the $ character in the value of an Env Var or Secret (for example, in a password) but in...", 
"body" : "Every Env Var value is a string The value of an Environment Variable or Secret can only be a string. Even if you set a number (for example, 7), it will be passed on as a string. Using the $ character You can use the $ character in the value of an Env Var or Secret (for example, in a password) but in that case always leave the Replace variables in inputs? toggle inactive. If you replace the variable's key with its value in inputs, the Bitrise CLI will treat the value as another Env Var because of the $ character. There are two ways of creating a new Secret in the graphical UI of the Workflow Editor. In the first procedure, we're using the Secrets tab. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Go to the Secrets tab. Click the Add new button. Type the Env Var key into the Key input field and the value into the Value input field. Exposing Secrets to pull requests Under the value, you can see the Expose for Pull Requests? toggle. By default, Secrets aren't exposed to pull requests. We strongly recommend not exposing Secrets to pull requests in most cases. Replacing variables in inputs All Env Vars have the is_expand property. On the UI, this is represented by the Replace variables in inputs? toggle. We do NOT recommend enabling it, unless the value of your Env Var or Secret is another Env Var or Secret . Toggling on this option ensures that instead of the key of the Env Var, the value of the Env Var will be passed to the build. Normally, this is not necessary. Please note that if you add a new Environment Variable directly in the bitrise.yml file and do NOT set the is_expand property, the default value will be true . We recommend explicitly setting is_expand in this case: envs:\n - opts:\n is_expand: false\n KEY: VALUE\n On the right under the Secret, click the Save button. The other method is to create the Secrets when modifying the Step input values. You can only do this when the Step input is marked as SENSITIVE . Sensitive inputs only accept Secrets so you can either choose an existing one from a list, or create a new one. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Select a Workflow and find the Step you want to configure. Find the sensitive input you wish to modify. Click into the input field. Under the Create New Secret Env Var label, specify a key and a value for your new Secret. Exposing Secrets to pull requests Under the value, you can see the Expose for Pull Requests? toggle. By default, Secrets aren't exposed to pull requests. We strongly recommend not exposing Secrets to pull requests in most cases. Replacing variables in inputs All Env Vars have the is_expand property. On the UI, this is represented by the Replace variables in inputs? toggle. We do NOT recommend enabling it, unless the value of your Env Var or Secret is another Env Var or Secret . Toggling on this option ensures that instead of the key of the Env Var, the value of the Env Var will be passed to the build. Normally, this is not necessary. Please note that if you add a new Environment Variable directly in the bitrise.yml file and do NOT set the is_expand property, the default value will be true . We recommend explicitly setting is_expand in this case: envs:\n - opts:\n is_expand: false\n KEY: VALUE\n Click the Add new button. " }, 
{ "title" : "Editing an existing Secret ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53208-secrets.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-af2856a9-70de-38be-f4cd-7346a4e55f75", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Editing an existing Secret ", 
"snippet" : "Once you’ve added a new secret Env Var in the Secrets tab, you come back to it any time, modify its content or make it protected from curious eyes! Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button t...", 
"body" : "Once you’ve added a new secret Env Var in the Secrets tab, you come back to it any time, modify its content or make it protected from curious eyes! Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Go to the Secrets tab. Click Edit next to the value of your Secret. Modify its content as needed. On the right under the Secret, click the Save button. " }, 
{ "title" : "Protecting the value of a Secret ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53208-secrets.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-df82ce8a-a1d2-debf-a92a-8ac55ea86e65", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Protecting the value of a Secret ", 
"snippet" : "Normally, you can show and hide the value of a Secret by clicking the eye icon. This feature is useful if you have a long list of secret env vars in Secrets and you wish to check the value of only one Secret while leaving the other values hidden. If a value is hidden, it’s represented with the cross...", 
"body" : "Normally, you can show and hide the value of a Secret by clicking the eye icon. This feature is useful if you have a long list of secret env vars in Secrets and you wish to check the value of only one Secret while leaving the other values hidden. If a value is hidden, it’s represented with the crossed out eye icon. However, you can hide the value of a Secret permanently by making it protected. If you do so, no one, including yourself, will be able to change or even view the value again. A Secret's protection can't be undone Making a Secret protected is irreversible. If you ever need to change the value, you will have to delete the Secret and create a new one. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Go to the Secrets tab. Click Edit next to the value of your Secret. Click Make it protected . The pop-up window will warn that the process is irreversible. Click Make it protected . That's it. You can no longer view the value of the Secret. " }, 
{ "title" : "Exposing a Secret to pull requests ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53208-secrets.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-bbf7e25a-8a1c-3e35-c659-6525d37f243a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Exposing a Secret to pull requests ", 
"snippet" : "By default, pull requests do not have access to the values of Secrets. This means that if a pull request opened from a fork of a repository triggers a build, that build can't use the app's Secrets. If you need to grant pull request builds access to a particular Secret, you can expose that Secret to ...", 
"body" : "By default, pull requests do not have access to the values of Secrets. This means that if a pull request opened from a fork of a repository triggers a build, that build can't use the app's Secrets. If you need to grant pull request builds access to a particular Secret, you can expose that Secret to pull requests. However, even when exposed, its value won't be visible in the logs: it will be displayed as [REDACTED]. Protected Secrets can't be exposed Once a Secret has been made protected , you can't expose it to pull request builds. Public apps If your app is a public app, you can't expose the app's Secrets to pull requests builds. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Go to the Secrets tab. Click Edit next to the value of your Secret. Toggle the Expose for Pull Requests? toggle. Once the Secret is exposed, pull request builds can access it. " }, 
{ "title" : "Managing Secrets across multiple apps ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53208-secrets.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-55e08c3d-6cbe-b65d-2884-e5835c2a01f7", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Managing Secrets across multiple apps ", 
"snippet" : "By default, all Secrets are handled on the app level. You can reuse Secret keys across multiple Bitrise apps, even if their corresponding values are different for each app. However, it is possible to set up a Secret that holds the same value for all your apps, and manage that Secret from one locatio...", 
"body" : "By default, all Secrets are handled on the app level. You can reuse Secret keys across multiple Bitrise apps, even if their corresponding values are different for each app. However, it is possible to set up a Secret that holds the same value for all your apps, and manage that Secret from one location. For example, if all your apps need access to the same API, it makes sense to store the Secret containing the API key in a central location. If the API key ever changes, you only need to change it in that single location and the change applies to all your Bitrise apps. There are two ways to achieve this: Managing your Secrets from a Workspace . This is only available on Enterprise plans. Managing secrets from a central location such as a vault or database and pulling it with a Step. " }, 
{ "title" : "Redacting Secrets ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53208-secrets.html#UUID-bfc35b35-3895-2edb-471b-ab040993c3bf_UUID-67710377-6824-244e-5120-83002048d81f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Secrets \/ Redacting Secrets ", 
"snippet" : "The Bitrise CLI automatically redacts your Secret Env Vars and prints [REDACTED] with newlines after the key so that the Secret Env Vars are NOT VISIBLE in the build log. This applies to both private and public apps. You can turn this off at any time though if you need to have your Secrets visible i...", 
"body" : "The Bitrise CLI automatically redacts your Secret Env Vars and prints [REDACTED] with newlines after the key so that the Secret Env Vars are NOT VISIBLE in the build log. This applies to both private and public apps. You can turn this off at any time though if you need to have your Secrets visible in logs. This is a potential security risk. We strongly recommend not to turn off Secret redaction. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Go to the Secrets tab. Click Add new to register the BITRISE_SECRET_FILTERING secret Environment Variable with false value. Click Save in the top right corner. " }, 
{ "title" : "Build statuses ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53415-build-statuses.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build statuses ", 
"snippet" : "On the Builds page, you can track the current status of all your builds. There are six different build statuses: on hold, starting, running, aborted, failed, and success. On the Builds page, you can track the current status of all your builds. There are six different build statuses: On hold : There ...", 
"body" : "On the Builds page, you can track the current status of all your builds. There are six different build statuses: on hold, starting, running, aborted, failed, and success. On the Builds page, you can track the current status of all your builds. There are six different build statuses: On hold : There are more builds started than what your current plan allows. In most cases, this is only relevant for legacy, concurrency-based plans: it means you don't have enough concurrency to start another build. Time limit All builds on hold are aborted after 30 days to ensure no build gets permanently stuck. Starting : When a build is triggered, Bitrise creates a virtual machine to run it. If computing resources aren’t immediately available, the build is placed in a queue. Once a worker is available, the worker assigned to create the virtual machine is processing the build request. Running : Once a virtual machine is ready to go, the build starts running. This means that Bitrise is executing all the Steps defined in your Workflow. Aborted : A build can be aborted manually by the user, or automatically either by the Rolling builds feature or because your build time has run out. Aborted with success There is a specific status called Aborted with success: this means the build has been aborted by the API but it is reported as a success to your git hosting provider. Use the  abort_with_success  parameter with a Bitrise API call to abort a build but still count it as a successful one. Failed : In most cases, a build fails if any of the Steps fails. There are exceptions, such as the caching Steps , and you can mark Steps as skippable which means even if they fail, the build will keep running. Success : If Bitrise successfully executes all Steps that aren’t marked as skippable, the build is marked as successful. You can always check your build status on the Builds page of the app, and you can send status reports: Reporting the build status to your Git hosting provider" }, 
{ "title" : "Installing tools during a build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-54074-installing-tools-during-a-build.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Installing tools during a build ", 
"snippet" : "If you need a tool that isn't preinstalled on the build machines and you can’t find a Step for it, you can always install and use them with scripts or Script Steps. If you need a tool that isn't preinstalled on the build machines and you can’t find a Step for it, you can always install and use them ...", 
"body" : "If you need a tool that isn't preinstalled on the build machines and you can’t find a Step for it, you can always install and use them with scripts or Script Steps. If you need a tool that isn't preinstalled on the build machines and you can’t find a Step for it, you can always install and use them with scripts or Script Steps. Add a Script step to your Workflow, and either write your script there, or run a script from your repository. Passwordless sudo is enabled in all of our build virtual machines, so you can freely use sudo if you need it. Once you have a working script, you can also transform it into a Step and optionally share it with others (through our StepLib). Read more: Developing a new StepOpen your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Click the + sign to insert a Step at that position from our Step Library . In the Search steps bar, search for “script” and click on the Script Step . This will add the Step to your Workflow. Click the Step in your Workflow. Insert your script into the Script content input field. Running a script from your repository If you want to run a script from your repository, you can run it from this Script Step. Paths are relative to your repository’s root. For example, if you have a Bash script at path\/to\/script.sh you can add it to the Script content input field and run it with the following command: #!\/bin\/bash\nset -ex\nbash .\/path\/to\/script.sh You can run non-Bash scripts too, for example, a Ruby script : #!\/bin\/bash\nset -ex\nruby .\/path\/to\/script.rb Installing cmake on macOS Install cmake with a Script Step on macOS with the following brew command: #!\/bin\/bash\nset -ex\nbrew install cmake Brew install You can also use the Brew install Step to install cmake and many other tools. Installing cmake on Linux Install cmake with a Script Step on Linux with the following apt-get command: #!\/bin\/bash\nset -ex\nsudo apt-get install -y cmake Use the -y flag for apt-get If you don’t add the -y (yes) flag to the apt-get command, apt-get will present a prompt which you have to accept or deny manually. This is not a problem on your own Linux machine but in a CI environment you can’t provide manual input for apt-get . To prevent this issue, and to auto accept the prompt, just use the -y flag, as shown in the example. Run npm command You can also use the Run npm command Step to install cmake and many other tools. Installing iOS 13 runtime on Xcode 14 stacks Install iOS 13 runtime on Xcode 14 stacks with a Script Step. #!\/bin\/bash\nset -ex\nsudo xcodes runtimes install \"iOS 13.0\" Available simulator runtimes on macOS stacks You can install other runtimes using a similar syntax, but keep in mind, some runtimes are already preinstalled on our stacks. If you are interested in the list of preinstalled tools, such as simulator runtimes on our stacks, you can find every available stack’s  System Report on GitHub . " }, 
{ "title" : "Installing tools by declaring deps in the bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-54074-installing-tools-during-a-build.html#UUID-4b5b1437-c4e5-7367-e994-b5738e643e14_UUID-534094e9-0f67-eccc-04c6-09191a046a3d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Installing tools during a build \/ Installing tools by declaring deps in the bitrise.yml file ", 
"snippet" : "Instead of installing a dependency or tool using a dependency installer Step or Script Step, you can also use the deps option of the bitrise.yml . If you declare deps for a specific Step, the Bitrise CLI will check if that tool is installed, and will install it for you, if required. If the selected ...", 
"body" : "Instead of installing a dependency or tool using a dependency installer Step or Script Step, you can also use the deps option of the bitrise.yml . If you declare deps for a specific Step, the Bitrise CLI will check if that tool is installed, and will install it for you, if required. If the selected tool or dependency is already available, the Bitrise CLI will not install it. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines pages, you can: Click the Edit bitrise.yml button to get to the bitrise.yml tab of the Workflow Editor. Select a Workflow from the list of the app's Workflows. Go to the bitrise.yml tab. Find the Step you need: you will declare the dependencies for that Step. Add deps below the Step title: workflows:\n test:\n steps:\n - script:\n deps: Declare the package manager name and the package name. workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n - name: cmake\n apt_get:\n - name: cmake Declaring the binary name If you want to declare a dependency which might be available from another source (not through the package manager), then you might also want to declare the related binary name . If the package does not match the binary name, you can declare it with bin_name . An example is AWS CLI, where the package name in both package managers is awscli , but the binary itself is aws . workflows:\n test:\n steps:\n - script:\n deps:\n brew:\n - name: awscli\n bin_name: aws " }, 
{ "title" : "Connecting to a VPN during a build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-64208-connecting-to-a-vpn-during-a-build.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build ", 
"snippet" : "To connect to a VPN during a build, make sure that you have a Step establishing a VPN connection, such as Set up OpenVPN server. You might require a VPN connection for your build, to be able to connect to your server, either to git clone your repository or to access a private API. To connect to a VP...", 
"body" : "To connect to a VPN during a build, make sure that you have a Step establishing a VPN connection, such as Set up OpenVPN server. You might require a VPN connection for your build, to be able to connect to your server, either to git clone your repository or to access a private API. To connect to a VPN, you need to: Make sure your local network address space does not clash with the Bitrise virtual machines' address space as this can cause an error with the VPN. Install and configure the required VPN components. Connect to the VPN. You can configure and connect a VPN anywhere in your Workflow - BEFORE you would use the VPN connection, of course. For example, if you require a VPN connection to access your repository, you have to connect before the Git Clone Step. SSH sessions When you choose your VPN tool and do the setup\/configuration, you have to be careful NOT TO RESTART OR ABORT existing SSH sessions! The bitrise.io workers will abort the build if the SSH connection between the build’s Control\/Master machine and the build virtual machine terminates! " }, 
{ "title" : "Accessing a repository via VPN ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-64208-connecting-to-a-vpn-during-a-build.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-5e36de21-1e1d-9f03-af95-c8836a683a88", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Accessing a repository via VPN ", 
"snippet" : "If the repository of your app can be only accessed via VPN, you have two things to keep in mind above all: During builds, the VPN connection must be established before cloning the repository to our virtual machines: in practice, this means the Step establishing the connection must be placed before t...", 
"body" : "If the repository of your app can be only accessed via VPN, you have two things to keep in mind above all: During builds, the VPN connection must be established before cloning the repository to our virtual machines: in practice, this means the Step establishing the connection must be placed before the Git Clone Step in your Workflow . When adding a new app, you need a workaround: use a dummy repository that can be accessed without a VPN during the process of adding the app. Let’s go through this workaround! Create an empty repository that is accessible without a VPN connection. Add a new app, using this repository as the source. Make sure it is a private app! There is no need to register a webhook . Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select General . At the bottom of the Basic settings section, click Edit . In the pop-up window, paste the new repository URL. Click Save . Place the Step or Steps establishing the VPN connection before any Steps that have to access your repository in your Workflow. And you’re done. For the different methods of establishing a VPN connection, take a look at our example configurations. " }, 
{ "title" : "Example VPN configurations ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-64208-connecting-to-a-vpn-during-a-build.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-c4fe8f5b-cae7-fdc2-ef68-8edf9fe6fe0b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations ", 
"snippet" : "In this section, we present three example configurations for connecting to a VPN during a build: Using an OpenVPN server . Using Strongswan VPN . Using Cisco VPN ....", 
"body" : "In this section, we present three example configurations for connecting to a VPN during a build: Using an OpenVPN server . Using Strongswan VPN . Using Cisco VPN . " }, 
{ "title" : "Using the Connect to OpenVPN Server Step ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-64208-connecting-to-a-vpn-during-a-build.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-c06c8ec2-9381-610c-6fed-aa196a13c81e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using the Connect to OpenVPN Server Step ", 
"snippet" : "To use the Connect to OpenVPN Server Step, you need to build an OpenVPN server in advance, and then encode your certificate files and your private key. Set up an OpenVPN Server . Encode the following in Base64: CA certificate client certificate client private key You can base64 encode files with the...", 
"body" : "To use the Connect to OpenVPN Server Step, you need to build an OpenVPN server in advance, and then encode your certificate files and your private key. Set up an OpenVPN Server . Encode the following in Base64: CA certificate client certificate client private key You can base64 encode files with the following command: $ base64 <filepath> Open your app on Bitrise and go to the Workflow tab. Register the encoded certificates and the key as Secrets . We recommend using the following keys as they are the default inputs for the VPN Step: CA certificate: $VPN_CA_CRT_BASE64 Client certificate: $VPN_CLIENT_CRT_BASE64 Private key: VPN_CLIENT_KEY_BASE64 Add the Connect to OpenVPN Server Step to your Workflow. Add the Step before any Steps that might require VPN connection. Add the previously created Secrets to their respective inputs: Base64 encoded CA Certificate Base64 encoded Client Certificate Base64 encoded Client Private Key If you created the Secrets with the recommended keys, you do not have to change the inputs. Fill in the other required inputs. Host : the Open VPN Server IP or hostname Port : OpenVPN Server Port number Protocol : OpenVPN Server Protocol " }, 
{ "title" : "Using Strongswan VPN ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-64208-connecting-to-a-vpn-during-a-build.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-0735a420-25a9-490f-306b-a638dc966e3e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Strongswan VPN ", 
"snippet" : "This is an example script which you can either save into your repository and run it from there, or just copy paste its content into a Script Step in your bitrise configuration ( bitrise.yml \/ Workflow). The script uses Strongswan VPN to connect to a VPN. It works on either macOS or Linux. Once the s...", 
"body" : "This is an example script which you can either save into your repository and run it from there, or just copy paste its content into a Script Step in your bitrise configuration ( bitrise.yml \/ Workflow). The script uses Strongswan VPN to connect to a VPN. It works on either macOS or Linux. Once the script has run successfully, any subsequent Bitrise Step can access devices and services over the VPN connection. #!\/usr\/bin\/env bash\nset -e\n\necho \"WAN IP\"\n# This prints the servers Internet IP adress to the log, useful for debugging\ncurl http:\/\/httpbin.org\/ip\n\ncase \"$OSTYPE\" in\n linux*)\n echo \"Configuring for Linux\"\n\n # Variables\n etc_dir=\/etc\n etc_sudo='sudo' # Sudo is needed for Linux Strongswan configuration\n\n # Install strongswan\n echo \"Installing Strongswan...\"\n sudo apt-get install -y strongswan\n\n ;;\n darwin*)\n echo \"Configuring for Mac OS\"\n\n # Variables\n etc_dir=\/usr\/local\/etc\n etc_sudo='' # Sudo is NOT needed for Mac OS Strongswan configuration\n\n # Install Strongswan using homebrew\n echo \"Installing OpenSSL...\"\n # Manually install OpenSSL first to save time, since installing Strongswan directly compiles OpenSSL from source instead\n brew install openssl\n echo \"Installing Strongswan...\"\n brew install strongswan\n\n ;;\n *)\n echo \"Unknown operative system: $OSTYPE, exiting\"\n exit 1\n ;;\nesac\n\n\n# Method for rendering a template string file (when run, returns the input string with $VARIABLES replaced from env)\nrender_template() {\n eval \"echo \\\"$(cat $1)\\\"\"\n}\n\n# Create a temporary directory to hold files\ntemp_dir=\/tmp\/vpn-config\nmkdir $temp_dir\n\n# IPsec config file, see examples at https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/IKEv1Examples and https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/IKEv2Examples\necho \"Downloading ipsec.conf...\"\nwget https:\/\/www.example.com\/ipsec.conf.template -O $temp_dir\/ipsec.conf.template\n# IPsec credentials file, see documentation at https:\/\/wiki.strongswan.org\/projects\/strongswan\/wiki\/IpsecSecrets\necho \"Downloading ipsec.secrets...\"\nwget https:\/\/www.example.com\/ipsec.secrets.template -O $temp_dir\/ipsec.secrets.template\n# In some cases you might need to download the certificate, or certificate chain, of your other VPN endpoint\necho \"Downloading server.crt...\"\nwget https:\/\/www.example.com\/server.crt -O $temp_dir\/server.crt\n\necho \"Rendering config templates\"\nrender_template $temp_dir\/ipsec.conf.template > $temp_dir\/ipsec.conf\nrender_template $temp_dir\/ipsec.secrets.template > $temp_dir\/ipsec.secrets\n\necho \"Installing configuration\"\n$etc_sudo cp $temp_dir\/ipsec.conf $etc_dir\/ipsec.conf\n$etc_sudo cp $temp_dir\/ipsec.secrets $etc_dir\/ipsec.secrets\n$etc_sudo cp $temp_dir\/server.crt $etc_dir\/ipsec.d\/ocspcerts\/server.crt\n\n# Start the ipsec service\necho \"Starting ipsec\"\nsudo ipsec start\n\n# We're sleeping between commands, mostly since Mac OS seems to have some problems otherwise\nsleep 1\n\n# Output some helpful status to the log\necho \"Status ipsec\"\nsudo ipsec statusall\n\nsleep 1\n\n# Switch out myconnection with the name of your connection in ipsec.conf\necho \"Initiating VPN connection\"\nsudo ipsec up myconnection\n\nsleep 1\n\ncase \"$OSTYPE\" in\n linux*)\n ;;\n darwin*)\n # In Mac OS El Capitan, the `sudo ipsec up` command consistently fails the first time, but succeeds after a restart of the ipsec service\n echo \"Restarting ipsec\"\n sudo ipsec restart\n\n sleep 1\n\n echo \"Initiating VPN connection\"\n sudo ipsec up myconnection\n\n sleep 1\n\n # This step might apply if you are routing all traffic trough the IPsec connection (that is, if your remote IP range is 0.0.0.0\/0)\n # Mac OS El Capitan seems to have problems getting the DNS configuration from the Strongswan interface. Also IPv6 sometimes causes issues. So we're manually turning off IPv6 and forcing a new DNS configuration.\n echo \"Disabling IPv6 and forcing DNS settings\"\n # Fetch main interface\n main_interface=$(networksetup -listnetworkserviceorder | awk -F'\\\\) ' '\/\\(1\\)\/ {print $2}')\n # Completely disable IPv6\n sudo networksetup -setv6off \"$main_interface\"\n # Switch 10.0.0.1 with your DNS server\n sudo networksetup -setdnsservers \"$main_interface\" 10.0.0.1\n ;;\n *) ;;\nesac\n\n# Your VPN connection should be up and running. Any following steps of your Bitrise workflow can access devices over your VPN connection 🎉\n " }, 
{ "title" : "Using Cisco VPN ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-64208-connecting-to-a-vpn-during-a-build.html#UUID-eaf0f2d1-5761-4afb-ddd6-55587fd7d005_UUID-8540fef2-571e-8024-d44a-9c2ed8a5ec1e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Connecting to a VPN during a build \/ Example VPN configurations \/ Using Cisco VPN ", 
"snippet" : "You can use the Cisco VPN connect Step: it connects with Cisco VPN provided by VPN3000 Concentrator, Juniper\/Netscreen, IOS and PIX using vpnc. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row...", 
"body" : "You can use the Cisco VPN connect Step: it connects with Cisco VPN provided by VPN3000 Concentrator, Juniper\/Netscreen, IOS and PIX using vpnc. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add the Cisco VPN connect Step at the start of your Workflow. Provide VPN client settings and credentials required for the Step either by: Using the existing vpnc configuration file: vpnc.conf Using the Command line options input of the Step. The options specified in this input will take precedence over the configuration file! For more information on setting up vpnc, check the vpnc homepage and the vpnc manual . " }, 
{ "title" : "Finding a specific build ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-53372-finding-a-specific-build.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Finding a specific build ", 
"snippet" : "If your app has multiple builds, you can search for a specific one on the main page of the app by using a variety of options, like build number or commit message. Build retention for 200 days On the Builds page of your app, we only show builds from the last 200 days. The same limit applies if you ar...", 
"body" : "If your app has multiple builds, you can search for a specific one on the main page of the app by using a variety of options, like build number or commit message. Build retention for 200 days On the Builds page of your app, we only show builds from the last 200 days. The same limit applies if you are searching for specific builds on the page. This limitation also applies to most API calls: the GET\/apps\/{app-slug}\/builds endpoint and related endpoints can only return builds from the last 200 days. However, there are two methods to get a build that is older than 200 days: If you know the exact build URL, you can access the build. You can use the GET\/apps\/{app-slug}\/archived-builds API endpoint: Listing the archived builds of an app. If your app has multiple builds on bitrise.io , you can search for a specific one by using a variety of options. To do so: Open an app on Bitrise. On the main page of the app, you can find the search options above the list of builds. You have several options: In the Search for a build number or commit message field, enter either a build number or a commit message to find the build. Choose a filter from the status filter dropdown menu to find builds with a specific status. Choose a filter from the branch filter dropdown menu to find builds that ran on a specific branch. Choose a filter from the Workflows dropdown menu to find builds that ran with specific Workflows. Choose a filter from the triggers dropdown menu to find builds that were triggered by one of our trigger options: pushes, pull requests, or tags. " }, 
{ "title" : "Build numbering and app versioning ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43257-build-numbering-and-app-versioning.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning ", 
"snippet" : "All Bitrise builds have a build number. The first build of your app is, by default, number 1, and the build number gets incremented with each build. You can also change your build number manually. All Bitrise builds have a build number. The first build of your app is, by default, number 1, and the b...", 
"body" : "All Bitrise builds have a build number. The first build of your app is, by default, number 1, and the build number gets incremented with each build. You can also change your build number manually. All Bitrise builds have a build number. The first build of your app is, by default, number 1, and the build number gets incremented with each build. You can get a build’s Bitrise build number on the website, as well as via the $BITRISE_BUILD_NUMBER Environment Variable. This variable can be used in any Step or script where you need the Bitrise build number for any reason. You can also take care of your app’s versioning automatically, using Bitrise. We have two Steps to do it for you: Setting up app versioning automatically on Bitrise" }, 
{ "title" : "Adding the SSH key to the machine user ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43257-build-numbering-and-app-versioning.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-e7127b05-9959-b784-e8b4-54a6b1cacf53", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Adding the SSH key to the machine user ", 
"snippet" : "In order for Bitrise to be able to use the machine user to access your repository, you must add the same SSH key to the machine user and the app on Bitrise. Negative build numbers The build number must be either 0 or a positive integer. Negative numbers are not accepted. You can, however, set any nu...", 
"body" : "In order for Bitrise to be able to use the machine user to access your repository, you must add the same SSH key to the machine user and the app on Bitrise. Negative build numbers The build number must be either 0 or a positive integer. Negative numbers are not accepted. You can, however, set any number you have already used. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Builds . Scroll down to Next build number . This number is automatically incremented whenever you run a build but you can set it manually. To modify the number, click Edit . " }, 
{ "title" : "Setting up app versioning automatically on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43257-build-numbering-and-app-versioning.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-6f3ae55b-9830-4c0a-1bff-400c53fda24b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Setting up app versioning automatically on Bitrise ", 
"snippet" : "Track the version of your app in its Git repository by modifying the file containing the essential information about the app (for example, the Info.plist file for iOS apps and either the build.gradle file or the AndroidManifest.xml file for Android apps). Bitrise has two steps to do this for you. Th...", 
"body" : "Track the version of your app in its Git repository by modifying the file containing the essential information about the app (for example, the Info.plist file for iOS apps and either the build.gradle file or the AndroidManifest.xml file for Android apps). Bitrise has two steps to do this for you. These two Steps can insert the Bitrise build number or some other specified number into their respective files: Change Android versionCode and versionName for Android apps. Set Xcode Project Build Number for iOS apps. Both Steps accept either numbers (integers and\/or numeric strings) or environment variables in their relevant inputs. By default, both use the $BITRISE_BUILD_NUMBER Environment Variable as their default value for the build number. " }, 
{ "title" : "Offsetting the build version ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-43257-build-numbering-and-app-versioning.html#UUID-0d5f20be-06fb-37bc-5603-4310b4c54ca0_UUID-736d38e1-185a-75cf-876f-98b0a2bae002", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build numbering and app versioning \/ Offsetting the build version ", 
"snippet" : "You can also offset your App’s build version numbers if you handled version tracking in a different way before for the same app: all you need to do is setting the value which should be added to the build number. The value can be either a fixed integer value or an Environment Variable. To offset your...", 
"body" : "You can also offset your App’s build version numbers if you handled version tracking in a different way before for the same app: all you need to do is setting the value which should be added to the build number. The value can be either a fixed integer value or an Environment Variable. To offset your version number by your Bitrise build number every time a build is triggered, use the $BITRISE_BUILD_NUMBER Environment Variable: For Android apps, find the versionCode Offset input of the Change Android versionCode and versionName Step and set $BITRISE_BUILD_NUMBER as its value. The value of the variable will be added to the value specified in the versionCode input. For iOS apps, find the Build Number Offset input of the Set Xcode Project Build Number Step and set $BITRISE_BUILD_NUMBER as its value. The value of the variable will be added to the value specified in the Build Number input. Offsetting an Android app's version Let’s say you have an app and you are about to run its fifth build on Bitrise. You wish to offset the Build Number by 6 as the app had six builds before starting to use Bitrise. The following configuration is used: - Version Code: $BITRISE_BUILD_NUMBER\n- Version Code Offset: 6\n- Version Name: 1.0.5 The value of $BITRISE_BUILD_NUMBER (which equals 5 in our example) will be added to the Version Code Offset value. As such, android:versionName value will be set to 1.0.5 (11), indicating it’s the 11th build of the 1.0.5 version of your app. Offsetting an iOS app's version Let’s say you have an app and you are about to run its fifth build on Bitrise. You wish to offset the Build Number by 6 as the app had six builds before starting to use Bitrise. The following configuration is used: - Build Number: $BITRISE_BUILD_NUMBER\n- Build Number Offset: 6\n- Version Number: 1.1 The value of $BITRISE_BUILD_NUMBER (which equals 5 in our example) will be added to the Build Number Offset value. As such, CFBundleShortVersionString will be set to 1.1 (11), indicating it’s the 11th build of the 1.1 version of your app. " }, 
{ "title" : "Build data and troubleshooting ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "Build logs ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs ", 
"snippet" : "On Bitrise, build logs are easily accessible: they can be viewed on the website in their entirety or they can be downloaded to view them on your own device. Build logs allow users to analyze their builds and find out what went wrong - and what went right! On Bitrise, build logs are easily accessible...", 
"body" : "[video] On Bitrise, build logs are easily accessible: they can be viewed on the website in their entirety or they can be downloaded to view them on your own device. Build logs allow users to analyze their builds and find out what went wrong - and what went right! On Bitrise, build logs are easily accessible: they can be viewed on the website in their entirety or they can be downloaded to view them on your own device. Build retention for 200 days On the Builds page of your app, we only show builds from the last 200 days. The same limit applies if you are searching for specific builds on the page. This limitation also applies to most API calls: the GET\/apps\/{app-slug}\/builds endpoint and related endpoints can only return builds from the last 200 days. However, there are two methods to get a build that is older than 200 days: If you know the exact build URL, you can access the build. You can use the GET\/apps\/{app-slug}\/archived-builds API endpoint: Listing the archived builds of an app. " }, 
{ "title" : "Finding a build log ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-48939df0-e086-ebcd-d395-837408311aae", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Finding a build log ", 
"snippet" : "When you run a build, a build log is generated automatically. Every build has its own log, with its own unique build log URL. The build log URL contains the build slug: a hexadecimal identifier for a specific build. Assisting Bitrise Support When Bitrise Support asks for your build logs, the best th...", 
"body" : "When you run a build, a build log is generated automatically. Every build has its own log, with its own unique build log URL. The build log URL contains the build slug: a hexadecimal identifier for a specific build. Assisting Bitrise Support When Bitrise Support asks for your build logs, the best thing to do is send the build URL. Find your app on the Dashboard, and select it. On the app's main page, select the build you want to check out. Make sure you have the Log tab selected. On the Log tab, you can see the Steps of the Workflow and their status. By default, all failed Steps are expanded. Expand any Step's info by clicking the downward arrow on the right to the Step. This will show the relevant part of the build log. " }, 
{ "title" : "The build log page ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-c9ae937b-1251-94a9-4963-62a9985f9f4f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ The build log page ", 
"snippet" : "The build log page shows all Steps that were part of the build, and their status. By default, failed Steps are expanded, with the error message highlighted for convenient troubleshooting. Expanding a Step also allows you to see: The start time of the Step's run. The Step ID. This is how the bitrise....", 
"body" : "The build log page shows all Steps that were part of the build, and their status. By default, failed Steps are expanded, with the error message highlighted for convenient troubleshooting. Expanding a Step also allows you to see: The start time of the Step's run. The Step ID. This is how the bitrise.yml configuration file identifies the Step. For more information, see Step reference\/ID format. The current version of the Step. Underneath the version number, you can check the release notes for the Step. If the build didn't run with the latest version of the Step, you can also click Update to open the Workflow Editor and update the Step to a different version. Under Step resources , you can check out the Step's documentation on our Integrations page, as well as its source code and issue tracker on GitHub. To view a build log's contents in full, in a single file, download the log . " }, 
{ "title" : "Following a build log live ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-83fa8c2c-adb7-3053-73ef-0496563e8557", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Following a build log live ", 
"snippet" : "You can check the log of a build live - that is, while the build is running. What’s more, you can even follow the log as the build is happening. That means that as the build progresses, the log will automatically scroll to the new sections as they appear. To do so: Start a build. Go to the build’s p...", 
"body" : "You can check the log of a build live - that is, while the build is running. What’s more, you can even follow the log as the build is happening. That means that as the build progresses, the log will automatically scroll to the new sections as they appear. To do so: Start a build. Go to the build’s page. Scroll down to the log. Click Follow . To stop following, you just need to manually navigate anywhere within the log. You can restart following any time. " }, 
{ "title" : "Downloading a build log ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-beba418a-86b4-8c24-1c44-ad71975d8054", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Downloading a build log ", 
"snippet" : "If you need to send your build logs to people who do not have access to the app on Bitrise, or you want to store your logs in your own archives, you can simply download the log file from Bitrise. Log security Please note that your build log can contain sensitive information! Make sure to check its c...", 
"body" : "If you need to send your build logs to people who do not have access to the app on Bitrise, or you want to store your logs in your own archives, you can simply download the log file from Bitrise. Log security Please note that your build log can contain sensitive information! Make sure to check its contents before downloading the log file and sending it out to anyone. We recommend using Secrets to make sure nothing sensitive appears in build logs. Find your app on the Dashboard, and select it. On the app's main page, select the build you want to check out. Open the Logs dropdown menu and click the Download logs button. " }, 
{ "title" : "Deleting a build log ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d54b1ca5-2a01-6e9b-a01b-5402226171d0_UUID-e00c64c7-7d2c-11ca-4a92-f92ea218e29d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Build logs \/ Deleting a build log ", 
"snippet" : "If necessary, you can delete the logs of any build on Bitrise. It can be handy if, for example, you do not want new team members to see potentially sensitive information that is displayed in previous logs. Not all team members are authorized to delete logs: only those with either Admin or Owner role...", 
"body" : "If necessary, you can delete the logs of any build on Bitrise. It can be handy if, for example, you do not want new team members to see potentially sensitive information that is displayed in previous logs. Not all team members are authorized to delete logs: only those with either Admin or Owner role in the team can do it. Deletion is final Be aware that you cannot undo deleting a log. Once you delete it, there is no way to recover the log file. Find your app on the Dashboard, and select it. On the app's main page, select the build you want to check out. Open the Logs dropdown menu and click the Delete Logs button. In the pop-up window, click Delete logs . " }, 
{ "title" : "Remote access ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access ", 
"snippet" : "Remote access allows users to connect to their build’s virtual machines via SSH or a screenshare app, which you can access from your build's Build details page. Remote access allows users to connect to their build’s virtual machines via SSH or a screenshare app. A failed build can be rebuilt with re...", 
"body" : "Remote access allows users to connect to their build’s virtual machines via SSH or a screenshare app, which you can access from your build's Build details page. Remote access allows users to connect to their build’s virtual machines via SSH or a screenshare app. A failed build can be rebuilt with remote access enabled to make troubleshooting a lot easier - for example, if the build logs don’t provide enough information about the error. You can rebuild both standalone builds and pipeline builds with remote access. Authorization Users who have the Testers\/QA roles on the app CANNOT use remote access. There are two ways to use remote access on our build machines: SSH : this is available for both Linux\/Docker based and MacOS machines. Screenshare : this is only available for MacOS machines. It uses the VNC system. With either method, you can access the build machine remotely during the build and for 10 minutes after the build is finished. If you would like to extend the availability of remote access, you can do so by adding a simple custom Script Step after the failed Step. Check out Extending the availability of remote access for more information. Build time When using remote access, 10 minutes will be added to your overall build time. " }, 
{ "title" : "Remote access with SSH ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-9806640d-bbfe-5c15-42ff-9e1823127dc3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with SSH ", 
"snippet" : "To access a Bitrise build machine with SSH, you will need a command line interface and the correct command and password: Open the app on Bitrise. On the main page of the app, find the build you want to re-run with remote access and click it. On the Rebuild button, click the downward arrow to open th...", 
"body" : "To access a Bitrise build machine with SSH, you will need a command line interface and the correct command and password: Open the app on Bitrise. On the main page of the app, find the build you want to re-run with remote access and click it. On the Rebuild button, click the downward arrow to open the dropdown menu. Select Rebuild with remote access . This starts a new build that you can access remotely. In the SSH section, find the Command and run it in a command line interface. And done! You should be able to access the virtual machine where your build is running. " }, 
{ "title" : "Remote access with screenshare ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-abd419ef-c81a-c262-0b74-b323fd352f49", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Remote access with screenshare ", 
"snippet" : "To access a Bitrise build machine with a screenshare app, you will need the correct username, password, and address, as well as a VNC screenshare app: macOS only Remote access with screenshare is only available for Workflows that run on a macOS-based stack . If the Workflow's stack (or in absence of...", 
"body" : "To access a Bitrise build machine with a screenshare app, you will need the correct username, password, and address, as well as a VNC screenshare app: macOS only Remote access with screenshare is only available for Workflows that run on a macOS-based stack . If the Workflow's stack (or in absence of Workflow-specific stacks, the app's default stack) is a Linux-based one, you won't see the screenshare instructions at all. Open the app on Bitrise. On the main page of the app, find the build you want to re-run with remote access and click it. On the Rebuild button, click the downward arrow to open the dropdown menu. Select Rebuild with remote access . This starts a new build that you can access remotely. Under the Screenshare option, find the required information: Address Username Password Open a VNC screenshare application. The simplest option is using the default Screen Sharing application on macOS. Fill out the required fields with the information from under the Screenshare option. And done! You should now be able to access the virtual machine where your build is running. " }, 
{ "title" : "Finding your files on the VM ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-60ad9f5a-5f27-9140-c586-3f89711dd777", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Finding your files on the VM ", 
"snippet" : "Once you successfully logged in to the Bitrise virtual machine that ran your build, you can dive into the files themselves to see what’s happening in real time. After Bitrise finished cloning your app on to the VM, you can always access it at the following location: \/Users\/Vagrant\/git...", 
"body" : "Once you successfully logged in to the Bitrise virtual machine that ran your build, you can dive into the files themselves to see what’s happening in real time. After Bitrise finished cloning your app on to the VM, you can always access it at the following location: \/Users\/Vagrant\/git " }, 
{ "title" : "Extending the availability of remote access ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-648c96b3-b37c-193b-abd3-e4c787882909_UUID-5215251f-27dd-9dce-d75a-a308c0ffe483", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Remote access \/ Extending the availability of remote access ", 
"snippet" : "Remote access is available while the build is running and for 10 minutes after the build is finished. If this is not enough, there’s a simple workaround to make sure remote access is available for a longer time. Add a Script Step after the Step that causes the build to fail. Toggle the Run if previo...", 
"body" : "Remote access is available while the build is running and for 10 minutes after the build is finished. If this is not enough, there’s a simple workaround to make sure remote access is available for a longer time. Add a Script Step after the Step that causes the build to fail. Toggle the Run if previous Step failed option on to ensure the Script Step always runs. Add a command to let the build “sleep” for a time specified in seconds: sleep 5400 This example lets the build run for 90 minutes. It should be no more than your build time limit, of course. That’s it. While the build is still running, you can look around on the virtual machine for the possible issues that caused it to fail. " }, 
{ "title" : "Debugging your build on your own machine ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine ", 
"snippet" : "If your build fails on Bitrise, we often recommend to try and run it locally. To debug: use a full clean git clone, and run the build on your machine with the Bitrise CLI. If your build fails on Bitrise, we often recommend to try and run it locally, on your machine. To do this, do the following: Do ...", 
"body" : "If your build fails on Bitrise, we often recommend to try and run it locally. To debug: use a full clean git clone, and run the build on your machine with the Bitrise CLI. If your build fails on Bitrise, we often recommend to try and run it locally, on your machine. To do this, do the following: Do a full clean git clone of your project’s online repository. Run the build on your machine with the Bitrise CLI. This helps to eliminate, among other things, a very common issue: that uncommitted or gitignored files are in your working directory but they haven’t been committed into your git repository online and therefore they are not available when Bitrise clones the repository for running the build. Other possible issues include: Code signing files are present on your local machine but not uploaded to Bitrise. A difference in the version of the tool(s) used for the build. Android projects If you still can’t reproduce the issue locally, you might also want to delete the $HOME\/.gradle (hidden) directory, to clear your Gradle caches. (Quick Terminal \/ Command Line command: rm -rf $HOME\/.gradle ). Run docker from a clean git clone If your project uses the Android\/Linux environment, you can download and use the exact same environment as the one your build is running in on bitrise.io . Ideally, you should first do a clean git clone and run docker from there, so that files which are in your .gitignore won’t affect the build, and the build can run the the same way as on bitrise.io . " }, 
{ "title" : "Testing with a full clean git clone ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-48c6d4cb-5a12-dda3-1ec2-c96eecf03955", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with a full clean git clone ", 
"snippet" : "Open your Terminal \/ Command Line interface on your machine. Type in: cd \/tmp Clone your repository with: git clone REPOURL .\/quick-repo-test --branch BRANCH-YOU-WANT-TO-TEST : git clone https:\/\/github.com\/bitrise-io\/bitrise.git .\/quick-repo-test --branch master Type cd .\/quick-repo-test. Run the co...", 
"body" : "Open your Terminal \/ Command Line interface on your machine. Type in: cd \/tmp Clone your repository with: git clone REPOURL .\/quick-repo-test --branch BRANCH-YOU-WANT-TO-TEST : git clone https:\/\/github.com\/bitrise-io\/bitrise.git .\/quick-repo-test --branch master Type cd .\/quick-repo-test. Run the commands you want to test, to build your project, or to open the project file from this directory. " }, 
{ "title" : "Testing with the Bitrise CLI ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-b6113724-a46c-9f4a-ecc0-40aaee7fa56b_UUID-62571106-3053-58d0-5a03-c6c96dc34432", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Debugging your build on your own machine \/ Testing with the Bitrise CLI ", 
"snippet" : "After doing a full clean git clone, run a build locally, using the Bitrise CLI . Install the Bitrise CLI . Download your app’s bitrise.yml file from bitrise.io . Run the build with: bitrise run <workflow-name> (for example, bitrise run primary ). This should help reproducing the issues in most cases...", 
"body" : "After doing a full clean git clone, run a build locally, using the Bitrise CLI . Install the Bitrise CLI . Download your app’s bitrise.yml file from bitrise.io . Run the build with: bitrise run <workflow-name> (for example, bitrise run primary ). This should help reproducing the issues in most cases, and allows you to attempt to debug them on your own machine. If the build succeeds under these conditions but still fails on Bitrise, contact our support! " }, 
{ "title" : "GitHub Checks with the Bitrise GitHub App ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App ", 
"snippet" : "Bitrise Checks is a GitHub app which provides an extended version of the classic status checks Bitrise sends back to GitHub. GitHub App integration If you use the Bitrise GitHub App to connect a Bitrise Workspace to a GitHub account or organization, you don't need to do anything described in this se...", 
"body" : "Bitrise Checks is a GitHub app which provides an extended version of the classic status checks Bitrise sends back to GitHub. GitHub App integration If you use the Bitrise GitHub App to connect a Bitrise Workspace to a GitHub account or organization, you don't need to do anything described in this section: GitHub Checks will automatically work for you to provide status updates. You can, however, continue to use the OAuth connection for your apps and use GitHub Checks with our GitHub App. The Bitrise GitHub App provides, among other things, an extended version of the classic build status checks that Bitrise sends back to GitHub. This extended version includes a Bitrise build summary and a check status. You can view the checks if you click the Details link of a pull request on GitHub. It unfolds the detailed build summary and build status our GitHub app attaches to your pull request on the Checks tab of GitHub. There can be three different check statuses: Success. Failed. Action required (in the case of manual pull request approval). To start using Bitrise Checks, you need to perform two separate actions: Install Bitrise Checks : Install our GitHub app to your repository. This is only necessary for GitHub.com users. GitHub Enterprise Server users who already set up the integration can proceed to enable Bitrise Checks. Enable Bitrise Checks : Turn on the feature on the Bitrise website and run a first build to be able to select Bitrise Checks in your branch protection rules. " }, 
{ "title" : "Installing Bitrise Checks ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-2b571156-f9c6-c80c-cba6-f739bc508abb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Installing Bitrise Checks ", 
"snippet" : "To use Bitrise Checks as a GitHub.com user, you need to install it as a GitHub app. If the Workspace that owns the Bitrise app has the Bitrise GitHub App connected and granted access to the Bitrise app's repository, you don't need to install or enable Bitrise Checks: you can just start using it. Git...", 
"body" : "To use Bitrise Checks as a GitHub.com user, you need to install it as a GitHub app. If the Workspace that owns the Bitrise app has the Bitrise GitHub App connected and granted access to the Bitrise app's repository, you don't need to install or enable Bitrise Checks: you can just start using it. GitHub.com users only If you are a GitHub Enterprise Server user, you don't need to do this procedure. To enable Bitrise Checks, you need to: Install the GitHub Enterprise Server integration . Enable GitHub Checks on Bitrise . Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations from the menu options. Click the install our Bitrise Checks app to your GitHub repository LINK under the toggle. Don’t toggle the switch just yet, since you first need to install Bitrise Checks. This link will take you to GitHub's Bitrise Checks installation page. On the Install Bitrise Checks page, select the user or GitHub Organization you want to add Bitrise Checks to. Select an option to install Bitrise Checks to: All repositories : Applies to all current and future repositories. Only select repositories : Select the repositories that you need. With this, you authorize Bitrise Checks to act on your behalf; for example, to check which repos you have access to, and use GitHub Checks to display check results. Click Install and authorize . In the GitHub prompt, provide your GitHub password. If all goes well, you land on the Bitrise Checks page of GitHub. You should see a blue note at the top-left corner of the page that Bitrise Checks has been successfully installed on your GitHub account. " }, 
{ "title" : "Enabling GitHub Checks on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-48573566-af19-901b-b099-d508faa5f4df", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Enabling GitHub Checks on Bitrise ", 
"snippet" : "Once Bitrise Checks is installed on GitHub, you need to enable GitHub Checks on your app’s page on Bitrise . Enabling GitHub Checks is limited Please note that only Workspace owners and app admins can enable this toggle on the App Settings page of the app. Open your app on Bitrise with a user that h...", 
"body" : "Once Bitrise Checks is installed on GitHub, you need to enable GitHub Checks on your app’s page on Bitrise . Enabling GitHub Checks is limited Please note that only Workspace owners and app admins can enable this toggle on the App Settings page of the app. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Integrations from the menu options. Scroll down and toggle on the GitHub Checks switch. Can't toggle the switch? If you can't toggle the switch, check out Can't enable GitHub Checks. Trigger a build. You can do so either automatically or manually. If you trigger a build manually, provide a specific commit hash to build. This build is necessary to perform the first Bitrise check. Once there is a finished check, you can select Bitrise Checks in your branch protection rules. And you’re done! Now any pull request you open to your app on GitHub will be validated with Bitrise Checks and a build will get automatically started on Bitrise (if the pull request trigger is properly set on Bitrise). You can easily get to your app’s page on Bitrise. If you click on the build summary or on View more details on Bitrise Checks link on the Checks tab, you’ll quickly get to your app’s Build page. " }, 
{ "title" : "Switching to Bitrise Checks from previous CI checks ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-bac16870-e3db-121c-f569-1f954bf0e1c5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Switching to Bitrise Checks from previous CI checks ", 
"snippet" : "If you have been already using status checks on pull requests prior to merging, it must have been the ci\/bitrise\/... check system. To be able to use Bitrise Checks, you have to manually switch from ci\/bitrise\/... to Bitrise to access those detailed checks. Let’s see how! Go to the Settings tab of yo...", 
"body" : "If you have been already using status checks on pull requests prior to merging, it must have been the ci\/bitrise\/... check system. To be able to use Bitrise Checks, you have to manually switch from ci\/bitrise\/... to Bitrise to access those detailed checks. Let’s see how! Go to the Settings tab of your repository. Click Branches on the side menu. Under Require status checks to pass before merging , you can see ci\/bitrise\/... as the selected checks system. Select Bitrise instead of ci\/bitrise\/... . Merge a pull request. " }, 
{ "title" : "Disabling GitHub Checks ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-ddaa1c9c-54be-24b2-0b5a-a2bb1db09225", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ Disabling GitHub Checks ", 
"snippet" : "You can easily disable GitHub Checks on Bitrise if you toggle the ENABLE GITHUB CHECKS switch to the left on the Settings page of the app. If you decide to uninstall Bitrise Checks from your GitHub account, you can click the Uninstall button on the Install GitHub Apps page....", 
"body" : "You can easily disable GitHub Checks on Bitrise if you toggle the ENABLE GITHUB CHECKS switch to the left on the Settings page of the app. If you decide to uninstall Bitrise Checks from your GitHub account, you can click the Uninstall button on the Install GitHub Apps page. " }, 
{ "title" : "GitHub Checks test summary ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-7fbe15ca-9a70-6578-9d92-3188b3616c81", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary ", 
"snippet" : "If your app’s repository contains any UI or unit tests, you can run those tests by using the appropriate testing Steps in your Workflow, and if you add the Deploy to Bitrise.io Step, your test results will be displayed in our Test Reports page and you can also see them on GitHub Checks, too. For exa...", 
"body" : "If your app’s repository contains any UI or unit tests, you can run those tests by using the appropriate testing Steps in your Workflow, and if you add the Deploy to Bitrise.io Step, your test results will be displayed in our Test Reports page and you can also see them on GitHub Checks, too. For example, if you have an Android app, you can use the Virtual Unit Testing for Android Step to be able to see all your test results on GitHub Checks. " }, 
{ "title" : "Step by Step error report ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-748b9398-ea2b-fb99-acac-950ba256a2b2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Step by Step error report ", 
"snippet" : "If a CI build runs, GitHub Checks' test summary displays the Steps' successful and failed tests in separate tabs on the left sidebar. If you click on a Step, a more detailed report summary comes up where a number of tests are listed with actionable error report. The build summary is available on the...", 
"body" : "If a CI build runs, GitHub Checks' test summary displays the Steps' successful and failed tests in separate tabs on the left sidebar. If you click on a Step, a more detailed report summary comes up where a number of tests are listed with actionable error report. The build summary is available on the Bitrise tab. Please note that GitHub Checks' test summary can only print detailed information of the following Steps: Xcode Test for iOS Android Unit Test iOS Device Testing Virtual Device Testing for Android Flutter Test You can export test results generated by any other Step to the Deploy to Bitrise.io Step in two ways: We strongly recommend using our Export test results to the Test reports add-on Step: this Step locates the test results based on your inputs. You can configure your own custom Script Step that creates and exports the necessary files. " }, 
{ "title" : "Checking the test results of a failed Step ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-f9efeae9-f090-9691-f697-c3aad1d71642", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Checking the test results of a failed Step ", 
"snippet" : "If your build has some failed tests, here is how to access them in GitHub Checks: Click the Bitrise Checks dropdown. Click on a Step and view the error report of the specific Step. You can click on other Steps from here or the build summary. The View more details on Bitrise Checks link takes you to ...", 
"body" : "If your build has some failed tests, here is how to access them in GitHub Checks: Click the Bitrise Checks dropdown. Click on a Step and view the error report of the specific Step. You can click on other Steps from here or the build summary. The View more details on Bitrise Checks link takes you to the build page on Bitrise. " }, 
{ "title" : "Re-running a build using GitHub checks ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-d96df176-4c67-0c25-4f8e-4c5b1b51419a_UUID-470cac57-a1b6-96ac-8d12-a1e551b61786", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ GitHub Checks with the Bitrise GitHub App \/ GitHub Checks test summary \/ Re-running a build using GitHub checks ", 
"snippet" : "Role requirement To re-run a build using GitHub Checks, your GitHub account must connected to Bitrise , and you need to have at least Developer role in your app's team. If these conditions are not met, re-run checks will fail without an error. For a complete list of user roles and role cheatsheets, ...", 
"body" : "Role requirement To re-run a build using GitHub Checks, your GitHub account must connected to Bitrise , and you need to have at least Developer role in your app's team. If these conditions are not met, re-run checks will fail without an error. For a complete list of user roles and role cheatsheets, check  User roles on app teams . If you would like to re-run a build using GitHub Checks: Open the pull request on GitHub where you would like to re-run checks. Open the Checks tab. Click Re-run all checks . " }, 
{ "title" : "Meercode ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-26aea079-d355-6b12-74ac-d92209f4b91d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode ", 
"snippet" : "The Meercode add-on was sunset on February 1, 2023. Check out Bitrise Insights as a free alternative to monitor your build, test, and credit data. Meercode deprecation notice The Meercode add-on was sunset on February 1, 2023. Check out Bitrise Insights as a free alternative to monitor your build, t...", 
"body" : "The Meercode add-on was sunset on February 1, 2023. Check out Bitrise Insights as a free alternative to monitor your build, test, and credit data. Meercode deprecation notice The Meercode add-on was sunset on February 1, 2023. Check out Bitrise Insights as a free alternative to monitor your build, test, and credit data. " }, 
{ "title" : "Integrating Meercode with Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise ", 
"snippet" : "To monitor your Bitrise builds with Meercode: An admin on the app’s team must enable the Meercode add-on for your app. Once the add-on is enabled, other team members on the app must authorize the add-on on their own account. Integrating Meercode with a Personal Access Token Previously, you could int...", 
"body" : "To monitor your Bitrise builds with Meercode: An admin on the app’s team must enable the Meercode add-on for your app. Once the add-on is enabled, other team members on the app must authorize the add-on on their own account. Integrating Meercode with a Personal Access Token Previously, you could integrate Meercode by using your Bitrise Personal Access Token on Meercode’s own website. This method no longer works! To monitor your builds with Meercode, you need the Meercode add-on. Enabling Meercode for an app Please note that only users with an admin role on the app's team can enable the add-on for an app. Read more about user roles: User roles on app teams" }, 
{ "title" : "Enabling the add-on as an admin ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-0aa15cb6-8411-a9d8-6cb0-27e3cd5c7a49", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Enabling the add-on as an admin ", 
"snippet" : "To enable the add-on for a specific app: Log in to your Bitrise account. On the Dashboard, find the app you need. Click on App settings . On the left, select Add-ons from the menu options. Below Meercode , click the Enable Add-on button. In the pop-up window, you can see what access rights the add-o...", 
"body" : "To enable the add-on for a specific app: Log in to your Bitrise account. On the Dashboard, find the app you need. Click on App settings . On the left, select Add-ons from the menu options. Below Meercode , click the Enable Add-on button. In the pop-up window, you can see what access rights the add-on needs. Click Enable Add-on to grant these rights. " }, 
{ "title" : "Authorizing the add-on as a user ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-8192dcfd-2723-4f68-c790-251e4d998bd2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Authorizing the add-on as a user ", 
"snippet" : "After an admin enables the Meercode add-on, each user on the app’s team must authorize the add-on on their own account. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Add-ons from the menu o...", 
"body" : "After an admin enables the Meercode add-on, each user on the app’s team must authorize the add-on on their own account. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Add-ons from the menu options. Next to Meercode , click the Open Add-on button. On the next page, you can see what access rights the add-on needs. Click Authorize Add-on to grant these rights. " }, 
{ "title" : "Revoking authorization on Meercode ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-c16a3fc1-bc27-4170-188c-5bad2f00925b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Revoking authorization on Meercode ", 
"snippet" : "Every user on an app’s team can revoke their own token to the Meercode add-on of an app. Go to the Security tab of your personal account. Scroll to Authorized add-ons . Click Revoke to revoke your access token to Meercode. Once you’ve revoked you token, you won’t have access to the add-on any more, ...", 
"body" : "Every user on an app’s team can revoke their own token to the Meercode add-on of an app. Go to the Security tab of your personal account. Scroll to Authorized add-ons . Click Revoke to revoke your access token to Meercode. Once you’ve revoked you token, you won’t have access to the add-on any more, unless you re-authorize the add-on. " }, 
{ "title" : "Disabling Meercode ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-1a119e09-64ab-c1b0-2a9f-ec84fc8bfefb_UUID-625d6a3e-e830-ba77-0336-6637ff8a6a58", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Integrating Meercode with Bitrise \/ Disabling Meercode ", 
"snippet" : "Only a Workspace admin can disable the Meercode add-on for an app’s members. Here is how: Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Add-ons from the menu options. Click Disable Add-on n...", 
"body" : "Only a Workspace admin can disable the Meercode add-on for an app’s members. Here is how: Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Add-ons from the menu options. Click Disable Add-on next to Meercode and confirm it in the pop-up window. Once it’s done, nobody can access the add-on any more, unless it is enabled again by an admin. " }, 
{ "title" : "Accessing build data and insights with Meercode ", 
"url" : "88887-41967-bitrise-docs/88887-43236-builds/88887-55314-build-data-and-troubleshooting.html#UUID-692f92e7-a1e6-3e47-4bf2-161c711554b2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Builds \/ Build data and troubleshooting \/ Meercode \/ Accessing build data and insights with Meercode ", 
"snippet" : "To monitor your builds: Log in to your Meercode account. Open Dashboard Tab from the left menu to see an overview of your running and completed builds. On the top of the page, you will see builds still in progress. You can monitor the current duration and estimated completion time. Below that, compl...", 
"body" : "To monitor your builds: Log in to your Meercode account. Open Dashboard Tab from the left menu to see an overview of your running and completed builds. On the top of the page, you will see builds still in progress. You can monitor the current duration and estimated completion time. Below that, completed builds are listed as cards. On every card, you can see the completion status and other information of the build for the last 10 runs. The Share button on the top-right corner allows you to create public links to view your dashboard. These secret links can be securely shared with your team members. To access build insights on Meercode: Open the Insights tab to access reports summarized from your historical build data. Use the filters on the top of the page to limit the results for a given date range, provider or organization. " }, 
{ "title" : "Code signing ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing ", 
"snippet" : "During a Bitrise build, you can digitally sign your app regardless of platform. Bitrise has dedicated Steps for both Android and iOS code signing procedures. Code signing is the process of digitally signing your app , as a means of guaranteeing that the code has not been altered since signing. It pr...", 
"body" : "During a Bitrise build, you can digitally sign your app regardless of platform. Bitrise has dedicated Steps for both Android and iOS code signing procedures. Code signing is the process of digitally signing your app , as a means of guaranteeing that the code has not been altered since signing. It provides security for deployment, and identifies the author. To deploy mobile apps to an online store, such as Google Play or the App Store, code signing is absolutely crucial. On Bitrise, we tried to make it as easy and convenient as possible. " }, 
{ "title" : "Android code signing ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-43270-android-code-signing.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing ", 
"snippet" : "Before you distribute your Android app through Google Play Store , your APK or AAB file must be digitally signed. You can use the dedicated Bitrise Step or perform code signing with a Gradle configuration. Before you distribute your app through Google Play Store , your APK file must be digitally sig...", 
"body" : "Before you distribute your Android app through Google Play Store , your APK or AAB file must be digitally signed. You can use the dedicated Bitrise Step or perform code signing with a Gradle configuration. Before you distribute your app through Google Play Store , your APK file must be digitally signed. You can specify the code signing configuration for your project in Android Studio or manually in your Gradle configuration. You can also use the Android Sign Step in your Bitrise Workflow Editor to have your APK signed automatically. " }, 
{ "title" : "Android code signing using the Android Sign Step ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-43270-android-code-signing.html#UUID-2e21aae0-9a1d-3a23-2566-b47b39517386", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing using the Android Sign Step ", 
"snippet" : "You can create a signed APK using the  Android Sign  Step in your Bitrise Workflow. This Step is configured to run if you have already uploaded your keystore file on the Code signing tab of the Workflow Editor. You can create a signed APK using the  Android Sign   Step in your Bitrise Workflow . Thi...", 
"body" : "You can create a signed APK using the  Android Sign  Step in your Bitrise Workflow. This Step is configured to run if you have already uploaded your keystore file on the Code signing tab of the Workflow Editor. You can create a signed APK using the  Android Sign   Step in your Bitrise Workflow . This Step is configured to run if you have already uploaded your keystore file to Bitrise. The  Android Sign  Step is not required if signing is configured in your project’s build.gradle file. If so, running the  Android Build Step (or the  Gradle Runner  Step) signs the output (APK or AAB) automatically. Nevertheless, we recommend that you use the  Android Sign  Step to sign your project in an easy and secure way. jarsign and apksigner APKs can be signed with either jarsigner or apksigner . For APKs, if you wish to use apksigner to sign your project, then in the Android Sign Step you have to first set the Enables apksigner input to true and leave the APK Signature Scheme input on automatic. This way apksigner checks your APK’s minimum and target SDK versions and chooses the required schemes. It signs your project with V1 scheme if your minimum supported version is low and it also signs with other schemes for newer systems. Please note that AAB files can only be signed with jarsigner. The Step uses jarsigner if it detects a file ending with  .aab Upload your keystore file to Bitrise . Add the Android Sign Step to your Workflow after the Step that builds your APK or AAB file. Bitrise uses the above Environment Variables and sets them as inputs into the respective fields of the  Android Sign  Step. Once the Step runs, it produces either a signed APK or an AAB. The signed APK or AAB is used in deploy Steps, for example, the  Google Play Deploy  Step or the  Deploy to Bitrise.io  Step. The latter deploys the APK\/AAB on the Artifacts  tab. You can also use Ship to deploy your app once you built an APK\/AAB file. Downloading your keystore file You can download your keystore file to the project directory using the  File Downloader  Step: - file-downloader:\n inputs:\n - source: $BITRISEIO_ANDROID_KEYSTORE_URL\n - destination: \"$HOME\/keystores\/my_keystore.jks\" #native android# If a Step requires the keystore file, make sure to include that Step AFTER the File Downloader Step. After this Step,  my_keystore.jks  will be available at  $HOME\/keystores\/my_keystore.jks . " }, 
{ "title" : "Android code signing with Android Studio ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-43270-android-code-signing.html#UUID-b9c15f8a-6a28-c2a8-f39f-6a59b3836210", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing with Android Studio ", 
"snippet" : "You can specify the code signing configuration for your project in Android Studio before running a Bitrise build. You will need a keystore file, a key alias and a key password. You can specify the code signing configuration for your project in Android Studio . You will need a keystore file, a key al...", 
"body" : "You can specify the code signing configuration for your project in Android Studio before running a Bitrise build. You will need a keystore file, a key alias and a key password. You can specify the code signing configuration for your project in Android Studio . You will need a keystore file, a key alias and a key password - have these ready before you start the procedure! Open Android Studio. Go to Project navigator . Select your project and open Module Settings . From Modules , select your module. On the Signing tab, fill out the signing information. In our example, we used the following values: Name: release Key alias: MyAndroidKey Key password: *** Store file: \/path\/to\/my\/keystore.jks Store password: *** Once you filled out the signing information, the signingConfigs block will be created in your module’s build.gradle file. On Bitrise, you just need to build the app, either with the Android Build or the Gradle Runner Step. " }, 
{ "title" : "Android code signing in Gradle ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-43270-android-code-signing.html#UUID-7841a1b6-ed2e-a81f-0f97-021feb1fb3ef", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Android code signing in Gradle ", 
"snippet" : "You can manually specify the code signing configuration in your Gradle configuration so that your app gets signed during the build process on Bitrise. You can manually specify the code signing configuration in your Gradle configuration so that your app gets signed during the build process. Open your...", 
"body" : "You can manually specify the code signing configuration in your Gradle configuration so that your app gets signed during the build process on Bitrise. You can manually specify the code signing configuration in your Gradle configuration so that your app gets signed during the build process. Open your module-level build.gradle file. Add the signingConfigs codeblock to your code and define the following entries specific to your project: storeFiled storePassword keyAlias keyPassword Attach the signing config to a build type. Build your app on Bitrise. For more information, check out how to configure Gradle to sign your app . Signing configuration in the build.gradle file In this example, your keystore path should have the same path locally and on bitrise.io to ensure the build can use the keystore file. android {\n \/\/ Make sure signingConfigs is defined before buildTypes.\n signingConfigs { \n \t release { \n \t keyAlias 'MyAndroidKey' \n keyPassword '***' \n storeFile file(\"\/path\/to\/my\/keystore.jks\") \n storePassword '***' \n } \n } \n \n\n buildTypes {\n release {\n \/\/ Use signing config for build type\n signingConfig signingConfigs.release\n \/\/ ...\n }\n }\n \/\/ ... Using Environment Variables in the build.gradle file You can avoid having the same keystore path locally and on bitrise.io by using configuration values and Environment Variables in the keystore path ( storeFile ) and in the keystore password. You can use the System.getenv(\"ENV_KEY\") file to access Environment Variables in the build.gradle file. Make sure to define the Environment Variables you use in your build.gradle file on bitrise.io as well. If your keystore path is $HOME\/keystores\/my_keystore.jks , then your build.gradle file should look like this: android { \n signingConfigs { \n \t release { \n \t keyAlias 'MyAndroidKey' \n keyPassword '***' \n storeFile file(System.getenv(\"HOME\") + \"\/keystores\/my_keystore.jks\")\n storePassword '***' \n } \n } ... You can then download the keystore file using the File Downloader Step , using the $HOME\/keystores\/my_keystore.jks as the destination path. If you use Environment Variables as keyPassword and storePassword on the Code signing tab, your build.gradle will look like this: android {\n signingConfigs {\n release {\n keyAlias System.getenv(\"BITRISEIO_ANDROID_KEYSTORE_ALIAS\")\n keyPassword System.getenv(\"BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD\")\n storeFile file(System.getenv(\"HOME\") + \"\/keystores\/my_keystore.jks\")\n storePassword System.getenv(\"BITRISEIO_ANDROID_KEYSTORE_PASSWORD\")\n }\n }\n \n buildTypes {\n release {\n \/\/ Use signing config for build type\n signingConfig signingConfigs.release\n \/\/ ...\n }\n }\n ... " }, 
{ "title" : "Downloading a keystore file from Bitrise during a build ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-43270-android-code-signing.html#UUID-722d5ed2-cf59-64e1-9f0c-141b582b4286", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ Android code signing \/ Downloading a keystore file from Bitrise during a build ", 
"snippet" : "You can define the location of the keystore file of an Android app in your build.gradle file. If the keystore file itself is missing from the location, you can use one of our file downloading Steps to download the keystore file from Bitrise and put it in the defined location. A keystore file is requ...", 
"body" : "You can define the location of the keystore file of an Android app in your build.gradle file. If the keystore file itself is missing from the location, you can use one of our file downloading Steps to download the keystore file from Bitrise and put it in the defined location. A keystore file is required for Android code signing. You can define the location of the keystore file of an Android app in your build.gradle file: Android code signing in Gradle. You can upload your keystore file to Bitrise and use the File Downloader Step to download the keystore file from Bitrise and put it in the location defined in the build.gradle file. The Android Sign Step If you use the Android Sign Step to sign your app, you don't need to download the keystore file. The Step will find the file: Android code signing using the Android Sign Step. Add the File Downloader Step to your Workflow. The Step should be added BEFORE any Step that requires the keystore file, such as Gradle Runner . Fill out the following two input fields: Download source url : Set the generated keystore URL you get when you upload your file to Bitrise ). Download destination path : Set the location of the keystore file as a relative path. This path should be the same as the keystore path already defined in your build.gradle file (for example, $HOME\/keystores\/project_release.keystore ). Add the Gradle Runner Step right after your file downloading Step. With that said, if you have successfully added the Steps to download your keystore file to the same location that you specified in your build.gradle file, you do not need the Android Sign Step in your workflow. Our Gradle Runner Step will sign and assemble your project. " }, 
{ "title" : "iOS code signing ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing ", 
"snippet" : "To install your iOS app on a new device or to distribute your app to App Store, you will need to provide code signing files. The code signing of iOS projects requires signing certificates issued by Apple and provisioning profile file(s) matching your project. To install your iOS app on a new device ...", 
"body" : "To install your iOS app on a new device or to distribute your app to App Store, you will need to provide code signing files. The code signing of iOS projects requires signing certificates issued by Apple and provisioning profile file(s) matching your project. To install your iOS app on a new device or to distribute your app to App Store , you will need to provide code signing files. The code signing of iOS projects requires: Signing certificates issued by Apple. Provisioning profile file(s) matching your project (team ID, bundle ID, and so on). Setting up iOS code signing on Bitrise Methods How it works When to use it Automatically managed provisioning profiles (recommended) You only need to upload the code signing certificate(s) to Bitrise and to establish an Apple Service connection (either via App Store Connect API key or through an Apple ID). Bitrise will download, create or renew the provisioning profile(s) and handle App ID and test device registration automatically. This is the recommended option for most apps. With this option, managing your provisioning profiles is seamless and it's much easier to set up your Workflows. Manually managed provisioning profiles You need to upload the code signing certificate(s) and also the provisioning profile(s) to Bitrise and keep the provisioning profile(s) updated with your iOS project. Choose this option if: You cannot connect your App Store Connect API key or Apple ID to Bitrise. You store or handle your code signing files in a unique way. You wish to use code signing files from multiple Apple Developer Accounts. You might also prefer this option if you are using an account with Apple Developer Enterprise Program. In this case only Apple ID-based authentication is supported. This has certain limitations: for example, needs to be renewed every 30 days. " }, 
{ "title" : "Collecting and exporting code signing files with codesigndoc ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc ", 
"snippet" : "The open source codesigndoc tool runs a clean Xcode Archive on your Mac, and analyzes the generated archive file. It collects the code signing settings that Xcode used during the archive process, and prints the list of the required code signing files. You can also search for, export and upload these...", 
"body" : "The open source codesigndoc tool runs a clean Xcode Archive on your Mac, and analyzes the generated archive file. It collects the code signing settings that Xcode used during the archive process, and prints the list of the required code signing files. You can also search for, export and upload these files using codesigndoc. The open source codesigndoc tool runs a clean Xcode Archive on your Mac, and analyzes the generated archive file. It collects the code signing settings that Xcode used during the archive process, and prints the list of the required code signing files. You can also search for, export and upload these files using codesigndoc . If your project contains UITest targets, codesigndoc can scan for those, too. It runs the xcodebuild build-for-testing action to create a test-Runner.app , and exports the necessary code signing files. " }, 
{ "title" : "Collecting and uploading the files with codesigndoc ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-e3e1f1f9-1d57-0ddf-22ae-75709e9e60a1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Collecting and uploading the files with codesigndoc ", 
"snippet" : "You can use codesigndoc for: Xcode projects. The app does not have to be a native iOS app: you can use the tool with an app built with a third-party framework, such as Flutter, if you have an .xcodeproj or .xcworkspace file. You can install the latest version of codesigndoc with a simple one-liner o...", 
"body" : "You can use codesigndoc for: Xcode projects. The app does not have to be a native iOS app: you can use the tool with an app built with a third-party framework, such as Flutter, if you have an .xcodeproj or .xcworkspace file. You can install the latest version of codesigndoc with a simple one-liner or you can manually download and install the specific version you want to use: In the below example, we’ll use the one-liners. Open the Terminal . Go to your project’s folder. Enter the appropriate one-liner command, depending on your project type. For a Xcode project: bash -l -c \"$(curl -sfL https:\/\/raw.githubusercontent.com\/bitrise-io\/codesigndoc\/master\/_scripts\/install_wrap-xcode.sh)\" The tool will automatically scan your project and look for a .xcodeproj or .xcworkspace file and do the rest. If the scanner does not find the files, open your Finder.app and drag-and-drop your project’s .xcodeproj or .xcworkspace file into the command line in your Terminal. Once the code signing files are collected, codesigndoc will ask if you wish to upload the files to Bitrise: Do you want to upload the provisioning profiles and certificates to Bitrise? [yes\/no] : If you wish to upload the files with codesigndoc , type yes and press Enter . Provide your Bitrise access token: Please copy your personal access token to Bitrise.\n(To acquire a Personal Access Token for your user, sign in with that user on bitrise.io,\ngo to your Account Settings page, and select the Security tab on the left side.) : Personal access tokensSelect the Bitrise project as a target for the collected files: Fetching your application list from Bitrise...\nSelect the app which you want to upload the provisioning profiles\nPlease select from the list:\n That’s all, you are done! Automatic code signing asset management For automatic code signing asset management, we recommend you use one of our code signing and building Steps : Xcode Archive and Export for iOS . Export for iOS and tvOS Xcode Archive . Xcode build for testing for iOS . You can also install and run codesigndoc manually. For more information, check out the tool’s Readme ! " }, 
{ "title" : "Scanning for UITest targets ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-857b49b1-2d30-83de-f51a-c55b614f4db9", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Scanning for UITest targets ", 
"snippet" : "If your Xcode project has UITest targets, you can use codesigndoc to export the necessary code signing files and generate an .xctestrun file. You need to do this if you want to run UI tests on real devices with the help of Bitrise - for example, with the iOS Device Testing Step. Make sure you have a...", 
"body" : "If your Xcode project has UITest targets, you can use codesigndoc to export the necessary code signing files and generate an .xctestrun file. You need to do this if you want to run UI tests on real devices with the help of Bitrise - for example, with the iOS Device Testing Step. Make sure you have a scheme that has a valid UITest target that is enabled. Open the Terminal . Use our one-liner to launch the scanner and export the required code signing files: bash -l -c \"$(curl -sfL https:\/\/raw.githubusercontent.com\/bitrise-tools\/codesigndoc\/master\/_scripts\/install_wrap-xcode-uitests.sh)\" This command runs the xcodebuild build-for-testing action to create a UITest runner .app file, and exports the necessary code signing files. Upload the files to Bitrise with codesigndoc. " }, 
{ "title" : "Troubleshooting the UITest scanner ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ec0d2ec2-2250-598d-e765-ebff2386b661", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Troubleshooting the UITest scanner ", 
"snippet" : "If the UITest scanner cannot find the desired scheme, follow these steps: Make sure your scheme is valid for running a UITest. It has to contain a UITest target that is enabled to run. Refresh your project settings: Select the Generic iOS Device target for your scheme in Xcode. Clean your project: ⌘...", 
"body" : "If the UITest scanner cannot find the desired scheme, follow these steps: Make sure your scheme is valid for running a UITest. It has to contain a UITest target that is enabled to run. Refresh your project settings: Select the Generic iOS Device target for your scheme in Xcode. Clean your project: ⌘ Cmd + ↑ Shift + K . Run a build for testing: ⌘ Cmd + ↑ Shift + U . " }, 
{ "title" : "Manually installing and using codesigndoc ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-ee2191b2-1b18-41b3-0920-6c39fdb8d03e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Manually installing and using codesigndoc ", 
"snippet" : "With manual install, you can specify which version of codesigndoc you want to use. Unlike with the one-liners used above, the manual install does not automatically run the scan command in the folder you use it in: it merely installs the tool. Check out the available versions on the releases page of ...", 
"body" : "With manual install, you can specify which version of codesigndoc you want to use. Unlike with the one-liners used above, the manual install does not automatically run the scan command in the folder you use it in: it merely installs the tool. Check out the available versions on the releases page of the codesigndoc tool. Download the release you want by running a curl command: Note: replace the VERSIONNUMBER with the actual number of the codesigndoc version you want. curl -sfL https:\/\/github.com\/bitrise-io\/codesigndoc\/releases\/download\/VERSIONNUMBER\/codesigndoc-Darwin-x86_64 > .\/codesigndoc Make the downloaded binary executable: chmod +x .\/codesigndoc Run the scan command any time you wish: ## Xcode scanner\n.\/codesigndoc scan xcode\n\n## Xcode project scanner for UI test targets\n.\/codesigndoc scan xcodeuitests\n " }, 
{ "title" : "Best practices of using codesigndoc ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-ec7133bc-e7f9-8299-9a3b-278e4d33beff_UUID-cdf21997-fc3d-7f9a-0fc5-17c0409684a2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Collecting and exporting code signing files with codesigndoc \/ Best practices of using codesigndoc ", 
"snippet" : "You get the most accurate result if you run codesigndoc on the same state of your repository\/code which is available after a clean git clone , as that will be the state of the code after the build server checks it out (for example, you might have files on your Mac which are in .gitignore , so it exi...", 
"body" : "You get the most accurate result if you run codesigndoc on the same state of your repository\/code which is available after a clean git clone , as that will be the state of the code after the build server checks it out (for example, you might have files on your Mac which are in .gitignore , so it exists on your Mac but not in the repository or after a git clone on a new Mac). So, for the best results, we recommend you to: Do a clean git clone of your repository (into a new directory) on your Mac. Run codesigndoc in this directory (not in the directory where you usually work on the project). We also recommend generating an IPA on your local machine first, and run codesigndoc after that . The reason is that Xcode might download or update profiles in the background during the IPA export. If you run codesigndoc after you exported a IPA from Xcode, codesigndoc will able to collect all the files. " }, 
{ "title" : "iOS code signing with automatic provisioning ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning ", 
"snippet" : "Automatic code signing means automatically managing the provisioning profiles that are available on your Apple Developer Portal account. If you set up some form of authentication to your Apple account, Bitrise can download and install the provisioning profile for your app during the build process. O...", 
"body" : "Automatic code signing means automatically managing the provisioning profiles that are available on your Apple Developer Portal account. If you set up some form of authentication to your Apple account, Bitrise can download and install the provisioning profile for your app during the build process. On Bitrise, we're aiming to make iOS code signing as simple as possible for you. As such, we've done our best to automate a lot of the process. Several of our Steps have a built-in option for automatic code signing management to make configuration a lot more streamlined. Automatic code signing in this context means automatically managing the provisioning profiles that are available on your Apple Developer Portal account. If you set up some form of authentication to your Apple account, Bitrise can download and install the provisioning profile for your app during the build process. To use this feature, you need to: Upload the code signing certificates to Bitrise. Connect your Apple Developer Portal account to Bitrise either via Apple ID or via the App Store Connect API . Use one of the Steps that support automatically managing code signing assets. " }, 
{ "title" : "Uploading iOS code signing certificates to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-b18b6783-91e1-6655-e348-55aa94c78b4b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Uploading iOS code signing certificates to Bitrise ", 
"snippet" : "All iOS code signing methods require you to export and upload your iOS code signing certificates to Bitrise. Generating code signing files If you don't have the necessary code signing files ready, you can generate new files: Generating iOS code signing filesTo upload the certificates to Bitrise, fir...", 
"body" : "All iOS code signing methods require you to export and upload your iOS code signing certificates to Bitrise. Generating code signing files If you don't have the necessary code signing files ready, you can generate new files: Generating iOS code signing filesTo upload the certificates to Bitrise, first you need to export the files in the .p12 file format. Once you successfully exported the files, you need to upload them to Bitrise. You have two options: Via an API call . Uploading it manually. This guide focuses on this option. Upload the distribution AND the development signing certificates We strongly recommend uploading BOTH the development and distribution signing certificates for your project. If you don't have an uploaded development signing certificate, Steps with automatic provisioning options will generate one on the fly every time you start a build. This can eventually lead to reaching the maximum number of certificates, blocking you from starting new builds. To export your certificates and upload them to Bitrise in the Workflow Editor: Make sure you have your .p12 certificates exported and ready. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select the Code signing menu option. Click Add .p12 file to add a certificate. In the dialog box, either drag and drop the file into the Select a code signing certificate section, or click the same section and select the file you want to upload. Certificate password If your certificate is protected by a password, you need to set the password here, too. When done, click Continue . Check the summary and if everything is okay, click Add certificate . " }, 
{ "title" : "Apple services authentication for automatic provisioning ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-9933ca45-16f5-f843-cd89-fc60c14a53a6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Apple services authentication for automatic provisioning ", 
"snippet" : "To take advantage of the Bitrise Steps that offer built-in, automated iOS code signing options, you need to set up Apple service authentication . For these Steps, you have two options. Apple services authentication options for iOS code signing Authentication method How it works When to use API key a...", 
"body" : "To take advantage of the Bitrise Steps that offer built-in, automated iOS code signing options, you need to set up Apple service authentication . For these Steps, you have two options. Apple services authentication options for iOS code signing Authentication method How it works When to use API key authentication (recommended) You connect your App Store Connect account to Bitrise using an API key. We recommend using this option unless you are using an account with Apple Developer Enterprise Program. If you do not receive the option to create an API key and the request access is greyed out, you need to contact your account holder to accept a license agreement with Apple to use API authentication. Apple ID authentication You connect your Apple ID to Bitrise. If two-factor authentication is enabled on your Apple account, you will have to provide the App-specific password during this process. Your authentication expires in 30 days and you will have to refresh the connection. You should only use this solution if: You cannot access API key for any reason. you are using an account with Apple Developer Enterprise Program. You can also consider using manual provisioning . " }, 
{ "title" : "Configuring the Steps for automatic provisioning ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-a0f5813d-5710-fc06-5bfe-f23e3eae994e_UUID-50ad06ea-5990-80ef-ee00-17290556beec", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with automatic provisioning \/ Configuring the Steps for automatic provisioning ", 
"snippet" : "There are two ways to handle automatic provisioning on Bitrise: Using the official Xcode Steps that can both manage code signing files and build your app. Using the Manage iOS Code Signing Step. Table 22, “ describes the use cases for the two methods. To be able to configure the necessary Steps, che...", 
"body" : "There are two ways to handle automatic provisioning on Bitrise: Using the official Xcode Steps that can both manage code signing files and build your app. Using the Manage iOS Code Signing Step. Table 22, “ describes the use cases for the two methods. To be able to configure the necessary Steps, check out either: Using the Xcode StepsUsing the Manage iOS Code Signing StepDon't use the Certificate and profile installer Step If you use automatic provisioning, you never need to use the Certificate and profile installer Step. Steps with automatic provisioning options Steps How they work When to use Xcode Steps: Xcode Archive and Export for iOS Export iOS and tvOS Xcode Archive Xcode build for testing for iOS These Steps set up code signing in your Xcode project automatically with nearly zero configuration. We recommend using these Steps in most scenarios. Manage iOS Code Signing Step This Step will set up code signing in your Xcode project before running a build. You can use this dedicated Step if: You are building the app from script or fastlane. You have a cross-platform project. For example, React Native, Flutter, Ionic or Cordova. You are building a macOS app. " }, 
{ "title" : "iOS code signing with manual provisioning ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-d922bd20-547e-46fc-320e-d0b8f0516e91", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing with manual provisioning ", 
"snippet" : "To manage your code signing files manually, you need to upload your .p12 signing certificates and the app's provisioning profiles to Bitrise. There are multiple ways to do this. To manage your code signing files manually, you need to upload your .p12 signing certificates and the app's provisioning p...", 
"body" : "To manage your code signing files manually, you need to upload your .p12 signing certificates and the app's provisioning profiles to Bitrise. There are multiple ways to do this. To manage your code signing files manually, you need to upload your .p12 signing certificates and the app's provisioning profiles to Bitrise. You always need to upload at least a Developer certificate and a Development type provisioning profile! That is necessary for our Xcode Steps to be able to test and build your apps properly. Generating code signing files If you don't have the necessary code signing files ready, you can generate new files: Generating iOS code signing filesTo upload the code signing files to Bitrise, first you need to export the files in the .p12 file format. Once you successfully exported the files, you need to upload them to Bitrise. You have two options: Via an API call . Uploading it manually to Bitrise. This guide focuses on this option. To manually upload your code signing files to Bitrise: Make sure you have your .p12 certificates and provisioning profiles exported and ready. Check out Exporting iOS code signing files for more information. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Code signing from the menu. Add your files: To add a certificate, click the Add .p12 file button. In the dialog box, upload the file and, if required, provide the password for the certificate. To add provisioning profiles, click the Add profile(s) button. In the dialog box, upload the file(s). Make sure you have the Certificate and profile installer Step in your app’s Workflow . You can check it on the Workflow tab of the Workflow Editor . Please note that these Steps must be BEFORE the Steps that archive and export your app (for example, Xcode Archive & Export for iOS ) in your Workflow. " }, 
{ "title" : "Creating a signed IPA for Xcode projects ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-e5969215-aa49-6397-94af-4dec8be98576", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Creating a signed IPA for Xcode projects ", 
"snippet" : "You can easily create a signed IPA file for your Xcode project with Bitrise if you have your Apple connection set up correctly and you made code signing files available to your builds. Overview on iOS code signing in Bitrise For a comprehensive overview on what Steps are available for code signing a...", 
"body" : "You can easily create a signed IPA file for your Xcode project with Bitrise if you have your Apple connection set up correctly and you made code signing files available to your builds. Overview on iOS code signing in Bitrise For a comprehensive overview on what Steps are available for code signing asset management, visit the iOS code signing page . You can easily create a signed IPA file for your Xcode project with Bitrise. You have set up Apple service connection on Bitrise. Your code signing files are managed correctly . You set the relevant inputs of our Xcode Archive and Export for iOS Step . Upload the distribution AND the development signing certificates We strongly recommend uploading BOTH the development and distribution signing certificates for your project. If you don't have an uploaded development signing certificate, Steps with automatic provisioning options will generate one on the fly every time you start a build. This can eventually lead to reaching the maximum number of certificates, blocking you from starting new builds. If you’re all set, proceed to setting up IPA export in your Workflow . Workflow Editor bitrise.yml Make sure the necessary code signing files have been collected and uploaded . Make sure you have the Xcode Archive & Export for iOS Step in your Workflow. Set the Distribution method input of the Step. The options are: auto-detect - Please note that this option is deprecated and will be removed. We do not recommend using it. app-store : Choose this if you want to deploy the app to the App Store. Requires a Distribution certificate and an App Store provisioning profile. ad-hoc : Choose this if you want to deploy the app to ad-hoc testers. Requires a Distribution certificate and an Ad Hoc provisioning profile. enterprise : Choose this if you have an Apple Enterprise account and want to use that to distribute your app. development : Choose this for internal testing. Requires a Developer certificate and a Development provisioning profile. Set the Automatic code signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Save the Workflow, and start a new build. Make sure all the necessary code signing files are available for your build. Open the bitrise.yml file of your app. Make sure you have the xcode-archive Step in your Workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n Set the distribution_method input to the correct value. The available options are: app-store : Choose this if you want to deploy the app to the App Store. Requires a Distribution certificate and an App Store provisioning profile. ad-hoc : Choose this if you want to deploy the app to ad-hoc testers. Requires a Distribution certificate and an Ad Hoc provisioning profile. enterprise : Choose this if you have an Apple Enterprise account and want to use that to distribute your app. development : Choose this for internal testing. Requires a Developer certificate and a Development provisioning profile. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - distribution_method: development Set the automatic_code_signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - automatic_code_signing: api-key\n - distribution_method: development That’s all. Xcode will automatically select the right signing files based on your project’s Bundle ID and Team ID settings, and the export method you set. " }, 
{ "title" : "Signing an IPA file with a different team’s code signing file ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-e5969215-aa49-6397-94af-4dec8be98576_UUID-340d099b-119d-d223-51d1-e68e201194e2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Creating a signed IPA for Xcode projects \/ Signing an IPA file with a different team’s code signing file ", 
"snippet" : "You might want to sign the IPA file with a different team’s code signing files. For example: If you use your company’s code signing files for internal builds, but your client’s code signing files are used for App Store distribution. If you use Apple ID for automatic code signing and the Apple ID bel...", 
"body" : "You might want to sign the IPA file with a different team’s code signing files. For example: If you use your company’s code signing files for internal builds, but your client’s code signing files are used for App Store distribution. If you use Apple ID for automatic code signing and the Apple ID belongs to multiple teams, use The Developer Portal team to use for this export input to specify which team should be used for automatic code signing asset management. To do so: Make sure the right code signing files of the new development team are uploaded to Bitrise. Set the The Developer Portal team to use for this export option as well (in addition to the Distribution method ). Set the Distribution method . " }, 
{ "title" : "Signing an IPA with multiple code signing identities ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-85371564-20bc-a4cb-9a8c-9cf56a75246e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Signing an IPA with multiple code signing identities ", 
"snippet" : "You can create multiple IPA files with different code signing identities within a single Bitrise build. You just need to make sure the required code signing files are available and use the Export iOS and tvOS Xcode archive Step. Overview on iOS code signing asset management For a comprehensive overv...", 
"body" : "You can create multiple IPA files with different code signing identities within a single Bitrise build. You just need to make sure the required code signing files are available and use the Export iOS and tvOS Xcode archive Step. Overview on iOS code signing asset management For a comprehensive overview on what Steps are available for code signing asset management, visit the iOS code signing page . You can create multiple IPA files with different code signing identities within a single Bitrise build. During the development of your iOS app you will need multiple types of distributions for different purposes, such as internal testing or deployment to the App Store. The good news is that this does not require setting up two separate workflows on bitrise.io . In this example we’ll be setting up a Workflow to create two signed IPA files: one with the development and one with the app-store export method. Advanced configuration options The procedure lists the bare minimum requirements to configure these Steps to export Xcode archives. Check out the Step in the Workflow Editor or the Step's step.yml in GitHub to see all potential configuration options, including but not limited to overriding the Bitrise-managed automatic code signing options, recompiling from and including bitcode, or using a specific .plist file to configure exporting. Workflow Editor bitrise.yml Make sure all the necessary code signing files are available for your build. Make sure you have the Xcode Archive & Export for iOS Step in your Workflow. In the list of input variables, navigate to Distribution method and select development from the dropdown menu. Set the Automatic code signing method input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Add the Export iOS and tvOS Xcode archive Step to your Workflow. This Step reuses the archive generated by the Xcode Archive and Export for iOS Step and does a second export from the archive. Set the Automatic code signing method input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization. apple-id if you use Apple ID authorization. In the list of input variables, navigate to Distribution method and select app-store from the dropdown menu. Make sure all the necessary code signing files are available for your build. Open the bitrise.yml file of your app. Make sure you have the xcode-archive Step in your Workflow. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n Set the distribution_method input to development . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - distribution_method: development Set the automatic_code_signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - automatic_code_signing: api-key\n - distribution_method: development Add the export-xcarchive Step to your Workflow. This Step reuses the archive generated by the xcode-archive Step and does a second export from the archive. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - automatic_code_signing: api-key\n - distribution_method: development\n - export-xcarchive:\n inputs:\n Set the automatic_code_signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization. apple-id if you use Apple ID authorization. my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - automatic_code_signing: api-key\n - distribution_method: development\n - export-xcarchive:\n inputs:\n - automatic_code_signing: api-key\n Set the distribution_method input to app-store . my-workflow:\n steps:\n - xcode-archive:\n inputs:\n - automatic_code_signing: api-key\n - distribution_method: development\n - export-xcarchive:\n inputs:\n - automatic_code_signing: api-key\n - distribution_method: app-store\n And you’re done! Feel free to add multiple Export iOS and tvOS Xcode archive Steps to your Workflows to create multiple different signed .ipa files if necessary. " }, 
{ "title" : "iOS code signing for Ionic and Cordova projects ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects ", 
"snippet" : "Bitrise supports both manual and automatic provisioning for the iOS code signing of Ionic and Cordova apps as well. Naturally, Bitrise supports iOS applications built with either Ionic or Cordova . However, the code signing process is slightly different compared to a native Xcode project. Bitrise su...", 
"body" : "Bitrise supports both manual and automatic provisioning for the iOS code signing of Ionic and Cordova apps as well. Naturally, Bitrise supports iOS applications built with either Ionic or Cordova . However, the code signing process is slightly different compared to a native Xcode project. Bitrise supports both manual and automatic provisioning for Ionic and Cordova apps as well - and once again, the processes are somewhat different. " }, 
{ "title" : "Ionic\/Cordova code signing with manual code signing asset management ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-4b7a0eb0-df0a-a774-c13a-704fbd6a4241", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with manual code signing asset management ", 
"snippet" : "Generate the native Xcode project locally from your Ionic or Cordova project by calling cordova platform add ios or ionic cordova platform add ios . Upload the files to bitrise.io . Make sure you have the Certificate and profile installer Step in your Workflow. Add the Generate cordova build configu...", 
"body" : "Generate the native Xcode project locally from your Ionic or Cordova project by calling cordova platform add ios or ionic cordova platform add ios . Upload the files to bitrise.io . Make sure you have the Certificate and profile installer Step in your Workflow. Add the Generate cordova build configuration Step to your Workflow. It must come after the Certificate and profile installer Step. Fill in the required inputs for the Step. Please note that both the Code Signing Identity and the Provisioning Profile are required inputs for iOS apps even though they are not marked as such. Build configuration : you can set it to either debug or release . Code Sign Identity : enter a Developer or a Distribution identity. Provisioning Profile : enter the appropriate provisioning profile. Packaging Type : this controls what type of build is generated by Xcode. Set the type of code signing you need. Add the Cordova archive or the Ionic archive step to your workflow. Fill in the required inputs. The Platform input needs to be set to: device . The Build command configuration input must match the Build configuration input of the Generate cordova build configuration Step. This Step must come after the Generate cordova build configuration Step in the Workflow. Run your build! " }, 
{ "title" : "Ionic\/Cordova code signing with automatic code signing asset management ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-4f377ae9-829a-795d-66d2-5474a7bd61aa_UUID-795d5e81-95ea-08e8-67b3-15c270197945", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ iOS code signing for Ionic and Cordova projects \/ Ionic\/Cordova code signing with automatic code signing asset management ", 
"snippet" : "Make sure your .p12 signing certificates are uploaded to bitrise.io . Add the Cordova prepare or the Ionic prepare Step to your Workflow. These Steps call the platform rm and platform add commands. Add the Manage iOS Code Signing Step to your Workflow. If you have both the Certificate and Profile In...", 
"body" : "Make sure your .p12 signing certificates are uploaded to bitrise.io . Add the Cordova prepare or the Ionic prepare Step to your Workflow. These Steps call the platform rm and platform add commands. Add the Manage iOS Code Signing Step to your Workflow. If you have both the Certificate and Profile Installer and the Manage iOS Code Signing Steps in your Workflow, your build might encounter unexpected issues. The Step will export: The project’s development team. The installed codesign identity’s name. The installed provisioning profile. One code signing Step only If you have both the Certificate and profile installer and the Manage iOS Code Signing Steps in your Workflow, your build might encounter unexpected issues. Select the Apple service connection method (based on the Apple service you have set up in Bitrise ) and the Distribution method . Add the Generate cordova build configuration Step to your Workflow. Configure the Step to use the code signing settings exported by the Manage iOS Code Signing Step: Development distribution example : - generate-cordova-build-configuration:\n inputs:\n - development_team: $BITRISE_DEVELOPER_TEAM \n - package_type: development \n - code_sign_identity: iPhone Developer\n - configuration: debug\n Production distribution example : - generate-cordova-build-configuration:\n inputs:\n - development_team: $BITRISE_DEVELOPER_TEAM \n - package_type: app-store \n - code_sign_identity: iPhone Developer\n - configuration: release\n Add the Cordova Archive or the Ionic Archive Step to your Workflow. Fill in the required inputs. The Platform input needs to be set to: device . The Build command configuration input must match the Build configuration input of the Generate cordova build configuration Step. Set the Should remove platforms as prepare step? to false . This is crucial: it ensures the Step will not remove and re-add the platform of the native projects generated in the Cordova prepare or the Ionic prepare Step. Run your build! " }, 
{ "title" : "Protecting your code signing files ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-ffcbaa59-7f2e-d445-ebf8-de8bc39fcc18", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Protecting your code signing files ", 
"snippet" : "You can set your code signing files to Protected mode: this means they cannot be downloaded from your bitrise.io account. Your builds will be able to use these protected files but no one will be able to reveal them and there is no way to overwrite them: you can only delete the files and upload new o...", 
"body" : "You can set your code signing files to Protected mode: this means they cannot be downloaded from your bitrise.io account. Your builds will be able to use these protected files but no one will be able to reveal them and there is no way to overwrite them: you can only delete the files and upload new ones instead. You can set your code signing files to Protected mode: this means they cannot be downloaded from your bitrise.io account. Your builds will be able to use these protected files but no one will be able to reveal them and there is no way to overwrite them: you can only delete the files and upload new ones instead. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the left, select Code signing from the menu. Locate the file you wish to make protected and open the dropdown menu by clicking the ellipsis button on the right. Select the Make protected option. A dialog box will warn you that this change is irreversible once you confirm it. You do not need to separately save your changes. Once you are done, your only option in the file’s dropdown menu will be Delete . " }, 
{ "title" : "Generating iOS code signing files ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files ", 
"snippet" : "You can generate iOS code signing files either with Xcode or on the Apple Developer Portal. You’ll need two kinds of files to sign your app: certificates and provisioning profiles. The certificates - development or distribution - are the guarantee that you, the named developer, built this code, that...", 
"body" : "You can generate iOS code signing files either with Xcode or on the Apple Developer Portal. You’ll need two kinds of files to sign your app: certificates and provisioning profiles. The certificates - development or distribution - are the guarantee that you, the named developer, built this code, that you are a member of the developer program, and that Apple have issued you with a certificate to do so. To get a certificate, you need to generate a Certificate Signing Request with Keychain Access and send it to Apple. This will create a public\/private key pair for you if you don’t have one already. Apple will then verify the information, and create a certificate for you. Provisioning is the process of preparing and configuring an app to launch on devices and to use app services. Development provisioning profiles holds the device identifiers (UUID) that is eligible to run your app. Distribution provisioning profiles can include App Store profiles that allow you to distribute your app to the App Store. Ad-hoc profiles are good for distributing to your testers. " }, 
{ "title" : "Generating a code signing certificate with Xcode ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-9e82b1b1-5143-89c0-6195-4b1cbc410574", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate with Xcode ", 
"snippet" : "First you have to add your Apple ID to Accounts preferences in Xcode. If you are already done with this, you can skip to Selecting your Apple ID . Start Xcode. Select Xcode > Preferences from the navigation bar. At the top of the window select Accounts . Click on the + on the lower left corner and s...", 
"body" : "First you have to add your Apple ID to Accounts preferences in Xcode. If you are already done with this, you can skip to Selecting your Apple ID . Start Xcode. Select Xcode > Preferences from the navigation bar. At the top of the window select Accounts . Click on the + on the lower left corner and select Add Apple ID… A dialog will appear. Add your Apple ID and your password, then select Sign in . If you don’t have an account you can create your Apple ID by selecting Create Apple ID . Select your Apple ID and your team from the right side bar, then click on View Details… . A dialog will appear where you will see your code signing identities and the provisioning profiles. Under the signing identities locate the iOS Development and iOS Distribution profiles. If you have not created them you will see a Create button next to them. Simply select it and Xcode will issue and download your code signing identities for you. When to click Reset next to Code Signing Identities If you already have Code Signing Identities issued, you will see a Reset button next to them. You can issue new certificates with it, that Xcode will generate and download, however note that this will invalidate your previous certificate, so only do this if you’ve lost those files or if you know what you are doing! " }, 
{ "title" : "Generating a code signing certificate manually ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e62d3745-3248-323a-5d7a-837326bb5c86", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a code signing certificate manually ", 
"snippet" : "Open your Keychain Access app on macOS. Select Keychain Access > Certificate Assistant > Request a Certificate From a Certificate Authority… Fill in the User’s Email Address and the Common Name and select Saved to Disk . Click on Continue and save the generated certSigningRequest file locally. Go to...", 
"body" : "Open your Keychain Access app on macOS. Select Keychain Access > Certificate Assistant > Request a Certificate From a Certificate Authority… Fill in the User’s Email Address and the Common Name and select Saved to Disk . Click on Continue and save the generated certSigningRequest file locally. Go to https:\/\/developer.apple.com and log in to your account. Select Certificates, IDs & Profiles from the left sidebar. Go to Certificates and click on the + button on the top right corner. Select iOS App Development and click Continue . On the next page you see the instructions for creating the certSigningRequest file. Click Continue . Upload the created certSigningRequest to the form and click Continue . It will generate your code signing certificate for you. Download the certificate and double click to install it. Once installed it will be added to your Keychain Access app. " }, 
{ "title" : "Generating a provisioning profile with Xcode ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-72bd4bb7-5831-63a9-ae12-c71c284c5984", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile with Xcode ", 
"snippet" : "Xcode will automatically generate an App ID for your project, that matches your unique bundle ID for your project. An App ID is used to identify one or more of your apps. It can be an explicit App ID that only matches one unique bundle identifier or a wildcard App ID that can match multiple ones. Xc...", 
"body" : "Xcode will automatically generate an App ID for your project, that matches your unique bundle ID for your project. An App ID is used to identify one or more of your apps. It can be an explicit App ID that only matches one unique bundle identifier or a wildcard App ID that can match multiple ones. Xcode will also create a Team Provisioning Profile for your project automatically, so you can start deploying to your device automatically. If you hit any issues you should make sure that the device is eligible, for example if the device doesn’t match the deployment target you will get an error. Also make sure that your app is connected to the correct Team. To generate a provisioning profile using Xcode: Select your project file from Xcode’s project navigator. Go to the Signing section and under the Team select your correct team. Build your project in Xcode. To download a provisioning profile from Xcode: Start Xcode. Select Xcode > Preferences from the navigation bar. At the top of the window select Accounts . Select your Apple ID and your team, then select Download Manual Profiles . Go to ~\/Library\/MobileDevice\/Provisioning Profiles\/ and your profiles should be there. " }, 
{ "title" : "Generating a provisioning profile manually ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-5bfac9f8-1648-11fc-7307-d64b5b1a36ea_UUID-e163f6a3-185f-d8a3-96b8-7bad638c86e2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Generating iOS code signing files \/ Generating a provisioning profile manually ", 
"snippet" : "To generate a provisioning profile manually, you need a working Apple Developer account, and you need to set up an App ID for your project....", 
"body" : "To generate a provisioning profile manually, you need a working Apple Developer account, and you need to set up an App ID for your project. " }, 
{ "title" : "Exporting iOS code signing files manually ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually ", 
"snippet" : "You can export iOS code signing certificates and provisioning profiles manually, or using Xcode. You can export iOS code signing certificates and provisioning profiles manually, or using Xcode....", 
"body" : "You can export iOS code signing certificates and provisioning profiles manually, or using Xcode. You can export iOS code signing certificates and provisioning profiles manually, or using Xcode. " }, 
{ "title" : "Exporting iOS code signing certificates with Xcode ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-a941d6cd-2d84-972c-7859-f4c007294e61", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates with Xcode ", 
"snippet" : "Start Xcode. Select Xcode > Preferences from the navigation bar. At the top of the window select Accounts . Select your Apple ID and your team from the right side bar, then click on View Details... . A dialog will appear where you will see your code signing identities and the provisioning profiles. ...", 
"body" : "Start Xcode. Select Xcode > Preferences from the navigation bar. At the top of the window select Accounts . Select your Apple ID and your team from the right side bar, then click on View Details... . A dialog will appear where you will see your code signing identities and the provisioning profiles. Select the certificates and choose Export from the pop-up menu. Enter a filename in the Save As dialog. You can set a password and a verification to store it securely, but it’s not necessary. Xcode will export the requested certificate in .p12 format. " }, 
{ "title" : "Exporting iOS code signing certificates manually ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-ff77eda0-2726-da04-855b-26a1ae74b4b4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS code signing certificates manually ", 
"snippet" : "Start Keychain Access. On the top left sidebar select login and on the bottom left select My Certificates . This will list all your installed certificates and the associated private key. Select the one that you would like to export and choose Export from the pop-up menu. Enter a filename in the Save...", 
"body" : "Start Keychain Access. On the top left sidebar select login and on the bottom left select My Certificates . This will list all your installed certificates and the associated private key. Select the one that you would like to export and choose Export from the pop-up menu. Enter a filename in the Save As dialog. You can set a password and a verification to store it securely, but it’s not necessary. Keychain Access will export the requested certificate in .p12 format. " }, 
{ "title" : "Exporting iOS provisioning profiles with Xcode ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-40709ae1-ea68-0a3b-6743-7ae374121606", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles with Xcode ", 
"snippet" : "Start Xcode. Select Xcode > Preferences from the navigation bar. At the top of the window select Accounts . Select your Apple ID and your team from the right side bar, then click on View Details... . A dialog will appear where you will see your code signing identities and the provisioning profiles. ...", 
"body" : "Start Xcode. Select Xcode > Preferences from the navigation bar. At the top of the window select Accounts . Select your Apple ID and your team from the right side bar, then click on View Details... . A dialog will appear where you will see your code signing identities and the provisioning profiles. Locate the profile that you are looking for under Provisioning Profiles. If you don’t have it installed on the system, click on the Download button next to it. Choose Show in finder from the pop-up menu, that will show you the installed provisioning profile for you. " }, 
{ "title" : "Exporting iOS provisioning profiles manually ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-1e375bdd-1e87-ea15-5b8b-726dde983c9e_UUID-03251887-3c43-8d50-71dd-27db68353791", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Exporting iOS code signing files manually \/ Exporting iOS provisioning profiles manually ", 
"snippet" : "Go to https:\/\/developer.apple.com and log in. Select Certificates, Identifiers & Profiles from the left sidebar. Navigate to Provisioning Profiles > All. Find the Provisioning Profile you are looking for from the list or use the search to filter. Click on the selected Provisioning Profile, this will...", 
"body" : "Go to https:\/\/developer.apple.com and log in. Select Certificates, Identifiers & Profiles from the left sidebar. Navigate to Provisioning Profiles > All. Find the Provisioning Profile you are looking for from the list or use the search to filter. Click on the selected Provisioning Profile, this will expand the details. If its status is invalid, you can click on the Edit button and save again. Click on the Download button to download it and double click to install on your macOS. " }, 
{ "title" : "Troubleshooting iOS code signing ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing ", 
"snippet" : "iOS code signing can be complicated, with several potential issues. We've collected some of the most common issues and their potential solutions. iOS code signing can be complicated, with several potential issues. We've collected some of the most common issues and their potential solutions. Let’s lo...", 
"body" : "iOS code signing can be complicated, with several potential issues. We've collected some of the most common issues and their potential solutions. iOS code signing can be complicated, with several potential issues. We've collected some of the most common issues and their potential solutions. Let’s look into what you can do to make sure code signing works! " }, 
{ "title" : "Code signing and clean virtual machines ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-58f17e66-d8d7-a855-e055-c3ade8599f04", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Code signing and clean virtual machines ", 
"snippet" : "Every Bitrise build uses a clean virtual machine with no leftover files and configuration from previous builds. While you most likely have all the necessary code signing files (certificates and provisioning profiles) available on your local machine this is not the case with our virtual machines. The...", 
"body" : "Every Bitrise build uses a clean virtual machine with no leftover files and configuration from previous builds. While you most likely have all the necessary code signing files (certificates and provisioning profiles) available on your local machine this is not the case with our virtual machines. They do not contain any code signing files relevant to your project, that is why you have to make sure: You choose the right code signing asset management option to upload the provisioning profiles to Bitrise. From here our Steps will download the files to the virtual machine at runtime. You upload the necessary signing certificates to the Code Signing tab. You have connected your Bitrise account to the Apple Developer portal. (This step is not needed if you use the Certificate and Profile Installer Step.) to Apple Developer portal. If you suspect an error is related to code signing, there is almost certainly a problem with one of these three. When trying to build an iOS app on Bitrise, we strongly recommend generating an .ipa file of the app locally, on your own machine first. If that fails, the build will certainly fail on Bitrise, too. Verbose logs If you are getting any issues, make sure you enable the Verbose log input in your code signing asset management or building Step to get more information on the nature of the issue. " }, 
{ "title" : "iOS code signing Steps fail ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-dc3a6b58-241e-62df-706b-e46f1e3ca2d4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ iOS code signing Steps fail ", 
"snippet" : "Our iOS code signing Steps manage your provisioning profiles for you: they download the profiles from the Apple Developer portal and install them for you. Here’s what you can do if these Steps fail: Before trying to use this Step, generate an .ipa file locally - with the same export method you want ...", 
"body" : "Our iOS code signing Steps manage your provisioning profiles for you: they download the profiles from the Apple Developer portal and install them for you. Here’s what you can do if these Steps fail: Before trying to use this Step, generate an .ipa file locally - with the same export method you want to use on Bitrise - to ensure that the profiles are uploaded to the Apple Developer portal. Make sure that your Bitrise account is connected to the Apple Developer portal and that you have at least an Admin role in your Apple Developer team. " }, 
{ "title" : "File count limit on provisioning profiles ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-7139629d-1cf8-8544-9098-5c0b4ea31562", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ File count limit on provisioning profiles ", 
"snippet" : "The maximum number of provisioning profiles and .p12 certificates you can upload to the Code Signing tab on Bitrise is 30. If you’ve already reached this limit and wish to use even more, then here are a few tips on how to use even more provisioning profiles: Use a Step with automatic provisioning, s...", 
"body" : "The maximum number of provisioning profiles and .p12 certificates you can upload to the Code Signing tab on Bitrise is 30. If you’ve already reached this limit and wish to use even more, then here are a few tips on how to use even more provisioning profiles: Use a Step with automatic provisioning, such as Xcode Archive and Export for iOS , Export iOS and tvOS Xcode Archive , Xcode build for testing for iOS , or Manage iOS Code Signing . These Steps only require the code signing identities (certificates with .p12 extension) to be uploaded to Bitrise. You can download the provisioning profiles from the Apple Developer portal on-the-fly during the build if you have connected your Apple Developer account to Bitrise . You can create a .zip file containing the required certificates\/profiles. In this case, you don’t need to upload any certificates\/profiles on Bitrise. During the build you can download the .zip file and update the certificate\/profile related inputs of the Certificate and Profile Installer Step to match the path to the certificate\/profile on the build machine. Note that the Certificate and Profile Installer Step supports local paths and URLs for certificates and profiles. You can host the profiles and certificates yourself, and only add an URL that is pointing to a given certificate\/profile to the workflow. Also note that multiple URLs can be specified for both the certificate and profile inputs. Make sure you separate them with a pipe ( | ) character. " }, 
{ "title" : "Could not install the app on a device ", 
"url" : "88887-41967-bitrise-docs/88887-43269-code-signing/88887-53933-ios-code-signing.html#UUID-02c72b35-c191-4bc6-b275-19a796fde2c8_UUID-6375a4fd-b363-250d-a56e-9b80ca7a6109", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Code signing \/ iOS code signing \/ Troubleshooting iOS code signing \/ Could not install the app on a device ", 
"snippet" : "To install iOS apps on a given device, you have to either: Export an IPA file with the development export method, with the device’s UDID registered in the provisioning profile used for the export. Export an IPA file with the ad-hoc export method and install the app via the public install page genera...", 
"body" : "To install iOS apps on a given device, you have to either: Export an IPA file with the development export method, with the device’s UDID registered in the provisioning profile used for the export. Export an IPA file with the ad-hoc export method and install the app via the public install page generated by the Deploy to Bitrise.io Step. If you can't install an app on a given device: Check that the device UDID is included in the app’s provisioning profile. If you use manual provisioning, check the provisioning profile you uploaded to Bitrise. Check the logs to see if the Xcode Archive & Export for iOS Step used the provisioning profile with the device’s UDID in it. " }, 
{ "title" : "Testing ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing ", 
"snippet" : "Bitrise has a number of dedicated Steps to help you with running your tests, and you can use custom Script Steps if you do not find what you need in our Step Library. Testing your app is a major part of the continuous integration process. Bitrise has a number of dedicated Steps to help you with runn...", 
"body" : "[video] Bitrise has a number of dedicated Steps to help you with running your tests, and you can use custom Script Steps if you do not find what you need in our Step Library. Testing your app is a major part of the continuous integration process. Bitrise has a number of dedicated Steps to help you with running your tests, and you can use custom Script Steps if you do not find what you need in our Step Library. Check out our testing Steps for iOS, Android, and multiplatform apps: from Xcode tests through Flutter tests to Android Lint, you can review and test your app on Bitrise, regardless of the frameworks and tools you use. " }, 
{ "title" : "Test Reports ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43290-test-reports.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports ", 
"snippet" : "You can run both UI tests and unit tests on Bitrise. You can view them in Test Reports, which you can access from the Add-ons section on the Build Details page. Test Reports allows you to view all your test results in a convenient way. Use our testing Steps , and all your test results will be deploy...", 
"body" : "[video] You can run both UI tests and unit tests on Bitrise. You can view them in Test Reports, which you can access from the Add-ons section on the Build Details page. Test Reports allows you to view all your test results in a convenient way. Use our testing Steps , and all your test results will be deployed to the same directory. From there, Test Reports can process and display them in a way that’s easy to read and analyze. " }, 
{ "title" : "Test reports overview ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43290-test-reports.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-2c3972ff-95f4-3660-884c-b696dbc87f25", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Test reports overview ", 
"snippet" : "You can run both UI tests and unit tests on Bitrise and with Test Reports, you can view the results of the different test types on the same page. To be able to use Test Reports, you need to make sure your test results end up in the correct directory and in the correct format. From that directory, th...", 
"body" : "You can run both UI tests and unit tests on Bitrise and with Test Reports, you can view the results of the different test types on the same page. To be able to use Test Reports, you need to make sure your test results end up in the correct directory and in the correct format. From that directory, the Deploy to Bitrise.io Step exports the results to the add-on. There are three ways to make sure your test results end up in the correct location and in the appropriate format: Using our dedicated testing Steps that automatically export their results. With these Steps, all you need to do is put both the testing Step and the Deploy to Bitrise.io Step to the Workflow and run the build. Using the Export test results to the Test reports add-on Step. Using a custom Script Step. Exporting the results from any testing Step Both the second and the third method allows you to export test results from any Step. Read the details in our Exporting to Test Reports from any Step guide. Test Reports can read and display test results that are in either of two formats: You can use Test Reports with five of our testing Steps by default. These Steps will run the tests defined in your repository and then store the output in an Environment Variable. The Deploy to Bitrise.io Step will do the rest: it can read the results and send it to Test Reports. The Steps are: Xcode Test for iOS . Android Unit Test . iOS Device Testing . Virtual Device Testing for Android . Flutter Test . With these Steps, you don't have to worry about the format or the location of the test results. All you need to make sure is that you include the Deploy to Bitrise.io Step at the end of your Workflow. Testing guides Check out our testing guides to read more about how to use these Steps on Bitrise: Running Android unit testsDevice testing for AndroidDevice testing for iOSRunning unit and UI tests for iOS appsGetting started with Flutter apps" }, 
{ "title" : "Configuring Test Reports ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43290-test-reports.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-7480e49a-3917-ed5a-4f69-17e19c0e1845", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Configuring Test Reports ", 
"snippet" : "Test Reports doesn’t require any sort of complicated configuration. All you need is to have tests in your repository, and two Steps in your Workflow. Deploy to Bitrise.io version The Deploy to Bitrise.io Step must be of version 1.4.1 or newer - older versions of the Step do NOT support Test Reports....", 
"body" : "Test Reports doesn’t require any sort of complicated configuration. All you need is to have tests in your repository, and two Steps in your Workflow. Deploy to Bitrise.io version The Deploy to Bitrise.io Step must be of version 1.4.1 or newer - older versions of the Step do NOT support Test Reports. We recommend using version 1.5.0 or higher for the best experience. Add tests to your app’s repository. Add the appropriate testing Steps to your Workflow. For example, if you have an Android project, you can use the Android Unit Test Step to run Android unit tests. Make sure you have the Deploy to Bitrise.io Step in your Workflow. Run your build. And that’s it! Once the build is finished, you will be able to view your test reports. " }, 
{ "title" : "Checking test results ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43290-test-reports.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Checking test results ", 
"snippet" : "Test Reports display the most important information about all the tests you ran on the Test Summary tab. You will see all the tests you ran, their duration, and their results. You can also click on the tabs of the individual tests to see their details. To access the result of a particular test: Find...", 
"body" : "Test Reports display the most important information about all the tests you ran on the Test Summary tab. You will see all the tests you ran, their duration, and their results. You can also click on the tabs of the individual tests to see their details. To access the result of a particular test: Find your app on the Dashboard, and select it. On the app's main page, select the build you want to check out. Go to the  Tests tab. You can see failed tests on the Tests tab itself. If you had no failed tests, click the View Test Reports button. On the Test Summary tab, find the test you want to check. Alternatively, on the top bar, click the tab of the test set you want to check out.To filter tests based on their results, open the menu on the top right, which is set to All by default. Click Test cases to see the details. UI tests are grouped according to device while unit tests are grouped according to test cases. You will find: The total number of tests you ran, as well as the ratio of successful and failed tests. The duration of each individual test (both unit tests and UI tests). In the case of UI tests, the orientation and the locale of the device. You can check, depending on the test type: Individual test cases Performance data Videos Screenshots Test artifacts Logs As noted above, this depends on test type, too: for unit tests, you won’t see screenshots or videos, of course. " }, 
{ "title" : "Downloading files ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43290-test-reports.html#UUID-4e5399ab-e144-4ece-9e5e-b79866bee64b_UUID-0072fe7f-2cb0-6020-9829-461e0a9beee5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Test Reports \/ Downloading files ", 
"snippet" : "Every file can be downloaded from Test Reports: that includes screenshots, videos, or APK and IPA files. Open a test set. On the left menu, click a tab that contains files. For example,  Test Artifacts . Click  Download  next to the file name. If you want to download all files available on the tab, ...", 
"body" : "Every file can be downloaded from Test Reports: that includes screenshots, videos, or APK and IPA files. Open a test set. On the left menu, click a tab that contains files. For example,  Test Artifacts . Click  Download  next to the file name. If you want to download all files available on the tab, click  Download All Files . " }, 
{ "title" : "Exporting to Test Reports from any Step ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43291-exporting-to-test-reports-from-any-step.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step ", 
"snippet" : "You can export Test Reports from any Step using the Export test results to the Test reports add-on Step. Alternatively, you could configure your own Script Step to export the files. Test Reports allows you to view all your test results in a convenient way. By default, five Steps support the Test Rep...", 
"body" : "You can export Test Reports from any Step using the Export test results to the Test reports add-on Step. Alternatively, you could configure your own Script Step to export the files. Test Reports allows you to view all your test results in a convenient way. By default, five Steps support the Test Reports add-on: Xcode Test for iOS Android Unit Test iOS Device Testing Virtual Device Testing for Android Flutter Test To export the test results generated by any other Step to the Deploy to Bitrise.io Step, you have two options: We recommend using our Export test results to the Test reports add-on Step : this Step locates the test results based on your inputs. However, this Step cannot export screenshots or other images. You can configure your own custom Script Step that creates and exports the necessary files. If you need screenshots or other images, you need to export both the test results and the images in the same Script Step. " }, 
{ "title" : "Using the Export test results to the Test reports add-on Step ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43291-exporting-to-test-reports-from-any-step.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-a6dae44f-31ae-3fe7-41f2-e2e5756823c0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Using the Export test results to the Test reports add-on Step ", 
"snippet" : "You can use the  Export test results to the Test reports add-on   Step to make sure your test results appear in the Test Reports add-on, even if you use Steps that don’t automatically export their results. With the correct configuration, the Step finds the test results in your app’s repository, and ...", 
"body" : "You can use the  Export test results to the Test reports add-on   Step to make sure your test results appear in the Test Reports add-on, even if you use Steps that don’t automatically export their results. With the correct configuration, the Step finds the test results in your app’s repository, and puts them in the export directory. Screenshots and other images The Step can only export test results, in either .xcresult or JUnit XML format. If your test results are in an .xcresult file, screenshots generated as part of the test are included and exported to the Test Reports add-on. If you use the JUnit XML format, you need to export screenshots and other images using a Script Step: Exporting screenshots and other images to Test Reports. In this case, the test results themselves must be exported using the same Script Step. You cannot export screenshots and test results in separate Steps! Go to your app’s page on bitrise.io . Go to Workflows to open the Workflow Editor. From the WORKFLOW menu, select the Workflow you use to run your tests. Add the Export test results to the Test reports add-on Step AFTER the testing Step. In the The name of the test input, set the name of the test run. The test results will be under this name in the Test Reports add-on. In the Path where custom test results reside input, set the path where your test results can be found. We recommend setting a folder here, though you can also set a specific filepath. The default value is the source directory of your app . Example patterns: If your app’s root directory is app: app\/build\/test-results\/testDemoDebugUnitTest\/ If your test results are within an app folder but app is not the root directory: .\/app\/build\/test-results\/testDemoDebugUnitTest\/ In the Test result search pattern input, set a pattern that matches your test result file. This search pattern is used to search every file and folder of the path that was set in the Path where custom test results reside input. If there is more than one match, the Step will export the first match with a warning in the logs. If you set a specific filepath in the previous input, just set * here. Example patterns: Matching all files within the base path: * Matching all files within a given directory of the base path: *\/build\/test-results\/testDemoDebugUnitTest\/* In the Step’s test result directory input, make sure the path is correct. Do NOT modify this input’s value: this is the folder where the Deploy to Bitrise.io Step will look for the test results to export them. It should be set to the $BITRISE_TEST_RESULT_DIR Env Var. Make sure you have a Deploy to Bitrise.io Step in your Workflow . " }, 
{ "title" : "Using custom scripts to export test results ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43291-exporting-to-test-reports-from-any-step.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-d3e4657d-0f72-02a5-f457-f941aa8675c9", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Using custom scripts to export test results ", 
"snippet" : "You can use your own scripts in a Script Step to export your test results. You just need to make sure that: Your test results are in a JUnit XML format . You place the results in the $BITRISE_TEST_RESULT_DIR , which is an Environment Variable pointing to the correct path. The results of each test ru...", 
"body" : "You can use your own scripts in a Script Step to export your test results. You just need to make sure that: Your test results are in a JUnit XML format . You place the results in the $BITRISE_TEST_RESULT_DIR , which is an Environment Variable pointing to the correct path. The results of each test run should be in its own sub-directory. You place a test-info.json file in each sub-directory to correspond to the test run. The test-info.json file The test-info.json file must have the name of the test run defined in it. Each test run should have its own test-info.json file. The value of test-name will appear as the name of the test run on the Test Reports page. \/\/ Test Name ... { \"test-name\":\"My first test\" } Here’s an example script to export your test results: #!\/bin\/env bash\nset -ex\n\n# Creating a sub-directory for the test run within the BITRISE_TEST_RESULT_DIR:\n\ntest_run_dir=\"$BITRISE_TEST_RESULT_DIR\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# Exporting the JUnit XML test report:\n\ncp \"MY\/TEST\/REPORT\/XML\/FILE\/PATH.xml\" \"$test_run_dir\/UnitTest.xml\"\n\n# Creating the test-info.json file with the name of the test run defined:\n\necho '{\"test-name\":\"MY TEST RUN NAME\"}' >> \"$test_run_dir\/test-info.json\"\n If all goes well, you should be able to see your test results on the Test Reports page. " }, 
{ "title" : "Exporting screenshots and other images to Test Reports ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43291-exporting-to-test-reports-from-any-step.html#UUID-19be1017-9668-f17a-1034-b76f08805e49_UUID-99bb841d-a494-07cb-02ea-4c15c0db5704", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Exporting to Test Reports from any Step \/ Exporting screenshots and other images to Test Reports ", 
"snippet" : "The  Export test results to Test Reports add-on Step can only export test result files to the Deploy to Bitrise.io Step which supports two formats for results: The .xcresult file for iOS apps. A JUnit XML file for any app. If your tests produce an .xcresult file, screenshots generated during the tes...", 
"body" : "The  Export test results to Test Reports add-on Step can only export test result files to the Deploy to Bitrise.io Step which supports two formats for results: The .xcresult file for iOS apps. A JUnit XML file for any app. If your tests produce an .xcresult file, screenshots generated during the test run are part of the test result. As such, they will be exported to the Test Reports add-on. If you use the JUnit XML format and want to export screenshots or other images, you cannot use the Export test results to Test Reports add-on Step. You need to use a custom script to export both the result and the screenshots. The script to export both must be in the same Script Step, and you must have a test-info.json file with the necessary information about the test runs: Using custom scripts to export test results. To export screenshots with the results, the script must place the images in the $BITRISE_TEST_RESULT_DIR folder. Folder structure The image files themselves must be in the $BITRISE_TEST_RESULT_DIR folder. They can't be nested in another folder within $BITRISE_TEST_RESULT_DIR . Script to export an image #!\/bin\/env bash\nset -ex\n\n# Creating a sub-directory for the test run within the BITRISE_TEST_RESULT_DIR:\n\ntest_run_dir=\"$BITRISE_TEST_RESULT_DIR\/result_dir_1\"\nmkdir \"$test_run_dir\"\n\n# copying the image:\n\ncp \"MY\/TEST\/SCREENSHOTS\/screenshot.png\" \"$test_run_dir\/screenshot.png\" Associating images with test runs You can associate an image with a specific test run by placing the image in the directory of that test run. In that case, the image will appear under all test suits of the given test run. " }, 
{ "title" : "Running unit and UI tests for iOS apps ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43292-running-xcode-tests.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps ", 
"snippet" : "You need two Steps to run Xcode tests and view their results: Xcode Test for iOS, and Deploy to Bitrise.io. You can run both unit and UI tests for iOS apps on Bitrise with our dedicated Step . The Step runs the test targets you defined in your Xcode project and exports the results either for direct ...", 
"body" : "You need two Steps to run Xcode tests and view their results: Xcode Test for iOS, and Deploy to Bitrise.io. You can run both unit and UI tests for iOS apps on Bitrise with our dedicated Step . The Step runs the test targets you defined in your Xcode project and exports the results either for direct download or to the Test Reports add-on . To run Xcode tests on Bitrise, you need two Steps to run Xcode tests and view their results: Xcode Test for iOS . Deploy to Bitrise.io . Code signing files Running Xcode tests and deploying their results to Bitrise do not require any code signing files. So don’t worry about them just yet! The Xcode Test for iOS Step runs your tests, exports your test results, the .xcresult file, all test attachments, and the log of the xcodebuild test command. Xcode test results in HTML You can also view your Xcode test results in a rich HTML format, using the Generate Xcode test report html Step: Viewing Xcode test results in rich HTML format. To run tests using the Step: Workflow Editor bitrise.yml Make sure you install all of the app's dependencies in your Workflow. Add the Xcode Test for iOS Step to the Workflow. Make sure the Project path input points to the correct location. The input asks for the path to your .xcodeproj, .xcworkspace , or Package.swift file. In most cases, you don't need to change this input: when adding a new app, the project scanner automatically finds the relevant file and stores its location in the Environment Variable that is the default value of the input. Make sure the Scheme input points to the scheme you want to use to build the app. The default value is the Environment Variable that stores the scheme you set during the initial configuration of the app. If you wish to use a different scheme, type its name to the input field. Shared scheme only The scheme must be a shared Xcode scheme! Configure the device destination in the Device destination specifier input: the input takes comma-separated key-value pairs. For example, if you wish to build an app to test on an iPhone 14 with the latest available OS: platform=iOS,name=iPhone 14 Plus,OS=latest The input sets the -destination option of xcodebuild . Read more about the possible options: How do I run unit tests from the command line? Optionally, set a specific test plan in the Test plan input. The input sets the -testPlan option of the test action of xcodebuild . If you leave this empty, the test plan specified in the Xcode scheme will be used. Add the Deploy to Bitrise.io Step to the end of your Workflow to be able to access the test results and other outputs either on the Artifacts tab or in the Test Reports add-on. Make sure you install all of the app's dependencies in your Workflow. Add the xcode-test Step to the Workflow. your-workflow:\n steps:\n - activate-ssh-key: {}\n - git-clone: {}\n - xcode-test:\n inputs: Make sure the project_path input points to the correct location. The input asks for the path to your .xcodeproj, .xcworkspace , or Package.swift file. In most cases, you don't need to change this input: when adding a new app, the project scanner automatically finds the relevant file and stores its location in the Environment Variable that is the default value of the input. your-workflow:\n steps:\n - activate-ssh-key: {}\n - git-clone: {}\n - xcode-test:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n Make sure the scheme input points to the scheme you want to use to build the app. The default value is the Environment Variable that stores the scheme you set during the initial configuration of the app. If you wish to use a different scheme, type its name to the input field. your-workflow:\n steps:\n - activate-ssh-key: {}\n - git-clone: {}\n - xcode-test:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: test Shared scheme only The scheme must be a shared Xcode scheme! Configure the device destination in the destination input: the input takes comma-separated key-value pairs. For example, if you wish to build an app to test on an iPhone 14 with the latest available OS: your-workflow:\n steps:\n - activate-ssh-key: {}\n - git-clone: {}\n - xcode-test:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: test\n - destination: platform=iOS Simulator,name=iPhone 14 Plus,OS=latest The input sets the -destination option of xcodebuild . Read more about the possible options: How do I run unit tests from the command line? Optionally, set a specific test plan in the test_plan input. The input sets the -testPlan option of the test action of xcodebuild . If you leave this empty, the test plan specified in the Xcode scheme will be used. your-workflow:\n steps:\n - activate-ssh-key: {}\n - git-clone: {}\n - xcode-test:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: test\n - destination: platform=iOS Simulator,name=iPhone 11 Plus,OS=latest\n - test_plan: my_plan Add the deploy-to-bitrise-io Step to the end of your Workflow to be able to access the test results and other outputs either on the Artifacts tab or in the Test Reports add-on. your-workflow:\n steps:\n - activate-ssh-key: {}\n - git-clone: {}\n - xcode-test:\n inputs:\n - project_path: \"$BITRISE_PROJECT_PATH\"\n - scheme: test\n - destination: platform=iOS Simulator,name=iPhone 11 Plus,OS=latest\n - test_plan: my_plan\n - deploy-to-bitrise-io: Headless mode From Xcode 9 onwards, tests are run in headless mode by default: this means that the simulator will run in the background only. To change it, go to the Step’s Debug input group and set the Run the simulator in headless mode input’s value to no . However, with this option, tests will take more time. - xcode-test:\n inputs:\n - headless_mode: 'no' Using xcpretty The xcpretty output tool does not support parallel tests. If parallel tests are enabled in your project, go to the Step’s xcodebuild log formatting input group and set the Log formatter input’s value to xcodebuild or xcbeautify . - xcode-test:\n inputs:\n - log_formatter: xcbeautify " }, 
{ "title" : "Rerunning failed tests (Not available in Xcode 13) ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43292-running-xcode-tests.html#UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33_UUID-1b8cd371-4081-524f-2d86-6aeab9642bf2", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps \/ Rerunning failed tests (Not available in Xcode 13) ", 
"snippet" : "The Should retry test on failure? (Not available in Xcode 13+) input in the Test repetition section of the Xcode Test for iOS Step allows you to automatically rerun ALL your tests, not just the failed ones. If you set this input to yes , the Step will run xcodebuild one more time in the case of test...", 
"body" : "The Should retry test on failure? (Not available in Xcode 13+) input in the Test repetition section of the Xcode Test for iOS Step allows you to automatically rerun ALL your tests, not just the failed ones. If you set this input to yes , the Step will run xcodebuild one more time in the case of test failure. From Xcode 13 and above, the feature is not available anymore. Use the Test Repetitions Mode (Available in Xcode 13+) input with the retry_on_failure option selected. This allows you to rerun only the failed test\/s instead of running all your tests. You can find this test repetition feature with our Xcode Test for iOS Step from version 3.0.0 and above. " }, 
{ "title" : "Test Repetitions ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43292-running-xcode-tests.html#UUID-b81c44d0-a3c5-dd6d-0c67-5439429d0b33_UUID-721e2b82-8d91-bd7c-a21c-84c5e6bab138", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running unit and UI tests for iOS apps \/ Test Repetitions ", 
"snippet" : "Xcode’s test repetition modes are available with the Xcode Test for iOS Step on stacks running Xcode 13 and above on Bitrise. With test repetitions, you can run any type of tests multiple times in various ways such as retry on failure, until failure and until max repetitions. The Xcode Test for iOS ...", 
"body" : "Xcode’s test repetition modes are available with the Xcode Test for iOS Step on stacks running Xcode 13 and above on Bitrise. With test repetitions, you can run any type of tests multiple times in various ways such as retry on failure, until failure and until max repetitions. The Xcode Test for iOS Step’s Test Repetitions Mode (Available in Xcode 13+) input offers the following options: none : The tests won’t repeat. until_failure : Repeats a test until the test fails or until the maximum repetition. The default number of test runs is three. retry_on_failure : Failed tests run until they succeed or until the repetition number you specify. The default number of test repetitions is three. up_until_maximum_repetitions : Reruns all tests until maximum test repetition is reached regardless of the test outcomes. Please note that these options are only available from Xcode Test for iOS version 3.0.0 and above. With the Maximum Test Repetitions (Available in Xcode 13+) input you can specify the maximum number of test repetitions. Please note that you have to add a greater number than one if the Test Repetition Mode (Available in Xcode 13+) input is set to other than none . Enable the Relaunch Tests for Each Repetition (Available in Xcode 13+) input to launch tests in a completely new process for each repetition. " }, 
{ "title" : "Installing an .ipa file ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43293-installing-an-ipa-file-from-the-public-install-page.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file ", 
"snippet" : "You can install .ipa files either from the public install page or from the Artifacts tab of your build. You can install .ipa files generated during a Bitrise build on test devices in two ways: Using the public install page . The public install page is a generated URL that can be distributed to users...", 
"body" : "You can install .ipa files either from the public install page or from the Artifacts tab of your build. You can install .ipa files generated during a Bitrise build on test devices in two ways: Using the public install page . The public install page is a generated URL that can be distributed to users who have access to provisioned and registered test devices. Downloading the file from the Artifacts tab on the build's page on Bitrise. Installing an .ipa file on a test device consist of three phases: initiating the device compatibility check, installing a configuration profile on the test device, then finishing up with installing the app on the device. In this tutorial we’re describing: How to install an app on a registered test device without a Bitrise account (for anyone who has not subscribed to Bitrise but wishes to check out the current version of the app). How to install an app on a test device which is yet to be registered on Bitrise (for Bitrise users). Installing an .ipa file from the Artifacts tab Installing an .ipa file from the Artifacts tab is only possible for Bitrise users. " }, 
{ "title" : "Prepping for installation ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43293-installing-an-ipa-file-from-the-public-install-page.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-0d5d7993-7b2f-0104-88df-38463fb7f6a7", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Prepping for installation ", 
"snippet" : "Before installing the app on any test device, the app’s developer has to complete a couple of steps to build the app and share it with anyone: The device, on which the app will be installed, is registered as a test device at the developer’s Apple account. The device has to be included in the provisi...", 
"body" : "Before installing the app on any test device, the app’s developer has to complete a couple of steps to build the app and share it with anyone: The device, on which the app will be installed, is registered as a test device at the developer’s Apple account. The device has to be included in the provisioning profile of the app. The device meets the minimum OS requirements of the app. Please note that if the test device is not registered on the Apple Developer portal, the developer has to manually add it to the device list, and re-build the app so that the .ipa file contains the test device\/s the app can be installed on. We also recommend you register the test device on Bitrise as well. Which browser should I use with the public install page? Anyone who wishes to install the app on a test device has to make sure that the public install page of the app is opened in a native Safari session with non-incognito mode. " }, 
{ "title" : "Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43293-installing-an-ipa-file-from-the-public-install-page.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-56878309-808f-f9fc-bfe6-2670f1eff432", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Prepping for installation \/ Installing an .ipa file from Bitrise's public install page to an iPad with iPadOS ", 
"snippet" : "If you are using an iPad running iPadOS, make sure that you open the Bitrise public install page in mobile mode. When you open the public install page of an .ipa file, Bitrise checks if the device is stored in the embedded provisioning profile or not. This check can only complete if you visit the pu...", 
"body" : "If you are using an iPad running iPadOS, make sure that you open the Bitrise public install page in mobile mode. When you open the public install page of an .ipa file, Bitrise checks if the device is stored in the embedded provisioning profile or not. This check can only complete if you visit the public install page in mobile mode instead of the desktop version. We suggest that you switch to mobile mode temporarily. You can easily switch to mobile mode temporarily if you tap the ᴀA icon on the left corner of the Safari address bar and then tap the Show Mobile Website option. " }, 
{ "title" : "Installing an .ipa file on test devices from the public install page ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43293-installing-an-ipa-file-from-the-public-install-page.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-67559f9c-572d-1b5f-7a5d-911a01423cb6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page ", 
"snippet" : "The public install page is a convenient way of sharing the latest version of your app with team members and any other stakeholders who wish to check the app out. The page includes all the important details of the build such as filename, size, version code, minimum SDK version, and build number. You ...", 
"body" : "The public install page is a convenient way of sharing the latest version of your app with team members and any other stakeholders who wish to check the app out. The page includes all the important details of the build such as filename, size, version code, minimum SDK version, and build number. You can configure the Deploy to Bitrise.io Step to send an email to users with a link to the public install page. This link can be shared with anyone. During this whole flow, use a native, non-incognito Safari session instead of any other in-app browser type. If you follow the link in the notification email you got from Bitrise, the public install page will automatically open in a native Safari session. Would you rather download the app? If you only wish to download the app and manually upload it somewhere else, you can find the download button on the Artifacts page of the build. Please note that downloading an app does not mean you can install it on the test device. " }, 
{ "title" : "Installing an app on a test device without a Bitrise account ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43293-installing-an-ipa-file-from-the-public-install-page.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-6c53514c-0bd8-f14e-a291-9a2f14d69f76", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account ", 
"snippet" : "Long tap on the link you received from Bitrise. To open the link in native Safari, tap Open Link . It brings up the public install page in a native Safari session. If you copy the link from the email, make sure you paste it in a native Safari session. Tap the link in the Click here to check device c...", 
"body" : "Long tap on the link you received from Bitrise. To open the link in native Safari, tap Open Link . It brings up the public install page in a native Safari session. If you copy the link from the email, make sure you paste it in a native Safari session. Tap the link in the Click here to check device compatibility of this device with this app yellow message box. If you cannot see this message, you are most likely using another browser so switch to Safari. Tap Allow on the pop-up to install the configuration profile on your device. This configuration profile makes the device’s UDID available to Bitrise for the compatibility check. A pop-up confirms the configuration profile has been downloaded, and it can be installed in the Settings app. Tap Close . Tap the Home button to go the the home screen. Open Settings . You can find the downloaded profile at the top of the Settings . Tap Profile Downloaded menu item on the left to install the profile. Tap Install . Type your device’s passcode in the Enter passcode pop-up. Tap Install again. Wait until the profile is installed. Once the profile is installed, you’re directed to the public install page. As you can see, the Install button is now available. Tap it! Tap OK on the next pop-up. As a final confirmation, tap on Install and press the Home button. Now you’re installing the app to your test device. Wait till the app installs on your test device’s home screen. Check out the app you’ve successfully installed on your test device. " }, 
{ "title" : "Installing an app on a test device not registered to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43293-installing-an-ipa-file-from-the-public-install-page.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device without a Bitrise account \/ Installing an app on a test device not registered to Bitrise ", 
"snippet" : "If you’re accessing the public install page from a test device which displays the below message, you’ll have to register the device on Bitrise which is only a few steps different from the above flow. Please note that you can only add a test device to Bitrise if you already have a Bitrise account. Ta...", 
"body" : "If you’re accessing the public install page from a test device which displays the below message, you’ll have to register the device on Bitrise which is only a few steps different from the above flow. Please note that you can only add a test device to Bitrise if you already have a Bitrise account. Tap Click here to start the device registration process. Tap Allow to download the configuration profile. When the configuration profile is downloaded, tap Close . Tap the Home button to go to your Settings app on your test device’s home screen. Open Settings . You can find the downloaded profile at the top of the Settings . Tap Profile Downloaded menu item on the left to install the profile. Tap Install . Type your device’s passcode in the Enter Passcode pop-up. Tap Install again in the Install Profile pop-up. Wait until the profile installation is complete. You automatically get redirected to the Register your test device page. Your device’s name and UDID gets populated automatically. You can only change the device name here. Tap Register Device . You land on the public install page where the Install button is now available. Tap it! Tap OK on the prompt. To install the app on your test device, tap on Install . Then press the Home button to follow the installment of your app. If all went well, you can find the installed app on your test device’s Home page. " }, 
{ "title" : "Installing an app on a test device not registered to Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43293-installing-an-ipa-file-from-the-public-install-page.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-df5fe0f4-6064-e505-d404-8592d9f37b4f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the public install page \/ Installing an app on a test device not registered to Bitrise ", 
"snippet" : "If you’re accessing the public install page from a test device which displays the below message, you’ll have to register the device on Bitrise which is only a few steps different from the above flow. Please note that you can only add a test device to Bitrise if you already have a Bitrise account. Ta...", 
"body" : "If you’re accessing the public install page from a test device which displays the below message, you’ll have to register the device on Bitrise which is only a few steps different from the above flow. Please note that you can only add a test device to Bitrise if you already have a Bitrise account. Tap Click here to start the device registration process. Tap Allow to download the configuration profile. When the configuration profile is downloaded, tap Close . Tap the Home button to go to your Settings app on your test device’s home screen. Open Settings . You can find the downloaded profile at the top of the Settings . Tap Profile Downloaded menu item on the left to install the profile. Tap Install . Type your device’s passcode in the Enter Passcode pop-up. Tap Install again in the Install Profile pop-up. Wait until the profile installation is complete. You automatically get redirected to the Register your test device page. Your device’s name and UDID gets populated automatically. You can only change the device name here. Tap Register Device . You land on the public install page where the Install button is now available. Tap it! Tap OK on the prompt. To install the app on your test device, tap on Install . Then press the Home button to follow the installment of your app. If all went well, you can find the installed app on your test device’s Home page. " }, 
{ "title" : "Installing an .ipa file on test devices from the Artifacts tab ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43293-installing-an-ipa-file-from-the-public-install-page.html#UUID-c8b0f3dc-005c-e07b-3dba-bd992fe4df99_UUID-d3b31452-4471-4d11-e253-c673408140f1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Installing an .ipa file \/ Installing an .ipa file on test devices from the Artifacts tab ", 
"snippet" : "You can install an .ipa file from the Artifacts tab of your app's build. This provides a more secure way compared to the public install page but requires you to log in to your Bitrise account, making it less viable for external testers. To install an .ipa file from the Artifacts tab: Open your app o...", 
"body" : "You can install an .ipa file from the Artifacts tab of your app's build. This provides a more secure way compared to the public install page but requires you to log in to your Bitrise account, making it less viable for external testers. To install an .ipa file from the Artifacts tab: Open your app on Bitrise. Select the build with the .ipa file you would like to install. Go to the Artifacts tab. Click on Download next to the .ipa file. Click Install , under the Install the app on your iOS device section. " }, 
{ "title" : "Registering test devices for iOS apps ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43294-registering-a-test-device.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps ", 
"snippet" : "You can register a test device easily by opening Safari on your iOS device and accessing the Test devices page from your Profile. With other browsers, you can manually register one using the Register device manually button. You have multiple options to register test devices on bitrise.io : Open Safa...", 
"body" : "You can register a test device easily by opening Safari on your iOS device and accessing the Test devices page from your Profile. With other browsers, you can manually register one using the Register device manually button. You have multiple options to register test devices on bitrise.io : Open Safari on your iOS device and access the Test devices tab from your Profile settings page . Manually register a device from the Test devices tab from your Profile settings page . After registering your device on Bitrise, make sure to register it on the Apple Developer Portal as well. We recommend using the Xcode Archive & Export for iOS Step which can: Register all available test devices of the app . Register a selection of test devices, defined in a text file that contains a list of their UDIDs . Apple Developer Portal device limit There is a limit on registrable devices on the Apple Developer Portal, so make sure to check the list of available test devices of an app before you use the Xcode Archive & Export for iOS Step to register devices! " }, 
{ "title" : "Register an iOS device using Safari ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43294-registering-a-test-device.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-396a5bdf-f35f-cb12-30b3-bff3606db38e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Register an iOS device using Safari ", 
"snippet" : "The most comfortable way to register your iOS test device on bitrise.io is to open bitrise.io with Safari. This way we can open your device’s Settings and create a temporary profile to get your Unique Device Identifier (UDID). This way you don’t have to look for it and manually copy\/paste it. Clear ...", 
"body" : "The most comfortable way to register your iOS test device on bitrise.io is to open bitrise.io with Safari. This way we can open your device’s Settings and create a temporary profile to get your Unique Device Identifier (UDID). This way you don’t have to look for it and manually copy\/paste it. Clear the cache When trying to install an app from the public install page, you should clear the cache: click the link appearing in the If you synced your settings from your old device, you need to clear the cache and register your new device line. The link redirects to the Profile settings page where you can follow the procedure described below. Read more about installing an app from the public install page in our Deploying an iOS app to Bitrise.io guide. Open Safari in non-incognito mode on your iOS device and log into bitrise.io . Go to your Profile . Tap Account Settings . Tap Test devices on the left. Tap Register this device . In the pop-up window, Tap Allow so that bitrise.io can show your configuration profile. Tap Install when the Install Profile dialog appears. Enter your devices’s passcode. Tap Install on the Install Profile again. Now you can see your UDID and your iOS device name in the Register device dialog. Tap Register device . Register this test device to the Apple Developer Portal with the correct provisioning profile added to your device or use our Auto Provisioning step with enabling profile generation. If you go back to Test devices , you can see the registered device: You can delete the registered device any time if you click on the Remove button. " }, 
{ "title" : "Register a test device manually ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43294-registering-a-test-device.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-7324669b-9b5e-1b90-9df3-92ddce0b3b5a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Register a test device manually ", 
"snippet" : "On bitrise.io, open the account selector menu on the top right and select Profile settings . On the menu on the left side, select Test devices . Click on Register device manually . In the Register device dialog, fill out the Title field and the Identifier field with your device’s UDID. Click Registe...", 
"body" : "On bitrise.io, open the account selector menu on the top right and select Profile settings . On the menu on the left side, select Test devices . Click on Register device manually . In the Register device dialog, fill out the Title field and the Identifier field with your device’s UDID. Click Register Devices . You can get your UDID if you plug your device into a computer, and open iTunes. Under Summary , you should see a Serial Number. If you click on it, it will reveal your device’s UDID which you can paste into the Identifier field on our Test Devices . Register this test device to the Apple Developer Portal with the correct provisioning profile added to your device or use our Auto Provisioning Step with enabling profile generation. Now you can see your registered test device under the Registered test devices section. You can remove this registered device any time if you click the orange x icon. " }, 
{ "title" : "Checking the available test devices for an app ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43294-registering-a-test-device.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-ea7efa99-ea0f-d7b9-11b0-5a303b71a152", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Checking the available test devices for an app ", 
"snippet" : "For any Bitrise app , you can check out the registered test devices available on the App Settings page. This will show an aggregated list of all registered test devices associated with users who have access to your app, regardless of their role. You can use any of those devices to run tests of your ...", 
"body" : "For any Bitrise app , you can check out the registered test devices available on the App Settings page. This will show an aggregated list of all registered test devices associated with users who have access to your app, regardless of their role. You can use any of those devices to run tests of your app. You can also download the list of registered devices as a .json file. Open your app on Bitrise with a user that has the Admin role on the app . On the main page of the app, click on the App Settings icon: . On the menu on the left side, select Test devices . Optionally, you can download the entire list as a .json file: click the Download as json button. " }, 
{ "title" : "Registering devices on the Apple Developer Portal with the Xcode Archive Step ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43294-registering-a-test-device.html#UUID-f8def6f5-0edf-0478-fe79-a7b56ecf368f_UUID-7898f956-b06e-c2c1-2217-b1e3e3ea12eb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Registering test devices for iOS apps \/ Registering devices on the Apple Developer Portal with the Xcode Archive Step ", 
"snippet" : "The Xcode Archive & Export for iOS Step allows you to automatically register your test devices on the Apple Developer Portal. By default, the Step registers all test devices that you registered to your Bitrise account but you can configure it to only register a specific selection of devices. Apple D...", 
"body" : "The Xcode Archive & Export for iOS Step allows you to automatically register your test devices on the Apple Developer Portal. By default, the Step registers all test devices that you registered to your Bitrise account but you can configure it to only register a specific selection of devices. Apple Developer Portal limit Please note that the Apple Developer Portal has a limit for devices registered for testing purposes, typically set at 100 devices per account. Devices registered with the Xcode Archive & Export for iOS Step count towards this limit and you can only remove registered devices once a year. " }, 
{ "title" : "Device testing for iOS ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43295-device-testing-for-ios.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS ", 
"snippet" : "With Bitrise’s iOS device testing solution, you can run iOS tests on physical devices without having to set up and register your own devices. With Bitrise’s iOS device testing solution, you can run UI tests for iOS apps on physical devices without having to set up and register your own devices: you ...", 
"body" : "With Bitrise’s iOS device testing solution, you can run iOS tests on physical devices without having to set up and register your own devices. With Bitrise’s iOS device testing solution, you can run UI tests for iOS apps on physical devices without having to set up and register your own devices: you just need to use our dedicated Steps and set the device type(s) on which you want to test your app . There are no limits to using the Step, other than your overall build time limit. It also works for iOS apps developed using other frameworks, such as Flutter or React Native. Our device testing solution is based on Firebase Test Lab : it uses real, production devices running in a Google data center to test your app. The devices are flashed with updated APIs and have customizable locale settings. You can find the resulting logs, videos and screenshots on Bitrise. For iOS apps, Firebase Test Lab runs XCTest tests. Find the list of the available devices here . Limitations You might be limited by your overall build time. Also note that a single build can contain only one  iOS Device Testing  Step, performing one type of test. This is because Bitrise sends the build slug to Firebase Test Lab. Sending the same build slug results in a  Build already exists error. " }, 
{ "title" : "Running device tests with Firebase for iOS apps ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43295-device-testing-for-ios.html#UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1_UUID-f5132e42-4cdc-2fdb-93da-bb091bf3cfcd", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS \/ Running device tests with Firebase for iOS apps ", 
"snippet" : "To run device tests for iOS apps with the Firebase Test Lab solution, you will need to add two Steps to your Workflow: Xcode Build for testing for iOS . iOS Device Testing . Multiplatform apps The Step can run device tests for iOS apps built with other frameworks, such as Flutter or React Native. Yo...", 
"body" : "To run device tests for iOS apps with the Firebase Test Lab solution, you will need to add two Steps to your Workflow: Xcode Build for testing for iOS . iOS Device Testing . Multiplatform apps The Step can run device tests for iOS apps built with other frameworks, such as Flutter or React Native. You just need to make sure the Xcode Build for testing for iOS Step can access your app's .xcodeproj or .xcworkspace file. The Xcode Build for testing for iOS Step performs the xcodebuild command’s build-for-testing action: it builds the tests defined in your iOS app’s Xcode scheme . The Step exports a .zip file that contains your test directory (by default, it’s Debug-iphoneos ) and the xctestrun file. To use this Step, you will need code signing files for the test app. You can choose between using automatic provisioning and manual provisioning. The iOS Device Testing Step takes the path to this .zip file - exported as an Environment Variable - as input to run your tests and export the test results to Bitrise. Automatic vs manual code signing asset management The Xcode Build for testing for iOS Step can manage your code signing assets without you having to manually manage your provisioning profiles. This only requires you to select the relevant inputs in the Step (see below) and upload the right certificates to the Code Signing tab. This is the automatic code signing asset management method. If you decide to chose the manual code signing asset management , then add the Certificate and Profile Installer Step before the Xcode Build for testing for iOS Step. The former will take care of the code signing asset management while the latter builds your project. Make sure the Automatic code signing method input of the Xcode Build for testing for iOS Step is set to off . The instructions below detail the steps of setting up automatic code signing asset management on Bitrise with the Xcode Build for testing for iOS Step. Workflow Editor bitrise.yml Add the Xcode Build for testing for iOS Step to your Workflow. Build for testing This guide only mentions the most important inputs for setting up an app for device testing. For more information about the Step, see Xcode Build for testing for iOS . In the Scheme name input, set the Xcode Scheme you want to use. By default, the value of the input is the $BITRISE_SCHEME Environment Variable which is stored when your app is created. In the Build Configuration input, add the name of the Xcode build configuration you want to use. If no configuration is specified, the Xcode project's default build configuration will be used. Set a destination option for xcodebuild in the Device destination specifier input of the Step. The default value is generic\/platform=ios : this means the tests can be run on any iOS device. Set the Automatic code signing method input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Add the iOS Device Testing Step to the Workflow.The Step has to come after the Xcode Build for testing for iOS Step. API setting inputs The inputs related to the Test API ( Test API's base URL and API token cannot be changed on the graphical UI. You should not attempt to modify their values. In the Test devices input field, specify the devices on which you want to test the app. Find the list of the available devices here . You can add multiple devices to the input, in the following format: deviceID,version,language,orientation Make sure you have the Deploy to Bitrise.io Step in your Workflow, with version 1.4.1 or newer. With the older versions of the Step, you won’t be able to check your results on the Test Reports page! Start a build . Add the xcode-build-for-test Step to your Workflow. Build for testing This guide only mentions the most important inputs for setting up an app for device testing. For more information about the Step, see Xcode Build for testing for iOS . my-workflow:\n steps:\n - git-clone: {}\n - xcode-build-for-test:\n inputs:\n In the scheme input, set the Xcode Scheme you want to use. By default, the value of the input is the $BITRISE_SCHEME Environment Variable which is stored when your app is created. my-workflow:\n steps:\n - git-clone: {}\n - xcode-build-for-test:\n inputs:\n - scheme: $BITRISE_SCHEME\n In the configuration input, add the name of the Xcode build configuration you want to use. If no configuration is specified, the Xcode project's default build configuration will be used. my-workflow:\n steps:\n - git-clone: {}\n - xcode-build-for-test:\n inputs:\n - scheme: $BITRISE_SCHEME\n - configuration: Debug\n Set a destination option for xcodebuild in the destination input of the Step. The default value is generic\/platform=ios : this means the tests can be run on any iOS device. my-workflow:\n steps:\n - git-clone: {}\n - xcode-build-for-test:\n inputs:\n - scheme: $BITRISE_SCHEME\n - configuration: Debug\n - destination: generic\/platform=iOS\n Set the automatic_code_signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . my-workflow:\n steps:\n - git-clone: {}\n - xcode-build-for-test:\n inputs:\n - scheme: $BITRISE_SCHEME\n - configuration: Debug\n - destination: generic\/platform=iOS\n - automatic_code_signing: api-key\n Add the virtual-device-testing-for-ios Step to the Workflow. The Step has to come after the xcode-build-for-test Step. my-workflow:\n steps:\n - git-clone: {}\n - xcode-build-for-test:\n inputs:\n - scheme: $BITRISE_SCHEME\n - configuration: Debug\n - destination: generic\/platform=iOS\n - automatic_code_signing: api-key\n - virtual-device-testing-for-ios:\n inputs:\n In the test_devices input field, specify the devices on which you want to test the app. Find the list of the available devices here . You can add multiple devices to the input, in the following format: deviceID,version,language,orientation my-workflow:\n steps:\n - git-clone: {}\n - xcode-build-for-test:\n inputs:\n - scheme: $BITRISE_SCHEME\n - configuration: Debug\n - destination: generic\/platform=iOS\n - automatic_code_signing: api-key\n - virtual-device-testing-for-ios:\n inputs:\n - test_devices: 'iphone8,14.7,en,portrait\n Make sure you have the deploy-to-bitrise-io Step in your Workflow, with version 1.4.1 or newer. With the older versions of the Step, you won’t be able to check your results on the Test Reports page! fmy-workflow:\n steps:\n - git-clone: {}\n - xcode-build-for-test:\n inputs:\n - scheme: $BITRISE_SCHEME\n - configuration: Debug\n - destination: generic\/platform=iOS\n - test_plan: test\n - automatic_code_signing: api-key\n - project_path: $BITRISE_PROJECT_PATH\n - virtual-device-testing-for-ios:\n inputs:\n - test_devices: 'iphone8,14.7,en,portrait'\n - deploy-to-bitrise-io: {} Start a build . If all goes well, you should be able to view your results among the build artifacts or in the Test Reports add-on . " }, 
{ "title" : "Checking test results ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43295-device-testing-for-ios.html#UUID-eb9315e2-7ece-a2d8-dc0b-df35239335b1_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for iOS \/ Checking test results ", 
"snippet" : "Test Reports display the most important information about all the tests you ran on the Test Summary tab. You will see all the tests you ran, their duration, and their results. You can also click on the tabs of the individual tests to see their details. To access the result of a particular test: Find...", 
"body" : "Test Reports display the most important information about all the tests you ran on the Test Summary tab. You will see all the tests you ran, their duration, and their results. You can also click on the tabs of the individual tests to see their details. To access the result of a particular test: Find your app on the Dashboard, and select it. On the app's main page, select the build you want to check out. Go to the  Tests tab. You can see failed tests on the Tests tab itself. If you had no failed tests, click the View Test Reports button. On the Test Summary tab, find the test you want to check. Alternatively, on the top bar, click the tab of the test set you want to check out.To filter tests based on their results, open the menu on the top right, which is set to All by default. Click Test cases to see the details. UI tests are grouped according to device while unit tests are grouped according to test cases. You will find: The total number of tests you ran, as well as the ratio of successful and failed tests. The duration of each individual test (both unit tests and UI tests). In the case of UI tests, the orientation and the locale of the device. You can check, depending on the test type: Individual test cases Performance data Videos Screenshots Test artifacts Logs As noted above, this depends on test type, too: for unit tests, you won’t see screenshots or videos, of course. " }, 
{ "title" : "Running Android unit tests ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43296-android-unit-tests.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Android unit tests ", 
"snippet" : "You can perform unit tests using the Android Unit Test Step, and view the results in the Test Reports Add-on. Unit tests are useful if you want to verify individual code blocks, catch bugs or prevent crashes as early as possible. On Bitrise, you can run Android unit tests easily with the Android Uni...", 
"body" : "You can perform unit tests using the Android Unit Test Step, and view the results in the Test Reports Add-on. Unit tests are useful if you want to verify individual code blocks, catch bugs or prevent crashes as early as possible. On Bitrise, you can run Android unit tests easily with the Android Unit Test Step . The Step finds and runs all unit tests included in the specified module and variant of your Android project. The Step can also export the results directly to the Test Reports add-on . Running multiple tests in parallel You can run multiple unit tests in parallel, for different devices or shards, by using the Pipelines feature: Currently supported use cases for the Android platform. To run your unit tests: Workflow Editor bitrise.yml Make sure you included unit tests in your Android project. Add the Android Unit Test Step to your Workflow . Make sure the Project Location input points to the root directory of your Android project. The root directory is the directory where your build.gradle file exists. If you configured your Android project automatically when adding it as an app on Bitrise, you don't have to change the default value. In the Module and Variant inputs, set the module and the variant you want to test. Leave the inputs blank to test all modules and\/or variants. You can check the available modules and variants of your project in the Project window in Android Studio . In the Options input group, you can pass additional Gradle arguments to the build task in the Additional Gradle Arguments input. If you have custom output directories configured for the test results of the tests in your project, configure the Step to look for the test results in the correct location when exporting them: The Local unit test HTML result directory pattern input sets the directory for HTML test results. The Local unit test XML result directory pattern input sets the directory for XML test results. Both directories are zipped and exported to BITRISE_DEPLOY_DIR . This ensures that your test results can be viewed, for example, in the Test Reports add-on. If you don't have custom output directories configured, you do not need to change these inputs: the default values will work. Add the Deploy to Bitrise.io Step to your Workflow to be able to view your test results in the Test reports add-on . Make sure you included unit tests in your Android project. Add the android-unit-test Step to your Workflow. my-workflow:\n steps:\n - git-clone: {}\n - android-unit-test:\n inputs:\n Make sure the project_location input points to the root directory of your Android project. The root directory is the directory where your build.gradle file exists. If you configured your Android project automatically when adding it as an app on Bitrise, you don't have to change the default value. my-workflow:\n steps:\n - git-clone: {}\n - android-unit-test:\n inputs:\n - project_location: $BITRISE_SOURCE_DIR\n In the module and variant inputs, set the module and the variant you want to test. If you don't set these inputs, the Step will test all modules and\/or variants. You can check the available modules and variants of your project in the Project window in Android Studio . my-workflow:\n steps:\n - git-clone: {}\n - android-unit-test:\n inputs:\n - module: app\n - variant: debug\n - project_location: $BITRISE_SOURCE_DIR\n In the arguments input, you can pass additional Gradle arguments to the build task. my-workflow:\n steps:\n - git-clone: {}\n - android-unit-test:\n inputs:\n - module: app\n - variant: debug\n - arguments: --task\n - project_location: $BITRISE_SOURCE_DIR\n If you have custom output directories configured for the test results of the tests in your project, configure the Step to look for the test results in the correct location when exporting them: The report_path_pattern input sets the directory for HTML test results. The result_path_pattern input sets the directory for XML test results. my-workflow:\n steps:\n - git-clone: {}\n - android-unit-test:\n inputs:\n - module: app\n - variant: debug\n - arguments: --task\n - report_path_pattern: '*build\/reports\/tests'\n - result_path_pattern: '*build\/test-results'\n - project_location: $BITRISE_SOURCE_DIR\n Both directories are zipped and exported to BITRISE_DEPLOY_DIR . This ensures that your test results can be viewed, for example, in the Test Reports add-on. If you don't have custom output directories configured, you do not need to change these inputs: the default values will work. Add the deploy-to-bitrise-io Step to your Workflow to be able to view your test results in the Test reports add-on . my-workflow:\n steps:\n - git-clone: {}\n - android-unit-test:\n inputs:\n - module: app\n - variant: debug\n - arguments: --task\n - report_path_pattern: '*build\/reports\/tests'\n - result_path_pattern: '*build\/test-results'\n - project_location: $BITRISE_SOURCE_DIR\n - deploy-to-bitrise-io: {}\n " }, 
{ "title" : "Device testing for Android ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43297-device-testing-for-android.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android ", 
"snippet" : "With Bitrise’s Android virtual device testing solution, you can run UI tests on emulators without having to set up and register your own devices. With Bitrise’s Android virtual device testing solution, you can run UI tests on emulators without having to set up and register your own devices. Limitati...", 
"body" : "With Bitrise’s Android virtual device testing solution, you can run UI tests on emulators without having to set up and register your own devices. With Bitrise’s Android virtual device testing solution, you can run UI tests on emulators without having to set up and register your own devices. Limitations The maximum duration for virtual device testing is 30 minutes. A single build can contain only one  Virtual Device Testing  Step performing one type of test ( instrumentation ,  robo  or  gameloop ). Our device testing solution is based on Firebase Test Lab . You can find the resulting logs, videos and screenshots on Bitrise.   " }, 
{ "title" : "Running tests ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43297-device-testing-for-android.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-62d837d0-e26b-a973-b86e-af97daffe756", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests ", 
"snippet" : "With Bitrise, you can choose from 3 different test types: robo (default test type in Bitrise). instrumentation. gameloop. If you want to read up on the difference between these test types, take a look at  Firebase’s documentation. There is a small difference between configuring your workflow for rob...", 
"body" : "With Bitrise, you can choose from 3 different test types: robo (default test type in Bitrise). instrumentation. gameloop. If you want to read up on the difference between these test types, take a look at  Firebase’s documentation. There is a small difference between configuring your workflow for robo and instrumentation tests, so let’s see them separately! " }, 
{ "title" : "Running robo tests ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43297-device-testing-for-android.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-8efdb155-6a91-51d4-9444-a7f474c98b11", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests ", 
"snippet" : "Workflow Editor bitrise.yml Open the Workflow you want to use in the Workflow Editor. Add the  Android Build  Step to your Workflow to export an APK. The Step stores the APK path in an Env Var . You will need this Env Var later. Add the  Debug  task to the  Variant  Step input field. Add  Virtual De...", 
"body" : "Workflow Editor bitrise.yml Open the Workflow you want to use in the Workflow Editor. Add the  Android Build  Step to your Workflow to export an APK. The Step stores the APK path in an Env Var . You will need this Env Var later. Add the  Debug  task to the  Variant  Step input field. Add  Virtual Device Testing for Android  Step after the  Android Build  Step. Set the  APK path  input field. Set the Test type input to robo . Add the type of test device in the  Test devices  input field. If choosing a different device than the default, your input should have the format of  deviceID , version , language , orientation  separated with , . Find the list of the available devices  here . Start a build and  check your test results . In the bitrise.yml file, find the Workflow you want to use or create a new one. Add the  android-build  Step to your Workflow. The Step stores the APK path in an Env Var . You will need this Env Var later. my-workflow:\n steps:\n - git-clone: {}\n - android-build:\n inputs:\n Set the variant input to Debug . my-workflow:\n steps:\n - git-clone: {}\n - android-build:\n inputs:\n - variant: Debug\n Add the virtual-device-testing-for-android Step. my-workflow:\n steps:\n - git-clone: {}\n - android-build:\n inputs:\n - variant: Debug\n - virtual-device-testing-for-android:\n inputs:\n Set the  app_path  input field: by default, its value is the $BITRISE_APK_PATH Env Var. This Env Var is exported by the android-build Step. my-workflow:\n steps:\n - git-clone: {}\n - android-build:\n inputs:\n - variant: Debug\n - virtual-device-testing-for-android:\n inputs:\n - app_path: $BITRISE_APK_PATH\n Set the test_type input to robo . my-workflow:\n steps:\n - git-clone: {}\n - android-build:\n inputs:\n - variant: Debug\n - virtual-device-testing-for-android:\n inputs:\n - test_type: robo\n - app_path: $BITRISE_APK_PATH\n Add the type of test device in the  test_devices  input field. Your input should have the format of device ID , version , language , orientation  separated with a   , . Supported models You can check the supported device models by running the gcloud firebase test android models list --filter=virtualgcloud firebase test android models list --filter=virtual command in the Google Cloud CLI. my-workflow:\n steps:\n - git-clone: {}\n - android-build:\n inputs:\n - variant: Debug\n - virtual-device-testing-for-android:\n inputs:\n - test_type: robo\n - app_path: $BITRISE_APK_PATH\n - test_devices: 'Nexus9,24,en,portrait'\n Start a build and check your test results. " }, 
{ "title" : "Setting user input with Robo directives for successful robo tests ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43297-device-testing-for-android.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-b0375600-59f4-d513-9205-b1f7733c5541", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running tests \/ Running robo tests \/ Setting user input with Robo directives for successful robo tests ", 
"snippet" : "If your app needs specific user interaction for a successful robo test, you can use the Robo Directives input field to set those necessary inputs. For example, certain UI elements of the app are only accessible for robo testing if the required user inputs (username and email address) are populated f...", 
"body" : "If your app needs specific user interaction for a successful robo test, you can use the Robo Directives input field to set those necessary inputs. For example, certain UI elements of the app are only accessible for robo testing if the required user inputs (username and email address) are populated for log in. Click the Virtual Device Testing for Android Step in your workflow. Click the Robo Test section. Find the Robo directives input field and set your required user input directives. provide a comma-separated list of key-value pairs, where the key is the Android resource name of the target UI element, and the value is the text string. EditText fields are supported but not text fields in WebView UI elements. For example, you could use the following parameter for custom login: username_resource,username,ENTER_TEXT\npassword_resource,password,ENTER_TEXT\nloginbtn_resource,,SINGLE_CLICK One directive per line, the parameters are separated with , character. For example: ResourceName,InputText,ActionType. Based on the input you provide, you can successfully run a robo test (even on pages that are only accessible with a specific user input) and check the test results on the Test Reports page. The test results can be, for example: Screenshots. Recorded video. Logs. Files. Here is a screenshot of a successful robo test, where the robo test got all the way through to My application by populating the email and password fields first with the pre-defined directives from the Robo directives. " }, 
{ "title" : "Running instrumentation tests ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43297-device-testing-for-android.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-6e3a8868-ae45-f4a2-c334-dd16be0f7e75", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Running instrumentation tests ", 
"snippet" : "Workflow Editor bitrise.yml Open the Workflow you want to use in the Workflow Editor. Add the  Android Build for UI testing  Step to your Workflow. To export an APK and a Test APK, you have to set the following input fields in the  Android Build for UI testing  Step. Project Location : the root dire...", 
"body" : "Workflow Editor bitrise.yml Open the Workflow you want to use in the Workflow Editor. Add the  Android Build for UI testing  Step to your Workflow. To export an APK and a Test APK, you have to set the following input fields in the  Android Build for UI testing  Step. Project Location : the root directory of your Android project. Module : set the module you wish to build. Variant : set the variant you wish to build (usually  Debug ). The Step outputs will be  BITRISE_APK_PATH  (which is the path of the generated APK after filtering) and  BITRISE_TEST_APK_PATH  (which is the path of the generated test APK after filtering). Add the  Virtual Device Testing for Android Step right after the  Android Build for UI testing  Step. Set the  Test type  input to instrumentation . Our  Android Build for UI Testing  Step exports an APK and a Test APK and their paths get automatically set in the  APK path  and the Test APK path  input fields of the  Virtual Device Testing for Android  Step. Add the type of test device in the  Test devices  input field. If choosing a different device than the default, your input should have the format of device ID , version , language , orientation  separated with a   , . Start a build and check your test results. In the bitrise.yml file, find the Workflow you want to use or create a new one. Add the  android-build-for-ui-testing  Step to your Workflow. my-workflow:\n steps:\n - git-clone: {}\n - android-build-for-ui-testing:\n inputs:\n To export an APK and a Test APK, you have to set the following input fields in the  Android Build for UI testing  Step. project_location : the root directory of your Android project. module : set the module you wish to build. variant : set the variant you wish to build (usually debug). my-workflow:\n steps:\n - git-clone: {}\n - android-build-for-ui-testing:\n inputs:\n - module: module\n - variant: variant\n - project_location: $BITRISE_SOURCE_DIR\n The Step outputs will be  BITRISE_APK_PATH  (which is the path of the generated APK after filtering) and  BITRISE_TEST_APK_PATH  (which is the path of the generated test APK after filtering). Add the virtual-device-testing-for-android Step right after the  Android Build for UI testing  Step. my-workflow:\n steps:\n - git-clone@8: {}\n - android-build-for-ui-testing:\n inputs:\n - module: module\n - variant: variant\n - project_location: $BITRISE_SOURCE_DIR\n - virtual-device-testing-for-android:\n inputs:\n Set the  test_type input to  instrumentation . Our  android-build-for-ui-testing  Step exports an APK and a Test APK and their paths get automatically set in the  app_path  and the test_apk_path  input fields of the  virtual-device-testing-for-android  Step. my-workflow:\n steps:\n - git-clone: {}\n - android-build-for-ui-testing:\n inputs:\n - module: module\n - variant: variant\n - apk_path_pattern: '*\/build\/outputs\/apk\/*.apk'\n - arguments: arg\n - project_location: $BITRISE_SOURCE_DIR\n - virtual-device-testing-for-android:\n inputs:\n - test_type: instrumentation\n - app_path: $BITRISE_APK_PATH\n - test_apk_path: $BITRISE_TEST_APK_PATH\n Add the type of test device in the  test_devices  input field. Your input should have the format of device ID , version , language , orientation  separated with a   , . my-workflow:\n steps:\n - git-clone: {}\n - android-build-for-ui-testing:\n inputs:\n - module: module\n - variant: variant\n - apk_path_pattern: '*\/build\/outputs\/apk\/*.apk'\n - arguments: arg\n - project_location: $BITRISE_SOURCE_DIR\n - virtual-device-testing-for-android:\n inputs:\n - test_devices: 'Nexus9,24,en,portrait'\n - test_type: instrumentation\n - test_apk_path: $BITRISE_TEST_APK_PATH\n - app_path: $BITRISE_APK_PATH\n Start a build and check your test results. " }, 
{ "title" : "Checking test results ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43297-device-testing-for-android.html#UUID-1d5b5ee4-cc81-963f-23c9-7526e4f9a301_UUID-a6573334-92a3-3b0f-0e12-810cc75983a5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Device testing for Android \/ Checking test results ", 
"snippet" : "Test Reports display the most important information about all the tests you ran on the Test Summary tab. You will see all the tests you ran, their duration, and their results. You can also click on the tabs of the individual tests to see their details. To access the result of a particular test: Find...", 
"body" : "Test Reports display the most important information about all the tests you ran on the Test Summary tab. You will see all the tests you ran, their duration, and their results. You can also click on the tabs of the individual tests to see their details. To access the result of a particular test: Find your app on the Dashboard, and select it. On the app's main page, select the build you want to check out. Go to the  Tests tab. You can see failed tests on the Tests tab itself. If you had no failed tests, click the View Test Reports button. On the Test Summary tab, find the test you want to check. Alternatively, on the top bar, click the tab of the test set you want to check out.To filter tests based on their results, open the menu on the top right, which is set to All by default. Click Test cases to see the details. UI tests are grouped according to device while unit tests are grouped according to test cases. You will find: The total number of tests you ran, as well as the ratio of successful and failed tests. The duration of each individual test (both unit tests and UI tests). In the case of UI tests, the orientation and the locale of the device. You can check, depending on the test type: Individual test cases Performance data Videos Screenshots Test artifacts Logs As noted above, this depends on test type, too: for unit tests, you won’t see screenshots or videos, of course. " }, 
{ "title" : "Running tests in the Visual Studio App Center ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43298-running-tests-in-the-visual-studio-app-center.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running tests in the Visual Studio App Center ", 
"snippet" : "Upload and schedule tests on the Visual Studio App Center for your apps using the App Center upload and schedule tests Step. Upload and schedule tests on the Visual Studio App Center for your apps. The following testing frameworks are available: Appium. Espresso. Calabash. XCUITest. In the Workflow ...", 
"body" : "Upload and schedule tests on the Visual Studio App Center for your apps using the App Center upload and schedule tests Step. Upload and schedule tests on the Visual Studio App Center for your apps. The following testing frameworks are available: Appium. Espresso. Calabash. XCUITest. In the Workflow Editor, add the App Center upload and schedule tests Step to your Workflow. The Step has multiple required inputs. You can find the value of these inputs by setting up your test on the Visual Studio App Center. Log in to the App Center. Prepare your test for upload . Create an App Center project. Navigate to Test runs tab and start a New test run : Select the devices you want to test your app on. Configure the test run: choose a test series, a system language and a test framework. On the Submit tab you will find every required input for the step in the Upload and schedule test section. Click on Done . On Bitrise, open the Workflow Editor and fill in the required inputs of the Step. You will need to: Get an API token. Set a target app. Set a test framework - you can see the available options. Add the device selection slug. Add the name of the test series. Set the system locale (for example, en_US ) for the test run. Set the path to an application file, either .ipa or .apk. Set the path to a test directory. Use the appropriate directory for the chosen test framework. " }, 
{ "title" : "Running Detox tests on Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43299-running-detox-tests-on-bitrise.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise ", 
"snippet" : "Detox is a gray box end-to-end tests and automation library for mobile apps built with React Native. If you have a React Native app on Bitrise, you can run Detox tests. Detox is a gray box end-to-end tests and automation library for mobile apps built with React Native. It supports both iOS and Andro...", 
"body" : "[video] Detox is a gray box end-to-end tests and automation library for mobile apps built with React Native. If you have a React Native app on Bitrise, you can run Detox tests. Detox is a gray box end-to-end tests and automation library for mobile apps built with React Native. It supports both iOS and Android apps. If you have a React Native app on Bitrise, you can run Detox tests. " }, 
{ "title" : "Before you start ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43299-running-detox-tests-on-bitrise.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-24923a54-abc4-8634-c049-8ad6b70ed917", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Before you start ", 
"snippet" : "Running Detox requires: A Mac with a macOS (El Capitan 10.11 or newer version). Xcode 8.3 or newer version with Xcode command line tools. A working React Native app. Install and set up Detox for your project . You will need to install Homebrew, Node.js and applesimutils, as well as the Detox command...", 
"body" : "Running Detox requires: A Mac with a macOS (El Capitan 10.11 or newer version). Xcode 8.3 or newer version with Xcode command line tools. A working React Native app. Install and set up Detox for your project . You will need to install Homebrew, Node.js and applesimutils, as well as the Detox command line tools. Add Detox to your project and then create and run Detox tests locally. If you have an Android app, go through  this guide  after the initial setup process. Once you are done, you can test your Detox-configured project on Bitrise. " }, 
{ "title" : "Running a Detox test ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43299-running-detox-tests-on-bitrise.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-0a25c74a-1369-5a42-313c-7d4643d1c329", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Running a Detox test ", 
"snippet" : "Create a release device configuration either in the package.json file under the detox section, or in a separate Detox configuration file. For more information on setting up a Detox configuration, check out the documentation: Project setup . Example: \"detox\": { \"configurations\": { \"ios.sim.debug\": { ...", 
"body" : "Create a release device configuration either in the package.json file under the detox section, or in a separate Detox configuration file. For more information on setting up a Detox configuration, check out the documentation: Project setup . Example: \"detox\": {\n \"configurations\": {\n \"ios.sim.debug\": {\n \"binaryPath\": \"ios\/build\/Build\/Products\/Debug-iphonesimulator\/SampleProjectReactNative.app\",\n \"build\": \"xcodebuild -project ios\/SampleProjectReactNative.xcodeproj -scheme SampleProjectReactNative -configuration Debug -sdk iphonesimulator -derivedDataPath ios\/build -UseNewBuildSystem=NO\",\n \"type\": \"ios.simulator\",\n \"name\": \"iPhone 8\"\n },\n \"ios.sim.release\": {\n \"binaryPath\": \"ios\/build\/Build\/Products\/Release-iphonesimulator\/SampleProjectReactNative.app\",\n \"build\": \"xcodebuild -project ios\/SampleProjectReactNative.xcodeproj -scheme SampleProjectReactNative -configuration Release -sdk iphonesimulator -derivedDataPath ios\/build -UseNewBuildSystem=NO\",\n \"type\": \"ios.simulator\",\n \"name\": \"iPhone 8\"\n }\n }, On  bitrise.io , go to your project and open the Workflow Editor. Switch to the Workflow you want to use. Add a  Run npm command  Step to your Workflow. Install the Detox CLI and the React Native CLI using the npm command with arguments to run input: install -g detox-cli\ninstall -g react-native-cli Install a test runner. For example, our sample app uses mocha , installed with the yarn Step. To install yarn dependencies, just set the The yarn command to run input’s value to install . Add a Script Step to install the necessary utilities and then run Detox. #!\/bin\/bash\n \n# applesimutils is a collection of utils for Apple simulators\nbrew tap wix\/brew\nbrew install applesimutils\n \n# we are building and testing a release device configuration\ndetox build --configuration ios.sim.release\ndetox test --configuration ios.sim.release --cleanup You can, of course, put each of these commands in separate Script Steps, for the sake of modularity. Run a build. If the build fails, check out our example bitrise.yml file: ---\nworkflows:\n primary:\n steps:\n - activate-ssh-key: {}\n - git-clone:\n inputs:\n - clone_depth: ''\n title: Git Clone Repo\n - yarn@0.0.8:\n inputs:\n - command: install\n - npm@1.0.1:\n inputs:\n - command: install -g detox-cli\n title: Install Detox CLI\n - script@1.1.5:\n inputs:\n - content: |-\n #!\/bin\/bash\n brew tap wix\/brew\n brew install applesimutils\n \n detox build --configuration ios.sim.release\n detox test --configuration ios.sim.release --cleanup\n title: Detox - Build and Test Release App\n - deploy-to-bitrise-io@1.3.18: {}\nTroubleshootin " }, 
{ "title" : "Troubleshooting Detox tests ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43299-running-detox-tests-on-bitrise.html#UUID-a1884560-256b-1ed2-8610-c0f75ad7722c_UUID-628039a1-e3c6-4c60-6fae-3e0e6e7aaa60", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Running Detox tests on Bitrise \/ Troubleshooting Detox tests ", 
"snippet" : "If you run into issues with using Detox on Bitrise, we recommend trying to rebuild the entire Detox package before running the test. To do so, run the following command in your Bitrise build: npm rebuild detox If your Detox tests still fail or hang, contact our support!...", 
"body" : "If you run into issues with using Detox on Bitrise, we recommend trying to rebuild the entire Detox package before running the test. To do so, run the following command in your Bitrise build: npm rebuild detox If your Detox tests still fail or hang, contact our support! " }, 
{ "title" : "Measuring your code coverage with Codecov ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43300-measuring-your-code-coverage-with-codecov.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov ", 
"snippet" : "Codecov is the leading code coverage solution for CI\/CD pipelines, delivering coverage metrics right into your workflow. It integrates directly with Bitrise to provide valuable insights on code quality in order to allow users to ship healthier code with less risk. Codecov provides many features that...", 
"body" : "Codecov is the leading code coverage solution for CI\/CD pipelines, delivering coverage metrics right into your workflow. It integrates directly with Bitrise to provide valuable insights on code quality in order to allow users to ship healthier code with less risk. Codecov provides many features that make test coverage more available and actionable to speed up your development process and to deliver high-quality applications. Some of these features include: Coverage changes overlaid with your source code, making it even easier to identify needed test areas. Multi-language support so you can use Codecov right out of the box. Summary of coverage information directly in your Workflow so that you can add and update tests quickly and effectively. Status checks to block underperforming pull requests from being merged. Seamless coverage report merging for Workflows that upload multiple reports across jobs. Custom coverage information based on groupings using Codecov Flags .   " }, 
{ "title" : "Integrating Codecov with Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43300-measuring-your-code-coverage-with-codecov.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-f1a3a78a-78af-0d01-0d65-1f0e9a95b4b8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ Integrating Codecov with Bitrise ", 
"snippet" : "In order to start using Codecov, you must be generating coverage reports with your preferred coverage tool (for example, Xcode or Gradle). Create an account on https:\/\/codecov.io . Go to repository’s Settings tab on Codecov and copy the repository upload token. Add the Codecov Step to your Workflow ...", 
"body" : "In order to start using Codecov, you must be generating coverage reports with your preferred coverage tool (for example, Xcode or Gradle). Create an account on https:\/\/codecov.io . Go to repository’s Settings tab on Codecov and copy the repository upload token. Add the Codecov Step to your Workflow on Bitrise. Make sure you add the Step after the Steps that test and collect coverage. Add the Codecov upload token as a secret variable, CODECOV_TOKEN , and set the Expose for Pull Requests option to true . Click Add new . Click Save and start a new build to get coverage metrics. Additional options The Codecov Step wraps around the Codecov bash uploader. You can add additional options in the Step listed in our arguments documentation. " }, 
{ "title" : "Viewing your coverage reports on Codecov ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43300-measuring-your-code-coverage-with-codecov.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-2d83a417-93d1-5a39-5c28-74bf981de276", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ Viewing your coverage reports on Codecov ", 
"snippet" : "To view your coverage on Codecov, you can do the following: View the URL supplied on the Codecov Step on Bitrise. Go to  https:\/\/codecov.io  and navigate directly to the applicable pull request or commit. Click on the links provided by Codecov that are available on your code host’s status checks or ...", 
"body" : "To view your coverage on Codecov, you can do the following: View the URL supplied on the Codecov Step on Bitrise. Go to  https:\/\/codecov.io  and navigate directly to the applicable pull request or commit. Click on the links provided by Codecov that are available on your code host’s status checks or pull request comment. " }, 
{ "title" : "What's next? ", 
"url" : "88887-41967-bitrise-docs/88887-43289-testing/88887-43300-measuring-your-code-coverage-with-codecov.html#UUID-a0825290-23c2-2f73-ee6b-49f79247bb96_UUID-4fa0c9d4-d518-63d4-4c1b-7c66136070da", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Testing \/ Measuring your code coverage with Codecov \/ What's next? ", 
"snippet" : "Now that you have code coverage reports, you can take it to the next level with the following suggestions: Set non-blocking status checks to get your developers in the habit of thinking about code coverage. Start working towards code coverage by setting status checks to increase overall coverage on ...", 
"body" : "Now that you have code coverage reports, you can take it to the next level with the following suggestions: Set non-blocking status checks to get your developers in the habit of thinking about code coverage. Start working towards code coverage by setting status checks to increase overall coverage on every pull request. Isolate your coverage reports for different types of tests or different parts of your system with Flags to measure what matters. Already using flags and don’t want to run your entire test suite with every Bitrise CI run? Try out Carryforward Flags to measure only what changes. " }, 
{ "title" : "Deploying ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying ", 
"snippet" : "Deploy your apps to simulators, test devices, or app stores with the help of Bitrise. You can use our Steps or Ship, our dedicated deployment solution. Release Management This section is about deploying apps via Bitrise Steps. For a more granular and fully customisable app release process, we recomm...", 
"body" : "Deploy your apps to simulators, test devices, or app stores with the help of Bitrise. You can use our Steps or Ship, our dedicated deployment solution. Release Management This section is about deploying apps via Bitrise Steps. For a more granular and fully customisable app release process, we recommend using Release Management . Deploying an app on Bitrise means generating an installable binary and then either: Install it on test devices. Upload it to bitrise.io. Deploy it to a simulator. Upload it to online stores. " }, 
{ "title" : "Android deployment ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment ", 
"snippet" : "Deploy Android apps to either bitrise.io, for testing, or to the Google Play Store, for release. Deploy Android apps to either bitrise.io, for testing, or to the Google Play Store, for release. Learn about Google Play API, keystore files and APK flavors. We recommend checking out Ship, our deploymen...", 
"body" : "Deploy Android apps to either bitrise.io, for testing, or to the Google Play Store, for release. Deploy Android apps to either bitrise.io, for testing, or to the Google Play Store, for release. Learn about Google Play API, keystore files and APK flavors. We recommend checking out Ship, our deployment solution that aims to save you a lot of headache in publishing your apps: Deploying with Ship. " }, 
{ "title" : "Deploying Android apps to Bitrise and Google Play ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play ", 
"snippet" : "You can deploy your Android apps to Bitrise or to Google Play by using our dedicated Steps and correctly configuring your project in Google Play Console. This guide describes how you can add your Android project to bitrise.io and deploy the APK or AAB built from your project to Google Play Store . Y...", 
"body" : "You can deploy your Android apps to Bitrise or to Google Play by using our dedicated Steps and correctly configuring your project in Google Play Console. This guide describes how you can add your Android project to bitrise.io and deploy the APK or AAB built from your project to Google Play Store . You need a new service account created in the Google Play Console so that Bitrise can authenticate with Google Play Deploy during your build. The new service account has to be invited to Google Play Console as a user with the appropriate permission. To set up your project for the first time: Register a Google Play Developer Account . If you already have a Google Play Developer account, and have already deployed your app to Google Play Store, skip to Setting up Google Play API access. Go through Setting up Google Play deployment for the first time. " }, 
{ "title" : "Setting up Google Play API access ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-055cf6ac-7b7e-3f19-38d5-c7a1a6746a03", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play API access ", 
"snippet" : "Grant the Google Play API access to your project by creating a service account and granting the necessary user permissions to the service account. Turn on the Google Play Developer API for your project: Enable the API . Create a service account on Google Cloud Platform: Create service accounts . Cre...", 
"body" : "Grant the Google Play API access to your project by creating a service account and granting the necessary user permissions to the service account. Turn on the Google Play Developer API for your project: Enable the API . Create a service account on Google Cloud Platform: Create service accounts . Create a new JSON key for the service account: Create and delete service account keys . Instant download When you click Create at the end of the process, the service account JSON key is automatically downloaded. Make sure to save it as you cannot access or download it again! Invite your service account user on the Users & Permissions page in Google Play Console and grant the necessary permissions to be able to access and release apps on Google Play: Use a service account . Check out the Google Play Developer API guide if you need more information on the process. You have successfully prepared your Google Play Console project. A services credential account has been created which is authorized to manage your releases. " }, 
{ "title" : "Setting up Google Play deployment for the first time ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Setting up Google Play deployment for the first time ", 
"snippet" : "Deploying to Google play publishes your app to Google's online store. When you do it for the first time, this requires a bit more work than simply deploying to bitrise.io . Once the necessary configurations are in place, it becomes very simple. When configuring Google Play deployment for the first t...", 
"body" : "Deploying to Google play publishes your app to Google's online store. When you do it for the first time, this requires a bit more work than simply deploying to bitrise.io . Once the necessary configurations are in place, it becomes very simple. When configuring Google Play deployment for the first time, you need to link your Google Play Developer account to an API project, set up API access, and upload the service account JSON key to Bitrise. Upload the first AAB or APK manually to Google Play using the Google Play Console . Link your Google Play Developer Console to an API project. Set up API Access Clients using a service account : Please note when you create your service account on the Google Developer Console, you have to choose json as Key Type . Grant the necessary rights to the service account with your Google Play Console . Go to Settings , then Users & permissions , then Invite new user . Due to the way the Google Play Publisher API works, you have to grant at least the following permissions to the service account: Access level: View app information. Release management: Manage production releases, manage testing track releases. Store presence: Edit store listing, pricing & distribution. As an optional step, you can add translations to your Store Listing: Translate & localize your app . Connect your Google service account to Bitrise . " }, 
{ "title" : "Deploying an Android app to bitrise.io ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-b3cbb2a1-2ef0-5e48-9204-a678f1c6ce66", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying an Android app to bitrise.io ", 
"snippet" : "In this section, we'll go through how to deploy your Android app to bitrise.io . Deploying to bitrise.io means that the build artifacts generated during the build will be available for download once the build is finished. You can use this to test your app on your own test devices, for example. To de...", 
"body" : "In this section, we'll go through how to deploy your Android app to bitrise.io . Deploying to bitrise.io means that the build artifacts generated during the build will be available for download once the build is finished. You can use this to test your app on your own test devices, for example. To deploy your app to bitrise.io : Workflow Editor bitrise.yml Make sure your Workflow contains the Android Build Step to build your app. Optionally, you can build your app with the Gradle Runner Step. This requires a bit more configuration from you but allows for more extensive customization. Add the Deploy to Bitrise.io Step to your Workflow. Notifying other users You can use the Notify: User Roles and the Notify: Emails inputs of the Step to set up notifications about your deploy. Click the input names to reveal more information about how to configure them. Optionally, set the Enable public page for the App? input of the Step to true so the Step enables the public install page for your app. Run a build. Open the bitrise.yml file of your app. Make sure your Workflow contains the android-build Step to build your app. workflows:\n example-workflow:\n steps:\n - android-build@1:\n Optionally, you can build your app with the gradle-runner Step. This requires a bit more configuration from you but allows for more extensive customization. Set the module and\/or variant input to tell the Step what to build. In this example, we're building a debug variant of the Android project. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n - variant: debug\n - deploy-to-bitrise-io: {} Add the deploy-to-bitrise-io Step to your Workflow. workflows:\n example-workflow:\n steps:\n - android-build@1:\n inputs:\n - variant: debug\n - deploy-to-bitrise-io: {} Notifying other users You can use the notify_user_groups and the notify_email_list inputs of the Step to set up notifications about your deploy: The notify_user_groups input allows you to send notifications based on the access roles granted to users. For example, you can set the input to notify everyone with an Admin and a Developer role. Set multiple roles separated by a comma: - notify_user_groups: admins, testers . The notify_email_list input only accepts Secrets, and the Secret should contain comma-separated lists of email addresses. Optionally, set the Enable public page for the App? input of the Step to true so the Step enables the public install page for your app. Run a build. The Deploy to Bitrise.io Step will deploy the app. You can share the generated binary with your team members using the build’s URL. A bitrise.yml for deploying an Android app to Bitrise In this example, we're building the debug variant of an Android app, and deploy it to bitrise.io, as. " }, 
{ "title" : "Deploying to Google Play ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-e15bf8ff-f1db-86ce-70b2-bcffff596ae1_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying Android apps to Bitrise and Google Play \/ Deploying to Google Play ", 
"snippet" : "Deploying to Google Play requires a signed APK or AAB file and the Google Play Deploy Step . Workflow Editor bitrise.yml If you're trying to deploy your app for the first time, make sure your Google Play configuration is set up correctly and that you uploaded your service account JSON key to Bitrise...", 
"body" : "Deploying to Google Play requires a signed APK or AAB file and the Google Play Deploy Step . Workflow Editor bitrise.yml If you're trying to deploy your app for the first time, make sure your Google Play configuration is set up correctly and that you uploaded your service account JSON key to Bitrise . Uploading the service account JSON key file We recommend uploading the service account JSON key to Bitrise but it is not mandatory: you can store it elsewhere and provide a direct link to it. Open the App settings page, and select Code Signing . On the Android tab, find the uploaded service account JSON key and copy the secret Env Var under its name. For example, BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL . Open your Workflow and add the Google Play Deploy Step to it. In the Service Account JSON key file path input, paste the Environment Variable you copied. Direct path to the service account JSON key file If you don't want to upload the service account JSON key to Bitrise, you can also add a file path right in the Step’s input field where the file path can be local or remote too: For a remote JSON key file you can provide any download location as value, for example, https:\/\/URL\/TO\/key.json . For a local JSON key file you can provide a file path url as value, for example, file:\/\/PATH\/TO\/key.json . In the Package name input, add the package name of your app. In the Track input, add the track where you want to deploy your APK (for example, alpha\/beta\/rollout\/production or any custom track you set). If you're trying to deploy your app for the first time, make sure your Google Play configuration is set up correctly and that you uploaded your service account JSON key to Bitrise . Uploading the service account JSON key file We recommend uploading the service account JSON key to Bitrise but it is not mandatory: you can store it elsewhere and provide a direct link to it. Open your app's bitrise.yml file and add the google-play-deploy Step to it. deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n In the service_account_json_key_path input, you need to provide the path to the service account JSON key file. If you uploaded the file to Bitrise, you can find the Env Var storing its download URL in the Generic File Storage in the Workflow Editor. deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\" If you didn't upload your service account JSON key to Bitrise, you can set a direct path in the input. The file path can point to a local or a remote location. For a remote JSON key file you can provide any download location as value, for example, https:\/\/URL\/TO\/key.json . For a local JSON key file you can provide a file path url as value, for example, file:\/\/PATH\/TO\/key.json . In the package input, add the package name of your app. deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\"\n - package_name: myApp In the track input, add the track where you want to deploy your app binary (for example, alpha\/beta\/rollout\/production or any custom track you set). deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\"\n - package_name: myApp\n - track: alpha That’s all! Start or schedule a build and share the URL with external testers or distribute your app on an app store of your choice! " }, 
{ "title" : "Deploying apps to Huawei AppGallery ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-b6b8ba82-f3da-ff8c-e995-e74faf58f79e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Deploying apps to Huawei AppGallery ", 
"snippet" : "You can deploy your Android apps to Huawei AppGallery via a verified Bitrise Step called Deploy to Huawei App Gallery. The Step can be used to deploy any APK file that you build on Bitrise. You can deploy your Android apps to Huawei AppGallery via a verified Bitrise Step called Deploy to Huawei App ...", 
"body" : "You can deploy your Android apps to Huawei AppGallery via a verified Bitrise Step called Deploy to Huawei App Gallery. The Step can be used to deploy any APK file that you build on Bitrise. You can deploy your Android apps to Huawei AppGallery via a verified Bitrise Step called Deploy to Huawei App Gallery . The Step can be used to deploy any APK file that you build on Bitrise. The Step will need: The App ID of the app. The Client ID of the API client. The Key generated for the API client. To successfully deploy your app to Huawei AppGallery, you need a Workflow that: Builds and signs an APK or AAB file. Includes the Deploy to Huawei App Gallery Step to deploy the app. To configure deploying with the Deploy to Huawei App Gallery Step : Manually upload the first APK of the app to Huawei AppGallery using the website interface on AppGallery Connect. Create a team-level API client on AppGallery Connect . Open the Workflow Editor on Bitrise. Go to the Workflow that you want to use for deploying the app. Add the Deploy to Huawei App Gallery Step after the Steps that build and sign your APK. Open the Config input group. Fill in the required inputs. File path : If you used a Step that automatically exports the BITRISE_APK_PATH Environment Variable after building your APK, leave this unchanged. The Android Build Step is such a Step, for example. File name : The unique name of the APK file. This name will be used when uploading to the AppGallery Connect. App ID : The identified can be found in the App information section on AppGallery Connect. Client ID : The API client ID generated on AppGallery Connect. Key : The key generated with the API client on AppGallery connect. Take a look at the following bitrise.yml file to see an example configuration that uses the Deploy to Huawei AppGallery Step to deploy an app. workflows:\n deploy:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@4: {}\n - cache-pull@2: {}\n - install-missing-android-tools@2:\n inputs:\n - gradlew_path: \"$PROJECT_LOCATION\/gradlew\"\n - gradle-runner@1.9:\n inputs:\n - gradle_file: \"$GRADLE_BUILD_FILE_PATH\"\n - gradle_task: assembleRelease\n - gradlew_path: \"$GRADLEW_PATH\"\n - sign-apk@1.7: {}\n - deploy-to-bitrise-io@1: {}\n - cache-push@2: {}\n - appgallery-deploy@0:\n inputs:\n - huawei_client_id: 'XXX'\n - huawei_client_secret: \"$CLIENT_SECRET\"\n - huawei_app_id: 'YYY' Run a build! If all goes well, you should see your app on Huawei AppGallery. " }, 
{ "title" : "Generate and deploy multiple flavor APKs in a single Workflow ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow ", 
"snippet" : "You can generate, code sign and deploy multiple flavor (multi-flavor) APKs\/AABs in one workflow using our Gradle Runner Step. You can generate, code sign and deploy multiple flavor (multi-flavor) APKs\/AABs in one Workflow using our Gradle Runner Step . Flavor means enhancing an app’s core code with ...", 
"body" : "You can generate, code sign and deploy multiple flavor (multi-flavor) APKs\/AABs in one workflow using our Gradle Runner Step. You can generate, code sign and deploy multiple flavor (multi-flavor) APKs\/AABs in one Workflow using our Gradle Runner Step . Flavor means enhancing an app’s core code with features resulting in different versions of the same app (just to mention the most common examples: free\/paid, demo\/full). Check out the official Android Studio guide on build types, flavors and build variants for more info! In this tutorial, you will need to do some settings to Android Sign and Google Play Deploy Steps - so keep your eyes peeled! " }, 
{ "title" : "Generating multi-flavor APKs ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-e01a2fbb-afa0-55b7-79aa-dd38498e5644", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Generating multi-flavor APKs ", 
"snippet" : "To generate APK files for several different flavors: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Insert Gradle Runner Step after the Android testing Steps. An...", 
"body" : "To generate APK files for several different flavors: Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Insert Gradle Runner Step after the Android testing Steps. Android Build Step can only build one variant so if this Step is part of your Workflow, then we advise you to replace it with our Gradle Runner Step. Click the Config section of the Step. Specify assemble Gradle tasks by adding your build variants’ task names in the Gradle task to run Step input field - as many task names as many build variants you want to build in one workflow. Each task name must be exactly the same build variant name what you have listed in the Build Variant window of Android Studio! Make sure you separate them only with a space, no need for a comma ! In this image, you can see the order of the Steps for the deploy workflow and the Gradle Task to run Step input with two build variants: assembleDemo and assembleFull (for APKs) or bundleDemo and bundleFull (for AABs) Gradle Runner generates a $BITRISE_APK_PATH_LIST \/ $BITRISE_AAB_PATH_LIST Environment Variable output that contains APKs\/AABs built for ALL build variants defined above. We will need this output Environment Variable later. " }, 
{ "title" : "Signing and deploying multi-flavor APKs ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-e64bff14-2d3b-3a15-6d56-bcc6629eaceb_UUID-2f396523-28fc-0362-cc56-cdf8f8ecfa87", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generate and deploy multiple flavor APKs in a single Workflow \/ Signing and deploying multi-flavor APKs ", 
"snippet" : "Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add one Android Sign Step AFTER the Gradle Runner Step if it’s missing from your Workflow . Set the App file path ...", 
"body" : "Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add one Android Sign Step AFTER the Gradle Runner Step if it’s missing from your Workflow . Set the App file path input to $BITRISE_APK_PATH_LIST or $BITRISE_AAB_PATH_LIST depending on which app format you built in the previous Gradle Runner Step. This will make sure all APKs or AABs get code signed with the keystore file you uploaded to the Code Signing tab. The Step will export either the $BITRISE_SIGNED_APK_PATH_LIST or the $BITRISE_SIGNED_AAB_PATH_LIST Environment Variable output which contains the path of the signed app files for each build variant. Make sure you set the following input fields in the Android Sign Step: Keystore url Keystore password Keystore alias Add the Google Play Deploy Step AFTER the Android Sign Step. Set the $BITRISE_SIGNED_APK_PATH or the $BITRISE_SIGNED_AAB_PATH Environment Variable in the APK or App Bundle file path Step input field so that the Google Play Deploy Step can release all your build variants to the app store. " }, 
{ "title" : "Generating and deploying Android app bundles ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles ", 
"snippet" : "Creating an Android App Bundle with Bitrise is almost the same as generating an APK. You have to tweak a few Step inputs to compile an Android App Bundle (.aab) file from your code, then get the bundle signed and deployed to Google Play Store. Creating an Android App Bundle with Bitrise is almost th...", 
"body" : "Creating an Android App Bundle with Bitrise is almost the same as generating an APK. You have to tweak a few Step inputs to compile an Android App Bundle (.aab) file from your code, then get the bundle signed and deployed to Google Play Store. Creating an Android App Bundle with Bitrise is almost the same as generating an APK. All you have to do is tweaking a few Step inputs to compile an Android App Bundle (.aab) file from your code, then get the bundle signed and deployed to Google Play Store. Step versions supporting bundle creation The following Steps must be of the indicated version or newer - older versions of the Steps do NOT support bundle creation. Android Build 0.10.0 or newer Gradle Runner 1.9.0 or newer Android Sign 1.3.0 or newer Deploy to Google Play 1.6.0 or newer " }, 
{ "title" : "Generating an Android App Bundle file ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-1c5e2e5c-e73a-6f92-75ba-5b5843287cc6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Generating an Android App Bundle file ", 
"snippet" : "You can create an Android App Bundle with either the Gradle Runner Step or with the Android Build Step....", 
"body" : "You can create an Android App Bundle with either the Gradle Runner Step or with the Android Build Step. " }, 
{ "title" : "Signing an Android App bundle ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-7bfb8254-55fc-7e3e-fc87-1ea77e2c303f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Signing an Android App bundle ", 
"snippet" : "Signing an Android App Bundle file works the same way as signing an APK: the most convenient method is to upload your keystore files to Bitrise and use the Android Sign Step: Workflow Editor bitrise.yml Upload your keystore file to Bitrise. Open your Workflow in the Workflow Editor, and add the Andr...", 
"body" : "Signing an Android App Bundle file works the same way as signing an APK: the most convenient method is to upload your keystore files to Bitrise and use the Android Sign Step: Workflow Editor bitrise.yml Upload your keystore file to Bitrise. Open your Workflow in the Workflow Editor, and add the Android Sign Step AFTER the build Step. Make sure that the Keystore password , Key alias and the Key password input fields are filled out. Default input values If you have uploaded your keystore file and filled out the required credentials, the Android Sign Step's Keystore url , Keystore password , Keystore alias , and the Private key password inputs will get populated automatically! Make sure the App file path input field displays the same output env var as the output of the build Step you've been using. For example, Android Build exports either a $BITRISE_APK_PATH or a $BITRISE_AAB_PATH Env Var that points to the APK and\/or AAB file the Step generated. By default, this input points at these Env Vars. Further configuration options Check out all the available configuration options of the Android Sign Step in the Workflow Editor. You can: Enable or disable memory page alignment with the Page alignment input. Use apksigner instead of the default jarsigner with the Enables apksigner input. Enforce a specific Signature Scheme with the APK Signature Scheme input. Upload your keystore file to Bitrise. In your app's bitrise.yml file, add the sign-apk Step AFTER the build Step - for example, android-build - in your Workflow . sign-android-workflow:\n steps:\n - android-build: {}\n - sign-apk@1:\n inputs:\n Make sure that the keystore_url , keystore_password , and keystore_alias inputs point to the correct location. sign-android-workflow:\n steps:\n - android-build: {}\n - sign-apk@:\n inputs:\n - keystore_url: \"$BITRISEIO_ANDROID_KEYSTORE_URL\"\n - keystore_password: \"$BITRISEIO_ANDROID_KEYSTORE_PASSWORD\"\n - keystore_alias: \"$BITRISEIO_ANDROID_KEYSTORE_ALIAS\"\n Default input values If you have uploaded your keystore file to Bitrise and filled out the required credentials, you do not have to set the inputs at all: the default values, defined in the Step's step.yml configuration file, will point to the keystore file and the necessary credentials. Make sure the android_app input field displays the same output Env Var as the output of the build Step you've been using. For example, android-build exports either a $BITRISE_APK_PATH or a $BITRISE_AAB_PATH Env Var that points to the APK and\/or AAB file the Step generated. By default, this input points at these Env Vars. The Step will look for a binary to sign at the locations provided in this input. sign-android-workflow:\n steps:\n - android-build: {}\n - sign-apk@1:\n inputs:\n - keystore_url: \"$BITRISEIO_ANDROID_KEYSTORE_URL\"\n - keystore_password: \"$BITRISEIO_ANDROID_KEYSTORE_PASSWORD\"\n - keystore_alias: \"$BITRISEIO_ANDROID_KEYSTORE_ALIAS\"\n - android_app: \"$BITRISE_APK_PATH\\\\n$BITRISE_AAB_PATH\"\n Further configuration options Check out all the available configuration options of the android-sign Step in its step.yml file . You can: Enable or disable memory page alignment with the page_align input. Use apksigner instead of the default jarsigner with the use_apk_signer input. Enforce a specific Signature Scheme with the signer_scheme input. And you should be done! If you would like to read more about Android code signing, check out our guide . " }, 
{ "title" : "Deploying your Android App Bundle to Google Play ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-56c34684-b773-46d1-8748-8f2778180bc9", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play ", 
"snippet" : "Deploying an AAB file isn't significantly different from deploying an APK to Google Play. If you want to check the bundle prior to app store distribution, you can add the Deploy to Bitrise.io Step after the Gradle Runner \/ Android Build Steps. It uploads the bundle into the Artifacts tab of your Bui...", 
"body" : "Deploying an AAB file isn't significantly different from deploying an APK to Google Play. If you want to check the bundle prior to app store distribution, you can add the Deploy to Bitrise.io Step after the Gradle Runner \/ Android Build Steps. It uploads the bundle into the Artifacts tab of your Build’s page. " }, 
{ "title" : "Setting up Google Play deployment for the first time ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-f154a82d-18a9-6953-d054-ccd152cfa76c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Setting up Google Play deployment for the first time ", 
"snippet" : "Deploying to Google play publishes your app to Google's online store. When you do it for the first time, this requires a bit more work than simply deploying to bitrise.io . Once the necessary configurations are in place, it becomes very simple. When configuring Google Play deployment for the first t...", 
"body" : "Deploying to Google play publishes your app to Google's online store. When you do it for the first time, this requires a bit more work than simply deploying to bitrise.io . Once the necessary configurations are in place, it becomes very simple. When configuring Google Play deployment for the first time, you need to link your Google Play Developer account to an API project, set up API access, and upload the service account JSON key to Bitrise. Upload the first AAB or APK manually to Google Play using the Google Play Console . Link your Google Play Developer Console to an API project. Set up API Access Clients using a service account : Please note when you create your service account on the Google Developer Console, you have to choose json as Key Type . Grant the necessary rights to the service account with your Google Play Console . Go to Settings , then Users & permissions , then Invite new user . Due to the way the Google Play Publisher API works, you have to grant at least the following permissions to the service account: Access level: View app information. Release management: Manage production releases, manage testing track releases. Store presence: Edit store listing, pricing & distribution. As an optional step, you can add translations to your Store Listing: Translate & localize your app . Connect your Google service account to Bitrise . " }, 
{ "title" : "Deploying to Google Play ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-ad6a2dee-e494-fe6d-0770-05a99dda37a4_UUID-e6dea1ce-8978-de97-3546-536ad7cd084b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Generating and deploying Android app bundles \/ Deploying your Android App Bundle to Google Play \/ Deploying to Google Play ", 
"snippet" : "Deploying to Google Play requires a signed APK or AAB file and the Google Play Deploy Step . Workflow Editor bitrise.yml If you're trying to deploy your app for the first time, make sure your Google Play configuration is set up correctly and that you uploaded your service account JSON key to Bitrise...", 
"body" : "Deploying to Google Play requires a signed APK or AAB file and the Google Play Deploy Step . Workflow Editor bitrise.yml If you're trying to deploy your app for the first time, make sure your Google Play configuration is set up correctly and that you uploaded your service account JSON key to Bitrise . Uploading the service account JSON key file We recommend uploading the service account JSON key to Bitrise but it is not mandatory: you can store it elsewhere and provide a direct link to it. Open the App settings page, and select Code Signing . On the Android tab, find the uploaded service account JSON key and copy the secret Env Var under its name. For example, BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL . Open your Workflow and add the Google Play Deploy Step to it. In the Service Account JSON key file path input, paste the Environment Variable you copied. Direct path to the service account JSON key file If you don't want to upload the service account JSON key to Bitrise, you can also add a file path right in the Step’s input field where the file path can be local or remote too: For a remote JSON key file you can provide any download location as value, for example, https:\/\/URL\/TO\/key.json . For a local JSON key file you can provide a file path url as value, for example, file:\/\/PATH\/TO\/key.json . In the Package name input, add the package name of your app. In the Track input, add the track where you want to deploy your APK (for example, alpha\/beta\/rollout\/production or any custom track you set). If you're trying to deploy your app for the first time, make sure your Google Play configuration is set up correctly and that you uploaded your service account JSON key to Bitrise . Uploading the service account JSON key file We recommend uploading the service account JSON key to Bitrise but it is not mandatory: you can store it elsewhere and provide a direct link to it. Open your app's bitrise.yml file and add the google-play-deploy Step to it. deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n In the service_account_json_key_path input, you need to provide the path to the service account JSON key file. If you uploaded the file to Bitrise, you can find the Env Var storing its download URL in the Generic File Storage in the Workflow Editor. deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\" If you didn't upload your service account JSON key to Bitrise, you can set a direct path in the input. The file path can point to a local or a remote location. For a remote JSON key file you can provide any download location as value, for example, https:\/\/URL\/TO\/key.json . For a local JSON key file you can provide a file path url as value, for example, file:\/\/PATH\/TO\/key.json . In the package input, add the package name of your app. deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\"\n - package_name: myApp In the track input, add the track where you want to deploy your app binary (for example, alpha\/beta\/rollout\/production or any custom track you set). deploy-workflow:\n steps: \n - google-play-deploy: \n inputs: \n - service_account_json_key_path: \"$BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL\"\n - package_name: myApp\n - track: alpha That’s all! Start or schedule a build and share the URL with external testers or distribute your app on an app store of your choice! " }, 
{ "title" : "Exporting a universal APK from an AAB ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43302-android-deployment.html#UUID-f6e9580b-c503-3150-da84-f4fa1c5b65e9", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Android deployment \/ Exporting a universal APK from an AAB ", 
"snippet" : "With Bitrise's Export Universal APK Step you can export a universal APK from the App Bundle, sign it with a keystore (or debug keystore), and deploy the APK to your test device before releasing the app to the Google Play Store. You can test an Android app on a test device even if the generated artif...", 
"body" : "With Bitrise's Export Universal APK Step you can export a universal APK from the App Bundle, sign it with a keystore (or debug keystore), and deploy the APK to your test device before releasing the app to the Google Play Store. You can test an Android app on a test device even if the generated artifact is an App Bundle ( .aab ). With the Export Universal APK Step you can export a universal APK from the App Bundle, sign it with a keystore (or debug keystore), and deploy the APK to your test device before releasing the app to the Google Play Store. Configuring this Step is super simple: Workflow Editor bitrise.yml Insert the Export Universal APK Step after the Android Build Step in your Workflow . Make sure the Android App Bundle path input's value is the output variable ( BITRISE_AAB_PATH ) of the previous build Step. Using a different build Step If you don't use the Android Build Step to build an AAB file, make sure that the input points to the AAB output of the Step you used. You can use an Environment Variable, or a direct local path or URL. Make sure the Keystore URL input points to your Android keystore file. We recommend uploading the file to Bitrise and using the default Env Var: $BITRISEIO_ANDROID_KEYSTORE_URL . You can, however, use a local path or a URL as input value here. Provide your credentials in the Keystore alias and the Keystore password inputs. If you uploaded a keystore file to Bitrise, the default value of the inputs should not need to be changed. In the Bundletool version input, you can override the default Bundletool version if you need a specific one but make sure you use the correct version . Run your Workflow. In your app's bitrise.yml file, insert the bitrise-step-export-universal-apk Step after the android-build Step. my-workflow:\n steps:\n - android-build: {}\n - bitrise-step-export-universal-apk:\n inputs:\n Make sure the aab_path input's value is the output variable ( $BITRISE_AAB_PATH ) of the previous build Step. Using a different build Step If you don't use the android-build Step to build an AAB file, make sure that the input points to the AAB output of the Step you used. You can use an Environment Variable, or a direct local path or URL. my-workflow:\n steps:\n - android-build: {}\n - bitrise-step-export-universal-apk:\n inputs:\n - aab_path: \"$BITRISE_AAB_PATH\"\n Make sure the keystore_url input points to your Android keystore file. We recommend uploading the file to Bitrise and using the default Env Var: $BITRISEIO_ANDROID_KEYSTORE_URL . You can, however, use a local path or a URL as input value here. my-workflow:\n steps:\n - android-build: {}\n - bitrise-step-export-universal-apk:\n inputs:\n - aab_path: \"$BITRISE_AAB_PATH\"\n - keystore_url: \"$BITRISEIO_ANDROID_KEYSTORE_URL\"\n Provide your credentials in the keystore_alias and the keystore_password inputs. If you uploaded a keystore file to Bitrise, the default value of the inputs should not need to be changed. Otherwise store your credentials in a Secret and use the Secrets as the input values. my-workflow:\n steps:\n - android-build: {}\n - bitrise-step-export-universal-apk:\n inputs:\n - aab_path: \"$BITRISE_AAB_PATH\"\n - keystore_url: \"$BITRISEIO_ANDROID_KEYSTORE_URL\"\n - keystore_password: \"$BITRISEIO_ANDROID_KEYSTORE_PASSWORD\"\n - keystore_alias: \"$BITRISEIO_ANDROID_KEYSTORE_ALIAS\"\n In the bundletool_version input, you can override the default Bundletool version if you need a specific one but make sure you use the correct version . my-workflow:\n steps:\n - android-build: {}\n - bitrise-step-export-universal-apk:\n inputs:\n - aab_path: \"$BITRISE_AAB_PATH\"\n - keystore_url: \"$BITRISEIO_ANDROID_KEYSTORE_URL\"\n - keystore_password: \"$BITRISEIO_ANDROID_KEYSTORE_PASSWORD\"\n - keystore_alias: \"$BITRISEIO_ANDROID_KEYSTORE_ALIAS\"\n - bundletool_version: 1.8.1\n Run your Workflow. The Export Universal APK Step exports the APK to the $BITRISE_APK_PATH Environment Variable which the next Steps can pick up. If the Deploy to Bitrise.io Step is included in your Workflow, the Ship add-on can deploy the APK for you. " }, 
{ "title" : "iOS deployment ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43308-ios-deployment.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment ", 
"snippet" : "To use Bitrise to deploy an iOS app to any platform, you will need code signing files and you'll have to archive your Xcode project and export a signed IPA file. Once you built your app and ran unit tests and UI tests on it, it’s time to deploy it. To deploy an iOS app to any platform, you need: Cod...", 
"body" : "To use Bitrise to deploy an iOS app to any platform, you will need code signing files and you'll have to archive your Xcode project and export a signed IPA file. Once you built your app and ran unit tests and UI tests on it, it’s time to deploy it. To deploy an iOS app to any platform, you need: Code signing files. To archive your Xcode project and export a signed IPA file. Our guides delve into the specifics of these two basic requirements and show how to use our Steps to deploy the app in the exact way you want to! We also recommend checking out Ship, our deployment solution that aims to save you a lot of headache in publishing your apps: Deploying with Ship" }, 
{ "title" : "Deploying an iOS app to Bitrise.io ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43308-ios-deployment.html#UUID-3f3405ce-152a-6349-2582-bb0905dd710b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to Bitrise.io ", 
"snippet" : "Deploy an app to Bitrise to be able to download the IPA file and install it on devices specified in the app’s Development type provisioning profile. This way, your internal testers can easily test the app. Deploy an app to Bitrise to be able to download the IPA file and install it on devices specifi...", 
"body" : "Deploy an app to Bitrise to be able to download the IPA file and install it on devices specified in the app’s Development type provisioning profile. This way, your internal testers can easily test the app. Deploy an app to Bitrise to be able to download the IPA file and install it on devices specified in the app’s Development type provisioning profile. This way, your internal testers can easily test the app. Clear the cache When trying to install an app from the public install page, you should clear the cache: click the link appearing in the If you synced your settings from your old device, you need to clear the cache and register your new device line. The link redirects to the Profile settings page where you can follow the procedure described in our guide. Developer certificate and Development profile To deploy an iOS app to bitrise.io , you will always need a Developer type certificate and a Development type provisioning profile. Even if you want to deploy to the App Store, these are still required: they are used to create the .xcodearchive file from the provided code in the process of exporting the IPA file. Generate an IPA file on your own machine at least once. Upload all necessary code signing files to Bitrise. If you want your internal testers to test the app, register test devices . Make sure the Xcode Archive and Export for iOS Step is in your Workflow . Set the Automatic code signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Set the Distribution method input of the Step to development . You can use other export methods, too, but if you only deploy to Bitrise and want to install your app on the specified devices of internal testers, development is sufficient. Make sure the Deploy to Bitrise.io Step is in your Workflow. By default, the value of the Enable public page for the App? input is set to true . This way, once the build runs, a public install page will be available with a long and random URL which can be shared with others who are not registered on Bitrise. This URL is sent to the users in an email. The Notify: User Roles and the Notify: Emails inputs determine which users get the email. Start a build. When the build is finished, go to the app’s Builds page and click the latest build. Click the Artifacts tab to find your IPA file. You can also find the public install URL here. Click the expand-arrow icon next to the IPA file to reveal the details and to find the toggle for the public install page. Make sure that’s toggled on so you’re able to send the link to non-Bitrise users. To install an app from the public install page, you must use a native Safari browser of the iOS device. You cannot click the installation link if you’re browsing from a third-party app. For more information, check out Installing an .ipa file on test devices from the Artifacts tabAnd that’s it! The file can now be installed on all the devices included in the app’s provisioning profile. Remember: the installation link must be accessed from an iOS device’s Safari browser! " }, 
{ "title" : "Deploying an iOS app for external testing ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43308-ios-deployment.html#UUID-8bafbe64-9d97-01ef-e678-a24c876e2488", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for external testing ", 
"snippet" : "Before deploying your app to the App Store, you might want to release it to external testers who can test it on their devices outside the development environment. If you do not want to use Testflight, then you can do this by exporting an IPA file with the app-store export method. Before deploying yo...", 
"body" : "Before deploying your app to the App Store, you might want to release it to external testers who can test it on their devices outside the development environment. If you do not want to use Testflight, then you can do this by exporting an IPA file with the app-store export method. Before deploying your app to the App Store, you might want to release it to external testers who can test it on their devices outside the development environment. If you do not want to use Testflight, then you can do this by exporting an IPA file with the ad-hoc export method. Using Testflight If you wish to invite external testers using Testflight, you CANNOT use the ad-hoc export method. You need an IPA with the app-store export method. Generate an IPA file on your own machine at least once. Upload all necessary code signing files to Bitrise. For the ad-hoc export method, you need a Distribution type certificate and an Ad Hoc type provisioning profile. Only upload a provisioning profile if you use manual provisioning: iOS code signing with manual provisioning. Make sure the Xcode Archive & Export for iOS Step is in your Workflow . Set the Distribution method input of the Step to ad-hoc . Set the Automatic code signing method input to the Apple service connection you want to use for code signing. The available options are: off if you don’t do automatic code signing. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Make sure you have the Deploy to Bitrise.io Step in your Workflow. Start a build. When the build is finished, go to the app’s Builds page and click the latest build. Click the Artifacts tab to find your IPA file that you can distribute. " }, 
{ "title" : "Deploying an iOS app to App Store Connect ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43308-ios-deployment.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect ", 
"snippet" : "You can deploy your Bitrise app to App Store Connect either to invite testers on Testflight or to release your app on the App Store. You can deploy an app to App Store Connect to: Invite testers on Testflight. Release your app on the App Store. On Bitrise, you can either simply just upload your bina...", 
"body" : "You can deploy your Bitrise app to App Store Connect either to invite testers on Testflight or to release your app on the App Store. You can deploy an app to App Store Connect to: Invite testers on Testflight. Release your app on the App Store. On Bitrise, you can either simply just upload your binary to App Store Connect or you can also submit it for review. " }, 
{ "title" : "Deploy to App Store Connect Steps ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43308-ios-deployment.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-e8077a88-38e3-10db-2f78-0f43918994e6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploy to App Store Connect Steps ", 
"snippet" : "To deploy the app to App Store Connect, we have two Steps: Deploy to App Store Connect Deploy to App Store Connect - Application Loader Deploy to App Store Connect - Application Loader is simple: it simply pushes an .ipa or .pkg binary file to App Store Connect. With this Step , you cannot submit th...", 
"body" : "To deploy the app to App Store Connect, we have two Steps: Deploy to App Store Connect Deploy to App Store Connect - Application Loader Deploy to App Store Connect - Application Loader is simple: it simply pushes an .ipa or .pkg binary file to App Store Connect. With this Step , you cannot submit the app for review on the App Store, for example. With the Deploy to App Store Connect Step, you can: Submit your app to the App Store for review. You can upload apps of three different platforms (iOS, OS X, AppleTVOS). Tell Bitrise whether you want to upload your screenshots and the app’s metadata along with the binary. " }, 
{ "title" : "Deploying the app to App Store Connect ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43308-ios-deployment.html#UUID-c4e3173e-ba73-81a7-b2af-138a5a985295_UUID-066aad78-034d-c38c-2cb1-6834902c1346", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app to App Store Connect \/ Deploying the app to App Store Connect ", 
"snippet" : "Keep in mind that every time you want to push an app to App Store Connect, it must have a unique build and version number: increment either or both before deploying. Make sure you have a working connection to your Apple Developer account . Generate an IPA file on your own machine at least once. Uplo...", 
"body" : "Keep in mind that every time you want to push an app to App Store Connect, it must have a unique build and version number: increment either or both before deploying. Make sure you have a working connection to your Apple Developer account . Generate an IPA file on your own machine at least once. Upload all necessary code signing files to Bitrise. To deploy an app to App Store Connect, you need a Distribution type certificate and an App Store type provisioning profile. Make sure the Xcode Archive & Export for iOS Step is in your Workflow. Set the Automatic code signing input to the Apple service connection you want to use for code signing. The available options are: off if you don’t use automatic code signing, or if you exclusively use Step inputs for Apple service authentication. api-key if you use API key authorization . apple-id if you use Apple ID authorization . Set the Distribution method input of the Step to app-store . The Step will store the path of the exported .ipa file in the $BITRISE_IPA_PATH Environment Variable. Add the Deploy to App Store Connect Step to your Workflow. Fill the required inputs. Either the app’s Apple ID or its Bundle ID is a required input. One of the two must be provided. If you set the Submit for Review to true , the Step will wait for your submission to be processed on App Store Connect and then submit the given version of the app for review. The default value of the Skip App Version Update input is No . Change it only if you incremented the app version number in another way. If you use an App Store Connect account that is linked to multiple teams, provide either a Team ID or a Team name! Start a build. If all goes well, your app will be submitted to App Store and you can distribute it via Testflight or via the App Store! " }, 
{ "title" : "Deploying an iOS app for simulators ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43308-ios-deployment.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators ", 
"snippet" : "You can build and deploy your iOS app to a simulator, to show it off in a browser, for example, or to use it in testing. You can build and deploy your iOS application to a simulator, to show it off in a browser, for example. On Bitrise, we have a dedicated Step to build for a simulator: the Xcode bu...", 
"body" : "You can build and deploy your iOS app to a simulator, to show it off in a browser, for example, or to use it in testing. You can build and deploy your iOS application to a simulator, to show it off in a browser, for example. On Bitrise, we have a dedicated Step to build for a simulator: the Xcode build for simulator Step runs the xcodebuild command with an iOS simulator destination and generates an .app file. The .app file can be run on any simulator. On Bitrise, we have a Step to upload your app to Appetize.io: the Appetize.io deploy Step. With this Step, you can deploy your app so you can run it in a browser. To build the app for a simulator, you do not need code signing files! " }, 
{ "title" : "Building an iOS app for a simulator ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43308-ios-deployment.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-2ac56b5f-bba8-41c9-281d-e0420af9e52e", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Building an iOS app for a simulator ", 
"snippet" : "You can build an iOS app for an iOS or tvOS simulator platform. To do this, you'll need the Xcode Build for Simulator Step. The Step creates an .app file which you can install on any macOS device or send to, for example, testers. This requires no code signing at all, so it is an easy way to create a...", 
"body" : "You can build an iOS app for an iOS or tvOS simulator platform. To do this, you'll need the Xcode Build for Simulator Step. The Step creates an .app file which you can install on any macOS device or send to, for example, testers. This requires no code signing at all, so it is an easy way to create a distributable version of your iOS app. The Step also creates an .xctestrun file which you can use to run tests. Both the .app file and the .xctestrun file can be accessed by subsequent Steps referring to their output variable, and they can be downloaded as a build artifact . To build the app for a simulator: Workflow Editor bitrise.yml Make sure you install all necessary dependencies in your Workflow. We have dedicated Steps for many different dependency managers, including: Carthage CocoaPods Homebrew Add the Xcode Build for Simulator Step to your Workflow after the Step(s) installing dependencies. Make sure the Project path input points to either your .xcodeproj or .xcworkspace file. The input sets the -project or -workspace option of the xcodebuild command. In most cases, if your app has been automatically configured by the project scanner during the process of adding the app , the default value does not need to be changed. In the Scheme input, set the name of the Xcode scheme you want to use to build the app. The input sets the -scheme option of the xcodebuild command. The default value is an Environment Variable created when adding the app and performing the first-time configuration. If you need to use a different scheme, you can type its name here. Build configuration By default, the Step will use the build configuration specified in the scheme. However, you can override it and use a different build configuration: add the name of the desired build configuration to the Configuration name input. This input is optional and you only need it if you don't want to use the build configuration specified in the selected scheme. You can create new build configurations in your Xcode project at any time: Adding a build configuration file to your project . Configure simulator run destinations: Device Model : Set the device name that you want to test the app on. Set the device name exactly as it appears in Xcode's device selection interface . For example, iPhone 14 Pro . OS version : Set the required OS version as it appears in Xcode's device selection interface. For example, iOS 16.2 . Platform : Select either iOS or tvOS . Optionally, set the Code signing allowed input to yes . This allows code signing files to be installed during the build. In most cases, you don't need code signing for an app built for a simulator. It might be required for certain test cases or third-party dependencies. To set up code signing, see iOS code signing. To access your app as a build artifact, add the Deploy to Bitrise.io Step to the end of your Workflow. By default, you don't have to modify anything in the Step's configuration. Make sure you install all necessary dependencies in your Workflow. We have dedicated Steps for many different dependency managers, including: Carthage CocoaPods Homebrew Add the xcode-build-for-simulator Step to your Workflow after the Step(s) installing dependencies. workflows: \n primary:\n steps:\n - cocoapods-install\n - xcode-build-for-simulator:\n inputs: Make sure the project_path input points to either your .xcodeproj or .xcworkspace file. The input sets the -project or -workspace option of the xcodebuild command. In most cases, if your app has been automatically configured by the project scanner during the process of adding the app , the default value does not need to be changed. - xcode-build-for-simulator:\n inputs:\n - project_path: $BITRISE_PROJECT_PATH\n In the scheme input, set the name of the Xcode scheme you want to use to build the app. The input sets the -scheme option of the xcodebuild command. The default value is an Environment Variable created when adding the app and performing the first-time configuration. If you need to use a different scheme, make sure to type the name of the scheme correctly. - xcode-build-for-simulator:\n inputs:\n - scheme: $BITRISE_SCHEME\n - project_path: $BITRISE_PROJECT_PATH\n Build configuration By default, the Step will use the build configuration specified in the scheme. However, you can override it and use a different build configuration: add the name of the desired build configuration to the configuration input. This input is optional and you only need it if you don't want to use the build configuration specified in the selected scheme. You can create new build configurations in your Xcode project at any time: Adding a build configuration file to your project . Configure simulator run destinations: simulator_device : Set the device name that you want to test the app on. Set the device name exactly as it appears in Xcode's device selection interface . For example, iPhone 14 Pro . simulator_os_version : Set the required OS version as it appears in Xcode's device selection interface. For example, iOS 16.2 . simulator_platform : Select either iOS or tvOS . - xcode-build-for-simulator:\n inputs:\n - scheme: $BITRISE_SCHEME\n - simulator_device: iPhone 14 Plus\n - simulator_os_version: '16.2'\n - simulator_platform: iOS\n - project_path: $BITRISE_PROJECT_PATH\n Optionally, set the code_signing_allowed input to yes . This allows code signing files to be installed during the build. In most cases, you don't need code signing for an app built for a simulator. It might be required for certain test cases or third-party dependencies. To set up code signing, see iOS code signing. - xcode-build-for-simulator:\n inputs:\n - scheme: $BITRISE_SCHEME\n - simulator_device: iPhone 14 Plus\n - simulator_os_version: '16.2'\n - simulator_platform: iOS\n - code_signing_allowed: 'yes'\n - project_path: $BITRISE_PROJECT_PATH\n To access your app as a build artifact, add the deploy-to-bitrise-io Step to the end of your Workflow. By default, you don't have to modify anything in the Step's configuration. primary:\n steps:\n - generate-cordova-build-configuration@0: {}\n - xcode-build-for-test@2: {}\n - xcode-test@4: {}\n - xcode-build-for-simulator@0.12:\n inputs:\n - scheme: $BITRISE_SCHEME\n - simulator_device: iPhone 14 Plus\n - simulator_os_version: '16.2'\n - simulator_platform: iOS\n - configuration: debug\n - code_signing_allowed: 'no'\n - project_path: $BITRISE_PROJECT_PATH\n - deploy-to-bitrise-io\n " }, 
{ "title" : "Deploying the app to Appetize.io ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43308-ios-deployment.html#UUID-e5243bc7-3fd7-9448-467d-94103f8cf878_UUID-19c633be-c25f-71fd-6454-0d7a4346faa1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ iOS deployment \/ Deploying an iOS app for simulators \/ Deploying the app to Appetize.io ", 
"snippet" : "An .app file built with our Xcode build for simulator Step works with just about any simulator. But if you want to easily and quickly integrate it to a simulator that allows you to run your app in a browser, we recommend using the Appetize.io deploy Step. It uploads your app to Appetize.io and provi...", 
"body" : "An .app file built with our Xcode build for simulator Step works with just about any simulator. But if you want to easily and quickly integrate it to a simulator that allows you to run your app in a browser, we recommend using the Appetize.io deploy Step. It uploads your app to Appetize.io and provides a public URL to use the app in a browser. Request an Appetize.io API token. Open your app on Bitrise . Click the Workflows button on the main page. On the Workflows & Pipelines page, find the Workflow you need and click into its row to open the Workflow Editor. Add and configure the Xcode build for simulator Step to your Workflow. Add the Appetize.io deploy Step to your Workflow. Add the Appetize.io API token to the Appetize.io token input. Enter the path to the .app file to the Application path input. The easiest solution is to use the BITRISE_APP_DIR_PATH_LIST Environment Variable that is an output of the Xcode build for simulator Step. Optionally, you can also enable verbose logging for more efficient debugging. The Appetize.io deploy Step will produce one output: the APPETIZE_APP_URL Environment Variable. it is a public URL where you can access your app. Enjoy showing it off! " }, 
{ "title" : "Deploying with Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship ", 
"snippet" : "Ship is a deployment solution that aims to save users a lot of headache. With Ship, you have complete control over your app’s distribution, its version history, and all the important metadata - and you can manage all that in one place. Ship is now deprecated The Ship add-on is now deprecated and wil...", 
"body" : "Ship is a deployment solution that aims to save users a lot of headache. With Ship, you have complete control over your app’s distribution, its version history, and all the important metadata - and you can manage all that in one place. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. Ship is a deployment solution that aims to save users a lot of headache. With Ship, you have complete control over your app’s distribution, its version history, and all the important metadata - and you can manage all that in one place. Deployment with Ship includes automatic re-sign and artifact generation and we store all the previous versions too. The app’s metadata, all the marketing copy, and screenshots can also be edited on the spot and non-developer people can manage it. Ship language As of right now, Ship only supports English locale. No other language submissions are supported. You can do a whole lot of things with Ship: View all the build versions of your app. View and edit all the details of a given build version, including a description, screenshots, and the most important parameters, such as the app size or the supported device types. Send your app directly to testers with a link to the public install page. Deploy a given build version to App Store Connect and\/or the Google Play Console, once you set up publishing. Switch between platforms on the Version History page in the case of cross-platform projects. " }, 
{ "title" : "Getting started with Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-ad1f4e44-1477-d993-1ce7-92a881c73f1d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Getting started with Ship ", 
"snippet" : "To start using Ship, you'll need to build an app and export the generated binary to Ship. You need to expose the Workflow that builds the binary and make sure you include the Deploy to Bitrise.io Step in it. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We ...", 
"body" : "To start using Ship, you'll need to build an app and export the generated binary to Ship. You need to expose the Workflow that builds the binary and make sure you include the Deploy to Bitrise.io Step in it. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. To start using Ship, you'll need to build an app and export the generated binary to Ship. You have two options to open Ship from Bitrise: On the Add-ons tab of the app: this option takes you to Ship’s home page. From the Builds page: this option takes you to the build’s Ship page. When first logging in, you might not have a single build version available to publish. But don’t worry, that can be fixed quickly. Step versions compatible with Ship Please note that the Deploy to Bitrise.io Step must be version 1.9.0 or higher and the Xcode Archive & Export for iOS Step for iOS apps must be version 2.6.0 or higher - older versions of the Steps do not support Ship. To be able to deploy an app with Ship: In one of your Workflows , you need a Step that builds your app. By default, Xcode Archive & Export for iOS , Gradle Runner and Android Build are automatically supported. The same Workflow must have the correct version of the Deploy to Bitrise.io Step after the Step that builds your app. The Deploy to Bitrise.io Step must export the relevant file: an APK file for Android apps and the .xcarchive file for iOS apps. If you use either one of the Xcode Archive & Export for iOS , Gradle Runner and Android Build Steps, you don’t have to change anything in the default configuration of the Deploy to Bitrise.io Step to export the relevant files. Using Ship with different build Steps By default, Xcode Archive & Export for iOS , Gradle Runner , and Android Build are automatically supported with Ship. If you want to build your app with any other Step, you can do so - it just requires a little extra configuration . Once you successfully built your app, you will be able to start using Ship. " }, 
{ "title" : "Configuring an app for publishing with Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship ", 
"snippet" : "To publish an app on Ship, you need to build a binary with a Workflow that is exposed to Ship, with the settings properly configured. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. To publish an app on ...", 
"body" : "To publish an app on Ship, you need to build a binary with a Workflow that is exposed to Ship, with the settings properly configured. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. To publish an app on Ship, you need to: Build an app that has at least one exposed Workflow : Exposing a Workflow's artifacts to Ship. Make sure Bitrise has the necessary code signing files . Configure publishing on the Settings page. iOS and Android apps have their own set of settings on the Settings page; for cross-platform app, both iOS and Android settings must be configured. " }, 
{ "title" : "Exposing a Workflow's artifacts to Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-9899bc0c-896c-5947-b23f-7327bb534cbb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Exposing a Workflow's artifacts to Ship ", 
"snippet" : "Exposing a Workflow’s artifacts means that the products of the Workflow will be available in Ship: for example, if your Workflow produces an APK, you can publish that using Ship. By default, all Workflows are exposed if they contain the correct version of the Deploy to Bitrise.io Step . If you are h...", 
"body" : "Exposing a Workflow’s artifacts means that the products of the Workflow will be available in Ship: for example, if your Workflow produces an APK, you can publish that using Ship. By default, all Workflows are exposed if they contain the correct version of the Deploy to Bitrise.io Step . If you are happy with that, just leave the field as is. If, however, you add a Workflow here, only that Workflow will be exposed. To expose a Workflow’s artifacts to Ship: Go to your app’s Ship page. Click Settings in the top right corner. Go to the General tab. In the Expose Artifacts From the Selected Workflow to Ship text box, add all the Workflows you need. Be aware that if your app is cross-platform, there are TWO such text boxes: one for iOS and one for Android. Separate the different Workflow names with a comma (for example, build, deploy, release_build_android ) . Scroll down to the bottom of the page and click Save . " }, 
{ "title" : "Code signing files ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-7f7d66d3-e6e0-d90b-8f33-9827da7fd4b6_UUID-7979a696-a0d0-396a-49d9-1c507892d8ad", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Configuring an app for publishing with Ship \/ Code signing files ", 
"snippet" : "Code signing files are required to publish an app to any online store, or to install them to test devices. On the Settings page, you can choose between different code signing files. You can upload these files - iOS provisioning profiles and certificates, Android keystore files and Service Account JS...", 
"body" : "Code signing files are required to publish an app to any online store, or to install them to test devices. On the Settings page, you can choose between different code signing files. You can upload these files - iOS provisioning profiles and certificates, Android keystore files and Service Account JSON files - to the Code Signing tab of your Bitrise app: iOS code signing. Android code signing. " }, 
{ "title" : "Installing an app on a test device with Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship ", 
"snippet" : "You can install an app from Ship, either by using the public install page option, or by logging in to Ship from the device itself and install it there. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. To ...", 
"body" : "You can install an app from Ship, either by using the public install page option, or by logging in to Ship from the device itself and install it there. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. To install an app on a device using Ship, there are two options: Send either the public install page link or a QR code that takes you to the public install page when scanned to all the testers and other stakeholders. Log in to Ship from the device and install it directly from there. " }, 
{ "title" : "Accessing the public install page in Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-9f72727d-0d4e-fbed-217f-17929ad6b467", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Accessing the public install page in Ship ", 
"snippet" : "To send the public install page link or the QR code to your stakeholders: Artifact types The public install page is not available for all type of artifacts. For iOS, it’s only available if your app is signed with a Debug, Development or Ad-hoc type provisioning profile. For Android, it’s only availa...", 
"body" : "To send the public install page link or the QR code to your stakeholders: Artifact types The public install page is not available for all type of artifacts. For iOS, it’s only available if your app is signed with a Debug, Development or Ad-hoc type provisioning profile. For Android, it’s only available if your Workflow builds an APK which is NOT split or if it builds a universal APK which is split. For AABs, there will be no public install page link. Make sure you have a Deploy to Bitrise.io Step in your Workflow that builds the installable file. Make sure that the Enable public page for the App? input of the Step is set to true . Log in to Ship. Expose the Workflow and run a build on Bitrise. Go back to Ship. Open the Details page of your app’s chosen build version. On the right, find the Public Install Page link or the QR code. Copy the one you need and send it to the stakeholders (by email, for example). " }, 
{ "title" : "Installing directly from Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-164f8591-8a45-c54c-5484-6fad35ad8c24_UUID-d2f68068-d504-9735-c7a8-9b909fbb2950", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Installing an app on a test device with Ship \/ Installing directly from Ship ", 
"snippet" : "To install an app to a registered device directly from Ship: Build your app on Bitrise. Log in to Ship from a supported device. Click on the Devices tab to find out if a given device is registered. Read our guide on how to register your devices on Bitrise. Under the name of the app, find and click t...", 
"body" : "To install an app to a registered device directly from Ship: Build your app on Bitrise. Log in to Ship from a supported device. Click on the Devices tab to find out if a given device is registered. Read our guide on how to register your devices on Bitrise. Under the name of the app, find and click the Install button. " }, 
{ "title" : "Publishing an app to a store with Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship ", 
"snippet" : "Ship supports publishing to Apple's App Store and to Google Play. To successfully publish to either of these stores, you need to build an app on Bitrise, make sure Ship has access to code signing files, and successfully configure the app in Ship. Ship is now deprecated The Ship add-on is now depreca...", 
"body" : "Ship supports publishing to Apple's App Store and to Google Play. To successfully publish to either of these stores, you need to build an app on Bitrise, make sure Ship has access to code signing files, and successfully configure the app in Ship. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. Ship supports publishing to Apple's App Store and to Google Play. To successfully publish to either of these stores, you need to build an app on Bitrise, make sure Ship has access to code signing files, and successfully configure the app in Ship. " }, 
{ "title" : "Publishing an iOS app to the App Store with Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-b6787265-afea-7bed-b145-8d52da53a5c8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an iOS app to the App Store with Ship ", 
"snippet" : "To be able to publish an iOS app to the App Store Connect (formerly known as iTunes Connect) with Ship, you have to: Build the app. Choose the provisioning profiles and code signing identities to be used. Set the app specific password. Set the Apple Developer Account email. Set the App SKU: this is ...", 
"body" : "To be able to publish an iOS app to the App Store Connect (formerly known as iTunes Connect) with Ship, you have to: Build the app. Choose the provisioning profiles and code signing identities to be used. Set the app specific password. Set the Apple Developer Account email. Set the App SKU: this is a unique ID you give to your app for internal tracking. It’s not visible to customers. Using Ship with different build Steps By default, Xcode Archive & Export for iOS , Gradle Runner , and Android Build are automatically supported with Ship. If you want to build your app with any other Step, you can do so - it just requires a little extra configuration . Make sure you've configured the Xcode Archive & Export for iOS Step correctly: the Distribution method input must be set to app store and it should be built with a Release configuration. Make sure you have a Deploy to Bitrise.io Step in your Workflow . Open your app’s Ship page and click Settings in the top right corner. Go to the General tab. Go to the iOS Settings section. Expose the Workflow that creates the IPA file you want to publish, and run the Workflow on Bitrise. In the iOS Settings section, select the code signing files you want to use. Make sure you choose the files appropriate for the export method you used to create the .ipa file. For example, if your .ipa was exported using the app-store method, choose an App Store provisioning profile and a Distribution certificate (code signing identity). Enter the Apple Developer Account Email and the App Specific Password to be able to publish to the App Store. Enter the App SKU . Go back to the Details page and click Publish . " }, 
{ "title" : "Publishing an Android app to Google Play with Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-df344b9d-32f7-dc8e-8da3-ce4c440522b7", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing an Android app to Google Play with Ship ", 
"snippet" : "To configure publishing an Android app to Google Play Console in Ship, you have to: Choose the Android keystore files and the Service Account JSON file. Set the track you want to use to release your app. Once you configured publishing for the app, you do not have to set these options every time, onl...", 
"body" : "To configure publishing an Android app to Google Play Console in Ship, you have to: Choose the Android keystore files and the Service Account JSON file. Set the track you want to use to release your app. Once you configured publishing for the app, you do not have to set these options every time, only if you want to change some of them. Using Ship with different build Steps By default, Xcode Archive & Export for iOS , Gradle Runner , and Android Build are automatically supported with Ship. If you want to build your app with any other Step, you can do so - it just requires a little extra configuration . Open your app’s Ship page and click Settings in the top right corner. Go to the Android Settings section. Expose a Workflow that creates the APK you want to publish. Make sure the exposed Workflow includes either the Android Build or the Gradle Runner Step, and the Deploy to Bitrise.io Step. Build a release version of your app with the exposed Workflow. Depending on the Step you use, you have two options: Make sure the Android Build Step’s Variant input field contains release (for example release or demoRelease ). Make sure the Gradle Runner Step’s Gradle task to run input field contains Release (for example, assembleRelease or assembleDemoRelease ) Enter the track you want to use to publish to the Google Play Console. If your Android app contains multiple modules, enter the exact module under Module . Choose the appropriate keystore file and the Service Account JSON file. Head back to the Version History page and select the version you wish to publish. If your app has multiple flavors, you can filter for the right flavor and select it for publishing. Fill out the Details page and click Publish. " }, 
{ "title" : "Publishing status and logs ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-e6a01e43-bf01-2930-b52e-ffda1225d556_UUID-1a7f21fc-56c8-8741-99f8-1e82e2a15fe0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Publishing an app to a store with Ship \/ Publishing status and logs ", 
"snippet" : "Once you clicked Publish in Ship, the process starts according to the configured settings. You can view the status of the active publishing process on top of the Details page of the app. To view the logs of any publishing process, go to the Activity tab. From there, you can download the logs by clic...", 
"body" : "Once you clicked Publish in Ship, the process starts according to the configured settings. You can view the status of the active publishing process on top of the Details page of the app. To view the logs of any publishing process, go to the Activity tab. From there, you can download the logs by clicking Download Build Log to troubleshoot any errors after a failed publish. " }, 
{ "title" : "Using Ship for apps built with cross-platform frameworks ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks ", 
"snippet" : "You can use Ship for any binary that you build on Bitrise: you just need to make sure it ends up in the BITRISE_DEPLOY_DIR directory so that Deploy to Bitrise.io Step can find it. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Rel...", 
"body" : "You can use Ship for any binary that you build on Bitrise: you just need to make sure it ends up in the BITRISE_DEPLOY_DIR directory so that Deploy to Bitrise.io Step can find it. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. By default, Ship works with the Android Build, Gradle Runner and the Xcode Archive & Export for iOS Steps . The output of these Steps are automatically exported by the Deploy to Bitrise.io Step to Ship. However, for apps built with cross-platform frameworks, such as React Native or Flutter, you might not use these Steps in your Workflows . But don’t worry: you can use Steps that are not supported by default to build your app and still deploy it with Ship. All you need to do is make sure the right files end up in the right place. " }, 
{ "title" : "Publishing iOS apps built with cross-platform frameworks ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-13c17c70-4337-e4e9-a323-c3822efe9b2b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing iOS apps built with cross-platform frameworks ", 
"snippet" : "You can use Ship to publish an Android app built with, for example, Flutter or React Native even if you don't use our Xcode Archive & Export for iOS Step. The Deploy to Bitrise.io Step looks for an .xcarchive.zip file to export to Ship in the case of an iOS app. If you do not want to use the Xcode A...", 
"body" : "You can use Ship to publish an Android app built with, for example, Flutter or React Native even if you don't use our Xcode Archive & Export for iOS Step. The Deploy to Bitrise.io Step looks for an .xcarchive.zip file to export to Ship in the case of an iOS app. If you do not want to use the Xcode Archive & Export for iOS Step, you just need to make sure that: There is a Step in your exposed Workflow that exports an .xcarchive.zip file of your app. That is, the Step you use needs to create an Xcode Archive and needs to package it in a zip file. This Step exports the .xcarchive.zip file into the BITRISE_DEPLOY_DIR directory. " }, 
{ "title" : "Publishing Android apps built with cross-platform frameworks ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-33076608-1a04-acdb-229b-2128f7224e0a_UUID-38f4a19a-8a66-6fb4-6c50-894356b66ace", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Using Ship for apps built with cross-platform frameworks \/ Publishing Android apps built with cross-platform frameworks ", 
"snippet" : "You can use Ship to publish an Android app built with, for example, Flutter or React Native even if you don't use our Android Build or Gradle Runner Steps. The Deploy to Bitrise.io Step looks for an APK or an AAB file in the BITRISE_DEPLOY_DIR directory. If you do not want to use the Android Build o...", 
"body" : "You can use Ship to publish an Android app built with, for example, Flutter or React Native even if you don't use our Android Build or Gradle Runner Steps. The Deploy to Bitrise.io Step looks for an APK or an AAB file in the BITRISE_DEPLOY_DIR directory. If you do not want to use the Android Build or the Gradle Runner Steps, you just need to make sure that: There is a Step in your exposed Workflow that exports an APK or AAB file of your app. This Step exports the APK or AAB file into the BITRISE_DEPLOY_DIR directory. " }, 
{ "title" : "App details in Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship ", 
"snippet" : "On the app details page in Ship, you can update the most important information about your app so all that info is available in the online stores you publish your app to. The purpose of the app's Details page is to update the most important information about your app - for example, you can make sure ...", 
"body" : "On the app details page in Ship, you can update the most important information about your app so all that info is available in the online stores you publish your app to. The purpose of the app's Details page is to update the most important information about your app - for example, you can make sure all relevant information appears in your online store of choice. The details include: A description of the app. Screenshots and feature graphics of the app, arranged by the different supported devices. Metadata such as version number, size, version code, SDK version, and so on. The exact parameters depend on the type of the app. This is automatically exported to Ship by the Deploy to Bitrise.io Step . " }, 
{ "title" : "Adding screenshots or feature graphics ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-7ef1bfe9-69ac-cf70-f064-a9a91d14dd74", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Adding screenshots or feature graphics ", 
"snippet" : "You can add screenshots for an app to be published. Once you added screenshots or graphics to one build version of the app, they are automatically added to all subsequent versions. If you want to display different screenshots, you can modify it, otherwise you can leave it alone. To add screenshots o...", 
"body" : "You can add screenshots for an app to be published. Once you added screenshots or graphics to one build version of the app, they are automatically added to all subsequent versions. If you want to display different screenshots, you can modify it, otherwise you can leave it alone. To add screenshots or feature graphics to your app details page: Open the Details page in Ship of your app’s chosen build version. Go to Screenshots or Feature Graphic , depending on what you want to upload. Drag and drop a file OR click Browse files and select the ones you wish to upload. Once done, click Save in the top right corner. " }, 
{ "title" : "Updating the app's descriptions ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-61bd819f-7245-8cb5-91e1-58f0664c3b74_UUID-a04fde18-60a5-91f7-21e4-cb757867c163", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ App details in Ship \/ Updating the app's descriptions ", 
"snippet" : "You can update the app’s description, or all its other textual details in the same way. The types of text fields that you have available depend on the type of the app. Open the Details page in Ship of your app’s chosen build version. Go to the field you want to edit and click in the content field. E...", 
"body" : "You can update the app’s description, or all its other textual details in the same way. The types of text fields that you have available depend on the type of the app. Open the Details page in Ship of your app’s chosen build version. Go to the field you want to edit and click in the content field. Edit the content. Click Save in the top right of the Details tab. " }, 
{ "title" : "Ship notifications ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications ", 
"snippet" : "Ship can send emails about three different events: a new build version becoming available, successful publishing, and failed publishing. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. Ship can send emai...", 
"body" : "Ship can send emails about three different events: a new build version becoming available, successful publishing, and failed publishing. Ship is now deprecated The Ship add-on is now deprecated and will eventually be removed. We strongly recommend using Release Management instead. Ship can send emails about three different events: A new build version of an app is available in Ship. Ship successfully published the app. Ship failed to publish the app. These notifications can be sent to any number of different email addresses. When a new email address is added to the notifications list, Ship sends a confirmation email to the address: after confirmation, notifications should work. " }, 
{ "title" : "Adding a new email address in Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-e3f46725-a8cd-f088-9ce1-244b493a84d5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Adding a new email address in Ship ", 
"snippet" : "To add a new email address to the notification list for an app: Open your app’s Ship page. Click Settings. Go to the Notifications tab. In the input field under Email notifications , type the email address. Click Add . The address should appear in the list below, with Pending as its status. An email...", 
"body" : "To add a new email address to the notification list for an app: Open your app’s Ship page. Click Settings. Go to the Notifications tab. In the input field under Email notifications , type the email address. Click Add . The address should appear in the list below, with Pending as its status. An email is sent to the address: the recipient must click Confirm Notifications in the email to start receiving notifications. " }, 
{ "title" : "Configuring notifications in Ship ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43313-deploying-with-ship.html#UUID-6651dc00-f111-6b6c-9be0-08dd280f7555_UUID-13e2092a-0038-5463-490f-860e4a4ebbef", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying with Ship \/ Ship notifications \/ Configuring notifications in Ship ", 
"snippet" : "You can pick and choose the Ship events about which you want to notify different people. For example, it’s possible to only send notifications about a failed publishing event if you do not want to be bothered when things go well! And of course you can send different notifications to different email ...", 
"body" : "You can pick and choose the Ship events about which you want to notify different people. For example, it’s possible to only send notifications about a failed publishing event if you do not want to be bothered when things go well! And of course you can send different notifications to different email addresses. Open your app’s Ship page. Click Settings. Go to the Notifications tab. Use the toggles under the different event types. Hit Save once all notifications are set. " }, 
{ "title" : "Deploying apps to Applivery ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43315-deploying-apps-to-applivery.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to Applivery ", 
"snippet" : "Applivery is a mobile app distribution platform for iOS and Android that provides a powerful mobile app management and distribution system to simplify app delivery for both testers and employees, with a focus on an easy-to-use experience. Applivery is a mobile app distribution platform for iOS and A...", 
"body" : "Applivery is a mobile app distribution platform for iOS and Android that provides a powerful mobile app management and distribution system to simplify app delivery for both testers and employees, with a focus on an easy-to-use experience. Applivery is a mobile app distribution platform for iOS and Android that provides a powerful mobile app management and distribution system to simplify app delivery for both testers and employees, with a focus on an easy-to-use experience. Applivery has many features to better manage your in-development and production-ready apps that will help speed up your development, get better feedback and deliver better applications. Some of the features are: Single or Multi App customized App Stores with a seamless user experience for non-technical users. Multi-track and fully customized app distribution with multiple security configurations including SSO, non-registered users, password protected and unlisted apps. Automatic and forced in-app updates. Feedback and bug reporting. Combined with Bitrise, you can cover the entire development life cycle, from testing and building to delivery and feedback. " }, 
{ "title" : "Deploying apps to DeployGate from Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43316-deploying-apps-to-deploygate-from-bitrise.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying apps to DeployGate from Bitrise ", 
"snippet" : "DeployGate is a mobile app distribution platform for iOS and Android, delivering your in-development iOS\/Android apps to your dev team, members, employees, QA testing team in your organization or testers outside of your company. DeployGate is a mobile app distribution platform for iOS and Android, d...", 
"body" : "DeployGate is a mobile app distribution platform for iOS and Android, delivering your in-development iOS\/Android apps to your dev team, members, employees, QA testing team in your organization or testers outside of your company. DeployGate is a mobile app distribution platform for iOS and Android, delivering your in-development iOS\/Android apps to your dev team, members, employees, QA testing team in your organization or testers outside of your company. DeployGate has many features to accelerate your app development cycle including QA testing and app improvement with beta tester’s feedbacks. DeployGate offers: Real-time App distribution with automatic version control, even without requiring accounts for testers Flexible user account management with granular access control Git-like multi-track distribution allows individual version\/user\/device management for the same app With DeployGate and Bitrise, you can quickly build a fully automated in-house dogfooding environment for your team. To see more details, please visit DeployGate Features . To upload your app to DeployGate, add the DeployGate Upload Step to your bitrise Workflow . This Step should be added after the Step that builds your app's binary that will be uploaded. You need to set several required parameters as below: Input Variables Description API Key Set upload user’s DeployGate API Key from Account Settings. If you want to upload apps as organization account, please use organization’s API Key. Upload account will be shown on the activity timeline. Owner Name App owner’s account name in DeployGate. You can use username or organization name. App file path App’s binary file (IPA\/APK) to be uploaded. For default setting, use $BITRISE_APK_PATH for Android or $BITRISE_IPA_PATH for iOS You can also set optional variables for using advanced features as below: Input Variables Description Short Message Summary of update shown on DeployGate. You can use $BITRISE_GIT_MESSAGE if you want to use the commit message, the pull request title, or the message you specified when you triggered the build manually. Distribution Key You can make multiple public install links (we called it Distribution Page) for a different version of app binary in the same app. By specifying the distribution page’s hash, that distribution page will be updated simultaneously. The “xxxx” portion of the distributed page’s URL like https:\/\/deploygate.com\/distributions\/xxxx Distribution Name Specify the name of the updated distribution page. If nothing exists, a new distribution page will be created. Possible usage includes creating distribution pages for each Git branch name. (for example $BITRISE_GIT_BRANCH) Release Note Message for the new release in distribution page. This message will be notified to your distribution page’s testers Disable Notify(iOS Only) There is no DeployGate client app in iOS platform. By default, we use email notifications for release updates. If you don’t need email notification, please set this option as true These options are based on DeployGate API . For more details, please read the references at DeployGate.com . You can use DeployGate's Distribution Page (Shareable link) feature to generate a landing page for the app installation of your app’s specific version. When you upload an app to DeployGate, the system automatically assigns a sequential number (we are calling it **Revision Number** ) for each uploaded build. On the Distribution Page, you can choose specific revision of app to distribute for each group of testers. This feature is handy for distributing your app to multiple tester groups for different purposes such as QAs, Dog Fooding, or Test Marketing. You can also generate a distribution page when you upload an app from Bitrise with DeployGate Upload Step. Please refer to the optional variables above. " }, 
{ "title" : "Deploying your app to Appaloosa ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43317-deploying-your-app-to-appaloosa.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying your app to Appaloosa ", 
"snippet" : "Appaloosa helps you distribute your mobile apps privately, collect feedback and analyse your deployment’s efficiency. Use a dedicated Step to deploy to Appaloosa with Bitrise. Would you like to beta test and deploy your app to 1 or thousands of users? Appaloosa helps you distribute your mobile apps ...", 
"body" : "Appaloosa helps you distribute your mobile apps privately, collect feedback and analyse your deployment’s efficiency. Use a dedicated Step to deploy to Appaloosa with Bitrise. Would you like to beta test and deploy your app to 1 or thousands of users? Appaloosa helps you distribute your mobile apps privately, collect feedback and analyse your deployment’s efficiency. Check it out! Appaloosa is a simple and secure enterprise App Store. They help mobile & digital teams build, test and deploy their apps privately. You can manage your apps on Android, iOS and Windows Phone, all in the same place. Appaloosa also provides a native app store to increase your users’ engagement. They will receive a push notification on each update of the app and be able to test and use the latest version of your mobile apps. Appaloosa also gives you great insight on the efficiency of your deployment with download and usage stats as well as feedbacks and ratings from the users. They are entreprise ready with LDAP, OAuth, SAML and Active Directory integrations as well as a RESTful API. Get in touch for more details. Plus your mobile apps can be targeted to groups of users or distributed to all collaborators. To deploy your app on Appaloosa, simply add the Appaloosa Step to your app’s Workflow . If you don’t already have an account on Appaloosa, it will be created on the go. As a registered user you simply need your store id and API Key . As an unregistered user , an email address is enough. Optionally you can provide a description , screenshot urls (up to 5) and, if registered, group ids . With Bitrise and Appaloosa, you can focus on your mobile app development and we take care of the rest! " }, 
{ "title" : "Deploying to TestFairy with Bitrise ", 
"url" : "88887-41967-bitrise-docs/88887-43301-deploying/88887-43318-deploying-to-testfairy-with-bitrise.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Deploying \/ Deploying to TestFairy with Bitrise ", 
"snippet" : "TestFairy is a deployment service that gives you plenty of insights about your app. You can deploy to TestFairy with Bitrise by using a dedicated Step. If you are looking for a deployment service that also gives you lots of insights about your application, then TestFairy is a great service to check ...", 
"body" : "TestFairy is a deployment service that gives you plenty of insights about your app. You can deploy to TestFairy with Bitrise by using a dedicated Step. If you are looking for a deployment service that also gives you lots of insights about your application, then TestFairy is a great service to check out. When testing apps in the crowd, you never know what exactly was tested and what exactly went wrong on the client side. TestFairy solves this problem by providing a video of everything that happened on the mobile device, including detailed internal metrics such as CPU, memory, GPS, network, logs, crash reports, and a lot more. To get these insights on iOS you need to integrate their iOS SDK into your app . To deploy your app on the TestFairy platform you just simply need to add the TestFairy Step to your app’s Workflow (on bitrise.io ). The only required parameter you have to add is your API Key on TestFairy. To get it you should navigate to your account preferences on TestFairy and find the key under your API Key menu. Email notifications and Auto update You can also enable or disable the email notifications and set the tester groups you would like to notify. There’s an option to make your users always upgrade to the latest build by enabling Auto update in the Step, and you can also start recording video and set the length of it. There’s nothing else you need to do, simply work on your awesome app and we ensure your app is automatically deployed to TestFairy every time you update your code. " }, 
{ "title" : "Insights ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights ", 
"snippet" : "Insights is a monitoring tool that allows you to track metrics detailing the performance of your Bitrise builds. Insights is a monitoring tool that allows you to track metrics detailing the performance of your Bitrise builds. Track your metrics on app -, Workflow -, and Step -level and use the data ...", 
"body" : "Insights is a monitoring tool that allows you to track metrics detailing the performance of your Bitrise builds. Insights is a monitoring tool that allows you to track metrics detailing the performance of your Bitrise builds. Track your metrics on app -, Workflow -, and Step -level and use the data to optimize your builds. With the Insights tool, we are targeting three main areas: Stability: Which errors have the highest impact on your builds? Velocity: Which area should you focus on to improve the speed of your builds? Usage: Which Steps and Workflows take the most time in your builds? " }, 
{ "title" : "Getting started with Insights ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71562-getting-started-with-insights.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights ", 
"snippet" : "The Insights Overview page offers both aggregated and app-level metrics to check the CI\/CD health of your app. Compare values of the same point in time across charts and quickly assess whether there are any negative trends that need your immediate attention. Insights constantly tracks the performanc...", 
"body" : "The Insights Overview page offers both aggregated and app-level metrics to check the CI\/CD health of your app. Compare values of the same point in time across charts and quickly assess whether there are any negative trends that need your immediate attention. Insights constantly tracks the performance of all the apps of your Workspaces . You can get aggregated build data of all your apps , detailed metrics of each app, and you can even categorize the metrics as you see fit using dashboards. Insights also allows you to view bottlenecks: it shows you the Workflows and tests that take the most time or cost you the highest amount of credits. To get to your Workspace's Insights page: Log in to your Bitrise account. In the top right corner, open the account selector dropdown menu and select a Workspace. On the header, click Insights . This takes you to the Overview page of the selected Workspace. " }, 
{ "title" : "Viewing data from a specific timeframe ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71562-getting-started-with-insights.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-d108fe20-aedd-0e67-f571-38f246325554", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Viewing data from a specific timeframe ", 
"snippet" : "By default, all Insights pages display your metrics on a weekly basis from the last 12 weeks. Modify the basis and timeframe by opening the respective dropdown menu in the top right of the page, and selecting the options you need....", 
"body" : "By default, all Insights pages display your metrics on a weekly basis from the last 12 weeks. Modify the basis and timeframe by opening the respective dropdown menu in the top right of the page, and selecting the options you need. " }, 
{ "title" : "The Dashboards page ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71562-getting-started-with-insights.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-1953b793-53ca-9704-e7cf-0b295edd53dd", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page ", 
"snippet" : "You can use the Insights Dashboards page to categorize the charts of your Workspace so that you can view them in one place. You can combine charts from the Builds, Tests, and Credits tab into a single dashboard, and you can have as many dashboards as you want....", 
"body" : "You can use the Insights Dashboards page to categorize the charts of your Workspace so that you can view them in one place. You can combine charts from the Builds, Tests, and Credits tab into a single dashboard, and you can have as many dashboards as you want. " }, 
{ "title" : "Creating a new dashboard ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71562-getting-started-with-insights.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-e049d3aa-7978-94b1-3355-d05599bd70a3", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Creating a new dashboard ", 
"snippet" : "You can create a new dashboard either from the Dashboards page or by clicking on the Add to dashboard button ( ) and clicking the Create dashboard button. We will focus on the former method in this guide: Open Insights. On the left, select Dashboards . Click on Create dashboard to open the Create da...", 
"body" : "You can create a new dashboard either from the Dashboards page or by clicking on the Add to dashboard button ( ) and clicking the Create dashboard button. We will focus on the former method in this guide: Open Insights. On the left, select Dashboards . Click on Create dashboard to open the Create dashboard window. Add the name of the dashboard under the Dashboard name filed and optionally add a description under the Description field. Select the default view of granularity and time range. You can also change these options later. Click on Create . " }, 
{ "title" : "Accessing a dashboard ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71562-getting-started-with-insights.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-fdb2dd50-0b5d-a250-9597-97bd64c06096", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Accessing a dashboard ", 
"snippet" : "To access a dashboard: Open Insights. On the left, select Dashboards . Click on the name of the dashboard or the arrow icon (\" \") to open a specific dashboard. From here, you can see the charts you previously added to your dashboard. For more information, check out Adding a chart to a dashboard....", 
"body" : "To access a dashboard: Open Insights. On the left, select Dashboards . Click on the name of the dashboard or the arrow icon (\" \") to open a specific dashboard. From here, you can see the charts you previously added to your dashboard. For more information, check out Adding a chart to a dashboard. " }, 
{ "title" : "Adding a chart to a dashboard ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71562-getting-started-with-insights.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-6c73f67a-c535-8833-af57-0a84d6dd6ae0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Adding a chart to a dashboard ", 
"snippet" : "You can add any chart from the Builds , Tests , and Credits tabs to your dashboard: Open Insights. Select the Builds , Tests , or Credits tab on the left. Search for the metric you want to add to your dashboard. Click on the Add to dashboard ( ) button next to it. Insert a name under the Chart name ...", 
"body" : "You can add any chart from the Builds , Tests , and Credits tabs to your dashboard: Open Insights. Select the Builds , Tests , or Credits tab on the left. Search for the metric you want to add to your dashboard. Click on the Add to dashboard ( ) button next to it. Insert a name under the Chart name field. Select the dashboard where you want to place this chart using the dropdown menu. Click Add . That's it! From now on you will be able to see your chart on the Dashboard page. Removing a chart from a dashboard You can remove a chart from a dashboard using the edit mode. For more information, check out Editing a dashboard. " }, 
{ "title" : "Editing a dashboard ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71562-getting-started-with-insights.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-9c0e78ee-742c-401d-7013-4e591e3ccefc", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ The Dashboards page \/ Editing a dashboard ", 
"snippet" : "Once you have created a dashboard, you can edit it as you see fit. Among other things, you can edit the default time range or delete charts you may no longer need. To do so, you must use the Edit mode : Open Insights. On the left, select Dashboards . Access the dashboard you would like to edit. Clic...", 
"body" : "Once you have created a dashboard, you can edit it as you see fit. Among other things, you can edit the default time range or delete charts you may no longer need. To do so, you must use the Edit mode : Open Insights. On the left, select Dashboards . Access the dashboard you would like to edit. Click on the \" \" icon, then click on Edit mode . In the edit mode, you may change the dashboard's general settings by clicking on the Settings button. You can also change the name of previously added charts or remove them using the icons next to them. Click on Save after you finish editing the dashboard. " }, 
{ "title" : "Creating alerts ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71562-getting-started-with-insights.html#UUID-a69bea49-f8f3-cf2d-26c8-0a17d973daa7_UUID-63d13216-f268-3124-87f4-ec4acd75bf9d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Getting started with Insights \/ Creating alerts ", 
"snippet" : "You can create alerts for metrics that you would like to keep an eye on to trigger when a specific threshold is reached. You can then push the alert notifications to Slack channels, email addresses, or Teams channels. To learn more about alerts: Configuring alerts in Insights....", 
"body" : "You can create alerts for metrics that you would like to keep an eye on to trigger when a specific threshold is reached. You can then push the alert notifications to Slack channels, email addresses, or Teams channels. To learn more about alerts: Configuring alerts in Insights. " }, 
{ "title" : "Available metrics in Insights ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71564-available-metrics-in-insights.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Available metrics in Insights ", 
"snippet" : "There are numerous available metrics in Insights, such as build success rate, the number of builds, the median time of a successful builds, etc. Insights allows you to track three main categories of metrics. These are the metrics for your Bitrise builds that require no other integration: if you use ...", 
"body" : "There are numerous available metrics in Insights, such as build success rate, the number of builds, the median time of a successful builds, etc. Insights allows you to track three main categories of metrics. These are the metrics for your Bitrise builds that require no other integration: if you use Bitrise CI and Insights, you can track these metrics: Build metrics. Test metrics. Utilization. In addition, Insights can provide data for: Remote build caching . Git operations: Git Insights. " }, 
{ "title" : "Test stats in Insights ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71565-not-used-test-stats-in-build-insights.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights ", 
"snippet" : "With Insights Pro, you can track the metrics of each test case over time, allowing you to analyze the historical performance of each test case. Insights Pro only Test stats in Insights are only available with Insights Pro. Request Pro access now ! Insights integrates with Bitrise Test reporting to p...", 
"body" : "With Insights Pro, you can track the metrics of each test case over time, allowing you to analyze the historical performance of each test case. Insights Pro only Test stats in Insights are only available with Insights Pro. Request Pro access now ! Insights integrates with Bitrise Test reporting to provide historic performance tracking across all your tests. Test stats enables you to locate poorly performing tests and stability problems. As well as this, track the number of test you have in order to measure improvement and ensure too many skipped or failing test don't slip through. " }, 
{ "title" : "Setting up access to test stats ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71565-not-used-test-stats-in-build-insights.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-ff02c00c-b643-70a4-6cf1-8635f05e01ef", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Setting up access to test stats ", 
"snippet" : "To be able to view your test stats in Insights, you need at least two Steps in your Workflow : A testing Step that runs your test cases. The Deploy to Bitrise.io Step. We have five testing Steps that automatically export their results for the Deploy to Bitrise.io Step: if you use any of these Steps ...", 
"body" : "To be able to view your test stats in Insights, you need at least two Steps in your Workflow : A testing Step that runs your test cases. The Deploy to Bitrise.io Step. We have five testing Steps that automatically export their results for the Deploy to Bitrise.io Step: if you use any of these Steps and have access to Insights, you don't need to configure anything to access your test stats. The Steps are: Xcode Test for iOS Android Unit Test iOS Device Testing Virtual Device Testing for Android Flutter Test If you use any other Step, you just need to make sure that your test results end up in the $BITRISE_TEST_RESULT_DIR , which is an automatically exposed Environment Variable pointing to the correct path. " }, 
{ "title" : "Accessing the test stats dashboard ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71565-not-used-test-stats-in-build-insights.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-328ff2bb-f354-53ba-09d6-cf0051913fb6", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Accessing the test stats dashboard ", 
"snippet" : "To get to the test stats dashboard: Log in to your Bitrise account. In the top right corner, open the account selector dropdown menu and select a Workspace. On the header, click Insights . This takes you to the Insights dashboard of the selected Workspace. Click the TEST STATS tab....", 
"body" : "To get to the test stats dashboard: Log in to your Bitrise account. In the top right corner, open the account selector dropdown menu and select a Workspace. On the header, click Insights . This takes you to the Insights dashboard of the selected Workspace. Click the TEST STATS tab. " }, 
{ "title" : "Filtering test stats ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71565-not-used-test-stats-in-build-insights.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-75bc3067-3748-0bea-55ea-081104e2e50c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Filtering test stats ", 
"snippet" : "In the top right of the dashboard, you can filter for time range and test case properties. Filtering for test case properties means being able to filter for: Status : filter for Passed, Failed, Skipped, Inconclusive test stats. Branch : filter test stats for a specific set of branches. Module : filt...", 
"body" : "In the top right of the dashboard, you can filter for time range and test case properties. Filtering for test case properties means being able to filter for: Status : filter for Passed, Failed, Skipped, Inconclusive test stats. Branch : filter test stats for a specific set of branches. Module : filter test stats for a particular module or package. Test Suite : filter test stats for a particular set test suite. " }, 
{ "title" : "Test counts and test summary ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71565-not-used-test-stats-in-build-insights.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-28c64694-c21b-ee59-07c1-135b076ae445", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Test counts and test summary ", 
"snippet" : "On the test stats dashboard, you can see the number of tests over the previously selected time range, broken down by the status of the tests. The possible statuses are: Passed Failed Skipped Error You can use the graph to track the performance of your test cases over time, making it easy to spot any...", 
"body" : "On the test stats dashboard, you can see the number of tests over the previously selected time range, broken down by the status of the tests. The possible statuses are: Passed Failed Skipped Error You can use the graph to track the performance of your test cases over time, making it easy to spot any changes in test coverage. Below the test count graph, you can find the test summary widget which shows you each individual test case during the previously selected time range. You can sort the test cases to locate troublesome tests. We support sorting via: Total run time : how much time and therefore credits spent executing each test case. Runs : the total number of executions for each test case. Re-runs : the number of times each test case has required a re-run to pass. It is an indicator of test flakiness. Success rate : the percentage of completed test runs that passed. It doesn't include aborted test runs. Typical duration : the 50th percentile (median) run time for each test case. Slowest duration : the 95th percentile run time for each test case. For each test case, we also show a recent history chart to indicate the recent performance. Clicking a test case takes you to the Test case history page. Tips for flaky Android tests If you are experiencing flaky Android tests, check out our guide in this Knowledge Base article . " }, 
{ "title" : "Test case history ", 
"url" : "88887-41967-bitrise-docs/88887-43268-insights/88887-71565-not-used-test-stats-in-build-insights.html#UUID-7ac126d1-5bd9-e644-642d-f8755f15eaef_UUID-49f583df-01c5-17fd-5f02-c00c234d4e86", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Insights \/ Test stats in Insights \/ Test case history ", 
"snippet" : "Insights tracks the metrics of each test case over time, allowing you to analyze the historical performance of each test case. On the top of the test case history page, you can see the aggregated statistics for that particular test case. These are the same stats that are displayed for each test case...", 
"body" : "Insights tracks the metrics of each test case over time, allowing you to analyze the historical performance of each test case. On the top of the test case history page, you can see the aggregated statistics for that particular test case. These are the same stats that are displayed for each test case on the test summary widget on the test stats dashboard. To get into test case performance in more detail, you can look at: Duration trend : shows the historical performance for the test case. The chart shows the 50th percentile (median) and 95th percentile performance, allowing you to see if the performance of the test is getting better or worse over time and how the consistency varies. Success rate trend : success rate trends show the percentage of successful runs of the test case over time. Latest tests : this timeline shows the history of the recent runs of this particular test case, and detailed information about each run. On the Latest tests chart, hover over any run to see its details. Status : the status of the test run, indicated by the color. Repetition : the number of re-runs the test case required. Duration : how long the test run took. Test Suite : the parent suite of the test case. Branch : the git branch containing the code that the test ran against. Build number : the Bitrise build number this test ran on. Click any of the test runs to get to the Bitrise build log of the build that ran the test. " }, 
{ "title" : "Bitrise CLI ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI ", 
"snippet" : "The Bitrise CLI is Bitrise's open source runner. The CLI is used to run your builds on bitrise.io . You can install and run it on your own computer to run builds locally. The Bitrise CLI is Bitrise's open source runner. The CLI is used to run your builds on bitrise.io and you can install and run it ...", 
"body" : "The Bitrise CLI is Bitrise's open source runner. The CLI is used to run your builds on bitrise.io . You can install and run it on your own computer to run builds locally. The Bitrise CLI is Bitrise's open source runner. The CLI is used to run your builds on bitrise.io and you can install and run it on your own computer to run builds locally. To use the CLI locally, you don't need a Bitrise account. You just need to install the CLI. In this section of the documentation, you'll learn how to install and update the CLI, how to run builds and manage Secrets locally, and how to set up and use the offline Workflow Editor. " }, 
{ "title" : "Installing and updating the Bitrise CLI ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43325-installing-and-updating-the-bitrise-cli.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI ", 
"snippet" : "Installing the Bitrise CLI is super simple. It is distributed as a single binary for macOS and Linux which you can acquire in several ways. All you need to do is download it and make it executable....", 
"body" : "Installing the Bitrise CLI is super simple. It is distributed as a single binary for macOS and Linux which you can acquire in several ways. All you need to do is download it and make it executable. " }, 
{ "title" : "Installing the Bitrise CLI with curl ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43325-installing-and-updating-the-bitrise-cli.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-22e43ed7-8242-579d-78a0-12b5764dce07", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Installing the Bitrise CLI with curl ", 
"snippet" : "Run the following command in a bash shell: curl -fL https:\/\/github.com\/bitrise-io\/bitrise\/releases\/latest\/download\/bitrise-$(uname -s)-$(uname -m) > \/usr\/local\/bin\/bitrise You can check the latest release of the Bitrise CLI on its releases page. Make the downloaded binary executable: chmod +x \/usr\/l...", 
"body" : "Run the following command in a bash shell: curl -fL https:\/\/github.com\/bitrise-io\/bitrise\/releases\/latest\/download\/bitrise-$(uname -s)-$(uname -m) > \/usr\/local\/bin\/bitrise You can check the latest release of the Bitrise CLI on its releases page. Make the downloaded binary executable: chmod +x \/usr\/local\/bin\/bitrise Run bitrise setup . This will verify if everything that is required for Bitrise to run is installed and available. If you skip this, the CLI will perform the setup anyway the first time you call bitrise run . " }, 
{ "title" : "Installing the Bitrise CLI with Homebrew ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43325-installing-and-updating-the-bitrise-cli.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-f59e42d6-c4f8-02c6-3f57-56d84907ea24", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Installing the Bitrise CLI with Homebrew ", 
"snippet" : "If you have the Homebrew package manager installed on your Mac, you can use it to install the Bitrise CLI. Open the Terminal app on your Mac and run: brew update && brew install bitrise Run bitrise setup . This will verify if everything that is required for Bitrise to run is installed and available....", 
"body" : "If you have the Homebrew package manager installed on your Mac, you can use it to install the Bitrise CLI. Open the Terminal app on your Mac and run: brew update && brew install bitrise\n Run bitrise setup . This will verify if everything that is required for Bitrise to run is installed and available. If you skip this, the CLI will perform the setup anyway the first time you call bitrise run . " }, 
{ "title" : "Updating the Bitrise CLI ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43325-installing-and-updating-the-bitrise-cli.html#UUID-372b2639-babb-6390-d1d2-898e39825d4a_UUID-e201bbcd-5d8d-31e8-2b80-c4d5dde3605c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and updating the Bitrise CLI \/ Updating the Bitrise CLI ", 
"snippet" : "Updating the Bitrise CLI is easy, and it doesn’t matter if you installed it with Homebrew or from the GitHub release. Simply run bitrise update - that’s it! The CLI checks for updates once every day and notifies you as soon as there is a new version....", 
"body" : "Updating the Bitrise CLI is easy, and it doesn’t matter if you installed it with Homebrew or from the GitHub release. Simply run bitrise update - that’s it! The CLI checks for updates once every day and notifies you as soon as there is a new version. " }, 
{ "title" : "Adding a new app from a CLI ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43172-adding-a-new-app-from-a-cli.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Adding a new app from a CLI ", 
"snippet" : "You can register a Bitrise app from a command line interface and start building. You can create a bitrise.yml file in advance and use that, or have our project scanner scan your project and generate one for you. You can easily register a new Bitrise app from any command line interface: the process i...", 
"body" : "[video] You can register a Bitrise app from a command line interface and start building. You can create a bitrise.yml file in advance and use that, or have our project scanner scan your project and generate one for you. You can easily register a new Bitrise app from any command line interface: the process is guided and simple to follow. And it’s fast: if, for example, you have the bitrise.yml file you want to use for the app, you do not have to wait for the project scanner to detect the app type and generate your bitrise.yml file. Just plug in the existing file and you are good to go! Adding an app with the API You can also use the Bitrise API to add a new app: Adding and managing appsBefore you try adding a new app to Bitrise via our CLI, make sure a few things are in order: You need a Bitrise account, with a connected Git provider. Your project must have a local Git repository on your machine and a remote repository at a Git provider. If you want to use an SSH key to access the repository, the remote repository URL must be an SSH URL ! For example, git@github.com:example-user\/example.git . You can also create a bitrise.yml in advance and you will be able to add that to your app during the creation process. This is optional: you can have the project scanner generate one for you during the process, just like on our website! This procedure guides you through adding an app which Bitrise will access with an SSH key. This requires that the app’s remote repository has an SSH URL, such as git@github.com:example-user\/example.git . You can, of course, use an HTTPS URL to access your remote repository, too: in that case, you will not set an SSH key for your app. We only recommend using HTTPS URLs for public apps (open source projects). Go to the Create New App from CLI page. You can reach this page from your Dashboard : click the Add new app button on the right, and then select Add New App from CLI . Set the account that will own the app, and the privacy of the app. Copy the curl command you find there. Open a command line interface. Change the directory to your project’s location. Paste the curl command and hit Enter . Select the repository URL: choose the SSH option. This prompt only comes up if your local repository’s remote has an SSH URL. If the remote repository has an HTTPS URL, you won’t see this prompt. Remote URL: git@github.com:example-user\/example.git\n\n? Select repository URL::\n https:\/\/github.com\/example-user\/example.git\n > ssh:\/\/git@github.com:example-user\/example.git\n Register an SSH key. Specify how Bitrise will be able to access the source code: \n > Automatic\n Add own SSH You can select either the automatic registration or choose to add your own. If you choose automatic, Bitrise will automatically generate a key pair. If you need to use additional private repositories or submodules, choose the I need to option when prompted and follow the instructions. If not, select the No, auto-add SSH key option: this automatically adds the public key to your repository. If you choose to add your own, you have to provide the path to the SSH key file: either enter it manually, or drag and drop the file, as that will input the path. Decide what bitrise.yml file you want to upload. ? What bitrise.yml do you want to upload? \n > Run the scanner to generate a new bitrise.yml\n Use the bitrise.yml found in the current directory or specify manually You can either have the scanner generate one based on your project files or you can provide a file. If your repository already contains a bitrise.yml file, the path to it will be automatically filled in. Select the branch you want to use. The default option is the current active branch. The current branch is: master (tracking: origin master),\n \n? Do you want to run the scanner for this branch?\n > Yes\n No\n If you select No , you will be prompted to check out the branch you wish to use, and then hit Enter again so the scanner can start. Once the scanner is done, it will either detect your app’s type or it will switch to manual configuration. Manual configuration means you have to select the type of your app (iOS, Android, React Native, Flutter, and so on) and you have to provide the path to the relevant configuration file. For example, a config.xml in the case of an Ionic app. In this guide, we’ll proceed with automatic detection. Select the stack you want to use. If the scanner detects your project type, a stack will be automatically recommended but you can change it in the CLI if you want to. If you performed manual configuration as described above, you will have to choose the stack, too. Finish the process with setting up webhooks and code signing files. You can decide to skip webhook registration but it’s required to automatically trigger builds on Bitrise. For more information: WebhooksYou can upload code signing files: depending on your app’s type, you will be asked if you want to upload iOS code signing files and\/or an Android keystore file. You can upload these files any time on the website. For more information: Code signingAnd that’s it! You are done: the URL to your new app will be printed out, and you can also view the app on your Dashboard . " }, 
{ "title" : "Initializing a Bitrise project locally ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43327-initializing-a-bitrise-project-locally.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Initializing a Bitrise project locally ", 
"snippet" : "You can use the bitrise init plugin to initialize a new Bitrise app on your own computer, without adding it to Bitrise online. When you add a new app to Bitrise, we detect the type of your project and generate a basic bitrise.yml file for you, with Workflows that are appropriate for your project typ...", 
"body" : "You can use the bitrise init plugin to initialize a new Bitrise app on your own computer, without adding it to Bitrise online. When you add a new app to Bitrise, we detect the type of your project and generate a basic bitrise.yml file for you, with Workflows that are appropriate for your project type. With the Bitrise CLI, you can make this work on your own computer: Install the Bitrise CLI on your computer. Make sure that $GOPATH\/bin is added to $PATH on your computer. By default, your Go workspace is at $HOME\/go\/bin . Installing Go If you don't have Go installed on your computer, bitrise init will automatically install it for you. Start the bitrise init plugin: bitrise init Wait while the plugin runs all available scanners to determine your project type. Depending on the detected project type, the scanner asks for some input. Follow the instructions. For example, with an iOS project, it asks the user to specify an export method: Select: ipa export method\nPlease select from the list:\n[1] : app-store\n[2] : ad-hoc\n[3] : enterprise\n[4] : development\n(type in the option's number, then hit Enter) : Based on the scanner outputs, the plugin generates a Bitrise configuration, with a bitrise.yml file. In the automatically generated Workflows, every required input will have a valid value. The plugin also generates a bitrise.secrets.yml file. You can store your Secrets in this file. " }, 
{ "title" : "Installing and upgrading the offline Workflow Editor ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43329-installing-and-upgrading-the-offline-workflow-editor.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor ", 
"snippet" : "Bitrise Workflow Editor is designed in such a way that you can run it offline on your Mac\/PC without having to log into bitrise.io . The Workflow Editor is open source, you can find its repository here . You can also join the discussion around Workflow Editor here ....", 
"body" : "Bitrise Workflow Editor is designed in such a way that you can run it offline on your Mac\/PC without having to log into bitrise.io . The Workflow Editor is open source, you can find its repository here . You can also join the discussion around Workflow Editor here . " }, 
{ "title" : "Installing the offline Workflow Editor to your computer ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43329-installing-and-upgrading-the-offline-workflow-editor.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-120c6296-998f-75f6-4037-b0f34fefed49", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Installing the offline Workflow Editor to your computer ", 
"snippet" : "Install the Bitrise CLI . Make sure you have Go installed on your local computer. Run bitrise setup to install offline Workflow Editor as part of the Bitrise Plugins. Running bitrise setup also checks if Bitrise Core tools, OS X tools, Bitrise Plugins and Toolkits are installed on your local machine...", 
"body" : "Install the Bitrise CLI . Make sure you have Go installed on your local computer. Run bitrise setup to install offline Workflow Editor as part of the Bitrise Plugins. Running bitrise setup also checks if Bitrise Core tools, OS X tools, Bitrise Plugins and Toolkits are installed on your local machine. If not, the command will automatically install them. " }, 
{ "title" : "Starting the offline Workflow Editor ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43329-installing-and-upgrading-the-offline-workflow-editor.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-e57a19cd-edaf-797a-e014-2b633140e0ed", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Starting the offline Workflow Editor ", 
"snippet" : "cd into a directory where you have your bitrise.yml . Run bitrise :workflow-editor command to start your offline session. Here is the overall look and feel:...", 
"body" : "cd into a directory where you have your bitrise.yml . Run bitrise :workflow-editor command to start your offline session. Here is the overall look and feel: " }, 
{ "title" : "Upgrading Workflow Editor version ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43329-installing-and-upgrading-the-offline-workflow-editor.html#UUID-9c649821-1aaa-ab87-c4ec-925292d424f1_UUID-5146514c-45cb-428b-1af8-0b3139d9979b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Installing and upgrading the offline Workflow Editor \/ Upgrading Workflow Editor version ", 
"snippet" : "You can upgrade to the latest version of the Workflow Editor by running bitrise plugin update workflow-editor command....", 
"body" : "You can upgrade to the latest version of the Workflow Editor by running bitrise plugin update workflow-editor command. " }, 
{ "title" : "Running your first local build with the CLI ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43333-running-your-first-local-build-with-the-cli.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Running your first local build with the CLI ", 
"snippet" : "Run a Bitrise build locally with the Bitrise CLI and a bitrise.yml file. To do so, use the bitrise run command once you have the correct YAML configuration. To run a Bitrise build locally, you only need to: Install the Bitrise CLI . A build configuration: that is, a bitrise.yml file. If you use bitr...", 
"body" : "Run a Bitrise build locally with the Bitrise CLI and a bitrise.yml file. To do so, use the bitrise run command once you have the correct YAML configuration. To run a Bitrise build locally, you only need to: Install the Bitrise CLI . A build configuration: that is, a bitrise.yml file. If you use bitrise.io , you can download your app’s bitrise.yml from there: open the Workflow Editor of the app on bitrise.io , under the bitrise.yml section. If you want to create a bitrise.yml yourself, simply create a bitrise.yml file in the root of your project. You can use this as the base content of the bitrise.yml : \nformat_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\napp:\n envs:\n - MY_NAME: My Name\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n - content: echo \"Hello ${MY_NAME}!\" This defines an Environment Variable with your name and a Workflow called test . To run this build: Open the Terminal or some other CLI app. Go to the directory where you saved the bitrise.yml file. Run bitrise run with the name of the Workflow you defined in the file. bitrise run test That’s it: your first build is running with the Bitrise CLI. " }, 
{ "title" : "Managing Secrets locally ", 
"url" : "88887-41967-bitrise-docs/88887-43324-bitrise-cli/88887-43338-managing-secrets-locally.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Bitrise CLI \/ Managing Secrets locally ", 
"snippet" : "When you run a build locally, with the Bitrise CLI, the Secrets are read from a .bitrise.secrets.yml file, which is expected to be in the same directory where the bitrise.yml is, and where you run the bitrise run command. When you run a build locally, with the Bitrise CLI, the Secrets are read from ...", 
"body" : "When you run a build locally, with the Bitrise CLI, the Secrets are read from a .bitrise.secrets.yml file, which is expected to be in the same directory where the bitrise.yml is, and where you run the bitrise run command. When you run a build locally, with the Bitrise CLI, the Secrets are read from a .bitrise.secrets.yml file, which is expected to be in the same directory where the bitrise.yml is, and where you run the bitrise run command. If you want to store your Secrets somewhere else, you can specify the location of the Secrets file with the --inventory flag of the bitrise run command. For example: . bitrise run my-workflow --inventory \/path\/to\/secrets.yml Make sure to gitignore your Secrets file As a best practice, you should always make sure that the .bitrise.secrets.yml is added to your .gitignore , so that it will never be committed into your repository! The best is if you gitignore everything that starts with .bitrise , which can be done by adding the line: .bitrise* to your .gitignore file. The Secrets YAML file has to include a root envs: item and then the list of Secret Environment Variables. envs:\n- SECRET_ENV_ONE: first Secret value\n- SECRET_ENV_TWO: second Secret value The Secrets defined in the .bitrise.secrets.yml file can be used just like any other Environment Variable. format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n - content: |\n #!\/bin\/bash\n echo \"SECRET_ENV_ONE: ${SECRET_ENV_ONE}\"\n echo \"SECRET_ENV_TWO: ${SECRET_ENV_TWO}\" You can just bitrise run test in the directory, and the Script Step will print the values specified in the secrets file: SECRET_ENV_ONE: first secret value\nSECRET_ENV_TWO: second secret value As Secrets are the first Environment Variables processed when you execute a bitrise run command, you can use the Secrets everywhere in your bitrise.yml . " }, 
{ "title" : "API ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API ", 
"snippet" : "The Bitrise API allows you to build deep, custom integrations with your preferred tools and processes to create even more efficient development pipelines. The Bitrise API allows you to build deep, custom integrations with your preferred tools and processes to create even more efficient development p...", 
"body" : "The Bitrise API allows you to build deep, custom integrations with your preferred tools and processes to create even more efficient development pipelines. The Bitrise API allows you to build deep, custom integrations with your preferred tools and processes to create even more efficient development pipelines. The API provides you with control of - and access to - the features and data available through the Bitrise website and CLI. By using the API, you gain the ability to fully customize Bitrise’s functionality to fit your process. The API is work-in-progress The API is work-in-progress: we will add new endpoints and possibly update the existing ones in the future. You can track the progress of the API: join the discussion ! Follow it and get notified about new endpoints and changes, we announce those there. Feel free to contribute! If you want to request a new API feature or a new endpoint, you can do so! The Bitrise API’s host is: https:\/\/api.bitrise.io\/ Every endpoint except the root one is versioned. The version has to be included in the URL right after the host: for example, https:\/\/api.bitrise.io\/v0.1\/me is the endpoint for your own user account. Right now we have only one version, v0.1 . There’s no long term compatibility promise for v0.1 , although we try to do our best to not to break anything unless we have to. Once we’re happy with v0.1 we’ll “freeze” it as v1.0 , for which we’ll provide long term support. " }, 
{ "title" : "Authenticating with the Bitrise API ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43392-authenticating-with-the-bitrise-api.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Authenticating with the Bitrise API ", 
"snippet" : "You need to create a personal access token to authenticate with the Bitrise API. The token is needed for all endpoints. The current API supports two types of authentication: User-generated personal access tokens . Workspace API tokens. Every API endpoint requires authentication, except the “root” UR...", 
"body" : "You need to create a personal access token to authenticate with the Bitrise API. The token is needed for all endpoints. The current API supports two types of authentication: User-generated personal access tokens . Workspace API tokens. Every API endpoint requires authentication, except the “root” URL ( https:\/\/api.bitrise.io ). Create either a personal access token or a Workspace API token . Save it in a secure way. Add an Authorization header with the access token to your API calls. For example, the following call retrieves a list of apps you or your Workspace has access to: curl -X 'GET' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps' \\\n -H 'Authorization: <ACCESS-TOKEN>'\n -H 'accept: application\/json' " }, 
{ "title" : "Pagination of API calls ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43393-pagination-of-api-calls.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Pagination of API calls ", 
"snippet" : "With the Bitrise API, you can use pagination to iterate through list of items in the responses of certain endpoints. You can configure the properties of pagination. When you call an endpoint that returns a list of items, you might not get the whole list in a single response. You’ll have to iterate t...", 
"body" : "With the Bitrise API, you can use pagination to iterate through list of items in the responses of certain endpoints. You can configure the properties of pagination. When you call an endpoint that returns a list of items, you might not get the whole list in a single response. You’ll have to iterate through the pages to retrieve all the items. The response of such endpoints include a paging object, with total_item_count and page_item_limit properties. If there is a “next” page available, it’ll also include a next “anchor” item. For example, the response will show the app slug of the first app on the next page. {\n \"data\": [ ... ],\n \"paging\": {\n \"total_item_count\": 3,\n \"page_item_limit\": 2,\n \"next\": \"518e869d56f2adfd\"\n }\n}\n The next property of the paging object The next property of the paging object is only included if there’s at least one more page available. If there’s no next property inside paging that means that there’s no more page to retrieve. Limit the number of response pages with the limit parameter: https:\/\/api.bitrise.io\/v0.1\/me\/apps?limit=10 This call sets the page_item_limit property to 10. The default (and maximum) value of the parameter is 50. Iterate through response items: Call the endpoint without any pagination parameters. From the response process the paging object. If the paging object includes a next item, call the exact same endpoint with an additional next= query parameter, and pass the value you got in the response as the value of the next parameter. Iterating through all your registered apps Call https:\/\/api.bitrise.io\/v0.1\/me\/apps . Process the items ( data property). Check the paging (root) property. If there’s a next property inside paging , call the endpoint again, with the next query parameter Example: https:\/\/api.bitrise.io\/v0.1\/me\/apps?next=NEXTVALUE , where NEXTVALUE is the value of the next property you got in your previous response. Repeat this until the paging object does not include a next property, which means that the page you received was the last one. " }, 
{ "title" : "Adding and managing apps ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43395-adding-and-managing-apps.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps ", 
"snippet" : "You can add new apps on Bitrise with the API: add the app , generate SSH keys, and set up the app’s initial configuration. You can add new apps on Bitrise with the API: add the app , generate SSH keys, and set up the app’s initial configuration. In addition, you can list all apps belonging, for exam...", 
"body" : "You can add new apps on Bitrise with the API: add the app , generate SSH keys, and set up the app’s initial configuration. You can add new apps on Bitrise with the API: add the app , generate SSH keys, and set up the app’s initial configuration. In addition, you can list all apps belonging, for example, to a single user or to a specific Workspace . " }, 
{ "title" : "Adding a new app with the API ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43395-adding-and-managing-apps.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-6ce6b338-7be5-29c9-fd1b-12c6c3b5211c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Adding a new app with the API ", 
"snippet" : "Endpoints used in adding a new app with the Bitrise API Endpoints Function Required role on the app's team POST \/apps\/register Add a new app. N\/A POST \/apps\/{app-slug}\/register-ssh-key Add an SSH key to a specific app. Owner or Admin POST \/apps\/{app-slug}\/finish Save the application at the end of th...", 
"body" : "Endpoints used in adding a new app with the Bitrise API Endpoints Function Required role on the app's team POST \/apps\/register Add a new app. N\/A POST \/apps\/{app-slug}\/register-ssh-key Add an SSH key to a specific app. Owner or Admin POST \/apps\/{app-slug}\/finish Save the application at the end of the application add process. N\/A POST \/apps\/{app-slug}\/bitrise.yml Upload a new bitrise.yml for your application. Owner or Admin Apps with HTTPS Git URLs The procedure and the examples are aimed at adding a private app with an SSH git URL. If you want to add an app with an HTTPS git URL, you can skip adding an SSH key. Register the app by calling the register endpoint and setting all required parameters. You need to set your git provider, the repository URL, the slug of the repository as it appears at the provider, and the slug of the owner of the repository. You also need to add the slug of the Workspace that will own the app: due to legacy naming conventions, you need the organization_slug parameter. curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n \"provider\": \"github\",\n \"is_public\": false,\n \"organization_slug\": \"$ORG_SLUG\"\n \"repo_url\": \"git@github.com:api_demo\/example-repository.git\",\n \"type\": \"git\",\n \"git_repo_slug\": \"example-repository\",\n \"git_owner\": \"api_demo\"\n }' Changing the name of your app By default, when you register an app, it will inherit the name of your git repository. If you would like to add the app with a different name, you can append the \"title\" parameter to your POST request using the following syntax: curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/register' -d \\\n'{\n ...\n ...\n \"title\": \"string\"\n }'\n You can also change the name of your app after creating it, by sending a PATCH request and calling the apps endpoint. For more information, see Managing an existing app . Once done, call the register-ssh-key endpoint to set up the SSH keys you created so that Bitrise can clone your repository when running a build. You need to provide both your private and public SSH key. Please note that if you wish to copy the private key manually, you need to escape all the line breaks with \\n . You can also set whether you want to automatically register the public key at your git provider: set the is_register_key_into_provider_service parameter to either true or false. curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/register-ssh-key' -d \\\n'{\n \"auth_ssh_private_key\": \"your-private-ssh-key\",\n \"auth_ssh_public_key\": \"your-public-ssh-key\",\n \"is_register_key_into_provider_service\": false\n }' Finish the app registration process by calling the finish endpoint. This endpoint allows you to configure your apps: set the project type, the stack on which the build will run (this may vary based on your app), and the initial configuration settings. You can also set Environment Variables, as well as immediately specify a Workspace that will be the owner of the application. Please note that the mode parameter must be set to the value of manual . curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/finish' -d \\\n'{\n \"project_type\": \"ios\",\n \"stack_id\": \"osx-xcode-13.2.x\",\n \"config\": \"default-ios-config\",\n \"mode\": \"manual\",\n \"envs\": {\n \"env1\": \"val1\",\n \"env2\": \"val2\"\n },\n \"organization_slug\": \"e1ec3dea540bcf21\"\n }'\n " }, 
{ "title" : "Managing an existing app ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43395-adding-and-managing-apps.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-506c2f14-4f70-ba9a-5ba3-b3b084ad5930", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing an existing app ", 
"snippet" : "Endpoints related to managing an existing app with the Bitrise API Endpoints Function Required role on the app's team GET \/apps Get list of your apps. Any GET \/apps\/{app-slug} Get a specific app. Any GET \/apps\/{app-slug}\/bitrise.yml Get the bitrise.yml of a specific app. Owner or Admin GET \/apps\/{ap...", 
"body" : "Endpoints related to managing an existing app with the Bitrise API Endpoints Function Required role on the app's team GET \/apps Get list of your apps. Any GET \/apps\/{app-slug} Get a specific app. Any GET \/apps\/{app-slug}\/bitrise.yml Get the bitrise.yml of a specific app. Owner or Admin GET \/apps\/{app-slug}\/branches List the branches of an app’s repository. Any GET \/organizations\/{org-slug}\/apps Get list of the apps for a Workspace. Any GET \/users\/{user-slug}\/apps Get list of the apps for a user. Any PATCH \/apps\/{app-slug} Update an existing app's parameters Owner or Admin The response to any GET request regarding one or more apps will contain the app slug, its project type, the git provider, the repository’s owner and URL: {\n \"data\": [\n {\n \"slug\": \"eeeeefffff00000\",\n \"title\": \"sample-app\",\n \"project_type\": \"android\",\n \"provider\": \"github\",\n \"repo_owner\": \"example-user\",\n \"repo_url\": \"git@github.com:example-user\/sample-app.git\",\n \"repo_slug\": \"android-gradle-kotlin-dsl\",\n \"is_disabled\": false,\n \"status\": -1,\n \"is_public\": false,\n \"owner\": {\n \"account_type\": \"organization\",\n \"name\": \"Test Org\",\n \"slug\": \"fffffeeeee00000\"\n },\n \"avatar_url\": null\n },\n {\n You can also download the existing bitrise.yml file of any app: the response will contain the full YAML configuration. Would you like to change the title or the default git branch of an existing app? You can update an existing app's parameters by calling the PATCH method of the  apps  endpoint. Required role You must have an admin or owner role on the app's team to update an existing app's parameters using the Bitrise API. For a complete list of user roles and role cheatsheets, check  User roles on app teams . The required parameter is: slug The optional parameters are: apple_credential_user_id : The new apple credential user ID (recommendation: use the UI to set this) apple_credential_user_slug : The new apple credential user slug (recommendation: use the UI to set this) default_branch : The new default branch for the application. is_public : The new the value if the application should be publicly visible. repository_url : The new repository URL for the application. services_credential_user_id : The new service credential user ID (recommendation: use the UI to set this). title : The new title of the application. Changing the name and the default branch of an existing app Request: curl -X 'PATCH' 'https:\/\/api.bitrise.io\/v0.1\/apps\/THE-APP-SLUG' -H 'accept: application\/json' -H 'Authorization: ACCESS-TOKEN' -H 'Content-Type: application\/json' -d '{\"default_branch\": \"main\", \"title\": \"Example_app_title_3\"}' " }, 
{ "title" : "Managing app access roles for Workspace groups ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43395-adding-and-managing-apps.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-32985907-72ce-7984-af0f-99fb52394b36", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing app access roles for Workspace groups ", 
"snippet" : "You can grant Workspace groups access to application teams on Bitrise. It means that all members of the group will be able to work on the app in the role assigned to the group . List all groups that have been granted a given role on an app's team by using the GET \/apps\/{app-slug}\/roles\/{role-name} e...", 
"body" : "You can grant Workspace groups access to application teams on Bitrise. It means that all members of the group will be able to work on the app in the role assigned to the group . List all groups that have been granted a given role on an app's team by using the GET \/apps\/{app-slug}\/roles\/{role-name} endpoint. The role-name parameter takes three possible values: admin manager : this is the equivalent of the Developer role on bitrise.io. member : this is the equivalent of Tester\/QA on bitrise.io. In this example, we're querying a list of Workspace groups that have been granted Admin role to a specific app: curl -X 'GET' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/roles\/admin' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' Grant access to existing Workspace groups by using the PUT \/apps\/{app-slug}\/roles\/{role-name} endpoint. This endpoint requires a groups object that contains the slugs of all the groups that are granted access with the specified role. Specify all groups This endpoint replaces all previous groups that had the specified role on the app's team. If, for example, you call the endpoint to grant the groups Alpha and Beta the Admin role on the app's team, only Alpha and Beta will have Admin access to the app afterwards. If another group - let's call it Delta - previously had Admin role on the team, it will be removed. Getting the group slugs To get the group slugs of your Workspace, use the GET \/organizations\/{org-slug}\/groups endpoint. In the following example, we'll be granting several groups Admin access: curl -X 'PUT' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/roles\/admin' \\\n -H 'accept: application\/json' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"groups\": [\n \"GROUP-SLUG-1\", \"GROUP-SLUG-2\"\n ]\n}' " }, 
{ "title" : "Deleting an app using the API ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43395-adding-and-managing-apps.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-70f042e9-8eb8-615b-3d8d-de304abf4181", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Deleting an app using the API ", 
"snippet" : "Deletion is final Be aware that you cannot undo deleting an app. Once you delete it, there is no way to recover the app. You can delete apps with the Bitrise API. The only required parameter is the app slug of the app you want to delete: curl -X DELETE -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.b...", 
"body" : "Deletion is final Be aware that you cannot undo deleting an app. Once you delete it, there is no way to recover the app. You can delete apps with the Bitrise API. The only required parameter is the app slug of the app you want to delete: curl -X DELETE -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/THE-APP-SLUG' " }, 
{ "title" : "Uploading a new bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43395-adding-and-managing-apps.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-f4b551cb-eae4-42a3-4745-bca748605a6f", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Uploading a new bitrise.yml file ", 
"snippet" : "Required role You must have an admin or owner role on the app's team to upload a new bitrise.yml file. For a complete list of user roles and role cheatsheets, check User roles on app teams. The bitrise.yml file contains the configuration of your builds. You can modify the current one via the API by ...", 
"body" : "Required role You must have an admin or owner role on the app's team to upload a new bitrise.yml file. For a complete list of user roles and role cheatsheets, check User roles on app teams. The bitrise.yml file contains the configuration of your builds. You can modify the current one via the API by posting a full YAML configuration. In the below example, we are: Creating a bitrise.yml with format version 11. Setting the Bitrise Step Library as the default Step source. Setting the stack to Xcode 14. Setting the BITRISE_PROJECT_PATH Environment Variable to point to the build.gradle file. Adding a Script Step. Creating a trigger map that triggers the primary Workflow if code is pushed to any branch of the app's repository. curl --fail -X POST -H \"Authorization: $ACCESS_TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/$APP_SLUG\/bitrise.yml\" -d \\\n'{\n \"app_config_datastore_yaml\": {\n \"format_version\": 11,\n \"default_step_lib_source\": \"https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\",\n \"meta\": {\n \"bitrise.io\": {\n \"stack\": \"osx-xcode-14.0.x\"\n }\n },\n \"app\": {\n \"envs\": [\n {\n \"BITRISE_PROJECT_PATH\": \"build.gradle\",\n \"opts\": {\n \"is_expand\": false\n }\n }\n ]\n },\n \"workflows\": {\n \"primary\": {\n \"steps\": [\n {\n \"script@1\": {}\n }\n ]\n }\n },\n \"trigger_map\": [\n {\n \"push_branch\": \"*\",\n \"workflow\": \"primary\"\n }\n ]\n }\n}' By calling this endpoint, you replace the app’s current bitrise.yml file. You can, of course, modify this uploaded bitrise.yml either via the API or on the website itself. " }, 
{ "title" : "Changing the location of the app's bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43395-adding-and-managing-apps.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-b00d817f-48d6-3c48-2a0b-7b246ea41f8b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Changing the location of the app's bitrise.yml file ", 
"snippet" : "The app's bitrise.yml configuration file can be stored in two places: On bitrise.io. This is the default setting for all apps. In your app's repository. This way you have full control over the versioning and maintenance of the config file. You can still use the graphical Workflow Editor on bitrise.i...", 
"body" : "The app's bitrise.yml configuration file can be stored in two places: On bitrise.io. This is the default setting for all apps. In your app's repository. This way you have full control over the versioning and maintenance of the config file. You can still use the graphical Workflow Editor on bitrise.io to modify your configuration but you will need to commit your changes to the repository. You can get and change the location of the file using the API. Admin access required Both endpoints related to the location of the bitrise.yml file require admin level access to the app. With the GET\/apps\/{app-slug}\/bitrise.yml\/config endpoint, you can get the location of the file. Location here means that calling the endpoint tells you whether the file is stored on bitrise.io or in the repository. The endpoint takes no parameters and it returns one of two values in the response: \"location\": \"bitrise.io\" \"location\": \"repository\" curl -X 'GET' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/bitrise.yml\/config' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' With the PUT\/apps\/{app-slug}\/bitrise.yml\/config endpoint, you can change the location of the file: that is, you can tell Bitrise whether to look for the config file on bitrise.io or in your repository. This endpoint takes one of two values in a JSON object: \"location\": \"bitrise.io\" to store the config file on bitrise.io. \"location\": \"repository\" to store the config file in your repository. Commit the config file into your repository Please note that changing the location to repository merely tells Bitrise to look for the bitrise.yml file in the app's repository. If the file does not exist in the repository, the endpoint won't return an error but you won't be able to run builds because Bitrise won't find the config file. curl -X 'PUT' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/bitrise.yml\/config' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"location\": \"bitrise.io\"\n}' " }, 
{ "title" : "Changing machine types in all apps at the same time ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43395-adding-and-managing-apps.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-67e17f8a-1289-8062-3402-5595b857d1f0", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Changing machine types in all apps at the same time ", 
"snippet" : "Endpoints used to migrate machine types from one to another Endpoints Function Required role PATCH \/user\/{user-slug}\/apps\/machine_types Migrate a specified machine type to another in all apps owned by the same user. N\/A PATCH \/organizations\/{org-slug}\/apps\/machine_types Migrate a specified machine t...", 
"body" : "Endpoints used to migrate machine types from one to another Endpoints Function Required role PATCH \/user\/{user-slug}\/apps\/machine_types Migrate a specified machine type to another in all apps owned by the same user. N\/A PATCH \/organizations\/{org-slug}\/apps\/machine_types Migrate a specified machine type to another in all apps owned by the same Workspace. Workspace owner The Bitrise API provides two endpoints that allow you to switch between one machine type and another for all apps owned by either a user or a Workspace . The endpoints parse the bitrise.yml file of each app, look for all occurrences of a specified machine type, and replace them with another type. For example, you can switch from M1 Medium to M1 Large on all your apps with this endpoint. Both endpoints take two parameters: from_machine : The machine type you want to switch from. to_machine : The machine type you want to switch to. You can find the list of available machine types here: Build machine types. If the endpoints don't find the machine type specified in the from_machine parameter, they will still return a 200 response, with an empty migrated_apps object. Default and Workflow-specific stacks The endpoints can change the machine types for both default stacks and Workflow-specific stacks. Migrating all apps owned by a user from M1 Medium machines to M1 Large machines: curl -X 'PATCH' \\\n 'https:\/\/api.bitrise.io\/v0.1\/user\/USER-SLUG\/apps\/machine_types' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: PERSONAL-ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"from_machine\": \"g2-m1.4core\",\n \"to_machine\": \"g2-m1.8core\"\n}' Migrating all apps owned by a Workspace from M1 Max Medium machines to M1 Max Large machines: curl -X 'PATCH' \\\n 'https:\/\/api.bitrise.io\/v0.1\/organizations\/WORKSPACE-SLUG\/apps\/machine_types' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: PERSONAL-ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"from_machine\": \"g2-m1-max.5core\",\n \"to_machine\": \"g2-m1-max.10core\"\n}' Successful respose {\n \"message\": \"The migration was successful.\",\n \"migrated_apps\": [\n \"android-sample (8f41200-e5a5eee17)\",\n \"sample-swift-project (c291b04-784ca8773)\",\n ]\n} " }, 
{ "title" : "Managing app notifications ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43395-adding-and-managing-apps.html#UUID-3aa72056-57cd-3533-d8ed-445ef1584299_UUID-e4e0e119-e4c9-a55b-3671-f90a8d9195f1", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Adding and managing apps \/ Managing app notifications ", 
"snippet" : "You can change the email notification settings of your apps via an API call at any time with the PATCH\/apps\/{app-slug}\/update-email-notifications endpoint. The endpoint takes two parameters: on_failure : Email notification settings for failed builds. on_success : Email notification settings for succ...", 
"body" : "You can change the email notification settings of your apps via an API call at any time with the PATCH\/apps\/{app-slug}\/update-email-notifications endpoint. The endpoint takes two parameters: on_failure : Email notification settings for failed builds. on_success : Email notification settings for successful builds. Both parameters take three possible values: always : Always send notification. The default value for failed builds. never : Never send notification. change : Send notification only when the build status changes compared to the previous build on the same branch. The default value for successful builds. For example, if you wish to receive a notification for a failed build only when the previous build was successful, you need to set the value of the on_failure parameter to change (replace the APP-SLUG in the example with your app's slug and ACCESS-TOKEN with your personal access token ): curl -X 'PATCH' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/update-email-notifications' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"on_failure\": \"change\",\n}' " }, 
{ "title" : "Triggering and aborting builds ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43396-triggering-and-aborting-builds.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds ", 
"snippet" : "You can use the Bitrise API to trigger and abort builds of your apps. Define parameters for the build: for example, branch, tag or git commit to use. Custom Environment Variables can be defined as well. Endpoints related to triggering and aborting builds with the API Endpoints Function Required role...", 
"body" : "You can use the Bitrise API to trigger and abort builds of your apps. Define parameters for the build: for example, branch, tag or git commit to use. Custom Environment Variables can be defined as well. Endpoints related to triggering and aborting builds with the API Endpoints Function Required role on the app's team POST \/apps\/{app-slug}\/builds Trigger a new build. Owner, Admin, or Developer POST \/apps\/{app-slug}\/builds\/{build-slug}\/abort Abort a specific build. Owner, Admin, or Developer You can trigger and abort builds with the Bitrise API. Define parameters for the build: for example, branch, tag or git commit to use. Custom Environment Variables can be defined as well. " }, 
{ "title" : "Triggering a new build with the API ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43396-triggering-and-aborting-builds.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-0491c9d6-68ca-b6d8-c230-29f5bf9b2d57", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API ", 
"snippet" : "To trigger a new build with the Bitrise API, call the \/apps\/{APP-SLUG}\/builds endpoint. You need to specify an app slug and at least one build parameter in a JSON object: A git tag or git commit hash A branch A Workflow ID You also must have a valid build trigger set up in the trigger map in your ap...", 
"body" : "To trigger a new build with the Bitrise API, call the \/apps\/{APP-SLUG}\/builds endpoint. You need to specify an app slug and at least one build parameter in a JSON object: A git tag or git commit hash A branch A Workflow ID You also must have a valid build trigger set up in the trigger map in your app's bitrise.yml file. Required role You must have a developer, admin, or owner role on the app's team to trigger a new build using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. The JSON object must also contain a hook_info object with a type key and bitrise as the value of the key. Here’s a minimal sample JSON body which specifies main as the value of the branch parameter: {\n \"hook_info\": {\n \"type\": \"bitrise\",\n },\n \"build_params\": {\n \"branch\": \"main\"\n }\n} And here’s the curl request syntax for triggering a build on the main branch: curl -X 'POST' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"build_params\": {\n \"branch\": \"main\"\n },\n \"hook_info\": {\n \"type\": \"bitrise\"\n }\n}'\n Interactive cURL call configurator You can find an interactive cURL call configurator by clicking on the Start\/Schedule a build button on your app’s bitrise.io page and switching to Advanced mode in the popup. At the bottom of the popup you can find a curl call, based on the parameters you specify in the popup. In the previous example, we passed this JSON payload as a string: to be precise, as a JSON object serialized to a string. You can also pass it as an object (for example, if you want to call it from JavaScript). To do so, include a root payload element or, alternatively, set the JSON object as the value of the payload POST parameter. Here’s a jQuery example using the payload parameter: $.post(\"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds\/\", {\n \"payload\":{\n \"hook_info\":{\n \"type\":\"bitrise\",\n },\n \"build_params\":{\n \"branch\":\"main\"\n }\n }\n}) You can specify several different build parameters when triggering a build. The parameters should be set in the build_params object. " }, 
{ "title" : "Setting a branch, commit or tag to build ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43396-triggering-and-aborting-builds.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-25f3d558-2a0e-6c00-d0f2-a9535d7d7744", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a branch, commit or tag to build ", 
"snippet" : "You can set Git-specific parameters in your call. The branch parameter specifies the source branch to be built. This is either the branch of the git commit or, in the case of a pull request build, the source branch of the pull request. curl -X 'POST' \\ 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/buil...", 
"body" : "You can set Git-specific parameters in your call. The branch parameter specifies the source branch to be built. This is either the branch of the git commit or, in the case of a pull request build, the source branch of the pull request. curl -X 'POST' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n\t\"hook_info\": {\n\t\t\"type\": \"bitrise\"\n\t},\n\t\"build_params\": {\n\t\t\"branch\": \"main\"\n\t}\n }' You can also build a specific git commit or even a git tag: you just need to set either the commit hash or the tag in the build_params object. You can also set a commit message for the build with the commit_message parameter. curl -X 'POST' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"commit_hash\": \"0000ffffeeeee\",\n \"commit_message\": \"testing\"\n }\n}'\n Parameter priority The Git Clone Step has the following parameter priority: commit_hash tag branch If you provide multiple parameters, the parameter with lower priority will be ignored. The ignored parameters will still be logged. They will be available for Steps and they will be visible on the Build’s Details & Add-ons page but the Git Clone Step will use the most specific parameter for checkout. " }, 
{ "title" : "Setting parameters for pull request builds ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43396-triggering-and-aborting-builds.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-fa45008f-1818-6750-a7e6-77d1eb7c9756", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting parameters for pull request builds ", 
"snippet" : "For a pull request build, use the branch_dest parameter to set up the destination or target branch of the pull request. The PR will be merged into this branch but before that, Bitrise will build your app based on how the code would look like after merging. This is what happens when a PR build is aut...", 
"body" : "For a pull request build, use the branch_dest parameter to set up the destination or target branch of the pull request. The PR will be merged into this branch but before that, Bitrise will build your app based on how the code would look like after merging. This is what happens when a PR build is automatically triggered by a webhook, for example. The branch_repo_owner and branch_dest_repo_owner parameters are used to identify the owners of the repositories, to unambiguously identify the branches involved in the pull request. Pull request builds from forks If you do not specify the branch_repo_owner and branch_dest_repo_owner parameters, the API will assume pull request builds are coming from a fork. As such, they might be put on hold pending manual approval: Approving pull request builds. To identify the PR itself, use the pull_request_id parameter: it takes an integer; for example, the number of the PR on GitHub. curl -X 'POST' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"commit_hash\": \"fffff000000eeeeee\",\n \"pull_request_id\": 1\n }\n}' If your git provider supports it, you can also use the pull_request_merge_branch parameter to build the pre-merged state of the branch of the PR. Another alternative is the pull_request_head_branch parameter: this is a special git ref that should point to the source of the PR. If you want to trigger a build from a PR opened from a fork of your repository, use the pull_request_repository_url parameter. The value should be the URL of the fork. " }, 
{ "title" : "Skipping Git status reports ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43396-triggering-and-aborting-builds.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-1bb88bae-9333-0f16-6e0a-e021a19b77ad", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Skipping Git status reports ", 
"snippet" : "If you have a webhook set up, Bitrise will send status reports to your git provider about your builds. However, this can be disabled via the API: use the skip_git_status_report parameter. If it is set to true , no build status report will be sent. curl -X 'POST' \\ 'https:\/\/api.bitrise.io\/v0.1\/apps\/A...", 
"body" : "If you have a webhook set up, Bitrise will send status reports to your git provider about your builds. However, this can be disabled via the API: use the skip_git_status_report parameter. If it is set to true , no build status report will be sent. curl -X 'POST' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"hook_info\":{\n \"type\":\"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"the-pr-branch\",\n \"branch_dest\": \"main\",\n \"skip_git_status_report\": true\n }\n}'\n " }, 
{ "title" : "Specifying Environment Variables ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43396-triggering-and-aborting-builds.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-d40c44cd-3e8b-60ef-cb63-d20813bb4404", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Specifying Environment Variables ", 
"snippet" : "You can define additional Environment Variables (Env Vars) for your build. These additional variables will be handled with priority between Secrets and App Env Vars , which means that you can not overwrite Env Vars defined in your build configuration (for example, App Env Vars), only Secrets . Defin...", 
"body" : "You can define additional Environment Variables (Env Vars) for your build. These additional variables will be handled with priority between Secrets and App Env Vars , which means that you can not overwrite Env Vars defined in your build configuration (for example, App Env Vars), only Secrets . Define additional Env Vars with the environments parameter. This parameter must be an array of objects , and every item of the array must include at least a mapped_to property. This must contain: The key of the Env Var. The value of the Env Var. Replacing Env Var names By default, Env Var names inside values will be replaced in triggered build by actual value from the target environment. This behavior can be disabled by setting the is_expand flag to false . \"environments\":[\n {\"mapped_to\":\"API_TEST_ENV\",\"value\":\"This is the test value\",\"is_expand\":true},\n {\"mapped_to\":\"HELP_ENV\",\"value\":\"$HOME variable contains user's home directory path\",\"is_expand\":false},\n] " }, 
{ "title" : "Setting a Workflow for the build ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43396-triggering-and-aborting-builds.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-e70224cf-7444-07ed-48b8-87b5e369c305", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Triggering a new build with the API \/ Setting a Workflow for the build ", 
"snippet" : "By default, the Workflow for a triggered build will be selected based on the content of build_params and your app’s trigger map . This is the same as how webhooks select the Workflow for the build automatically, based on the Trigger Map. With the API, you can overwrite this selection and specify exa...", 
"body" : "By default, the Workflow for a triggered build will be selected based on the content of build_params and your app’s trigger map . This is the same as how webhooks select the Workflow for the build automatically, based on the Trigger Map. With the API, you can overwrite this selection and specify exactly which Workflow you want to use. Add a workflow_id parameter to your build_params and specify the workflow you want to use for that specific build. Here’s an example call where we specify the deploy workflow: curl -X 'POST' \\\n 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds' \\\n -H 'accept: application\/json' \\\n -H 'Authorization: ACCESS-TOKEN' \\\n -H 'Content-Type: application\/json' \\\n -d '{\n \"hook_info\": {\n \"type\": \"bitrise\"\n },\n \"build_params\": {\n \"branch\": \"main\",\n \"workflow_id\": \"primary\"\n }\n}' " }, 
{ "title" : "Aborting a build ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43396-triggering-and-aborting-builds.html#UUID-c65412f0-db58-2bfc-b10b-c801d887def4_UUID-6a80f809-ff48-fe7f-a9e9-52ed57ffc772", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Triggering and aborting builds \/ Aborting a build ", 
"snippet" : "You can abort running builds, and set the reason for aborting, as well as specify if email notifications should be sent about the build. Required role You must have an admin or owner role on the app's team to manage incoming or outgoing webhooks using the API. For a complete list of user roles and r...", 
"body" : "You can abort running builds, and set the reason for aborting, as well as specify if email notifications should be sent about the build. Required role You must have an admin or owner role on the app's team to manage incoming or outgoing webhooks using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. To simply abort the build, call the \/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort endpoint. It requires three parameters: The app slug. The build slug. The build abort parameters body. This can be left empty if you don't want to set any specific parameters for the abort: -d \"{}\" . curl -X POST -H \"Authorization: ACCESS-TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort\" -d \"{}\" You can set a reason for aborting the build by using the abort_reason parameter. This parameter takes a string and it will show up on your app’s build page. curl -X POST -H \"Authorization: ACCESS-TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort\" -d '{\"abort_reason\": \"aborted for a reason\"}'\n Normally, aborted builds count as failed builds. Use the abort_with_success parameter to abort a build but still count it as a successful one. The status report sent to your git provider will show the build as successful though on bitrise.io it will be displayed as Cancelled . curl -X POST -H \"Authorization: ACCESS-TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort\" -d '{\"abort_with_success\": true}' Depending on your app settings, Bitrise might send email notifications to team members when a build is aborted. If you do not want notifications, set the skip_notifications parameter to true . curl -X POST -H \"Authorization: ACCESS-TOKEN\" \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/builds\/BUILD-SLUG\/abort\" -d '{\"skip_notifications\": true}' " }, 
{ "title" : "Incoming and outgoing webhooks ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43397-incoming-and-outgoing-webhooks.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks ", 
"snippet" : "Both incoming and outgoing webhooks can be set up with the Bitrise API. They are important for automatic build triggering and the reporting of build events to other services. Both incoming and outgoing webhooks can be set up with the Bitrise API. They are important for automatic build triggering and...", 
"body" : "Both incoming and outgoing webhooks can be set up with the Bitrise API. They are important for automatic build triggering and the reporting of build events to other services. Both incoming and outgoing webhooks can be set up with the Bitrise API. They are important for automatic build triggering and the reporting of build events to other services. Endpoints related to incoming and outgoing webhooks Endpoints Function Required role on the app's team POST \/apps\/{app-slug}\/register-webhook Register an incoming webhook for a specific application. Owner or Admin GET \/apps\/{app-slug}\/outgoing-webhooks List the outgoing webhooks of an app. Owner or Admin POST \/apps\/{app-slug}\/outgoing-webhooks Create an outgoing webhook for an app. Owner or Admin PUT \/apps\/{app-slug}\/outgoing-webhooks\/{app-webhook-slug} Update an outgoing webhook of an app. Owner or Admin DELETE \/apps\/{app-slug}\/outgoing-webhooks\/{app-webhook-slug} Delete an outgoing webhook of an app. Owner or Admin " }, 
{ "title" : "Registering an incoming webhook with the API ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43397-incoming-and-outgoing-webhooks.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-5e792ddf-89a1-ddd2-a79c-dd3030742501", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Registering an incoming webhook with the API ", 
"snippet" : "Incoming webhooks enable users to set up automatic triggers for their apps on Bitrise: for example, a Bitrise webhook registered on GitHub can automatically trigger a build when code is pushed to the GitHub repository. Required role You must have an admin or owner role on the app's team to manage in...", 
"body" : "Incoming webhooks enable users to set up automatic triggers for their apps on Bitrise: for example, a Bitrise webhook registered on GitHub can automatically trigger a build when code is pushed to the GitHub repository. Required role You must have an admin or owner role on the app's team to manage incoming or outgoing webhooks using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. To set up a webhook, you must connect your Bitrise account to your Git provider account : this allows Bitrise to register the webhook automatically. Register a webhook by calling the register-webhook endpoint with an existing app slug: curl -X POST -H 'Authorization: ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/register-webhook' This will register a webhook to the Git provider of the app. Afterwards, you can set up automatic triggers either on the website or via the Trigger Map in the app’s bitrise.yml file. " }, 
{ "title" : "Creating outgoing webhooks with the API ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43397-incoming-and-outgoing-webhooks.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-aa3c6c11-5a40-a911-7f05-36a211754449", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Creating outgoing webhooks with the API ", 
"snippet" : "Outgoing webhooks enable integration with other services: specifically, they are used to notify other services. Currently, only build event notifications are supported. There are two supported build events: triggering a build and finishing a build. Build status reports Notifying your Git provider ab...", 
"body" : "Outgoing webhooks enable integration with other services: specifically, they are used to notify other services. Currently, only build event notifications are supported. There are two supported build events: triggering a build and finishing a build. Build status reports Notifying your Git provider about the build status does not require outgoing webhooks. To set up an outgoing webhook for an application, you need to specify the app itself and at least two of the creation parameters: The webhook URL: you can get this from the service you want to integrate with Bitrise. The events that trigger the webhook. Currently, this takes two possible values: all and build . Required role You must have an admin or owner role on the app's team to manage incoming or outgoing webhooks using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can also set up custom headers by specifying a key\/value pair in the request. A new outgoing webhook with the URL 'example.webhook.com' Request: curl -X POST \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/outgoing-webhooks\" -H \"accept: application\/json\" -H \"Authorization: ACCESS-TOKEN\" -H \"Content-Type: application\/json\" -d \"{ \\\"events\\\": [ \\\"build\\\" ], \\\"url\\\": \\\"example.webhook.com\\\", \\\"headers\\\": { \\\"KEY\\\": \\\"value\\\" }}\"\n Response: {\n \"slug\": \"01D72ARNH4KR7KMW3DG3NBKXRK\",\n \"url\": \"example.webhook.com\",\n \"events\": [\n \"build\"\n ],\n \"headers\": {\n \"KEY\": \"value\"\n },\n \"registered_by_addon\":false,\n \"created_at\": \"2019-03-28T14:20:22.436825Z\",\n \"updated_at\": \"2019-03-28T14:20:22.436825Z\"\n} " }, 
{ "title" : "Modifying and deleting outgoing webhooks with the API ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43397-incoming-and-outgoing-webhooks.html#UUID-ebbc713e-431e-4f12-ad70-8547c2932347_UUID-a1eb90f2-442d-1f76-7cfa-f9bc1f8d060a", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Incoming and outgoing webhooks \/ Modifying and deleting outgoing webhooks with the API ", 
"snippet" : "To modify an existing webhook, you need to specify all the mandatory parameters in your request. In other words, even if you only want to change the URL, the request still has to contain a valid value for the events parameter. Required role You must have an admin or owner role on the app's team to m...", 
"body" : "To modify an existing webhook, you need to specify all the mandatory parameters in your request. In other words, even if you only want to change the URL, the request still has to contain a valid value for the events parameter. Required role You must have an admin or owner role on the app's team to manage incoming or outgoing webhooks using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. Modifying an outgoing webhook Request: curl -X PUT \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/outgoing-webhooks\/WEBHOOK-SLUG\" -H \"accept: application\/json\" -H \"Authorization: ACCESS-TOKEN\" -H \"Content-Type: application\/json\" -d\" { \\\"events\\\": [ \\\"all\\\" ], \\\"headers\\\": { \\\"Modified\\\": \\\"1212\\\" }, \\\"url\\\": \\\"example2.webhook.com\\\"}\" Response: {\n \"data\": {\n \"slug\": \"WEBHOOK-SLUG\",\n \"url\": \"example2.webhook.com\",\n \"events\": [\n \"all\"\n ],\n \"headers\": {\n \"Modified\": \"1212\"\n },\n \"registered_by_addon\": false,\n \"created_at\": \"2019-03-28T14:20:22.436825Z\",\n \"updated_at\": \"2019-03-28T14:20:22.436825Z\"\n }\n} To delete an outgoing webhook, all you need to do is provide the app slug and the webhook slug in your request: curl -X DELETE \"https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/outgoing-webhooks\/WEBHOOK-SLUG\" -H \"accept: application\/json\" -H \"Authorization: ACCESS-TOKEN\" " }, 
{ "title" : "Managing iOS code signing files ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43398-managing-ios-code-signing-files.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files ", 
"snippet" : "You can upload, update, list, and delete iOS code signing files with the Bitrise API: we have separate endpoints for certificates and provisioning profiles. This guide describes how to manage your iOS code signing files with the Bitrise API. If you’d like to learn more about how to do the same on th...", 
"body" : "You can upload, update, list, and delete iOS code signing files with the Bitrise API: we have separate endpoints for certificates and provisioning profiles. This guide describes how to manage your iOS code signing files with the Bitrise API. If you’d like to learn more about how to do the same on the UI, please check out iOS code signingYou can upload, update, list, and delete iOS code signing files with the API. In this guide we show you how and in what order to use those code signing endpoints. Endpoints related to iOS provisioning profiles Endpoints Function Required role on the app's team POST\/apps\/{app-slug}\/provisioning-profiles Create a provisioning file Owner or Admin POST\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug}\/uploaded Confirm the upload process Owner or Admin PATCH\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug} Update an uploaded provisioning file Owner or Admin GET\/apps\/{app-slug}\/provisioning-profiles Get a list of the uploaded provisioning files Owner or Admin GET\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug} Retrieve data of a specific provisioning file Owner or Admin DELETE\/apps\/{app-slug}\/provisioning-profiles\/{provisioning-profile-slug} Delete an uploaded provisioning file Owner or Admin Endpoints related to iOS code signing certificates Endpoints Function Required role on the app's team POST\/apps\/{app-slug}\/build-certificates Create a build certificate Owner or Admin POST\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug}\/uploaded Confirm the upload process Owner or Admin PATCH\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug} Update an uploaded build certificate Owner or Admin GET\/apps\/{app-slug}\/build-certificates Get a list of the uploaded build certificate Owner or Admin GET\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug} Retrieve data of a specific build certificate Owner or Admin DELETE\/apps\/{app-slug}\/build-certificates\/{build-certificate-slug} Delete an uploaded build certificate Owner or Admin " }, 
{ "title" : "Uploading an iOS code signing file ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43398-managing-ios-code-signing-files.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-6374bcba-2cb4-f7d6-9c6e-32ed9581616d", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Uploading an iOS code signing file ", 
"snippet" : "Required role You must have an admin or owner role on the app's team to manage iOS code signing files using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can upload an iOS code signing file (either a .p12 certificate or a provisioning pro...", 
"body" : "Required role You must have an admin or owner role on the app's team to manage iOS code signing files using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can upload an iOS code signing file (either a .p12 certificate or a provisioning profile) to a Bitrise app of your choice. This process does NOT create a new code signing file: it uploads an existing file (created and downloaded from the Apple Developer Portal) to an AWS URL. It is functionally the same as uploading your code signing files on the Bitrise website: iOS code signing with manual provisioning. To upload an iOS code signing file file via the API: Call the POST method of the provisioning-profiles or build-certificates endpoint to create a temporary pre-signed upload URL that expires in ten minutes. The call requires an existing code signing file (certificate or provisioning profile) and two parameters: upload_file_name : The filepath to the existing code signing file. For example, \/path\/to\/sample.p12 . upload_file_size : The size of the file in bytes. \/\/ Calling the endpoint to create the temporary upload URL\ncurl -X POST -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles' -d '{\"upload_file_name\":\"sample.provisionprofile\",\"upload_file_size\":2047}' \/\/ The successful response: you will need the \"upload_url\" and the \"slug\".\n{\n \"data\":{\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01C6FA6P6HRQT5PQ8RMMVVXE6W\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"upload_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180216T124240Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e\"\n }\n} The response to the first call contains an upload_url parameter. You need to use this and the upload_file_name parameter to upload the file to AWS with a curl call. curl -T sample.provisionprofile 'https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/build_certificates\/uploads\/30067\/original\/certs.p12?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180216T124240Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=2bf42176650f00405abfd7b7757635c9be16b43e98013abb7f750d3c658be28e' Confirm the file upload with a POST call of the uploaded endpoint: use the slug from the response to the first POST call. This sets the processed flag of the file to true . This flag can't be changed again afterwards! curl -X POST -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles\/FILE-SLUG\/uploaded' " }, 
{ "title" : "Updating an uploaded iOS code signing file ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43398-managing-ios-code-signing-files.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-c7241088-9102-e0e3-200c-78d477abd739", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Updating an uploaded iOS code signing file ", 
"snippet" : "You can perform minor updates to an uploaded iOS code signing file using the PATCH method. If you’ve uploaded your file to Bitrise , you can visually check any changes to it on the Code Signing & Files tab. Required role You must have an admin or owner role on the app's team to manage iOS code signi...", 
"body" : "You can perform minor updates to an uploaded iOS code signing file using the PATCH method. If you’ve uploaded your file to Bitrise , you can visually check any changes to it on the Code Signing & Files tab. Required role You must have an admin or owner role on the app's team to manage iOS code signing files using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. For example, to make a provisioning profile protected, you can set the is_protected flag of your provisioning profiles to true . curl -X PATCH -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles\/PROVISIONING-PROFILE-SLUG -d '{\"is_protected\":true}'\n For a build certificate you can set the same attributes as above but you can modify the password too: curl -X PATCH -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/build-certificates\/BUILD-CERTIFICATE-SLUG -d '{\"certificate_password\":\"s0m3-v3ry-s3cr3t-str1ng\"}'\n Be careful when setting attributes You can set the is_protected , is_exposed and processed attributes of the files you've uploaded: Once the is_protected flag is set to true, it cannot be changed anymore. When the value of is_protected is true, then the is_expose flag cannot be set to another value. Once the processed flag is set to true, then its value cannot be changed anymore. " }, 
{ "title" : "Getting a specific iOS code signing file's data ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43398-managing-ios-code-signing-files.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-027720e5-bbd6-15cf-5b0c-706749f8baed", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Getting a specific iOS code signing file's data ", 
"snippet" : "Required role You must have an admin or owner role on the app's team to manage iOS code signing files using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. Retrieve a specific iOS code signing file’s data with the GET method of the provisioning...", 
"body" : "Required role You must have an admin or owner role on the app's team to manage iOS code signing files using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. Retrieve a specific iOS code signing file’s data with the GET method of the provisioning-profiles and build-certificates endpoints. The returned data includes, among other things, the file's name, size, and download URL, as well as its current status. The required parameters are: app slug file slug Retrieving a provisioning profile's data Request: curl -X GET -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles\/PROVISIONING-PROFILE-SLUG' Response: {\n \"data\": {\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01C6FA6P6HRQT5PQ8RMMVVXE6W\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false,\n \"download_url\":\"https:\/\/concrete-userfiles-production.s3-us-west-2.amazonaws.com\/prov_profile_documents\/uploads\/80144\/original\/sample.provisionprofile?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIOC7N256G7J2W2TQ%2F20180322%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180322T091652Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=6dd7bb3db72aafb2d434da7b1a8f80a82a3a7a0276e84620137ed64de5025ab2\"\n }\n} Availability of the download_url Note that the download_url is generated only when the provisioning profile’s is_protected attribute is false. " }, 
{ "title" : "Listing the iOS code signing files of an app ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43398-managing-ios-code-signing-files.html#UUID-eaf0528b-c4fb-869e-aded-bcf6abbe69ba_UUID-69a7ad18-d8b7-a272-1b66-c234c0081b27", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing iOS code signing files \/ Listing the iOS code signing files of an app ", 
"snippet" : "Required role You must have an admin or owner role on the app's team to manage iOS code signing files using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. Wondering how many iOS code signing files belong to an app? Get a list of them using the...", 
"body" : "Required role You must have an admin or owner role on the app's team to manage iOS code signing files using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. Wondering how many iOS code signing files belong to an app? Get a list of them using the GET method of the provisioning-profiles and build-certificates endpoints. The required parameter is: app slug Optional parameters are: next: slug of the first file in the response (as a string) limit: max number of elements per page (as an integer) where the default is 50. Getting all provisioning profiles of an app Request: curl -X GET -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/provisioning-profiles' Response: {\n \"data\": [\n {\n \"upload_file_name\":\"sample.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01C6FA6P6HRQT5PQ8RMMVVXE6W\",\n \"processed\":false,\n \"is_expose\":true,\n \"is_protected\":false\n },\n {\n \"upload_file_name\":\"sample2.provisionprofile\",\n \"upload_file_size\":2047,\n \"slug\":\"01C6FA6P6HRQT5PQ8RMMVVXE5T\",\n \"processed\":true,\n \"is_expose\":true,\n \"is_protected\":true\n }\n ],\n \"paging\": {\n \"page_item_limit\": 50,\n \"total_item_count\": 2\n }\n}\n " }, 
{ "title" : "Managing files in Generic File Storage ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43399-managing-files-in-generic-file-storage.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage ", 
"snippet" : "You can upload, delete, update, and list any project files to the Generic File Storage on Bitrise. You can access the files either via the API or in the Workflow Editor. You can upload, delete, update, and list any project files in the GENERIC FILE STORAGE section of Bitrise. Endpoints related to th...", 
"body" : "You can upload, delete, update, and list any project files to the Generic File Storage on Bitrise. You can access the files either via the API or in the Workflow Editor. You can upload, delete, update, and list any project files in the GENERIC FILE STORAGE section of Bitrise. Endpoints related to the Generic File Storage Endpoints Function Required role on the app's team POST\/apps\/{app-slug}\/generic-project-files Create a generic project file Owner or Admin POST\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug}\/uploaded Confirm the upload process Owner or Admin PATCH\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug} Update an uploaded project file Owner or Admin GET\/apps\/{app-slug}\/generic-project-files Get a list of the uploaded project files Owner or Admin GET\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug} Retrieve data of a specific project file Owner or Admin DELETE\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug} Delete an uploaded project file Owner or Admin " }, 
{ "title" : "Creating and uploading files to the Generic File Storage ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43399-managing-files-in-generic-file-storage.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-300d60e6-4586-de8f-a1ed-a9df34003726", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Creating and uploading files to the Generic File Storage ", 
"snippet" : "Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can add new files to an application and store it in the GENERIC FILE...", 
"body" : "Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can add new files to an application and store it in the GENERIC FILE STORAGE section of the Code Signing tab. When calling the relevant API endpoint, a new temporary pre-signed upload URL is created which you will use to upload the file to the GENERIC FILE STORAGE . (Please note that this pre-signed URL is time-limited and expires after 10 minutes.) You'll need to: Call the POST method of the generic-project-files endpoint. This call creates a temporary pre-signed upload URL. The required parameters are: slug : the app slug of the Bitrise app. You can get the slug by opening the app on Bitrise and copying it from the URL of the main page, or by calling the GET \/apps endpoint and finding your app in the list. upload_file_name : the name of the file, including the file extension. For example, MyFile.txt . The file should be in the same folder where the command is run. upload_file_size : the size of the file in bytes. On macOS, you can get the file size by running the stat -f%z <filename> command. user_env_key : you can add any name to the user env key. Upload the file to AWS using the pre-signed upload URL. Confirm the file upload. This sets the processed flag to true which means the file is now available on Bitrise. This flag can't be changed again afterwards! Creating and uploading a file Creating the temporary pre-signed upload URL: curl -X POST \"https:\/\/api.bitrise.io\/v0.1\/apps\/583806e34b4ff0ff\/generic-project-files\" -H \"accept: application\/json\" -H \"Authorization: 0FgS4dsnxG9sYWp3xh9aLkbUz7BC01ZYJRj3RuhDWssadW7NuqbMhobvIWzk76dxrj6md4AXK16pfwj-i6A-uA\" -H \"Content-Type: application\/json\" -d \"{ \\\"upload_file_name\\\": \\\"Test-File\\\", \\\"upload_file_size\\\": 4865, \\\"user_env_key\\\": \\\"Test-File\\\"}\" Response: {\n \"data\": {\n \"upload_file_name\": \"Test-File\",\n \"upload_file_size\": 4865,\n \"slug\": \"01D7F228E7N8Q8WQJKJM8FV3XM\",\n \"processed\": false,\n \"is_expose\": true,\n \"is_protected\": false,\n \"upload_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/Test-File?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190402%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20190402T125827Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\",\n \"user_env_key\": \"Test-File\",\n \"exposed_meta_datastore\": null\n }\n} Uploading the file to AWS: curl -T Test-File.md \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/Test-File?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190402%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20190402T125827Z&X-Amz-Expires=600&X-Amz-SignedHeaders=content-length%3Bhost&X-Amz-Signature=e1557901d5a07b1b3578d9ffdf84a9b0188b742bfff9c8175a3e87f12c7e2c4e\" Confirming the file upload: curl -X POST -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/generic-project-files\/GENERIC-PROJECT-FILES-SLUG\/uploaded' Response: {\n \"data\": {\n \"upload_file_name\": \"Test-File\",\n \"upload_file_size\": 4865,\n \"slug\": \"01D7F228E7N8Q8WQJKJM8FV3XM\",\n \"processed\": true,\n \"is_expose\": true,\n \"is_protected\": false,\n \"user_env_key\": \"Test-File\",\n \"exposed_meta_datastore\": null\n }\n} " }, 
{ "title" : "Updating an uploaded file ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43399-managing-files-in-generic-file-storage.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-4e6f2ba4-f97a-74a5-e57e-e5374cf278de", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Updating an uploaded file ", 
"snippet" : "Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can perform minor updates to an uploaded file using the PATCH method...", 
"body" : "Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can perform minor updates to an uploaded file using the PATCH method of the generic-project-files endpoint. If you’ve uploaded your file to Bitrise , you can visually check the changes in the Generic File Storage . The required parameters are: app slug generic project file slug generic project file attributes you wish to modify For example, to make the uploaded file protected, you can set the is_protected flag of your file to true . curl -X PATCH -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/generic-project-file\/GENERIC-PROJECT-FILE-SLUG -d '{\"is_protected\":true}' Be careful when setting attributes You can set the is_protected , is_exposed and processed attributes of the files you've uploaded: Once the is_protected flag is set to true, it cannot be changed anymore. When the value of is_protected is true, then the is_expose flag cannot be set to another value. Once the processed flag is set to true, then its value cannot be changed anymore. " }, 
{ "title" : "Retrieving a specific file's data ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43399-managing-files-in-generic-file-storage.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-ace27504-1d0e-3dfd-f8fc-cbe2c9d2f89c", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Retrieving a specific file's data ", 
"snippet" : "Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. Retrieve a specific file’s data from the Generic File Storage with the G...", 
"body" : "Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. Retrieve a specific file’s data from the Generic File Storage with the GET method of the generic-project-files endpoint. The returned data includes, among other things, the file's name, size, and download URL, as well as its current status. The required parameters are: app slug generic project file slug Retrieving a file Request: curl -X GET -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/generic-project-files\/GENERIC-PROJECT-FILE-SLUG' Response: {\n \"data\": {\n \"upload_file_name\": \"Test-File\",\n \"upload_file_size\": 4865,\n \"slug\": \"01D7F228E7N8Q8WQJKJM8FV3XM\",\n \"processed\": true,\n \"is_expose\": true,\n \"is_protected\": false,\n \"download_url\": \"https:\/\/concrete-userfiles-production.s3.us-west-2.amazonaws.com\/project_file_storage_documents\/uploads\/24043\/original\/Test-File?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190402%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20190402T132712Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=241be52184b63867262360743931c546c166a99719787ce417e3be11bc12bbed\",\n \"user_env_key\": \"Test-File\",\n \"exposed_meta_datastore\": null\n }\n}\n Availability of the download_url Note that the download_url is generated only when the provisioning profile’s is_protected attribute is false. " }, 
{ "title" : "Listing the uploaded files of an app ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43399-managing-files-in-generic-file-storage.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-052837dd-1206-3f2c-a500-5fd3262897a5", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Listing the uploaded files of an app ", 
"snippet" : "Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. Get a list of an app's files that were uploaded to the Generic File Stor...", 
"body" : "Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. Get a list of an app's files that were uploaded to the Generic File Storage using the GET method. Please note that the maximum number of files is 50 . The required parameter is: app slug Optional parameters are: next: slug of the first file in the response (as a string) limit: max number of elements per page (as an integer) Listing the apps Request: curl -X GET -H 'Authorization: THE-ACCESS-TOKEN' 'https:\/\/api.bitrise.io\/v0.1\/apps\/APP-SLUG\/generic-project-files'\n Response: {\n \"data\": [\n {\n \"upload_file_name\": \"realmtasks.jks\",\n \"upload_file_size\": 2068,\n \"slug\": \"a37f6a0ff582f4ea\",\n \"processed\": true,\n \"is_expose\": true,\n \"is_protected\": false,\n \"user_env_key\": \"ANDROID_KEYSTORE\",\n \"exposed_meta_datastore\": null\n },\n {\n \"upload_file_name\": \"Test-File\",\n \"upload_file_size\": 4865,\n \"slug\": \"01D7F228E7N8Q8WQJKJM8FV3XM\",\n \"processed\": true,\n \"is_expose\": true,\n \"is_protected\": false,\n \"user_env_key\": \"Test-File\",\n \"exposed_meta_datastore\": null\n }\n ],\n \"paging\": {\n \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} As you can see, the example response shows the list of files specific to an app. Files uploaded to the ANDROID KEYSTORE SECTION and to the GENERIC FILE STORAGE are both shown. This is due to that the fact that Android keystore files are specific generic project files but represented in a separate UI field from generic project files. " }, 
{ "title" : "Deleting a file from the Generic File Storage ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43399-managing-files-in-generic-file-storage.html#UUID-5832d66a-2451-ae69-92c5-53c32cd9e173_UUID-ddf2b256-bbb2-35bd-1974-903e84a53f73", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing files in Generic File Storage \/ Deleting a file from the Generic File Storage ", 
"snippet" : "You can delete your uploaded file from the Generic File Storage using the DELETE method. Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User rol...", 
"body" : "You can delete your uploaded file from the Generic File Storage using the DELETE method. Required role You must have an admin or owner role role on the app's team to manage files in the Generic File Storage using the Bitrise API. For a complete list of user roles and role cheatsheets, check User roles on app teams. The required parameters are: app slug generic project file slug curl -X DELETE “https:\/\/api.bitrise.io\/v0.1\/apps\/{app-slug}\/generic-project-files\/{generic-project-file-slug}” -H “Authorization:{Authorization-token}” " }, 
{ "title" : "Managing build artifacts ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43401-managing-build-artifacts.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts ", 
"snippet" : "You can list, retrieve, update, and delete any build artifacts with the Bitrise API. If you add the Deploy to bitrise.io Step to your Workflow , once the build has run, you can access the build artifacts in the build's Artifacts tab on bitrise.io. Artifact retention for 365 days Artifacts older than...", 
"body" : "You can list, retrieve, update, and delete any build artifacts with the Bitrise API. If you add the Deploy to bitrise.io Step to your Workflow , once the build has run, you can access the build artifacts in the build's Artifacts tab on bitrise.io. Artifact retention for 365 days Artifacts older than 365 days are permanently deleted. You can also manage the generated artifacts with the Bitrise API. Build retention for 200 days On the Builds page of your app, we only show builds from the last 200 days. The same limit applies if you are searching for specific builds on the page. This limitation also applies to most API calls: the GET\/apps\/{app-slug}\/builds endpoint and related endpoints can only return builds from the last 200 days. However, there are two methods to get a build that is older than 200 days: If you know the exact build URL, you can access the build. You can use the GET\/apps\/{app-slug}\/archived-builds API endpoint: Listing the archived builds of an app. Endpoints related to managing build artifacts with the API Endpoint Function Required role on the app's team GET\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts Listing build artifacts Any GET\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts\/{artifact-slug} Retrieving data of a specific build artifact Any PATCH\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts\/{artifact-slug} Updating a build artifact Owner, Admin, or Developer DELETE\/apps\/{app-slug}\/builds\/{build-slug}\/artifacts\/{artifact-slug} Deleting a build artifact Owner, Admin, or Developer " }, 
{ "title" : "Listing build artifacts ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43401-managing-build-artifacts.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-67b0f982-96cd-1186-9265-88996e15e59b", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Listing build artifacts ", 
"snippet" : "Required role You must have a tester\/QA, developer, admin, or owner role on the app's team to list build artifacts using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. To be able to use build artifact endpoints, you have to first list all artifacts th...", 
"body" : "Required role You must have a tester\/QA, developer, admin, or owner role on the app's team to list build artifacts using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. To be able to use build artifact endpoints, you have to first list all artifacts that belong to an app’s build. The response will list all artifacts along with their slug which you will need later. The required parameters are: app slug build slug You can use the generated build artifact slug\/s from the response output with other build artifact endpoints where the build artifact slug is a required parameter. Listing the artifacts of an app Request: curl -X GET \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\" -H \"accept: application\/json\" -H \"Authorization: THE-ACCESS-TOKEN\" Response: {\n \"data\": [\n {\n \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"file_size_bytes\": 1574799\n },\n {\n \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"is_public_page_enabled\": true,\n \"slug\": \"54ae701761c4f956\",\n \"file_size_bytes\": 1574793\n }\n ],\n \"paging\": {\n \"total_item_count\": 2,\n \"page_item_limit\": 50\n }\n} " }, 
{ "title" : "Retrieving a specific build artifact's data ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43401-managing-build-artifacts.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-68b29ebc-24b7-36ed-d82b-4dd45f7797b8", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Retrieving a specific build artifact's data ", 
"snippet" : "Required role You must have a tester\/QA, developer, admin, or owner role on the app's team to retrive a specific build's artifact data using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can retrieve detailed data of a specific build's artifacts ...", 
"body" : "Required role You must have a tester\/QA, developer, admin, or owner role on the app's team to retrive a specific build's artifact data using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can retrieve detailed data of a specific build's artifacts with the artifacts endpoint. The response shows the filename, the artifact type, the download URL, and the file size. The required parameters are: app slug build slug artifact slug Retrieving the data of a specific artifact Request: curl -X GET \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/92e0b6ecae87b832\" -H \"accept: application\/json\" -H \"Authorization: THE-ACCESS-TOKEN\" Response: {\n \"data\": {\n \"title\": \"another_app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626902\/another_app-debug.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190426%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190426T131627Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=9f1af26787f34b5cf0cbc18b2372313607b1e3c0203a9ce7e42da884a6ddf70f\",\n \"is_public_page_enabled\": true,\n \"slug\": \"92e0b6ecae87b832\",\n \"public_install_page_url\": \"https:\/\/www.bitrise.io\/artifact\/7626902\/p\/8e5b2c62abe28fecef09b271de767920\",\n \"file_size_bytes\": 1574799\n }\n} By default, the value of the is_public_page_enabled input is set to true . This way the public_install_page_url becomes available and you can view some basic information about the artifact via this URL. You can also download the artifact using the download URL from the response output. " }, 
{ "title" : "Disabling the public install page of an artifact ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43401-managing-build-artifacts.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-cc240e80-5221-b7d5-abc0-555ea63f53aa", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Disabling the public install page of an artifact ", 
"snippet" : "Required role You must have a developer, admin, or owner role on the app's team to disable the public install page of an artifact using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can update the is_public_page_enabled parameter of your APK and ...", 
"body" : "Required role You must have a developer, admin, or owner role on the app's team to disable the public install page of an artifact using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can update the is_public_page_enabled parameter of your APK and IPA files. Please note this parameter’s value is set to true by default so you can only disable it with this endpoint. The required parameters are: app slug build slug artifact slug Disabling the public install page for an APK file Request: curl -X PATCH \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -H \"accept: application\/json\" -H \"Authorization: THE-ACCESS-TOKEN\" -H \"Content-Type: application\/json\" -d \"{ \\\"is_public_page_enabled\\\": false}\"\n Response: {\n \"data\": {\n \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": \"https:\/\/bitrise-prod-build-storage.s3.amazonaws.com\/builds\/b234f959745082e0\/artifacts\/7626904\/app-debug.apk?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIV2YZWMVCNWNR2HA%2F20190503%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190503T082800Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=7251fcbc0574ffac60b3f1d4a8c398658e49f0b86fb3cfec1500bde125738abc\",\n \"is_public_page_enabled\": false,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n} If you check the build’s Artifacts tab, you will see that the Public install page toggle is disabled. " }, 
{ "title" : "Deleting a build artifact ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-43401-managing-build-artifacts.html#UUID-a67de581-0791-2633-da8a-7f9bcbfe974e_UUID-28488171-07a0-6ef5-7067-3be9db16a566", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ Managing build artifacts \/ Deleting a build artifact ", 
"snippet" : "Required role You must have a developer, admin, or owner role on the app's team to delete a build artifact using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can delete an app’s specific build artifact. The required parameters are: app slug buil...", 
"body" : "Required role You must have a developer, admin, or owner role on the app's team to delete a build artifact using the API. For a complete list of user roles and role cheatsheets, check User roles on app teams. You can delete an app’s specific build artifact. The required parameters are: app slug build slug artifact slug Deleting an APK file Request: curl -X DELETE \"https:\/\/api.bitrise.io\/v0.1\/apps\/87a5991e180d91a9\/builds\/b234f959745082e0\/artifacts\/54ae701761c4f956\" -H \"accept: application\/json\" -H \"Authorization: THE-ACCESS-TOKEN\" Response: {\n \"data\": {\n \"title\": \"app-debug.apk\",\n \"artifact_type\": \"android-apk\",\n \"expiring_download_url\": null,\n \"is_public_page_enabled\": true,\n \"slug\": \"54ae701761c4f956\",\n \"public_install_page_url\": \"\",\n \"file_size_bytes\": 1574793\n }\n}\n " }, 
{ "title" : "API reference ", 
"url" : "88887-41967-bitrise-docs/88887-43391-api/88887-63992-api-reference.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ API \/ API reference ", 
"snippet" : "A full list and descriptions of all Bitrise API endpoints. https:\/\/api-docs.bitrise.io\/docs\/swagger.json...", 
"body" : "A full list and descriptions of all Bitrise API endpoints. https:\/\/api-docs.bitrise.io\/docs\/swagger.json " }, 
{ "title" : "References ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References ", 
"snippet" : "References help you understand and create both basic and advanced Bitrise configurations not just on the graphical UI but in YAML mode, too. This section is a reference for Bitrise configuration: the goal is to help you understand and create both basic and advanced configurations not just on the gra...", 
"body" : "References help you understand and create both basic and advanced Bitrise configurations not just on the graphical UI but in YAML mode, too. This section is a reference for Bitrise configuration: the goal is to help you understand and create both basic and advanced configurations not just on the graphical UI but in YAML mode, too. " }, 
{ "title" : "Basics of bitrise.yml ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43328-basics-of-bitrise-yml.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Basics of bitrise.yml ", 
"snippet" : "The bitrise.yml file is the heart of your Bitrise configuration. The Bitrise CLI needs this file to be able to run Bitrise builds, either locally or on our website. The bitrise.yml file is the heart of your Bitrise configuration. The Bitrise CLI needs this file to be able to run Bitrise builds, eith...", 
"body" : "[video] The bitrise.yml file is the heart of your Bitrise configuration. The Bitrise CLI needs this file to be able to run Bitrise builds, either locally or on our website. The bitrise.yml file is the heart of your Bitrise configuration. The Bitrise CLI needs this file to be able to run Bitrise builds, either locally or on our website. A bare minimal bitrise.yml is as simple as: format_version: 11 The above configuration is valid but does not include anything to execute with run . A minimal configuration which you can bitrise run : format_version: 5\nworkflows:\n test: The above configuration can be executed with bitrise run test . The Bitrise CLI won’t give you any errors, but there’s still nothing declared to do. Let’s continue with an example that executes a single Script Step when you run it with bitrise run test . format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\nproject_type: android\napp:\n envs:\n - MY_NAME: My Name\nworkflows:\n test:\n steps:\n - script@1.1.5:\n inputs:\n - content: echo \"Hello ${MY_NAME}!\" A quick walk through of this sample configuration: format_version : declares the minimum Bitrise CLI format version. Get your Bitrise CLI’s supported highest format version with bitrise version --full . Format version number The format version number determines what Bitrise CLI versions will be able to run the configuration. For example, if you set the format_version to 11 that means that Bitrise CLI versions which don’t support the format version 11 or higher won’t be able to run the configuration. This is important if you use features which are not available in older Bitrise CLI versions. default_step_lib_source : specifies the source to use when no other source is defined for a Step. project_type : defines your source project’s type (for example, android , ios , flutter ). app - envs : specifies the Environment Variables (Env Var) which will be available for every build, workflow and step. workflows : is the collection of separate build configurations which you can run with bitrise run WORKFLOWID . In our example the only workflow is test , which you can perform with bitrise run test . If you’d have a second workflow called main , you could run both bitrise run test and bitrise run main . steps : lists the Steps which should be executed when the Workflow is run. In our example the test workflow includes only a single script Step. If multiple Steps are declared, they are performed one by one. script@1.1.5 : a Step (reference) to perform. This reference does not have a StepLib Source declaration, which means that the default_step_lib_source will be used as the StepLib Source. inputs : specifies Step inputs. Multiple inputs A Step can have many inputs. Specify only those input in the bitrise.yml which you want to set or overwrite. content : the input you want to set. In our example, we specified the content of the Script Step. echo \"Hello ${MY_NAME}!\" : this is the value we specified for the content input. bitrise.yml size limitation If you edit your Workflow on bitrise.io (either in the Workflow Editor or on the bitrise.yml tab) and your bitrise.yml exceeds its size limitation, the UI will display the following warning upon trying to save your changes: Error saving! Error saving app config: Validation failed: App config validation 784: unexpected token at 'Argument list too long - bin\/bitrise This is because the total, combined size of the bitrise.yml and the bitrise.secrets.yml file cannot exceed 400KB. " }, 
{ "title" : "Customizing the bitrise.yml config ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43330-customizing-bitrise-yml.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Customizing the bitrise.yml config ", 
"snippet" : "Any tool that can edit bitrise.yml can add custom properties to it. This way you can add special properties or notes to your env vars, or even try new configurations of your Workflow in bitrise.yml . All you have to add is add a meta field and a namespace label with key and value to the right place....", 
"body" : "Any tool that can edit bitrise.yml can add custom properties to it. This way you can add special properties or notes to your env vars, or even try new configurations of your Workflow in bitrise.yml . All you have to add is add a meta field and a namespace label with key and value to the right place. Any tool that can edit bitrise.yml can add custom properties to it. This way you can add special properties or notes to your Env Vars , or even try new configurations of your Workflow in bitrise.yml . All you have to add is add a meta field and a namespace label with key and value to the right place. Use the following format to add custom values to your configuration: KEY: \"VALUE\",\nopts: {\n title: \"My env var\"\n description: \"Description of my env var.\"\n summary: \"Summary of env var.\"\n ...\n meta: {\n custom_namespace_id_1: {\n key1: \"value1\",\n key2: \"value2\",\n ...\n }\n custom_namespace_id_2: {\n ...\n }\n} Using your own version of the Workflow Editor You can fork our Workflow Editor and use your own version of it. Then you can use meta : for example, let's say you want to keep an eye on one of the Environment Variables (Env Var), you want to know when it was last modified and by who. app:\n envs:\n - ASXaS: \"`ZX`ZX\"\n opts:\n is_expand: false\n meta:\n audit: # used by the Audited Workflow Editor imaginary tool: that works like the WFE but it also saves the modifier and modification date, and displays it\n last_modified_at: 2018.09.12.\n last_modifier: Jane Doe Adding background color to an Environment Variable You can use meta to add background color to an env var in your own tool: meta: {\n my_fancy_new_workflow_editor: {\n env_var_background_color: \"red\"\n }\n } You can see meta in action on bitrise.io as well. For example, when you select a different stack for your Workflow than the default stack. Just click Workflow Editor on the UI and pick another stack type for your Workflow\/s on the Stacks & Machines tab. This way you can test how your Workflow runs in the new Stack. If you head back to the bitrise.yml tab, a bitrise.io meta is added to the deploy Workflow: workflows:\n deploy:\n steps:\n - activate-ssh-key@4:\n run_if: '{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'\n - git-clone@4: {}\n - script@1:\n title: Do anything with Script step\n - deploy-to-bitrise-io@1: {}\n meta:\n bitrise.io:\n stack: osx-xcode-12.1.x\n Since this meta is only interpreted on bitrise.io and not locally or on the Bitrise CLI, it is categorized by a bitrise.io namespace (where the stack is the key and osx-xcode-12.1.x is the value). The Workflow Editor always validates the saved variable and throws an error if there is a syntax error, but with meta added, its content is fully ignored by the Workflow Editor validation process. " }, 
{ "title" : "Workflow reference ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43331-workflows-reference.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Workflow reference ", 
"snippet" : "All bitrise.yml properties You can find the complete list of available properties in the bitrise.yml format specification \/ reference docs of the CLI. A Workflow is a collection of Steps , Environment Variables , and other configurations for a single bitrise run command. The only requirement for a W...", 
"body" : "All bitrise.yml properties You can find the complete list of available properties in the bitrise.yml format specification \/ reference docs of the CLI. A Workflow is a collection of Steps , Environment Variables , and other configurations for a single bitrise run command. The only requirement for a Workflow is an ID. As an example, in this configuration we declared one Workflow with the ID test . format_version: 1.3.1\nworkflows:\n test:\n You can define multiple Workflows and run a specific Workflow with bitrise run WORKFLOWID . Defining two Workflows: format_version: 1.3.1\nworkflows:\n first:\n second: List all available Workflows in a bitrise.yml file: bitrise run Or, alternatively: bitrise workflows To add Steps to a Workflow simply include steps: and then add the Step(s). format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script:\n title: First step\n - script:\n title: Second step You can define Workflow-specific parameters and Environment Variables. A Workflow’s Environment Variables are used when the Workflow is executed, and are available for every Step in the Workflow: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n envs:\n - ENV_VAR_ONE: first value\n - ENV_VAR_TWO: second value You can chain Workflows to run multiple Workflows before and\/or after a specific Workflow. format_version: 1.3.1\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n send-notifications:\n steps:\n # send notifications\n\n setup:\n steps:\n # setup Steps to run\n\n test:\n before_run:\n - setup\n envs:\n - IS_TEST: \"true\"\n steps:\n # test Steps to run\n\n ci:\n before_run:\n - test\n after_run:\n - send-notifications\n\n deploy:\n before_run:\n - test\n steps:\n # steps to deploy\n after_run:\n - send-notifications\n Based on the above example, if you run: bitrise run send-notifications : only the Steps of the send-notifications workflow will be executed. bitrise run setup : only the Steps of the setup Workflow will be executed. bitrise run test : first the Steps of the setup Workflow will be executed, then the Steps declared in test Workflow. bitrise run ci : will execute the Steps of the Workflows in the following order: setup test ci (the ci Workflow doesn’t have any Steps, but that’s not an issue. It just means that no Step will be executed here and the build will continue with the next Workflow in the chain). send-notifications bitrise run deploy : will execute the Steps of the Workflows in the following order: setup test deploy send-notifications This means that you can define what a setup and test should do in your project in the setup and test Workflows only once, and then you can reuse those in other Workflows. There’s no need to duplicate Steps between Workflows. The Bitrise CLI supports a small notation, called utility Workflow: a Workflow whose ID starts with an underscore character, for example, _setup . A utility Workflow can't be executed directly with a bitrise run command: they can be referenced with before_run and after_run properties. You can find utility Workflows at the end of the Workflow list if you run bitrise run or bitrise workflows : The following workflows are available:\n * ci\n * deploy\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\nThe following utility workflows are defined:\n * _send-notifications\n * _setup\n * _test\n " }, 
{ "title" : "Steps reference ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43332-steps-reference.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference ", 
"snippet" : "A Step encapsulates a build task: the code to perform that task, the inputs and parameters you can define for the task, and the outputs the task generates. A Step encapsulates a build task: the code to perform that task, the inputs and parameters you can define for the task, and the outputs the task...", 
"body" : "A Step encapsulates a build task: the code to perform that task, the inputs and parameters you can define for the task, and the outputs the task generates. A Step encapsulates a build task: the code to perform that task, the inputs and parameters you can define for the task, and the outputs the task generates. For example the Git Clone Step performs a git clone of the specified repository, with the specified inputs, such as the branch or the commit to clone. From a technical perspective, a Step is a semver versioned repository which includes the code of the Step and the interface definition of the Step. The Step interface definition is defined in the step.yml file for every Step. It includes: The dependencies of the Step. The inputs and outputs of the Step. The title and description of the Step. Properties such as the issue tracker or support URL, or certain filter properties. To include Steps in your Workflow , you have to reference them in the bitrise.yml file of your app. To do so, you will need the correct reference format for the Step. In the configuration file, you can also specify input values for the inputs defined in the Step's interface definition. " }, 
{ "title" : "Step reference\/ID format ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43332-steps-reference.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format ", 
"snippet" : "To refer to a Step in a bitrise.yml file, you need to include at least the Step ID. Optionally, you can specify the StepLib source and the Step version, too. A Step reference can contain three components: The StepLib source: a library of Step repositories, such as the official Bitrise Step Library ....", 
"body" : "To refer to a Step in a bitrise.yml file, you need to include at least the Step ID. Optionally, you can specify the StepLib source and the Step version, too. A Step reference can contain three components: The StepLib source: a library of Step repositories, such as the official Bitrise Step Library . The Step ID: every Step must have an ID as part of its step.yml definition. The Step version: the numerical version of the Step you want to include. Use the following syntax to reference a Step: <step_lib_source>::<step-id>@<version>: From these three components only the Step ID is required. For example: - script: This could be written as: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git::script@1: If the version is not defined, the latest version of the step will be used. If the StepLib source is not defined, the default_step_lib_source will be used. We recommend pinning the major version of a Step when referencing it. In the example above, script@1 means major version 1 of the Script Step is pinned: the Step will run with the latest available minor and patch versions of the Step. For example, if the latest minor version is 1.2, and the latest patch version is 1.2.2 then pinning major version 1 means the Step will use version 1.2.2. " }, 
{ "title" : "Special Step sources ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43332-steps-reference.html#UUID-ee5c654c-a954-fd48-5d69-375ac22c9efa_UUID-932bc0aa-0347-b6c2-f77c-ca78c7cce8ca", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step reference\/ID format \/ Special Step sources ", 
"snippet" : "There are two special Step sources: git:: and path:: When you use one of these sources, the Step won’t be identified through a Step Library but through the ID data you specify....", 
"body" : "There are two special Step sources: git:: and path:: When you use one of these sources, the Step won’t be identified through a Step Library but through the ID data you specify. " }, 
{ "title" : "Step data in the bitrise.yml file ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43332-steps-reference.html#UUID-b4cb038e-85cc-401e-074c-4111713ed725", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step data in the bitrise.yml file ", 
"snippet" : "The Step data and information you specify in the bitrise.yml file are the parameters of the Step you want to change, compared to the Step’s default definition. The Step data and information you specify in the bitrise.yml file are the parameters of the Step you want to change, compared to the Step’s ...", 
"body" : "The Step data and information you specify in the bitrise.yml file are the parameters of the Step you want to change, compared to the Step’s default definition. The Step data and information you specify in the bitrise.yml file are the parameters of the Step you want to change, compared to the Step’s default definition. To see the Step’s raw interface definition you can check it in the step library. The Step interface definitions can be found in the StepLib’s steps directory . If you don’t specify any input or other Step property in the bitrise.yml configuration, only the Step (reference\/ID), the Step will run with the default values as defined by the Step’s developer in the interface definition. Let’s see an example with a single Script Step, which will be executed when you run bitrise run test : format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n Specify inputs for the Step with the inputs: list property. An input consists of a key and a value : Indentation Indentation in the YAML format is very important! You should use two- or four-space indentation, and you can’t use tabs to indent! format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n \nworkflows:\n test:\n steps:\n - script:\n inputs:\n - content: \"echo 'Hello World!'\" If the Step doesn’t have any required inputs you don’t have to specify an input. You can specify values for as many inputs as you want to. Step input values are always string \/ text values and they are passed to the Step as Environment Variables. The value can be multiline too, using the standard YAML multiline format: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n inputs:\n - content: |\n #!\/bin\/bash\n set -ex\n var_to_print='Hello World!'\n echo \"${var_to_print}\" If you use a multiline value, like the one above, you have to indent the value with either two or four spaces, compared to the key! Force a Step to run even if a previous Step fails by setting the is_always_run property to true : format_version: 1.3.1\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n is_always_run: true\n inputs:\n - content: \"puts 'Hello Ruby!'\"\n - runner_bin: ruby\n Use the title property to add a descriptive title to your Step: format_version: 11\ndefault_step_lib_source: https:\/\/github.com\/bitrise-io\/bitrise-steplib.git\n\nworkflows:\n test:\n steps:\n - script@1.1.3:\n title: Print Hello Ruby\n is_always_run: true\n inputs:\n - content: \"puts 'Hello Ruby!'\"\n - runner_bin: ruby " }, 
{ "title" : "Step properties ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43332-steps-reference.html#UUID-e1c8c545-ddc7-cc13-8318-1e0492d75254", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step properties ", 
"snippet" : "Step properties provide important data of a Step, such as its project type, its source code or the dependencies it requires. A Step’s inputs and outputs are also defined as Step properties. Step properties provide important data of a Step, such as its project type, its source code or the dependencie...", 
"body" : "Step properties provide important data of a Step, such as its project type, its source code or the dependencies it requires. A Step’s inputs and outputs are also defined as Step properties. Step properties provide important data of a Step, such as its project type, its source code or the dependencies it requires. A Step’s inputs and outputs are also defined as Step properties. Let’s take a look at the properties! title , summary and description : metadata, for comments, tools and GUI. Meta properties as permanent comments These meta properties can be used for permanent comments. Standard YML comments are not preserved when the YML is normalized, converted to JSON or otherwise generated or transformed. These meta properties are. website : official website of the Step \/ service. source_code_url : the url where the Step’s source code can be viewed. support_url : url to the Step’s support \/ issue tracker. published_at : auto-generated at share - the StepLib publish date of the Step’s version source : auto-generated at share git clone information. asset_urls : auto-generated at share Step assets (StepLib specific), like icon image. host_os_tags : supported operating systems. Currently unused, reserved for future use. project_type_tags : project type tags if the Step is project type specific. Example: ios or android . Completely optional, and only used for search and filtering in Step lists. type_tags : generic type tags related to the Step. Example: utility , test or notification . Similar to project_type_tags , this property is completely optional, and only used for search and filtering in Step lists. deps : specifies the required dependencies of the Step. To declare a dependency, specify a package manager and then the dependency you wish to install. inputs : inputs (Environments) of the Step. outputs : outputs (Environments) of the Step. " }, 
{ "title" : "Step inputs reference ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43332-steps-reference.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference ", 
"snippet" : "Step inputs are environment items that tell the Bitrise CLI how to run a given Step. The inputs of a Step are defined in the step.yml file of every Step by setting the inputs property.. Step inputs are environment items that tell the Bitrise CLI how to run a given Step. The inputs of a Step are defi...", 
"body" : "Step inputs are environment items that tell the Bitrise CLI how to run a given Step. The inputs of a Step are defined in the step.yml file of every Step by setting the inputs property.. Step inputs are environment items that tell the Bitrise CLI how to run a given Step. The inputs of a Step are defined in the step.yml file of every Step by setting the inputs property.. Step inputs have the same syntax as every environment property. It consists of two main parts: a KEY: value pair and an opts field. inputs:\n- my_key_for_the_env: \"default value\" \n opts: \n title: An example env var item \n is_dont_change_value: false \n category: example my_key_for_the_env : the key of the input (required). default value : the default value of the input. You don’t always have to provide a default value. opts : optional properties. " }, 
{ "title" : "Step input properties ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43332-steps-reference.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-e37c5405-ee57-1169-0539-7515055a5c62", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Step input properties ", 
"snippet" : "The available properties for Step inputs: title , summary and description : metadata, for comments, tools and GUI. Meta properties as permanent comments These meta properties can be used for permanent comments. Standard YML comments are not preserved when the YML is normalized, converted to JSON or ...", 
"body" : "The available properties for Step inputs: title , summary and description : metadata, for comments, tools and GUI. Meta properties as permanent comments These meta properties can be used for permanent comments. Standard YML comments are not preserved when the YML is normalized, converted to JSON or otherwise generated or transformed. These meta properties are. is_expand : can be set to true or false . The default value is true so the Bitrise CLI expands Environment Variables (Env Vars) before passing it on to the Step. That means that if a Step input's value is an Env Var, the Bitrise CLI will pass the variable's value to the Step. If set to false , the CLI will pass the Env Var's key as a string. skip_if_empty : can be set to true or false . If set to true , the input will not be used if its value is empty. category : used to categorize the input. Inputs with the same category will appear grouped under one menu on the website UI, for the sake of convenience. value_options : list of the available values. is_required : can be set to true or false . If set to true , the step requires a non-empty value to be set for the input. is_dont_change_value : can be set to true or false . If set to true , the value of the input should not be changed and\/or should be hidden on UIs. Mainly used for debug inputs and for “ connection ” inputs (set to outputs of other Steps, to connect this Step with another one). is_template : can be set to true or false . If set to true , the input’s value will be evaulated as a Go template. is_sensitive : marking an input as sensitive means that it will only accept a Secret Environment Variable as its value. It is most frequently used for sensitive information such as passwords, API keys, tokens, but any input can be marked sensitive. " }, 
{ "title" : "Using template expressions for Step inputs ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43332-steps-reference.html#UUID-9f8b9db0-9a1b-deac-271f-75b66adbe270_UUID-005c1a11-1bf4-214a-3ecc-c1af25105771", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step inputs reference \/ Using template expressions for Step inputs ", 
"snippet" : "If you need a Step to use a certain value only in certain circumstances, use template expressions as Step inputs. Template expressions are evaluated before the Step uses the input. They are written in Go’s template language . Set the is_template property in the step.yml file of your project to use t...", 
"body" : "If you need a Step to use a certain value only in certain circumstances, use template expressions as Step inputs. Template expressions are evaluated before the Step uses the input. They are written in Go’s template language . Set the is_template property in the step.yml file of your project to use template expressions. Open the step.yml file of your project. Find the Step in which you wish to use a template expression. Add an opts field to the content of the Step. Add the is_template property to opts and set its value to true . Add the template expression to the Step’s content . Checking if the Bitrise CLI is in CI mode - script:\n title: Template example\n inputs:\n - content: |-\n {{if .IsCI}}\n echo \"CI mode\"\n {{else}}\n echo \"not CI mode\"\n {{end}}\n opts:\n is_template: true " }, 
{ "title" : "Step outputs reference ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43332-steps-reference.html#UUID-3a58a1fb-c6af-8695-bfbc-ca242defcddb", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Steps reference \/ Step outputs reference ", 
"snippet" : "Step outputs are environment items that are the result of running a given Step. You can check out the default outputs of a Step in the Workflow Editor on bitrise.io or in the step.yml file of the Step. Step outputs are environment items that are the result of running a given Step. For example, the D...", 
"body" : "Step outputs are environment items that are the result of running a given Step. You can check out the default outputs of a Step in the Workflow Editor on bitrise.io or in the step.yml file of the Step. Step outputs are environment items that are the result of running a given Step. For example, the Deploy to Bitrise.io Step generates two output envs by default: $BITRISE_PUBLIC_INSTALL_PAGE_URL BITRISE_PUBLIC_INSTALL_PAGE_URL_MAP You can check out the default outputs of a Step in the Workflow Editor on bitrise.io or in the step.yml file of the Step. Step outputs can be defined in the step.yml file of the project by setting the outputs attribute. They have the same syntax as every environment property. It consists of two main parts: a KEY: value pair and an opts field. The key and the value are required, the opts field is optional. - MY_KEY_FOR_THE_ENV: my value for the env\n opts:\n title: An example env var item\n is_dont_change_value: false\n category: example MY_KEY_FOR_THE_ENV : The key of the environment item (required). my value for the env : The value of the item (required). opts : Optional attributes. The default outputs of a Step cannot be changed by the user in the bitrise.yml file of the project: they can only be changed in the step.yml file. However, you can export the output in a custom Environment Variable . This is useful, for example, if you have the same step twice in your Workflow and you wish to use the generated output of both steps: workflows:\n primary:\n steps:\n - gradle-runner:\n outputs:\n - BITRISE_APK_PATH: ALIAS_APK_PATH\n In this example, the value for the BITRISE_APK_PATH Environment Variable will be exported under the ALIAS_APK_PATH key. " }, 
{ "title" : "Available Environment Variables ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-43263-available-environment-variables.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Available Environment Variables ", 
"snippet" : "Environment Variables (Env Vars) consist of a key and a value, as well as optional attributes. They can be defined on the level of apps, Workflows or Steps. Environment Variables (Env Vars) consist of a key and a value. They can also include optional attributes. They can be defined on the level of a...", 
"body" : "Environment Variables (Env Vars) consist of a key and a value, as well as optional attributes. They can be defined on the level of apps, Workflows or Steps. Environment Variables (Env Vars) consist of a key and a value. They can also include optional attributes. They can be defined on the level of apps , Workflows or Steps . You can set your own Env Vars but there is a selection of Env Vars that are exposed automatically by either the Bitrise CLI or bitrise.io . Env Vars exposed by the Bitrise CLI are available everywhere, even if you run the build on your own computer. Env Vars exposed by bitrise.io are available for builds running on bitrise.io virtual machines. Pipeline Env Vars exposed by bitrise.io are only available for Pipeline builds running on bitrise.io virtual machines. In addition, plenty of Bitrise Steps export output variables. These variables are available to subsequent Steps during a build. You can find them in the Step configuration of each Step: In the Workflow Editor, you can check them in the Output properties section of a Step. In the step.yml of a Step, you can find them under outputs . Release Management also passes a number of Env Vars to Bitrise builds: Table 35, “. Environment Variables have a set availability order. This is the order in which they are made available as a build progresses: Availability order of Environment Variables. Step outputs exposed as Env Vars Steps can also expose Step outputs as Env Vars. For example, a Step that builds a binary can expose that binary to other Steps as an Env Var. As basically any Bitrise Step can expose outputs this way, we won't list them all but you can find all Environment Variables related to the git cloning process: Table 36, “. Env Vars exposed by the Bitrise CLI Env Var key Description $BITRISE_TRIGGERED_WORKFLOW_ID The ID of the Workflow that was triggered . This Env Var is exposed regardless of whether the Workflow was triggered manually or automatically. $BITRISE_TRIGGERED_WORKFLOW_TITLE The title of the Workflow that was triggered. This Env Var is exposed regardless of whether the Workflow was triggered manually or automatically. $BITRISE_BUILD_STATUS The current status of the build. The available options are: 0: Successful. 1: Failed. A successful current status means that none of the previous Steps in the build failed. $BITRISE_SOURCE_DIR Path to the base working directory. By default, it’s the directory where Bitrise runs, unless you provide a different value. This can be overwritten during the build, which will change the working directory for subsequent Steps in the build. $BITRISE_DEPLOY_DIR Path to the directory that stores artifacts and files for deployment. It’s a temporary directory created by the Bitrise CLI by default, and can be overwritten before starting the Bitrise CLI. The Deploy to Bitrise.io Step looks for your build artifacts - such as an IPA or APK of the app -, test results, and other files in this directory. $BITRISE_TEST_RESULT_DIR Root directory for all test results created by the Bitrise CLI. Test results placed in this directory can be accessed in the Test Reports add-on . $CI Indicates whether the Bitrise CLI is running in Continuous Integration mode. The possible values are: true false $PR Indicates whether the Bitrise CLI is running in PR (Pull Request) mode. Running in Pull Request mode means that Bitrise builds your code in the state as if the Pull Request was already merged. The possible values are: true false Env Vars exposed by bitrise.io Env Var key Description $BITRISE_BUILD_NUMBER Build number of the build on bitrise.io . $BITRISE_APP_TITLE The title of your app on bitrise.io . You can change it any time on the Settings tab of the app. $BITRISE_APP_URL The URL or your app on bitrise.io . This is not the same as the git repository URL! An app URL has the following format: app.bitrise.io\/APP-SLUG\/ For example: https:\/\/app.bitrise.io\/app\/31e481ce08e0xfd9. $BITRISE_APP_SLUG The slug that uniquely identifies your app on bitrise.io . It’s part of the app URL, too. $BITRISE_BUILD_URL The URL of the build on bitrise.io . $BITRISE_BUILD_SLUG The slug that uniquely identifies a build on bitrise.io . It’s part of the build URL, too. For example, let’s take a look at this build URL: https:\/\/app.bitrise.io\/build\/d75abbebxfc9ca4e. The build slug is d65abbebxfc9ca4e in this example. $BITRISE_BUILD_TRIGGER_TIMESTAMP The date and time when the build was triggered. $GIT_REPOSITORY_URL The URL of the Git repository that hosts your app. This can be changed in the Settings tab of the app. It can be in either SSH or HTTPS format. $BITRISE_GIT_BRANCH The git branch that is built by Bitrise. For example, main . $BITRISEIO_GIT_BRANCH_DEST Used only with builds triggered by pull requests: the destination\/target branch of the pull request that triggered the build. For example, a pull request wants to merge the content of a branch into the branch main . In this case, this Env Var’s value is main . $BITRISE_GIT_TAG If a build is triggered by a Git Tag, this Env Var stores the tag used. $BITRISE_GIT_COMMIT The commit hash of the Git commit that triggered the build, when applicable. $BITRISE_GIT_MESSAGE The commit message, pull request title, or the message you specified if you triggered the build manually. $BITRISEIO_GIT_REPOSITORY_OWNER The owner of the Git repository of the app. $BITRISEIO_GIT_REPOSITORY_SLUG The slug of the Git repository of the app. $BITRISE_PULL_REQUEST The ID of the pull request that triggered a build. $BITRISEIO_PULL_REQUEST_REPOSITORY_URL The URL of the repository from where the pull request that triggered a build has been sent. $BITRISEIO_PULL_REQUEST_MERGE_BRANCH The pre-merge branch - if the Git hosting provider supports and provides the pre-merged state of a pull request on a special merge branch. $BITRISEIO_PULL_REQUEST_HEAD_BRANCH The pull request head branch, if the Git hosting provider system supports and provides this. This special git ref should point to the source of the pull request. $GITHUB_PR_IS_DRAFT For apps hosted on GitHub only: it is set to true if the build is triggered by a draft pull request . $BITRISE_PROVISION_URL The URL of the Apple provisioning profiles uploaded to bitrise.io . If there is more than one provisioning profile uploaded for your app, a pipe character ( | ) separates the URLs in the list. This is only relevant for iOS apps and for cross-platform apps with iOS versions. $BITRISE_CERTIFICATE_URL The URL of the Apple certificates uploaded to bitrise.io . If there is more than one certificate uploaded for your app, a pipe character ( | ) separates the URLs in the list. This is only relevant for iOS apps and for cross-platform apps with iOS versions. $BITRISE_CERTIFICATE_PASSPHRASE The passphrase you set for the uploaded Apple certificates on the app’s Code Signing & Files tab. If there is more than one certificate with a passphrase, a pipe character ( | ) separates the phrases in the list. This is only relevant for iOS apps and for cross-platform apps with iOS versions. $BITRISE_IO Indicates that the build is running in a bitrise.io environment. Value is set to true by Bitrise when it starts a build. Pipeline Env Vars exposed by bitrise.io Env Var key Description $BITRISEIO_PIPELINE_ID The ID of the running Pipeline build. This Env Var is exposed regardless of whether the Pipeline was triggered manually or automatically. $BITRISEIO_PIPELINE_TITLE The name of the running Pipeline build. This Env Var is exposed regardless of whether the Pipeline was triggered manually or automatically. $BITRISEIO_FINISHED_STAGES The status of previously finished Stages and Workflows in a build. Please note that the value of this Env Var may change in the future! $BITRISEIO_PIPELINE_BUILD_STATUS The current status of the Pipeline build. The value of this Env Var can be: succeeded , succeeded_with_abort , failed , and aborted . While the Pipeline is running, the Env Var's status is based on the previously finished Stages. $BITRISEIO_PIPELINE_BUILD_URL The URL of the Pipeline build. Environment Variables passed to the builds from Release Management Env Var key Description RM_RELEASE_CANDIDATE_VERSION The version of the binary (APK\/AAB or IPA file) generated by the release candidate build. RM_RELEASE_CANDIDATE_DOWNLOAD_URL The download URL of the binary (APK\/AAB or IPA file) generated by the release candidate build. RM_RELEASE_CANDIDATE_SLUG Unique identifier of the binary (APK\/AAB or IPA file) generated by the release candidate build. RM_RELEASE_VERSION The release name (for Google Play releases) or version (for App Store releases) in Release Management. RM_RELEASE_CANDIDATE_BUILD_SLUG The build slug of the build that was selected as a release candidate for the release. Env Vars exposed by the Git Clone Repository Step Env Var key Description $GIT_CLONE_COMMIT_HASH The hash of the commit that the build uses (the cloned commit). $GIT_CLONE_COMMIT_MESSAGE_SUBJECT The subject of the commit message of the cloned commit. $GIT_CLONE_COMMIT_MESSAGE_BODY The body (content) of the commit message of the cloned commit. $GIT_CLONE_COMMIT_COUNT The commit count of the cloned commit. This Env Var is influenced by the clone_depth Step input. For more information, check out the Git Clone Step description . $GIT_CLONE_COMMIT_AUTHOR_NAME The name of the author of the cloned commit. $GIT_CLONE_COMMIT_AUTHOR_EMAIL The email of the author of the cloned commit. $GIT_CLONE_COMMIT_COMMITER_NAME The name of the committer of the cloned commit. $GIT_CLONE_COMMIT_COMMITER_EMAIL The email of the committer of the cloned commit. " }, 
{ "title" : "Bitrise tools ", 
"url" : "88887-41967-bitrise-docs/88887-54462-references/88887-54075-bitrise-tools.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ References \/ Bitrise tools ", 
"snippet" : "A list of open source tools used and maintained by the Bitrise team. Here is a list of our open source tools maintained by the Bitrise team. Bitrise tools Name Type Description Link Bitrise CLI CLI The Bitrise CLI which is used on bitrise.io to run builds. You can use it to run builds locally. https...", 
"body" : "A list of open source tools used and maintained by the Bitrise team. Here is a list of our open source tools maintained by the Bitrise team. Bitrise tools Name Type Description Link Bitrise CLI CLI The Bitrise CLI which is used on bitrise.io to run builds. You can use it to run builds locally. https:\/\/github.com\/bitrise-io\/bitrise stepman CLI tool The Step Collection Manager used for managing the Step Library. https:\/\/github.com\/bitrise-io\/stepman envman CLI tool The Environment Variable Manager used by the Bitrise CLI to isolate and manage Environment Variables during the build. It can also be used independently of the Bitrise CLI. https:\/\/github.com\/bitrise-io\/envman init CLI core plugin Use this plugin so that our project scanner can detect the type of your project locally and generate a Bitrise configuration. https:\/\/github.com\/bitrise-io\/bitrise-plugins-init.git step CLI core plugin Use this plugin to list, retrieve Step information or create Steps. https:\/\/github.com\/bitrise-io\/bitrise-plugins-step workflow-editor CLI core plugin Use this plugin to configure your builds’ bitrise.yml config locally with the offline Workflow Editor. https:\/\/github.com\/bitrise-io\/bitrise-workflow-editor.git bitrise-plugin-io CLI core plugin Use this plugin to manage your apps on bitrise.io right from the Terminal \/ command line. https:\/\/github.com\/bitrise-io\/bitrise-plugins-io bitrise webhooks Webhook processor This Bitrise Webhooks processor transforms various incoming webhooks (for example, from GitHub, Bitbucket, or Slack) to bitrise.io ’s Build Trigger API format, and calls it to start a build. https:\/\/github.com\/bitrise-io\/bitrise-webhooks " }, 
{ "title" : "Teams plan FAQ ", 
"url" : "88887-41967-bitrise-docs/88887-64987-teams-plan-faq.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Teams plan FAQ ", 
"snippet" : "As part of our efforts to introduce a credit-based model, we’re now offering our new Teams plan. You can sign up for a free trial, or subscribe to the full plan. Here’s everything you need to know about it!...", 
"body" : "As part of our efforts to introduce a credit-based model, we’re now offering our new Teams plan. You can sign up for a free trial, or subscribe to the full plan. Here’s everything you need to know about it! " }, 
{ "title" : "Credit-based Hobby plan FAQ ", 
"url" : "88887-41967-bitrise-docs/88887-65065-credit-based-hobby-plan-faq.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Credit-based Hobby plan FAQ ", 
"snippet" : "If you have a small hobby project that needs a Continous Integration service, Bitrise’s free Hobby plan is your best bet. Here’s everything you need to know about the credit-based Hobby plan!...", 
"body" : "If you have a small hobby project that needs a Continous Integration service, Bitrise’s free Hobby plan is your best bet. Here’s everything you need to know about the credit-based Hobby plan! " }, 
{ "title" : "404 - Page Not Found ", 
"url" : "88887-41967-bitrise-docs/404.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ 404 - Page Not Found ", 
"snippet" : "Sorry, we couldn't find the page you were looking for. Go back to the home page, or check out some of our most popular content: Getting startedBuild numbering and app versioningManaging an app's bitrise.yml fileEnvironment Variables...", 
"body" : "Sorry, we couldn't find the page you were looking for. Go back to the home page, or check out some of our most popular content: Getting startedBuild numbering and app versioningManaging an app's bitrise.yml fileEnvironment Variables" }, 
{ "title" : "Comparing credit-based and concurrency-based plans ", 
"url" : "88887-41967-bitrise-docs/88887-65315-comparing-credit-based-and-concurrency-based-plans.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Comparing credit-based and concurrency-based plans ", 
"snippet" : "Up until now, almost all Bitrise subscriptions have been concurrency-based. Concurrencies dictate how many builds you can run at the same time on Bitrise: the more concurrencies you have, the more simultaneous builds you can run. To scale up, you had to purchase more concurrencies or risk having tim...", 
"body" : "Up until now, almost all Bitrise subscriptions have been concurrency-based. Concurrencies dictate how many builds you can run at the same time on Bitrise: the more concurrencies you have, the more simultaneous builds you can run. To scale up, you had to purchase more concurrencies or risk having time-critical builds being stuck in a queue. As of August 2021, you can no longer sign up for a concurrency-based subscription plan as a new user on Bitrise. All new accounts are credit-based accounts: after signing up, you can run builds using credits. You receive credits every month in credit bundles, the amount depending on your subscription plan. For more information about our Hobby plan and Teams plan, the two latest additions to our credit-based model, check out their relevant FAQs and our pricing page: Teams plan FAQCredit-based Hobby plan FAQhttps:\/\/www.bitrise.io\/pricing In this article, we’ll go through the most significant differences between the everyday experience of these different subscription models. First, let’s see a quick comparison - and then dive into the details below! Concurrency-based plans vs credit-based plans Features Concurrency-based Credit-based Build timeout Up to 90 minutes Up to four hours (3.5 hours on the Teams plan) Concurrency limitations 1-20 5-80 Machine type\/compute options The plan defines the machine type Choose between options on a Workflow level Resource usage monitoring No monitoring Credit overview and detailed usage " }, 
{ "title" : "Optimizing your build times ", 
"url" : "88887-41967-bitrise-docs/88887-65385-optimizing-your-build-times.html", 
"breadcrumbs" : "Parent publication \/ Welcome to Bitrise documentation! \/ Optimizing your build times ", 
"snippet" : "You can improve your build times with the following tips....", 
"body" : "You can improve your build times with the following tips. " }, 
{ "title" : "Getting started ", 
"url" : "88887-329-releases/88887-19839-getting-started.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Getting started ", 
"snippet" : "Bitrise is powerful and complex - but getting started is easy and intuitive! You can kick off your first build within minutes of signing up. Let’s go over what you need to do to make that happen!...", 
"body" : "Bitrise is powerful and complex - but getting started is easy and intuitive! You can kick off your first build within minutes of signing up. Let’s go over what you need to do to make that happen! " }, 
{ "title" : "Teams and Organizations ", 
"url" : "88887-329-releases/88887-19839-getting-started.html#UUID-9bb609fc-1b22-e628-165d-46097239fb95_UUID-603c18c7-eb0e-7dfc-df86-42313f896cd3", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Getting started \/ Teams and Organizations ", 
"snippet" : "Once you set up a new app, you can start inviting team members. If you have a Developer or an Organization plan, you can have unlimited team members! Only members of an app’s team can view a private app, including its logs. For public apps, anyone can view the build logs who has the URL to the build...", 
"body" : "Once you set up a new app, you can start inviting team members. If you have a Developer or an Organization plan, you can have unlimited team members! Only members of an app’s team can view a private app, including its logs. For public apps, anyone can view the build logs who has the URL to the build. You can also create Orgs if you are on one of our Organization plans. Organizations allow you to manage entire teams quickly and effectively. " }, 
{ "title" : "Infrastructure ", 
"url" : "88887-329-releases/88887-19841-infrastructure-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Infrastructure ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "Account management ", 
"url" : "88887-329-releases/88887-19826-account-management.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Account management ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "Workspaces and apps ", 
"url" : "88887-329-releases/88887-52428-workspaces-and-apps-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Workspaces and apps ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "Steps and Workflows ", 
"url" : "88887-329-releases/88887-19843-steps-and-workflows-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Steps and Workflows ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "Builds ", 
"url" : "88887-329-releases/88887-19824-builds-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Builds ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "Code signing ", 
"url" : "88887-329-releases/88887-19849-code-signing-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Code signing ", 
"snippet" : "Playing in the sandbox....", 
"body" : "Playing in the sandbox. " }, 
{ "title" : "Testing ", 
"url" : "88887-329-releases/88887-19828-testing-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Testing ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "Deploying ", 
"url" : "88887-329-releases/88887-19830-deploying-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Deploying ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "App monitoring ", 
"url" : "88887-329-releases/88887-19847-monitoring-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ App monitoring ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "Bitrise CLI ", 
"url" : "88887-329-releases/88887-19845-bitrise-cli-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Bitrise CLI ", 
"snippet" : "The Bitrise CLI is awesome. Workflow Editor bitrise.yml Open the Workflow Editor. Open the bitrise.yml file....", 
"body" : "The Bitrise CLI is awesome. Workflow Editor bitrise.yml Open the Workflow Editor. Open the bitrise.yml file. " }, 
{ "title" : "References ", 
"url" : "88887-329-releases/88887-52430-references-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ References ", 
"snippet" : "...", 
"body" : "" }, 
{ "title" : "Bitrise API ", 
"url" : "88887-329-releases/88887-19819-bitrise-api-sandbox.html", 
"breadcrumbs" : "Parent publication \/ Bitrise Docs \/ Bitrise API ", 
"snippet" : "...", 
"body" : "" }
]
$(document).trigger('search.ready');
});